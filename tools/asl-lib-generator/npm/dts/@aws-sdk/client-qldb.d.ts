// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-qldb' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CancelJournalKinesisStreamCommandInput, CancelJournalKinesisStreamCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/CancelJournalKinesisStreamCommand";
    import { CreateLedgerCommandInput, CreateLedgerCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/CreateLedgerCommand";
    import { DeleteLedgerCommandInput, DeleteLedgerCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/DeleteLedgerCommand";
    import { DescribeJournalKinesisStreamCommandInput, DescribeJournalKinesisStreamCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/DescribeJournalKinesisStreamCommand";
    import { DescribeJournalS3ExportCommandInput, DescribeJournalS3ExportCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/DescribeJournalS3ExportCommand";
    import { DescribeLedgerCommandInput, DescribeLedgerCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/DescribeLedgerCommand";
    import { ExportJournalToS3CommandInput, ExportJournalToS3CommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ExportJournalToS3Command";
    import { GetBlockCommandInput, GetBlockCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/GetBlockCommand";
    import { GetDigestCommandInput, GetDigestCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/GetDigestCommand";
    import { GetRevisionCommandInput, GetRevisionCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/GetRevisionCommand";
    import { ListJournalKinesisStreamsForLedgerCommandInput, ListJournalKinesisStreamsForLedgerCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListJournalKinesisStreamsForLedgerCommand";
    import { ListJournalS3ExportsCommandInput, ListJournalS3ExportsCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListJournalS3ExportsCommand";
    import { ListJournalS3ExportsForLedgerCommandInput, ListJournalS3ExportsForLedgerCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListJournalS3ExportsForLedgerCommand";
    import { ListLedgersCommandInput, ListLedgersCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListLedgersCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListTagsForResourceCommand";
    import { StreamJournalToKinesisCommandInput, StreamJournalToKinesisCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/StreamJournalToKinesisCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/UntagResourceCommand";
    import { UpdateLedgerCommandInput, UpdateLedgerCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/UpdateLedgerCommand";
    import { UpdateLedgerPermissionsModeCommandInput, UpdateLedgerPermissionsModeCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/UpdateLedgerPermissionsModeCommand";
    import { QLDBClient } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    /**
        * <p>The control plane for Amazon QLDB</p>
        */
    export class QLDB extends QLDBClient {
            /**
                * <p>Ends a given Amazon QLDB journal stream. Before a stream can be canceled, its current
                *          status must be <code>ACTIVE</code>.</p>
                *          <p>You can't restart a stream after you cancel it. Canceled QLDB stream resources are
                *          subject to a 7-day retention period, so they are automatically deleted after this limit
                *          expires.</p>
                */
            cancelJournalKinesisStream(args: CancelJournalKinesisStreamCommandInput, options?: __HttpHandlerOptions): Promise<CancelJournalKinesisStreamCommandOutput>;
            cancelJournalKinesisStream(args: CancelJournalKinesisStreamCommandInput, cb: (err: any, data?: CancelJournalKinesisStreamCommandOutput) => void): void;
            cancelJournalKinesisStream(args: CancelJournalKinesisStreamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelJournalKinesisStreamCommandOutput) => void): void;
            /**
                * <p>Creates a new ledger in your Amazon Web Services account in the current Region.</p>
                */
            createLedger(args: CreateLedgerCommandInput, options?: __HttpHandlerOptions): Promise<CreateLedgerCommandOutput>;
            createLedger(args: CreateLedgerCommandInput, cb: (err: any, data?: CreateLedgerCommandOutput) => void): void;
            createLedger(args: CreateLedgerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLedgerCommandOutput) => void): void;
            /**
                * <p>Deletes a ledger and all of its contents. This action is irreversible.</p>
                *          <p>If deletion protection is enabled, you must first disable it before you can delete the
                *       ledger. You can disable it by calling the <code>UpdateLedger</code> operation to set the flag to <code>false</code>.</p>
                */
            deleteLedger(args: DeleteLedgerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLedgerCommandOutput>;
            deleteLedger(args: DeleteLedgerCommandInput, cb: (err: any, data?: DeleteLedgerCommandOutput) => void): void;
            deleteLedger(args: DeleteLedgerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLedgerCommandOutput) => void): void;
            /**
                * <p>Returns detailed information about a given Amazon QLDB journal stream. The output
                *          includes the Amazon Resource Name (ARN), stream name, current status, creation time, and
                *          the parameters of the original stream creation request.</p>
                *          <p>This action does not return any expired journal streams. For more information, see
                *             <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/streams.create.html#streams.create.states.expiration">Expiration for terminal streams</a> in the <i>Amazon QLDB Developer
                *             Guide</i>.</p>
                */
            describeJournalKinesisStream(args: DescribeJournalKinesisStreamCommandInput, options?: __HttpHandlerOptions): Promise<DescribeJournalKinesisStreamCommandOutput>;
            describeJournalKinesisStream(args: DescribeJournalKinesisStreamCommandInput, cb: (err: any, data?: DescribeJournalKinesisStreamCommandOutput) => void): void;
            describeJournalKinesisStream(args: DescribeJournalKinesisStreamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeJournalKinesisStreamCommandOutput) => void): void;
            /**
                * <p>Returns information about a journal export job, including the ledger name, export ID,
                *          creation time, current status, and the parameters of the original export creation
                *          request.</p>
                *          <p>This action does not return any expired export jobs. For more information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/export-journal.request.html#export-journal.request.expiration">Export job expiration</a> in the <i>Amazon QLDB Developer
                *          Guide</i>.</p>
                *          <p>If the export job with the given <code>ExportId</code> doesn't exist, then throws
                *             <code>ResourceNotFoundException</code>.</p>
                *          <p>If the ledger with the given <code>Name</code> doesn't exist, then throws
                *             <code>ResourceNotFoundException</code>.</p>
                */
            describeJournalS3Export(args: DescribeJournalS3ExportCommandInput, options?: __HttpHandlerOptions): Promise<DescribeJournalS3ExportCommandOutput>;
            describeJournalS3Export(args: DescribeJournalS3ExportCommandInput, cb: (err: any, data?: DescribeJournalS3ExportCommandOutput) => void): void;
            describeJournalS3Export(args: DescribeJournalS3ExportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeJournalS3ExportCommandOutput) => void): void;
            /**
                * <p>Returns information about a ledger, including its state, permissions mode, encryption at
                *          rest settings, and when it was created.</p>
                */
            describeLedger(args: DescribeLedgerCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLedgerCommandOutput>;
            describeLedger(args: DescribeLedgerCommandInput, cb: (err: any, data?: DescribeLedgerCommandOutput) => void): void;
            describeLedger(args: DescribeLedgerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLedgerCommandOutput) => void): void;
            /**
                * <p>Exports journal contents within a date and time range from a ledger into a specified
                *          Amazon Simple Storage Service (Amazon S3) bucket. A journal export job can write the data objects in either the text
                *          or binary representation of Amazon Ion format, or in <i>JSON Lines</i> text
                *          format.</p>
                *          <p>In JSON Lines format, each journal block in the exported data object is a valid JSON
                *          object that is delimited by a newline. You can use this format to easily integrate JSON
                *          exports with analytics tools such as Glue and Amazon Athena
                *          because these services can parse newline-delimited JSON automatically. For more information
                *          about the format, see <a href="https://jsonlines.org/">JSON Lines</a>.</p>
                *          <p>If the ledger with the given <code>Name</code> doesn't exist, then throws
                *             <code>ResourceNotFoundException</code>.</p>
                *          <p>If the ledger with the given <code>Name</code> is in <code>CREATING</code> status, then
                *          throws <code>ResourcePreconditionNotMetException</code>.</p>
                *          <p>You can initiate up to two concurrent journal export requests for each ledger. Beyond
                *          this limit, journal export requests throw <code>LimitExceededException</code>.</p>
                */
            exportJournalToS3(args: ExportJournalToS3CommandInput, options?: __HttpHandlerOptions): Promise<ExportJournalToS3CommandOutput>;
            exportJournalToS3(args: ExportJournalToS3CommandInput, cb: (err: any, data?: ExportJournalToS3CommandOutput) => void): void;
            exportJournalToS3(args: ExportJournalToS3CommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ExportJournalToS3CommandOutput) => void): void;
            /**
                * <p>Returns a block object at a specified address in a journal. Also returns a proof of the
                *          specified block for verification if <code>DigestTipAddress</code> is provided.</p>
                *          <p>For information about the data contents in a block, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/journal-contents.html">Journal contents</a> in the
                *             <i>Amazon QLDB Developer Guide</i>.</p>
                *          <p>If the specified ledger doesn't exist or is in <code>DELETING</code> status, then throws
                *             <code>ResourceNotFoundException</code>.</p>
                *          <p>If the specified ledger is in <code>CREATING</code> status, then throws
                *             <code>ResourcePreconditionNotMetException</code>.</p>
                *          <p>If no block exists with the specified address, then throws
                *             <code>InvalidParameterException</code>.</p>
                */
            getBlock(args: GetBlockCommandInput, options?: __HttpHandlerOptions): Promise<GetBlockCommandOutput>;
            getBlock(args: GetBlockCommandInput, cb: (err: any, data?: GetBlockCommandOutput) => void): void;
            getBlock(args: GetBlockCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBlockCommandOutput) => void): void;
            /**
                * <p>Returns the digest of a ledger at the latest committed block in the journal. The
                *          response includes a 256-bit hash value and a block address.</p>
                */
            getDigest(args: GetDigestCommandInput, options?: __HttpHandlerOptions): Promise<GetDigestCommandOutput>;
            getDigest(args: GetDigestCommandInput, cb: (err: any, data?: GetDigestCommandOutput) => void): void;
            getDigest(args: GetDigestCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDigestCommandOutput) => void): void;
            /**
                * <p>Returns a revision data object for a specified document ID and block address. Also
                *          returns a proof of the specified revision for verification if <code>DigestTipAddress</code>
                *          is provided.</p>
                */
            getRevision(args: GetRevisionCommandInput, options?: __HttpHandlerOptions): Promise<GetRevisionCommandOutput>;
            getRevision(args: GetRevisionCommandInput, cb: (err: any, data?: GetRevisionCommandOutput) => void): void;
            getRevision(args: GetRevisionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRevisionCommandOutput) => void): void;
            /**
                * <p>Returns an array of all Amazon QLDB journal stream descriptors for a given ledger. The
                *          output of each stream descriptor includes the same details that are returned by
                *             <code>DescribeJournalKinesisStream</code>.</p>
                *          <p>This action does not return any expired journal streams. For more information, see
                *             <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/streams.create.html#streams.create.states.expiration">Expiration for terminal streams</a> in the <i>Amazon QLDB Developer
                *             Guide</i>.</p>
                *          <p>This action returns a maximum of <code>MaxResults</code> items. It is paginated so that
                *          you can retrieve all the items by calling <code>ListJournalKinesisStreamsForLedger</code>
                *          multiple times.</p>
                */
            listJournalKinesisStreamsForLedger(args: ListJournalKinesisStreamsForLedgerCommandInput, options?: __HttpHandlerOptions): Promise<ListJournalKinesisStreamsForLedgerCommandOutput>;
            listJournalKinesisStreamsForLedger(args: ListJournalKinesisStreamsForLedgerCommandInput, cb: (err: any, data?: ListJournalKinesisStreamsForLedgerCommandOutput) => void): void;
            listJournalKinesisStreamsForLedger(args: ListJournalKinesisStreamsForLedgerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListJournalKinesisStreamsForLedgerCommandOutput) => void): void;
            /**
                * <p>Returns an array of journal export job descriptions for all ledgers that are associated
                *          with the current Amazon Web Services account and Region.</p>
                *          <p>This action returns a maximum of <code>MaxResults</code> items, and is paginated so that
                *          you can retrieve all the items by calling <code>ListJournalS3Exports</code> multiple
                *          times.</p>
                *          <p>This action does not return any expired export jobs. For more information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/export-journal.request.html#export-journal.request.expiration">Export job expiration</a> in the <i>Amazon QLDB Developer
                *          Guide</i>.</p>
                */
            listJournalS3Exports(args: ListJournalS3ExportsCommandInput, options?: __HttpHandlerOptions): Promise<ListJournalS3ExportsCommandOutput>;
            listJournalS3Exports(args: ListJournalS3ExportsCommandInput, cb: (err: any, data?: ListJournalS3ExportsCommandOutput) => void): void;
            listJournalS3Exports(args: ListJournalS3ExportsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListJournalS3ExportsCommandOutput) => void): void;
            /**
                * <p>Returns an array of journal export job descriptions for a specified ledger.</p>
                *          <p>This action returns a maximum of <code>MaxResults</code> items, and is paginated so that
                *          you can retrieve all the items by calling <code>ListJournalS3ExportsForLedger</code>
                *          multiple times.</p>
                *          <p>This action does not return any expired export jobs. For more information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/export-journal.request.html#export-journal.request.expiration">Export job expiration</a> in the <i>Amazon QLDB Developer
                *          Guide</i>.</p>
                */
            listJournalS3ExportsForLedger(args: ListJournalS3ExportsForLedgerCommandInput, options?: __HttpHandlerOptions): Promise<ListJournalS3ExportsForLedgerCommandOutput>;
            listJournalS3ExportsForLedger(args: ListJournalS3ExportsForLedgerCommandInput, cb: (err: any, data?: ListJournalS3ExportsForLedgerCommandOutput) => void): void;
            listJournalS3ExportsForLedger(args: ListJournalS3ExportsForLedgerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListJournalS3ExportsForLedgerCommandOutput) => void): void;
            /**
                * <p>Returns an array of ledger summaries that are associated with the current Amazon Web Services account
                *          and Region.</p>
                *          <p>This action returns a maximum of 100 items and is paginated so that you can
                *          retrieve all the items by calling <code>ListLedgers</code> multiple times.</p>
                */
            listLedgers(args: ListLedgersCommandInput, options?: __HttpHandlerOptions): Promise<ListLedgersCommandOutput>;
            listLedgers(args: ListLedgersCommandInput, cb: (err: any, data?: ListLedgersCommandOutput) => void): void;
            listLedgers(args: ListLedgersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLedgersCommandOutput) => void): void;
            /**
                * <p>Returns all tags for a specified Amazon QLDB resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Creates a journal stream for a given Amazon QLDB ledger. The stream captures every
                *          document revision that is committed to the ledger's journal and delivers the data to a
                *          specified Amazon Kinesis Data Streams resource.</p>
                */
            streamJournalToKinesis(args: StreamJournalToKinesisCommandInput, options?: __HttpHandlerOptions): Promise<StreamJournalToKinesisCommandOutput>;
            streamJournalToKinesis(args: StreamJournalToKinesisCommandInput, cb: (err: any, data?: StreamJournalToKinesisCommandOutput) => void): void;
            streamJournalToKinesis(args: StreamJournalToKinesisCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StreamJournalToKinesisCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to a specified Amazon QLDB resource.</p>
                *          <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a
                *          resource, your request fails and returns an error.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes one or more tags from a specified Amazon QLDB resource. You can specify up to 50
                *          tag keys to remove.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates properties on a ledger.</p>
                */
            updateLedger(args: UpdateLedgerCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLedgerCommandOutput>;
            updateLedger(args: UpdateLedgerCommandInput, cb: (err: any, data?: UpdateLedgerCommandOutput) => void): void;
            updateLedger(args: UpdateLedgerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLedgerCommandOutput) => void): void;
            /**
                * <p>Updates the permissions mode of a ledger.</p>
                *          <important>
                *             <p>Before you switch to the <code>STANDARD</code> permissions mode, you must first
                *             create all required IAM policies and table tags to avoid disruption to your users. To
                *             learn more, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/ledger-management.basics.html#ledger-mgmt.basics.update-permissions.migrating">Migrating to the standard permissions mode</a> in the <i>Amazon QLDB
                *                Developer Guide</i>.</p>
                *          </important>
                */
            updateLedgerPermissionsMode(args: UpdateLedgerPermissionsModeCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLedgerPermissionsModeCommandOutput>;
            updateLedgerPermissionsMode(args: UpdateLedgerPermissionsModeCommandInput, cb: (err: any, data?: UpdateLedgerPermissionsModeCommandOutput) => void): void;
            updateLedgerPermissionsMode(args: UpdateLedgerPermissionsModeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLedgerPermissionsModeCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/CancelJournalKinesisStreamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelJournalKinesisStreamRequest, CancelJournalKinesisStreamResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface CancelJournalKinesisStreamCommandInput extends CancelJournalKinesisStreamRequest {
    }
    export interface CancelJournalKinesisStreamCommandOutput extends CancelJournalKinesisStreamResponse, __MetadataBearer {
    }
    /**
        * <p>Ends a given Amazon QLDB journal stream. Before a stream can be canceled, its current
        *          status must be <code>ACTIVE</code>.</p>
        *          <p>You can't restart a stream after you cancel it. Canceled QLDB stream resources are
        *          subject to a 7-day retention period, so they are automatically deleted after this limit
        *          expires.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, CancelJournalKinesisStreamCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, CancelJournalKinesisStreamCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new CancelJournalKinesisStreamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelJournalKinesisStreamCommandInput} for command's `input` shape.
        * @see {@link CancelJournalKinesisStreamCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class CancelJournalKinesisStreamCommand extends $Command<CancelJournalKinesisStreamCommandInput, CancelJournalKinesisStreamCommandOutput, QLDBClientResolvedConfig> {
            readonly input: CancelJournalKinesisStreamCommandInput;
            constructor(input: CancelJournalKinesisStreamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelJournalKinesisStreamCommandInput, CancelJournalKinesisStreamCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/CreateLedgerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateLedgerRequest, CreateLedgerResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface CreateLedgerCommandInput extends CreateLedgerRequest {
    }
    export interface CreateLedgerCommandOutput extends CreateLedgerResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new ledger in your Amazon Web Services account in the current Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, CreateLedgerCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, CreateLedgerCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new CreateLedgerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLedgerCommandInput} for command's `input` shape.
        * @see {@link CreateLedgerCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class CreateLedgerCommand extends $Command<CreateLedgerCommandInput, CreateLedgerCommandOutput, QLDBClientResolvedConfig> {
            readonly input: CreateLedgerCommandInput;
            constructor(input: CreateLedgerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLedgerCommandInput, CreateLedgerCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/DeleteLedgerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteLedgerRequest } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface DeleteLedgerCommandInput extends DeleteLedgerRequest {
    }
    export interface DeleteLedgerCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a ledger and all of its contents. This action is irreversible.</p>
        *          <p>If deletion protection is enabled, you must first disable it before you can delete the
        *       ledger. You can disable it by calling the <code>UpdateLedger</code> operation to set the flag to <code>false</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, DeleteLedgerCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, DeleteLedgerCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new DeleteLedgerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLedgerCommandInput} for command's `input` shape.
        * @see {@link DeleteLedgerCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class DeleteLedgerCommand extends $Command<DeleteLedgerCommandInput, DeleteLedgerCommandOutput, QLDBClientResolvedConfig> {
            readonly input: DeleteLedgerCommandInput;
            constructor(input: DeleteLedgerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLedgerCommandInput, DeleteLedgerCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/DescribeJournalKinesisStreamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeJournalKinesisStreamRequest, DescribeJournalKinesisStreamResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface DescribeJournalKinesisStreamCommandInput extends DescribeJournalKinesisStreamRequest {
    }
    export interface DescribeJournalKinesisStreamCommandOutput extends DescribeJournalKinesisStreamResponse, __MetadataBearer {
    }
    /**
        * <p>Returns detailed information about a given Amazon QLDB journal stream. The output
        *          includes the Amazon Resource Name (ARN), stream name, current status, creation time, and
        *          the parameters of the original stream creation request.</p>
        *          <p>This action does not return any expired journal streams. For more information, see
        *             <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/streams.create.html#streams.create.states.expiration">Expiration for terminal streams</a> in the <i>Amazon QLDB Developer
        *             Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, DescribeJournalKinesisStreamCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, DescribeJournalKinesisStreamCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new DescribeJournalKinesisStreamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeJournalKinesisStreamCommandInput} for command's `input` shape.
        * @see {@link DescribeJournalKinesisStreamCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class DescribeJournalKinesisStreamCommand extends $Command<DescribeJournalKinesisStreamCommandInput, DescribeJournalKinesisStreamCommandOutput, QLDBClientResolvedConfig> {
            readonly input: DescribeJournalKinesisStreamCommandInput;
            constructor(input: DescribeJournalKinesisStreamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeJournalKinesisStreamCommandInput, DescribeJournalKinesisStreamCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/DescribeJournalS3ExportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeJournalS3ExportRequest, DescribeJournalS3ExportResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface DescribeJournalS3ExportCommandInput extends DescribeJournalS3ExportRequest {
    }
    export interface DescribeJournalS3ExportCommandOutput extends DescribeJournalS3ExportResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a journal export job, including the ledger name, export ID,
        *          creation time, current status, and the parameters of the original export creation
        *          request.</p>
        *          <p>This action does not return any expired export jobs. For more information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/export-journal.request.html#export-journal.request.expiration">Export job expiration</a> in the <i>Amazon QLDB Developer
        *          Guide</i>.</p>
        *          <p>If the export job with the given <code>ExportId</code> doesn't exist, then throws
        *             <code>ResourceNotFoundException</code>.</p>
        *          <p>If the ledger with the given <code>Name</code> doesn't exist, then throws
        *             <code>ResourceNotFoundException</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, DescribeJournalS3ExportCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, DescribeJournalS3ExportCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new DescribeJournalS3ExportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeJournalS3ExportCommandInput} for command's `input` shape.
        * @see {@link DescribeJournalS3ExportCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class DescribeJournalS3ExportCommand extends $Command<DescribeJournalS3ExportCommandInput, DescribeJournalS3ExportCommandOutput, QLDBClientResolvedConfig> {
            readonly input: DescribeJournalS3ExportCommandInput;
            constructor(input: DescribeJournalS3ExportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeJournalS3ExportCommandInput, DescribeJournalS3ExportCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/DescribeLedgerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeLedgerRequest, DescribeLedgerResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface DescribeLedgerCommandInput extends DescribeLedgerRequest {
    }
    export interface DescribeLedgerCommandOutput extends DescribeLedgerResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about a ledger, including its state, permissions mode, encryption at
        *          rest settings, and when it was created.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, DescribeLedgerCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, DescribeLedgerCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new DescribeLedgerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeLedgerCommandInput} for command's `input` shape.
        * @see {@link DescribeLedgerCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class DescribeLedgerCommand extends $Command<DescribeLedgerCommandInput, DescribeLedgerCommandOutput, QLDBClientResolvedConfig> {
            readonly input: DescribeLedgerCommandInput;
            constructor(input: DescribeLedgerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLedgerCommandInput, DescribeLedgerCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ExportJournalToS3Command' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ExportJournalToS3Request, ExportJournalToS3Response } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface ExportJournalToS3CommandInput extends ExportJournalToS3Request {
    }
    export interface ExportJournalToS3CommandOutput extends ExportJournalToS3Response, __MetadataBearer {
    }
    /**
        * <p>Exports journal contents within a date and time range from a ledger into a specified
        *          Amazon Simple Storage Service (Amazon S3) bucket. A journal export job can write the data objects in either the text
        *          or binary representation of Amazon Ion format, or in <i>JSON Lines</i> text
        *          format.</p>
        *          <p>In JSON Lines format, each journal block in the exported data object is a valid JSON
        *          object that is delimited by a newline. You can use this format to easily integrate JSON
        *          exports with analytics tools such as Glue and Amazon Athena
        *          because these services can parse newline-delimited JSON automatically. For more information
        *          about the format, see <a href="https://jsonlines.org/">JSON Lines</a>.</p>
        *          <p>If the ledger with the given <code>Name</code> doesn't exist, then throws
        *             <code>ResourceNotFoundException</code>.</p>
        *          <p>If the ledger with the given <code>Name</code> is in <code>CREATING</code> status, then
        *          throws <code>ResourcePreconditionNotMetException</code>.</p>
        *          <p>You can initiate up to two concurrent journal export requests for each ledger. Beyond
        *          this limit, journal export requests throw <code>LimitExceededException</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, ExportJournalToS3Command } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, ExportJournalToS3Command } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new ExportJournalToS3Command(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ExportJournalToS3CommandInput} for command's `input` shape.
        * @see {@link ExportJournalToS3CommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class ExportJournalToS3Command extends $Command<ExportJournalToS3CommandInput, ExportJournalToS3CommandOutput, QLDBClientResolvedConfig> {
            readonly input: ExportJournalToS3CommandInput;
            constructor(input: ExportJournalToS3CommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExportJournalToS3CommandInput, ExportJournalToS3CommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/GetBlockCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetBlockRequest, GetBlockResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface GetBlockCommandInput extends GetBlockRequest {
    }
    export interface GetBlockCommandOutput extends GetBlockResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a block object at a specified address in a journal. Also returns a proof of the
        *          specified block for verification if <code>DigestTipAddress</code> is provided.</p>
        *          <p>For information about the data contents in a block, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/journal-contents.html">Journal contents</a> in the
        *             <i>Amazon QLDB Developer Guide</i>.</p>
        *          <p>If the specified ledger doesn't exist or is in <code>DELETING</code> status, then throws
        *             <code>ResourceNotFoundException</code>.</p>
        *          <p>If the specified ledger is in <code>CREATING</code> status, then throws
        *             <code>ResourcePreconditionNotMetException</code>.</p>
        *          <p>If no block exists with the specified address, then throws
        *             <code>InvalidParameterException</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, GetBlockCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, GetBlockCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new GetBlockCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBlockCommandInput} for command's `input` shape.
        * @see {@link GetBlockCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class GetBlockCommand extends $Command<GetBlockCommandInput, GetBlockCommandOutput, QLDBClientResolvedConfig> {
            readonly input: GetBlockCommandInput;
            constructor(input: GetBlockCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBlockCommandInput, GetBlockCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/GetDigestCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDigestRequest, GetDigestResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface GetDigestCommandInput extends GetDigestRequest {
    }
    export interface GetDigestCommandOutput extends GetDigestResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the digest of a ledger at the latest committed block in the journal. The
        *          response includes a 256-bit hash value and a block address.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, GetDigestCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, GetDigestCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new GetDigestCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDigestCommandInput} for command's `input` shape.
        * @see {@link GetDigestCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class GetDigestCommand extends $Command<GetDigestCommandInput, GetDigestCommandOutput, QLDBClientResolvedConfig> {
            readonly input: GetDigestCommandInput;
            constructor(input: GetDigestCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDigestCommandInput, GetDigestCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/GetRevisionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetRevisionRequest, GetRevisionResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface GetRevisionCommandInput extends GetRevisionRequest {
    }
    export interface GetRevisionCommandOutput extends GetRevisionResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a revision data object for a specified document ID and block address. Also
        *          returns a proof of the specified revision for verification if <code>DigestTipAddress</code>
        *          is provided.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, GetRevisionCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, GetRevisionCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new GetRevisionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRevisionCommandInput} for command's `input` shape.
        * @see {@link GetRevisionCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class GetRevisionCommand extends $Command<GetRevisionCommandInput, GetRevisionCommandOutput, QLDBClientResolvedConfig> {
            readonly input: GetRevisionCommandInput;
            constructor(input: GetRevisionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRevisionCommandInput, GetRevisionCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListJournalKinesisStreamsForLedgerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListJournalKinesisStreamsForLedgerRequest, ListJournalKinesisStreamsForLedgerResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface ListJournalKinesisStreamsForLedgerCommandInput extends ListJournalKinesisStreamsForLedgerRequest {
    }
    export interface ListJournalKinesisStreamsForLedgerCommandOutput extends ListJournalKinesisStreamsForLedgerResponse, __MetadataBearer {
    }
    /**
        * <p>Returns an array of all Amazon QLDB journal stream descriptors for a given ledger. The
        *          output of each stream descriptor includes the same details that are returned by
        *             <code>DescribeJournalKinesisStream</code>.</p>
        *          <p>This action does not return any expired journal streams. For more information, see
        *             <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/streams.create.html#streams.create.states.expiration">Expiration for terminal streams</a> in the <i>Amazon QLDB Developer
        *             Guide</i>.</p>
        *          <p>This action returns a maximum of <code>MaxResults</code> items. It is paginated so that
        *          you can retrieve all the items by calling <code>ListJournalKinesisStreamsForLedger</code>
        *          multiple times.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, ListJournalKinesisStreamsForLedgerCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, ListJournalKinesisStreamsForLedgerCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new ListJournalKinesisStreamsForLedgerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListJournalKinesisStreamsForLedgerCommandInput} for command's `input` shape.
        * @see {@link ListJournalKinesisStreamsForLedgerCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class ListJournalKinesisStreamsForLedgerCommand extends $Command<ListJournalKinesisStreamsForLedgerCommandInput, ListJournalKinesisStreamsForLedgerCommandOutput, QLDBClientResolvedConfig> {
            readonly input: ListJournalKinesisStreamsForLedgerCommandInput;
            constructor(input: ListJournalKinesisStreamsForLedgerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListJournalKinesisStreamsForLedgerCommandInput, ListJournalKinesisStreamsForLedgerCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListJournalS3ExportsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListJournalS3ExportsRequest, ListJournalS3ExportsResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface ListJournalS3ExportsCommandInput extends ListJournalS3ExportsRequest {
    }
    export interface ListJournalS3ExportsCommandOutput extends ListJournalS3ExportsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns an array of journal export job descriptions for all ledgers that are associated
        *          with the current Amazon Web Services account and Region.</p>
        *          <p>This action returns a maximum of <code>MaxResults</code> items, and is paginated so that
        *          you can retrieve all the items by calling <code>ListJournalS3Exports</code> multiple
        *          times.</p>
        *          <p>This action does not return any expired export jobs. For more information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/export-journal.request.html#export-journal.request.expiration">Export job expiration</a> in the <i>Amazon QLDB Developer
        *          Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, ListJournalS3ExportsCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, ListJournalS3ExportsCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new ListJournalS3ExportsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListJournalS3ExportsCommandInput} for command's `input` shape.
        * @see {@link ListJournalS3ExportsCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class ListJournalS3ExportsCommand extends $Command<ListJournalS3ExportsCommandInput, ListJournalS3ExportsCommandOutput, QLDBClientResolvedConfig> {
            readonly input: ListJournalS3ExportsCommandInput;
            constructor(input: ListJournalS3ExportsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListJournalS3ExportsCommandInput, ListJournalS3ExportsCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListJournalS3ExportsForLedgerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListJournalS3ExportsForLedgerRequest, ListJournalS3ExportsForLedgerResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface ListJournalS3ExportsForLedgerCommandInput extends ListJournalS3ExportsForLedgerRequest {
    }
    export interface ListJournalS3ExportsForLedgerCommandOutput extends ListJournalS3ExportsForLedgerResponse, __MetadataBearer {
    }
    /**
        * <p>Returns an array of journal export job descriptions for a specified ledger.</p>
        *          <p>This action returns a maximum of <code>MaxResults</code> items, and is paginated so that
        *          you can retrieve all the items by calling <code>ListJournalS3ExportsForLedger</code>
        *          multiple times.</p>
        *          <p>This action does not return any expired export jobs. For more information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/export-journal.request.html#export-journal.request.expiration">Export job expiration</a> in the <i>Amazon QLDB Developer
        *          Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, ListJournalS3ExportsForLedgerCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, ListJournalS3ExportsForLedgerCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new ListJournalS3ExportsForLedgerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListJournalS3ExportsForLedgerCommandInput} for command's `input` shape.
        * @see {@link ListJournalS3ExportsForLedgerCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class ListJournalS3ExportsForLedgerCommand extends $Command<ListJournalS3ExportsForLedgerCommandInput, ListJournalS3ExportsForLedgerCommandOutput, QLDBClientResolvedConfig> {
            readonly input: ListJournalS3ExportsForLedgerCommandInput;
            constructor(input: ListJournalS3ExportsForLedgerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListJournalS3ExportsForLedgerCommandInput, ListJournalS3ExportsForLedgerCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListLedgersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListLedgersRequest, ListLedgersResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface ListLedgersCommandInput extends ListLedgersRequest {
    }
    export interface ListLedgersCommandOutput extends ListLedgersResponse, __MetadataBearer {
    }
    /**
        * <p>Returns an array of ledger summaries that are associated with the current Amazon Web Services account
        *          and Region.</p>
        *          <p>This action returns a maximum of 100 items and is paginated so that you can
        *          retrieve all the items by calling <code>ListLedgers</code> multiple times.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, ListLedgersCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, ListLedgersCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new ListLedgersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLedgersCommandInput} for command's `input` shape.
        * @see {@link ListLedgersCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class ListLedgersCommand extends $Command<ListLedgersCommandInput, ListLedgersCommandOutput, QLDBClientResolvedConfig> {
            readonly input: ListLedgersCommandInput;
            constructor(input: ListLedgersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLedgersCommandInput, ListLedgersCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns all tags for a specified Amazon QLDB resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, ListTagsForResourceCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, ListTagsForResourceCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, QLDBClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/StreamJournalToKinesisCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StreamJournalToKinesisRequest, StreamJournalToKinesisResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface StreamJournalToKinesisCommandInput extends StreamJournalToKinesisRequest {
    }
    export interface StreamJournalToKinesisCommandOutput extends StreamJournalToKinesisResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a journal stream for a given Amazon QLDB ledger. The stream captures every
        *          document revision that is committed to the ledger's journal and delivers the data to a
        *          specified Amazon Kinesis Data Streams resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, StreamJournalToKinesisCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, StreamJournalToKinesisCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new StreamJournalToKinesisCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StreamJournalToKinesisCommandInput} for command's `input` shape.
        * @see {@link StreamJournalToKinesisCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class StreamJournalToKinesisCommand extends $Command<StreamJournalToKinesisCommandInput, StreamJournalToKinesisCommandOutput, QLDBClientResolvedConfig> {
            readonly input: StreamJournalToKinesisCommandInput;
            constructor(input: StreamJournalToKinesisCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StreamJournalToKinesisCommandInput, StreamJournalToKinesisCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to a specified Amazon QLDB resource.</p>
        *          <p>A resource can have up to 50 tags. If you try to create more than 50 tags for a
        *          resource, your request fails and returns an error.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, TagResourceCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, TagResourceCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, QLDBClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes one or more tags from a specified Amazon QLDB resource. You can specify up to 50
        *          tag keys to remove.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, UntagResourceCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, UntagResourceCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, QLDBClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/UpdateLedgerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateLedgerRequest, UpdateLedgerResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface UpdateLedgerCommandInput extends UpdateLedgerRequest {
    }
    export interface UpdateLedgerCommandOutput extends UpdateLedgerResponse, __MetadataBearer {
    }
    /**
        * <p>Updates properties on a ledger.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, UpdateLedgerCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, UpdateLedgerCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new UpdateLedgerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLedgerCommandInput} for command's `input` shape.
        * @see {@link UpdateLedgerCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class UpdateLedgerCommand extends $Command<UpdateLedgerCommandInput, UpdateLedgerCommandOutput, QLDBClientResolvedConfig> {
            readonly input: UpdateLedgerCommandInput;
            constructor(input: UpdateLedgerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLedgerCommandInput, UpdateLedgerCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/UpdateLedgerPermissionsModeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateLedgerPermissionsModeRequest, UpdateLedgerPermissionsModeResponse } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0";
    import { QLDBClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient";
    export interface UpdateLedgerPermissionsModeCommandInput extends UpdateLedgerPermissionsModeRequest {
    }
    export interface UpdateLedgerPermissionsModeCommandOutput extends UpdateLedgerPermissionsModeResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the permissions mode of a ledger.</p>
        *          <important>
        *             <p>Before you switch to the <code>STANDARD</code> permissions mode, you must first
        *             create all required IAM policies and table tags to avoid disruption to your users. To
        *             learn more, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/ledger-management.basics.html#ledger-mgmt.basics.update-permissions.migrating">Migrating to the standard permissions mode</a> in the <i>Amazon QLDB
        *                Developer Guide</i>.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { QLDBClient, UpdateLedgerPermissionsModeCommand } from "@aws-sdk/client-qldb"; // ES Modules import
        * // const { QLDBClient, UpdateLedgerPermissionsModeCommand } = require("@aws-sdk/client-qldb"); // CommonJS import
        * const client = new QLDBClient(config);
        * const command = new UpdateLedgerPermissionsModeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLedgerPermissionsModeCommandInput} for command's `input` shape.
        * @see {@link UpdateLedgerPermissionsModeCommandOutput} for command's `response` shape.
        * @see {@link QLDBClientResolvedConfig | config} for QLDBClient's `config` shape.
        *
        */
    export class UpdateLedgerPermissionsModeCommand extends $Command<UpdateLedgerPermissionsModeCommandInput, UpdateLedgerPermissionsModeCommandOutput, QLDBClientResolvedConfig> {
            readonly input: UpdateLedgerPermissionsModeCommandInput;
            constructor(input: UpdateLedgerPermissionsModeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QLDBClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLedgerPermissionsModeCommandInput, UpdateLedgerPermissionsModeCommandOutput>;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/QLDBClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CancelJournalKinesisStreamCommandInput, CancelJournalKinesisStreamCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/CancelJournalKinesisStreamCommand";
    import { CreateLedgerCommandInput, CreateLedgerCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/CreateLedgerCommand";
    import { DeleteLedgerCommandInput, DeleteLedgerCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/DeleteLedgerCommand";
    import { DescribeJournalKinesisStreamCommandInput, DescribeJournalKinesisStreamCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/DescribeJournalKinesisStreamCommand";
    import { DescribeJournalS3ExportCommandInput, DescribeJournalS3ExportCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/DescribeJournalS3ExportCommand";
    import { DescribeLedgerCommandInput, DescribeLedgerCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/DescribeLedgerCommand";
    import { ExportJournalToS3CommandInput, ExportJournalToS3CommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ExportJournalToS3Command";
    import { GetBlockCommandInput, GetBlockCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/GetBlockCommand";
    import { GetDigestCommandInput, GetDigestCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/GetDigestCommand";
    import { GetRevisionCommandInput, GetRevisionCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/GetRevisionCommand";
    import { ListJournalKinesisStreamsForLedgerCommandInput, ListJournalKinesisStreamsForLedgerCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListJournalKinesisStreamsForLedgerCommand";
    import { ListJournalS3ExportsCommandInput, ListJournalS3ExportsCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListJournalS3ExportsCommand";
    import { ListJournalS3ExportsForLedgerCommandInput, ListJournalS3ExportsForLedgerCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListJournalS3ExportsForLedgerCommand";
    import { ListLedgersCommandInput, ListLedgersCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListLedgersCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/ListTagsForResourceCommand";
    import { StreamJournalToKinesisCommandInput, StreamJournalToKinesisCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/StreamJournalToKinesisCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/UntagResourceCommand";
    import { UpdateLedgerCommandInput, UpdateLedgerCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/UpdateLedgerCommand";
    import { UpdateLedgerPermissionsModeCommandInput, UpdateLedgerPermissionsModeCommandOutput } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/commands/UpdateLedgerPermissionsModeCommand";
    export type ServiceInputTypes = CancelJournalKinesisStreamCommandInput | CreateLedgerCommandInput | DeleteLedgerCommandInput | DescribeJournalKinesisStreamCommandInput | DescribeJournalS3ExportCommandInput | DescribeLedgerCommandInput | ExportJournalToS3CommandInput | GetBlockCommandInput | GetDigestCommandInput | GetRevisionCommandInput | ListJournalKinesisStreamsForLedgerCommandInput | ListJournalS3ExportsCommandInput | ListJournalS3ExportsForLedgerCommandInput | ListLedgersCommandInput | ListTagsForResourceCommandInput | StreamJournalToKinesisCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateLedgerCommandInput | UpdateLedgerPermissionsModeCommandInput;
    export type ServiceOutputTypes = CancelJournalKinesisStreamCommandOutput | CreateLedgerCommandOutput | DeleteLedgerCommandOutput | DescribeJournalKinesisStreamCommandOutput | DescribeJournalS3ExportCommandOutput | DescribeLedgerCommandOutput | ExportJournalToS3CommandOutput | GetBlockCommandOutput | GetDigestCommandOutput | GetRevisionCommandOutput | ListJournalKinesisStreamsForLedgerCommandOutput | ListJournalS3ExportsCommandOutput | ListJournalS3ExportsForLedgerCommandOutput | ListLedgersCommandOutput | ListTagsForResourceCommandOutput | StreamJournalToKinesisCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateLedgerCommandOutput | UpdateLedgerPermissionsModeCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type QLDBClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of QLDBClient class constructor that set the region, credentials and other options.
        */
    export interface QLDBClientConfig extends QLDBClientConfigType {
    }
    type QLDBClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of QLDBClient class. This is resolved and normalized from the {@link QLDBClientConfig | constructor configuration interface}.
        */
    export interface QLDBClientResolvedConfig extends QLDBClientResolvedConfigType {
    }
    /**
        * <p>The control plane for Amazon QLDB</p>
        */
    export class QLDBClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, QLDBClientResolvedConfig> {
            /**
                * The resolved configuration of QLDBClient class. This is resolved and normalized from the {@link QLDBClientConfig | constructor configuration interface}.
                */
            readonly config: QLDBClientResolvedConfig;
            constructor(configuration: QLDBClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { QLDBServiceException as __BaseException } from "@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/QLDBServiceException";
    export interface CancelJournalKinesisStreamRequest {
            /**
                * <p>The name of the ledger.</p>
                */
            LedgerName: string | undefined;
            /**
                * <p>The UUID (represented in Base62-encoded text) of the QLDB journal stream to be
                *          canceled.</p>
                */
            StreamId: string | undefined;
    }
    export namespace CancelJournalKinesisStreamRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelJournalKinesisStreamRequest) => any;
    }
    export interface CancelJournalKinesisStreamResponse {
            /**
                * <p>The UUID (Base62-encoded text) of the canceled QLDB journal stream.</p>
                */
            StreamId?: string;
    }
    export namespace CancelJournalKinesisStreamResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelJournalKinesisStreamResponse) => any;
    }
    /**
        * <p>One or more parameters in the request aren't valid.</p>
        */
    export class InvalidParameterException extends __BaseException {
            readonly name: "InvalidParameterException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The name of the invalid parameter.</p>
                */
            ParameterName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
    }
    /**
        * <p>The specified resource doesn't exist.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The type of resource.</p>
                */
            ResourceType?: string;
            /**
                * <p>The name of the resource.</p>
                */
            ResourceName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The operation failed because a condition wasn't satisfied in advance.</p>
        */
    export class ResourcePreconditionNotMetException extends __BaseException {
            readonly name: "ResourcePreconditionNotMetException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The type of resource.</p>
                */
            ResourceType?: string;
            /**
                * <p>The name of the resource.</p>
                */
            ResourceName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourcePreconditionNotMetException, __BaseException>);
    }
    export enum PermissionsMode {
            ALLOW_ALL = "ALLOW_ALL",
            STANDARD = "STANDARD"
    }
    export interface CreateLedgerRequest {
            /**
                * <p>The name of the ledger that you want to create. The name must be unique among all of the
                *          ledgers in your Amazon Web Services account in the current Region.</p>
                *          <p>Naming constraints for ledger names are defined in <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/limits.html#limits.naming">Quotas in Amazon QLDB</a>
                *          in the <i>Amazon QLDB Developer Guide</i>.</p>
                */
            Name: string | undefined;
            /**
                * <p>The key-value pairs to add as tags to the ledger that you want to create. Tag keys are
                *          case sensitive. Tag values are case sensitive and can be null.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The permissions mode to assign to the ledger that you want to create. This parameter can
                *          have one of the following values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ALLOW_ALL</code>: A legacy permissions mode that enables access control with
                *                API-level granularity for ledgers.</p>
                *                <p>This mode allows users who have the <code>SendCommand</code> API permission for
                *                this ledger to run all PartiQL commands (hence, <code>ALLOW_ALL</code>) on any tables
                *                in the specified ledger. This mode disregards any table-level or command-level IAM
                *                permissions policies that you create for the ledger.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>STANDARD</code>: (<i>Recommended</i>) A permissions mode that
                *                enables access control with finer granularity for ledgers, tables, and PartiQL
                *                commands.</p>
                *                <p>By default, this mode denies all user requests to run any PartiQL commands on any
                *                tables in this ledger. To allow PartiQL commands to run, you must create IAM
                *                permissions policies for specific table resources and PartiQL actions, in addition to
                *                the <code>SendCommand</code> API permission for the ledger. For information, see
                *                   <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-standard-mode.html">Getting
                *                   started with the standard permissions mode</a> in the <i>Amazon QLDB
                *                   Developer Guide</i>.</p>
                *             </li>
                *          </ul>
                *          <note>
                *             <p>We strongly recommend using the <code>STANDARD</code> permissions mode to maximize
                *             the security of your ledger data.</p>
                *          </note>
                */
            PermissionsMode: PermissionsMode | string | undefined;
            /**
                * <p>The flag that prevents a ledger from being deleted by any user. If not provided on
                *       ledger creation, this feature is enabled (<code>true</code>) by default.</p>
                *          <p>If deletion protection is enabled, you must first disable it before you can delete the
                *       ledger. You can disable it by calling the <code>UpdateLedger</code> operation to set the flag to <code>false</code>.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The key in Key Management Service (KMS) to use for encryption of data at rest in the ledger. For
                *          more information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/encryption-at-rest.html">Encryption at rest</a> in
                *          the <i>Amazon QLDB Developer Guide</i>.</p>
                *          <p>Use one of the following options to specify this parameter:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>AWS_OWNED_KMS_KEY</code>: Use an KMS key that is owned and managed by Amazon Web Services
                *                on your behalf.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Undefined</b>: By default, use an Amazon Web Services owned KMS
                *                key.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>A valid symmetric customer managed KMS key</b>: Use
                *                the specified KMS key in your account that you create, own, and manage.</p>
                *                <p>Amazon QLDB does not support asymmetric keys. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using symmetric and asymmetric keys</a> in the <i>Key Management Service Developer
                *                   Guide</i>.</p>
                *             </li>
                *          </ul>
                *          <p>To specify a customer managed KMS key, you can use its key ID, Amazon Resource Name
                *          (ARN), alias name, or alias ARN. When using an alias name, prefix it with
                *             <code>"alias/"</code>. To specify a key in a different Amazon Web Services account, you must use the key
                *          ARN or alias ARN.</p>
                *          <p>For example:</p>
                *          <ul>
                *             <li>
                *                <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Key ARN:
                *                   <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Alias name: <code>alias/ExampleAlias</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Alias ARN:
                *                <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id">Key identifiers (KeyId)</a> in
                *          the <i>Key Management Service Developer Guide</i>.</p>
                */
            KmsKey?: string;
    }
    export namespace CreateLedgerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLedgerRequest) => any;
    }
    export enum LedgerState {
            ACTIVE = "ACTIVE",
            CREATING = "CREATING",
            DELETED = "DELETED",
            DELETING = "DELETING"
    }
    export interface CreateLedgerResponse {
            /**
                * <p>The name of the ledger.</p>
                */
            Name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the ledger.</p>
                */
            Arn?: string;
            /**
                * <p>The current status of the ledger.</p>
                */
            State?: LedgerState | string;
            /**
                * <p>The date and time, in epoch time format, when the ledger was created. (Epoch time format
                *          is the number of seconds elapsed since 12:00:00 AM January 1, 1970 UTC.)</p>
                */
            CreationDateTime?: Date;
            /**
                * <p>The permissions mode of the ledger that you created.</p>
                */
            PermissionsMode?: PermissionsMode | string;
            /**
                * <p>The flag that prevents a ledger from being deleted by any user. If not provided on
                *       ledger creation, this feature is enabled (<code>true</code>) by default.</p>
                *          <p>If deletion protection is enabled, you must first disable it before you can delete the
                *       ledger. You can disable it by calling the <code>UpdateLedger</code> operation to set the flag to <code>false</code>.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The ARN of the customer managed KMS key that the ledger uses for encryption at rest. If
                *          this parameter is undefined, the ledger uses an Amazon Web Services owned KMS key for encryption.</p>
                */
            KmsKeyArn?: string;
    }
    export namespace CreateLedgerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLedgerResponse) => any;
    }
    /**
        * <p>You have reached the limit on the maximum number of resources allowed.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The type of resource.</p>
                */
            ResourceType?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>The specified resource already exists.</p>
        */
    export class ResourceAlreadyExistsException extends __BaseException {
            readonly name: "ResourceAlreadyExistsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The type of resource.</p>
                */
            ResourceType?: string;
            /**
                * <p>The name of the resource.</p>
                */
            ResourceName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>The specified resource can't be modified at this time.</p>
        */
    export class ResourceInUseException extends __BaseException {
            readonly name: "ResourceInUseException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The type of resource.</p>
                */
            ResourceType?: string;
            /**
                * <p>The name of the resource.</p>
                */
            ResourceName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceInUseException, __BaseException>);
    }
    export interface DeleteLedgerRequest {
            /**
                * <p>The name of the ledger that you want to delete.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteLedgerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLedgerRequest) => any;
    }
    export interface DescribeJournalKinesisStreamRequest {
            /**
                * <p>The name of the ledger.</p>
                */
            LedgerName: string | undefined;
            /**
                * <p>The UUID (represented in Base62-encoded text) of the QLDB journal stream to
                *          describe.</p>
                */
            StreamId: string | undefined;
    }
    export namespace DescribeJournalKinesisStreamRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJournalKinesisStreamRequest) => any;
    }
    export enum ErrorCause {
            IAM_PERMISSION_REVOKED = "IAM_PERMISSION_REVOKED",
            KINESIS_STREAM_NOT_FOUND = "KINESIS_STREAM_NOT_FOUND"
    }
    /**
        * <p>The configuration settings of the Amazon Kinesis Data Streams destination for an Amazon QLDB journal
        *          stream.</p>
        */
    export interface KinesisConfiguration {
            /**
                * <p>The Amazon Resource Name (ARN) of the Kinesis Data Streams resource.</p>
                */
            StreamArn: string | undefined;
            /**
                * <p>Enables QLDB to publish multiple data records in a single Kinesis Data Streams record, increasing the
                *          number of records sent per API call.</p>
                *          <p>
                *             <i>This option is enabled by default.</i> Record aggregation has important
                *          implications for processing records and requires de-aggregation in your stream consumer. To
                *          learn more, see <a href="https://docs.aws.amazon.com/streams/latest/dev/kinesis-kpl-concepts.html">KPL Key Concepts</a> and <a href="https://docs.aws.amazon.com/streams/latest/dev/kinesis-kpl-consumer-deaggregation.html">Consumer De-aggregation</a> in the <i>Amazon Kinesis Data Streams Developer
                *          Guide</i>.</p>
                */
            AggregationEnabled?: boolean;
    }
    export namespace KinesisConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KinesisConfiguration) => any;
    }
    export enum StreamStatus {
            ACTIVE = "ACTIVE",
            CANCELED = "CANCELED",
            COMPLETED = "COMPLETED",
            FAILED = "FAILED",
            IMPAIRED = "IMPAIRED"
    }
    /**
        * <p>Information about an Amazon QLDB journal stream, including the Amazon Resource Name
        *          (ARN), stream name, creation time, current status, and the parameters of the original
        *          stream creation request.</p>
        */
    export interface JournalKinesisStreamDescription {
            /**
                * <p>The name of the ledger.</p>
                */
            LedgerName: string | undefined;
            /**
                * <p>The date and time, in epoch time format, when the QLDB journal stream was created.
                *          (Epoch time format is the number of seconds elapsed since 12:00:00 AM January 1, 1970
                *          UTC.)</p>
                */
            CreationTime?: Date;
            /**
                * <p>The inclusive start date and time from which to start streaming journal data.</p>
                */
            InclusiveStartTime?: Date;
            /**
                * <p>The exclusive date and time that specifies when the stream ends. If this parameter is
                *          undefined, the stream runs indefinitely until you cancel it.</p>
                */
            ExclusiveEndTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that grants QLDB permissions for a
                *          journal stream to write data records to a Kinesis Data Streams resource.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The UUID (represented in Base62-encoded text) of the QLDB journal stream.</p>
                */
            StreamId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the QLDB journal stream.</p>
                */
            Arn?: string;
            /**
                * <p>The current state of the QLDB journal stream.</p>
                */
            Status: StreamStatus | string | undefined;
            /**
                * <p>The configuration settings of the Amazon Kinesis Data Streams destination for a QLDB journal
                *          stream.</p>
                */
            KinesisConfiguration: KinesisConfiguration | undefined;
            /**
                * <p>The error message that describes the reason that a stream has a status of
                *             <code>IMPAIRED</code> or <code>FAILED</code>. This is not applicable to streams that
                *          have other status values.</p>
                */
            ErrorCause?: ErrorCause | string;
            /**
                * <p>The user-defined name of the QLDB journal stream.</p>
                */
            StreamName: string | undefined;
    }
    export namespace JournalKinesisStreamDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JournalKinesisStreamDescription) => any;
    }
    export interface DescribeJournalKinesisStreamResponse {
            /**
                * <p>Information about the QLDB journal stream returned by a
                *             <code>DescribeJournalS3Export</code> request.</p>
                */
            Stream?: JournalKinesisStreamDescription;
    }
    export namespace DescribeJournalKinesisStreamResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJournalKinesisStreamResponse) => any;
    }
    export interface DescribeJournalS3ExportRequest {
            /**
                * <p>The name of the ledger.</p>
                */
            Name: string | undefined;
            /**
                * <p>The UUID (represented in Base62-encoded text) of the journal export job to
                *          describe.</p>
                */
            ExportId: string | undefined;
    }
    export namespace DescribeJournalS3ExportRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJournalS3ExportRequest) => any;
    }
    export enum OutputFormat {
            ION_BINARY = "ION_BINARY",
            ION_TEXT = "ION_TEXT",
            JSON = "JSON"
    }
    export enum S3ObjectEncryptionType {
            NO_ENCRYPTION = "NO_ENCRYPTION",
            SSE_KMS = "SSE_KMS",
            SSE_S3 = "SSE_S3"
    }
    /**
        * <p>The encryption settings that are used by a journal export job to write data in an
        *          Amazon Simple Storage Service (Amazon S3) bucket.</p>
        */
    export interface S3EncryptionConfiguration {
            /**
                * <p>The Amazon S3 object encryption type.</p>
                *          <p>To learn more about server-side encryption options in Amazon S3, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html">Protecting Data
                *             Using Server-Side Encryption</a> in the <i>Amazon S3 Developer
                *          Guide</i>.</p>
                */
            ObjectEncryptionType: S3ObjectEncryptionType | string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of a symmetric key in Key Management Service (KMS). Amazon S3 does not
                *          support asymmetric KMS keys.</p>
                *          <p>You must provide a <code>KmsKeyArn</code> if you specify <code>SSE_KMS</code> as the
                *             <code>ObjectEncryptionType</code>.</p>
                *          <p>
                *             <code>KmsKeyArn</code> is not required if you specify <code>SSE_S3</code> as the
                *             <code>ObjectEncryptionType</code>.</p>
                */
            KmsKeyArn?: string;
    }
    export namespace S3EncryptionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3EncryptionConfiguration) => any;
    }
    /**
        * <p>The Amazon Simple Storage Service (Amazon S3) bucket location in which a journal export job writes the journal
        *          contents.</p>
        */
    export interface S3ExportConfiguration {
            /**
                * <p>The Amazon S3 bucket name in which a journal export job writes the journal contents.</p>
                *          <p>The bucket name must comply with the Amazon S3 bucket naming conventions. For more
                *          information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html">Bucket Restrictions and
                *             Limitations</a> in the <i>Amazon S3 Developer Guide</i>.</p>
                */
            Bucket: string | undefined;
            /**
                * <p>The prefix for the Amazon S3 bucket in which a journal export job writes the journal
                *          contents.</p>
                *          <p>The prefix must comply with Amazon S3 key naming rules and restrictions. For more
                *          information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html">Object Key and Metadata</a> in the <i>Amazon S3 Developer
                *          Guide</i>.</p>
                *          <p>The following are examples of valid <code>Prefix</code> values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>JournalExports-ForMyLedger/Testing/</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>JournalExports</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>My:Tests/</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Prefix: string | undefined;
            /**
                * <p>The encryption settings that are used by a journal export job to write data in an Amazon S3
                *          bucket.</p>
                */
            EncryptionConfiguration: S3EncryptionConfiguration | undefined;
    }
    export namespace S3ExportConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3ExportConfiguration) => any;
    }
    export enum ExportStatus {
            CANCELLED = "CANCELLED",
            COMPLETED = "COMPLETED",
            IN_PROGRESS = "IN_PROGRESS"
    }
    /**
        * <p>Information about a journal export job, including the ledger name, export ID, creation
        *          time, current status, and the parameters of the original export creation request.</p>
        */
    export interface JournalS3ExportDescription {
            /**
                * <p>The name of the ledger.</p>
                */
            LedgerName: string | undefined;
            /**
                * <p>The UUID (represented in Base62-encoded text) of the journal export job.</p>
                */
            ExportId: string | undefined;
            /**
                * <p>The date and time, in epoch time format, when the export job was created. (Epoch time
                *          format is the number of seconds elapsed since 12:00:00 AM January 1, 1970 UTC.)</p>
                */
            ExportCreationTime: Date | undefined;
            /**
                * <p>The current state of the journal export job.</p>
                */
            Status: ExportStatus | string | undefined;
            /**
                * <p>The inclusive start date and time for the range of journal contents that was specified
                *          in the original export request.</p>
                */
            InclusiveStartTime: Date | undefined;
            /**
                * <p>The exclusive end date and time for the range of journal contents that was specified in
                *          the original export request.</p>
                */
            ExclusiveEndTime: Date | undefined;
            /**
                * <p>The Amazon Simple Storage Service (Amazon S3) bucket location in which a journal export job writes the journal
                *          contents.</p>
                */
            S3ExportConfiguration: S3ExportConfiguration | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that grants QLDB permissions for a
                *          journal export job to do the following:</p>
                *          <ul>
                *             <li>
                *                <p>Write objects into your Amazon Simple Storage Service (Amazon S3) bucket.</p>
                *             </li>
                *             <li>
                *                <p>(Optional) Use your customer managed key in Key Management Service (KMS) for server-side
                *                encryption of your exported data.</p>
                *             </li>
                *          </ul>
                */
            RoleArn: string | undefined;
            /**
                * <p>The output format of the exported journal data.</p>
                */
            OutputFormat?: OutputFormat | string;
    }
    export namespace JournalS3ExportDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JournalS3ExportDescription) => any;
    }
    export interface DescribeJournalS3ExportResponse {
            /**
                * <p>Information about the journal export job returned by a
                *             <code>DescribeJournalS3Export</code> request.</p>
                */
            ExportDescription: JournalS3ExportDescription | undefined;
    }
    export namespace DescribeJournalS3ExportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJournalS3ExportResponse) => any;
    }
    export interface DescribeLedgerRequest {
            /**
                * <p>The name of the ledger that you want to describe.</p>
                */
            Name: string | undefined;
    }
    export namespace DescribeLedgerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLedgerRequest) => any;
    }
    export enum EncryptionStatus {
            ENABLED = "ENABLED",
            KMS_KEY_INACCESSIBLE = "KMS_KEY_INACCESSIBLE",
            UPDATING = "UPDATING"
    }
    /**
        * <p>Information about the encryption of data at rest in an Amazon QLDB ledger. This includes
        *          the current status, the key in Key Management Service (KMS), and when the key became inaccessible (in
        *          the case of an error).</p>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/encryption-at-rest.html">Encryption at rest</a> in
        *          the <i>Amazon QLDB Developer Guide</i>.</p>
        */
    export interface LedgerEncryptionDescription {
            /**
                * <p>The Amazon Resource Name (ARN) of the customer managed KMS key that the ledger uses for
                *          encryption at rest. If this parameter is undefined, the ledger uses an Amazon Web Services owned KMS key
                *          for encryption.</p>
                */
            KmsKeyArn: string | undefined;
            /**
                * <p>The current state of encryption at rest for the ledger. This can be one of the following
                *          values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ENABLED</code>: Encryption is fully enabled using the specified key.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATING</code>: The ledger is actively processing the specified key
                *                change.</p>
                *                <p>Key changes in QLDB are asynchronous. The ledger is fully accessible without any
                *                performance impact while the key change is being processed. The amount of time it
                *                takes to update a key varies depending on the ledger size.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>KMS_KEY_INACCESSIBLE</code>: The specified customer managed KMS key is not
                *                accessible, and the ledger is impaired. Either the key was disabled or deleted, or
                *                the grants on the key were revoked. When a ledger is impaired, it is not accessible
                *                and does not accept any read or write requests.</p>
                *                <p>An impaired ledger automatically returns to an active state after you restore the
                *                grants on the key, or re-enable the key that was disabled. However, deleting a
                *                customer managed KMS key is irreversible. After a key is deleted, you can no longer
                *                access the ledgers that are protected with that key, and the data becomes
                *                unrecoverable permanently.</p>
                *             </li>
                *          </ul>
                */
            EncryptionStatus: EncryptionStatus | string | undefined;
            /**
                * <p>The date and time, in epoch time format, when the KMS key first became inaccessible,
                *          in the case of an error. (Epoch time format is the number of seconds that have elapsed
                *          since 12:00:00 AM January 1, 1970 UTC.)</p>
                *          <p>This parameter is undefined if the KMS key is accessible.</p>
                */
            InaccessibleKmsKeyDateTime?: Date;
    }
    export namespace LedgerEncryptionDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LedgerEncryptionDescription) => any;
    }
    export interface DescribeLedgerResponse {
            /**
                * <p>The name of the ledger.</p>
                */
            Name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the ledger.</p>
                */
            Arn?: string;
            /**
                * <p>The current status of the ledger.</p>
                */
            State?: LedgerState | string;
            /**
                * <p>The date and time, in epoch time format, when the ledger was created. (Epoch time format
                *          is the number of seconds elapsed since 12:00:00 AM January 1, 1970 UTC.)</p>
                */
            CreationDateTime?: Date;
            /**
                * <p>The permissions mode of the ledger.</p>
                */
            PermissionsMode?: PermissionsMode | string;
            /**
                * <p>The flag that prevents a ledger from being deleted by any user. If not provided on
                *       ledger creation, this feature is enabled (<code>true</code>) by default.</p>
                *          <p>If deletion protection is enabled, you must first disable it before you can delete the
                *       ledger. You can disable it by calling the <code>UpdateLedger</code> operation to set the flag to <code>false</code>.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>Information about the encryption of data at rest in the ledger. This includes the
                *          current status, the KMS key, and when the key became inaccessible (in the case of an
                *          error).</p>
                */
            EncryptionDescription?: LedgerEncryptionDescription;
    }
    export namespace DescribeLedgerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLedgerResponse) => any;
    }
    export interface ExportJournalToS3Request {
            /**
                * <p>The name of the ledger.</p>
                */
            Name: string | undefined;
            /**
                * <p>The inclusive start date and time for the range of journal contents to export.</p>
                *          <p>The <code>InclusiveStartTime</code> must be in <code>ISO 8601</code> date and time
                *          format and in Universal Coordinated Time (UTC). For example:
                *             <code>2019-06-13T21:36:34Z</code>.</p>
                *          <p>The <code>InclusiveStartTime</code> must be before <code>ExclusiveEndTime</code>.</p>
                *          <p>If you provide an <code>InclusiveStartTime</code> that is before the ledger's
                *             <code>CreationDateTime</code>, Amazon QLDB defaults it to the ledger's
                *             <code>CreationDateTime</code>.</p>
                */
            InclusiveStartTime: Date | undefined;
            /**
                * <p>The exclusive end date and time for the range of journal contents to export.</p>
                *          <p>The <code>ExclusiveEndTime</code> must be in <code>ISO 8601</code> date and time format
                *          and in Universal Coordinated Time (UTC). For example:
                *          <code>2019-06-13T21:36:34Z</code>.</p>
                *          <p>The <code>ExclusiveEndTime</code> must be less than or equal to the current UTC date and
                *          time.</p>
                */
            ExclusiveEndTime: Date | undefined;
            /**
                * <p>The configuration settings of the Amazon S3 bucket destination for your export
                *          request.</p>
                */
            S3ExportConfiguration: S3ExportConfiguration | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that grants QLDB permissions for a
                *          journal export job to do the following:</p>
                *          <ul>
                *             <li>
                *                <p>Write objects into your Amazon Simple Storage Service (Amazon S3) bucket.</p>
                *             </li>
                *             <li>
                *                <p>(Optional) Use your customer managed key in Key Management Service (KMS) for server-side
                *                encryption of your exported data.</p>
                *             </li>
                *          </ul>
                *          <p>To pass a role to QLDB when requesting a journal export, you must have permissions to
                *          perform the <code>iam:PassRole</code> action on the IAM role resource. This is required for
                *          all journal export requests.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The output format of your exported journal data. If this parameter is not specified, the
                *          exported data defaults to <code>ION_TEXT</code> format.</p>
                */
            OutputFormat?: OutputFormat | string;
    }
    export namespace ExportJournalToS3Request {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportJournalToS3Request) => any;
    }
    export interface ExportJournalToS3Response {
            /**
                * <p>The UUID (represented in Base62-encoded text) that QLDB assigns to each journal export
                *          job.</p>
                *          <p>To describe your export request and check the status of the job, you can use
                *             <code>ExportId</code> to call <code>DescribeJournalS3Export</code>.</p>
                */
            ExportId: string | undefined;
    }
    export namespace ExportJournalToS3Response {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportJournalToS3Response) => any;
    }
    /**
        * <p>A structure that can contain a value in multiple encoding formats.</p>
        */
    export interface ValueHolder {
            /**
                * <p>An Amazon Ion plaintext value contained in a <code>ValueHolder</code> structure.</p>
                */
            IonText?: string;
    }
    export namespace ValueHolder {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValueHolder) => any;
    }
    export interface GetBlockRequest {
            /**
                * <p>The name of the ledger.</p>
                */
            Name: string | undefined;
            /**
                * <p>The location of the block that you want to request. An address is an Amazon Ion
                *          structure that has two fields: <code>strandId</code> and <code>sequenceNo</code>.</p>
                *          <p>For example: <code>{strandId:"BlFTjlSXze9BIh1KOszcE3",sequenceNo:14}</code>.</p>
                */
            BlockAddress: ValueHolder | undefined;
            /**
                * <p>The latest block location covered by the digest for which to request a proof. An address
                *          is an Amazon Ion structure that has two fields: <code>strandId</code> and
                *             <code>sequenceNo</code>.</p>
                *          <p>For example: <code>{strandId:"BlFTjlSXze9BIh1KOszcE3",sequenceNo:49}</code>.</p>
                */
            DigestTipAddress?: ValueHolder;
    }
    export namespace GetBlockRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBlockRequest) => any;
    }
    export interface GetBlockResponse {
            /**
                * <p>The block data object in Amazon Ion format.</p>
                */
            Block: ValueHolder | undefined;
            /**
                * <p>The proof object in Amazon Ion format returned by a <code>GetBlock</code> request. A
                *          proof contains the list of hash values required to recalculate the specified digest using a
                *          Merkle tree, starting with the specified block.</p>
                */
            Proof?: ValueHolder;
    }
    export namespace GetBlockResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBlockResponse) => any;
    }
    export interface GetDigestRequest {
            /**
                * <p>The name of the ledger.</p>
                */
            Name: string | undefined;
    }
    export namespace GetDigestRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDigestRequest) => any;
    }
    export interface GetDigestResponse {
            /**
                * <p>The 256-bit hash value representing the digest returned by a <code>GetDigest</code>
                *          request.</p>
                */
            Digest: Uint8Array | undefined;
            /**
                * <p>The latest block location covered by the digest that you requested. An address is an
                *          Amazon Ion structure that has two fields: <code>strandId</code> and
                *          <code>sequenceNo</code>.</p>
                */
            DigestTipAddress: ValueHolder | undefined;
    }
    export namespace GetDigestResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDigestResponse) => any;
    }
    export interface GetRevisionRequest {
            /**
                * <p>The name of the ledger.</p>
                */
            Name: string | undefined;
            /**
                * <p>The block location of the document revision to be verified. An address is an Amazon Ion
                *          structure that has two fields: <code>strandId</code> and <code>sequenceNo</code>.</p>
                *          <p>For example: <code>{strandId:"BlFTjlSXze9BIh1KOszcE3",sequenceNo:14}</code>.</p>
                */
            BlockAddress: ValueHolder | undefined;
            /**
                * <p>The UUID (represented in Base62-encoded text) of the document to be verified.</p>
                */
            DocumentId: string | undefined;
            /**
                * <p>The latest block location covered by the digest for which to request a proof. An address
                *          is an Amazon Ion structure that has two fields: <code>strandId</code> and
                *             <code>sequenceNo</code>.</p>
                *          <p>For example: <code>{strandId:"BlFTjlSXze9BIh1KOszcE3",sequenceNo:49}</code>.</p>
                */
            DigestTipAddress?: ValueHolder;
    }
    export namespace GetRevisionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRevisionRequest) => any;
    }
    export interface GetRevisionResponse {
            /**
                * <p>The proof object in Amazon Ion format returned by a <code>GetRevision</code> request. A
                *          proof contains the list of hash values that are required to recalculate the specified
                *          digest using a Merkle tree, starting with the specified document revision.</p>
                */
            Proof?: ValueHolder;
            /**
                * <p>The document revision data object in Amazon Ion format.</p>
                */
            Revision: ValueHolder | undefined;
    }
    export namespace GetRevisionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRevisionResponse) => any;
    }
    export interface ListJournalKinesisStreamsForLedgerRequest {
            /**
                * <p>The name of the ledger.</p>
                */
            LedgerName: string | undefined;
            /**
                * <p>The maximum number of results to return in a single
                *             <code>ListJournalKinesisStreamsForLedger</code> request. (The actual number of results
                *          returned might be fewer.)</p>
                */
            MaxResults?: number;
            /**
                * <p>A pagination token, indicating that you want to retrieve the next page of results. If
                *          you received a value for <code>NextToken</code> in the response from a previous
                *             <code>ListJournalKinesisStreamsForLedger</code> call, you should use that value as input
                *          here.</p>
                */
            NextToken?: string;
    }
    export namespace ListJournalKinesisStreamsForLedgerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJournalKinesisStreamsForLedgerRequest) => any;
    }
    export interface ListJournalKinesisStreamsForLedgerResponse {
            /**
                * <p>The array of QLDB journal stream descriptors that are associated with the given
                *          ledger.</p>
                */
            Streams?: JournalKinesisStreamDescription[];
            /**
                * <ul>
                *             <li>
                *                <p>If <code>NextToken</code> is empty, the last page of results has been processed
                *                and there are no more results to be retrieved.</p>
                *             </li>
                *             <li>
                *                <p>If <code>NextToken</code> is <i>not</i> empty, more results are
                *                available. To retrieve the next page of results, use the value of
                *                   <code>NextToken</code> in a subsequent
                *                   <code>ListJournalKinesisStreamsForLedger</code> call.</p>
                *             </li>
                *          </ul>
                */
            NextToken?: string;
    }
    export namespace ListJournalKinesisStreamsForLedgerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJournalKinesisStreamsForLedgerResponse) => any;
    }
    export interface ListJournalS3ExportsRequest {
            /**
                * <p>The maximum number of results to return in a single <code>ListJournalS3Exports</code>
                *          request. (The actual number of results returned might be fewer.)</p>
                */
            MaxResults?: number;
            /**
                * <p>A pagination token, indicating that you want to retrieve the next page of results. If
                *          you received a value for <code>NextToken</code> in the response from a previous
                *             <code>ListJournalS3Exports</code> call, then you should use that value as input
                *          here.</p>
                */
            NextToken?: string;
    }
    export namespace ListJournalS3ExportsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJournalS3ExportsRequest) => any;
    }
    export interface ListJournalS3ExportsResponse {
            /**
                * <p>The array of journal export job descriptions for all ledgers that are associated with
                *          the current Amazon Web Services account and Region.</p>
                */
            JournalS3Exports?: JournalS3ExportDescription[];
            /**
                * <ul>
                *             <li>
                *                <p>If <code>NextToken</code> is empty, then the last page of results has been
                *                processed and there are no more results to be retrieved.</p>
                *             </li>
                *             <li>
                *                <p>If <code>NextToken</code> is <i>not</i> empty, then there are more
                *                results available. To retrieve the next page of results, use the value of
                *                   <code>NextToken</code> in a subsequent <code>ListJournalS3Exports</code>
                *                call.</p>
                *             </li>
                *          </ul>
                */
            NextToken?: string;
    }
    export namespace ListJournalS3ExportsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJournalS3ExportsResponse) => any;
    }
    export interface ListJournalS3ExportsForLedgerRequest {
            /**
                * <p>The name of the ledger.</p>
                */
            Name: string | undefined;
            /**
                * <p>The maximum number of results to return in a single
                *             <code>ListJournalS3ExportsForLedger</code> request. (The actual number of results
                *          returned might be fewer.)</p>
                */
            MaxResults?: number;
            /**
                * <p>A pagination token, indicating that you want to retrieve the next page of results. If
                *          you received a value for <code>NextToken</code> in the response from a previous
                *             <code>ListJournalS3ExportsForLedger</code> call, then you should use that value as input
                *          here.</p>
                */
            NextToken?: string;
    }
    export namespace ListJournalS3ExportsForLedgerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJournalS3ExportsForLedgerRequest) => any;
    }
    export interface ListJournalS3ExportsForLedgerResponse {
            /**
                * <p>The array of journal export job descriptions that are associated with the specified
                *          ledger.</p>
                */
            JournalS3Exports?: JournalS3ExportDescription[];
            /**
                * <ul>
                *             <li>
                *                <p>If <code>NextToken</code> is empty, then the last page of results has been
                *                processed and there are no more results to be retrieved.</p>
                *             </li>
                *             <li>
                *                <p>If <code>NextToken</code> is <i>not</i> empty, then there are more
                *                results available. To retrieve the next page of results, use the value of
                *                   <code>NextToken</code> in a subsequent <code>ListJournalS3ExportsForLedger</code>
                *                call.</p>
                *             </li>
                *          </ul>
                */
            NextToken?: string;
    }
    export namespace ListJournalS3ExportsForLedgerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJournalS3ExportsForLedgerResponse) => any;
    }
    export interface ListLedgersRequest {
            /**
                * <p>The maximum number of results to return in a single <code>ListLedgers</code> request.
                *          (The actual number of results returned might be fewer.)</p>
                */
            MaxResults?: number;
            /**
                * <p>A pagination token, indicating that you want to retrieve the next page of results. If
                *          you received a value for <code>NextToken</code> in the response from a previous
                *             <code>ListLedgers</code> call, then you should use that value as input here.</p>
                */
            NextToken?: string;
    }
    export namespace ListLedgersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLedgersRequest) => any;
    }
    /**
        * <p>Information about a ledger, including its name, state, and when it was created.</p>
        */
    export interface LedgerSummary {
            /**
                * <p>The name of the ledger.</p>
                */
            Name?: string;
            /**
                * <p>The current status of the ledger.</p>
                */
            State?: LedgerState | string;
            /**
                * <p>The date and time, in epoch time format, when the ledger was created. (Epoch time format
                *          is the number of seconds elapsed since 12:00:00 AM January 1, 1970 UTC.)</p>
                */
            CreationDateTime?: Date;
    }
    export namespace LedgerSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LedgerSummary) => any;
    }
    export interface ListLedgersResponse {
            /**
                * <p>The array of ledger summaries that are associated with the current Amazon Web Services account and
                *          Region.</p>
                */
            Ledgers?: LedgerSummary[];
            /**
                * <p>A pagination token, indicating whether there are more results available:</p>
                *          <ul>
                *             <li>
                *                <p>If <code>NextToken</code> is empty, then the last page of results has been
                *                processed and there are no more results to be retrieved.</p>
                *             </li>
                *             <li>
                *                <p>If <code>NextToken</code> is <i>not</i> empty, then there are more
                *                results available. To retrieve the next page of results, use the value of
                *                   <code>NextToken</code> in a subsequent <code>ListLedgers</code> call.</p>
                *             </li>
                *          </ul>
                */
            NextToken?: string;
    }
    export namespace ListLedgersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLedgersResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) for which to list the tags. For example:</p>
                *          <p>
                *             <code>arn:aws:qldb:us-east-1:123456789012:ledger/exampleLedger</code>
                *          </p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tags that are currently associated with the specified Amazon QLDB resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface StreamJournalToKinesisRequest {
            /**
                * <p>The name of the ledger.</p>
                */
            LedgerName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that grants QLDB permissions for a
                *          journal stream to write data records to a Kinesis Data Streams resource.</p>
                *          <p>To pass a role to QLDB when requesting a journal stream, you must have permissions to
                *          perform the <code>iam:PassRole</code> action on the IAM role resource. This is required for
                *          all journal stream requests.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The key-value pairs to add as tags to the stream that you want to create. Tag keys are
                *          case sensitive. Tag values are case sensitive and can be null.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The inclusive start date and time from which to start streaming journal data. This
                *          parameter must be in <code>ISO 8601</code> date and time format and in Universal
                *          Coordinated Time (UTC). For example: <code>2019-06-13T21:36:34Z</code>.</p>
                *          <p>The <code>InclusiveStartTime</code> cannot be in the future and must be before
                *             <code>ExclusiveEndTime</code>.</p>
                *          <p>If you provide an <code>InclusiveStartTime</code> that is before the ledger's
                *             <code>CreationDateTime</code>, QLDB effectively defaults it to the ledger's
                *             <code>CreationDateTime</code>.</p>
                */
            InclusiveStartTime: Date | undefined;
            /**
                * <p>The exclusive date and time that specifies when the stream ends. If you don't define
                *          this parameter, the stream runs indefinitely until you cancel it.</p>
                *          <p>The <code>ExclusiveEndTime</code> must be in <code>ISO 8601</code> date and time format
                *          and in Universal Coordinated Time (UTC). For example:
                *          <code>2019-06-13T21:36:34Z</code>.</p>
                */
            ExclusiveEndTime?: Date;
            /**
                * <p>The configuration settings of the Kinesis Data Streams destination for your stream request.</p>
                */
            KinesisConfiguration: KinesisConfiguration | undefined;
            /**
                * <p>The name that you want to assign to the QLDB journal stream. User-defined names can
                *          help identify and indicate the purpose of a stream.</p>
                *          <p>Your stream name must be unique among other <i>active</i> streams for a
                *          given ledger. Stream names have the same naming constraints as ledger names, as defined in
                *             <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/limits.html#limits.naming">Quotas in Amazon QLDB</a> in the <i>Amazon QLDB Developer
                *          Guide</i>.</p>
                */
            StreamName: string | undefined;
    }
    export namespace StreamJournalToKinesisRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StreamJournalToKinesisRequest) => any;
    }
    export interface StreamJournalToKinesisResponse {
            /**
                * <p>The UUID (represented in Base62-encoded text) that QLDB assigns to each QLDB journal
                *          stream.</p>
                */
            StreamId?: string;
    }
    export namespace StreamJournalToKinesisResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StreamJournalToKinesisResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) to which you want to add the tags. For example:</p>
                *          <p>
                *             <code>arn:aws:qldb:us-east-1:123456789012:ledger/exampleLedger</code>
                *          </p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The key-value pairs to add as tags to the specified QLDB resource. Tag keys are case
                *          sensitive. If you specify a key that already exists for the resource, your request fails
                *          and returns an error. Tag values are case sensitive and can be null.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) from which to remove the tags. For example:</p>
                *          <p>
                *             <code>arn:aws:qldb:us-east-1:123456789012:ledger/exampleLedger</code>
                *          </p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The list of tag keys to remove.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateLedgerRequest {
            /**
                * <p>The name of the ledger.</p>
                */
            Name: string | undefined;
            /**
                * <p>The flag that prevents a ledger from being deleted by any user. If not provided on
                *       ledger creation, this feature is enabled (<code>true</code>) by default.</p>
                *          <p>If deletion protection is enabled, you must first disable it before you can delete the
                *       ledger. You can disable it by calling the <code>UpdateLedger</code> operation to set the flag to <code>false</code>.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The key in Key Management Service (KMS) to use for encryption of data at rest in the ledger. For
                *          more information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/encryption-at-rest.html">Encryption at rest</a> in
                *          the <i>Amazon QLDB Developer Guide</i>.</p>
                *          <p>Use one of the following options to specify this parameter:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>AWS_OWNED_KMS_KEY</code>: Use an KMS key that is owned and managed by Amazon Web Services
                *                on your behalf.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Undefined</b>: Make no changes to the KMS key of the
                *                ledger.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>A valid symmetric customer managed KMS key</b>: Use
                *                the specified KMS key in your account that you create, own, and manage.</p>
                *                <p>Amazon QLDB does not support asymmetric keys. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using symmetric and asymmetric keys</a> in the <i>Key Management Service Developer
                *                   Guide</i>.</p>
                *             </li>
                *          </ul>
                *          <p>To specify a customer managed KMS key, you can use its key ID, Amazon Resource Name
                *          (ARN), alias name, or alias ARN. When using an alias name, prefix it with
                *             <code>"alias/"</code>. To specify a key in a different Amazon Web Services account, you must use the key
                *          ARN or alias ARN.</p>
                *          <p>For example:</p>
                *          <ul>
                *             <li>
                *                <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Key ARN:
                *                   <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Alias name: <code>alias/ExampleAlias</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Alias ARN:
                *                <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id">Key identifiers (KeyId)</a> in
                *          the <i>Key Management Service Developer Guide</i>.</p>
                */
            KmsKey?: string;
    }
    export namespace UpdateLedgerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLedgerRequest) => any;
    }
    export interface UpdateLedgerResponse {
            /**
                * <p>The name of the ledger.</p>
                */
            Name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the ledger.</p>
                */
            Arn?: string;
            /**
                * <p>The current status of the ledger.</p>
                */
            State?: LedgerState | string;
            /**
                * <p>The date and time, in epoch time format, when the ledger was created. (Epoch time format
                *          is the number of seconds elapsed since 12:00:00 AM January 1, 1970 UTC.)</p>
                */
            CreationDateTime?: Date;
            /**
                * <p>The flag that prevents a ledger from being deleted by any user. If not provided on
                *       ledger creation, this feature is enabled (<code>true</code>) by default.</p>
                *          <p>If deletion protection is enabled, you must first disable it before you can delete the
                *       ledger. You can disable it by calling the <code>UpdateLedger</code> operation to set the flag to <code>false</code>.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>Information about the encryption of data at rest in the ledger. This includes the
                *          current status, the KMS key, and when the key became inaccessible (in the case of an
                *          error).</p>
                */
            EncryptionDescription?: LedgerEncryptionDescription;
    }
    export namespace UpdateLedgerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLedgerResponse) => any;
    }
    export interface UpdateLedgerPermissionsModeRequest {
            /**
                * <p>The name of the ledger.</p>
                */
            Name: string | undefined;
            /**
                * <p>The permissions mode to assign to the ledger. This parameter can have one of the
                *          following values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ALLOW_ALL</code>: A legacy permissions mode that enables access control with
                *                API-level granularity for ledgers.</p>
                *                <p>This mode allows users who have the <code>SendCommand</code> API permission for
                *                this ledger to run all PartiQL commands (hence, <code>ALLOW_ALL</code>) on any tables
                *                in the specified ledger. This mode disregards any table-level or command-level IAM
                *                permissions policies that you create for the ledger.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>STANDARD</code>: (<i>Recommended</i>) A permissions mode that
                *                enables access control with finer granularity for ledgers, tables, and PartiQL
                *                commands.</p>
                *                <p>By default, this mode denies all user requests to run any PartiQL commands on any
                *                tables in this ledger. To allow PartiQL commands to run, you must create IAM
                *                permissions policies for specific table resources and PartiQL actions, in addition to
                *                the <code>SendCommand</code> API permission for the ledger. For information, see
                *                   <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/getting-started-standard-mode.html">Getting
                *                   started with the standard permissions mode</a> in the <i>Amazon QLDB
                *                   Developer Guide</i>.</p>
                *             </li>
                *          </ul>
                *          <note>
                *             <p>We strongly recommend using the <code>STANDARD</code> permissions mode to maximize
                *             the security of your ledger data.</p>
                *          </note>
                */
            PermissionsMode: PermissionsMode | string | undefined;
    }
    export namespace UpdateLedgerPermissionsModeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLedgerPermissionsModeRequest) => any;
    }
    export interface UpdateLedgerPermissionsModeResponse {
            /**
                * <p>The name of the ledger.</p>
                */
            Name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the ledger.</p>
                */
            Arn?: string;
            /**
                * <p>The current permissions mode of the ledger.</p>
                */
            PermissionsMode?: PermissionsMode | string;
    }
    export namespace UpdateLedgerPermissionsModeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLedgerPermissionsModeResponse) => any;
    }
}

declare module '@aws-sdk/client-qldb/node_modules/@aws-sdk/client-qldb/dist-types/models/QLDBServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from QLDB service.
        */
    export class QLDBServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

