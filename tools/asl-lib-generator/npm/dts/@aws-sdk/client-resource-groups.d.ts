// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-resource-groups' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateGroupCommandInput, CreateGroupCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/CreateGroupCommand";
    import { DeleteGroupCommandInput, DeleteGroupCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/DeleteGroupCommand";
    import { GetGroupCommandInput, GetGroupCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GetGroupCommand";
    import { GetGroupConfigurationCommandInput, GetGroupConfigurationCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GetGroupConfigurationCommand";
    import { GetGroupQueryCommandInput, GetGroupQueryCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GetGroupQueryCommand";
    import { GetTagsCommandInput, GetTagsCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GetTagsCommand";
    import { GroupResourcesCommandInput, GroupResourcesCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GroupResourcesCommand";
    import { ListGroupResourcesCommandInput, ListGroupResourcesCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/ListGroupResourcesCommand";
    import { ListGroupsCommandInput, ListGroupsCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/ListGroupsCommand";
    import { PutGroupConfigurationCommandInput, PutGroupConfigurationCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/PutGroupConfigurationCommand";
    import { SearchResourcesCommandInput, SearchResourcesCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/SearchResourcesCommand";
    import { TagCommandInput, TagCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/TagCommand";
    import { UngroupResourcesCommandInput, UngroupResourcesCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/UngroupResourcesCommand";
    import { UntagCommandInput, UntagCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/UntagCommand";
    import { UpdateGroupCommandInput, UpdateGroupCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/UpdateGroupCommand";
    import { UpdateGroupQueryCommandInput, UpdateGroupQueryCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/UpdateGroupQueryCommand";
    import { ResourceGroupsClient } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    /**
        * <fullname>AWS Resource Groups</fullname>
        *
        *         <p>AWS Resource Groups lets you organize AWS resources such as Amazon EC2 instances, Amazon Relational Database Service
        *             databases, and Amazon S3 buckets into groups using criteria that you define as tags. A
        *             resource group is a collection of resources that match the resource types specified in a
        *             query, and share one or more tags or portions of tags. You can create a group of
        *             resources based on their roles in your cloud infrastructure, lifecycle stages, regions,
        *             application layers, or virtually any criteria. Resource Groups enable you to automate management
        *             tasks, such as those in AWS Systems Manager Automation documents, on tag-related resources in
        *             AWS Systems Manager. Groups of tagged resources also let you quickly view a custom console in
        *             AWS Systems Manager that shows AWS Config compliance and other monitoring data about member
        *             resources.</p>
        *         <p>To create a resource group, build a resource query, and specify tags that identify the
        *             criteria that members of the group have in common. Tags are key-value pairs.</p>
        *         <p>For more information about Resource Groups, see the <a href="https://docs.aws.amazon.com/ARG/latest/userguide/welcome.html">AWS Resource Groups User Guide</a>.</p>
        *         <p>AWS Resource Groups uses a REST-compliant API that you can use to perform the following types of
        *             operations.</p>
        *         <ul>
        *             <li>
        *                 <p>Create, Read, Update, and Delete (CRUD) operations on resource groups and
        *                     resource query entities</p>
        *             </li>
        *             <li>
        *                 <p>Applying, editing, and removing tags from resource groups</p>
        *             </li>
        *             <li>
        *                 <p>Resolving resource group member ARNs so they can be returned as search
        *                     results</p>
        *             </li>
        *             <li>
        *                 <p>Getting data about resources that are members of a group</p>
        *             </li>
        *             <li>
        *                 <p>Searching AWS resources based on a resource query</p>
        *             </li>
        *          </ul>
        */
    export class ResourceGroups extends ResourceGroupsClient {
            /**
                * <p>Creates a resource group with the specified name and description. You can optionally
                *             include a resource query, or a service configuration. For more information about
                *             constructing a resource query, see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create a tag-based group in Resource Groups</a>. For more
                *             information about service configurations, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource
                *                 groups</a>.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:CreateGroup</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            createGroup(args: CreateGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateGroupCommandOutput>;
            createGroup(args: CreateGroupCommandInput, cb: (err: any, data?: CreateGroupCommandOutput) => void): void;
            createGroup(args: CreateGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGroupCommandOutput) => void): void;
            /**
                * <p>Deletes the specified resource group. Deleting a resource group does not delete any
                *             resources that are members of the group; it only deletes the group structure.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:DeleteGroup</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            deleteGroup(args: DeleteGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGroupCommandOutput>;
            deleteGroup(args: DeleteGroupCommandInput, cb: (err: any, data?: DeleteGroupCommandOutput) => void): void;
            deleteGroup(args: DeleteGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGroupCommandOutput) => void): void;
            /**
                * <p>Returns information about a specified resource group.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:GetGroup</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            getGroup(args: GetGroupCommandInput, options?: __HttpHandlerOptions): Promise<GetGroupCommandOutput>;
            getGroup(args: GetGroupCommandInput, cb: (err: any, data?: GetGroupCommandOutput) => void): void;
            getGroup(args: GetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGroupCommandOutput) => void): void;
            /**
                * <p>Returns the service configuration associated with the specified resource group. For
                *             details about the service configuration syntax, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource
                *                 groups</a>.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:GetGroupConfiguration</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            getGroupConfiguration(args: GetGroupConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetGroupConfigurationCommandOutput>;
            getGroupConfiguration(args: GetGroupConfigurationCommandInput, cb: (err: any, data?: GetGroupConfigurationCommandOutput) => void): void;
            getGroupConfiguration(args: GetGroupConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGroupConfigurationCommandOutput) => void): void;
            /**
                * <p>Retrieves the resource query associated with the specified resource group. For more
                *             information about resource queries, see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create
                *                 a tag-based group in Resource Groups</a>.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:GetGroupQuery</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            getGroupQuery(args: GetGroupQueryCommandInput, options?: __HttpHandlerOptions): Promise<GetGroupQueryCommandOutput>;
            getGroupQuery(args: GetGroupQueryCommandInput, cb: (err: any, data?: GetGroupQueryCommandOutput) => void): void;
            getGroupQuery(args: GetGroupQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGroupQueryCommandOutput) => void): void;
            /**
                * <p>Returns a list of tags that are associated with a resource group, specified by an
                *             ARN.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:GetTags</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            getTags(args: GetTagsCommandInput, options?: __HttpHandlerOptions): Promise<GetTagsCommandOutput>;
            getTags(args: GetTagsCommandInput, cb: (err: any, data?: GetTagsCommandOutput) => void): void;
            getTags(args: GetTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTagsCommandOutput) => void): void;
            /**
                * <p>Adds the specified resources to the specified group.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:GroupResources</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            groupResources(args: GroupResourcesCommandInput, options?: __HttpHandlerOptions): Promise<GroupResourcesCommandOutput>;
            groupResources(args: GroupResourcesCommandInput, cb: (err: any, data?: GroupResourcesCommandOutput) => void): void;
            groupResources(args: GroupResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GroupResourcesCommandOutput) => void): void;
            /**
                * <p>Returns a list of ARNs of the resources that are members of a specified resource
                *             group.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:ListGroupResources</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>cloudformation:DescribeStacks</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>cloudformation:ListStackResources</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>tag:GetResources</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            listGroupResources(args: ListGroupResourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupResourcesCommandOutput>;
            listGroupResources(args: ListGroupResourcesCommandInput, cb: (err: any, data?: ListGroupResourcesCommandOutput) => void): void;
            listGroupResources(args: ListGroupResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupResourcesCommandOutput) => void): void;
            /**
                * <p>Returns a list of existing resource groups in your account.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:ListGroups</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            listGroups(args: ListGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupsCommandOutput>;
            listGroups(args: ListGroupsCommandInput, cb: (err: any, data?: ListGroupsCommandOutput) => void): void;
            listGroups(args: ListGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupsCommandOutput) => void): void;
            /**
                * <p>Attaches a service configuration to the specified group. This occurs asynchronously,
                *             and can take time to complete. You can use <a>GetGroupConfiguration</a> to
                *             check the status of the update.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:PutGroupConfiguration</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            putGroupConfiguration(args: PutGroupConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<PutGroupConfigurationCommandOutput>;
            putGroupConfiguration(args: PutGroupConfigurationCommandInput, cb: (err: any, data?: PutGroupConfigurationCommandOutput) => void): void;
            putGroupConfiguration(args: PutGroupConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutGroupConfigurationCommandOutput) => void): void;
            /**
                * <p>Returns a list of AWS resource identifiers that matches the specified query. The
                *             query uses the same format as a resource query in a CreateGroup or UpdateGroupQuery
                *             operation.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:SearchResources</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>cloudformation:DescribeStacks</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>cloudformation:ListStackResources</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>tag:GetResources</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            searchResources(args: SearchResourcesCommandInput, options?: __HttpHandlerOptions): Promise<SearchResourcesCommandOutput>;
            searchResources(args: SearchResourcesCommandInput, cb: (err: any, data?: SearchResourcesCommandOutput) => void): void;
            searchResources(args: SearchResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchResourcesCommandOutput) => void): void;
            /**
                * <p>Adds tags to a resource group with the specified ARN. Existing tags on a resource
                *             group are not changed if they are not specified in the request parameters.</p>
                *         <important>
                *             <p>Do not store personally identifiable information (PII) or other confidential or
                *                 sensitive information in tags. We use tags to provide you with billing and
                *                 administration services. Tags are not intended to be used for private or sensitive
                *                 data.</p>
                *         </important>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:Tag</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            tag(args: TagCommandInput, options?: __HttpHandlerOptions): Promise<TagCommandOutput>;
            tag(args: TagCommandInput, cb: (err: any, data?: TagCommandOutput) => void): void;
            tag(args: TagCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagCommandOutput) => void): void;
            /**
                * <p>Removes the specified resources from the specified group.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:UngroupResources</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ungroupResources(args: UngroupResourcesCommandInput, options?: __HttpHandlerOptions): Promise<UngroupResourcesCommandOutput>;
            ungroupResources(args: UngroupResourcesCommandInput, cb: (err: any, data?: UngroupResourcesCommandOutput) => void): void;
            ungroupResources(args: UngroupResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UngroupResourcesCommandOutput) => void): void;
            /**
                * <p>Deletes tags from a specified resource group.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:Untag</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            untag(args: UntagCommandInput, options?: __HttpHandlerOptions): Promise<UntagCommandOutput>;
            untag(args: UntagCommandInput, cb: (err: any, data?: UntagCommandOutput) => void): void;
            untag(args: UntagCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagCommandOutput) => void): void;
            /**
                * <p>Updates the description for an existing group. You cannot update the name of a
                *             resource group.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:UpdateGroup</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            updateGroup(args: UpdateGroupCommandInput, options?: __HttpHandlerOptions): Promise<UpdateGroupCommandOutput>;
            updateGroup(args: UpdateGroupCommandInput, cb: (err: any, data?: UpdateGroupCommandOutput) => void): void;
            updateGroup(args: UpdateGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateGroupCommandOutput) => void): void;
            /**
                * <p>Updates the resource query of a group. For more information about resource queries,
                *             see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create a tag-based group in Resource Groups</a>.</p>
                *         <p>
                *             <b>Minimum permissions</b>
                *          </p>
                *          <p>To run this command, you must have the following permissions:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-groups:UpdateGroupQuery</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            updateGroupQuery(args: UpdateGroupQueryCommandInput, options?: __HttpHandlerOptions): Promise<UpdateGroupQueryCommandOutput>;
            updateGroupQuery(args: UpdateGroupQueryCommandInput, cb: (err: any, data?: UpdateGroupQueryCommandOutput) => void): void;
            updateGroupQuery(args: UpdateGroupQueryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateGroupQueryCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/CreateGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateGroupInput, CreateGroupOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface CreateGroupCommandInput extends CreateGroupInput {
    }
    export interface CreateGroupCommandOutput extends CreateGroupOutput, __MetadataBearer {
    }
    /**
        * <p>Creates a resource group with the specified name and description. You can optionally
        *             include a resource query, or a service configuration. For more information about
        *             constructing a resource query, see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create a tag-based group in Resource Groups</a>. For more
        *             information about service configurations, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource
        *                 groups</a>.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:CreateGroup</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, CreateGroupCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, CreateGroupCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new CreateGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateGroupCommandInput} for command's `input` shape.
        * @see {@link CreateGroupCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class CreateGroupCommand extends $Command<CreateGroupCommandInput, CreateGroupCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: CreateGroupCommandInput;
            constructor(input: CreateGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGroupCommandInput, CreateGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/DeleteGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteGroupInput, DeleteGroupOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface DeleteGroupCommandInput extends DeleteGroupInput {
    }
    export interface DeleteGroupCommandOutput extends DeleteGroupOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified resource group. Deleting a resource group does not delete any
        *             resources that are members of the group; it only deletes the group structure.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:DeleteGroup</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, DeleteGroupCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, DeleteGroupCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new DeleteGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteGroupCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class DeleteGroupCommand extends $Command<DeleteGroupCommandInput, DeleteGroupCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: DeleteGroupCommandInput;
            constructor(input: DeleteGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteGroupCommandInput, DeleteGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetGroupInput, GetGroupOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface GetGroupCommandInput extends GetGroupInput {
    }
    export interface GetGroupCommandOutput extends GetGroupOutput, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specified resource group.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:GetGroup</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, GetGroupCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, GetGroupCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new GetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGroupCommandInput} for command's `input` shape.
        * @see {@link GetGroupCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class GetGroupCommand extends $Command<GetGroupCommandInput, GetGroupCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: GetGroupCommandInput;
            constructor(input: GetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGroupCommandInput, GetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GetGroupConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetGroupConfigurationInput, GetGroupConfigurationOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface GetGroupConfigurationCommandInput extends GetGroupConfigurationInput {
    }
    export interface GetGroupConfigurationCommandOutput extends GetGroupConfigurationOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the service configuration associated with the specified resource group. For
        *             details about the service configuration syntax, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource
        *                 groups</a>.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:GetGroupConfiguration</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, GetGroupConfigurationCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, GetGroupConfigurationCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new GetGroupConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGroupConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetGroupConfigurationCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class GetGroupConfigurationCommand extends $Command<GetGroupConfigurationCommandInput, GetGroupConfigurationCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: GetGroupConfigurationCommandInput;
            constructor(input: GetGroupConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGroupConfigurationCommandInput, GetGroupConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GetGroupQueryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetGroupQueryInput, GetGroupQueryOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface GetGroupQueryCommandInput extends GetGroupQueryInput {
    }
    export interface GetGroupQueryCommandOutput extends GetGroupQueryOutput, __MetadataBearer {
    }
    /**
        * <p>Retrieves the resource query associated with the specified resource group. For more
        *             information about resource queries, see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create
        *                 a tag-based group in Resource Groups</a>.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:GetGroupQuery</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, GetGroupQueryCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, GetGroupQueryCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new GetGroupQueryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGroupQueryCommandInput} for command's `input` shape.
        * @see {@link GetGroupQueryCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class GetGroupQueryCommand extends $Command<GetGroupQueryCommandInput, GetGroupQueryCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: GetGroupQueryCommandInput;
            constructor(input: GetGroupQueryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGroupQueryCommandInput, GetGroupQueryCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GetTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetTagsInput, GetTagsOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface GetTagsCommandInput extends GetTagsInput {
    }
    export interface GetTagsCommandOutput extends GetTagsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a list of tags that are associated with a resource group, specified by an
        *             ARN.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:GetTags</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, GetTagsCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, GetTagsCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new GetTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTagsCommandInput} for command's `input` shape.
        * @see {@link GetTagsCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class GetTagsCommand extends $Command<GetTagsCommandInput, GetTagsCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: GetTagsCommandInput;
            constructor(input: GetTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTagsCommandInput, GetTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GroupResourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GroupResourcesInput, GroupResourcesOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface GroupResourcesCommandInput extends GroupResourcesInput {
    }
    export interface GroupResourcesCommandOutput extends GroupResourcesOutput, __MetadataBearer {
    }
    /**
        * <p>Adds the specified resources to the specified group.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:GroupResources</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, GroupResourcesCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, GroupResourcesCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new GroupResourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GroupResourcesCommandInput} for command's `input` shape.
        * @see {@link GroupResourcesCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class GroupResourcesCommand extends $Command<GroupResourcesCommandInput, GroupResourcesCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: GroupResourcesCommandInput;
            constructor(input: GroupResourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GroupResourcesCommandInput, GroupResourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/ListGroupResourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListGroupResourcesInput, ListGroupResourcesOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface ListGroupResourcesCommandInput extends ListGroupResourcesInput {
    }
    export interface ListGroupResourcesCommandOutput extends ListGroupResourcesOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a list of ARNs of the resources that are members of a specified resource
        *             group.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:ListGroupResources</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>cloudformation:DescribeStacks</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>cloudformation:ListStackResources</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>tag:GetResources</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, ListGroupResourcesCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, ListGroupResourcesCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new ListGroupResourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroupResourcesCommandInput} for command's `input` shape.
        * @see {@link ListGroupResourcesCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class ListGroupResourcesCommand extends $Command<ListGroupResourcesCommandInput, ListGroupResourcesCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: ListGroupResourcesCommandInput;
            constructor(input: ListGroupResourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroupResourcesCommandInput, ListGroupResourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/ListGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListGroupsInput, ListGroupsOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface ListGroupsCommandInput extends ListGroupsInput {
    }
    export interface ListGroupsCommandOutput extends ListGroupsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a list of existing resource groups in your account.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:ListGroups</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, ListGroupsCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, ListGroupsCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new ListGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroupsCommandInput} for command's `input` shape.
        * @see {@link ListGroupsCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class ListGroupsCommand extends $Command<ListGroupsCommandInput, ListGroupsCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: ListGroupsCommandInput;
            constructor(input: ListGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroupsCommandInput, ListGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/PutGroupConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutGroupConfigurationInput, PutGroupConfigurationOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface PutGroupConfigurationCommandInput extends PutGroupConfigurationInput {
    }
    export interface PutGroupConfigurationCommandOutput extends PutGroupConfigurationOutput, __MetadataBearer {
    }
    /**
        * <p>Attaches a service configuration to the specified group. This occurs asynchronously,
        *             and can take time to complete. You can use <a>GetGroupConfiguration</a> to
        *             check the status of the update.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:PutGroupConfiguration</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, PutGroupConfigurationCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, PutGroupConfigurationCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new PutGroupConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutGroupConfigurationCommandInput} for command's `input` shape.
        * @see {@link PutGroupConfigurationCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class PutGroupConfigurationCommand extends $Command<PutGroupConfigurationCommandInput, PutGroupConfigurationCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: PutGroupConfigurationCommandInput;
            constructor(input: PutGroupConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutGroupConfigurationCommandInput, PutGroupConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/SearchResourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SearchResourcesInput, SearchResourcesOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface SearchResourcesCommandInput extends SearchResourcesInput {
    }
    export interface SearchResourcesCommandOutput extends SearchResourcesOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a list of AWS resource identifiers that matches the specified query. The
        *             query uses the same format as a resource query in a CreateGroup or UpdateGroupQuery
        *             operation.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:SearchResources</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>cloudformation:DescribeStacks</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>cloudformation:ListStackResources</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>tag:GetResources</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, SearchResourcesCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, SearchResourcesCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new SearchResourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchResourcesCommandInput} for command's `input` shape.
        * @see {@link SearchResourcesCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class SearchResourcesCommand extends $Command<SearchResourcesCommandInput, SearchResourcesCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: SearchResourcesCommandInput;
            constructor(input: SearchResourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchResourcesCommandInput, SearchResourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/TagCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagInput, TagOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface TagCommandInput extends TagInput {
    }
    export interface TagCommandOutput extends TagOutput, __MetadataBearer {
    }
    /**
        * <p>Adds tags to a resource group with the specified ARN. Existing tags on a resource
        *             group are not changed if they are not specified in the request parameters.</p>
        *         <important>
        *             <p>Do not store personally identifiable information (PII) or other confidential or
        *                 sensitive information in tags. We use tags to provide you with billing and
        *                 administration services. Tags are not intended to be used for private or sensitive
        *                 data.</p>
        *         </important>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:Tag</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, TagCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, TagCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new TagCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagCommandInput} for command's `input` shape.
        * @see {@link TagCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class TagCommand extends $Command<TagCommandInput, TagCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: TagCommandInput;
            constructor(input: TagCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagCommandInput, TagCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/UngroupResourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UngroupResourcesInput, UngroupResourcesOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface UngroupResourcesCommandInput extends UngroupResourcesInput {
    }
    export interface UngroupResourcesCommandOutput extends UngroupResourcesOutput, __MetadataBearer {
    }
    /**
        * <p>Removes the specified resources from the specified group.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:UngroupResources</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, UngroupResourcesCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, UngroupResourcesCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new UngroupResourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UngroupResourcesCommandInput} for command's `input` shape.
        * @see {@link UngroupResourcesCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class UngroupResourcesCommand extends $Command<UngroupResourcesCommandInput, UngroupResourcesCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: UngroupResourcesCommandInput;
            constructor(input: UngroupResourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UngroupResourcesCommandInput, UngroupResourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/UntagCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagInput, UntagOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface UntagCommandInput extends UntagInput {
    }
    export interface UntagCommandOutput extends UntagOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes tags from a specified resource group.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:Untag</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, UntagCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, UntagCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new UntagCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagCommandInput} for command's `input` shape.
        * @see {@link UntagCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class UntagCommand extends $Command<UntagCommandInput, UntagCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: UntagCommandInput;
            constructor(input: UntagCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagCommandInput, UntagCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/UpdateGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateGroupInput, UpdateGroupOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface UpdateGroupCommandInput extends UpdateGroupInput {
    }
    export interface UpdateGroupCommandOutput extends UpdateGroupOutput, __MetadataBearer {
    }
    /**
        * <p>Updates the description for an existing group. You cannot update the name of a
        *             resource group.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:UpdateGroup</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, UpdateGroupCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, UpdateGroupCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new UpdateGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateGroupCommandInput} for command's `input` shape.
        * @see {@link UpdateGroupCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class UpdateGroupCommand extends $Command<UpdateGroupCommandInput, UpdateGroupCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: UpdateGroupCommandInput;
            constructor(input: UpdateGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateGroupCommandInput, UpdateGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/UpdateGroupQueryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateGroupQueryInput, UpdateGroupQueryOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0";
    import { ResourceGroupsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient";
    export interface UpdateGroupQueryCommandInput extends UpdateGroupQueryInput {
    }
    export interface UpdateGroupQueryCommandOutput extends UpdateGroupQueryOutput, __MetadataBearer {
    }
    /**
        * <p>Updates the resource query of a group. For more information about resource queries,
        *             see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create a tag-based group in Resource Groups</a>.</p>
        *         <p>
        *             <b>Minimum permissions</b>
        *          </p>
        *          <p>To run this command, you must have the following permissions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>resource-groups:UpdateGroupQuery</code>
        *                </p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ResourceGroupsClient, UpdateGroupQueryCommand } from "@aws-sdk/client-resource-groups"; // ES Modules import
        * // const { ResourceGroupsClient, UpdateGroupQueryCommand } = require("@aws-sdk/client-resource-groups"); // CommonJS import
        * const client = new ResourceGroupsClient(config);
        * const command = new UpdateGroupQueryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateGroupQueryCommandInput} for command's `input` shape.
        * @see {@link UpdateGroupQueryCommandOutput} for command's `response` shape.
        * @see {@link ResourceGroupsClientResolvedConfig | config} for ResourceGroupsClient's `config` shape.
        *
        */
    export class UpdateGroupQueryCommand extends $Command<UpdateGroupQueryCommandInput, UpdateGroupQueryCommandOutput, ResourceGroupsClientResolvedConfig> {
            readonly input: UpdateGroupQueryCommandInput;
            constructor(input: UpdateGroupQueryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ResourceGroupsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateGroupQueryCommandInput, UpdateGroupQueryCommandOutput>;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/ResourceGroupsClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateGroupCommandInput, CreateGroupCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/CreateGroupCommand";
    import { DeleteGroupCommandInput, DeleteGroupCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/DeleteGroupCommand";
    import { GetGroupCommandInput, GetGroupCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GetGroupCommand";
    import { GetGroupConfigurationCommandInput, GetGroupConfigurationCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GetGroupConfigurationCommand";
    import { GetGroupQueryCommandInput, GetGroupQueryCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GetGroupQueryCommand";
    import { GetTagsCommandInput, GetTagsCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GetTagsCommand";
    import { GroupResourcesCommandInput, GroupResourcesCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/GroupResourcesCommand";
    import { ListGroupResourcesCommandInput, ListGroupResourcesCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/ListGroupResourcesCommand";
    import { ListGroupsCommandInput, ListGroupsCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/ListGroupsCommand";
    import { PutGroupConfigurationCommandInput, PutGroupConfigurationCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/PutGroupConfigurationCommand";
    import { SearchResourcesCommandInput, SearchResourcesCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/SearchResourcesCommand";
    import { TagCommandInput, TagCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/TagCommand";
    import { UngroupResourcesCommandInput, UngroupResourcesCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/UngroupResourcesCommand";
    import { UntagCommandInput, UntagCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/UntagCommand";
    import { UpdateGroupCommandInput, UpdateGroupCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/UpdateGroupCommand";
    import { UpdateGroupQueryCommandInput, UpdateGroupQueryCommandOutput } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/commands/UpdateGroupQueryCommand";
    export type ServiceInputTypes = CreateGroupCommandInput | DeleteGroupCommandInput | GetGroupCommandInput | GetGroupConfigurationCommandInput | GetGroupQueryCommandInput | GetTagsCommandInput | GroupResourcesCommandInput | ListGroupResourcesCommandInput | ListGroupsCommandInput | PutGroupConfigurationCommandInput | SearchResourcesCommandInput | TagCommandInput | UngroupResourcesCommandInput | UntagCommandInput | UpdateGroupCommandInput | UpdateGroupQueryCommandInput;
    export type ServiceOutputTypes = CreateGroupCommandOutput | DeleteGroupCommandOutput | GetGroupCommandOutput | GetGroupConfigurationCommandOutput | GetGroupQueryCommandOutput | GetTagsCommandOutput | GroupResourcesCommandOutput | ListGroupResourcesCommandOutput | ListGroupsCommandOutput | PutGroupConfigurationCommandOutput | SearchResourcesCommandOutput | TagCommandOutput | UngroupResourcesCommandOutput | UntagCommandOutput | UpdateGroupCommandOutput | UpdateGroupQueryCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type ResourceGroupsClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of ResourceGroupsClient class constructor that set the region, credentials and other options.
        */
    export interface ResourceGroupsClientConfig extends ResourceGroupsClientConfigType {
    }
    type ResourceGroupsClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of ResourceGroupsClient class. This is resolved and normalized from the {@link ResourceGroupsClientConfig | constructor configuration interface}.
        */
    export interface ResourceGroupsClientResolvedConfig extends ResourceGroupsClientResolvedConfigType {
    }
    /**
        * <fullname>AWS Resource Groups</fullname>
        *
        *         <p>AWS Resource Groups lets you organize AWS resources such as Amazon EC2 instances, Amazon Relational Database Service
        *             databases, and Amazon S3 buckets into groups using criteria that you define as tags. A
        *             resource group is a collection of resources that match the resource types specified in a
        *             query, and share one or more tags or portions of tags. You can create a group of
        *             resources based on their roles in your cloud infrastructure, lifecycle stages, regions,
        *             application layers, or virtually any criteria. Resource Groups enable you to automate management
        *             tasks, such as those in AWS Systems Manager Automation documents, on tag-related resources in
        *             AWS Systems Manager. Groups of tagged resources also let you quickly view a custom console in
        *             AWS Systems Manager that shows AWS Config compliance and other monitoring data about member
        *             resources.</p>
        *         <p>To create a resource group, build a resource query, and specify tags that identify the
        *             criteria that members of the group have in common. Tags are key-value pairs.</p>
        *         <p>For more information about Resource Groups, see the <a href="https://docs.aws.amazon.com/ARG/latest/userguide/welcome.html">AWS Resource Groups User Guide</a>.</p>
        *         <p>AWS Resource Groups uses a REST-compliant API that you can use to perform the following types of
        *             operations.</p>
        *         <ul>
        *             <li>
        *                 <p>Create, Read, Update, and Delete (CRUD) operations on resource groups and
        *                     resource query entities</p>
        *             </li>
        *             <li>
        *                 <p>Applying, editing, and removing tags from resource groups</p>
        *             </li>
        *             <li>
        *                 <p>Resolving resource group member ARNs so they can be returned as search
        *                     results</p>
        *             </li>
        *             <li>
        *                 <p>Getting data about resources that are members of a group</p>
        *             </li>
        *             <li>
        *                 <p>Searching AWS resources based on a resource query</p>
        *             </li>
        *          </ul>
        */
    export class ResourceGroupsClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, ResourceGroupsClientResolvedConfig> {
            /**
                * The resolved configuration of ResourceGroupsClient class. This is resolved and normalized from the {@link ResourceGroupsClientConfig | constructor configuration interface}.
                */
            readonly config: ResourceGroupsClientResolvedConfig;
            constructor(configuration: ResourceGroupsClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { ResourceGroupsServiceException as __BaseException } from "@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/ResourceGroupsServiceException";
    /**
        * <p>The request includes one or more parameters that violate validation rules.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    /**
        * <p>A parameter for a group configuration item. For details about group service
        *             configuration syntax, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource
        *                 groups</a>.</p>
        */
    export interface GroupConfigurationParameter {
            /**
                * <p>The name of the group configuration parameter. For the list of parameters that you can
                *             use with each configuration item type, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html#about-slg-types">Supported resource types and
                *                 parameters</a>.</p>
                */
            Name: string | undefined;
            /**
                * <p>The value or values to be used for the specified parameter. For the list of values you
                *             can use with each parameter, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html#about-slg-types">Supported resource types and
                *                 parameters</a>.</p>
                */
            Values?: string[];
    }
    export namespace GroupConfigurationParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupConfigurationParameter) => any;
    }
    /**
        * <p>An item in a group configuration. A group service configuration can have one or more
        *             items. For details about group service configuration syntax, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for
        *                 resource groups</a>.</p>
        */
    export interface GroupConfigurationItem {
            /**
                * <p>Specifies the type of group configuration item. Each item must have a unique value for
                *                 <code>type</code>. For the list of types that you can specify for a configuration
                *             item, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html#about-slg-types">Supported resource types and
                *                 parameters</a>.</p>
                */
            Type: string | undefined;
            /**
                * <p>A collection of parameters for this group configuration item. For the list of
                *             parameters that you can use with each configuration item type, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html#about-slg-types">Supported
                *                 resource types and parameters</a>.</p>
                */
            Parameters?: GroupConfigurationParameter[];
    }
    export namespace GroupConfigurationItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupConfigurationItem) => any;
    }
    export enum QueryType {
            CLOUDFORMATION_STACK_1_0 = "CLOUDFORMATION_STACK_1_0",
            TAG_FILTERS_1_0 = "TAG_FILTERS_1_0"
    }
    /**
        * <p>The query that is used to define a resource group or a search for resources. A query
        *             specifies both a query type and a query string as a JSON object. See the examples
        *             section for example JSON strings.</p>
        *         <p>The examples that follow are shown as standard JSON strings. If you include such a
        *             string as a parameter to the AWS CLI or an SDK API, you might need to 'escape' the
        *             string into a single line. For example, see the <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-quoting-strings.html">Quoting
        *                 strings</a> in the <i>AWS CLI User Guide</i>.</p>
        *         <p>
        *             <b>Example 1</b>
        *          </p>
        *         <p>The following generic example shows a resource query JSON string that includes only
        *             resources that meet the following criteria:</p>
        *         <ul>
        *             <li>
        *                 <p>The resource type must be either <code>resource_type1</code> or
        *                         <code>resource_type2</code>.</p>
        *             </li>
        *             <li>
        *                 <p>The resource must have a tag <code>Key1</code> with a value of either
        *                         <code>ValueA</code> or <code>ValueB</code>.</p>
        *             </li>
        *             <li>
        *                 <p>The resource must have a tag <code>Key2</code> with a value of either
        *                         <code>ValueC</code> or <code>ValueD</code>.</p>
        *             </li>
        *          </ul>
        *         <p>
        *             <code>{
        *     "Type": "TAG_FILTERS_1_0",
        *     "Query": {
        *         "ResourceTypeFilters": [ "resource_type1", "resource_type2"],
        *         "TagFilters": [
        *             {
        *                 "Key": "Key1",
        *                 "Values": ["ValueA","ValueB"]
        *             },
        *             {
        *                 "Key":"Key2",
        *                 "Values":["ValueC","ValueD"]
        *             }
        *         ]
        *     }
        * }</code>
        *          </p>
        *         <p>This has the equivalent "shortcut" syntax of the following:</p>
        *         <p>
        *             <code>{
        *     "Type": "TAG_FILTERS_1_0",
        *     "Query": {
        *         "ResourceTypeFilters": [ "resource_type1", "resource_type2"],
        *         "TagFilters": [
        *             { "Key1": ["ValueA","ValueB"] },
        *             { "Key2": ["ValueC","ValueD"]
        *             }
        *         ]
        *     }
        * }</code>
        *          </p>
        *         <p>
        *             <b>Example 2</b>
        *          </p>
        *         <p>The following example shows a resource query JSON string that includes only Amazon EC2
        *             instances that are tagged <code>Stage</code> with a value of <code>Test</code>.</p>
        *         <p>
        *             <code>{
        *     "Type": "TAG_FILTERS_1_0",
        *     "Query": "{
        *         "ResourceTypeFilters": "AWS::EC2::Instance",
        *         "TagFilters": { "Stage": "Test" }
        *     }
        * }</code>
        *          </p>
        *         <p>
        *             <b>Example 3</b>
        *          </p>
        *         <p>The following example shows a resource query JSON string that includes resource of any
        *             supported type as long as it is tagged <code>Stage</code> with a value of
        *                 <code>Prod</code>.</p>
        *         <p>
        *             <code>{
        *     "Type": "TAG_FILTERS_1_0",
        *     "Query": {
        *         "ResourceTypeFilters": "AWS::AllSupported",
        *         "TagFilters": { "Stage": "Prod" }
        *     }
        * }</code>
        *          </p>
        *         <p>
        *             <b>Example 4</b>
        *          </p>
        *         <p>The following example shows a resource query JSON string that includes only Amazon EC2
        *             instances and Amazon S3 buckets that are part of the specified AWS CloudFormation stack.</p>
        *         <p>
        *             <code>{
        *     "Type": "CLOUDFORMATION_STACK_1_0",
        *     "Query": {
        *         "ResourceTypeFilters": [ "AWS::EC2::Instance", "AWS::S3::Bucket" ],
        *         "StackIdentifier": "arn:aws:cloudformation:us-west-2:123456789012:stack/AWStestuseraccount/fb0d5000-aba8-00e8-aa9e-50d5cEXAMPLE"
        *     }
        * }</code>
        *          </p>
        */
    export interface ResourceQuery {
            /**
                * <p>The type of the query. You can use the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <i>
                *                      <code>CLOUDFORMATION_STACK_1_0:</code>
                *                   </i>Specifies that the
                *                         <code>Query</code> contains an ARN for a CloudFormation stack.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <i>
                *                      <code>TAG_FILTERS_1_0:</code>
                *                   </i>Specifies that the
                *                         <code>Query</code> parameter contains a JSON string that represents a
                *                     collection of simple tag filters for resource types and tags. The JSON string
                *                     uses a syntax similar to the <code>
                *                      <a href="https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html">GetResources</a>
                *                   </code> operation, but uses only the <code>
                *                      <a href="https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html#resourcegrouptagging-GetResources-request-ResourceTypeFilters"> ResourceTypeFilters</a>
                *                   </code> and <code>
                *                      <a href="https://docs.aws.amazon.com/resourcegroupstagging/latest/APIReference/API_GetResources.html#resourcegrouptagging-GetResources-request-TagFiltersTagFilters">TagFilters</a>
                *                   </code> fields. If you specify more than one tag key,
                *                     only resources that match all tag keys, and at least one value of each specified
                *                     tag key, are returned in your query. If you specify more than one value for a
                *                     tag key, a resource matches the filter if it has a tag key value that matches
                *                         <i>any</i> of the specified values.</p>
                *                 <p>For example, consider the following sample query for resources that have two
                *                     tags, <code>Stage</code> and <code>Version</code>, with two values each:</p>
                *                 <p>
                *                   <code>[{"Stage":["Test","Deploy"]},{"Version":["1","2"]}]</code>
                *                </p>
                *                 <p>The results of this query could include the following.</p>
                *                 <ul>
                *                   <li>
                *                         <p>An EC2 instance that has the following two tags:
                *                                 <code>{"Stage":"Deploy"}</code>, and
                *                             <code>{"Version":"2"}</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>An S3 bucket that has the following two tags:
                *                                 <code>{"Stage":"Test"}</code>, and
                *                             <code>{"Version":"1"}</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *                 <p>The query would not include the following items in the results, however. </p>
                *                 <ul>
                *                   <li>
                *                         <p>An EC2 instance that has only the following tag:
                *                                 <code>{"Stage":"Deploy"}</code>.</p>
                *                         <p>The instance does not have <b>all</b> of the
                *                             tag keys specified in the filter, so it is excluded from the
                *                             results.</p>
                *                     </li>
                *                   <li>
                *                         <p>An RDS database that has the following two tags:
                *                                 <code>{"Stage":"Archived"}</code> and
                *                             <code>{"Version":"4"}</code>
                *                      </p>
                *                         <p>The database has all of the tag keys, but none of those keys has an
                *                             associated value that matches at least one of the specified values in
                *                             the filter.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            Type: QueryType | string | undefined;
            /**
                * <p>The query that defines a group or a search.</p>
                */
            Query: string | undefined;
    }
    export namespace ResourceQuery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceQuery) => any;
    }
    export interface CreateGroupInput {
            /**
                * <p>The name of the group, which is the identifier of the group in other operations. You
                *             can't change the name of a resource group after you create it. A resource group name can
                *             consist of letters, numbers, hyphens, periods, and underscores. The name cannot start
                *             with <code>AWS</code> or <code>aws</code>; these are reserved. A resource group name
                *             must be unique within each AWS Region in your AWS account.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description of the resource group. Descriptions can consist of letters, numbers,
                *             hyphens, underscores, periods, and spaces.</p>
                */
            Description?: string;
            /**
                * <p>The resource query that determines which AWS resources are members of this group.
                *             For more information about resource queries, see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create
                *                 a tag-based group in Resource Groups</a>. </p>
                *         <note>
                *             <p>A resource group can contain either a <code>ResourceQuery</code> or a
                *                     <code>Configuration</code>, but not both.</p>
                *         </note>
                */
            ResourceQuery?: ResourceQuery;
            /**
                * <p>The tags to add to the group. A tag is key-value pair string.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A configuration associates the resource group with an AWS service and specifies how
                *             the service can interact with the resources in the group. A configuration is an array of
                *                 <a>GroupConfigurationItem</a> elements. For details about the syntax of
                *             service configurations, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource
                *                 groups</a>.</p>
                *         <note>
                *             <p>A resource group can contain either a <code>Configuration</code> or a
                *                     <code>ResourceQuery</code>, but not both.</p>
                *         </note>
                */
            Configuration?: GroupConfigurationItem[];
    }
    export namespace CreateGroupInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupInput) => any;
    }
    /**
        * <p>A resource group that contains AWS resources. You can assign resources to the group
        *             by associating either of the following elements with the group:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a>ResourceQuery</a> - Use a resource query to specify a set of tag
        *                     keys and values. All resources in the same AWS Region and AWS account that
        *                     have those keys with the same values are included in the group. You can add a
        *                     resource query when you create the group, or later by using the <a>PutGroupConfiguration</a> operation.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GroupConfiguration</a> - Use a service configuration to
        *                     associate the group with an AWS service. The configuration specifies which
        *                     resource types can be included in the group.</p>
        *             </li>
        *          </ul>
        */
    export interface Group {
            /**
                * <p>The ARN of the resource group.</p>
                */
            GroupArn: string | undefined;
            /**
                * <p>The name of the resource group.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description of the resource group.</p>
                */
            Description?: string;
    }
    export namespace Group {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Group) => any;
    }
    export enum GroupConfigurationStatus {
            UPDATE_COMPLETE = "UPDATE_COMPLETE",
            UPDATE_FAILED = "UPDATE_FAILED",
            UPDATING = "UPDATING"
    }
    /**
        * <p>A service configuration associated with a resource group. The configuration options
        *             are determined by the AWS service that defines the <code>Type</code>, and specifies
        *             which resources can be included in the group. You can add a service configuration when
        *             you create the group by using <a>CreateGroup</a>, or later by using the <a>PutGroupConfiguration</a> operation. For details about group service
        *             configuration syntax, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource
        *                 groups</a>.</p>
        */
    export interface GroupConfiguration {
            /**
                * <p>The configuration currently associated with the group and in effect.</p>
                */
            Configuration?: GroupConfigurationItem[];
            /**
                * <p>If present, the new configuration that is in the process of being applied to the
                *             group.</p>
                */
            ProposedConfiguration?: GroupConfigurationItem[];
            /**
                * <p>The current status of an attempt to update the group configuration.</p>
                */
            Status?: GroupConfigurationStatus | string;
            /**
                * <p>If present, the reason why a request to update the group configuration failed.</p>
                */
            FailureReason?: string;
    }
    export namespace GroupConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupConfiguration) => any;
    }
    export interface CreateGroupOutput {
            /**
                * <p>The description of the resource group.</p>
                */
            Group?: Group;
            /**
                * <p>The resource query associated with the group. For more information about resource
                *             queries, see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create
                *                 a tag-based group in Resource Groups</a>. </p>
                */
            ResourceQuery?: ResourceQuery;
            /**
                * <p>The tags associated with the group.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The service configuration associated with the resource group. For details about the
                *             syntax of a service configuration, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource
                *                 groups</a>.</p>
                */
            GroupConfiguration?: GroupConfiguration;
    }
    export namespace CreateGroupOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupOutput) => any;
    }
    /**
        * <p>The caller isn't authorized to make the request. Check permissions.</p>
        */
    export class ForbiddenException extends __BaseException {
            readonly name: "ForbiddenException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
    }
    /**
        * <p>An internal error occurred while processing the request. Try again later.</p>
        */
    export class InternalServerErrorException extends __BaseException {
            readonly name: "InternalServerErrorException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>);
    }
    /**
        * <p>The request uses an HTTP method that isn't allowed for the specified resource.</p>
        */
    export class MethodNotAllowedException extends __BaseException {
            readonly name: "MethodNotAllowedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MethodNotAllowedException, __BaseException>);
    }
    /**
        * <p>You've exceeded throttling limits by making too many requests in a period of
        *             time.</p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    export interface DeleteGroupInput {
            /**
                * @deprecated
                *
                * <p>Deprecated - don't use this parameter. Use <code>Group</code> instead.</p>
                */
            GroupName?: string;
            /**
                * <p>The name or the ARN of the resource group to delete.</p>
                */
            Group?: string;
    }
    export namespace DeleteGroupInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGroupInput) => any;
    }
    export interface DeleteGroupOutput {
            /**
                * <p>A full description of the deleted resource group.</p>
                */
            Group?: Group;
    }
    export namespace DeleteGroupOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGroupOutput) => any;
    }
    /**
        * <p>One or more of the specified resources don't exist.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    export interface GetGroupInput {
            /**
                * @deprecated
                *
                * <p>Deprecated - don't use this parameter. Use <code>Group</code> instead.</p>
                */
            GroupName?: string;
            /**
                * <p>The name or the ARN of the resource group to retrieve.</p>
                */
            Group?: string;
    }
    export namespace GetGroupInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupInput) => any;
    }
    export interface GetGroupOutput {
            /**
                * <p>A full description of the resource group.</p>
                */
            Group?: Group;
    }
    export namespace GetGroupOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupOutput) => any;
    }
    export interface GetGroupConfigurationInput {
            /**
                * <p>The name or the ARN of the resource group.</p>
                */
            Group?: string;
    }
    export namespace GetGroupConfigurationInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupConfigurationInput) => any;
    }
    export interface GetGroupConfigurationOutput {
            /**
                * <p>The service configuration associated with the specified group. For details about the
                *             service configuration syntax, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for resource
                *                 groups</a>.</p>
                */
            GroupConfiguration?: GroupConfiguration;
    }
    export namespace GetGroupConfigurationOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupConfigurationOutput) => any;
    }
    export interface GetGroupQueryInput {
            /**
                * @deprecated
                *
                * <p>Don't use this parameter. Use <code>Group</code> instead.</p>
                */
            GroupName?: string;
            /**
                * <p>The name or the ARN of the resource group to query.</p>
                */
            Group?: string;
    }
    export namespace GetGroupQueryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupQueryInput) => any;
    }
    /**
        * <p>A mapping of a query attached to a resource group that determines the AWS resources
        *             that are members of the group.</p>
        */
    export interface GroupQuery {
            /**
                * <p>The name of the resource group that is associated with the specified resource
                *             query.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The resource query that determines which AWS resources are members of the associated
                *             resource group.</p>
                */
            ResourceQuery: ResourceQuery | undefined;
    }
    export namespace GroupQuery {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupQuery) => any;
    }
    export interface GetGroupQueryOutput {
            /**
                * <p>The resource query associated with the specified group. For more information about
                *             resource queries, see <a href="https://docs.aws.amazon.com/ARG/latest/userguide/gettingstarted-query.html#gettingstarted-query-cli-tag">Create
                *                 a tag-based group in Resource Groups</a>.</p>
                */
            GroupQuery?: GroupQuery;
    }
    export namespace GetGroupQueryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupQueryOutput) => any;
    }
    export interface GetTagsInput {
            /**
                * <p>The ARN of the resource group whose tags you want to retrieve.</p>
                */
            Arn: string | undefined;
    }
    export namespace GetTagsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTagsInput) => any;
    }
    export interface GetTagsOutput {
            /**
                * <p>The ARN of the tagged resource group.</p>
                */
            Arn?: string;
            /**
                * <p>The tags associated with the specified resource group.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace GetTagsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTagsOutput) => any;
    }
    export interface GroupResourcesInput {
            /**
                * <p>The name or the ARN of the resource group to add resources to.</p>
                */
            Group: string | undefined;
            /**
                * <p>The list of ARNs for resources to be added to the group. </p>
                */
            ResourceArns: string[] | undefined;
    }
    export namespace GroupResourcesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupResourcesInput) => any;
    }
    /**
        * <p>A resource that failed to be added to or removed from a group.</p>
        */
    export interface FailedResource {
            /**
                * <p>The ARN of the resource that failed to be added or removed.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The error message text associated with the failure.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The error code associated with the failure.</p>
                */
            ErrorCode?: string;
    }
    export namespace FailedResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailedResource) => any;
    }
    /**
        * <p>A structure that identifies a resource that is currently pending addition to the group
        *             as a member. Adding a resource to a resource group happens asynchronously as a
        *             background task and this one isn't completed yet.</p>
        */
    export interface PendingResource {
            /**
                * <p>The Amazon resource name (ARN) of the resource that's in a pending state.</p>
                */
            ResourceArn?: string;
    }
    export namespace PendingResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingResource) => any;
    }
    export interface GroupResourcesOutput {
            /**
                * <p>A list of ARNs of resources that were successfully added to the group by this
                *             operation.</p>
                */
            Succeeded?: string[];
            /**
                * <p>A list of ARNs of any resources that failed to be added to the group by this
                *             operation.</p>
                */
            Failed?: FailedResource[];
            /**
                * <p>A list of ARNs of any resources that are still in the process of being added to the
                *             group by this operation. These pending additions continue asynchronously. You can check
                *             the status of pending additions by using the <code>
                *                <a>ListGroupResources</a>
                *             </code> operation, and checking the <code>Resources</code> array in the response
                *             and the <code>Status</code> field of each object in that array. </p>
                */
            Pending?: PendingResource[];
    }
    export namespace GroupResourcesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupResourcesOutput) => any;
    }
    export enum ResourceFilterName {
            ResourceType = "resource-type"
    }
    /**
        * <p>A filter name and value pair that is used to obtain more specific results from a list
        *             of resources.</p>
        */
    export interface ResourceFilter {
            /**
                * <p>The name of the filter. Filter names are case-sensitive.</p>
                */
            Name: ResourceFilterName | string | undefined;
            /**
                * <p>One or more filter values. Allowed filter values vary by resource filter name, and are
                *             case-sensitive.</p>
                */
            Values: string[] | undefined;
    }
    export namespace ResourceFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceFilter) => any;
    }
    export interface ListGroupResourcesInput {
            /**
                * @deprecated
                *
                * <important>
                *             <p>
                *                <i>
                *                   <b>Deprecated - don't use this parameter. Use the
                *                             <code>Group</code> request field instead.</b>
                *                </i>
                *             </p>
                *         </important>
                */
            GroupName?: string;
            /**
                * <p>The name or the ARN of the resource group</p>
                */
            Group?: string;
            /**
                * <p>Filters, formatted as <a>ResourceFilter</a> objects, that you want to apply
                *             to a <code>ListGroupResources</code> operation. Filters the results to include only
                *             those of the specified resource types.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-type</code> - Filter resources by their type. Specify up to
                *                     five resource types in the format <code>AWS::ServiceCode::ResourceType</code>.
                *                     For example, <code>AWS::EC2::Instance</code>, or <code>AWS::S3::Bucket</code>.
                *                 </p>
                *             </li>
                *          </ul>
                *         <p>When you specify a <code>resource-type</code> filter for
                *                 <code>ListGroupResources</code>, AWS Resource Groups validates your filter resource types
                *             against the types that are defined in the query associated with the group. For example,
                *             if a group contains only S3 buckets because its query specifies only that resource type,
                *             but your <code>resource-type</code> filter includes EC2 instances, AWS Resource Groups
                *             does not filter for EC2 instances. In this case, a <code>ListGroupResources</code>
                *             request returns a <code>BadRequestException</code> error with a message similar to the
                *             following:</p>
                *         <p>
                *             <code>The resource types specified as filters in the request are not
                *             valid.</code>
                *          </p>
                *         <p>The error includes a list of resource types that failed the validation because they
                *             are not part of the query associated with the group. This validation doesn't occur when
                *             the group query specifies <code>AWS::AllSupported</code>, because a group based on such
                *             a query can contain any of the allowed resource types for the query type (tag-based or
                *             AWS CloudFormation stack-based queries).</p>
                */
            Filters?: ResourceFilter[];
            /**
                * <p>The total number of results that you want included on each page of the
                * response. If you do not include this parameter, it defaults to a value that is specific to the
                * operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
                * response element is present and has a value (is not null). Include that value as the
                * <code>NextToken</code> request parameter in the next call to the operation to get the next part
                * of the results. Note that the service might return fewer results than the maximum even when there
                * are more results available. You should check <code>NextToken</code> after every operation to
                * ensure that you receive all of the results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The parameter for receiving additional results if you receive a
                * <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
                * indicates that more output is available. Set this parameter to the value provided by a previous
                * call's <code>NextToken</code> response to indicate where the output should continue from.</p>
                */
            NextToken?: string;
    }
    export namespace ListGroupResourcesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupResourcesInput) => any;
    }
    export enum QueryErrorCode {
            CLOUDFORMATION_STACK_INACTIVE = "CLOUDFORMATION_STACK_INACTIVE",
            CLOUDFORMATION_STACK_NOT_EXISTING = "CLOUDFORMATION_STACK_NOT_EXISTING"
    }
    /**
        * <p>A two-part error structure that can occur in <code>ListGroupResources</code> or
        *                 <code>SearchResources</code> operations on CloudFormation stack-based queries. The error
        *             occurs if the CloudFormation stack on which the query is based either does not exist, or has a
        *             status that renders the stack inactive. A <code>QueryError</code> occurrence does not
        *             necessarily mean that AWS Resource Groups could not complete the operation, but the resulting
        *             group might have no member resources.</p>
        */
    export interface QueryError {
            /**
                * <p>Possible values are <code>CLOUDFORMATION_STACK_INACTIVE</code> and
                *                 <code>CLOUDFORMATION_STACK_NOT_EXISTING</code>.</p>
                */
            ErrorCode?: QueryErrorCode | string;
            /**
                * <p>A message that explains the <code>ErrorCode</code> value. Messages might state that
                *             the specified CloudFormation stack does not exist (or no longer exists). For
                *                 <code>CLOUDFORMATION_STACK_INACTIVE</code>, the message typically states that the
                *             CloudFormation stack has a status that is not (or no longer) active, such as
                *                 <code>CREATE_FAILED</code>.</p>
                */
            Message?: string;
    }
    export namespace QueryError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryError) => any;
    }
    /**
        * <p>A structure that contains the ARN of a resource and its resource type.</p>
        */
    export interface ResourceIdentifier {
            /**
                * <p>The ARN of a resource.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The resource type of a resource, such as <code>AWS::EC2::Instance</code>.</p>
                */
            ResourceType?: string;
    }
    export namespace ResourceIdentifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceIdentifier) => any;
    }
    export enum ResourceStatusValue {
            Pending = "PENDING"
    }
    /**
        * <p>A structure that identifies the current group membership status for a resource. Adding
        *             a resource to a resource group is performed asynchronously as a background task. A
        *                 <code>PENDING</code> status indicates, for this resource, that the process isn't
        *             completed yet.</p>
        */
    export interface ResourceStatus {
            /**
                * <p>The current status.</p>
                */
            Name?: ResourceStatusValue | string;
    }
    export namespace ResourceStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceStatus) => any;
    }
    /**
        * <p>A structure returned by the <a>ListGroupResources</a> operation that
        *             contains identity and group membership status information for one of the resources in
        *             the group.</p>
        */
    export interface ListGroupResourcesItem {
            /**
                * <p>A structure that contains the ARN of a resource and its resource type.</p>
                */
            Identifier?: ResourceIdentifier;
            /**
                * <p>A structure that contains the status of this resource's membership in the
                *             group.</p>
                *         <note>
                *             <p>This field is present in the response only if the group is of type
                *                     <code>AWS::EC2::HostManagement</code>.</p>
                *         </note>
                */
            Status?: ResourceStatus;
    }
    export namespace ListGroupResourcesItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupResourcesItem) => any;
    }
    export interface ListGroupResourcesOutput {
            /**
                * <p>An array of resources from which you can determine each resource's identity, type, and
                *             group membership status.</p>
                */
            Resources?: ListGroupResourcesItem[];
            /**
                * @deprecated
                *
                * <important>
                *             <p>
                *                <b>
                *                   <i>Deprecated - don't use this parameter. Use the
                *                             <code>Resources</code> response field
                *                 instead.</i>
                *                </b>
                *             </p>
                *         </important>
                */
            ResourceIdentifiers?: ResourceIdentifier[];
            /**
                * <p>If present, indicates that more output is available than is
                * included in the current response. Use this value in the <code>NextToken</code> request parameter
                * in a subsequent call to the operation to get the next part of the output. You should repeat this
                * until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
                */
            NextToken?: string;
            /**
                * <p>A list of <code>QueryError</code> objects. Each error is an object that contains
                *                 <code>ErrorCode</code> and <code>Message</code> structures. Possible values for
                *                 <code>ErrorCode</code> are <code>CLOUDFORMATION_STACK_INACTIVE</code> and
                *                 <code>CLOUDFORMATION_STACK_NOT_EXISTING</code>.</p>
                */
            QueryErrors?: QueryError[];
    }
    export namespace ListGroupResourcesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupResourcesOutput) => any;
    }
    /**
        * <p>The request was rejected because it doesn't have valid credentials for the target
        *             resource.</p>
        */
    export class UnauthorizedException extends __BaseException {
            readonly name: "UnauthorizedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnauthorizedException, __BaseException>);
    }
    export enum GroupFilterName {
            ConfigurationType = "configuration-type",
            ResourceType = "resource-type"
    }
    /**
        * <p>A filter collection that you can use to restrict the results from a <code>List</code>
        *             operation to only those you want to include.</p>
        */
    export interface GroupFilter {
            /**
                * <p>The name of the filter. Filter names are case-sensitive.</p>
                */
            Name: GroupFilterName | string | undefined;
            /**
                * <p>One or more filter values. Allowed filter values vary by group filter name, and are
                *             case-sensitive.</p>
                */
            Values: string[] | undefined;
    }
    export namespace GroupFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupFilter) => any;
    }
    export interface ListGroupsInput {
            /**
                * <p>Filters, formatted as <a>GroupFilter</a> objects, that you want to apply to
                *             a <code>ListGroups</code> operation.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>resource-type</code> - Filter the results to include only those of the
                *                     specified resource types. Specify up to five resource types in the format
                *                             <code>AWS::<i>ServiceCode</i>::<i>ResourceType</i>
                *                   </code>.
                *                     For example, <code>AWS::EC2::Instance</code>, or
                *                     <code>AWS::S3::Bucket</code>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>configuration-type</code> - Filter the results to include only those
                *                     groups that have the specified configuration types attached. The current
                *                     supported values are:</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>AWS:EC2::CapacityReservationPool</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>AWS:EC2::HostManagement</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            Filters?: GroupFilter[];
            /**
                * <p>The total number of results that you want included on each page of the
                * response. If you do not include this parameter, it defaults to a value that is specific to the
                * operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
                * response element is present and has a value (is not null). Include that value as the
                * <code>NextToken</code> request parameter in the next call to the operation to get the next part
                * of the results. Note that the service might return fewer results than the maximum even when there
                * are more results available. You should check <code>NextToken</code> after every operation to
                * ensure that you receive all of the results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The parameter for receiving additional results if you receive a
                * <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
                * indicates that more output is available. Set this parameter to the value provided by a previous
                * call's <code>NextToken</code> response to indicate where the output should continue from.</p>
                */
            NextToken?: string;
    }
    export namespace ListGroupsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsInput) => any;
    }
    /**
        * <p>The unique identifiers for a resource group.</p>
        */
    export interface GroupIdentifier {
            /**
                * <p>The name of the resource group.</p>
                */
            GroupName?: string;
            /**
                * <p>The ARN of the resource group.</p>
                */
            GroupArn?: string;
    }
    export namespace GroupIdentifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupIdentifier) => any;
    }
    export interface ListGroupsOutput {
            /**
                * <p>A list of <a>GroupIdentifier</a> objects. Each identifier is an object that
                *             contains both the <code>Name</code> and the <code>GroupArn</code>.</p>
                */
            GroupIdentifiers?: GroupIdentifier[];
            /**
                * @deprecated
                *
                * <important>
                *             <p>
                *                <i>
                *                   <b>Deprecated - don't use this field. Use the
                *                             <code>GroupIdentifiers</code> response field
                *                     instead.</b>
                *                </i>
                *             </p>
                *         </important>
                */
            Groups?: Group[];
            /**
                * <p>If present, indicates that more output is available than is
                * included in the current response. Use this value in the <code>NextToken</code> request parameter
                * in a subsequent call to the operation to get the next part of the output. You should repeat this
                * until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
                */
            NextToken?: string;
    }
    export namespace ListGroupsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsOutput) => any;
    }
    export interface PutGroupConfigurationInput {
            /**
                * <p>The name or ARN of the resource group with the configuration that you want to
                *             update.</p>
                */
            Group?: string;
            /**
                * <p>The new configuration to associate with the specified group. A configuration
                *             associates the resource group with an AWS service and specifies how the service can
                *             interact with the resources in the group. A configuration is an array of <a>GroupConfigurationItem</a> elements.</p>
                *         <p>For information about the syntax of a service configuration, see <a href="https://docs.aws.amazon.com/ARG/latest/APIReference/about-slg.html">Service configurations for
                *                 resource groups</a>.</p>
                *         <note>
                *             <p>A resource group can contain either a <code>Configuration</code> or a
                *                     <code>ResourceQuery</code>, but not both.</p>
                *         </note>
                */
            Configuration?: GroupConfigurationItem[];
    }
    export namespace PutGroupConfigurationInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutGroupConfigurationInput) => any;
    }
    export interface PutGroupConfigurationOutput {
    }
    export namespace PutGroupConfigurationOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutGroupConfigurationOutput) => any;
    }
    export interface SearchResourcesInput {
            /**
                * <p>The search query, using the same formats that are supported for resource group
                *             definition. For more information, see <a>CreateGroup</a>.</p>
                */
            ResourceQuery: ResourceQuery | undefined;
            /**
                * <p>The total number of results that you want included on each page of the
                * response. If you do not include this parameter, it defaults to a value that is specific to the
                * operation. If additional items exist beyond the maximum you specify, the <code>NextToken</code>
                * response element is present and has a value (is not null). Include that value as the
                * <code>NextToken</code> request parameter in the next call to the operation to get the next part
                * of the results. Note that the service might return fewer results than the maximum even when there
                * are more results available. You should check <code>NextToken</code> after every operation to
                * ensure that you receive all of the results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The parameter for receiving additional results if you receive a
                * <code>NextToken</code> response in a previous request. A <code>NextToken</code> response
                * indicates that more output is available. Set this parameter to the value provided by a previous
                * call's <code>NextToken</code> response to indicate where the output should continue from.</p>
                */
            NextToken?: string;
    }
    export namespace SearchResourcesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchResourcesInput) => any;
    }
    export interface SearchResourcesOutput {
            /**
                * <p>The ARNs and resource types of resources that are members of the group that you
                *             specified.</p>
                */
            ResourceIdentifiers?: ResourceIdentifier[];
            /**
                * <p>If present, indicates that more output is available than is
                * included in the current response. Use this value in the <code>NextToken</code> request parameter
                * in a subsequent call to the operation to get the next part of the output. You should repeat this
                * until the <code>NextToken</code> response element comes back as <code>null</code>.</p>
                */
            NextToken?: string;
            /**
                * <p>A list of <code>QueryError</code> objects. Each error is an object that contains
                *                 <code>ErrorCode</code> and <code>Message</code> structures. Possible values for
                *                 <code>ErrorCode</code> are <code>CLOUDFORMATION_STACK_INACTIVE</code> and
                *                 <code>CLOUDFORMATION_STACK_NOT_EXISTING</code>.</p>
                */
            QueryErrors?: QueryError[];
    }
    export namespace SearchResourcesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchResourcesOutput) => any;
    }
    export interface TagInput {
            /**
                * <p>The ARN of the resource group to which to add tags.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The tags to add to the specified resource group. A tag is a string-to-string map of
                *             key-value pairs.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagInput) => any;
    }
    export interface TagOutput {
            /**
                * <p>The ARN of the tagged resource.</p>
                */
            Arn?: string;
            /**
                * <p>The tags that have been added to the specified resource group.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace TagOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagOutput) => any;
    }
    export interface UngroupResourcesInput {
            /**
                * <p>The name or the ARN of the resource group from which to remove the resources.</p>
                */
            Group: string | undefined;
            /**
                * <p>The ARNs of the resources to be removed from the group.</p>
                */
            ResourceArns: string[] | undefined;
    }
    export namespace UngroupResourcesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UngroupResourcesInput) => any;
    }
    export interface UngroupResourcesOutput {
            /**
                * <p>A list of resources that were successfully removed from the group by this
                *             operation.</p>
                */
            Succeeded?: string[];
            /**
                * <p>A list of any resources that failed to be removed from the group by this
                *             operation.</p>
                */
            Failed?: FailedResource[];
            /**
                * <p>A list of any resources that are still in the process of being removed from the group
                *             by this operation. These pending removals continue asynchronously. You can check the
                *             status of pending removals by using the <code>
                *                <a>ListGroupResources</a>
                *             </code> operation. After the resource is successfully removed, it no longer
                *             appears in the response.</p>
                */
            Pending?: PendingResource[];
    }
    export namespace UngroupResourcesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UngroupResourcesOutput) => any;
    }
    export interface UntagInput {
            /**
                * <p>The ARN of the resource group from which to remove tags. The command removed both the
                *             specified keys and any values associated with those keys.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The keys of the tags to be removed.</p>
                */
            Keys: string[] | undefined;
    }
    export namespace UntagInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagInput) => any;
    }
    export interface UntagOutput {
            /**
                * <p>The ARN of the resource group from which tags have been removed.</p>
                */
            Arn?: string;
            /**
                * <p>The keys of the tags that were removed.</p>
                */
            Keys?: string[];
    }
    export namespace UntagOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagOutput) => any;
    }
    export interface UpdateGroupInput {
            /**
                * @deprecated
                *
                * <p>Don't use this parameter. Use <code>Group</code> instead.</p>
                */
            GroupName?: string;
            /**
                * <p>The name or the ARN of the resource group to modify.</p>
                */
            Group?: string;
            /**
                * <p>The new description that you want to update the resource group with. Descriptions can
                *             contain letters, numbers, hyphens, underscores, periods, and spaces.</p>
                */
            Description?: string;
    }
    export namespace UpdateGroupInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGroupInput) => any;
    }
    export interface UpdateGroupOutput {
            /**
                * <p>The update description of the resource group.</p>
                */
            Group?: Group;
    }
    export namespace UpdateGroupOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGroupOutput) => any;
    }
    export interface UpdateGroupQueryInput {
            /**
                * @deprecated
                *
                * <p>Don't use this parameter. Use <code>Group</code> instead.</p>
                */
            GroupName?: string;
            /**
                * <p>The name or the ARN of the resource group to query.</p>
                */
            Group?: string;
            /**
                * <p>The resource query to determine which AWS resources are members of this resource
                *             group.</p>
                *         <note>
                *             <p>A resource group can contain either a <code>Configuration</code> or a
                *                     <code>ResourceQuery</code>, but not both.</p>
                *         </note>
                */
            ResourceQuery: ResourceQuery | undefined;
    }
    export namespace UpdateGroupQueryInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGroupQueryInput) => any;
    }
    export interface UpdateGroupQueryOutput {
            /**
                * <p>The updated resource query associated with the resource group after the update.</p>
                */
            GroupQuery?: GroupQuery;
    }
    export namespace UpdateGroupQueryOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGroupQueryOutput) => any;
    }
}

declare module '@aws-sdk/client-resource-groups/node_modules/@aws-sdk/client-resource-groups/dist-types/models/ResourceGroupsServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from ResourceGroups service.
        */
    export class ResourceGroupsServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

