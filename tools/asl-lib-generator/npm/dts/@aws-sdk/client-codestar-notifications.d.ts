// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-codestar-notifications' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CodestarNotificationsClient } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient";
    import { CreateNotificationRuleCommandInput, CreateNotificationRuleCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/CreateNotificationRuleCommand";
    import { DeleteNotificationRuleCommandInput, DeleteNotificationRuleCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/DeleteNotificationRuleCommand";
    import { DeleteTargetCommandInput, DeleteTargetCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/DeleteTargetCommand";
    import { DescribeNotificationRuleCommandInput, DescribeNotificationRuleCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/DescribeNotificationRuleCommand";
    import { ListEventTypesCommandInput, ListEventTypesCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/ListEventTypesCommand";
    import { ListNotificationRulesCommandInput, ListNotificationRulesCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/ListNotificationRulesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/ListTagsForResourceCommand";
    import { ListTargetsCommandInput, ListTargetsCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/ListTargetsCommand";
    import { SubscribeCommandInput, SubscribeCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/SubscribeCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/TagResourceCommand";
    import { UnsubscribeCommandInput, UnsubscribeCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/UnsubscribeCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/UntagResourceCommand";
    import { UpdateNotificationRuleCommandInput, UpdateNotificationRuleCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/UpdateNotificationRuleCommand";
    /**
        * <p>This AWS CodeStar Notifications API Reference provides descriptions and usage examples of the
        *       operations and data types for the AWS CodeStar Notifications API. You can use the AWS CodeStar Notifications API
        *       to work with the following objects:</p>
        *
        *          <p>Notification rules, by calling the following: </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>CreateNotificationRule</a>, which creates a notification rule for a
        *                     resource in your account. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DeleteNotificationRule</a>, which deletes a notification rule. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DescribeNotificationRule</a>, which provides information about a notification rule. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListNotificationRules</a>, which lists the notification rules associated with
        *           your account. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UpdateNotificationRule</a>, which changes the name, events, or targets associated with a
        *           notification rule. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>Subscribe</a>, which subscribes a target to a notification rule. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>Unsubscribe</a>, which removes a target from a notification rule. </p>
        *             </li>
        *          </ul>
        *
        *          <p>Targets, by calling the following: </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>DeleteTarget</a>, which removes a notification rule target (SNS topic) from a
        *           notification rule. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListTargets</a>, which lists the targets associated with a
        *                     notification rule. </p>
        *             </li>
        *          </ul>
        *
        *          <p>Events, by calling the following: </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>ListEventTypes</a>, which lists the event types you can include in
        *                     a notification rule. </p>
        *             </li>
        *          </ul>
        *          <p>Tags, by calling the following: </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>ListTagsForResource</a>, which lists the tags already associated
        *                     with a notification rule in your account. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>TagResource</a>, which associates a tag you provide with a
        *                     notification rule in your account. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UntagResource</a>, which removes a tag from a notification rule in
        *                     your account. </p>
        *             </li>
        *          </ul>
        *
        *
        *
        *          <p> For information about how to use AWS CodeStar Notifications, see link in the CodeStarNotifications User Guide.
        *     </p>
        */
    export class CodestarNotifications extends CodestarNotificationsClient {
            /**
                * <p>Creates a notification rule for a resource. The rule specifies the events you want
                *             notifications about and the targets (such as SNS topics) where you want to receive
                *             them.</p>
                */
            createNotificationRule(args: CreateNotificationRuleCommandInput, options?: __HttpHandlerOptions): Promise<CreateNotificationRuleCommandOutput>;
            createNotificationRule(args: CreateNotificationRuleCommandInput, cb: (err: any, data?: CreateNotificationRuleCommandOutput) => void): void;
            createNotificationRule(args: CreateNotificationRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateNotificationRuleCommandOutput) => void): void;
            /**
                * <p>Deletes a notification rule for a resource.</p>
                */
            deleteNotificationRule(args: DeleteNotificationRuleCommandInput, options?: __HttpHandlerOptions): Promise<DeleteNotificationRuleCommandOutput>;
            deleteNotificationRule(args: DeleteNotificationRuleCommandInput, cb: (err: any, data?: DeleteNotificationRuleCommandOutput) => void): void;
            deleteNotificationRule(args: DeleteNotificationRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteNotificationRuleCommandOutput) => void): void;
            /**
                * <p>Deletes a specified target for notifications.</p>
                */
            deleteTarget(args: DeleteTargetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTargetCommandOutput>;
            deleteTarget(args: DeleteTargetCommandInput, cb: (err: any, data?: DeleteTargetCommandOutput) => void): void;
            deleteTarget(args: DeleteTargetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTargetCommandOutput) => void): void;
            /**
                * <p>Returns information about a specified notification rule.</p>
                */
            describeNotificationRule(args: DescribeNotificationRuleCommandInput, options?: __HttpHandlerOptions): Promise<DescribeNotificationRuleCommandOutput>;
            describeNotificationRule(args: DescribeNotificationRuleCommandInput, cb: (err: any, data?: DescribeNotificationRuleCommandOutput) => void): void;
            describeNotificationRule(args: DescribeNotificationRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeNotificationRuleCommandOutput) => void): void;
            /**
                * <p>Returns information about the event types available for configuring notifications.</p>
                */
            listEventTypes(args: ListEventTypesCommandInput, options?: __HttpHandlerOptions): Promise<ListEventTypesCommandOutput>;
            listEventTypes(args: ListEventTypesCommandInput, cb: (err: any, data?: ListEventTypesCommandOutput) => void): void;
            listEventTypes(args: ListEventTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEventTypesCommandOutput) => void): void;
            /**
                * <p>Returns a list of the notification rules for an AWS account.</p>
                */
            listNotificationRules(args: ListNotificationRulesCommandInput, options?: __HttpHandlerOptions): Promise<ListNotificationRulesCommandOutput>;
            listNotificationRules(args: ListNotificationRulesCommandInput, cb: (err: any, data?: ListNotificationRulesCommandOutput) => void): void;
            listNotificationRules(args: ListNotificationRulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListNotificationRulesCommandOutput) => void): void;
            /**
                * <p>Returns a list of the tags associated with a notification rule.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Returns a list of the notification rule targets for an AWS account.</p>
                */
            listTargets(args: ListTargetsCommandInput, options?: __HttpHandlerOptions): Promise<ListTargetsCommandOutput>;
            listTargets(args: ListTargetsCommandInput, cb: (err: any, data?: ListTargetsCommandOutput) => void): void;
            listTargets(args: ListTargetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTargetsCommandOutput) => void): void;
            /**
                * <p>Creates an association between a notification rule and an SNS topic so that the
                *             associated target can receive notifications when the events described in the rule are
                *             triggered.</p>
                */
            subscribe(args: SubscribeCommandInput, options?: __HttpHandlerOptions): Promise<SubscribeCommandOutput>;
            subscribe(args: SubscribeCommandInput, cb: (err: any, data?: SubscribeCommandOutput) => void): void;
            subscribe(args: SubscribeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SubscribeCommandOutput) => void): void;
            /**
                * <p>Associates a set of provided tags with a notification rule.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes an association between a notification rule and an Amazon SNS topic so that
                *             subscribers to that topic stop receiving notifications when the events described in the
                *             rule are triggered.</p>
                */
            unsubscribe(args: UnsubscribeCommandInput, options?: __HttpHandlerOptions): Promise<UnsubscribeCommandOutput>;
            unsubscribe(args: UnsubscribeCommandInput, cb: (err: any, data?: UnsubscribeCommandOutput) => void): void;
            unsubscribe(args: UnsubscribeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UnsubscribeCommandOutput) => void): void;
            /**
                * <p>Removes the association between one or more provided tags and a notification
                *             rule.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates a notification rule for a resource. You can change the events that trigger the
                *             notification rule, the status of the rule, and the targets that receive the
                *             notifications.</p>
                *          <note>
                *             <p>To add or remove tags for a notification rule, you must use <a>TagResource</a> and <a>UntagResource</a>.</p>
                *          </note>
                */
            updateNotificationRule(args: UpdateNotificationRuleCommandInput, options?: __HttpHandlerOptions): Promise<UpdateNotificationRuleCommandOutput>;
            updateNotificationRule(args: UpdateNotificationRuleCommandInput, cb: (err: any, data?: UpdateNotificationRuleCommandOutput) => void): void;
            updateNotificationRule(args: UpdateNotificationRuleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateNotificationRuleCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateNotificationRuleCommandInput, CreateNotificationRuleCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/CreateNotificationRuleCommand";
    import { DeleteNotificationRuleCommandInput, DeleteNotificationRuleCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/DeleteNotificationRuleCommand";
    import { DeleteTargetCommandInput, DeleteTargetCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/DeleteTargetCommand";
    import { DescribeNotificationRuleCommandInput, DescribeNotificationRuleCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/DescribeNotificationRuleCommand";
    import { ListEventTypesCommandInput, ListEventTypesCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/ListEventTypesCommand";
    import { ListNotificationRulesCommandInput, ListNotificationRulesCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/ListNotificationRulesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/ListTagsForResourceCommand";
    import { ListTargetsCommandInput, ListTargetsCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/ListTargetsCommand";
    import { SubscribeCommandInput, SubscribeCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/SubscribeCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/TagResourceCommand";
    import { UnsubscribeCommandInput, UnsubscribeCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/UnsubscribeCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/UntagResourceCommand";
    import { UpdateNotificationRuleCommandInput, UpdateNotificationRuleCommandOutput } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/UpdateNotificationRuleCommand";
    export type ServiceInputTypes = CreateNotificationRuleCommandInput | DeleteNotificationRuleCommandInput | DeleteTargetCommandInput | DescribeNotificationRuleCommandInput | ListEventTypesCommandInput | ListNotificationRulesCommandInput | ListTagsForResourceCommandInput | ListTargetsCommandInput | SubscribeCommandInput | TagResourceCommandInput | UnsubscribeCommandInput | UntagResourceCommandInput | UpdateNotificationRuleCommandInput;
    export type ServiceOutputTypes = CreateNotificationRuleCommandOutput | DeleteNotificationRuleCommandOutput | DeleteTargetCommandOutput | DescribeNotificationRuleCommandOutput | ListEventTypesCommandOutput | ListNotificationRulesCommandOutput | ListTagsForResourceCommandOutput | ListTargetsCommandOutput | SubscribeCommandOutput | TagResourceCommandOutput | UnsubscribeCommandOutput | UntagResourceCommandOutput | UpdateNotificationRuleCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type CodestarNotificationsClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of CodestarNotificationsClient class constructor that set the region, credentials and other options.
        */
    export interface CodestarNotificationsClientConfig extends CodestarNotificationsClientConfigType {
    }
    type CodestarNotificationsClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of CodestarNotificationsClient class. This is resolved and normalized from the {@link CodestarNotificationsClientConfig | constructor configuration interface}.
        */
    export interface CodestarNotificationsClientResolvedConfig extends CodestarNotificationsClientResolvedConfigType {
    }
    /**
        * <p>This AWS CodeStar Notifications API Reference provides descriptions and usage examples of the
        *       operations and data types for the AWS CodeStar Notifications API. You can use the AWS CodeStar Notifications API
        *       to work with the following objects:</p>
        *
        *          <p>Notification rules, by calling the following: </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>CreateNotificationRule</a>, which creates a notification rule for a
        *                     resource in your account. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DeleteNotificationRule</a>, which deletes a notification rule. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DescribeNotificationRule</a>, which provides information about a notification rule. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListNotificationRules</a>, which lists the notification rules associated with
        *           your account. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UpdateNotificationRule</a>, which changes the name, events, or targets associated with a
        *           notification rule. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>Subscribe</a>, which subscribes a target to a notification rule. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>Unsubscribe</a>, which removes a target from a notification rule. </p>
        *             </li>
        *          </ul>
        *
        *          <p>Targets, by calling the following: </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>DeleteTarget</a>, which removes a notification rule target (SNS topic) from a
        *           notification rule. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListTargets</a>, which lists the targets associated with a
        *                     notification rule. </p>
        *             </li>
        *          </ul>
        *
        *          <p>Events, by calling the following: </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>ListEventTypes</a>, which lists the event types you can include in
        *                     a notification rule. </p>
        *             </li>
        *          </ul>
        *          <p>Tags, by calling the following: </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>ListTagsForResource</a>, which lists the tags already associated
        *                     with a notification rule in your account. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>TagResource</a>, which associates a tag you provide with a
        *                     notification rule in your account. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>UntagResource</a>, which removes a tag from a notification rule in
        *                     your account. </p>
        *             </li>
        *          </ul>
        *
        *
        *
        *          <p> For information about how to use AWS CodeStar Notifications, see link in the CodeStarNotifications User Guide.
        *     </p>
        */
    export class CodestarNotificationsClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, CodestarNotificationsClientResolvedConfig> {
            /**
                * The resolved configuration of CodestarNotificationsClient class. This is resolved and normalized from the {@link CodestarNotificationsClientConfig | constructor configuration interface}.
                */
            readonly config: CodestarNotificationsClientResolvedConfig;
            constructor(configuration: CodestarNotificationsClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/CreateNotificationRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodestarNotificationsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient";
    import { CreateNotificationRuleRequest, CreateNotificationRuleResult } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/models_0";
    export interface CreateNotificationRuleCommandInput extends CreateNotificationRuleRequest {
    }
    export interface CreateNotificationRuleCommandOutput extends CreateNotificationRuleResult, __MetadataBearer {
    }
    /**
        * <p>Creates a notification rule for a resource. The rule specifies the events you want
        *             notifications about and the targets (such as SNS topics) where you want to receive
        *             them.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodestarNotificationsClient, CreateNotificationRuleCommand } from "@aws-sdk/client-codestar-notifications"; // ES Modules import
        * // const { CodestarNotificationsClient, CreateNotificationRuleCommand } = require("@aws-sdk/client-codestar-notifications"); // CommonJS import
        * const client = new CodestarNotificationsClient(config);
        * const command = new CreateNotificationRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateNotificationRuleCommandInput} for command's `input` shape.
        * @see {@link CreateNotificationRuleCommandOutput} for command's `response` shape.
        * @see {@link CodestarNotificationsClientResolvedConfig | config} for CodestarNotificationsClient's `config` shape.
        *
        */
    export class CreateNotificationRuleCommand extends $Command<CreateNotificationRuleCommandInput, CreateNotificationRuleCommandOutput, CodestarNotificationsClientResolvedConfig> {
            readonly input: CreateNotificationRuleCommandInput;
            constructor(input: CreateNotificationRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodestarNotificationsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateNotificationRuleCommandInput, CreateNotificationRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/DeleteNotificationRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodestarNotificationsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient";
    import { DeleteNotificationRuleRequest, DeleteNotificationRuleResult } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/models_0";
    export interface DeleteNotificationRuleCommandInput extends DeleteNotificationRuleRequest {
    }
    export interface DeleteNotificationRuleCommandOutput extends DeleteNotificationRuleResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a notification rule for a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodestarNotificationsClient, DeleteNotificationRuleCommand } from "@aws-sdk/client-codestar-notifications"; // ES Modules import
        * // const { CodestarNotificationsClient, DeleteNotificationRuleCommand } = require("@aws-sdk/client-codestar-notifications"); // CommonJS import
        * const client = new CodestarNotificationsClient(config);
        * const command = new DeleteNotificationRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteNotificationRuleCommandInput} for command's `input` shape.
        * @see {@link DeleteNotificationRuleCommandOutput} for command's `response` shape.
        * @see {@link CodestarNotificationsClientResolvedConfig | config} for CodestarNotificationsClient's `config` shape.
        *
        */
    export class DeleteNotificationRuleCommand extends $Command<DeleteNotificationRuleCommandInput, DeleteNotificationRuleCommandOutput, CodestarNotificationsClientResolvedConfig> {
            readonly input: DeleteNotificationRuleCommandInput;
            constructor(input: DeleteNotificationRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodestarNotificationsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteNotificationRuleCommandInput, DeleteNotificationRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/DeleteTargetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodestarNotificationsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient";
    import { DeleteTargetRequest, DeleteTargetResult } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/models_0";
    export interface DeleteTargetCommandInput extends DeleteTargetRequest {
    }
    export interface DeleteTargetCommandOutput extends DeleteTargetResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a specified target for notifications.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodestarNotificationsClient, DeleteTargetCommand } from "@aws-sdk/client-codestar-notifications"; // ES Modules import
        * // const { CodestarNotificationsClient, DeleteTargetCommand } = require("@aws-sdk/client-codestar-notifications"); // CommonJS import
        * const client = new CodestarNotificationsClient(config);
        * const command = new DeleteTargetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTargetCommandInput} for command's `input` shape.
        * @see {@link DeleteTargetCommandOutput} for command's `response` shape.
        * @see {@link CodestarNotificationsClientResolvedConfig | config} for CodestarNotificationsClient's `config` shape.
        *
        */
    export class DeleteTargetCommand extends $Command<DeleteTargetCommandInput, DeleteTargetCommandOutput, CodestarNotificationsClientResolvedConfig> {
            readonly input: DeleteTargetCommandInput;
            constructor(input: DeleteTargetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodestarNotificationsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTargetCommandInput, DeleteTargetCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/DescribeNotificationRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodestarNotificationsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient";
    import { DescribeNotificationRuleRequest, DescribeNotificationRuleResult } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/models_0";
    export interface DescribeNotificationRuleCommandInput extends DescribeNotificationRuleRequest {
    }
    export interface DescribeNotificationRuleCommandOutput extends DescribeNotificationRuleResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specified notification rule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodestarNotificationsClient, DescribeNotificationRuleCommand } from "@aws-sdk/client-codestar-notifications"; // ES Modules import
        * // const { CodestarNotificationsClient, DescribeNotificationRuleCommand } = require("@aws-sdk/client-codestar-notifications"); // CommonJS import
        * const client = new CodestarNotificationsClient(config);
        * const command = new DescribeNotificationRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeNotificationRuleCommandInput} for command's `input` shape.
        * @see {@link DescribeNotificationRuleCommandOutput} for command's `response` shape.
        * @see {@link CodestarNotificationsClientResolvedConfig | config} for CodestarNotificationsClient's `config` shape.
        *
        */
    export class DescribeNotificationRuleCommand extends $Command<DescribeNotificationRuleCommandInput, DescribeNotificationRuleCommandOutput, CodestarNotificationsClientResolvedConfig> {
            readonly input: DescribeNotificationRuleCommandInput;
            constructor(input: DescribeNotificationRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodestarNotificationsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeNotificationRuleCommandInput, DescribeNotificationRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/ListEventTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodestarNotificationsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient";
    import { ListEventTypesRequest, ListEventTypesResult } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/models_0";
    export interface ListEventTypesCommandInput extends ListEventTypesRequest {
    }
    export interface ListEventTypesCommandOutput extends ListEventTypesResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about the event types available for configuring notifications.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodestarNotificationsClient, ListEventTypesCommand } from "@aws-sdk/client-codestar-notifications"; // ES Modules import
        * // const { CodestarNotificationsClient, ListEventTypesCommand } = require("@aws-sdk/client-codestar-notifications"); // CommonJS import
        * const client = new CodestarNotificationsClient(config);
        * const command = new ListEventTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEventTypesCommandInput} for command's `input` shape.
        * @see {@link ListEventTypesCommandOutput} for command's `response` shape.
        * @see {@link CodestarNotificationsClientResolvedConfig | config} for CodestarNotificationsClient's `config` shape.
        *
        */
    export class ListEventTypesCommand extends $Command<ListEventTypesCommandInput, ListEventTypesCommandOutput, CodestarNotificationsClientResolvedConfig> {
            readonly input: ListEventTypesCommandInput;
            constructor(input: ListEventTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodestarNotificationsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEventTypesCommandInput, ListEventTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/ListNotificationRulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodestarNotificationsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient";
    import { ListNotificationRulesRequest, ListNotificationRulesResult } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/models_0";
    export interface ListNotificationRulesCommandInput extends ListNotificationRulesRequest {
    }
    export interface ListNotificationRulesCommandOutput extends ListNotificationRulesResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the notification rules for an AWS account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodestarNotificationsClient, ListNotificationRulesCommand } from "@aws-sdk/client-codestar-notifications"; // ES Modules import
        * // const { CodestarNotificationsClient, ListNotificationRulesCommand } = require("@aws-sdk/client-codestar-notifications"); // CommonJS import
        * const client = new CodestarNotificationsClient(config);
        * const command = new ListNotificationRulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListNotificationRulesCommandInput} for command's `input` shape.
        * @see {@link ListNotificationRulesCommandOutput} for command's `response` shape.
        * @see {@link CodestarNotificationsClientResolvedConfig | config} for CodestarNotificationsClient's `config` shape.
        *
        */
    export class ListNotificationRulesCommand extends $Command<ListNotificationRulesCommandInput, ListNotificationRulesCommandOutput, CodestarNotificationsClientResolvedConfig> {
            readonly input: ListNotificationRulesCommandInput;
            constructor(input: ListNotificationRulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodestarNotificationsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListNotificationRulesCommandInput, ListNotificationRulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodestarNotificationsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResult } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the tags associated with a notification rule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodestarNotificationsClient, ListTagsForResourceCommand } from "@aws-sdk/client-codestar-notifications"; // ES Modules import
        * // const { CodestarNotificationsClient, ListTagsForResourceCommand } = require("@aws-sdk/client-codestar-notifications"); // CommonJS import
        * const client = new CodestarNotificationsClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link CodestarNotificationsClientResolvedConfig | config} for CodestarNotificationsClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, CodestarNotificationsClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodestarNotificationsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/ListTargetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodestarNotificationsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient";
    import { ListTargetsRequest, ListTargetsResult } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/models_0";
    export interface ListTargetsCommandInput extends ListTargetsRequest {
    }
    export interface ListTargetsCommandOutput extends ListTargetsResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the notification rule targets for an AWS account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodestarNotificationsClient, ListTargetsCommand } from "@aws-sdk/client-codestar-notifications"; // ES Modules import
        * // const { CodestarNotificationsClient, ListTargetsCommand } = require("@aws-sdk/client-codestar-notifications"); // CommonJS import
        * const client = new CodestarNotificationsClient(config);
        * const command = new ListTargetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTargetsCommandInput} for command's `input` shape.
        * @see {@link ListTargetsCommandOutput} for command's `response` shape.
        * @see {@link CodestarNotificationsClientResolvedConfig | config} for CodestarNotificationsClient's `config` shape.
        *
        */
    export class ListTargetsCommand extends $Command<ListTargetsCommandInput, ListTargetsCommandOutput, CodestarNotificationsClientResolvedConfig> {
            readonly input: ListTargetsCommandInput;
            constructor(input: ListTargetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodestarNotificationsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTargetsCommandInput, ListTargetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/SubscribeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodestarNotificationsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient";
    import { SubscribeRequest, SubscribeResult } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/models_0";
    export interface SubscribeCommandInput extends SubscribeRequest {
    }
    export interface SubscribeCommandOutput extends SubscribeResult, __MetadataBearer {
    }
    /**
        * <p>Creates an association between a notification rule and an SNS topic so that the
        *             associated target can receive notifications when the events described in the rule are
        *             triggered.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodestarNotificationsClient, SubscribeCommand } from "@aws-sdk/client-codestar-notifications"; // ES Modules import
        * // const { CodestarNotificationsClient, SubscribeCommand } = require("@aws-sdk/client-codestar-notifications"); // CommonJS import
        * const client = new CodestarNotificationsClient(config);
        * const command = new SubscribeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SubscribeCommandInput} for command's `input` shape.
        * @see {@link SubscribeCommandOutput} for command's `response` shape.
        * @see {@link CodestarNotificationsClientResolvedConfig | config} for CodestarNotificationsClient's `config` shape.
        *
        */
    export class SubscribeCommand extends $Command<SubscribeCommandInput, SubscribeCommandOutput, CodestarNotificationsClientResolvedConfig> {
            readonly input: SubscribeCommandInput;
            constructor(input: SubscribeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodestarNotificationsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SubscribeCommandInput, SubscribeCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodestarNotificationsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient";
    import { TagResourceRequest, TagResourceResult } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResult, __MetadataBearer {
    }
    /**
        * <p>Associates a set of provided tags with a notification rule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodestarNotificationsClient, TagResourceCommand } from "@aws-sdk/client-codestar-notifications"; // ES Modules import
        * // const { CodestarNotificationsClient, TagResourceCommand } = require("@aws-sdk/client-codestar-notifications"); // CommonJS import
        * const client = new CodestarNotificationsClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link CodestarNotificationsClientResolvedConfig | config} for CodestarNotificationsClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, CodestarNotificationsClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodestarNotificationsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/UnsubscribeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodestarNotificationsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient";
    import { UnsubscribeRequest, UnsubscribeResult } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/models_0";
    export interface UnsubscribeCommandInput extends UnsubscribeRequest {
    }
    export interface UnsubscribeCommandOutput extends UnsubscribeResult, __MetadataBearer {
    }
    /**
        * <p>Removes an association between a notification rule and an Amazon SNS topic so that
        *             subscribers to that topic stop receiving notifications when the events described in the
        *             rule are triggered.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodestarNotificationsClient, UnsubscribeCommand } from "@aws-sdk/client-codestar-notifications"; // ES Modules import
        * // const { CodestarNotificationsClient, UnsubscribeCommand } = require("@aws-sdk/client-codestar-notifications"); // CommonJS import
        * const client = new CodestarNotificationsClient(config);
        * const command = new UnsubscribeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UnsubscribeCommandInput} for command's `input` shape.
        * @see {@link UnsubscribeCommandOutput} for command's `response` shape.
        * @see {@link CodestarNotificationsClientResolvedConfig | config} for CodestarNotificationsClient's `config` shape.
        *
        */
    export class UnsubscribeCommand extends $Command<UnsubscribeCommandInput, UnsubscribeCommandOutput, CodestarNotificationsClientResolvedConfig> {
            readonly input: UnsubscribeCommandInput;
            constructor(input: UnsubscribeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodestarNotificationsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UnsubscribeCommandInput, UnsubscribeCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodestarNotificationsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient";
    import { UntagResourceRequest, UntagResourceResult } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResult, __MetadataBearer {
    }
    /**
        * <p>Removes the association between one or more provided tags and a notification
        *             rule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodestarNotificationsClient, UntagResourceCommand } from "@aws-sdk/client-codestar-notifications"; // ES Modules import
        * // const { CodestarNotificationsClient, UntagResourceCommand } = require("@aws-sdk/client-codestar-notifications"); // CommonJS import
        * const client = new CodestarNotificationsClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link CodestarNotificationsClientResolvedConfig | config} for CodestarNotificationsClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, CodestarNotificationsClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodestarNotificationsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/commands/UpdateNotificationRuleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodestarNotificationsClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/CodestarNotificationsClient";
    import { UpdateNotificationRuleRequest, UpdateNotificationRuleResult } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/models_0";
    export interface UpdateNotificationRuleCommandInput extends UpdateNotificationRuleRequest {
    }
    export interface UpdateNotificationRuleCommandOutput extends UpdateNotificationRuleResult, __MetadataBearer {
    }
    /**
        * <p>Updates a notification rule for a resource. You can change the events that trigger the
        *             notification rule, the status of the rule, and the targets that receive the
        *             notifications.</p>
        *          <note>
        *             <p>To add or remove tags for a notification rule, you must use <a>TagResource</a> and <a>UntagResource</a>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodestarNotificationsClient, UpdateNotificationRuleCommand } from "@aws-sdk/client-codestar-notifications"; // ES Modules import
        * // const { CodestarNotificationsClient, UpdateNotificationRuleCommand } = require("@aws-sdk/client-codestar-notifications"); // CommonJS import
        * const client = new CodestarNotificationsClient(config);
        * const command = new UpdateNotificationRuleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateNotificationRuleCommandInput} for command's `input` shape.
        * @see {@link UpdateNotificationRuleCommandOutput} for command's `response` shape.
        * @see {@link CodestarNotificationsClientResolvedConfig | config} for CodestarNotificationsClient's `config` shape.
        *
        */
    export class UpdateNotificationRuleCommand extends $Command<UpdateNotificationRuleCommandInput, UpdateNotificationRuleCommandOutput, CodestarNotificationsClientResolvedConfig> {
            readonly input: UpdateNotificationRuleCommandInput;
            constructor(input: UpdateNotificationRuleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodestarNotificationsClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateNotificationRuleCommandInput, UpdateNotificationRuleCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { CodestarNotificationsServiceException as __BaseException } from "@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/CodestarNotificationsServiceException";
    /**
        * <p>AWS CodeStar Notifications can't create the notification rule because you do not have sufficient
        *       permissions.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>AWS CodeStar Notifications can't complete the request because the resource is being modified by
        *       another process. Wait a few minutes and try again.</p>
        */
    export class ConcurrentModificationException extends __BaseException {
            readonly name: "ConcurrentModificationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
    }
    /**
        * <p>Some or all of the configuration is incomplete, missing, or not valid.</p>
        */
    export class ConfigurationException extends __BaseException {
            readonly name: "ConfigurationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConfigurationException, __BaseException>);
    }
    export enum DetailType {
            BASIC = "BASIC",
            FULL = "FULL"
    }
    export enum NotificationRuleStatus {
            DISABLED = "DISABLED",
            ENABLED = "ENABLED"
    }
    /**
        * <p>Information about the SNS topics associated with a  notification rule.</p>
        */
    export interface Target {
            /**
                * <p>The target type. Can be an Amazon SNS topic.</p>
                */
            TargetType?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the SNS topic.</p>
                */
            TargetAddress?: string;
    }
    export namespace Target {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Target) => any;
    }
    export interface CreateNotificationRuleRequest {
            /**
                * <p>The name for the notification rule. Notifictaion rule names must be unique in your AWS
                *             account.</p>
                */
            Name: string | undefined;
            /**
                * <p>A list of event types associated with this notification rule. For a list of allowed
                *             events, see <a>EventTypeSummary</a>.</p>
                */
            EventTypeIds: string[] | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource to associate with the notification rule. Supported resources include pipelines in AWS CodePipeline,
                *       repositories in AWS CodeCommit, and build projects in AWS CodeBuild.</p>
                */
            Resource: string | undefined;
            /**
                * <p>A list of Amazon Resource Names (ARNs) of SNS topics to associate with the
                *       notification rule.</p>
                */
            Targets: Target[] | undefined;
            /**
                * <p>The level of detail to include in the notifications for this resource. BASIC will include only the
                *         contents of the event as it would appear in AWS CloudWatch. FULL will include any supplemental information
                *         provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.</p>
                */
            DetailType: DetailType | string | undefined;
            /**
                * <p>A unique, client-generated idempotency token that, when provided in a request, ensures
                *             the request cannot be repeated with a changed parameter. If a request with the same
                *             parameters is received and a token is included, the request returns information about
                *             the initial request that used that token.</p>
                *         <note>
                *             <p>The AWS SDKs prepopulate client request tokens. If you are using an AWS SDK, an
                *                 idempotency token is created for you.</p>
                *         </note>
                */
            ClientRequestToken?: string;
            /**
                * <p>A list of tags to apply to this notification rule. Key names cannot start with "aws". </p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The status of the notification rule. The default value is ENABLED. If the status is
                *             set to DISABLED, notifications aren't sent for the notification rule.</p>
                */
            Status?: NotificationRuleStatus | string;
    }
    export namespace CreateNotificationRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNotificationRuleRequest) => any;
    }
    export interface CreateNotificationRuleResult {
            /**
                * <p>The Amazon Resource Name (ARN) of the notification rule.</p>
                */
            Arn?: string;
    }
    export namespace CreateNotificationRuleResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateNotificationRuleResult) => any;
    }
    /**
        * <p>One of the AWS CodeStar Notifications limits has been exceeded. Limits apply to
        *             accounts, notification rules, notifications, resources, and targets. For more
        *             information, see Limits.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>A resource with the same name or ID already exists. Notification rule names must be
        *             unique in your AWS account.</p>
        */
    export class ResourceAlreadyExistsException extends __BaseException {
            readonly name: "ResourceAlreadyExistsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>One or more parameter values are not valid.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface DeleteNotificationRuleRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the notification rule you want to delete.</p>
                */
            Arn: string | undefined;
    }
    export namespace DeleteNotificationRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteNotificationRuleRequest) => any;
    }
    export interface DeleteNotificationRuleResult {
            /**
                * <p>The Amazon Resource Name (ARN) of the deleted notification rule.</p>
                */
            Arn?: string;
    }
    export namespace DeleteNotificationRuleResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteNotificationRuleResult) => any;
    }
    export interface DeleteTargetRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the SNS topic to delete.</p>
                */
            TargetAddress: string | undefined;
            /**
                * <p>A Boolean value that can be used to delete all associations with this SNS topic. The
                *             default value is FALSE. If set to TRUE, all associations between that target and every
                *             notification rule in your AWS account are deleted.</p>
                */
            ForceUnsubscribeAll?: boolean;
    }
    export namespace DeleteTargetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTargetRequest) => any;
    }
    export interface DeleteTargetResult {
    }
    export namespace DeleteTargetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTargetResult) => any;
    }
    export interface DescribeNotificationRuleRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the notification rule.</p>
                */
            Arn: string | undefined;
    }
    export namespace DescribeNotificationRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNotificationRuleRequest) => any;
    }
    /**
        * <p>Returns information about an event that has triggered a notification rule.</p>
        */
    export interface EventTypeSummary {
            /**
                * <p>The system-generated ID of the event.</p>
                */
            EventTypeId?: string;
            /**
                * <p>The name of the service for which the event applies.</p>
                */
            ServiceName?: string;
            /**
                * <p>The name of the event.</p>
                */
            EventTypeName?: string;
            /**
                * <p>The resource type of the event.</p>
                */
            ResourceType?: string;
    }
    export namespace EventTypeSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventTypeSummary) => any;
    }
    export enum TargetStatus {
            ACTIVE = "ACTIVE",
            DEACTIVATED = "DEACTIVATED",
            INACTIVE = "INACTIVE",
            PENDING = "PENDING",
            UNREACHABLE = "UNREACHABLE"
    }
    /**
        * <p>Information about the targets specified for a notification rule.</p>
        */
    export interface TargetSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the SNS topic.</p>
                */
            TargetAddress?: string;
            /**
                * <p>The type of the target (for example, SNS).</p>
                */
            TargetType?: string;
            /**
                * <p>The status of the target.</p>
                */
            TargetStatus?: TargetStatus | string;
    }
    export namespace TargetSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetSummary) => any;
    }
    export interface DescribeNotificationRuleResult {
            /**
                * <p>The Amazon Resource Name (ARN) of the notification rule.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The name of the notification rule.</p>
                */
            Name?: string;
            /**
                * <p>A list of the event types associated with the notification rule.</p>
                */
            EventTypes?: EventTypeSummary[];
            /**
                * <p>The Amazon Resource Name (ARN) of the resource associated with the notification
                *       rule.</p>
                */
            Resource?: string;
            /**
                * <p>A list of the SNS topics associated with the notification rule.</p>
                */
            Targets?: TargetSummary[];
            /**
                * <p>The level of detail included in the notifications for this resource. BASIC will include only the
                *             contents of the event as it would appear in AWS CloudWatch. FULL will include any supplemental information
                *             provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.</p>
                */
            DetailType?: DetailType | string;
            /**
                * <p>The name or email alias of the person who created the notification rule.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The status of the notification rule. Valid statuses are on (sending notifications) or off
                *       (not sending notifications).</p>
                */
            Status?: NotificationRuleStatus | string;
            /**
                * <p>The date and time the notification rule was created, in timestamp format.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The date and time the notification rule was most recently updated, in timestamp
                *             format.</p>
                */
            LastModifiedTimestamp?: Date;
            /**
                * <p>The tags associated with the notification rule.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace DescribeNotificationRuleResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeNotificationRuleResult) => any;
    }
    /**
        * <p>AWS CodeStar Notifications can't find a resource that matches the provided ARN. </p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The value for the enumeration token used in the request to return the next batch of the results is not valid. </p>
        */
    export class InvalidNextTokenException extends __BaseException {
            readonly name: "InvalidNextTokenException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>);
    }
    export enum ListEventTypesFilterName {
            RESOURCE_TYPE = "RESOURCE_TYPE",
            SERVICE_NAME = "SERVICE_NAME"
    }
    /**
        * <p>Information about a filter to apply to the list of returned event types. You can filter
        *       by resource type or service name.</p>
        */
    export interface ListEventTypesFilter {
            /**
                * <p>The system-generated name of the filter type you want to filter by.</p>
                */
            Name: ListEventTypesFilterName | string | undefined;
            /**
                * <p>The name of the resource type (for example, pipeline) or service name (for example,
                *       CodePipeline) that you want to filter by.</p>
                */
            Value: string | undefined;
    }
    export namespace ListEventTypesFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventTypesFilter) => any;
    }
    export interface ListEventTypesRequest {
            /**
                * <p>The filters to use to return information by service or resource type.</p>
                */
            Filters?: ListEventTypesFilter[];
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            NextToken?: string;
            /**
                * <p>A non-negative integer used to limit the number of returned results. The default number is 50. The maximum number of
                *       results that can be returned is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListEventTypesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventTypesRequest) => any;
    }
    export interface ListEventTypesResult {
            /**
                * <p>Information about each event, including service name, resource type, event ID, and event
                *       name.</p>
                */
            EventTypes?: EventTypeSummary[];
            /**
                * <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
                */
            NextToken?: string;
    }
    export namespace ListEventTypesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEventTypesResult) => any;
    }
    export enum ListNotificationRulesFilterName {
            CREATED_BY = "CREATED_BY",
            EVENT_TYPE_ID = "EVENT_TYPE_ID",
            RESOURCE = "RESOURCE",
            TARGET_ADDRESS = "TARGET_ADDRESS"
    }
    /**
        * <p>Information about a filter to apply to the list of returned notification rules. You can
        *       filter by event type, owner, resource, or target.</p>
        */
    export interface ListNotificationRulesFilter {
            /**
                * <p>The name of the attribute you want to use to filter the returned notification rules.</p>
                */
            Name: ListNotificationRulesFilterName | string | undefined;
            /**
                * <p>The value of the attribute you want to use to filter the returned notification rules. For example, if you specify filtering by <i>RESOURCE</i>
                *           in Name, you might specify the ARN of a pipeline in AWS CodePipeline for the value.</p>
                */
            Value: string | undefined;
    }
    export namespace ListNotificationRulesFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNotificationRulesFilter) => any;
    }
    export interface ListNotificationRulesRequest {
            /**
                * <p>The filters to use to return information by service or resource type. For valid values,
                *             see <a>ListNotificationRulesFilter</a>.</p>
                *          <note>
                *             <p>A filter with the same name can appear more than once when used with OR statements. Filters with different names should be applied with AND statements.</p>
                *          </note>
                */
            Filters?: ListNotificationRulesFilter[];
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            NextToken?: string;
            /**
                * <p>A non-negative integer used to limit the number of returned results. The maximum number of
                *       results that can be returned is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListNotificationRulesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNotificationRulesRequest) => any;
    }
    /**
        * <p>Information about a specified notification rule.</p>
        */
    export interface NotificationRuleSummary {
            /**
                * <p>The unique ID of the notification rule.</p>
                */
            Id?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the notification rule.</p>
                */
            Arn?: string;
    }
    export namespace NotificationRuleSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotificationRuleSummary) => any;
    }
    export interface ListNotificationRulesResult {
            /**
                * <p>An enumeration token that can be used in a request to return the next batch of the results.</p>
                */
            NextToken?: string;
            /**
                * <p>The list of notification rules for the AWS account, by Amazon Resource Name (ARN) and ID. </p>
                */
            NotificationRules?: NotificationRuleSummary[];
    }
    export namespace ListNotificationRulesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNotificationRulesResult) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) for the notification rule.</p>
                */
            Arn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResult {
            /**
                * <p>The tags associated with the notification rule.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResult) => any;
    }
    export enum ListTargetsFilterName {
            TARGET_ADDRESS = "TARGET_ADDRESS",
            TARGET_STATUS = "TARGET_STATUS",
            TARGET_TYPE = "TARGET_TYPE"
    }
    /**
        * <p>Information about a filter to apply to the list of returned targets. You can filter by
        *             target type, address, or status. For example, to filter results to notification rules
        *             that have active Amazon SNS topics as targets, you could specify a ListTargetsFilter
        *             Name as TargetType and a Value of SNS, and a Name of TARGET_STATUS and a Value of
        *             ACTIVE.</p>
        */
    export interface ListTargetsFilter {
            /**
                * <p>The name of the attribute you want to use to filter the returned targets.</p>
                */
            Name: ListTargetsFilterName | string | undefined;
            /**
                * <p>The value of the attribute you want to use to filter the returned targets. For example,
                *             if you specify <i>SNS</i> for the Target type, you could specify an Amazon
                *             Resource Name (ARN) for a topic as the value.</p>
                */
            Value: string | undefined;
    }
    export namespace ListTargetsFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTargetsFilter) => any;
    }
    export interface ListTargetsRequest {
            /**
                * <p>The filters to use to return information by service or resource type. Valid filters
                *             include target type, target address, and target status.</p>
                *          <note>
                *             <p>A filter with the same name can appear more than once when used with OR statements. Filters with different names should be applied with AND statements.</p>
                *          </note>
                */
            Filters?: ListTargetsFilter[];
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            NextToken?: string;
            /**
                * <p>A non-negative integer used to limit the number of returned results. The maximum number of
                *       results that can be returned is 100.</p>
                */
            MaxResults?: number;
    }
    export namespace ListTargetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTargetsRequest) => any;
    }
    export interface ListTargetsResult {
            /**
                * <p>The list of notification rule targets. </p>
                */
            Targets?: TargetSummary[];
            /**
                * <p>An enumeration token that can be used in a request to return the next batch of
                *             results.</p>
                */
            NextToken?: string;
    }
    export namespace ListTargetsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTargetsResult) => any;
    }
    export interface SubscribeRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the notification rule for which you want to create the association.</p>
                */
            Arn: string | undefined;
            /**
                * <p>Information about the SNS topics associated with a  notification rule.</p>
                */
            Target: Target | undefined;
            /**
                * <p>An enumeration token that, when provided in a request, returns the next batch of the
                *             results.</p>
                */
            ClientRequestToken?: string;
    }
    export namespace SubscribeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SubscribeRequest) => any;
    }
    export interface SubscribeResult {
            /**
                * <p>The Amazon Resource Name (ARN) of the notification rule for which you have created assocations.</p>
                */
            Arn?: string;
    }
    export namespace SubscribeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SubscribeResult) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the notification rule to tag.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The list of tags to associate with the resource. Tag key names cannot start with "aws".</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResult {
            /**
                * <p>The list of tags associated with the resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace TagResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResult) => any;
    }
    export interface UnsubscribeRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the notification rule.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The ARN of the SNS topic to unsubscribe from the notification rule.</p>
                */
            TargetAddress: string | undefined;
    }
    export namespace UnsubscribeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnsubscribeRequest) => any;
    }
    export interface UnsubscribeResult {
            /**
                * <p>The Amazon Resource Name (ARN) of the the notification rule from which you have removed a subscription.</p>
                */
            Arn: string | undefined;
    }
    export namespace UnsubscribeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnsubscribeResult) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the notification rule from which to remove the
                *       tags.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The key names of the tags to remove.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResult {
    }
    export namespace UntagResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResult) => any;
    }
    export interface UpdateNotificationRuleRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the notification rule.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The name of the notification rule.</p>
                */
            Name?: string;
            /**
                * <p>The status of the notification rule. Valid statuses include enabled (sending notifications) or
                *       disabled (not sending notifications).</p>
                */
            Status?: NotificationRuleStatus | string;
            /**
                * <p>A list of event types associated with this notification rule.</p>
                */
            EventTypeIds?: string[];
            /**
                * <p>The address and type of the targets to receive notifications from this notification
                *       rule.</p>
                */
            Targets?: Target[];
            /**
                * <p>The level of detail to include in the notifications for this resource. BASIC will include only the
                *             contents of the event as it would appear in AWS CloudWatch. FULL will include any supplemental information
                *             provided by AWS CodeStar Notifications and/or the service for the resource for which the notification is created.</p>
                */
            DetailType?: DetailType | string;
    }
    export namespace UpdateNotificationRuleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNotificationRuleRequest) => any;
    }
    export interface UpdateNotificationRuleResult {
    }
    export namespace UpdateNotificationRuleResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNotificationRuleResult) => any;
    }
}

declare module '@aws-sdk/client-codestar-notifications/node_modules/@aws-sdk/client-codestar-notifications/dist-types/models/CodestarNotificationsServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from CodestarNotifications service.
        */
    export class CodestarNotificationsServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

