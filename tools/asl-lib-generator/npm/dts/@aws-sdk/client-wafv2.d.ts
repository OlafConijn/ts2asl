// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-wafv2' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AssociateWebACLCommandInput, AssociateWebACLCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/AssociateWebACLCommand";
    import { CheckCapacityCommandInput, CheckCapacityCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CheckCapacityCommand";
    import { CreateIPSetCommandInput, CreateIPSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CreateIPSetCommand";
    import { CreateRegexPatternSetCommandInput, CreateRegexPatternSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CreateRegexPatternSetCommand";
    import { CreateRuleGroupCommandInput, CreateRuleGroupCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CreateRuleGroupCommand";
    import { CreateWebACLCommandInput, CreateWebACLCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CreateWebACLCommand";
    import { DeleteFirewallManagerRuleGroupsCommandInput, DeleteFirewallManagerRuleGroupsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteFirewallManagerRuleGroupsCommand";
    import { DeleteIPSetCommandInput, DeleteIPSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteIPSetCommand";
    import { DeleteLoggingConfigurationCommandInput, DeleteLoggingConfigurationCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteLoggingConfigurationCommand";
    import { DeletePermissionPolicyCommandInput, DeletePermissionPolicyCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeletePermissionPolicyCommand";
    import { DeleteRegexPatternSetCommandInput, DeleteRegexPatternSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteRegexPatternSetCommand";
    import { DeleteRuleGroupCommandInput, DeleteRuleGroupCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteRuleGroupCommand";
    import { DeleteWebACLCommandInput, DeleteWebACLCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteWebACLCommand";
    import { DescribeManagedRuleGroupCommandInput, DescribeManagedRuleGroupCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DescribeManagedRuleGroupCommand";
    import { DisassociateWebACLCommandInput, DisassociateWebACLCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DisassociateWebACLCommand";
    import { GenerateMobileSdkReleaseUrlCommandInput, GenerateMobileSdkReleaseUrlCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GenerateMobileSdkReleaseUrlCommand";
    import { GetIPSetCommandInput, GetIPSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetIPSetCommand";
    import { GetLoggingConfigurationCommandInput, GetLoggingConfigurationCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetLoggingConfigurationCommand";
    import { GetManagedRuleSetCommandInput, GetManagedRuleSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetManagedRuleSetCommand";
    import { GetMobileSdkReleaseCommandInput, GetMobileSdkReleaseCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetMobileSdkReleaseCommand";
    import { GetPermissionPolicyCommandInput, GetPermissionPolicyCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetPermissionPolicyCommand";
    import { GetRateBasedStatementManagedKeysCommandInput, GetRateBasedStatementManagedKeysCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetRateBasedStatementManagedKeysCommand";
    import { GetRegexPatternSetCommandInput, GetRegexPatternSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetRegexPatternSetCommand";
    import { GetRuleGroupCommandInput, GetRuleGroupCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetRuleGroupCommand";
    import { GetSampledRequestsCommandInput, GetSampledRequestsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetSampledRequestsCommand";
    import { GetWebACLCommandInput, GetWebACLCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetWebACLCommand";
    import { GetWebACLForResourceCommandInput, GetWebACLForResourceCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetWebACLForResourceCommand";
    import { ListAvailableManagedRuleGroupsCommandInput, ListAvailableManagedRuleGroupsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListAvailableManagedRuleGroupsCommand";
    import { ListAvailableManagedRuleGroupVersionsCommandInput, ListAvailableManagedRuleGroupVersionsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListAvailableManagedRuleGroupVersionsCommand";
    import { ListIPSetsCommandInput, ListIPSetsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListIPSetsCommand";
    import { ListLoggingConfigurationsCommandInput, ListLoggingConfigurationsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListLoggingConfigurationsCommand";
    import { ListManagedRuleSetsCommandInput, ListManagedRuleSetsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListManagedRuleSetsCommand";
    import { ListMobileSdkReleasesCommandInput, ListMobileSdkReleasesCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListMobileSdkReleasesCommand";
    import { ListRegexPatternSetsCommandInput, ListRegexPatternSetsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListRegexPatternSetsCommand";
    import { ListResourcesForWebACLCommandInput, ListResourcesForWebACLCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListResourcesForWebACLCommand";
    import { ListRuleGroupsCommandInput, ListRuleGroupsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListRuleGroupsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListTagsForResourceCommand";
    import { ListWebACLsCommandInput, ListWebACLsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListWebACLsCommand";
    import { PutLoggingConfigurationCommandInput, PutLoggingConfigurationCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/PutLoggingConfigurationCommand";
    import { PutManagedRuleSetVersionsCommandInput, PutManagedRuleSetVersionsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/PutManagedRuleSetVersionsCommand";
    import { PutPermissionPolicyCommandInput, PutPermissionPolicyCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/PutPermissionPolicyCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UntagResourceCommand";
    import { UpdateIPSetCommandInput, UpdateIPSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateIPSetCommand";
    import { UpdateManagedRuleSetVersionExpiryDateCommandInput, UpdateManagedRuleSetVersionExpiryDateCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateManagedRuleSetVersionExpiryDateCommand";
    import { UpdateRegexPatternSetCommandInput, UpdateRegexPatternSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateRegexPatternSetCommand";
    import { UpdateRuleGroupCommandInput, UpdateRuleGroupCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateRuleGroupCommand";
    import { UpdateWebACLCommandInput, UpdateWebACLCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateWebACLCommand";
    import { WAFV2Client } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    /**
        * <fullname>WAF</fullname>
        *          <note>
        *             <p>This is the latest version of the <b>WAF</b> API,
        *             released in November, 2019. The names of the entities that you use to access this API,
        *             like endpoints and namespaces, all have the versioning information added, like "V2" or
        *             "v2", to distinguish from the prior version. We recommend migrating your resources to
        *             this version, because it has a number of significant improvements.</p>
        *             <p>If you used WAF prior to this release, you can't use this WAFV2 API to access any
        *             WAF resources that you created before. You can access your old rules, web ACLs, and
        *             other WAF resources only through the WAF Classic APIs. The WAF Classic APIs
        *             have retained the prior names, endpoints, and namespaces. </p>
        *             <p>For information, including how to migrate your WAF resources to this version,
        *             see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
        *          </note>
        *          <p>WAF is a web application firewall that lets you monitor the HTTP and HTTPS
        *          requests that are forwarded to Amazon CloudFront, an Amazon API Gateway REST API, an Application Load Balancer, or an AppSync
        *          GraphQL API. WAF also lets you control access to your content. Based on criteria that
        *          you specify, such as the IP addresses that requests originate from or the values of query
        *          strings, the Amazon API Gateway REST API, CloudFront distribution, the Application Load Balancer, or the AppSync GraphQL
        *          API responds to requests either with the requested content or with an HTTP 403 status code
        *          (Forbidden). You also can configure CloudFront to return a custom error page when a request is
        *          blocked.</p>
        *          <p>This API guide is for developers who need detailed information about WAF API actions,
        *          data types, and errors. For detailed information about WAF features and an overview of
        *          how to use WAF, see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html">WAF Developer
        *          Guide</a>.</p>
        *          <p>You can make calls using the endpoints listed in <a href="https://docs.aws.amazon.com/general/latest/gr/waf.html">WAF endpoints and quotas</a>. </p>
        *          <ul>
        *             <li>
        *                <p>For regional applications, you can use any of the endpoints in the list.
        *                A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. </p>
        *             </li>
        *             <li>
        *                <p>For Amazon CloudFront applications, you must use the API endpoint listed for
        *                US East (N. Virginia): us-east-1.</p>
        *             </li>
        *          </ul>
        *          <p>Alternatively, you can use one of the Amazon Web Services SDKs to access an API that's tailored to the
        *          programming language or platform that you're using. For more information, see <a href="http://aws.amazon.com/tools/#SDKs">Amazon Web Services SDKs</a>.</p>
        *          <p>We currently provide two versions of the WAF API: this API and the prior versions,
        *          the classic WAF APIs. This new API provides the same functionality as the older versions,
        *          with the following major improvements:</p>
        *          <ul>
        *             <li>
        *                <p>You use one API for both global and regional applications. Where you need to
        *                distinguish the scope, you specify a <code>Scope</code> parameter and set it to
        *                   <code>CLOUDFRONT</code> or <code>REGIONAL</code>. </p>
        *             </li>
        *             <li>
        *                <p>You can define a web ACL or rule group with a single call, and update it with a
        *                single call. You define all rule specifications in JSON format, and pass them to your
        *                rule group or web ACL calls.</p>
        *             </li>
        *             <li>
        *                <p>The limits WAF places on the use of rules more closely reflects the cost of
        *                running each type of rule. Rule groups include capacity settings, so you know the
        *                maximum cost of a rule group when you use it.</p>
        *             </li>
        *          </ul>
        */
    export class WAFV2 extends WAFV2Client {
            /**
                * <p>Associates a web ACL with a regional application resource, to protect the resource.
                *          A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>For Amazon CloudFront, don't use this call. Instead, use your CloudFront distribution configuration. To
                *          associate a web ACL, in the CloudFront call <code>UpdateDistribution</code>, set the web ACL ID
                *          to the Amazon Resource Name (ARN) of the web ACL. For information, see <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html">UpdateDistribution</a>.</p>
                *
                *          <p>When you make changes to web ACLs or web ACL components, like rules and rule groups, WAF propagates the changes everywhere that the web ACL and its components are stored and used. Your changes are applied within seconds, but there might be a brief period of inconsistency when the changes have arrived in some places and not in others. So, for example, if you change a rule action setting, the action might be the old action in one area and the new action in another area. Or if you add an IP address to an IP set used in a blocking rule, the new address might briefly be blocked in one area while still allowed in another. This temporary inconsistency can occur when you first associate a web ACL with an Amazon Web Services resource and when you change a web ACL that is already associated with a resource. Generally, any inconsistencies of this type last only a few seconds.</p>
                */
            associateWebACL(args: AssociateWebACLCommandInput, options?: __HttpHandlerOptions): Promise<AssociateWebACLCommandOutput>;
            associateWebACL(args: AssociateWebACLCommandInput, cb: (err: any, data?: AssociateWebACLCommandOutput) => void): void;
            associateWebACL(args: AssociateWebACLCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateWebACLCommandOutput) => void): void;
            /**
                * <p>Returns the web ACL capacity unit (WCU) requirements for a specified scope and set of rules.
                *          You can use this to check the capacity requirements for the rules you want to use in a
                *          <a>RuleGroup</a> or <a>WebACL</a>.
                *          </p>
                *          <p>WAF uses WCUs to calculate and control the operating
                *          resources that are used to run your rules, rule groups, and web ACLs. WAF
                *          calculates capacity differently for each rule type, to reflect the relative cost of each rule.
                *          Simple rules that cost little to run use fewer WCUs than more complex rules
                * 				that use more processing power.
                * 				Rule group capacity is fixed at creation, which helps users plan their
                *          web ACL WCU usage when they use a rule group.
                *          The WCU limit for web ACLs is 1,500.  </p>
                */
            checkCapacity(args: CheckCapacityCommandInput, options?: __HttpHandlerOptions): Promise<CheckCapacityCommandOutput>;
            checkCapacity(args: CheckCapacityCommandInput, cb: (err: any, data?: CheckCapacityCommandOutput) => void): void;
            checkCapacity(args: CheckCapacityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CheckCapacityCommandOutput) => void): void;
            /**
                * <p>Creates an <a>IPSet</a>, which you use to identify web requests that
                *          originate from specific IP addresses or ranges of IP addresses. For example, if you're
                *          receiving a lot of requests from a ranges of IP addresses, you can configure WAF to
                *          block them using an IPSet that lists those IP addresses. </p>
                */
            createIPSet(args: CreateIPSetCommandInput, options?: __HttpHandlerOptions): Promise<CreateIPSetCommandOutput>;
            createIPSet(args: CreateIPSetCommandInput, cb: (err: any, data?: CreateIPSetCommandOutput) => void): void;
            createIPSet(args: CreateIPSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateIPSetCommandOutput) => void): void;
            /**
                * <p>Creates a <a>RegexPatternSet</a>, which you reference in a <a>RegexPatternSetReferenceStatement</a>, to have WAF inspect a web request
                *          component for the specified patterns.</p>
                */
            createRegexPatternSet(args: CreateRegexPatternSetCommandInput, options?: __HttpHandlerOptions): Promise<CreateRegexPatternSetCommandOutput>;
            createRegexPatternSet(args: CreateRegexPatternSetCommandInput, cb: (err: any, data?: CreateRegexPatternSetCommandOutput) => void): void;
            createRegexPatternSet(args: CreateRegexPatternSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRegexPatternSetCommandOutput) => void): void;
            /**
                * <p>Creates a <a>RuleGroup</a> per the specifications provided. </p>
                *          <p> A rule group defines a collection of rules to inspect and control web requests that you can use in a <a>WebACL</a>. When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements. </p>
                */
            createRuleGroup(args: CreateRuleGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateRuleGroupCommandOutput>;
            createRuleGroup(args: CreateRuleGroupCommandInput, cb: (err: any, data?: CreateRuleGroupCommandOutput) => void): void;
            createRuleGroup(args: CreateRuleGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRuleGroupCommandOutput) => void): void;
            /**
                * <p>Creates a <a>WebACL</a> per the specifications provided.</p>
                *          <p> A web ACL defines a collection of rules to use to inspect and control web requests. Each rule has an action defined (allow, block, or count) for requests that match the statement of the rule. In the web ACL, you assign a default action to take (allow, block) for any request that does not match any of the rules. The rules in a web ACL can be a combination of the types <a>Rule</a>, <a>RuleGroup</a>, and managed rule group. You can associate a web ACL with one or more Amazon Web Services resources to protect. The resources can be an Amazon CloudFront distribution, an Amazon API Gateway REST API, an Application Load Balancer, or an AppSync GraphQL API.  </p>
                */
            createWebACL(args: CreateWebACLCommandInput, options?: __HttpHandlerOptions): Promise<CreateWebACLCommandOutput>;
            createWebACL(args: CreateWebACLCommandInput, cb: (err: any, data?: CreateWebACLCommandOutput) => void): void;
            createWebACL(args: CreateWebACLCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWebACLCommandOutput) => void): void;
            /**
                * <p>Deletes all rule groups that are managed by Firewall Manager for the specified web ACL. </p>
                *          <p>You can only use this if <code>ManagedByFirewallManager</code> is false in the specified
                *             <a>WebACL</a>. </p>
                */
            deleteFirewallManagerRuleGroups(args: DeleteFirewallManagerRuleGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFirewallManagerRuleGroupsCommandOutput>;
            deleteFirewallManagerRuleGroups(args: DeleteFirewallManagerRuleGroupsCommandInput, cb: (err: any, data?: DeleteFirewallManagerRuleGroupsCommandOutput) => void): void;
            deleteFirewallManagerRuleGroups(args: DeleteFirewallManagerRuleGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFirewallManagerRuleGroupsCommandOutput) => void): void;
            /**
                * <p>Deletes the specified <a>IPSet</a>. </p>
                */
            deleteIPSet(args: DeleteIPSetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteIPSetCommandOutput>;
            deleteIPSet(args: DeleteIPSetCommandInput, cb: (err: any, data?: DeleteIPSetCommandOutput) => void): void;
            deleteIPSet(args: DeleteIPSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteIPSetCommandOutput) => void): void;
            /**
                * <p>Deletes the <a>LoggingConfiguration</a> from the specified web ACL.</p>
                */
            deleteLoggingConfiguration(args: DeleteLoggingConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLoggingConfigurationCommandOutput>;
            deleteLoggingConfiguration(args: DeleteLoggingConfigurationCommandInput, cb: (err: any, data?: DeleteLoggingConfigurationCommandOutput) => void): void;
            deleteLoggingConfiguration(args: DeleteLoggingConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLoggingConfigurationCommandOutput) => void): void;
            /**
                * <p>Permanently deletes an IAM policy from the specified rule group.</p>
                *          <p>You must be the owner of the rule group to perform this operation.</p>
                */
            deletePermissionPolicy(args: DeletePermissionPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeletePermissionPolicyCommandOutput>;
            deletePermissionPolicy(args: DeletePermissionPolicyCommandInput, cb: (err: any, data?: DeletePermissionPolicyCommandOutput) => void): void;
            deletePermissionPolicy(args: DeletePermissionPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePermissionPolicyCommandOutput) => void): void;
            /**
                * <p>Deletes the specified <a>RegexPatternSet</a>.</p>
                */
            deleteRegexPatternSet(args: DeleteRegexPatternSetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRegexPatternSetCommandOutput>;
            deleteRegexPatternSet(args: DeleteRegexPatternSetCommandInput, cb: (err: any, data?: DeleteRegexPatternSetCommandOutput) => void): void;
            deleteRegexPatternSet(args: DeleteRegexPatternSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRegexPatternSetCommandOutput) => void): void;
            /**
                * <p>Deletes the specified <a>RuleGroup</a>.</p>
                */
            deleteRuleGroup(args: DeleteRuleGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRuleGroupCommandOutput>;
            deleteRuleGroup(args: DeleteRuleGroupCommandInput, cb: (err: any, data?: DeleteRuleGroupCommandOutput) => void): void;
            deleteRuleGroup(args: DeleteRuleGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRuleGroupCommandOutput) => void): void;
            /**
                * <p>Deletes the specified <a>WebACL</a>. </p>
                *          <p>You can only use this if <code>ManagedByFirewallManager</code> is false in the specified
                *             <a>WebACL</a>. </p>
                *          <note>
                *             <p>Before deleting any web ACL, first disassociate it from all resources.</p>
                *             <ul>
                *                <li>
                *                   <p>To retrieve a list of the resources that are associated with a web ACL, use the
                *                   following calls:</p>
                *                   <ul>
                *                      <li>
                *                         <p>For regional resources, call <a>ListResourcesForWebACL</a>.</p>
                *                      </li>
                *                      <li>
                *                         <p>For Amazon CloudFront distributions, use the CloudFront call
                *                            <code>ListDistributionsByWebACLId</code>. For information, see <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_ListDistributionsByWebACLId.html">ListDistributionsByWebACLId</a>.</p>
                *                      </li>
                *                   </ul>
                *                </li>
                *                <li>
                *                   <p>To disassociate a resource from a web ACL, use the following calls:</p>
                *                   <ul>
                *                      <li>
                *                         <p>For regional resources, call <a>DisassociateWebACL</a>.</p>
                *                      </li>
                *                      <li>
                *                         <p>For Amazon CloudFront distributions, provide an empty web ACL ID in the CloudFront call
                *                            <code>UpdateDistribution</code>. For information, see <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html">UpdateDistribution</a>.</p>
                *                      </li>
                *                   </ul>
                *                </li>
                *             </ul>
                *          </note>
                */
            deleteWebACL(args: DeleteWebACLCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWebACLCommandOutput>;
            deleteWebACL(args: DeleteWebACLCommandInput, cb: (err: any, data?: DeleteWebACLCommandOutput) => void): void;
            deleteWebACL(args: DeleteWebACLCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWebACLCommandOutput) => void): void;
            /**
                * <p>Provides high-level information for a managed rule group, including descriptions of the
                *          rules. </p>
                */
            describeManagedRuleGroup(args: DescribeManagedRuleGroupCommandInput, options?: __HttpHandlerOptions): Promise<DescribeManagedRuleGroupCommandOutput>;
            describeManagedRuleGroup(args: DescribeManagedRuleGroupCommandInput, cb: (err: any, data?: DescribeManagedRuleGroupCommandOutput) => void): void;
            describeManagedRuleGroup(args: DescribeManagedRuleGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeManagedRuleGroupCommandOutput) => void): void;
            /**
                * <p>Disassociates the specified regional application resource from any existing web ACL
                *          association. A resource can have at most one web ACL association. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>For Amazon CloudFront, don't use this call. Instead, use your CloudFront distribution configuration. To
                *          disassociate a web ACL, provide an empty web ACL ID in the CloudFront call
                *             <code>UpdateDistribution</code>. For information, see <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html">UpdateDistribution</a>.</p>
                */
            disassociateWebACL(args: DisassociateWebACLCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateWebACLCommandOutput>;
            disassociateWebACL(args: DisassociateWebACLCommandInput, cb: (err: any, data?: DisassociateWebACLCommandOutput) => void): void;
            disassociateWebACL(args: DisassociateWebACLCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateWebACLCommandOutput) => void): void;
            /**
                * <p>Generates a presigned download URL for the specified release of the mobile SDK.</p>
                *          <p>The mobile SDK is not generally available. Customers who have access to the mobile SDK can use it to establish and manage Security Token Service (STS) security tokens for use in HTTP(S) requests from a mobile device to WAF. For more information, see
                * <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-application-integration.html">WAF client application integration</a> in the <i>WAF Developer Guide</i>.</p>
                */
            generateMobileSdkReleaseUrl(args: GenerateMobileSdkReleaseUrlCommandInput, options?: __HttpHandlerOptions): Promise<GenerateMobileSdkReleaseUrlCommandOutput>;
            generateMobileSdkReleaseUrl(args: GenerateMobileSdkReleaseUrlCommandInput, cb: (err: any, data?: GenerateMobileSdkReleaseUrlCommandOutput) => void): void;
            generateMobileSdkReleaseUrl(args: GenerateMobileSdkReleaseUrlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GenerateMobileSdkReleaseUrlCommandOutput) => void): void;
            /**
                * <p>Retrieves the specified <a>IPSet</a>.</p>
                */
            getIPSet(args: GetIPSetCommandInput, options?: __HttpHandlerOptions): Promise<GetIPSetCommandOutput>;
            getIPSet(args: GetIPSetCommandInput, cb: (err: any, data?: GetIPSetCommandOutput) => void): void;
            getIPSet(args: GetIPSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIPSetCommandOutput) => void): void;
            /**
                * <p>Returns the <a>LoggingConfiguration</a> for the specified web ACL.</p>
                */
            getLoggingConfiguration(args: GetLoggingConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetLoggingConfigurationCommandOutput>;
            getLoggingConfiguration(args: GetLoggingConfigurationCommandInput, cb: (err: any, data?: GetLoggingConfigurationCommandOutput) => void): void;
            getLoggingConfiguration(args: GetLoggingConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLoggingConfigurationCommandOutput) => void): void;
            /**
                * <p>Retrieves the specified managed rule set. </p>
                *          <note>
                *             <p>This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. </p>
                *             <p>Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are <code>ListManagedRuleSets</code>, <code>GetManagedRuleSet</code>, <code>PutManagedRuleSetVersions</code>, and <code>UpdateManagedRuleSetVersionExpiryDate</code>.</p>
                *          </note>
                */
            getManagedRuleSet(args: GetManagedRuleSetCommandInput, options?: __HttpHandlerOptions): Promise<GetManagedRuleSetCommandOutput>;
            getManagedRuleSet(args: GetManagedRuleSetCommandInput, cb: (err: any, data?: GetManagedRuleSetCommandOutput) => void): void;
            getManagedRuleSet(args: GetManagedRuleSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetManagedRuleSetCommandOutput) => void): void;
            /**
                * <p>Retrieves information for the specified mobile SDK release, including release notes and
                *          tags.</p>
                *          <p>The mobile SDK is not generally available. Customers who have access to the mobile SDK can use it to establish and manage Security Token Service (STS) security tokens for use in HTTP(S) requests from a mobile device to WAF. For more information, see
                * <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-application-integration.html">WAF client application integration</a> in the <i>WAF Developer Guide</i>.</p>
                */
            getMobileSdkRelease(args: GetMobileSdkReleaseCommandInput, options?: __HttpHandlerOptions): Promise<GetMobileSdkReleaseCommandOutput>;
            getMobileSdkRelease(args: GetMobileSdkReleaseCommandInput, cb: (err: any, data?: GetMobileSdkReleaseCommandOutput) => void): void;
            getMobileSdkRelease(args: GetMobileSdkReleaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMobileSdkReleaseCommandOutput) => void): void;
            /**
                * <p>Returns the IAM policy that is attached to the specified rule group.</p>
                *          <p>You must be the owner of the rule group to perform this operation.</p>
                */
            getPermissionPolicy(args: GetPermissionPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetPermissionPolicyCommandOutput>;
            getPermissionPolicy(args: GetPermissionPolicyCommandInput, cb: (err: any, data?: GetPermissionPolicyCommandOutput) => void): void;
            getPermissionPolicy(args: GetPermissionPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPermissionPolicyCommandOutput) => void): void;
            /**
                * <p>Retrieves the keys that are currently blocked by a rate-based rule instance. The maximum
                *          number of managed keys that can be blocked for a single rate-based rule instance is 10,000.
                *          If more than 10,000 addresses exceed the rate limit, those with the highest rates are
                *          blocked.</p>
                *          <p>For a rate-based rule that you've defined inside a rule group, provide the name of the
                *          rule group reference statement in your request, in addition to the rate-based rule name and
                *          the web ACL name. </p>
                *          <p>WAF monitors web requests and manages keys independently for each unique combination
                *          of web ACL, optional rule group, and rate-based rule. For example, if you define a
                *          rate-based rule inside a rule group, and then use the rule group in a web ACL, WAF
                *          monitors web requests and manages keys for that web ACL, rule group reference statement,
                *          and rate-based rule instance. If you use the same rule group in a second web ACL, WAF
                *          monitors web requests and manages keys for this second usage completely independent of your
                *          first. </p>
                */
            getRateBasedStatementManagedKeys(args: GetRateBasedStatementManagedKeysCommandInput, options?: __HttpHandlerOptions): Promise<GetRateBasedStatementManagedKeysCommandOutput>;
            getRateBasedStatementManagedKeys(args: GetRateBasedStatementManagedKeysCommandInput, cb: (err: any, data?: GetRateBasedStatementManagedKeysCommandOutput) => void): void;
            getRateBasedStatementManagedKeys(args: GetRateBasedStatementManagedKeysCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRateBasedStatementManagedKeysCommandOutput) => void): void;
            /**
                * <p>Retrieves the specified <a>RegexPatternSet</a>.</p>
                */
            getRegexPatternSet(args: GetRegexPatternSetCommandInput, options?: __HttpHandlerOptions): Promise<GetRegexPatternSetCommandOutput>;
            getRegexPatternSet(args: GetRegexPatternSetCommandInput, cb: (err: any, data?: GetRegexPatternSetCommandOutput) => void): void;
            getRegexPatternSet(args: GetRegexPatternSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRegexPatternSetCommandOutput) => void): void;
            /**
                * <p>Retrieves the specified <a>RuleGroup</a>.</p>
                */
            getRuleGroup(args: GetRuleGroupCommandInput, options?: __HttpHandlerOptions): Promise<GetRuleGroupCommandOutput>;
            getRuleGroup(args: GetRuleGroupCommandInput, cb: (err: any, data?: GetRuleGroupCommandOutput) => void): void;
            getRuleGroup(args: GetRuleGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRuleGroupCommandOutput) => void): void;
            /**
                * <p>Gets detailed information about a specified number of requests--a sample--that WAF
                *          randomly selects from among the first 5,000 requests that your Amazon Web Services resource received
                *          during a time range that you choose. You can specify a sample size of up to 500 requests,
                *          and you can specify any time range in the previous three hours.</p>
                *          <p>
                *             <code>GetSampledRequests</code> returns a time range, which is usually the time range that
                *          you specified. However, if your resource (such as a CloudFront distribution) received 5,000
                *          requests before the specified time range elapsed, <code>GetSampledRequests</code> returns
                *          an updated time range. This new time range indicates the actual period during which WAF
                *          selected the requests in the sample.</p>
                */
            getSampledRequests(args: GetSampledRequestsCommandInput, options?: __HttpHandlerOptions): Promise<GetSampledRequestsCommandOutput>;
            getSampledRequests(args: GetSampledRequestsCommandInput, cb: (err: any, data?: GetSampledRequestsCommandOutput) => void): void;
            getSampledRequests(args: GetSampledRequestsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSampledRequestsCommandOutput) => void): void;
            /**
                * <p>Retrieves the specified <a>WebACL</a>.</p>
                */
            getWebACL(args: GetWebACLCommandInput, options?: __HttpHandlerOptions): Promise<GetWebACLCommandOutput>;
            getWebACL(args: GetWebACLCommandInput, cb: (err: any, data?: GetWebACLCommandOutput) => void): void;
            getWebACL(args: GetWebACLCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetWebACLCommandOutput) => void): void;
            /**
                * <p>Retrieves the <a>WebACL</a> for the specified resource. </p>
                */
            getWebACLForResource(args: GetWebACLForResourceCommandInput, options?: __HttpHandlerOptions): Promise<GetWebACLForResourceCommandOutput>;
            getWebACLForResource(args: GetWebACLForResourceCommandInput, cb: (err: any, data?: GetWebACLForResourceCommandOutput) => void): void;
            getWebACLForResource(args: GetWebACLForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetWebACLForResourceCommandOutput) => void): void;
            /**
                * <p>Retrieves an array of managed rule groups that are available for you to use. This list
                *          includes all Amazon Web Services Managed Rules rule groups and all of the Amazon Web Services Marketplace managed rule groups that you're
                *          subscribed to.</p>
                */
            listAvailableManagedRuleGroups(args: ListAvailableManagedRuleGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListAvailableManagedRuleGroupsCommandOutput>;
            listAvailableManagedRuleGroups(args: ListAvailableManagedRuleGroupsCommandInput, cb: (err: any, data?: ListAvailableManagedRuleGroupsCommandOutput) => void): void;
            listAvailableManagedRuleGroups(args: ListAvailableManagedRuleGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAvailableManagedRuleGroupsCommandOutput) => void): void;
            /**
                * <p>Returns a list of the available versions for the specified managed rule group. </p>
                */
            listAvailableManagedRuleGroupVersions(args: ListAvailableManagedRuleGroupVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListAvailableManagedRuleGroupVersionsCommandOutput>;
            listAvailableManagedRuleGroupVersions(args: ListAvailableManagedRuleGroupVersionsCommandInput, cb: (err: any, data?: ListAvailableManagedRuleGroupVersionsCommandOutput) => void): void;
            listAvailableManagedRuleGroupVersions(args: ListAvailableManagedRuleGroupVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAvailableManagedRuleGroupVersionsCommandOutput) => void): void;
            /**
                * <p>Retrieves an array of <a>IPSetSummary</a> objects for the IP sets that you
                *          manage.</p>
                */
            listIPSets(args: ListIPSetsCommandInput, options?: __HttpHandlerOptions): Promise<ListIPSetsCommandOutput>;
            listIPSets(args: ListIPSetsCommandInput, cb: (err: any, data?: ListIPSetsCommandOutput) => void): void;
            listIPSets(args: ListIPSetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListIPSetsCommandOutput) => void): void;
            /**
                * <p>Retrieves an array of your <a>LoggingConfiguration</a> objects.</p>
                */
            listLoggingConfigurations(args: ListLoggingConfigurationsCommandInput, options?: __HttpHandlerOptions): Promise<ListLoggingConfigurationsCommandOutput>;
            listLoggingConfigurations(args: ListLoggingConfigurationsCommandInput, cb: (err: any, data?: ListLoggingConfigurationsCommandOutput) => void): void;
            listLoggingConfigurations(args: ListLoggingConfigurationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLoggingConfigurationsCommandOutput) => void): void;
            /**
                * <p>Retrieves the managed rule sets that you own. </p>
                *          <note>
                *             <p>This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. </p>
                *             <p>Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are <code>ListManagedRuleSets</code>, <code>GetManagedRuleSet</code>, <code>PutManagedRuleSetVersions</code>, and <code>UpdateManagedRuleSetVersionExpiryDate</code>.</p>
                *          </note>
                */
            listManagedRuleSets(args: ListManagedRuleSetsCommandInput, options?: __HttpHandlerOptions): Promise<ListManagedRuleSetsCommandOutput>;
            listManagedRuleSets(args: ListManagedRuleSetsCommandInput, cb: (err: any, data?: ListManagedRuleSetsCommandOutput) => void): void;
            listManagedRuleSets(args: ListManagedRuleSetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListManagedRuleSetsCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of the available releases for the mobile SDK and the specified device
                *          platform. </p>
                *          <p>The mobile SDK is not generally available. Customers who have access to the mobile SDK can use it to establish and manage Security Token Service (STS) security tokens for use in HTTP(S) requests from a mobile device to WAF. For more information, see
                * <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-application-integration.html">WAF client application integration</a> in the <i>WAF Developer Guide</i>.</p>
                */
            listMobileSdkReleases(args: ListMobileSdkReleasesCommandInput, options?: __HttpHandlerOptions): Promise<ListMobileSdkReleasesCommandOutput>;
            listMobileSdkReleases(args: ListMobileSdkReleasesCommandInput, cb: (err: any, data?: ListMobileSdkReleasesCommandOutput) => void): void;
            listMobileSdkReleases(args: ListMobileSdkReleasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMobileSdkReleasesCommandOutput) => void): void;
            /**
                * <p>Retrieves an array of <a>RegexPatternSetSummary</a> objects for the regex
                *          pattern sets that you manage.</p>
                */
            listRegexPatternSets(args: ListRegexPatternSetsCommandInput, options?: __HttpHandlerOptions): Promise<ListRegexPatternSetsCommandOutput>;
            listRegexPatternSets(args: ListRegexPatternSetsCommandInput, cb: (err: any, data?: ListRegexPatternSetsCommandOutput) => void): void;
            listRegexPatternSets(args: ListRegexPatternSetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRegexPatternSetsCommandOutput) => void): void;
            /**
                * <p>Retrieves an array of the Amazon Resource Names (ARNs) for the regional resources that
                *          are associated with the specified web ACL. If you want the list of Amazon CloudFront resources, use
                *          the CloudFront call <code>ListDistributionsByWebACLId</code>. </p>
                */
            listResourcesForWebACL(args: ListResourcesForWebACLCommandInput, options?: __HttpHandlerOptions): Promise<ListResourcesForWebACLCommandOutput>;
            listResourcesForWebACL(args: ListResourcesForWebACLCommandInput, cb: (err: any, data?: ListResourcesForWebACLCommandOutput) => void): void;
            listResourcesForWebACL(args: ListResourcesForWebACLCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListResourcesForWebACLCommandOutput) => void): void;
            /**
                * <p>Retrieves an array of <a>RuleGroupSummary</a> objects for the rule groups
                *          that you manage. </p>
                */
            listRuleGroups(args: ListRuleGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListRuleGroupsCommandOutput>;
            listRuleGroups(args: ListRuleGroupsCommandInput, cb: (err: any, data?: ListRuleGroupsCommandOutput) => void): void;
            listRuleGroups(args: ListRuleGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRuleGroupsCommandOutput) => void): void;
            /**
                * <p>Retrieves the <a>TagInfoForResource</a> for the specified resource. Tags are
                *          key:value pairs that you can use to categorize and manage your resources, for purposes like
                *          billing. For example, you might set the tag key to "customer" and the value to the customer
                *          name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags
                *          for a resource.</p>
                *          <p>You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule
                *          groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF
                *          console. </p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Retrieves an array of <a>WebACLSummary</a> objects for the web ACLs that you
                *          manage.</p>
                */
            listWebACLs(args: ListWebACLsCommandInput, options?: __HttpHandlerOptions): Promise<ListWebACLsCommandOutput>;
            listWebACLs(args: ListWebACLsCommandInput, cb: (err: any, data?: ListWebACLsCommandOutput) => void): void;
            listWebACLs(args: ListWebACLsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWebACLsCommandOutput) => void): void;
            /**
                * <p>Enables the specified <a>LoggingConfiguration</a>, to start logging from a
                *          web ACL, according to the configuration provided. </p>
                *          <note>
                *             <p>You can define one logging destination per web ACL.</p>
                *          </note>
                *          <p>You can access information about the traffic that WAF inspects using the following
                *          steps:</p>
                *          <ol>
                *             <li>
                *                <p>Create your logging destination. You can use an Amazon CloudWatch Logs log group, an Amazon Simple Storage Service (Amazon S3) bucket, or an Amazon Kinesis Data Firehose.
                *                  For information about configuring logging destinations and the permissions that are required for each, see
                *                  <a href="https://docs.aws.amazon.com/waf/latest/developerguide/logging.html">Logging web ACL traffic information</a>
                *                  in the <i>WAF Developer Guide</i>.</p>
                *             </li>
                *             <li>
                *                <p>Associate your logging destination to your web ACL using a
                *                   <code>PutLoggingConfiguration</code> request.</p>
                *             </li>
                *          </ol>
                *          <p>When you successfully enable logging using a <code>PutLoggingConfiguration</code>
                *           request, WAF creates an additional role or policy that is required to write
                *               logs to the logging destination. For an Amazon CloudWatch Logs log group, WAF creates a resource policy on the log group.
                *           For an Amazon S3 bucket, WAF creates a bucket policy. For an Amazon Kinesis Data Firehose, WAF creates a service-linked role.</p>
                *          <p>For additional information about web ACL logging, see
                *            <a href="https://docs.aws.amazon.com/waf/latest/developerguide/logging.html">Logging web ACL traffic information</a>
                *                in the <i>WAF Developer Guide</i>.</p>
                *          <note>
                *             <p>This operation completely replaces the mutable specifications that you already have for the logging configuration with the ones that you provide to this call. To modify the logging configuration, retrieve it by calling <a>GetLoggingConfiguration</a>, update the settings as needed, and then provide the complete logging configuration specification to this call.</p>
                *          </note>
                */
            putLoggingConfiguration(args: PutLoggingConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<PutLoggingConfigurationCommandOutput>;
            putLoggingConfiguration(args: PutLoggingConfigurationCommandInput, cb: (err: any, data?: PutLoggingConfigurationCommandOutput) => void): void;
            putLoggingConfiguration(args: PutLoggingConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutLoggingConfigurationCommandOutput) => void): void;
            /**
                * <p>Defines the versions of your managed rule set that you are offering to the customers.
                *          Customers see your offerings as managed rule groups with versioning.</p>
                *          <note>
                *             <p>This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. </p>
                *             <p>Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are <code>ListManagedRuleSets</code>, <code>GetManagedRuleSet</code>, <code>PutManagedRuleSetVersions</code>, and <code>UpdateManagedRuleSetVersionExpiryDate</code>.</p>
                *          </note>
                *          <p>Customers retrieve their managed rule group list by calling <a>ListAvailableManagedRuleGroups</a>. The name that you provide here for your
                *          managed rule set is the name the customer sees for the corresponding managed rule group.
                *          Customers can retrieve the available versions for a managed rule group by calling <a>ListAvailableManagedRuleGroupVersions</a>. You provide a rule group
                *          specification for each version. For each managed rule set, you must specify a version that
                *          you recommend using. </p>
                *          <p>To initiate the expiration of a managed rule group version, use <a>UpdateManagedRuleSetVersionExpiryDate</a>.</p>
                */
            putManagedRuleSetVersions(args: PutManagedRuleSetVersionsCommandInput, options?: __HttpHandlerOptions): Promise<PutManagedRuleSetVersionsCommandOutput>;
            putManagedRuleSetVersions(args: PutManagedRuleSetVersionsCommandInput, cb: (err: any, data?: PutManagedRuleSetVersionsCommandOutput) => void): void;
            putManagedRuleSetVersions(args: PutManagedRuleSetVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutManagedRuleSetVersionsCommandOutput) => void): void;
            /**
                * <p>Attaches an IAM policy to the specified resource. Use this to share a rule group across
                *          accounts.</p>
                *          <p>You must be the owner of the rule group to perform this operation.</p>
                *          <p>This action is subject to the following restrictions:</p>
                *          <ul>
                *             <li>
                *                <p>You can attach only one policy with each <code>PutPermissionPolicy</code>
                *                request.</p>
                *             </li>
                *             <li>
                *                <p>The ARN in the request must be a valid WAF <a>RuleGroup</a> ARN and the
                *                rule group must exist in the same Region.</p>
                *             </li>
                *             <li>
                *                <p>The user making the request must be the owner of the rule group.</p>
                *             </li>
                *          </ul>
                */
            putPermissionPolicy(args: PutPermissionPolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutPermissionPolicyCommandOutput>;
            putPermissionPolicy(args: PutPermissionPolicyCommandInput, cb: (err: any, data?: PutPermissionPolicyCommandOutput) => void): void;
            putPermissionPolicy(args: PutPermissionPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutPermissionPolicyCommandOutput) => void): void;
            /**
                * <p>Associates tags with the specified Amazon Web Services resource. Tags are key:value pairs that you can
                *          use to categorize and manage your resources, for purposes like billing. For example, you
                *          might set the tag key to "customer" and the value to the customer name or ID. You can
                *          specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a
                *          resource.</p>
                *          <p>You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule
                *          groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF
                *          console. </p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Disassociates tags from an Amazon Web Services resource. Tags are key:value pairs that you can
                *          associate with Amazon Web Services resources. For example, the tag key might be "customer" and the tag
                *          value might be "companyA." You can specify one or more tags to add to each container. You
                *          can add up to 50 tags to each Amazon Web Services resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the specified <a>IPSet</a>. </p>
                *          <note>
                *             <p>This operation completely replaces the mutable specifications that you already have for the IP set with the ones that you provide to this call. To modify the IP set, retrieve it by calling <a>GetIPSet</a>, update the settings as needed, and then provide the complete IP set specification to this call.</p>
                *          </note>
                *
                *          <p>When you make changes to web ACLs or web ACL components, like rules and rule groups, WAF propagates the changes everywhere that the web ACL and its components are stored and used. Your changes are applied within seconds, but there might be a brief period of inconsistency when the changes have arrived in some places and not in others. So, for example, if you change a rule action setting, the action might be the old action in one area and the new action in another area. Or if you add an IP address to an IP set used in a blocking rule, the new address might briefly be blocked in one area while still allowed in another. This temporary inconsistency can occur when you first associate a web ACL with an Amazon Web Services resource and when you change a web ACL that is already associated with a resource. Generally, any inconsistencies of this type last only a few seconds.</p>
                */
            updateIPSet(args: UpdateIPSetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateIPSetCommandOutput>;
            updateIPSet(args: UpdateIPSetCommandInput, cb: (err: any, data?: UpdateIPSetCommandOutput) => void): void;
            updateIPSet(args: UpdateIPSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateIPSetCommandOutput) => void): void;
            /**
                * <p>Updates the expiration information for your managed rule set. Use this to initiate the
                *          expiration of a managed rule group version. After you initiate expiration for a version,
                *          WAF excludes it from the response to <a>ListAvailableManagedRuleGroupVersions</a> for the managed rule group. </p>
                *          <note>
                *             <p>This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. </p>
                *             <p>Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are <code>ListManagedRuleSets</code>, <code>GetManagedRuleSet</code>, <code>PutManagedRuleSetVersions</code>, and <code>UpdateManagedRuleSetVersionExpiryDate</code>.</p>
                *          </note>
                */
            updateManagedRuleSetVersionExpiryDate(args: UpdateManagedRuleSetVersionExpiryDateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateManagedRuleSetVersionExpiryDateCommandOutput>;
            updateManagedRuleSetVersionExpiryDate(args: UpdateManagedRuleSetVersionExpiryDateCommandInput, cb: (err: any, data?: UpdateManagedRuleSetVersionExpiryDateCommandOutput) => void): void;
            updateManagedRuleSetVersionExpiryDate(args: UpdateManagedRuleSetVersionExpiryDateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateManagedRuleSetVersionExpiryDateCommandOutput) => void): void;
            /**
                * <p>Updates the specified <a>RegexPatternSet</a>.</p>
                *          <note>
                *             <p>This operation completely replaces the mutable specifications that you already have for the regex pattern set with the ones that you provide to this call. To modify the regex pattern set, retrieve it by calling <a>GetRegexPatternSet</a>, update the settings as needed, and then provide the complete regex pattern set specification to this call.</p>
                *          </note>
                *
                *          <p>When you make changes to web ACLs or web ACL components, like rules and rule groups, WAF propagates the changes everywhere that the web ACL and its components are stored and used. Your changes are applied within seconds, but there might be a brief period of inconsistency when the changes have arrived in some places and not in others. So, for example, if you change a rule action setting, the action might be the old action in one area and the new action in another area. Or if you add an IP address to an IP set used in a blocking rule, the new address might briefly be blocked in one area while still allowed in another. This temporary inconsistency can occur when you first associate a web ACL with an Amazon Web Services resource and when you change a web ACL that is already associated with a resource. Generally, any inconsistencies of this type last only a few seconds.</p>
                */
            updateRegexPatternSet(args: UpdateRegexPatternSetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRegexPatternSetCommandOutput>;
            updateRegexPatternSet(args: UpdateRegexPatternSetCommandInput, cb: (err: any, data?: UpdateRegexPatternSetCommandOutput) => void): void;
            updateRegexPatternSet(args: UpdateRegexPatternSetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRegexPatternSetCommandOutput) => void): void;
            /**
                * <p>Updates the specified <a>RuleGroup</a>.</p>
                *          <note>
                *             <p>This operation completely replaces the mutable specifications that you already have for the rule group with the ones that you provide to this call. To modify the rule group, retrieve it by calling <a>GetRuleGroup</a>, update the settings as needed, and then provide the complete rule group specification to this call.</p>
                *          </note>
                *
                *          <p>When you make changes to web ACLs or web ACL components, like rules and rule groups, WAF propagates the changes everywhere that the web ACL and its components are stored and used. Your changes are applied within seconds, but there might be a brief period of inconsistency when the changes have arrived in some places and not in others. So, for example, if you change a rule action setting, the action might be the old action in one area and the new action in another area. Or if you add an IP address to an IP set used in a blocking rule, the new address might briefly be blocked in one area while still allowed in another. This temporary inconsistency can occur when you first associate a web ACL with an Amazon Web Services resource and when you change a web ACL that is already associated with a resource. Generally, any inconsistencies of this type last only a few seconds.</p>
                *          <p> A rule group defines a collection of rules to inspect and control web requests that you can use in a <a>WebACL</a>. When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements. </p>
                */
            updateRuleGroup(args: UpdateRuleGroupCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRuleGroupCommandOutput>;
            updateRuleGroup(args: UpdateRuleGroupCommandInput, cb: (err: any, data?: UpdateRuleGroupCommandOutput) => void): void;
            updateRuleGroup(args: UpdateRuleGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRuleGroupCommandOutput) => void): void;
            /**
                * <p>Updates the specified <a>WebACL</a>. While updating a web ACL, WAF provides
                *          continuous coverage to the resources that you have associated with the web ACL. </p>
                *
                *          <p>When you make changes to web ACLs or web ACL components, like rules and rule groups, WAF propagates the changes everywhere that the web ACL and its components are stored and used. Your changes are applied within seconds, but there might be a brief period of inconsistency when the changes have arrived in some places and not in others. So, for example, if you change a rule action setting, the action might be the old action in one area and the new action in another area. Or if you add an IP address to an IP set used in a blocking rule, the new address might briefly be blocked in one area while still allowed in another. This temporary inconsistency can occur when you first associate a web ACL with an Amazon Web Services resource and when you change a web ACL that is already associated with a resource. Generally, any inconsistencies of this type last only a few seconds.</p>
                *          <note>
                *             <p>This operation completely replaces the mutable specifications that you already have for the web ACL with the ones that you provide to this call. To modify the web ACL, retrieve it by calling <a>GetWebACL</a>, update the settings as needed, and then provide the complete web ACL specification to this call.</p>
                *          </note>
                *          <p> A web ACL defines a collection of rules to use to inspect and control web requests. Each rule has an action defined (allow, block, or count) for requests that match the statement of the rule. In the web ACL, you assign a default action to take (allow, block) for any request that does not match any of the rules. The rules in a web ACL can be a combination of the types <a>Rule</a>, <a>RuleGroup</a>, and managed rule group. You can associate a web ACL with one or more Amazon Web Services resources to protect. The resources can be an Amazon CloudFront distribution, an Amazon API Gateway REST API, an Application Load Balancer, or an AppSync GraphQL API.  </p>
                */
            updateWebACL(args: UpdateWebACLCommandInput, options?: __HttpHandlerOptions): Promise<UpdateWebACLCommandOutput>;
            updateWebACL(args: UpdateWebACLCommandInput, cb: (err: any, data?: UpdateWebACLCommandOutput) => void): void;
            updateWebACL(args: UpdateWebACLCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateWebACLCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/AssociateWebACLCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateWebACLRequest, AssociateWebACLResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface AssociateWebACLCommandInput extends AssociateWebACLRequest {
    }
    export interface AssociateWebACLCommandOutput extends AssociateWebACLResponse, __MetadataBearer {
    }
    /**
        * <p>Associates a web ACL with a regional application resource, to protect the resource.
        *          A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
        *          <p>For Amazon CloudFront, don't use this call. Instead, use your CloudFront distribution configuration. To
        *          associate a web ACL, in the CloudFront call <code>UpdateDistribution</code>, set the web ACL ID
        *          to the Amazon Resource Name (ARN) of the web ACL. For information, see <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html">UpdateDistribution</a>.</p>
        *
        *          <p>When you make changes to web ACLs or web ACL components, like rules and rule groups, WAF propagates the changes everywhere that the web ACL and its components are stored and used. Your changes are applied within seconds, but there might be a brief period of inconsistency when the changes have arrived in some places and not in others. So, for example, if you change a rule action setting, the action might be the old action in one area and the new action in another area. Or if you add an IP address to an IP set used in a blocking rule, the new address might briefly be blocked in one area while still allowed in another. This temporary inconsistency can occur when you first associate a web ACL with an Amazon Web Services resource and when you change a web ACL that is already associated with a resource. Generally, any inconsistencies of this type last only a few seconds.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, AssociateWebACLCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, AssociateWebACLCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new AssociateWebACLCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateWebACLCommandInput} for command's `input` shape.
        * @see {@link AssociateWebACLCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class AssociateWebACLCommand extends $Command<AssociateWebACLCommandInput, AssociateWebACLCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: AssociateWebACLCommandInput;
            constructor(input: AssociateWebACLCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateWebACLCommandInput, AssociateWebACLCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CheckCapacityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CheckCapacityRequest, CheckCapacityResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface CheckCapacityCommandInput extends CheckCapacityRequest {
    }
    export interface CheckCapacityCommandOutput extends CheckCapacityResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the web ACL capacity unit (WCU) requirements for a specified scope and set of rules.
        *          You can use this to check the capacity requirements for the rules you want to use in a
        *          <a>RuleGroup</a> or <a>WebACL</a>.
        *          </p>
        *          <p>WAF uses WCUs to calculate and control the operating
        *          resources that are used to run your rules, rule groups, and web ACLs. WAF
        *          calculates capacity differently for each rule type, to reflect the relative cost of each rule.
        *          Simple rules that cost little to run use fewer WCUs than more complex rules
        * 				that use more processing power.
        * 				Rule group capacity is fixed at creation, which helps users plan their
        *          web ACL WCU usage when they use a rule group.
        *          The WCU limit for web ACLs is 1,500.  </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, CheckCapacityCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, CheckCapacityCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new CheckCapacityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CheckCapacityCommandInput} for command's `input` shape.
        * @see {@link CheckCapacityCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class CheckCapacityCommand extends $Command<CheckCapacityCommandInput, CheckCapacityCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: CheckCapacityCommandInput;
            constructor(input: CheckCapacityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CheckCapacityCommandInput, CheckCapacityCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CreateIPSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateIPSetRequest, CreateIPSetResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface CreateIPSetCommandInput extends CreateIPSetRequest {
    }
    export interface CreateIPSetCommandOutput extends CreateIPSetResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an <a>IPSet</a>, which you use to identify web requests that
        *          originate from specific IP addresses or ranges of IP addresses. For example, if you're
        *          receiving a lot of requests from a ranges of IP addresses, you can configure WAF to
        *          block them using an IPSet that lists those IP addresses. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, CreateIPSetCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, CreateIPSetCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new CreateIPSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateIPSetCommandInput} for command's `input` shape.
        * @see {@link CreateIPSetCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class CreateIPSetCommand extends $Command<CreateIPSetCommandInput, CreateIPSetCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: CreateIPSetCommandInput;
            constructor(input: CreateIPSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateIPSetCommandInput, CreateIPSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CreateRegexPatternSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateRegexPatternSetRequest, CreateRegexPatternSetResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface CreateRegexPatternSetCommandInput extends CreateRegexPatternSetRequest {
    }
    export interface CreateRegexPatternSetCommandOutput extends CreateRegexPatternSetResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <a>RegexPatternSet</a>, which you reference in a <a>RegexPatternSetReferenceStatement</a>, to have WAF inspect a web request
        *          component for the specified patterns.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, CreateRegexPatternSetCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, CreateRegexPatternSetCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new CreateRegexPatternSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRegexPatternSetCommandInput} for command's `input` shape.
        * @see {@link CreateRegexPatternSetCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class CreateRegexPatternSetCommand extends $Command<CreateRegexPatternSetCommandInput, CreateRegexPatternSetCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: CreateRegexPatternSetCommandInput;
            constructor(input: CreateRegexPatternSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRegexPatternSetCommandInput, CreateRegexPatternSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CreateRuleGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateRuleGroupRequest, CreateRuleGroupResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface CreateRuleGroupCommandInput extends CreateRuleGroupRequest {
    }
    export interface CreateRuleGroupCommandOutput extends CreateRuleGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <a>RuleGroup</a> per the specifications provided. </p>
        *          <p> A rule group defines a collection of rules to inspect and control web requests that you can use in a <a>WebACL</a>. When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, CreateRuleGroupCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, CreateRuleGroupCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new CreateRuleGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRuleGroupCommandInput} for command's `input` shape.
        * @see {@link CreateRuleGroupCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class CreateRuleGroupCommand extends $Command<CreateRuleGroupCommandInput, CreateRuleGroupCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: CreateRuleGroupCommandInput;
            constructor(input: CreateRuleGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRuleGroupCommandInput, CreateRuleGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CreateWebACLCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateWebACLRequest, CreateWebACLResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface CreateWebACLCommandInput extends CreateWebACLRequest {
    }
    export interface CreateWebACLCommandOutput extends CreateWebACLResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <a>WebACL</a> per the specifications provided.</p>
        *          <p> A web ACL defines a collection of rules to use to inspect and control web requests. Each rule has an action defined (allow, block, or count) for requests that match the statement of the rule. In the web ACL, you assign a default action to take (allow, block) for any request that does not match any of the rules. The rules in a web ACL can be a combination of the types <a>Rule</a>, <a>RuleGroup</a>, and managed rule group. You can associate a web ACL with one or more Amazon Web Services resources to protect. The resources can be an Amazon CloudFront distribution, an Amazon API Gateway REST API, an Application Load Balancer, or an AppSync GraphQL API.  </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, CreateWebACLCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, CreateWebACLCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new CreateWebACLCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWebACLCommandInput} for command's `input` shape.
        * @see {@link CreateWebACLCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class CreateWebACLCommand extends $Command<CreateWebACLCommandInput, CreateWebACLCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: CreateWebACLCommandInput;
            constructor(input: CreateWebACLCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWebACLCommandInput, CreateWebACLCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteFirewallManagerRuleGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteFirewallManagerRuleGroupsRequest, DeleteFirewallManagerRuleGroupsResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface DeleteFirewallManagerRuleGroupsCommandInput extends DeleteFirewallManagerRuleGroupsRequest {
    }
    export interface DeleteFirewallManagerRuleGroupsCommandOutput extends DeleteFirewallManagerRuleGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes all rule groups that are managed by Firewall Manager for the specified web ACL. </p>
        *          <p>You can only use this if <code>ManagedByFirewallManager</code> is false in the specified
        *             <a>WebACL</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, DeleteFirewallManagerRuleGroupsCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, DeleteFirewallManagerRuleGroupsCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new DeleteFirewallManagerRuleGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFirewallManagerRuleGroupsCommandInput} for command's `input` shape.
        * @see {@link DeleteFirewallManagerRuleGroupsCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class DeleteFirewallManagerRuleGroupsCommand extends $Command<DeleteFirewallManagerRuleGroupsCommandInput, DeleteFirewallManagerRuleGroupsCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: DeleteFirewallManagerRuleGroupsCommandInput;
            constructor(input: DeleteFirewallManagerRuleGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFirewallManagerRuleGroupsCommandInput, DeleteFirewallManagerRuleGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteIPSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteIPSetRequest, DeleteIPSetResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface DeleteIPSetCommandInput extends DeleteIPSetRequest {
    }
    export interface DeleteIPSetCommandOutput extends DeleteIPSetResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified <a>IPSet</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, DeleteIPSetCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, DeleteIPSetCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new DeleteIPSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteIPSetCommandInput} for command's `input` shape.
        * @see {@link DeleteIPSetCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class DeleteIPSetCommand extends $Command<DeleteIPSetCommandInput, DeleteIPSetCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: DeleteIPSetCommandInput;
            constructor(input: DeleteIPSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteIPSetCommandInput, DeleteIPSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteLoggingConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteLoggingConfigurationRequest, DeleteLoggingConfigurationResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface DeleteLoggingConfigurationCommandInput extends DeleteLoggingConfigurationRequest {
    }
    export interface DeleteLoggingConfigurationCommandOutput extends DeleteLoggingConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the <a>LoggingConfiguration</a> from the specified web ACL.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, DeleteLoggingConfigurationCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, DeleteLoggingConfigurationCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new DeleteLoggingConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLoggingConfigurationCommandInput} for command's `input` shape.
        * @see {@link DeleteLoggingConfigurationCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class DeleteLoggingConfigurationCommand extends $Command<DeleteLoggingConfigurationCommandInput, DeleteLoggingConfigurationCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: DeleteLoggingConfigurationCommandInput;
            constructor(input: DeleteLoggingConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLoggingConfigurationCommandInput, DeleteLoggingConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeletePermissionPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeletePermissionPolicyRequest, DeletePermissionPolicyResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface DeletePermissionPolicyCommandInput extends DeletePermissionPolicyRequest {
    }
    export interface DeletePermissionPolicyCommandOutput extends DeletePermissionPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Permanently deletes an IAM policy from the specified rule group.</p>
        *          <p>You must be the owner of the rule group to perform this operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, DeletePermissionPolicyCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, DeletePermissionPolicyCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new DeletePermissionPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePermissionPolicyCommandInput} for command's `input` shape.
        * @see {@link DeletePermissionPolicyCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class DeletePermissionPolicyCommand extends $Command<DeletePermissionPolicyCommandInput, DeletePermissionPolicyCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: DeletePermissionPolicyCommandInput;
            constructor(input: DeletePermissionPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePermissionPolicyCommandInput, DeletePermissionPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteRegexPatternSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteRegexPatternSetRequest, DeleteRegexPatternSetResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface DeleteRegexPatternSetCommandInput extends DeleteRegexPatternSetRequest {
    }
    export interface DeleteRegexPatternSetCommandOutput extends DeleteRegexPatternSetResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified <a>RegexPatternSet</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, DeleteRegexPatternSetCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, DeleteRegexPatternSetCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new DeleteRegexPatternSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRegexPatternSetCommandInput} for command's `input` shape.
        * @see {@link DeleteRegexPatternSetCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class DeleteRegexPatternSetCommand extends $Command<DeleteRegexPatternSetCommandInput, DeleteRegexPatternSetCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: DeleteRegexPatternSetCommandInput;
            constructor(input: DeleteRegexPatternSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRegexPatternSetCommandInput, DeleteRegexPatternSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteRuleGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteRuleGroupRequest, DeleteRuleGroupResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface DeleteRuleGroupCommandInput extends DeleteRuleGroupRequest {
    }
    export interface DeleteRuleGroupCommandOutput extends DeleteRuleGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified <a>RuleGroup</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, DeleteRuleGroupCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, DeleteRuleGroupCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new DeleteRuleGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRuleGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteRuleGroupCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class DeleteRuleGroupCommand extends $Command<DeleteRuleGroupCommandInput, DeleteRuleGroupCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: DeleteRuleGroupCommandInput;
            constructor(input: DeleteRuleGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRuleGroupCommandInput, DeleteRuleGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteWebACLCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteWebACLRequest, DeleteWebACLResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface DeleteWebACLCommandInput extends DeleteWebACLRequest {
    }
    export interface DeleteWebACLCommandOutput extends DeleteWebACLResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified <a>WebACL</a>. </p>
        *          <p>You can only use this if <code>ManagedByFirewallManager</code> is false in the specified
        *             <a>WebACL</a>. </p>
        *          <note>
        *             <p>Before deleting any web ACL, first disassociate it from all resources.</p>
        *             <ul>
        *                <li>
        *                   <p>To retrieve a list of the resources that are associated with a web ACL, use the
        *                   following calls:</p>
        *                   <ul>
        *                      <li>
        *                         <p>For regional resources, call <a>ListResourcesForWebACL</a>.</p>
        *                      </li>
        *                      <li>
        *                         <p>For Amazon CloudFront distributions, use the CloudFront call
        *                            <code>ListDistributionsByWebACLId</code>. For information, see <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_ListDistributionsByWebACLId.html">ListDistributionsByWebACLId</a>.</p>
        *                      </li>
        *                   </ul>
        *                </li>
        *                <li>
        *                   <p>To disassociate a resource from a web ACL, use the following calls:</p>
        *                   <ul>
        *                      <li>
        *                         <p>For regional resources, call <a>DisassociateWebACL</a>.</p>
        *                      </li>
        *                      <li>
        *                         <p>For Amazon CloudFront distributions, provide an empty web ACL ID in the CloudFront call
        *                            <code>UpdateDistribution</code>. For information, see <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html">UpdateDistribution</a>.</p>
        *                      </li>
        *                   </ul>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, DeleteWebACLCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, DeleteWebACLCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new DeleteWebACLCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteWebACLCommandInput} for command's `input` shape.
        * @see {@link DeleteWebACLCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class DeleteWebACLCommand extends $Command<DeleteWebACLCommandInput, DeleteWebACLCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: DeleteWebACLCommandInput;
            constructor(input: DeleteWebACLCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteWebACLCommandInput, DeleteWebACLCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DescribeManagedRuleGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeManagedRuleGroupRequest, DescribeManagedRuleGroupResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface DescribeManagedRuleGroupCommandInput extends DescribeManagedRuleGroupRequest {
    }
    export interface DescribeManagedRuleGroupCommandOutput extends DescribeManagedRuleGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Provides high-level information for a managed rule group, including descriptions of the
        *          rules. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, DescribeManagedRuleGroupCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, DescribeManagedRuleGroupCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new DescribeManagedRuleGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeManagedRuleGroupCommandInput} for command's `input` shape.
        * @see {@link DescribeManagedRuleGroupCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class DescribeManagedRuleGroupCommand extends $Command<DescribeManagedRuleGroupCommandInput, DescribeManagedRuleGroupCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: DescribeManagedRuleGroupCommandInput;
            constructor(input: DescribeManagedRuleGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeManagedRuleGroupCommandInput, DescribeManagedRuleGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DisassociateWebACLCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateWebACLRequest, DisassociateWebACLResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface DisassociateWebACLCommandInput extends DisassociateWebACLRequest {
    }
    export interface DisassociateWebACLCommandOutput extends DisassociateWebACLResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates the specified regional application resource from any existing web ACL
        *          association. A resource can have at most one web ACL association. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
        *          <p>For Amazon CloudFront, don't use this call. Instead, use your CloudFront distribution configuration. To
        *          disassociate a web ACL, provide an empty web ACL ID in the CloudFront call
        *             <code>UpdateDistribution</code>. For information, see <a href="https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_UpdateDistribution.html">UpdateDistribution</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, DisassociateWebACLCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, DisassociateWebACLCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new DisassociateWebACLCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateWebACLCommandInput} for command's `input` shape.
        * @see {@link DisassociateWebACLCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class DisassociateWebACLCommand extends $Command<DisassociateWebACLCommandInput, DisassociateWebACLCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: DisassociateWebACLCommandInput;
            constructor(input: DisassociateWebACLCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateWebACLCommandInput, DisassociateWebACLCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GenerateMobileSdkReleaseUrlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GenerateMobileSdkReleaseUrlRequest, GenerateMobileSdkReleaseUrlResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface GenerateMobileSdkReleaseUrlCommandInput extends GenerateMobileSdkReleaseUrlRequest {
    }
    export interface GenerateMobileSdkReleaseUrlCommandOutput extends GenerateMobileSdkReleaseUrlResponse, __MetadataBearer {
    }
    /**
        * <p>Generates a presigned download URL for the specified release of the mobile SDK.</p>
        *          <p>The mobile SDK is not generally available. Customers who have access to the mobile SDK can use it to establish and manage Security Token Service (STS) security tokens for use in HTTP(S) requests from a mobile device to WAF. For more information, see
        * <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-application-integration.html">WAF client application integration</a> in the <i>WAF Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, GenerateMobileSdkReleaseUrlCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, GenerateMobileSdkReleaseUrlCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new GenerateMobileSdkReleaseUrlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GenerateMobileSdkReleaseUrlCommandInput} for command's `input` shape.
        * @see {@link GenerateMobileSdkReleaseUrlCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class GenerateMobileSdkReleaseUrlCommand extends $Command<GenerateMobileSdkReleaseUrlCommandInput, GenerateMobileSdkReleaseUrlCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: GenerateMobileSdkReleaseUrlCommandInput;
            constructor(input: GenerateMobileSdkReleaseUrlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GenerateMobileSdkReleaseUrlCommandInput, GenerateMobileSdkReleaseUrlCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetIPSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetIPSetRequest, GetIPSetResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface GetIPSetCommandInput extends GetIPSetRequest {
    }
    export interface GetIPSetCommandOutput extends GetIPSetResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the specified <a>IPSet</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, GetIPSetCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, GetIPSetCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new GetIPSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIPSetCommandInput} for command's `input` shape.
        * @see {@link GetIPSetCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class GetIPSetCommand extends $Command<GetIPSetCommandInput, GetIPSetCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: GetIPSetCommandInput;
            constructor(input: GetIPSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIPSetCommandInput, GetIPSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetLoggingConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetLoggingConfigurationRequest, GetLoggingConfigurationResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface GetLoggingConfigurationCommandInput extends GetLoggingConfigurationRequest {
    }
    export interface GetLoggingConfigurationCommandOutput extends GetLoggingConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the <a>LoggingConfiguration</a> for the specified web ACL.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, GetLoggingConfigurationCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, GetLoggingConfigurationCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new GetLoggingConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLoggingConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetLoggingConfigurationCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class GetLoggingConfigurationCommand extends $Command<GetLoggingConfigurationCommandInput, GetLoggingConfigurationCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: GetLoggingConfigurationCommandInput;
            constructor(input: GetLoggingConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLoggingConfigurationCommandInput, GetLoggingConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetManagedRuleSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetManagedRuleSetRequest, GetManagedRuleSetResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface GetManagedRuleSetCommandInput extends GetManagedRuleSetRequest {
    }
    export interface GetManagedRuleSetCommandOutput extends GetManagedRuleSetResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the specified managed rule set. </p>
        *          <note>
        *             <p>This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. </p>
        *             <p>Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are <code>ListManagedRuleSets</code>, <code>GetManagedRuleSet</code>, <code>PutManagedRuleSetVersions</code>, and <code>UpdateManagedRuleSetVersionExpiryDate</code>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, GetManagedRuleSetCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, GetManagedRuleSetCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new GetManagedRuleSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetManagedRuleSetCommandInput} for command's `input` shape.
        * @see {@link GetManagedRuleSetCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class GetManagedRuleSetCommand extends $Command<GetManagedRuleSetCommandInput, GetManagedRuleSetCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: GetManagedRuleSetCommandInput;
            constructor(input: GetManagedRuleSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetManagedRuleSetCommandInput, GetManagedRuleSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetMobileSdkReleaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetMobileSdkReleaseRequest, GetMobileSdkReleaseResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface GetMobileSdkReleaseCommandInput extends GetMobileSdkReleaseRequest {
    }
    export interface GetMobileSdkReleaseCommandOutput extends GetMobileSdkReleaseResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information for the specified mobile SDK release, including release notes and
        *          tags.</p>
        *          <p>The mobile SDK is not generally available. Customers who have access to the mobile SDK can use it to establish and manage Security Token Service (STS) security tokens for use in HTTP(S) requests from a mobile device to WAF. For more information, see
        * <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-application-integration.html">WAF client application integration</a> in the <i>WAF Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, GetMobileSdkReleaseCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, GetMobileSdkReleaseCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new GetMobileSdkReleaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMobileSdkReleaseCommandInput} for command's `input` shape.
        * @see {@link GetMobileSdkReleaseCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class GetMobileSdkReleaseCommand extends $Command<GetMobileSdkReleaseCommandInput, GetMobileSdkReleaseCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: GetMobileSdkReleaseCommandInput;
            constructor(input: GetMobileSdkReleaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMobileSdkReleaseCommandInput, GetMobileSdkReleaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetPermissionPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetPermissionPolicyRequest, GetPermissionPolicyResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface GetPermissionPolicyCommandInput extends GetPermissionPolicyRequest {
    }
    export interface GetPermissionPolicyCommandOutput extends GetPermissionPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the IAM policy that is attached to the specified rule group.</p>
        *          <p>You must be the owner of the rule group to perform this operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, GetPermissionPolicyCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, GetPermissionPolicyCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new GetPermissionPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPermissionPolicyCommandInput} for command's `input` shape.
        * @see {@link GetPermissionPolicyCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class GetPermissionPolicyCommand extends $Command<GetPermissionPolicyCommandInput, GetPermissionPolicyCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: GetPermissionPolicyCommandInput;
            constructor(input: GetPermissionPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPermissionPolicyCommandInput, GetPermissionPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetRateBasedStatementManagedKeysCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetRateBasedStatementManagedKeysRequest, GetRateBasedStatementManagedKeysResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface GetRateBasedStatementManagedKeysCommandInput extends GetRateBasedStatementManagedKeysRequest {
    }
    export interface GetRateBasedStatementManagedKeysCommandOutput extends GetRateBasedStatementManagedKeysResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the keys that are currently blocked by a rate-based rule instance. The maximum
        *          number of managed keys that can be blocked for a single rate-based rule instance is 10,000.
        *          If more than 10,000 addresses exceed the rate limit, those with the highest rates are
        *          blocked.</p>
        *          <p>For a rate-based rule that you've defined inside a rule group, provide the name of the
        *          rule group reference statement in your request, in addition to the rate-based rule name and
        *          the web ACL name. </p>
        *          <p>WAF monitors web requests and manages keys independently for each unique combination
        *          of web ACL, optional rule group, and rate-based rule. For example, if you define a
        *          rate-based rule inside a rule group, and then use the rule group in a web ACL, WAF
        *          monitors web requests and manages keys for that web ACL, rule group reference statement,
        *          and rate-based rule instance. If you use the same rule group in a second web ACL, WAF
        *          monitors web requests and manages keys for this second usage completely independent of your
        *          first. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, GetRateBasedStatementManagedKeysCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, GetRateBasedStatementManagedKeysCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new GetRateBasedStatementManagedKeysCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRateBasedStatementManagedKeysCommandInput} for command's `input` shape.
        * @see {@link GetRateBasedStatementManagedKeysCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class GetRateBasedStatementManagedKeysCommand extends $Command<GetRateBasedStatementManagedKeysCommandInput, GetRateBasedStatementManagedKeysCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: GetRateBasedStatementManagedKeysCommandInput;
            constructor(input: GetRateBasedStatementManagedKeysCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRateBasedStatementManagedKeysCommandInput, GetRateBasedStatementManagedKeysCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetRegexPatternSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetRegexPatternSetRequest, GetRegexPatternSetResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface GetRegexPatternSetCommandInput extends GetRegexPatternSetRequest {
    }
    export interface GetRegexPatternSetCommandOutput extends GetRegexPatternSetResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the specified <a>RegexPatternSet</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, GetRegexPatternSetCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, GetRegexPatternSetCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new GetRegexPatternSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRegexPatternSetCommandInput} for command's `input` shape.
        * @see {@link GetRegexPatternSetCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class GetRegexPatternSetCommand extends $Command<GetRegexPatternSetCommandInput, GetRegexPatternSetCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: GetRegexPatternSetCommandInput;
            constructor(input: GetRegexPatternSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRegexPatternSetCommandInput, GetRegexPatternSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetRuleGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetRuleGroupRequest, GetRuleGroupResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface GetRuleGroupCommandInput extends GetRuleGroupRequest {
    }
    export interface GetRuleGroupCommandOutput extends GetRuleGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the specified <a>RuleGroup</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, GetRuleGroupCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, GetRuleGroupCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new GetRuleGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRuleGroupCommandInput} for command's `input` shape.
        * @see {@link GetRuleGroupCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class GetRuleGroupCommand extends $Command<GetRuleGroupCommandInput, GetRuleGroupCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: GetRuleGroupCommandInput;
            constructor(input: GetRuleGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRuleGroupCommandInput, GetRuleGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetSampledRequestsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSampledRequestsRequest, GetSampledRequestsResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface GetSampledRequestsCommandInput extends GetSampledRequestsRequest {
    }
    export interface GetSampledRequestsCommandOutput extends GetSampledRequestsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets detailed information about a specified number of requests--a sample--that WAF
        *          randomly selects from among the first 5,000 requests that your Amazon Web Services resource received
        *          during a time range that you choose. You can specify a sample size of up to 500 requests,
        *          and you can specify any time range in the previous three hours.</p>
        *          <p>
        *             <code>GetSampledRequests</code> returns a time range, which is usually the time range that
        *          you specified. However, if your resource (such as a CloudFront distribution) received 5,000
        *          requests before the specified time range elapsed, <code>GetSampledRequests</code> returns
        *          an updated time range. This new time range indicates the actual period during which WAF
        *          selected the requests in the sample.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, GetSampledRequestsCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, GetSampledRequestsCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new GetSampledRequestsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSampledRequestsCommandInput} for command's `input` shape.
        * @see {@link GetSampledRequestsCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class GetSampledRequestsCommand extends $Command<GetSampledRequestsCommandInput, GetSampledRequestsCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: GetSampledRequestsCommandInput;
            constructor(input: GetSampledRequestsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSampledRequestsCommandInput, GetSampledRequestsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetWebACLCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetWebACLRequest, GetWebACLResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface GetWebACLCommandInput extends GetWebACLRequest {
    }
    export interface GetWebACLCommandOutput extends GetWebACLResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the specified <a>WebACL</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, GetWebACLCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, GetWebACLCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new GetWebACLCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetWebACLCommandInput} for command's `input` shape.
        * @see {@link GetWebACLCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class GetWebACLCommand extends $Command<GetWebACLCommandInput, GetWebACLCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: GetWebACLCommandInput;
            constructor(input: GetWebACLCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetWebACLCommandInput, GetWebACLCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetWebACLForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetWebACLForResourceRequest, GetWebACLForResourceResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface GetWebACLForResourceCommandInput extends GetWebACLForResourceRequest {
    }
    export interface GetWebACLForResourceCommandOutput extends GetWebACLForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the <a>WebACL</a> for the specified resource. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, GetWebACLForResourceCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, GetWebACLForResourceCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new GetWebACLForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetWebACLForResourceCommandInput} for command's `input` shape.
        * @see {@link GetWebACLForResourceCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class GetWebACLForResourceCommand extends $Command<GetWebACLForResourceCommandInput, GetWebACLForResourceCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: GetWebACLForResourceCommandInput;
            constructor(input: GetWebACLForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetWebACLForResourceCommandInput, GetWebACLForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListAvailableManagedRuleGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAvailableManagedRuleGroupsRequest, ListAvailableManagedRuleGroupsResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface ListAvailableManagedRuleGroupsCommandInput extends ListAvailableManagedRuleGroupsRequest {
    }
    export interface ListAvailableManagedRuleGroupsCommandOutput extends ListAvailableManagedRuleGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves an array of managed rule groups that are available for you to use. This list
        *          includes all Amazon Web Services Managed Rules rule groups and all of the Amazon Web Services Marketplace managed rule groups that you're
        *          subscribed to.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, ListAvailableManagedRuleGroupsCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, ListAvailableManagedRuleGroupsCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new ListAvailableManagedRuleGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAvailableManagedRuleGroupsCommandInput} for command's `input` shape.
        * @see {@link ListAvailableManagedRuleGroupsCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class ListAvailableManagedRuleGroupsCommand extends $Command<ListAvailableManagedRuleGroupsCommandInput, ListAvailableManagedRuleGroupsCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: ListAvailableManagedRuleGroupsCommandInput;
            constructor(input: ListAvailableManagedRuleGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAvailableManagedRuleGroupsCommandInput, ListAvailableManagedRuleGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListAvailableManagedRuleGroupVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAvailableManagedRuleGroupVersionsRequest, ListAvailableManagedRuleGroupVersionsResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface ListAvailableManagedRuleGroupVersionsCommandInput extends ListAvailableManagedRuleGroupVersionsRequest {
    }
    export interface ListAvailableManagedRuleGroupVersionsCommandOutput extends ListAvailableManagedRuleGroupVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the available versions for the specified managed rule group. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, ListAvailableManagedRuleGroupVersionsCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, ListAvailableManagedRuleGroupVersionsCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new ListAvailableManagedRuleGroupVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAvailableManagedRuleGroupVersionsCommandInput} for command's `input` shape.
        * @see {@link ListAvailableManagedRuleGroupVersionsCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class ListAvailableManagedRuleGroupVersionsCommand extends $Command<ListAvailableManagedRuleGroupVersionsCommandInput, ListAvailableManagedRuleGroupVersionsCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: ListAvailableManagedRuleGroupVersionsCommandInput;
            constructor(input: ListAvailableManagedRuleGroupVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAvailableManagedRuleGroupVersionsCommandInput, ListAvailableManagedRuleGroupVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListIPSetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListIPSetsRequest, ListIPSetsResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface ListIPSetsCommandInput extends ListIPSetsRequest {
    }
    export interface ListIPSetsCommandOutput extends ListIPSetsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves an array of <a>IPSetSummary</a> objects for the IP sets that you
        *          manage.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, ListIPSetsCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, ListIPSetsCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new ListIPSetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListIPSetsCommandInput} for command's `input` shape.
        * @see {@link ListIPSetsCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class ListIPSetsCommand extends $Command<ListIPSetsCommandInput, ListIPSetsCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: ListIPSetsCommandInput;
            constructor(input: ListIPSetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListIPSetsCommandInput, ListIPSetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListLoggingConfigurationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListLoggingConfigurationsRequest, ListLoggingConfigurationsResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface ListLoggingConfigurationsCommandInput extends ListLoggingConfigurationsRequest {
    }
    export interface ListLoggingConfigurationsCommandOutput extends ListLoggingConfigurationsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves an array of your <a>LoggingConfiguration</a> objects.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, ListLoggingConfigurationsCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, ListLoggingConfigurationsCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new ListLoggingConfigurationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLoggingConfigurationsCommandInput} for command's `input` shape.
        * @see {@link ListLoggingConfigurationsCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class ListLoggingConfigurationsCommand extends $Command<ListLoggingConfigurationsCommandInput, ListLoggingConfigurationsCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: ListLoggingConfigurationsCommandInput;
            constructor(input: ListLoggingConfigurationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLoggingConfigurationsCommandInput, ListLoggingConfigurationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListManagedRuleSetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListManagedRuleSetsRequest, ListManagedRuleSetsResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface ListManagedRuleSetsCommandInput extends ListManagedRuleSetsRequest {
    }
    export interface ListManagedRuleSetsCommandOutput extends ListManagedRuleSetsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the managed rule sets that you own. </p>
        *          <note>
        *             <p>This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. </p>
        *             <p>Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are <code>ListManagedRuleSets</code>, <code>GetManagedRuleSet</code>, <code>PutManagedRuleSetVersions</code>, and <code>UpdateManagedRuleSetVersionExpiryDate</code>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, ListManagedRuleSetsCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, ListManagedRuleSetsCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new ListManagedRuleSetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListManagedRuleSetsCommandInput} for command's `input` shape.
        * @see {@link ListManagedRuleSetsCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class ListManagedRuleSetsCommand extends $Command<ListManagedRuleSetsCommandInput, ListManagedRuleSetsCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: ListManagedRuleSetsCommandInput;
            constructor(input: ListManagedRuleSetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListManagedRuleSetsCommandInput, ListManagedRuleSetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListMobileSdkReleasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListMobileSdkReleasesRequest, ListMobileSdkReleasesResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface ListMobileSdkReleasesCommandInput extends ListMobileSdkReleasesRequest {
    }
    export interface ListMobileSdkReleasesCommandOutput extends ListMobileSdkReleasesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of the available releases for the mobile SDK and the specified device
        *          platform. </p>
        *          <p>The mobile SDK is not generally available. Customers who have access to the mobile SDK can use it to establish and manage Security Token Service (STS) security tokens for use in HTTP(S) requests from a mobile device to WAF. For more information, see
        * <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-application-integration.html">WAF client application integration</a> in the <i>WAF Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, ListMobileSdkReleasesCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, ListMobileSdkReleasesCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new ListMobileSdkReleasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMobileSdkReleasesCommandInput} for command's `input` shape.
        * @see {@link ListMobileSdkReleasesCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class ListMobileSdkReleasesCommand extends $Command<ListMobileSdkReleasesCommandInput, ListMobileSdkReleasesCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: ListMobileSdkReleasesCommandInput;
            constructor(input: ListMobileSdkReleasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMobileSdkReleasesCommandInput, ListMobileSdkReleasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListRegexPatternSetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListRegexPatternSetsRequest, ListRegexPatternSetsResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface ListRegexPatternSetsCommandInput extends ListRegexPatternSetsRequest {
    }
    export interface ListRegexPatternSetsCommandOutput extends ListRegexPatternSetsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves an array of <a>RegexPatternSetSummary</a> objects for the regex
        *          pattern sets that you manage.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, ListRegexPatternSetsCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, ListRegexPatternSetsCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new ListRegexPatternSetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRegexPatternSetsCommandInput} for command's `input` shape.
        * @see {@link ListRegexPatternSetsCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class ListRegexPatternSetsCommand extends $Command<ListRegexPatternSetsCommandInput, ListRegexPatternSetsCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: ListRegexPatternSetsCommandInput;
            constructor(input: ListRegexPatternSetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRegexPatternSetsCommandInput, ListRegexPatternSetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListResourcesForWebACLCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListResourcesForWebACLRequest, ListResourcesForWebACLResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface ListResourcesForWebACLCommandInput extends ListResourcesForWebACLRequest {
    }
    export interface ListResourcesForWebACLCommandOutput extends ListResourcesForWebACLResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves an array of the Amazon Resource Names (ARNs) for the regional resources that
        *          are associated with the specified web ACL. If you want the list of Amazon CloudFront resources, use
        *          the CloudFront call <code>ListDistributionsByWebACLId</code>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, ListResourcesForWebACLCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, ListResourcesForWebACLCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new ListResourcesForWebACLCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListResourcesForWebACLCommandInput} for command's `input` shape.
        * @see {@link ListResourcesForWebACLCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class ListResourcesForWebACLCommand extends $Command<ListResourcesForWebACLCommandInput, ListResourcesForWebACLCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: ListResourcesForWebACLCommandInput;
            constructor(input: ListResourcesForWebACLCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListResourcesForWebACLCommandInput, ListResourcesForWebACLCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListRuleGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListRuleGroupsRequest, ListRuleGroupsResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface ListRuleGroupsCommandInput extends ListRuleGroupsRequest {
    }
    export interface ListRuleGroupsCommandOutput extends ListRuleGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves an array of <a>RuleGroupSummary</a> objects for the rule groups
        *          that you manage. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, ListRuleGroupsCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, ListRuleGroupsCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new ListRuleGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRuleGroupsCommandInput} for command's `input` shape.
        * @see {@link ListRuleGroupsCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class ListRuleGroupsCommand extends $Command<ListRuleGroupsCommandInput, ListRuleGroupsCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: ListRuleGroupsCommandInput;
            constructor(input: ListRuleGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRuleGroupsCommandInput, ListRuleGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the <a>TagInfoForResource</a> for the specified resource. Tags are
        *          key:value pairs that you can use to categorize and manage your resources, for purposes like
        *          billing. For example, you might set the tag key to "customer" and the value to the customer
        *          name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags
        *          for a resource.</p>
        *          <p>You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule
        *          groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF
        *          console. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, ListTagsForResourceCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, ListTagsForResourceCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListWebACLsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListWebACLsRequest, ListWebACLsResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface ListWebACLsCommandInput extends ListWebACLsRequest {
    }
    export interface ListWebACLsCommandOutput extends ListWebACLsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves an array of <a>WebACLSummary</a> objects for the web ACLs that you
        *          manage.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, ListWebACLsCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, ListWebACLsCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new ListWebACLsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWebACLsCommandInput} for command's `input` shape.
        * @see {@link ListWebACLsCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class ListWebACLsCommand extends $Command<ListWebACLsCommandInput, ListWebACLsCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: ListWebACLsCommandInput;
            constructor(input: ListWebACLsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWebACLsCommandInput, ListWebACLsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/PutLoggingConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutLoggingConfigurationRequest, PutLoggingConfigurationResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface PutLoggingConfigurationCommandInput extends PutLoggingConfigurationRequest {
    }
    export interface PutLoggingConfigurationCommandOutput extends PutLoggingConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Enables the specified <a>LoggingConfiguration</a>, to start logging from a
        *          web ACL, according to the configuration provided. </p>
        *          <note>
        *             <p>You can define one logging destination per web ACL.</p>
        *          </note>
        *          <p>You can access information about the traffic that WAF inspects using the following
        *          steps:</p>
        *          <ol>
        *             <li>
        *                <p>Create your logging destination. You can use an Amazon CloudWatch Logs log group, an Amazon Simple Storage Service (Amazon S3) bucket, or an Amazon Kinesis Data Firehose.
        *                  For information about configuring logging destinations and the permissions that are required for each, see
        *                  <a href="https://docs.aws.amazon.com/waf/latest/developerguide/logging.html">Logging web ACL traffic information</a>
        *                  in the <i>WAF Developer Guide</i>.</p>
        *             </li>
        *             <li>
        *                <p>Associate your logging destination to your web ACL using a
        *                   <code>PutLoggingConfiguration</code> request.</p>
        *             </li>
        *          </ol>
        *          <p>When you successfully enable logging using a <code>PutLoggingConfiguration</code>
        *           request, WAF creates an additional role or policy that is required to write
        *               logs to the logging destination. For an Amazon CloudWatch Logs log group, WAF creates a resource policy on the log group.
        *           For an Amazon S3 bucket, WAF creates a bucket policy. For an Amazon Kinesis Data Firehose, WAF creates a service-linked role.</p>
        *          <p>For additional information about web ACL logging, see
        *            <a href="https://docs.aws.amazon.com/waf/latest/developerguide/logging.html">Logging web ACL traffic information</a>
        *                in the <i>WAF Developer Guide</i>.</p>
        *          <note>
        *             <p>This operation completely replaces the mutable specifications that you already have for the logging configuration with the ones that you provide to this call. To modify the logging configuration, retrieve it by calling <a>GetLoggingConfiguration</a>, update the settings as needed, and then provide the complete logging configuration specification to this call.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, PutLoggingConfigurationCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, PutLoggingConfigurationCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new PutLoggingConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutLoggingConfigurationCommandInput} for command's `input` shape.
        * @see {@link PutLoggingConfigurationCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class PutLoggingConfigurationCommand extends $Command<PutLoggingConfigurationCommandInput, PutLoggingConfigurationCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: PutLoggingConfigurationCommandInput;
            constructor(input: PutLoggingConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutLoggingConfigurationCommandInput, PutLoggingConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/PutManagedRuleSetVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutManagedRuleSetVersionsRequest, PutManagedRuleSetVersionsResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface PutManagedRuleSetVersionsCommandInput extends PutManagedRuleSetVersionsRequest {
    }
    export interface PutManagedRuleSetVersionsCommandOutput extends PutManagedRuleSetVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Defines the versions of your managed rule set that you are offering to the customers.
        *          Customers see your offerings as managed rule groups with versioning.</p>
        *          <note>
        *             <p>This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. </p>
        *             <p>Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are <code>ListManagedRuleSets</code>, <code>GetManagedRuleSet</code>, <code>PutManagedRuleSetVersions</code>, and <code>UpdateManagedRuleSetVersionExpiryDate</code>.</p>
        *          </note>
        *          <p>Customers retrieve their managed rule group list by calling <a>ListAvailableManagedRuleGroups</a>. The name that you provide here for your
        *          managed rule set is the name the customer sees for the corresponding managed rule group.
        *          Customers can retrieve the available versions for a managed rule group by calling <a>ListAvailableManagedRuleGroupVersions</a>. You provide a rule group
        *          specification for each version. For each managed rule set, you must specify a version that
        *          you recommend using. </p>
        *          <p>To initiate the expiration of a managed rule group version, use <a>UpdateManagedRuleSetVersionExpiryDate</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, PutManagedRuleSetVersionsCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, PutManagedRuleSetVersionsCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new PutManagedRuleSetVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutManagedRuleSetVersionsCommandInput} for command's `input` shape.
        * @see {@link PutManagedRuleSetVersionsCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class PutManagedRuleSetVersionsCommand extends $Command<PutManagedRuleSetVersionsCommandInput, PutManagedRuleSetVersionsCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: PutManagedRuleSetVersionsCommandInput;
            constructor(input: PutManagedRuleSetVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutManagedRuleSetVersionsCommandInput, PutManagedRuleSetVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/PutPermissionPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutPermissionPolicyRequest, PutPermissionPolicyResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface PutPermissionPolicyCommandInput extends PutPermissionPolicyRequest {
    }
    export interface PutPermissionPolicyCommandOutput extends PutPermissionPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Attaches an IAM policy to the specified resource. Use this to share a rule group across
        *          accounts.</p>
        *          <p>You must be the owner of the rule group to perform this operation.</p>
        *          <p>This action is subject to the following restrictions:</p>
        *          <ul>
        *             <li>
        *                <p>You can attach only one policy with each <code>PutPermissionPolicy</code>
        *                request.</p>
        *             </li>
        *             <li>
        *                <p>The ARN in the request must be a valid WAF <a>RuleGroup</a> ARN and the
        *                rule group must exist in the same Region.</p>
        *             </li>
        *             <li>
        *                <p>The user making the request must be the owner of the rule group.</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, PutPermissionPolicyCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, PutPermissionPolicyCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new PutPermissionPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutPermissionPolicyCommandInput} for command's `input` shape.
        * @see {@link PutPermissionPolicyCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class PutPermissionPolicyCommand extends $Command<PutPermissionPolicyCommandInput, PutPermissionPolicyCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: PutPermissionPolicyCommandInput;
            constructor(input: PutPermissionPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutPermissionPolicyCommandInput, PutPermissionPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Associates tags with the specified Amazon Web Services resource. Tags are key:value pairs that you can
        *          use to categorize and manage your resources, for purposes like billing. For example, you
        *          might set the tag key to "customer" and the value to the customer name or ID. You can
        *          specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a
        *          resource.</p>
        *          <p>You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule
        *          groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF
        *          console. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, TagResourceCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, TagResourceCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates tags from an Amazon Web Services resource. Tags are key:value pairs that you can
        *          associate with Amazon Web Services resources. For example, the tag key might be "customer" and the tag
        *          value might be "companyA." You can specify one or more tags to add to each container. You
        *          can add up to 50 tags to each Amazon Web Services resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, UntagResourceCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, UntagResourceCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateIPSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateIPSetRequest, UpdateIPSetResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface UpdateIPSetCommandInput extends UpdateIPSetRequest {
    }
    export interface UpdateIPSetCommandOutput extends UpdateIPSetResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified <a>IPSet</a>. </p>
        *          <note>
        *             <p>This operation completely replaces the mutable specifications that you already have for the IP set with the ones that you provide to this call. To modify the IP set, retrieve it by calling <a>GetIPSet</a>, update the settings as needed, and then provide the complete IP set specification to this call.</p>
        *          </note>
        *
        *          <p>When you make changes to web ACLs or web ACL components, like rules and rule groups, WAF propagates the changes everywhere that the web ACL and its components are stored and used. Your changes are applied within seconds, but there might be a brief period of inconsistency when the changes have arrived in some places and not in others. So, for example, if you change a rule action setting, the action might be the old action in one area and the new action in another area. Or if you add an IP address to an IP set used in a blocking rule, the new address might briefly be blocked in one area while still allowed in another. This temporary inconsistency can occur when you first associate a web ACL with an Amazon Web Services resource and when you change a web ACL that is already associated with a resource. Generally, any inconsistencies of this type last only a few seconds.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, UpdateIPSetCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, UpdateIPSetCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new UpdateIPSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateIPSetCommandInput} for command's `input` shape.
        * @see {@link UpdateIPSetCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class UpdateIPSetCommand extends $Command<UpdateIPSetCommandInput, UpdateIPSetCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: UpdateIPSetCommandInput;
            constructor(input: UpdateIPSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateIPSetCommandInput, UpdateIPSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateManagedRuleSetVersionExpiryDateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateManagedRuleSetVersionExpiryDateRequest, UpdateManagedRuleSetVersionExpiryDateResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface UpdateManagedRuleSetVersionExpiryDateCommandInput extends UpdateManagedRuleSetVersionExpiryDateRequest {
    }
    export interface UpdateManagedRuleSetVersionExpiryDateCommandOutput extends UpdateManagedRuleSetVersionExpiryDateResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the expiration information for your managed rule set. Use this to initiate the
        *          expiration of a managed rule group version. After you initiate expiration for a version,
        *          WAF excludes it from the response to <a>ListAvailableManagedRuleGroupVersions</a> for the managed rule group. </p>
        *          <note>
        *             <p>This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. </p>
        *             <p>Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are <code>ListManagedRuleSets</code>, <code>GetManagedRuleSet</code>, <code>PutManagedRuleSetVersions</code>, and <code>UpdateManagedRuleSetVersionExpiryDate</code>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, UpdateManagedRuleSetVersionExpiryDateCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, UpdateManagedRuleSetVersionExpiryDateCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new UpdateManagedRuleSetVersionExpiryDateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateManagedRuleSetVersionExpiryDateCommandInput} for command's `input` shape.
        * @see {@link UpdateManagedRuleSetVersionExpiryDateCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class UpdateManagedRuleSetVersionExpiryDateCommand extends $Command<UpdateManagedRuleSetVersionExpiryDateCommandInput, UpdateManagedRuleSetVersionExpiryDateCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: UpdateManagedRuleSetVersionExpiryDateCommandInput;
            constructor(input: UpdateManagedRuleSetVersionExpiryDateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateManagedRuleSetVersionExpiryDateCommandInput, UpdateManagedRuleSetVersionExpiryDateCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateRegexPatternSetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateRegexPatternSetRequest, UpdateRegexPatternSetResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface UpdateRegexPatternSetCommandInput extends UpdateRegexPatternSetRequest {
    }
    export interface UpdateRegexPatternSetCommandOutput extends UpdateRegexPatternSetResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified <a>RegexPatternSet</a>.</p>
        *          <note>
        *             <p>This operation completely replaces the mutable specifications that you already have for the regex pattern set with the ones that you provide to this call. To modify the regex pattern set, retrieve it by calling <a>GetRegexPatternSet</a>, update the settings as needed, and then provide the complete regex pattern set specification to this call.</p>
        *          </note>
        *
        *          <p>When you make changes to web ACLs or web ACL components, like rules and rule groups, WAF propagates the changes everywhere that the web ACL and its components are stored and used. Your changes are applied within seconds, but there might be a brief period of inconsistency when the changes have arrived in some places and not in others. So, for example, if you change a rule action setting, the action might be the old action in one area and the new action in another area. Or if you add an IP address to an IP set used in a blocking rule, the new address might briefly be blocked in one area while still allowed in another. This temporary inconsistency can occur when you first associate a web ACL with an Amazon Web Services resource and when you change a web ACL that is already associated with a resource. Generally, any inconsistencies of this type last only a few seconds.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, UpdateRegexPatternSetCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, UpdateRegexPatternSetCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new UpdateRegexPatternSetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRegexPatternSetCommandInput} for command's `input` shape.
        * @see {@link UpdateRegexPatternSetCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class UpdateRegexPatternSetCommand extends $Command<UpdateRegexPatternSetCommandInput, UpdateRegexPatternSetCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: UpdateRegexPatternSetCommandInput;
            constructor(input: UpdateRegexPatternSetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRegexPatternSetCommandInput, UpdateRegexPatternSetCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateRuleGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateRuleGroupRequest, UpdateRuleGroupResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface UpdateRuleGroupCommandInput extends UpdateRuleGroupRequest {
    }
    export interface UpdateRuleGroupCommandOutput extends UpdateRuleGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified <a>RuleGroup</a>.</p>
        *          <note>
        *             <p>This operation completely replaces the mutable specifications that you already have for the rule group with the ones that you provide to this call. To modify the rule group, retrieve it by calling <a>GetRuleGroup</a>, update the settings as needed, and then provide the complete rule group specification to this call.</p>
        *          </note>
        *
        *          <p>When you make changes to web ACLs or web ACL components, like rules and rule groups, WAF propagates the changes everywhere that the web ACL and its components are stored and used. Your changes are applied within seconds, but there might be a brief period of inconsistency when the changes have arrived in some places and not in others. So, for example, if you change a rule action setting, the action might be the old action in one area and the new action in another area. Or if you add an IP address to an IP set used in a blocking rule, the new address might briefly be blocked in one area while still allowed in another. This temporary inconsistency can occur when you first associate a web ACL with an Amazon Web Services resource and when you change a web ACL that is already associated with a resource. Generally, any inconsistencies of this type last only a few seconds.</p>
        *          <p> A rule group defines a collection of rules to inspect and control web requests that you can use in a <a>WebACL</a>. When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, UpdateRuleGroupCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, UpdateRuleGroupCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new UpdateRuleGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRuleGroupCommandInput} for command's `input` shape.
        * @see {@link UpdateRuleGroupCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class UpdateRuleGroupCommand extends $Command<UpdateRuleGroupCommandInput, UpdateRuleGroupCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: UpdateRuleGroupCommandInput;
            constructor(input: UpdateRuleGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRuleGroupCommandInput, UpdateRuleGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateWebACLCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateWebACLRequest, UpdateWebACLResponse } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client";
    export interface UpdateWebACLCommandInput extends UpdateWebACLRequest {
    }
    export interface UpdateWebACLCommandOutput extends UpdateWebACLResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified <a>WebACL</a>. While updating a web ACL, WAF provides
        *          continuous coverage to the resources that you have associated with the web ACL. </p>
        *
        *          <p>When you make changes to web ACLs or web ACL components, like rules and rule groups, WAF propagates the changes everywhere that the web ACL and its components are stored and used. Your changes are applied within seconds, but there might be a brief period of inconsistency when the changes have arrived in some places and not in others. So, for example, if you change a rule action setting, the action might be the old action in one area and the new action in another area. Or if you add an IP address to an IP set used in a blocking rule, the new address might briefly be blocked in one area while still allowed in another. This temporary inconsistency can occur when you first associate a web ACL with an Amazon Web Services resource and when you change a web ACL that is already associated with a resource. Generally, any inconsistencies of this type last only a few seconds.</p>
        *          <note>
        *             <p>This operation completely replaces the mutable specifications that you already have for the web ACL with the ones that you provide to this call. To modify the web ACL, retrieve it by calling <a>GetWebACL</a>, update the settings as needed, and then provide the complete web ACL specification to this call.</p>
        *          </note>
        *          <p> A web ACL defines a collection of rules to use to inspect and control web requests. Each rule has an action defined (allow, block, or count) for requests that match the statement of the rule. In the web ACL, you assign a default action to take (allow, block) for any request that does not match any of the rules. The rules in a web ACL can be a combination of the types <a>Rule</a>, <a>RuleGroup</a>, and managed rule group. You can associate a web ACL with one or more Amazon Web Services resources to protect. The resources can be an Amazon CloudFront distribution, an Amazon API Gateway REST API, an Application Load Balancer, or an AppSync GraphQL API.  </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { WAFV2Client, UpdateWebACLCommand } from "@aws-sdk/client-wafv2"; // ES Modules import
        * // const { WAFV2Client, UpdateWebACLCommand } = require("@aws-sdk/client-wafv2"); // CommonJS import
        * const client = new WAFV2Client(config);
        * const command = new UpdateWebACLCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateWebACLCommandInput} for command's `input` shape.
        * @see {@link UpdateWebACLCommandOutput} for command's `response` shape.
        * @see {@link WAFV2ClientResolvedConfig | config} for WAFV2Client's `config` shape.
        *
        */
    export class UpdateWebACLCommand extends $Command<UpdateWebACLCommandInput, UpdateWebACLCommandOutput, WAFV2ClientResolvedConfig> {
            readonly input: UpdateWebACLCommandInput;
            constructor(input: UpdateWebACLCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: WAFV2ClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateWebACLCommandInput, UpdateWebACLCommandOutput>;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/WAFV2Client' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateWebACLCommandInput, AssociateWebACLCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/AssociateWebACLCommand";
    import { CheckCapacityCommandInput, CheckCapacityCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CheckCapacityCommand";
    import { CreateIPSetCommandInput, CreateIPSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CreateIPSetCommand";
    import { CreateRegexPatternSetCommandInput, CreateRegexPatternSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CreateRegexPatternSetCommand";
    import { CreateRuleGroupCommandInput, CreateRuleGroupCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CreateRuleGroupCommand";
    import { CreateWebACLCommandInput, CreateWebACLCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/CreateWebACLCommand";
    import { DeleteFirewallManagerRuleGroupsCommandInput, DeleteFirewallManagerRuleGroupsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteFirewallManagerRuleGroupsCommand";
    import { DeleteIPSetCommandInput, DeleteIPSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteIPSetCommand";
    import { DeleteLoggingConfigurationCommandInput, DeleteLoggingConfigurationCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteLoggingConfigurationCommand";
    import { DeletePermissionPolicyCommandInput, DeletePermissionPolicyCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeletePermissionPolicyCommand";
    import { DeleteRegexPatternSetCommandInput, DeleteRegexPatternSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteRegexPatternSetCommand";
    import { DeleteRuleGroupCommandInput, DeleteRuleGroupCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteRuleGroupCommand";
    import { DeleteWebACLCommandInput, DeleteWebACLCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DeleteWebACLCommand";
    import { DescribeManagedRuleGroupCommandInput, DescribeManagedRuleGroupCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DescribeManagedRuleGroupCommand";
    import { DisassociateWebACLCommandInput, DisassociateWebACLCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/DisassociateWebACLCommand";
    import { GenerateMobileSdkReleaseUrlCommandInput, GenerateMobileSdkReleaseUrlCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GenerateMobileSdkReleaseUrlCommand";
    import { GetIPSetCommandInput, GetIPSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetIPSetCommand";
    import { GetLoggingConfigurationCommandInput, GetLoggingConfigurationCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetLoggingConfigurationCommand";
    import { GetManagedRuleSetCommandInput, GetManagedRuleSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetManagedRuleSetCommand";
    import { GetMobileSdkReleaseCommandInput, GetMobileSdkReleaseCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetMobileSdkReleaseCommand";
    import { GetPermissionPolicyCommandInput, GetPermissionPolicyCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetPermissionPolicyCommand";
    import { GetRateBasedStatementManagedKeysCommandInput, GetRateBasedStatementManagedKeysCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetRateBasedStatementManagedKeysCommand";
    import { GetRegexPatternSetCommandInput, GetRegexPatternSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetRegexPatternSetCommand";
    import { GetRuleGroupCommandInput, GetRuleGroupCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetRuleGroupCommand";
    import { GetSampledRequestsCommandInput, GetSampledRequestsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetSampledRequestsCommand";
    import { GetWebACLCommandInput, GetWebACLCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetWebACLCommand";
    import { GetWebACLForResourceCommandInput, GetWebACLForResourceCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/GetWebACLForResourceCommand";
    import { ListAvailableManagedRuleGroupsCommandInput, ListAvailableManagedRuleGroupsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListAvailableManagedRuleGroupsCommand";
    import { ListAvailableManagedRuleGroupVersionsCommandInput, ListAvailableManagedRuleGroupVersionsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListAvailableManagedRuleGroupVersionsCommand";
    import { ListIPSetsCommandInput, ListIPSetsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListIPSetsCommand";
    import { ListLoggingConfigurationsCommandInput, ListLoggingConfigurationsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListLoggingConfigurationsCommand";
    import { ListManagedRuleSetsCommandInput, ListManagedRuleSetsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListManagedRuleSetsCommand";
    import { ListMobileSdkReleasesCommandInput, ListMobileSdkReleasesCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListMobileSdkReleasesCommand";
    import { ListRegexPatternSetsCommandInput, ListRegexPatternSetsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListRegexPatternSetsCommand";
    import { ListResourcesForWebACLCommandInput, ListResourcesForWebACLCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListResourcesForWebACLCommand";
    import { ListRuleGroupsCommandInput, ListRuleGroupsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListRuleGroupsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListTagsForResourceCommand";
    import { ListWebACLsCommandInput, ListWebACLsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/ListWebACLsCommand";
    import { PutLoggingConfigurationCommandInput, PutLoggingConfigurationCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/PutLoggingConfigurationCommand";
    import { PutManagedRuleSetVersionsCommandInput, PutManagedRuleSetVersionsCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/PutManagedRuleSetVersionsCommand";
    import { PutPermissionPolicyCommandInput, PutPermissionPolicyCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/PutPermissionPolicyCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UntagResourceCommand";
    import { UpdateIPSetCommandInput, UpdateIPSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateIPSetCommand";
    import { UpdateManagedRuleSetVersionExpiryDateCommandInput, UpdateManagedRuleSetVersionExpiryDateCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateManagedRuleSetVersionExpiryDateCommand";
    import { UpdateRegexPatternSetCommandInput, UpdateRegexPatternSetCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateRegexPatternSetCommand";
    import { UpdateRuleGroupCommandInput, UpdateRuleGroupCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateRuleGroupCommand";
    import { UpdateWebACLCommandInput, UpdateWebACLCommandOutput } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/commands/UpdateWebACLCommand";
    export type ServiceInputTypes = AssociateWebACLCommandInput | CheckCapacityCommandInput | CreateIPSetCommandInput | CreateRegexPatternSetCommandInput | CreateRuleGroupCommandInput | CreateWebACLCommandInput | DeleteFirewallManagerRuleGroupsCommandInput | DeleteIPSetCommandInput | DeleteLoggingConfigurationCommandInput | DeletePermissionPolicyCommandInput | DeleteRegexPatternSetCommandInput | DeleteRuleGroupCommandInput | DeleteWebACLCommandInput | DescribeManagedRuleGroupCommandInput | DisassociateWebACLCommandInput | GenerateMobileSdkReleaseUrlCommandInput | GetIPSetCommandInput | GetLoggingConfigurationCommandInput | GetManagedRuleSetCommandInput | GetMobileSdkReleaseCommandInput | GetPermissionPolicyCommandInput | GetRateBasedStatementManagedKeysCommandInput | GetRegexPatternSetCommandInput | GetRuleGroupCommandInput | GetSampledRequestsCommandInput | GetWebACLCommandInput | GetWebACLForResourceCommandInput | ListAvailableManagedRuleGroupVersionsCommandInput | ListAvailableManagedRuleGroupsCommandInput | ListIPSetsCommandInput | ListLoggingConfigurationsCommandInput | ListManagedRuleSetsCommandInput | ListMobileSdkReleasesCommandInput | ListRegexPatternSetsCommandInput | ListResourcesForWebACLCommandInput | ListRuleGroupsCommandInput | ListTagsForResourceCommandInput | ListWebACLsCommandInput | PutLoggingConfigurationCommandInput | PutManagedRuleSetVersionsCommandInput | PutPermissionPolicyCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateIPSetCommandInput | UpdateManagedRuleSetVersionExpiryDateCommandInput | UpdateRegexPatternSetCommandInput | UpdateRuleGroupCommandInput | UpdateWebACLCommandInput;
    export type ServiceOutputTypes = AssociateWebACLCommandOutput | CheckCapacityCommandOutput | CreateIPSetCommandOutput | CreateRegexPatternSetCommandOutput | CreateRuleGroupCommandOutput | CreateWebACLCommandOutput | DeleteFirewallManagerRuleGroupsCommandOutput | DeleteIPSetCommandOutput | DeleteLoggingConfigurationCommandOutput | DeletePermissionPolicyCommandOutput | DeleteRegexPatternSetCommandOutput | DeleteRuleGroupCommandOutput | DeleteWebACLCommandOutput | DescribeManagedRuleGroupCommandOutput | DisassociateWebACLCommandOutput | GenerateMobileSdkReleaseUrlCommandOutput | GetIPSetCommandOutput | GetLoggingConfigurationCommandOutput | GetManagedRuleSetCommandOutput | GetMobileSdkReleaseCommandOutput | GetPermissionPolicyCommandOutput | GetRateBasedStatementManagedKeysCommandOutput | GetRegexPatternSetCommandOutput | GetRuleGroupCommandOutput | GetSampledRequestsCommandOutput | GetWebACLCommandOutput | GetWebACLForResourceCommandOutput | ListAvailableManagedRuleGroupVersionsCommandOutput | ListAvailableManagedRuleGroupsCommandOutput | ListIPSetsCommandOutput | ListLoggingConfigurationsCommandOutput | ListManagedRuleSetsCommandOutput | ListMobileSdkReleasesCommandOutput | ListRegexPatternSetsCommandOutput | ListResourcesForWebACLCommandOutput | ListRuleGroupsCommandOutput | ListTagsForResourceCommandOutput | ListWebACLsCommandOutput | PutLoggingConfigurationCommandOutput | PutManagedRuleSetVersionsCommandOutput | PutPermissionPolicyCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateIPSetCommandOutput | UpdateManagedRuleSetVersionExpiryDateCommandOutput | UpdateRegexPatternSetCommandOutput | UpdateRuleGroupCommandOutput | UpdateWebACLCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type WAFV2ClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of WAFV2Client class constructor that set the region, credentials and other options.
        */
    export interface WAFV2ClientConfig extends WAFV2ClientConfigType {
    }
    type WAFV2ClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of WAFV2Client class. This is resolved and normalized from the {@link WAFV2ClientConfig | constructor configuration interface}.
        */
    export interface WAFV2ClientResolvedConfig extends WAFV2ClientResolvedConfigType {
    }
    /**
        * <fullname>WAF</fullname>
        *          <note>
        *             <p>This is the latest version of the <b>WAF</b> API,
        *             released in November, 2019. The names of the entities that you use to access this API,
        *             like endpoints and namespaces, all have the versioning information added, like "V2" or
        *             "v2", to distinguish from the prior version. We recommend migrating your resources to
        *             this version, because it has a number of significant improvements.</p>
        *             <p>If you used WAF prior to this release, you can't use this WAFV2 API to access any
        *             WAF resources that you created before. You can access your old rules, web ACLs, and
        *             other WAF resources only through the WAF Classic APIs. The WAF Classic APIs
        *             have retained the prior names, endpoints, and namespaces. </p>
        *             <p>For information, including how to migrate your WAF resources to this version,
        *             see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
        *          </note>
        *          <p>WAF is a web application firewall that lets you monitor the HTTP and HTTPS
        *          requests that are forwarded to Amazon CloudFront, an Amazon API Gateway REST API, an Application Load Balancer, or an AppSync
        *          GraphQL API. WAF also lets you control access to your content. Based on criteria that
        *          you specify, such as the IP addresses that requests originate from or the values of query
        *          strings, the Amazon API Gateway REST API, CloudFront distribution, the Application Load Balancer, or the AppSync GraphQL
        *          API responds to requests either with the requested content or with an HTTP 403 status code
        *          (Forbidden). You also can configure CloudFront to return a custom error page when a request is
        *          blocked.</p>
        *          <p>This API guide is for developers who need detailed information about WAF API actions,
        *          data types, and errors. For detailed information about WAF features and an overview of
        *          how to use WAF, see the <a href="https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html">WAF Developer
        *          Guide</a>.</p>
        *          <p>You can make calls using the endpoints listed in <a href="https://docs.aws.amazon.com/general/latest/gr/waf.html">WAF endpoints and quotas</a>. </p>
        *          <ul>
        *             <li>
        *                <p>For regional applications, you can use any of the endpoints in the list.
        *                A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. </p>
        *             </li>
        *             <li>
        *                <p>For Amazon CloudFront applications, you must use the API endpoint listed for
        *                US East (N. Virginia): us-east-1.</p>
        *             </li>
        *          </ul>
        *          <p>Alternatively, you can use one of the Amazon Web Services SDKs to access an API that's tailored to the
        *          programming language or platform that you're using. For more information, see <a href="http://aws.amazon.com/tools/#SDKs">Amazon Web Services SDKs</a>.</p>
        *          <p>We currently provide two versions of the WAF API: this API and the prior versions,
        *          the classic WAF APIs. This new API provides the same functionality as the older versions,
        *          with the following major improvements:</p>
        *          <ul>
        *             <li>
        *                <p>You use one API for both global and regional applications. Where you need to
        *                distinguish the scope, you specify a <code>Scope</code> parameter and set it to
        *                   <code>CLOUDFRONT</code> or <code>REGIONAL</code>. </p>
        *             </li>
        *             <li>
        *                <p>You can define a web ACL or rule group with a single call, and update it with a
        *                single call. You define all rule specifications in JSON format, and pass them to your
        *                rule group or web ACL calls.</p>
        *             </li>
        *             <li>
        *                <p>The limits WAF places on the use of rules more closely reflects the cost of
        *                running each type of rule. Rule groups include capacity settings, so you know the
        *                maximum cost of a rule group when you use it.</p>
        *             </li>
        *          </ul>
        */
    export class WAFV2Client extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, WAFV2ClientResolvedConfig> {
            /**
                * The resolved configuration of WAFV2Client class. This is resolved and normalized from the {@link WAFV2ClientConfig | constructor configuration interface}.
                */
            readonly config: WAFV2ClientResolvedConfig;
            constructor(configuration: WAFV2ClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { WAFV2ServiceException as __BaseException } from "@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/WAFV2ServiceException";
    export enum ActionValue {
            ALLOW = "ALLOW",
            BLOCK = "BLOCK",
            CAPTCHA = "CAPTCHA",
            COUNT = "COUNT",
            EXCLUDED_AS_COUNT = "EXCLUDED_AS_COUNT"
    }
    /**
        * <p>A single action condition for a <a>Condition</a> in a logging filter.</p>
        */
    export interface ActionCondition {
            /**
                * <p>The action setting that a log record must contain in order to meet the condition.
                *       </p>
                */
            Action: ActionValue | string | undefined;
    }
    export namespace ActionCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionCondition) => any;
    }
    /**
        * <p>Inspect all of the elements that WAF has parsed and extracted from the web request
        *          component that you've identified in your <a>FieldToMatch</a> specifications. </p>
        *          <p>This is used only in the <a>FieldToMatch</a> specification for some web request component types. </p>
        *          <p>JSON specification: <code>"All": {}</code>
        *          </p>
        */
    export interface All {
    }
    export namespace All {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: All) => any;
    }
    /**
        * <p>A custom header for custom request and response handling. This is used in <a>CustomResponse</a> and <a>CustomRequestHandling</a>.</p>
        */
    export interface CustomHTTPHeader {
            /**
                * <p>The name of the custom header. </p>
                *          <p>For custom request header insertion, when WAF inserts the header into the request,
                *          it prefixes this name <code>x-amzn-waf-</code>, to avoid confusion with the headers that
                *          are already in the request. For example, for the header name <code>sample</code>, WAF
                *          inserts the header <code>x-amzn-waf-sample</code>.</p>
                */
            Name: string | undefined;
            /**
                * <p>The value of the custom header.</p>
                */
            Value: string | undefined;
    }
    export namespace CustomHTTPHeader {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomHTTPHeader) => any;
    }
    /**
        * <p>Custom request handling behavior that inserts custom headers into a web request. You can
        *          add custom request handling for the rule actions allow and count. </p>
        *          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the
        *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
        */
    export interface CustomRequestHandling {
            /**
                * <p>The HTTP headers to insert into the request. Duplicate header names are not allowed. </p>
                *          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                */
            InsertHeaders: CustomHTTPHeader[] | undefined;
    }
    export namespace CustomRequestHandling {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomRequestHandling) => any;
    }
    /**
        * <p>Specifies that WAF should allow the request and optionally defines additional
        *          custom handling for the request.</p>
        *          <p>This is used in the context of other settings, for example to specify values for <a>RuleAction</a> and web ACL <a>DefaultAction</a>. </p>
        */
    export interface AllowAction {
            /**
                * <p>Defines custom handling for the web request.</p>
                *          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                */
            CustomRequestHandling?: CustomRequestHandling;
    }
    export namespace AllowAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AllowAction) => any;
    }
    /**
        * <p>Inspect all query arguments of the web request. </p>
        *          <p>This is used only in the <a>FieldToMatch</a> specification for some web request component types. </p>
        *          <p>JSON specification: <code>"AllQueryArguments": {}</code>
        *          </p>
        */
    export interface AllQueryArguments {
    }
    export namespace AllQueryArguments {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AllQueryArguments) => any;
    }
    export enum OversizeHandling {
            CONTINUE = "CONTINUE",
            MATCH = "MATCH",
            NO_MATCH = "NO_MATCH"
    }
    /**
        * <p>Inspect the body of the web request. The body immediately follows the request
        *          headers.</p>
        *          <p>This is used to indicate the web request component to inspect, in the <a>FieldToMatch</a> specification. </p>
        */
    export interface Body {
            /**
                * <p>What WAF should do if the body is larger than WAF can inspect.
                *     WAF does not support inspecting the entire contents of the body of a web request
                *       when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to
                *     WAF by the underlying host service. </p>
                *          <p>The options for oversize handling are the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>CONTINUE</code> - Inspect the body normally, according to the rule inspection criteria. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MATCH</code> - Treat the web request as matching the rule statement. WAF
                *                applies the rule action to the request.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NO_MATCH</code> - Treat the web request as not matching the rule
                *                statement.</p>
                *             </li>
                *          </ul>
                *          <p>You can combine the <code>MATCH</code> or <code>NO_MATCH</code>
                *       settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over 8 KB. </p>
                *          <p>Default: <code>CONTINUE</code>
                *          </p>
                */
            OversizeHandling?: OversizeHandling | string;
    }
    export namespace Body {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Body) => any;
    }
    /**
        * <p>The filter to use to identify the subset of cookies to inspect in a web request. </p>
        *          <p>You must specify exactly one setting: either <code>All</code>, <code>IncludedCookies</code>, or <code>ExcludedCookies</code>.</p>
        *          <p>Example JSON: <code>"MatchPattern": { "IncludedCookies": {"KeyToInclude1", "KeyToInclude2", "KeyToInclude3"} }</code>
        *          </p>
        */
    export interface CookieMatchPattern {
            /**
                * <p>Inspect all cookies. </p>
                */
            All?: All;
            /**
                * <p>Inspect only the cookies that have a key that matches one of the strings specified here.
                *       </p>
                */
            IncludedCookies?: string[];
            /**
                * <p>Inspect only the cookies whose keys don't match any of the strings specified here.
                *       </p>
                */
            ExcludedCookies?: string[];
    }
    export namespace CookieMatchPattern {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CookieMatchPattern) => any;
    }
    export enum MapMatchScope {
            ALL = "ALL",
            KEY = "KEY",
            VALUE = "VALUE"
    }
    /**
        * <p>Inspect the cookies in the web request. You can specify the parts of the cookies to
        *          inspect and you can narrow the set of cookies to inspect by including or excluding specific
        *          keys.</p>
        *          <p>This is used to indicate the web request component to inspect, in the <a>FieldToMatch</a> specification. </p>
        *          <p>Example JSON: <code>"Cookies": { "MatchPattern": { "All": {} }, "MatchScope": "KEY",
        *             "OversizeHandling": "MATCH" }</code>
        *          </p>
        */
    export interface Cookies {
            /**
                * <p>The filter to use to identify the subset of cookies to inspect in a web request. </p>
                *          <p>You must specify exactly one setting: either <code>All</code>, <code>IncludedCookies</code>, or <code>ExcludedCookies</code>.</p>
                *          <p>Example JSON: <code>"MatchPattern": { "IncludedCookies": {"KeyToInclude1", "KeyToInclude2", "KeyToInclude3"} }</code>
                *          </p>
                */
            MatchPattern: CookieMatchPattern | undefined;
            /**
                * <p>The parts of the cookies to inspect with the rule inspection criteria. If you specify
                *             <code>All</code>, WAF inspects both keys and values. </p>
                */
            MatchScope: MapMatchScope | string | undefined;
            /**
                * <p>What WAF should do if the cookies of the request are larger than WAF can inspect.
                *     WAF does not support inspecting the entire contents of request cookies
                *       when they exceed 8 KB (8192 bytes) or 200 total cookies. The underlying host service forwards a maximum of 200 cookies
                *       and at most 8 KB of cookie contents to WAF. </p>
                *          <p>The options for oversize handling are the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>CONTINUE</code> - Inspect the cookies normally, according to the rule inspection criteria. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MATCH</code> - Treat the web request as matching the rule statement. WAF
                *                applies the rule action to the request.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NO_MATCH</code> - Treat the web request as not matching the rule
                *                statement.</p>
                *             </li>
                *          </ul>
                */
            OversizeHandling: OversizeHandling | string | undefined;
    }
    export namespace Cookies {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Cookies) => any;
    }
    /**
        * <p>The filter to use to identify the subset of headers to inspect in a web request. </p>
        *          <p>You must specify exactly one setting: either <code>All</code>, <code>IncludedHeaders</code>, or <code>ExcludedHeaders</code>.</p>
        *          <p>Example JSON: <code>"MatchPattern": { "ExcludedHeaders": {"KeyToExclude1", "KeyToExclude2"} }</code>
        *          </p>
        */
    export interface HeaderMatchPattern {
            /**
                * <p>Inspect all headers. </p>
                */
            All?: All;
            /**
                * <p>Inspect only the headers that have a key that matches one of the strings specified here.
                *       </p>
                */
            IncludedHeaders?: string[];
            /**
                * <p>Inspect only the headers whose keys don't match any of the strings specified here.
                *       </p>
                */
            ExcludedHeaders?: string[];
    }
    export namespace HeaderMatchPattern {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HeaderMatchPattern) => any;
    }
    /**
        * <p>Inspect all headers in the web request. You can specify the parts of the headers to
        *          inspect and you can narrow the set of headers to inspect by including or excluding specific
        *          keys.</p>
        *          <p>This is used to indicate the web request component to inspect, in the <a>FieldToMatch</a> specification. </p>
        *          <p>If you want to inspect just the value of a single header, use the
        *             <code>SingleHeader</code>
        *             <code>FieldToMatch</code> setting instead.</p>
        *          <p>Example JSON: <code>"Headers": { "MatchPattern": { "All": {} }, "MatchScope": "KEY",
        *             "OversizeHandling": "MATCH" }</code>
        *          </p>
        */
    export interface Headers {
            /**
                * <p>The filter to use to identify the subset of headers to inspect in a web request. </p>
                *          <p>You must specify exactly one setting: either <code>All</code>, <code>IncludedHeaders</code>, or <code>ExcludedHeaders</code>.</p>
                *          <p>Example JSON: <code>"MatchPattern": { "ExcludedHeaders": {"KeyToExclude1", "KeyToExclude2"} }</code>
                *          </p>
                */
            MatchPattern: HeaderMatchPattern | undefined;
            /**
                * <p>The parts of the headers to match with the rule inspection criteria. If you specify
                *             <code>All</code>, WAF inspects both keys and values. </p>
                */
            MatchScope: MapMatchScope | string | undefined;
            /**
                * <p>What WAF should do if the headers of the request are larger than WAF can inspect.
                *     WAF does not support inspecting the entire contents of request headers
                *       when they exceed 8 KB (8192 bytes) or 200 total headers. The underlying host service forwards a maximum of 200 headers
                *       and at most 8 KB of header contents to WAF. </p>
                *          <p>The options for oversize handling are the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>CONTINUE</code> - Inspect the headers normally, according to the rule inspection criteria. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MATCH</code> - Treat the web request as matching the rule statement. WAF
                *                applies the rule action to the request.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NO_MATCH</code> - Treat the web request as not matching the rule
                *                statement.</p>
                *             </li>
                *          </ul>
                */
            OversizeHandling: OversizeHandling | string | undefined;
    }
    export namespace Headers {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Headers) => any;
    }
    export enum BodyParsingFallbackBehavior {
            EVALUATE_AS_STRING = "EVALUATE_AS_STRING",
            MATCH = "MATCH",
            NO_MATCH = "NO_MATCH"
    }
    /**
        * <p>The patterns to look for in the JSON body. WAF inspects the results of these
        *          pattern matches against the rule inspection criteria. This is used with the <a>FieldToMatch</a> option <code>JsonBody</code>. </p>
        */
    export interface JsonMatchPattern {
            /**
                * <p>Match all of the elements. See also
                *             <code>MatchScope</code>
                *          in <a>JsonBody</a>. </p>
                *          <p>You must specify either this setting or the <code>IncludedPaths</code> setting, but not
                *          both.</p>
                */
            All?: All;
            /**
                * <p>Match only the specified include paths. See also
                *             <code>MatchScope</code>
                *          in <a>JsonBody</a>. </p>
                *          <p>Provide the include paths using JSON Pointer syntax. For example, <code>"IncludedPaths":
                *             ["/dogs/0/name", "/dogs/1/name"]</code>. For information about this syntax, see the
                *          Internet Engineering Task Force (IETF) documentation <a href="https://tools.ietf.org/html/rfc6901">JavaScript Object Notation (JSON)
                *             Pointer</a>. </p>
                *          <p>You must specify either this setting or the <code>All</code> setting, but not
                *          both.</p>
                *          <note>
                *             <p>Don't use this option to include all paths. Instead, use the <code>All</code>
                *             setting. </p>
                *          </note>
                */
            IncludedPaths?: string[];
    }
    export namespace JsonMatchPattern {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JsonMatchPattern) => any;
    }
    export enum JsonMatchScope {
            ALL = "ALL",
            KEY = "KEY",
            VALUE = "VALUE"
    }
    /**
        * <p>Inspect the body of the web request as JSON. The body immediately follows the request
        *          headers. </p>
        *          <p>This is used to indicate the web request component to inspect, in the <a>FieldToMatch</a> specification. </p>
        *          <p>Use the specifications in this object to indicate which parts of the JSON body to
        *          inspect using the rule's inspection criteria. WAF inspects only the parts of the JSON
        *          that result from the matches that you indicate.
        *       </p>
        *          <p>Example JSON: <code>"JsonBody": { "MatchPattern": { "All": {} }, "MatchScope": "ALL"
        *             }</code>
        *          </p>
        */
    export interface JsonBody {
            /**
                * <p>The patterns to look for in the JSON body. WAF inspects the results of these
                *          pattern matches against the rule inspection criteria. </p>
                */
            MatchPattern: JsonMatchPattern | undefined;
            /**
                * <p>The parts of the JSON to match against using the <code>MatchPattern</code>. If you
                *          specify <code>All</code>, WAF matches against keys and values. </p>
                */
            MatchScope: JsonMatchScope | string | undefined;
            /**
                * <p>What WAF should do if it fails to completely parse the JSON body. The options are
                *          the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>EVALUATE_AS_STRING</code> - Inspect the body as plain text. WAF
                *                applies the text transformations and inspection criteria that you defined for the
                *                JSON inspection to the body text string.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MATCH</code> - Treat the web request as matching the rule statement.
                *                WAF applies the rule action to the request.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NO_MATCH</code> - Treat the web request as not matching the rule
                *                statement.</p>
                *             </li>
                *          </ul>
                *          <p>If you don't provide this setting, WAF parses and evaluates the content only up to the
                *          first parsing failure that it encounters. </p>
                *          <p>WAF does its best to parse the entire JSON body, but might be forced to stop for
                *          reasons such as invalid characters, duplicate keys, truncation, and any content whose root
                *          node isn't an object or an array. </p>
                *          <p>WAF parses the JSON in the following examples as two valid key, value pairs: </p>
                *          <ul>
                *             <li>
                *                <p>Missing comma: <code>{"key1":"value1""key2":"value2"}</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Missing colon: <code>{"key1":"value1","key2""value2"}</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Extra colons: <code>{"key1"::"value1","key2""value2"}</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            InvalidFallbackBehavior?: BodyParsingFallbackBehavior | string;
            /**
                * <p>What WAF should do if the body is larger than WAF can inspect.
                *     WAF does not support inspecting the entire contents of the body of a web request
                *       when the body exceeds 8 KB (8192 bytes). Only the first 8 KB of the request body are forwarded to
                *     WAF by the underlying host service. </p>
                *          <p>The options for oversize handling are the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>CONTINUE</code> - Inspect the body normally, according to the rule inspection criteria. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MATCH</code> - Treat the web request as matching the rule statement. WAF
                *                applies the rule action to the request.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NO_MATCH</code> - Treat the web request as not matching the rule
                *                statement.</p>
                *             </li>
                *          </ul>
                *          <p>You can combine the <code>MATCH</code> or <code>NO_MATCH</code>
                *       settings for oversize handling with your rule and web ACL action settings, so that you block any request whose body is over 8 KB. </p>
                *          <p>Default: <code>CONTINUE</code>
                *          </p>
                */
            OversizeHandling?: OversizeHandling | string;
    }
    export namespace JsonBody {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JsonBody) => any;
    }
    /**
        * <p>Inspect the HTTP method of the web request. The method indicates the type of operation
        *          that the request is asking the origin to perform. </p>
        *          <p>This is used only in the <a>FieldToMatch</a> specification for some web request component types. </p>
        *          <p>JSON specification: <code>"Method": {}</code>
        *          </p>
        */
    export interface Method {
    }
    export namespace Method {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Method) => any;
    }
    /**
        * <p>Inspect the query string of the web request. This is the part of a URL that appears
        *          after a <code>?</code> character, if any.</p>
        *          <p>This is used only in the <a>FieldToMatch</a> specification for some web request component types. </p>
        *          <p>JSON specification: <code>"QueryString": {}</code>
        *          </p>
        */
    export interface QueryString {
    }
    export namespace QueryString {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryString) => any;
    }
    /**
        * <p>Inspect one of the headers in the web request, identified by name, for example,
        *             <code>User-Agent</code> or <code>Referer</code>. The name isn't case sensitive.</p>
        *          <p>You can filter and inspect all headers with the <code>FieldToMatch</code> setting
        *             <code>Headers</code>.</p>
        *          <p>This is used to indicate the web request component to inspect, in the <a>FieldToMatch</a> specification. </p>
        *          <p>Example JSON: <code>"SingleHeader": { "Name": "haystack" }</code>
        *          </p>
        */
    export interface SingleHeader {
            /**
                * <p>The name of the query header to inspect.</p>
                */
            Name: string | undefined;
    }
    export namespace SingleHeader {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SingleHeader) => any;
    }
    /**
        * <p>Inspect one query argument in the web request, identified by name, for example
        *             <i>UserName</i> or <i>SalesRegion</i>. The name isn't case
        *          sensitive. </p>
        *          <p>This is used to indicate the web request component to inspect, in the <a>FieldToMatch</a> specification. </p>
        *          <p>Example JSON: <code>"SingleQueryArgument": { "Name": "myArgument" }</code>
        *          </p>
        */
    export interface SingleQueryArgument {
            /**
                * <p>The name of the query argument to inspect.</p>
                */
            Name: string | undefined;
    }
    export namespace SingleQueryArgument {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SingleQueryArgument) => any;
    }
    /**
        * <p>Inspect the path component of the URI of the web request. This is the part of the web
        *          request that identifies a resource. For example, <code>/images/daily-ad.jpg</code>.</p>
        *          <p>This is used only in the <a>FieldToMatch</a> specification for some web request component types. </p>
        *          <p>JSON specification: <code>"UriPath": {}</code>
        *          </p>
        */
    export interface UriPath {
    }
    export namespace UriPath {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UriPath) => any;
    }
    /**
        * <p>The part of the web request that you want WAF to inspect. Include the single
        *             <code>FieldToMatch</code> type that you want to inspect, with additional specifications
        *          as needed, according to the type. You specify a single request component in
        *             <code>FieldToMatch</code> for each rule statement that requires it. To inspect more than
        *          one component of the web request, create a separate rule statement for each
        *          component.</p>
        *          <p>Example JSON for a <code>QueryString</code> field to match: </p>
        *          <p>
        *             <code> "FieldToMatch": { "QueryString": {} }</code>
        *          </p>
        *          <p>Example JSON for a <code>Method</code> field to match specification:</p>
        *          <p>
        *             <code> "FieldToMatch": { "Method": { "Name": "DELETE" } }</code>
        *          </p>
        */
    export interface FieldToMatch {
            /**
                * <p>Inspect a single header. Provide the name of the header to inspect, for example,
                *             <code>User-Agent</code> or <code>Referer</code>. This setting isn't case
                *          sensitive.</p>
                *          <p>Example JSON: <code>"SingleHeader": { "Name": "haystack" }</code>
                *          </p>
                *          <p>Alternately, you can filter and inspect all headers with the <code>Headers</code>
                *             <code>FieldToMatch</code> setting. </p>
                */
            SingleHeader?: SingleHeader;
            /**
                * <p>Inspect a single query argument. Provide the name of the query argument to inspect, such
                *          as <i>UserName</i> or <i>SalesRegion</i>. The name can be up to
                *          30 characters long and isn't case sensitive. </p>
                *          <p>Example JSON: <code>"SingleQueryArgument": { "Name": "myArgument" }</code>
                *          </p>
                */
            SingleQueryArgument?: SingleQueryArgument;
            /**
                * <p>Inspect all query arguments. </p>
                */
            AllQueryArguments?: AllQueryArguments;
            /**
                * <p>Inspect the request URI path. This is the part of the web request that identifies a
                *          resource, for example, <code>/images/daily-ad.jpg</code>.</p>
                */
            UriPath?: UriPath;
            /**
                * <p>Inspect the query string. This is the part of a URL that appears after a <code>?</code>
                *          character, if any.</p>
                */
            QueryString?: QueryString;
            /**
                * <p>Inspect the request body as plain text. The request body immediately follows the request
                *          headers. This is the part of a request that contains any additional data that you want to
                *          send to your web server as the HTTP request body, such as data from a form. </p>
                *          <p>Only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for
                *          inspection by the underlying host service. For information about how to handle oversized
                *          request bodies, see the <code>Body</code> object configuration. </p>
                */
            Body?: Body;
            /**
                * <p>Inspect the HTTP method. The method indicates the type of operation that the request is
                *          asking the origin to perform. </p>
                */
            Method?: Method;
            /**
                * <p>Inspect the request body as JSON. The request body immediately follows the request
                *          headers. This is the part of a request that contains any additional data that you want to
                *          send to your web server as the HTTP request body, such as data from a form. </p>
                *          <p>Only the first 8 KB (8192 bytes) of the request body are forwarded to WAF for
                *          inspection by the underlying host service. For information about how to handle oversized
                *          request bodies, see the <code>JsonBody</code> object configuration. </p>
                */
            JsonBody?: JsonBody;
            /**
                * <p>Inspect the request headers. You must configure scope and pattern matching filters in
                *          the <code>Headers</code> object, to define the set of headers to and the parts of the
                *          headers that WAF inspects. </p>
                *          <p>Only the first 8 KB (8192 bytes) of a request's headers and only the first 200 headers
                *          are forwarded to WAF for inspection by the underlying host service. You must
                *          configure how to handle any oversize header content in the <code>Headers</code> object.
                *          WAF applies the pattern matching filters to the headers that it receives from the
                *          underlying host service. </p>
                */
            Headers?: Headers;
            /**
                * <p>Inspect the request cookies. You must configure scope and pattern matching filters in
                *          the <code>Cookies</code> object, to define the set of cookies and the parts of the cookies
                *          that WAF inspects. </p>
                *          <p>Only the first 8 KB (8192 bytes) of a request's cookies and only the first 200 cookies
                *          are forwarded to WAF for inspection by the underlying host service. You must
                *          configure how to handle any oversize cookie content in the <code>Cookies</code> object.
                *          WAF applies the pattern matching filters to the cookies that it receives from the
                *          underlying host service. </p>
                */
            Cookies?: Cookies;
    }
    export namespace FieldToMatch {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FieldToMatch) => any;
    }
    export enum PositionalConstraint {
            CONTAINS = "CONTAINS",
            CONTAINS_WORD = "CONTAINS_WORD",
            ENDS_WITH = "ENDS_WITH",
            EXACTLY = "EXACTLY",
            STARTS_WITH = "STARTS_WITH"
    }
    export enum TextTransformationType {
            BASE64_DECODE = "BASE64_DECODE",
            BASE64_DECODE_EXT = "BASE64_DECODE_EXT",
            CMD_LINE = "CMD_LINE",
            COMPRESS_WHITE_SPACE = "COMPRESS_WHITE_SPACE",
            CSS_DECODE = "CSS_DECODE",
            ESCAPE_SEQ_DECODE = "ESCAPE_SEQ_DECODE",
            HEX_DECODE = "HEX_DECODE",
            HTML_ENTITY_DECODE = "HTML_ENTITY_DECODE",
            JS_DECODE = "JS_DECODE",
            LOWERCASE = "LOWERCASE",
            MD5 = "MD5",
            NONE = "NONE",
            NORMALIZE_PATH = "NORMALIZE_PATH",
            NORMALIZE_PATH_WIN = "NORMALIZE_PATH_WIN",
            REMOVE_NULLS = "REMOVE_NULLS",
            REPLACE_COMMENTS = "REPLACE_COMMENTS",
            REPLACE_NULLS = "REPLACE_NULLS",
            SQL_HEX_DECODE = "SQL_HEX_DECODE",
            URL_DECODE = "URL_DECODE",
            URL_DECODE_UNI = "URL_DECODE_UNI",
            UTF8_TO_UNICODE = "UTF8_TO_UNICODE"
    }
    /**
        * <p>Text transformations eliminate some of the unusual formatting that attackers use in web
        *          requests in an effort to bypass detection. </p>
        */
    export interface TextTransformation {
            /**
                * <p>Sets the relative processing order for multiple transformations that are defined for a
                *          rule statement. WAF processes all transformations, from lowest priority to highest,
                *          before inspecting the transformed content. The priorities don't need to be consecutive, but
                *          they must all be different. </p>
                */
            Priority: number | undefined;
            /**
                * <p>You can specify the following transformation types:</p>
                *          <p>
                *             <b>BASE64_DECODE</b> - Decode a
                *          <code>Base64</code>-encoded string.</p>
                *          <p>
                *             <b>BASE64_DECODE_EXT</b> - Decode a
                *          <code>Base64</code>-encoded string, but use a forgiving implementation that ignores
                *          characters that aren't valid.</p>
                *          <p>
                *             <b>CMD_LINE</b> - Command-line transformations. These are
                *          helpful in reducing effectiveness of attackers who inject an operating system command-line
                *          command and use unusual formatting to disguise some or all of the command. </p>
                *          <ul>
                *             <li>
                *                <p>Delete the following characters: <code>\ " ' ^</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Delete spaces before the following characters: <code>/ (</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Replace the following characters with a space: <code>, ;</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Replace multiple spaces with one space</p>
                *             </li>
                *             <li>
                *                <p>Convert uppercase letters (A-Z) to lowercase (a-z)</p>
                *             </li>
                *          </ul>
                *          <p>
                *             <b>COMPRESS_WHITE_SPACE</b> - Replace these characters
                *          with a space character (decimal 32): </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>\f</code>, formfeed, decimal 12</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>\t</code>, tab, decimal 9</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>\n</code>, newline, decimal 10</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>\r</code>, carriage return, decimal 13</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>\v</code>, vertical tab, decimal 11</p>
                *             </li>
                *             <li>
                *                <p>Non-breaking space, decimal 160</p>
                *             </li>
                *          </ul>
                *          <p>
                *             <code>COMPRESS_WHITE_SPACE</code> also replaces multiple spaces with one space.</p>
                *          <p>
                *             <b>CSS_DECODE</b> - Decode characters that were encoded
                *          using CSS 2.x escape rules <code>syndata.html#characters</code>. This function uses up to
                *          two bytes in the decoding process, so it can help to uncover ASCII characters that were
                *          encoded using CSS encoding that wouldn’t typically be encoded. It's also useful in
                *          countering evasion, which is a combination of a backslash and non-hexadecimal characters.
                *          For example, <code>ja\vascript</code> for javascript. </p>
                *          <p>
                *             <b>ESCAPE_SEQ_DECODE</b> - Decode the following ANSI C
                *          escape sequences: <code>\a</code>, <code>\b</code>, <code>\f</code>, <code>\n</code>,
                *             <code>\r</code>, <code>\t</code>, <code>\v</code>, <code>\\</code>, <code>\?</code>,
                *             <code>\'</code>, <code>\"</code>, <code>\xHH</code> (hexadecimal), <code>\0OOO</code>
                *          (octal). Encodings that aren't valid remain in the output. </p>
                *          <p>
                *             <b>HEX_DECODE</b> - Decode a string of hexadecimal
                *          characters into a binary.</p>
                *          <p>
                *             <b>HTML_ENTITY_DECODE</b> - Replace HTML-encoded
                *          characters with unencoded characters. <code>HTML_ENTITY_DECODE</code> performs these
                *          operations: </p>
                *          <ul>
                *             <li>
                *                <p>Replaces <code>(ampersand)quot;</code> with <code>"</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Replaces <code>(ampersand)nbsp;</code> with a non-breaking space, decimal
                *                160</p>
                *             </li>
                *             <li>
                *                <p>Replaces <code>(ampersand)lt;</code> with a "less than" symbol</p>
                *             </li>
                *             <li>
                *                <p>Replaces <code>(ampersand)gt;</code> with <code>></code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Replaces characters that are represented in hexadecimal format,
                *                   <code>(ampersand)#xhhhh;</code>, with the corresponding characters</p>
                *             </li>
                *             <li>
                *                <p>Replaces characters that are represented in decimal format,
                *                   <code>(ampersand)#nnnn;</code>, with the corresponding characters</p>
                *             </li>
                *          </ul>
                *          <p>
                *             <b>JS_DECODE</b> - Decode JavaScript escape sequences. If
                *          a
                *          <code>\</code>
                *             <code>u</code>
                *             <code>HHHH</code>
                *          code is in the full-width ASCII code range of <code>FF01-FF5E</code>, then the higher byte
                *          is used to detect and adjust the lower byte. If not, only the lower byte is used and the
                *          higher byte is zeroed, causing a possible loss of information. </p>
                *          <p>
                *             <b>LOWERCASE</b> - Convert uppercase letters (A-Z) to
                *          lowercase (a-z). </p>
                *          <p>
                *             <b>MD5</b> - Calculate an MD5 hash from the data in the
                *          input. The computed hash is in a raw binary form. </p>
                *          <p>
                *             <b>NONE</b> - Specify <code>NONE</code> if you don't want
                *          any text transformations. </p>
                *          <p>
                *             <b>NORMALIZE_PATH</b> - Remove multiple slashes, directory
                *          self-references, and directory back-references that are not at the beginning of the input
                *          from an input string. </p>
                *          <p>
                *             <b>NORMALIZE_PATH_WIN</b> - This is the same as
                *             <code>NORMALIZE_PATH</code>, but first converts backslash characters to forward slashes. </p>
                *          <p>
                *             <b>REMOVE_NULLS</b> - Remove all <code>NULL</code> bytes
                *          from the input. </p>
                *          <p>
                *             <b>REPLACE_COMMENTS</b> - Replace each occurrence of a
                *          C-style comment (<code>/* ... *\/</code>) with a single space. Multiple consecutive
                *          occurrences are not compressed. Unterminated comments are also replaced with a space (ASCII
                *          0x20). However, a standalone termination of a comment (<code>*\/</code>) is not acted upon. </p>
                *          <p>
                *             <b>REPLACE_NULLS</b> - Replace NULL bytes in the input
                *          with space characters (ASCII <code>0x20</code>). </p>
                *          <p>
                *             <b>SQL_HEX_DECODE</b> - Decode SQL hex data. Example
                *             (<code>0x414243</code>) will be decoded to (<code>ABC</code>).</p>
                *          <p>
                *             <b>URL_DECODE</b> - Decode a URL-encoded value. </p>
                *          <p>
                *             <b>URL_DECODE_UNI</b> - Like <code>URL_DECODE</code>, but
                *          with support for Microsoft-specific <code>%u</code> encoding. If the code is in the
                *          full-width ASCII code range of <code>FF01-FF5E</code>, the higher byte is used to detect
                *          and adjust the lower byte. Otherwise, only the lower byte is used and the higher byte is
                *          zeroed. </p>
                *          <p>
                *             <b>UTF8_TO_UNICODE</b> - Convert all UTF-8 character
                *          sequences to Unicode. This helps input normalization, and minimizing false-positives and
                *          false-negatives for non-English languages.</p>
                */
            Type: TextTransformationType | string | undefined;
    }
    export namespace TextTransformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TextTransformation) => any;
    }
    /**
        * <p>A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is called a string match statement.</p>
        */
    export interface ByteMatchStatement {
            /**
                * <p>A string value that you want WAF to search for. WAF searches only in the part of
                *          web requests that you designate for inspection in <a>FieldToMatch</a>. The
                *          maximum length of the value is 50 bytes.</p>
                *          <p>Valid values depend on the component that you specify for inspection in
                *             <code>FieldToMatch</code>:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Method</code>: The HTTP method that you want WAF to search for. This
                *                indicates the type of operation specified in the request. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UriPath</code>: The value that you want WAF to search for in the URI path,
                *                for example, <code>/images/daily-ad.jpg</code>. </p>
                *             </li>
                *          </ul>
                *          <p>If <code>SearchString</code> includes alphabetic characters A-Z and a-z, note that the
                *          value is case sensitive.</p>
                *          <p>
                *             <b>If you're using the WAF API</b>
                *          </p>
                *          <p>Specify a base64-encoded version of the value. The maximum length of the value before
                *          you base64-encode it is 50 bytes.</p>
                *          <p>For example, suppose the value of <code>Type</code> is <code>HEADER</code> and the value
                *          of <code>Data</code> is <code>User-Agent</code>. If you want to search the
                *             <code>User-Agent</code> header for the value <code>BadBot</code>, you base64-encode
                *             <code>BadBot</code> using MIME base64-encoding and include the resulting value,
                *             <code>QmFkQm90</code>, in the value of <code>SearchString</code>.</p>
                *          <p>
                *             <b>If you're using the CLI or one of the Amazon Web Services SDKs</b>
                *          </p>
                *          <p>The value that you want WAF to search for. The SDK automatically base64 encodes the
                *          value.</p>
                */
            SearchString: Uint8Array | undefined;
            /**
                * <p>The part of the web request that you want WAF to inspect. </p>
                */
            FieldToMatch: FieldToMatch | undefined;
            /**
                * <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
                *          If you specify one or more transformations in a rule statement, WAF performs all transformations on the
                *          content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
                */
            TextTransformations: TextTransformation[] | undefined;
            /**
                * <p>The area within the portion of the web request that you want WAF to search for
                *             <code>SearchString</code>. Valid values include the following:</p>
                *          <p>
                *             <b>CONTAINS</b>
                *          </p>
                *          <p>The specified part of the web request must include the value of
                *             <code>SearchString</code>, but the location doesn't matter.</p>
                *          <p>
                *             <b>CONTAINS_WORD</b>
                *          </p>
                *          <p>The specified part of the web request must include the value of
                *             <code>SearchString</code>, and <code>SearchString</code> must contain only alphanumeric
                *          characters or underscore (A-Z, a-z, 0-9, or _). In addition, <code>SearchString</code> must
                *          be a word, which means that both of the following are true:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>SearchString</code> is at the beginning of the specified part of the web
                *                request or is preceded by a character other than an alphanumeric character or
                *                underscore (_). Examples include the value of a header and
                *                <code>;BadBot</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SearchString</code> is at the end of the specified part of the web request or
                *                is followed by a character other than an alphanumeric character or underscore (_),
                *                for example, <code>BadBot;</code> and <code>-BadBot;</code>.</p>
                *             </li>
                *          </ul>
                *          <p>
                *             <b>EXACTLY</b>
                *          </p>
                *          <p>The value of the specified part of the web request must exactly match the value of
                *             <code>SearchString</code>.</p>
                *          <p>
                *             <b>STARTS_WITH</b>
                *          </p>
                *          <p>The value of <code>SearchString</code> must appear at the beginning of the specified
                *          part of the web request.</p>
                *          <p>
                *             <b>ENDS_WITH</b>
                *          </p>
                *          <p>The value of <code>SearchString</code> must appear at the end of the specified part of
                *          the web request.</p>
                */
            PositionalConstraint: PositionalConstraint | string | undefined;
    }
    export namespace ByteMatchStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ByteMatchStatement) => any;
    }
    export enum CountryCode {
            AD = "AD",
            AE = "AE",
            AF = "AF",
            AG = "AG",
            AI = "AI",
            AL = "AL",
            AM = "AM",
            AO = "AO",
            AQ = "AQ",
            AR = "AR",
            AS = "AS",
            AT = "AT",
            AU = "AU",
            AW = "AW",
            AX = "AX",
            AZ = "AZ",
            BA = "BA",
            BB = "BB",
            BD = "BD",
            BE = "BE",
            BF = "BF",
            BG = "BG",
            BH = "BH",
            BI = "BI",
            BJ = "BJ",
            BL = "BL",
            BM = "BM",
            BN = "BN",
            BO = "BO",
            BQ = "BQ",
            BR = "BR",
            BS = "BS",
            BT = "BT",
            BV = "BV",
            BW = "BW",
            BY = "BY",
            BZ = "BZ",
            CA = "CA",
            CC = "CC",
            CD = "CD",
            CF = "CF",
            CG = "CG",
            CH = "CH",
            CI = "CI",
            CK = "CK",
            CL = "CL",
            CM = "CM",
            CN = "CN",
            CO = "CO",
            CR = "CR",
            CU = "CU",
            CV = "CV",
            CW = "CW",
            CX = "CX",
            CY = "CY",
            CZ = "CZ",
            DE = "DE",
            DJ = "DJ",
            DK = "DK",
            DM = "DM",
            DO = "DO",
            DZ = "DZ",
            EC = "EC",
            EE = "EE",
            EG = "EG",
            EH = "EH",
            ER = "ER",
            ES = "ES",
            ET = "ET",
            FI = "FI",
            FJ = "FJ",
            FK = "FK",
            FM = "FM",
            FO = "FO",
            FR = "FR",
            GA = "GA",
            GB = "GB",
            GD = "GD",
            GE = "GE",
            GF = "GF",
            GG = "GG",
            GH = "GH",
            GI = "GI",
            GL = "GL",
            GM = "GM",
            GN = "GN",
            GP = "GP",
            GQ = "GQ",
            GR = "GR",
            GS = "GS",
            GT = "GT",
            GU = "GU",
            GW = "GW",
            GY = "GY",
            HK = "HK",
            HM = "HM",
            HN = "HN",
            HR = "HR",
            HT = "HT",
            HU = "HU",
            ID = "ID",
            IE = "IE",
            IL = "IL",
            IM = "IM",
            IN = "IN",
            IO = "IO",
            IQ = "IQ",
            IR = "IR",
            IS = "IS",
            IT = "IT",
            JE = "JE",
            JM = "JM",
            JO = "JO",
            JP = "JP",
            KE = "KE",
            KG = "KG",
            KH = "KH",
            KI = "KI",
            KM = "KM",
            KN = "KN",
            KP = "KP",
            KR = "KR",
            KW = "KW",
            KY = "KY",
            KZ = "KZ",
            LA = "LA",
            LB = "LB",
            LC = "LC",
            LI = "LI",
            LK = "LK",
            LR = "LR",
            LS = "LS",
            LT = "LT",
            LU = "LU",
            LV = "LV",
            LY = "LY",
            MA = "MA",
            MC = "MC",
            MD = "MD",
            ME = "ME",
            MF = "MF",
            MG = "MG",
            MH = "MH",
            MK = "MK",
            ML = "ML",
            MM = "MM",
            MN = "MN",
            MO = "MO",
            MP = "MP",
            MQ = "MQ",
            MR = "MR",
            MS = "MS",
            MT = "MT",
            MU = "MU",
            MV = "MV",
            MW = "MW",
            MX = "MX",
            MY = "MY",
            MZ = "MZ",
            NA = "NA",
            NC = "NC",
            NE = "NE",
            NF = "NF",
            NG = "NG",
            NI = "NI",
            NL = "NL",
            NO = "NO",
            NP = "NP",
            NR = "NR",
            NU = "NU",
            NZ = "NZ",
            OM = "OM",
            PA = "PA",
            PE = "PE",
            PF = "PF",
            PG = "PG",
            PH = "PH",
            PK = "PK",
            PL = "PL",
            PM = "PM",
            PN = "PN",
            PR = "PR",
            PS = "PS",
            PT = "PT",
            PW = "PW",
            PY = "PY",
            QA = "QA",
            RE = "RE",
            RO = "RO",
            RS = "RS",
            RU = "RU",
            RW = "RW",
            SA = "SA",
            SB = "SB",
            SC = "SC",
            SD = "SD",
            SE = "SE",
            SG = "SG",
            SH = "SH",
            SI = "SI",
            SJ = "SJ",
            SK = "SK",
            SL = "SL",
            SM = "SM",
            SN = "SN",
            SO = "SO",
            SR = "SR",
            SS = "SS",
            ST = "ST",
            SV = "SV",
            SX = "SX",
            SY = "SY",
            SZ = "SZ",
            TC = "TC",
            TD = "TD",
            TF = "TF",
            TG = "TG",
            TH = "TH",
            TJ = "TJ",
            TK = "TK",
            TL = "TL",
            TM = "TM",
            TN = "TN",
            TO = "TO",
            TR = "TR",
            TT = "TT",
            TV = "TV",
            TW = "TW",
            TZ = "TZ",
            UA = "UA",
            UG = "UG",
            UM = "UM",
            US = "US",
            UY = "UY",
            UZ = "UZ",
            VA = "VA",
            VC = "VC",
            VE = "VE",
            VG = "VG",
            VI = "VI",
            VN = "VN",
            VU = "VU",
            WF = "WF",
            WS = "WS",
            XK = "XK",
            YE = "YE",
            YT = "YT",
            ZA = "ZA",
            ZM = "ZM",
            ZW = "ZW"
    }
    export enum FallbackBehavior {
            MATCH = "MATCH",
            NO_MATCH = "NO_MATCH"
    }
    /**
        * <p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p>
        *
        *          <note>
        *             <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p>
        *          </note>
        *
        *
        *          <p>This configuration is used for <a>GeoMatchStatement</a> and <a>RateBasedStatement</a>. For <a>IPSetReferenceStatement</a>, use <a>IPSetForwardedIPConfig</a> instead. </p>
        *          <p>WAF only evaluates the first IP address found in the specified HTTP header.
        *       </p>
        */
    export interface ForwardedIPConfig {
            /**
                * <p>The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to <code>X-Forwarded-For</code>.</p>
                *
                *          <note>
                *             <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p>
                *          </note>
                */
            HeaderName: string | undefined;
            /**
                * <p>The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.</p>
                *
                *          <note>
                *             <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p>
                *          </note>
                *
                *          <p>You can specify the following fallback behaviors:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p>
                *             </li>
                *          </ul>
                */
            FallbackBehavior: FallbackBehavior | string | undefined;
    }
    export namespace ForwardedIPConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ForwardedIPConfig) => any;
    }
    /**
        * <p>A rule statement used to identify web requests based on country of origin.  </p>
        */
    export interface GeoMatchStatement {
            /**
                * <p>An array of two-character country codes, for example, <code>[ "US", "CN" ]</code>, from
                *          the alpha-2 country ISO codes of the ISO 3166 international standard. </p>
                */
            CountryCodes?: (CountryCode | string)[];
            /**
                * <p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p>
                *
                *          <note>
                *             <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p>
                *          </note>
                */
            ForwardedIPConfig?: ForwardedIPConfig;
    }
    export namespace GeoMatchStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GeoMatchStatement) => any;
    }
    export enum ForwardedIPPosition {
            ANY = "ANY",
            FIRST = "FIRST",
            LAST = "LAST"
    }
    /**
        * <p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p>
        *
        *          <note>
        *             <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p>
        *          </note>
        *
        *
        *          <p>This configuration is used only for <a>IPSetReferenceStatement</a>. For <a>GeoMatchStatement</a> and <a>RateBasedStatement</a>, use <a>ForwardedIPConfig</a> instead. </p>
        */
    export interface IPSetForwardedIPConfig {
            /**
                * <p>The name of the HTTP header to use for the IP address. For example, to use the X-Forwarded-For (XFF) header, set this to <code>X-Forwarded-For</code>.</p>
                *
                *          <note>
                *             <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p>
                *          </note>
                */
            HeaderName: string | undefined;
            /**
                * <p>The match status to assign to the web request if the request doesn't have a valid IP address in the specified position.</p>
                *
                *          <note>
                *             <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p>
                *          </note>
                *
                *          <p>You can specify the following fallback behaviors:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>MATCH</code> - Treat the web request as matching the rule statement. WAF applies the rule action to the request.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NO_MATCH</code> - Treat the web request as not matching the rule statement.</p>
                *             </li>
                *          </ul>
                */
            FallbackBehavior: FallbackBehavior | string | undefined;
            /**
                * <p>The position in the header to search for the IP address. The header can contain IP
                *          addresses of the original client and also of proxies. For example, the header value could
                *          be <code>10.1.1.1, 127.0.0.0, 10.10.10.10</code> where the first IP address identifies the
                *          original client and the rest identify proxies that the request went through. </p>
                *          <p>The options for this setting are the following: </p>
                *          <ul>
                *             <li>
                *                <p>FIRST - Inspect the first IP address in the list of IP addresses in the
                *                header. This is usually the client's original IP.</p>
                *             </li>
                *             <li>
                *                <p>LAST - Inspect the last IP address in the list of IP addresses in the
                *                header.</p>
                *             </li>
                *             <li>
                *                <p>ANY - Inspect all IP addresses in the header for a match. If the header
                *                contains more than 10 IP addresses, WAF inspects the last 10.</p>
                *             </li>
                *          </ul>
                */
            Position: ForwardedIPPosition | string | undefined;
    }
    export namespace IPSetForwardedIPConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IPSetForwardedIPConfig) => any;
    }
    /**
        * <p>A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an <a>IPSet</a> that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see <a>CreateIPSet</a>.</p>
        *          <p>Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.</p>
        */
    export interface IPSetReferenceStatement {
            /**
                * <p>The Amazon Resource Name (ARN) of the <a>IPSet</a> that this statement
                *          references.</p>
                */
            ARN: string | undefined;
            /**
                * <p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p>
                *
                *          <note>
                *             <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p>
                *          </note>
                */
            IPSetForwardedIPConfig?: IPSetForwardedIPConfig;
    }
    export namespace IPSetReferenceStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IPSetReferenceStatement) => any;
    }
    export enum LabelMatchScope {
            LABEL = "LABEL",
            NAMESPACE = "NAMESPACE"
    }
    /**
        * <p>A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. </p>
        *          <p>The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label.  If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. </p>
        */
    export interface LabelMatchStatement {
            /**
                * <p>Specify whether you want to match using the label name or just the namespace. </p>
                */
            Scope: LabelMatchScope | string | undefined;
            /**
                * <p>The string to match against. The setting you provide for this depends on the match
                *          statement's <code>Scope</code> setting: </p>
                *          <ul>
                *             <li>
                *                <p>If the <code>Scope</code> indicates <code>LABEL</code>, then this specification
                *                must include the name and can include any number of preceding namespace
                *                specifications and prefix up to providing the fully qualified label name. </p>
                *             </li>
                *             <li>
                *                <p>If the <code>Scope</code> indicates <code>NAMESPACE</code>, then this
                *                specification can include any number of contiguous namespace strings, and can include
                *                the entire label namespace prefix from the rule group or web ACL where the label
                *                originates.</p>
                *             </li>
                *          </ul>
                *          <p>Labels are case sensitive and components of a label must be separated by colon, for
                *          example <code>NS1:NS2:name</code>.</p>
                */
            Key: string | undefined;
    }
    export namespace LabelMatchStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelMatchStatement) => any;
    }
    /**
        * <p>Specifies a single rule in a rule group whose action you want to override to
        *             <code>Count</code>. When you exclude a rule, WAF evaluates it exactly as it would if
        *          the rule action setting were <code>Count</code>. This is a useful option for testing the
        *          rules in a rule group without modifying how they handle your web traffic. </p>
        */
    export interface ExcludedRule {
            /**
                * <p>The name of the rule whose action you want to override to <code>Count</code>.</p>
                */
            Name: string | undefined;
    }
    export namespace ExcludedRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExcludedRule) => any;
    }
    /**
        * <p>Details about your login page password field, used in a
        *             <code>ManagedRuleGroupConfig</code>. </p>
        */
    export interface PasswordField {
            /**
                * <p>The name of the password field. For example <code>/form/password</code>.</p>
                */
            Identifier: string | undefined;
    }
    export namespace PasswordField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PasswordField) => any;
    }
    export enum PayloadType {
            FORM_ENCODED = "FORM_ENCODED",
            JSON = "JSON"
    }
    /**
        * <p>Details about your login page username field, used in a
        *             <code>ManagedRuleGroupConfig</code>. </p>
        */
    export interface UsernameField {
            /**
                * <p>The name of the username field. For example <code>/form/username</code>.</p>
                */
            Identifier: string | undefined;
    }
    export namespace UsernameField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UsernameField) => any;
    }
    /**
        * <p>Additional information that's used by a managed rule group. Most managed rule groups don't require this.</p>
        *          <p>Use this for the account takeover prevention managed rule group
        *       <code>AWSManagedRulesATPRuleSet</code>, to provide information about the sign-in page of your application. </p>
        *          <p>You can provide multiple individual <code>ManagedRuleGroupConfig</code> objects for any rule group configuration, for example <code>UsernameField</code> and <code>PasswordField</code>. The configuration that you provide depends on the needs of the managed rule group. For the ATP managed rule group, you provide the following individual configuration objects: <code>LoginPath</code>, <code>PasswordField</code>, <code>PayloadType</code> and <code>UsernameField</code>.</p>
        */
    export interface ManagedRuleGroupConfig {
            /**
                * <p>The path of the login endpoint for your application. For example, for the URL
                *             <code>https://example.com/web/login</code>, you would provide the path
                *             <code>/web/login</code>.</p>
                */
            LoginPath?: string;
            /**
                * <p>The payload type for your login endpoint, either JSON or form encoded.</p>
                */
            PayloadType?: PayloadType | string;
            /**
                * <p>Details about your login page username field. </p>
                */
            UsernameField?: UsernameField;
            /**
                * <p>Details about your login page password field. </p>
                */
            PasswordField?: PasswordField;
    }
    export namespace ManagedRuleGroupConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManagedRuleGroupConfig) => any;
    }
    export enum RateBasedStatementAggregateKeyType {
            FORWARDED_IP = "FORWARDED_IP",
            IP = "IP"
    }
    /**
        * <p>A rule statement used to search web request components for a match against a single regular expression. </p>
        */
    export interface RegexMatchStatement {
            /**
                * <p>The string representing the regular expression.</p>
                */
            RegexString: string | undefined;
            /**
                * <p>The part of the web request that you want WAF to inspect. </p>
                */
            FieldToMatch: FieldToMatch | undefined;
            /**
                * <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
                *          If you specify one or more transformations in a rule statement, WAF performs all transformations on the
                *          content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
                */
            TextTransformations: TextTransformation[] | undefined;
    }
    export namespace RegexMatchStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegexMatchStatement) => any;
    }
    /**
        * <p>A rule statement used to search web request components for matches with regular expressions. To use this, create a <a>RegexPatternSet</a> that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see <a>CreateRegexPatternSet</a>.</p>
        *          <p>Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.</p>
        */
    export interface RegexPatternSetReferenceStatement {
            /**
                * <p>The Amazon Resource Name (ARN) of the <a>RegexPatternSet</a> that this
                *          statement references.</p>
                */
            ARN: string | undefined;
            /**
                * <p>The part of the web request that you want WAF to inspect. </p>
                */
            FieldToMatch: FieldToMatch | undefined;
            /**
                * <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
                *          If you specify one or more transformations in a rule statement, WAF performs all transformations on the
                *          content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
                */
            TextTransformations: TextTransformation[] | undefined;
    }
    export namespace RegexPatternSetReferenceStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegexPatternSetReferenceStatement) => any;
    }
    /**
        * <p>A rule statement used to run the rules that are defined in a <a>RuleGroup</a>. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.</p>
        *          <p>You cannot nest a <code>RuleGroupReferenceStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. You
        *       can only use a rule group reference statement at the top level inside a web ACL. </p>
        */
    export interface RuleGroupReferenceStatement {
            /**
                * <p>The Amazon Resource Name (ARN) of the entity.</p>
                */
            ARN: string | undefined;
            /**
                * <p>The rules in the referenced rule group whose actions are set to <code>Count</code>. When
                *          you exclude a rule, WAF evaluates it exactly as it would if the rule action setting were
                *             <code>Count</code>. This is a useful option for testing the rules in a rule group
                *          without modifying how they handle your web traffic.</p>
                */
            ExcludedRules?: ExcludedRule[];
    }
    export namespace RuleGroupReferenceStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupReferenceStatement) => any;
    }
    export enum ComparisonOperator {
            EQ = "EQ",
            GE = "GE",
            GT = "GT",
            LE = "LE",
            LT = "LT",
            NE = "NE"
    }
    /**
        * <p>A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. </p>
        *          <p>If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you could use a size constraint statement to block requests that have a request body greater than 8192 bytes.</p>
        *          <p>If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI <code>/logo.jpg</code> is nine characters long.</p>
        */
    export interface SizeConstraintStatement {
            /**
                * <p>The part of the web request that you want WAF to inspect. </p>
                */
            FieldToMatch: FieldToMatch | undefined;
            /**
                * <p>The operator to use to compare the request part to the size setting. </p>
                */
            ComparisonOperator: ComparisonOperator | string | undefined;
            /**
                * <p>The size, in byte, to compare to the request part, after any transformations.</p>
                */
            Size: number | undefined;
            /**
                * <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
                *          If you specify one or more transformations in a rule statement, WAF performs all transformations on the
                *          content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
                */
            TextTransformations: TextTransformation[] | undefined;
    }
    export namespace SizeConstraintStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SizeConstraintStatement) => any;
    }
    export enum SensitivityLevel {
            HIGH = "HIGH",
            LOW = "LOW"
    }
    /**
        * <p>A rule statement that inspects for malicious SQL code. Attackers insert malicious SQL code into web requests to do things like modify your database or extract data from it. </p>
        */
    export interface SqliMatchStatement {
            /**
                * <p>The part of the web request that you want WAF to inspect. </p>
                */
            FieldToMatch: FieldToMatch | undefined;
            /**
                * <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
                *          If you specify one or more transformations in a rule statement, WAF performs all transformations on the
                *          content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
                */
            TextTransformations: TextTransformation[] | undefined;
            /**
                * <p>The sensitivity that you want WAF to use to inspect for SQL injection attacks. </p>
                *          <p>
                *             <code>HIGH</code> detects more attacks, but might generate more false positives,
                *        especially if your web requests frequently contain unusual strings.
                *        For information about identifying and mitigating false positives, see
                *            <a href="https://docs.aws.amazon.com/waf/latest/developerguide/web-acl-testing.html">Testing and tuning</a> in the
                *            <i>WAF Developer Guide</i>.</p>
                *          <p>
                *             <code>LOW</code> is generally a better choice for resources that already have other
                *            protections against SQL injection attacks or that have a low tolerance for false positives. </p>
                *          <p>Default: <code>LOW</code>
                *          </p>
                */
            SensitivityLevel?: SensitivityLevel | string;
    }
    export namespace SqliMatchStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SqliMatchStatement) => any;
    }
    /**
        * <p>A rule statement that inspects for cross-site scripting (XSS) attacks. In XSS attacks, the attacker
        * uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. </p>
        */
    export interface XssMatchStatement {
            /**
                * <p>The part of the web request that you want WAF to inspect. </p>
                */
            FieldToMatch: FieldToMatch | undefined;
            /**
                * <p>Text transformations eliminate some of the unusual formatting that attackers use in web requests in an effort to bypass detection.
                *          If you specify one or more transformations in a rule statement, WAF performs all transformations on the
                *          content of the request component identified by <code>FieldToMatch</code>, starting from the lowest priority setting, before inspecting the content for a match.</p>
                */
            TextTransformations: TextTransformation[] | undefined;
    }
    export namespace XssMatchStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: XssMatchStatement) => any;
    }
    export interface AssociateWebACLRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the web ACL that you want to associate with the
                *          resource.</p>
                */
            WebACLArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource to associate with the web ACL. </p>
                *
                *          <p>The ARN must be in one of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>For an Application Load Balancer: <code>arn:aws:elasticloadbalancing:<i>region</i>:<i>account-id</i>:loadbalancer/app/<i>load-balancer-name</i>/<i>load-balancer-id</i>
                *                   </code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>For an Amazon API Gateway REST API: <code>arn:aws:apigateway:<i>region</i>::/restapis/<i>api-id</i>/stages/<i>stage-name</i>
                *                   </code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>For an AppSync GraphQL API: <code>arn:aws:appsync:<i>region</i>:<i>account-id</i>:apis/<i>GraphQLApiId</i>
                *                   </code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ResourceArn: string | undefined;
    }
    export namespace AssociateWebACLRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateWebACLRequest) => any;
    }
    export interface AssociateWebACLResponse {
    }
    export namespace AssociateWebACLResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateWebACLResponse) => any;
    }
    /**
        * <p>Your request is valid, but WAF couldn’t perform the operation because of a system
        *          problem. Retry your request. </p>
        */
    export class WAFInternalErrorException extends __BaseException {
            readonly name: "WAFInternalErrorException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFInternalErrorException, __BaseException>);
    }
    /**
        * <p>The operation isn't valid. </p>
        */
    export class WAFInvalidOperationException extends __BaseException {
            readonly name: "WAFInvalidOperationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFInvalidOperationException, __BaseException>);
    }
    export enum ParameterExceptionField {
            AND_STATEMENT = "AND_STATEMENT",
            ASSOCIABLE_RESOURCE = "ASSOCIABLE_RESOURCE",
            BODY_PARSING_FALLBACK_BEHAVIOR = "BODY_PARSING_FALLBACK_BEHAVIOR",
            BYTE_MATCH_STATEMENT = "BYTE_MATCH_STATEMENT",
            CHANGE_PROPAGATION_STATUS = "CHANGE_PROPAGATION_STATUS",
            COOKIE_MATCH_PATTERN = "COOKIE_MATCH_PATTERN",
            CUSTOM_REQUEST_HANDLING = "CUSTOM_REQUEST_HANDLING",
            CUSTOM_RESPONSE = "CUSTOM_RESPONSE",
            CUSTOM_RESPONSE_BODY = "CUSTOM_RESPONSE_BODY",
            DEFAULT_ACTION = "DEFAULT_ACTION",
            ENTITY_LIMIT = "ENTITY_LIMIT",
            EXCLUDED_RULE = "EXCLUDED_RULE",
            EXPIRE_TIMESTAMP = "EXPIRE_TIMESTAMP",
            FALLBACK_BEHAVIOR = "FALLBACK_BEHAVIOR",
            FIELD_TO_MATCH = "FIELD_TO_MATCH",
            FILTER_CONDITION = "FILTER_CONDITION",
            FIREWALL_MANAGER_STATEMENT = "FIREWALL_MANAGER_STATEMENT",
            FORWARDED_IP_CONFIG = "FORWARDED_IP_CONFIG",
            GEO_MATCH_STATEMENT = "GEO_MATCH_STATEMENT",
            HEADER_MATCH_PATTERN = "HEADER_MATCH_PATTERN",
            HEADER_NAME = "HEADER_NAME",
            IP_ADDRESS = "IP_ADDRESS",
            IP_ADDRESS_VERSION = "IP_ADDRESS_VERSION",
            IP_SET = "IP_SET",
            IP_SET_FORWARDED_IP_CONFIG = "IP_SET_FORWARDED_IP_CONFIG",
            IP_SET_REFERENCE_STATEMENT = "IP_SET_REFERENCE_STATEMENT",
            JSON_MATCH_PATTERN = "JSON_MATCH_PATTERN",
            JSON_MATCH_SCOPE = "JSON_MATCH_SCOPE",
            LABEL_MATCH_STATEMENT = "LABEL_MATCH_STATEMENT",
            LOGGING_FILTER = "LOGGING_FILTER",
            LOG_DESTINATION = "LOG_DESTINATION",
            MANAGED_RULE_GROUP_CONFIG = "MANAGED_RULE_GROUP_CONFIG",
            MANAGED_RULE_SET = "MANAGED_RULE_SET",
            MANAGED_RULE_SET_STATEMENT = "MANAGED_RULE_SET_STATEMENT",
            MAP_MATCH_SCOPE = "MAP_MATCH_SCOPE",
            METRIC_NAME = "METRIC_NAME",
            NOT_STATEMENT = "NOT_STATEMENT",
            OR_STATEMENT = "OR_STATEMENT",
            OVERRIDE_ACTION = "OVERRIDE_ACTION",
            OVERSIZE_HANDLING = "OVERSIZE_HANDLING",
            PAYLOAD_TYPE = "PAYLOAD_TYPE",
            POSITION = "POSITION",
            RATE_BASED_STATEMENT = "RATE_BASED_STATEMENT",
            REGEX_PATTERN_REFERENCE_STATEMENT = "REGEX_PATTERN_REFERENCE_STATEMENT",
            REGEX_PATTERN_SET = "REGEX_PATTERN_SET",
            RESOURCE_ARN = "RESOURCE_ARN",
            RESOURCE_TYPE = "RESOURCE_TYPE",
            RESPONSE_CONTENT_TYPE = "RESPONSE_CONTENT_TYPE",
            RULE = "RULE",
            RULE_ACTION = "RULE_ACTION",
            RULE_GROUP = "RULE_GROUP",
            RULE_GROUP_REFERENCE_STATEMENT = "RULE_GROUP_REFERENCE_STATEMENT",
            SCOPE_VALUE = "SCOPE_VALUE",
            SINGLE_HEADER = "SINGLE_HEADER",
            SINGLE_QUERY_ARGUMENT = "SINGLE_QUERY_ARGUMENT",
            SIZE_CONSTRAINT_STATEMENT = "SIZE_CONSTRAINT_STATEMENT",
            SQLI_MATCH_STATEMENT = "SQLI_MATCH_STATEMENT",
            STATEMENT = "STATEMENT",
            TAGS = "TAGS",
            TAG_KEYS = "TAG_KEYS",
            TEXT_TRANSFORMATION = "TEXT_TRANSFORMATION",
            WEB_ACL = "WEB_ACL",
            XSS_MATCH_STATEMENT = "XSS_MATCH_STATEMENT"
    }
    /**
        * <p>The operation failed because WAF didn't recognize a parameter in the request. For
        *          example: </p>
        *          <ul>
        *             <li>
        *                <p>You specified a parameter name or value that isn't valid.</p>
        *             </li>
        *             <li>
        *                <p>Your nested statement isn't valid. You might have tried to nest a statement that
        *                can’t be nested. </p>
        *             </li>
        *             <li>
        *                <p>You tried to update a <code>WebACL</code> with a <code>DefaultAction</code> that
        *                isn't among the types available at <a>DefaultAction</a>.</p>
        *             </li>
        *             <li>
        *                <p>Your request references an ARN that is malformed, or corresponds to a resource
        *                with which a web ACL can't be associated.</p>
        *             </li>
        *          </ul>
        */
    export class WAFInvalidParameterException extends __BaseException {
            readonly name: "WAFInvalidParameterException";
            readonly $fault: "client";
            /**
                * <p>The settings where the invalid parameter was found. </p>
                */
            Field?: ParameterExceptionField | string;
            /**
                * <p>The invalid parameter that resulted in the exception. </p>
                */
            Parameter?: string;
            /**
                * <p>Additional information about the exception.</p>
                */
            Reason?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFInvalidParameterException, __BaseException>);
    }
    /**
        * <p>WAF couldn’t perform the operation because your resource doesn’t exist. </p>
        */
    export class WAFNonexistentItemException extends __BaseException {
            readonly name: "WAFNonexistentItemException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFNonexistentItemException, __BaseException>);
    }
    /**
        * <p>WAF couldn’t retrieve a resource that you specified for this operation. Verify the
        *          resources that you are specifying in your request parameters and then retry the
        *          operation.</p>
        */
    export class WAFUnavailableEntityException extends __BaseException {
            readonly name: "WAFUnavailableEntityException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFUnavailableEntityException, __BaseException>);
    }
    /**
        * <p>A custom response to send to the client. You can define a custom response for rule
        *          actions and default web ACL actions that are set to <a>BlockAction</a>. </p>
        *          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the
        *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
        */
    export interface CustomResponse {
            /**
                * <p>The HTTP status code to return to the client. </p>
                *          <p>For a list of status codes that you can use in your custom responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/customizing-the-response-status-codes.html">Supported status codes for custom response</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                */
            ResponseCode: number | undefined;
            /**
                * <p>References the response body that you want WAF to return to the web request
                *          client. You can define a custom response for a rule action or a default web ACL action that
                *          is set to block. To do this, you first define the response body key and value in the
                *             <code>CustomResponseBodies</code> setting for the <a>WebACL</a> or <a>RuleGroup</a> where you want to use it. Then, in the rule action or web ACL
                *          default action <code>BlockAction</code> setting, you reference the response body using this
                *          key. </p>
                */
            CustomResponseBodyKey?: string;
            /**
                * <p>The HTTP headers to use in the response. Duplicate header names are not allowed. </p>
                *          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                */
            ResponseHeaders?: CustomHTTPHeader[];
    }
    export namespace CustomResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomResponse) => any;
    }
    /**
        * <p>Specifies that WAF should block the request and optionally defines additional
        *          custom handling for the response to the web request.</p>
        *          <p>This is used in the context of other settings, for example to specify values for <a>RuleAction</a> and web ACL <a>DefaultAction</a>. </p>
        */
    export interface BlockAction {
            /**
                * <p>Defines a custom response for the web request.</p>
                *          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                */
            CustomResponse?: CustomResponse;
    }
    export namespace BlockAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BlockAction) => any;
    }
    /**
        * <p>Specifies that WAF should run a <code>CAPTCHA</code> check against the request: </p>
        *          <ul>
        *             <li>
        *                <p>If the request includes a valid, unexpired <code>CAPTCHA</code> token,
        *                WAF allows the web request inspection to
        *                    proceed to the next rule, similar to a <code>CountAction</code>. </p>
        *            </li>
        *             <li>
        *                <p>If the request doesn't include a valid, unexpired <code>CAPTCHA</code> token, WAF
        *                    discontinues the web ACL evaluation of the request and blocks it from going to its intended destination.</p>
        *                <p>WAF generates a response that it sends back to the client, which includes the following: </p>
        *                <ul>
        *                   <li>
        *                        <p>The header <code>x-amzn-waf-action</code> with a value of <code>captcha</code>. </p>
        *                    </li>
        *                   <li>
        *                        <p>The HTTP status code <code>405 Method Not Allowed</code>. </p>
        *                    </li>
        *                   <li>
        *                        <p>If the request contains an <code>Accept</code> header with a value of <code>text/html</code>, the response includes a <code>CAPTCHA</code> challenge. </p>
        *                    </li>
        *                </ul>
        *            </li>
        *          </ul>
        *          <p>You can configure the expiration time
        *                in the <code>CaptchaConfig</code>
        *             <code>ImmunityTimeProperty</code> setting at the rule and web ACL level. The rule setting overrides the web ACL setting. </p>
        *          <p>This action option is available for rules. It isn't available for web ACL default actions. </p>
        */
    export interface CaptchaAction {
            /**
                * <p>Defines custom handling for the web request.</p>
                *          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                */
            CustomRequestHandling?: CustomRequestHandling;
    }
    export namespace CaptchaAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CaptchaAction) => any;
    }
    /**
        * <p>Specifies that WAF should count the request. Optionally defines additional custom
        *          handling for the request.</p>
        *          <p>This is used in the context of other settings, for example to specify values for <a>RuleAction</a> and web ACL <a>DefaultAction</a>. </p>
        */
    export interface CountAction {
            /**
                * <p>Defines custom handling for the web request.</p>
                *          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                */
            CustomRequestHandling?: CustomRequestHandling;
    }
    export namespace CountAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CountAction) => any;
    }
    /**
        * <p>The action that WAF should take on a web request when it matches a rule's
        *          statement. Settings at the web ACL level can override the rule action setting. </p>
        */
    export interface RuleAction {
            /**
                * <p>Instructs WAF to block the web request.</p>
                */
            Block?: BlockAction;
            /**
                * <p>Instructs WAF to allow the web request.</p>
                */
            Allow?: AllowAction;
            /**
                * <p>Instructs WAF to count the web request and allow it.</p>
                */
            Count?: CountAction;
            /**
                * <p>Instructs WAF to run a <code>CAPTCHA</code> check against the web request.</p>
                */
            Captcha?: CaptchaAction;
    }
    export namespace RuleAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleAction) => any;
    }
    /**
        * <p>Determines how long a <code>CAPTCHA</code> token remains valid after the client
        *          successfully solves a <code>CAPTCHA</code> puzzle. </p>
        */
    export interface ImmunityTimeProperty {
            /**
                * <p>The amount of time, in seconds, that a <code>CAPTCHA</code> token is valid. The default
                *          setting is 300.</p>
                */
            ImmunityTime: number | undefined;
    }
    export namespace ImmunityTimeProperty {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImmunityTimeProperty) => any;
    }
    /**
        * <p>Specifies how WAF should handle <code>CAPTCHA</code> evaluations. This is
        *          available at the web ACL level and in each rule. </p>
        */
    export interface CaptchaConfig {
            /**
                * <p>Determines how long a <code>CAPTCHA</code> token remains valid after the client
                *          successfully solves a <code>CAPTCHA</code> puzzle. </p>
                */
            ImmunityTimeProperty?: ImmunityTimeProperty;
    }
    export namespace CaptchaConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CaptchaConfig) => any;
    }
    /**
        * <p>Specifies that WAF should do nothing. This is used for the
        *             <code>OverrideAction</code> setting on a <a>Rule</a> when the rule uses a
        *          rule group reference statement. </p>
        *          <p>This is used in the context of other settings, for example to specify values for <a>RuleAction</a> and web ACL <a>DefaultAction</a>. </p>
        *          <p>JSON specification: <code>"None": {}</code>
        *          </p>
        */
    export interface NoneAction {
    }
    export namespace NoneAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NoneAction) => any;
    }
    /**
        * <p>The action to use in the place of the action that results from the rule group evaluation. Set the override action to none to leave the result of the rule group alone. Set it to count to override the result to count only. </p>
        *          <p>You can only use this for rule statements that reference a rule group, like <code>RuleGroupReferenceStatement</code> and <code>ManagedRuleGroupStatement</code>. </p>
        *          <note>
        *             <p>This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count
        *   matches, do not use this and instead exclude those rules in your rule group reference statement settings. </p>
        *          </note>
        */
    export interface OverrideAction {
            /**
                * <p>Override the rule group evaluation result to count only. </p>
                *          <note>
                *             <p>This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count
                *   matches, do not use this and instead exclude those rules in your rule group reference statement settings. </p>
                *          </note>
                */
            Count?: CountAction;
            /**
                * <p>Don't override the rule group evaluation result. This is the most common setting.</p>
                */
            None?: NoneAction;
    }
    export namespace OverrideAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OverrideAction) => any;
    }
    /**
        * <p>A single label container. This is used as an element of a label array in multiple
        *          contexts, for example, in <code>RuleLabels</code> inside a <a>Rule</a> and in
        *             <code>Labels</code> inside a <a>SampledHTTPRequest</a>. </p>
        */
    export interface Label {
            /**
                * <p>The label string. </p>
                */
            Name: string | undefined;
    }
    export namespace Label {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Label) => any;
    }
    /**
        * <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
        */
    export interface VisibilityConfig {
            /**
                * <p>A boolean indicating whether WAF should store a sampling of the web requests that
                *          match the rules. You can view the sampled requests through the WAF console. </p>
                */
            SampledRequestsEnabled: boolean | undefined;
            /**
                * <p>A boolean indicating whether the associated resource sends metrics to Amazon CloudWatch. For the
                *          list of available metrics, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html#waf-metrics">WAF
                *             Metrics</a>.</p>
                */
            CloudWatchMetricsEnabled: boolean | undefined;
            /**
                * <p>A name of the Amazon CloudWatch metric. The name can contain only the characters: A-Z, a-z, 0-9,
                *          - (hyphen), and _ (underscore). The name can be from one to 128 characters long. It can't
                *       contain whitespace or metric names reserved for WAF, for example <code>All</code> and
                *       <code>Default_Action</code>. </p>
                */
            MetricName: string | undefined;
    }
    export namespace VisibilityConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VisibilityConfig) => any;
    }
    export enum Scope {
            CLOUDFRONT = "CLOUDFRONT",
            REGIONAL = "REGIONAL"
    }
    export interface CheckCapacityResponse {
            /**
                * <p>The capacity required by the rules and scope.</p>
                */
            Capacity?: number;
    }
    export namespace CheckCapacityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CheckCapacityResponse) => any;
    }
    /**
        * <p>The operation failed because the specified version for the managed rule group has
        *          expired. You can retrieve the available versions for the managed rule group by calling
        *             <a>ListAvailableManagedRuleGroupVersions</a>.</p>
        */
    export class WAFExpiredManagedRuleGroupVersionException extends __BaseException {
            readonly name: "WAFExpiredManagedRuleGroupVersionException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFExpiredManagedRuleGroupVersionException, __BaseException>);
    }
    /**
        * <p>WAF couldn’t perform the operation because the resource that you requested isn’t
        *          valid. Check the resource, and try again.</p>
        */
    export class WAFInvalidResourceException extends __BaseException {
            readonly name: "WAFInvalidResourceException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFInvalidResourceException, __BaseException>);
    }
    /**
        * <p>WAF couldn’t perform the operation because you exceeded your resource limit. For
        *          example, the maximum number of <code>WebACL</code> objects that you can create for an Amazon Web Services
        *          account. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the
        *             <i>WAF Developer Guide</i>.</p>
        */
    export class WAFLimitsExceededException extends __BaseException {
            readonly name: "WAFLimitsExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFLimitsExceededException, __BaseException>);
    }
    /**
        * <p>You tried to use a managed rule group that's available by subscription, but you aren't
        *          subscribed to it yet. </p>
        */
    export class WAFSubscriptionNotFoundException extends __BaseException {
            readonly name: "WAFSubscriptionNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFSubscriptionNotFoundException, __BaseException>);
    }
    export enum IPAddressVersion {
            IPV4 = "IPV4",
            IPV6 = "IPV6"
    }
    /**
        * <p>A tag associated with an Amazon Web Services resource. Tags are key:value pairs that you can use to
        *          categorize and manage your resources, for purposes like billing or other management.
        *          Typically, the tag key represents a category, such as "environment", and the tag value
        *          represents a specific value within that category, such as "test," "development," or
        *          "production". Or you might set the tag key to "customer" and the value to the customer name
        *          or ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a
        *          resource.</p>
        *          <p>You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule
        *          groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF
        *          console. </p>
        */
    export interface Tag {
            /**
                * <p>Part of the key:value pair that defines a tag. You can use a tag key to describe a
                *          category of information, such as "customer." Tag keys are case-sensitive.</p>
                */
            Key: string | undefined;
            /**
                * <p>Part of the key:value pair that defines a tag. You can use a tag value to describe a
                *          specific value within a category, such as "companyA" or "companyB." Tag values are
                *          case-sensitive.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateIPSetRequest {
            /**
                * <p>The name of the IP set. You cannot change the name of an <code>IPSet</code> after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>A description of the IP set that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>The version of the IP addresses, either <code>IPV4</code> or <code>IPV6</code>. </p>
                */
            IPAddressVersion: IPAddressVersion | string | undefined;
            /**
                * <p>Contains an array of strings that specifies zero or more IP addresses or blocks of IP addresses in Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges except for /0. </p>
                *          <p>Example address strings: </p>
                *          <ul>
                *             <li>
                *                <p>To configure WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify <code>192.0.2.44/32</code>.</p>
                *             </li>
                *             <li>
                *                <p>To configure WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify
                *                <code>192.0.2.0/24</code>.</p>
                *             </li>
                *             <li>
                *                <p>To configure WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify <code>1111:0000:0000:0000:0000:0000:0000:0111/128</code>.</p>
                *             </li>
                *             <li>
                *                <p>To configure WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify <code>1111:0000:0000:0000:0000:0000:0000:0000/64</code>.</p>
                *             </li>
                *          </ul>
                *          <p>For more information about CIDR notation, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless Inter-Domain Routing</a>.</p>
                *          <p>Example JSON <code>Addresses</code> specifications: </p>
                *          <ul>
                *             <li>
                *                <p>Empty array: <code>"Addresses": []</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Array with one address: <code>"Addresses": ["192.0.2.44/32"]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Array with three addresses: <code>"Addresses": ["192.0.2.44/32", "192.0.2.0/24", "192.0.0.0/16"]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>INVALID specification: <code>"Addresses": [""]</code> INVALID </p>
                *             </li>
                *          </ul>
                */
            Addresses: string[] | undefined;
            /**
                * <p>An array of key:value pairs to associate with the resource.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateIPSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIPSetRequest) => any;
    }
    /**
        * <p>High-level information about an <a>IPSet</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage an <code>IPSet</code>, and the ARN, that you provide to the <a>IPSetReferenceStatement</a> to use the address set in a <a>Rule</a>.</p>
        */
    export interface IPSetSummary {
            /**
                * <p>The name of the IP set. You cannot change the name of an <code>IPSet</code> after you create it.</p>
                */
            Name?: string;
            /**
                * <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id?: string;
            /**
                * <p>A description of the IP set that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the entity.</p>
                */
            ARN?: string;
    }
    export namespace IPSetSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IPSetSummary) => any;
    }
    export interface CreateIPSetResponse {
            /**
                * <p>High-level information about an <a>IPSet</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage an <code>IPSet</code>, and the ARN, that you provide to the <a>IPSetReferenceStatement</a> to use the address set in a <a>Rule</a>.</p>
                */
            Summary?: IPSetSummary;
    }
    export namespace CreateIPSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateIPSetResponse) => any;
    }
    /**
        * <p>WAF couldn’t perform the operation because the resource that you tried to save is
        *          a duplicate of an existing one.</p>
        */
    export class WAFDuplicateItemException extends __BaseException {
            readonly name: "WAFDuplicateItemException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFDuplicateItemException, __BaseException>);
    }
    /**
        * <p>WAF couldn’t save your changes because you tried to update or delete a resource
        *          that has changed since you last retrieved it. Get the resource again, make any changes you
        *          need to make to the new copy, and retry your operation. </p>
        */
    export class WAFOptimisticLockException extends __BaseException {
            readonly name: "WAFOptimisticLockException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFOptimisticLockException, __BaseException>);
    }
    /**
        * <p>An error occurred during the tagging operation. Retry your request.</p>
        */
    export class WAFTagOperationException extends __BaseException {
            readonly name: "WAFTagOperationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFTagOperationException, __BaseException>);
    }
    /**
        * <p>WAF couldn’t perform your tagging operation because of an internal error. Retry
        *          your request.</p>
        */
    export class WAFTagOperationInternalErrorException extends __BaseException {
            readonly name: "WAFTagOperationInternalErrorException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFTagOperationInternalErrorException, __BaseException>);
    }
    /**
        * <p>A single regular expression. This is used in a <a>RegexPatternSet</a>.</p>
        */
    export interface Regex {
            /**
                * <p>The string representing the regular expression.</p>
                */
            RegexString?: string;
    }
    export namespace Regex {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Regex) => any;
    }
    export interface CreateRegexPatternSetRequest {
            /**
                * <p>The name of the set. You cannot change the name after you create the set.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>A description of the set that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>Array of regular expression strings. </p>
                */
            RegularExpressionList: Regex[] | undefined;
            /**
                * <p>An array of key:value pairs to associate with the resource.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateRegexPatternSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRegexPatternSetRequest) => any;
    }
    /**
        * <p>High-level information about a <a>RegexPatternSet</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a <code>RegexPatternSet</code>, and the ARN, that you provide to the <a>RegexPatternSetReferenceStatement</a> to use the pattern set in a <a>Rule</a>.</p>
        */
    export interface RegexPatternSetSummary {
            /**
                * <p>The name of the data type instance. You cannot change the name after you create the instance.</p>
                */
            Name?: string;
            /**
                * <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id?: string;
            /**
                * <p>A description of the set that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the entity.</p>
                */
            ARN?: string;
    }
    export namespace RegexPatternSetSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegexPatternSetSummary) => any;
    }
    export interface CreateRegexPatternSetResponse {
            /**
                * <p>High-level information about a <a>RegexPatternSet</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a <code>RegexPatternSet</code>, and the ARN, that you provide to the <a>RegexPatternSetReferenceStatement</a> to use the pattern set in a <a>Rule</a>.</p>
                */
            Summary?: RegexPatternSetSummary;
    }
    export namespace CreateRegexPatternSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRegexPatternSetResponse) => any;
    }
    export enum ResponseContentType {
            APPLICATION_JSON = "APPLICATION_JSON",
            TEXT_HTML = "TEXT_HTML",
            TEXT_PLAIN = "TEXT_PLAIN"
    }
    /**
        * <p>The response body to use in a custom response to a web request. This is referenced by
        *          key from <a>CustomResponse</a>
        *             <code>CustomResponseBodyKey</code>.</p>
        */
    export interface CustomResponseBody {
            /**
                * <p>The type of content in the payload that you are defining in the <code>Content</code>
                *          string.</p>
                */
            ContentType: ResponseContentType | string | undefined;
            /**
                * <p>The payload of the custom response. </p>
                *          <p>You can use JSON escape strings in JSON content. To do this, you must specify JSON
                *          content in the <code>ContentType</code> setting. </p>
                *          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                */
            Content: string | undefined;
    }
    export namespace CustomResponseBody {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomResponseBody) => any;
    }
    /**
        * <p>High-level information about a <a>RuleGroup</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a <code>RuleGroup</code>, and the ARN, that you provide to the <a>RuleGroupReferenceStatement</a> to use the rule group in a <a>Rule</a>.</p>
        */
    export interface RuleGroupSummary {
            /**
                * <p>The name of the data type instance. You cannot change the name after you create the instance.</p>
                */
            Name?: string;
            /**
                * <p>A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id?: string;
            /**
                * <p>A description of the rule group that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the entity.</p>
                */
            ARN?: string;
    }
    export namespace RuleGroupSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupSummary) => any;
    }
    export interface CreateRuleGroupResponse {
            /**
                * <p>High-level information about a <a>RuleGroup</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a <code>RuleGroup</code>, and the ARN, that you provide to the <a>RuleGroupReferenceStatement</a> to use the rule group in a <a>Rule</a>.</p>
                */
            Summary?: RuleGroupSummary;
    }
    export namespace CreateRuleGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRuleGroupResponse) => any;
    }
    /**
        * <p>In a <a>WebACL</a>, this is the action that you want WAF to perform
        *          when a web request doesn't match any of the rules in the <code>WebACL</code>. The default
        *          action must be a terminating action, so you can't use count.</p>
        */
    export interface DefaultAction {
            /**
                * <p>Specifies that WAF should block requests by default. </p>
                */
            Block?: BlockAction;
            /**
                * <p>Specifies that WAF should allow requests by default.</p>
                */
            Allow?: AllowAction;
    }
    export namespace DefaultAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DefaultAction) => any;
    }
    /**
        * <p>High-level information about a <a>WebACL</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a <code>WebACL</code>, and the ARN, that you provide to operations like <a>AssociateWebACL</a>.</p>
        */
    export interface WebACLSummary {
            /**
                * <p>The name of the web ACL. You cannot change the name of a web ACL after you create it.</p>
                */
            Name?: string;
            /**
                * <p>The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id?: string;
            /**
                * <p>A description of the web ACL that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the entity.</p>
                */
            ARN?: string;
    }
    export namespace WebACLSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WebACLSummary) => any;
    }
    export interface CreateWebACLResponse {
            /**
                * <p>High-level information about a <a>WebACL</a>, returned by operations like create and list. This provides information like the ID, that you can use to retrieve and manage a <code>WebACL</code>, and the ARN, that you provide to operations like <a>AssociateWebACL</a>.</p>
                */
            Summary?: WebACLSummary;
    }
    export namespace CreateWebACLResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWebACLResponse) => any;
    }
    /**
        * <p>The operation failed because you are inspecting the web request body, headers, or
        *          cookies without specifying how to handle oversize components. Rules that inspect the body
        *          must either provide an <code>OversizeHandling</code> configuration or they must be preceded
        *          by a <code>SizeConstraintStatement</code> that blocks the body content from being too
        *          large. Rules that inspect the headers or cookies must provide an
        *             <code>OversizeHandling</code> configuration. </p>
        *          <p>Provide the handling configuration and retry your operation.</p>
        *          <p>Alternately, you can suppress this warning by adding the following tag to the resource
        *          that you provide to this operation: <code>Tag</code>
        *             (key:<code>WAF:OversizeFieldsHandlingConstraintOptOut</code>,
        *          value:<code>true</code>).</p>
        */
    export class WAFConfigurationWarningException extends __BaseException {
            readonly name: "WAFConfigurationWarningException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFConfigurationWarningException, __BaseException>);
    }
    export interface DeleteFirewallManagerRuleGroupsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the web ACL.</p>
                */
            WebACLArn: string | undefined;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            WebACLLockToken: string | undefined;
    }
    export namespace DeleteFirewallManagerRuleGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFirewallManagerRuleGroupsRequest) => any;
    }
    export interface DeleteFirewallManagerRuleGroupsResponse {
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            NextWebACLLockToken?: string;
    }
    export namespace DeleteFirewallManagerRuleGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFirewallManagerRuleGroupsResponse) => any;
    }
    export interface DeleteIPSetRequest {
            /**
                * <p>The name of the IP set. You cannot change the name of an <code>IPSet</code> after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id: string | undefined;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken: string | undefined;
    }
    export namespace DeleteIPSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIPSetRequest) => any;
    }
    export interface DeleteIPSetResponse {
    }
    export namespace DeleteIPSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteIPSetResponse) => any;
    }
    /**
        * <p>WAF couldn’t perform the operation because your resource is being used by another
        *          resource or it’s associated with another resource. </p>
        *          <p>For <code>DeleteWebACL</code>, you will only get this exception if the web ACL is still
        *          associated with a regional resource. Deleting a web ACL that is still associated with an
        *          Amazon CloudFront distribution won't get this exception. </p>
        */
    export class WAFAssociatedItemException extends __BaseException {
            readonly name: "WAFAssociatedItemException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFAssociatedItemException, __BaseException>);
    }
    export interface DeleteLoggingConfigurationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the web ACL from which you want to delete the <a>LoggingConfiguration</a>.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace DeleteLoggingConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoggingConfigurationRequest) => any;
    }
    export interface DeleteLoggingConfigurationResponse {
    }
    export namespace DeleteLoggingConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoggingConfigurationResponse) => any;
    }
    export interface DeletePermissionPolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the rule group from which you want to delete the
                *          policy.</p>
                *          <p>You must be the owner of the rule group to perform this operation.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace DeletePermissionPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePermissionPolicyRequest) => any;
    }
    export interface DeletePermissionPolicyResponse {
    }
    export namespace DeletePermissionPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePermissionPolicyResponse) => any;
    }
    export interface DeleteRegexPatternSetRequest {
            /**
                * <p>The name of the set. You cannot change the name after you create the set.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id: string | undefined;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken: string | undefined;
    }
    export namespace DeleteRegexPatternSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRegexPatternSetRequest) => any;
    }
    export interface DeleteRegexPatternSetResponse {
    }
    export namespace DeleteRegexPatternSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRegexPatternSetResponse) => any;
    }
    export interface DeleteRuleGroupRequest {
            /**
                * <p>The name of the rule group. You cannot change the name of a rule group after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id: string | undefined;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken: string | undefined;
    }
    export namespace DeleteRuleGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRuleGroupRequest) => any;
    }
    export interface DeleteRuleGroupResponse {
    }
    export namespace DeleteRuleGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRuleGroupResponse) => any;
    }
    export interface DeleteWebACLRequest {
            /**
                * <p>The name of the web ACL. You cannot change the name of a web ACL after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id: string | undefined;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken: string | undefined;
    }
    export namespace DeleteWebACLRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWebACLRequest) => any;
    }
    export interface DeleteWebACLResponse {
    }
    export namespace DeleteWebACLResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWebACLResponse) => any;
    }
    export interface DescribeManagedRuleGroupRequest {
            /**
                * <p>The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.</p>
                */
            VendorName: string | undefined;
            /**
                * <p>The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>The version of the rule group. You can only use a version that is not scheduled for
                *          expiration. If you don't provide this, WAF uses the vendor's default version. </p>
                */
            VersionName?: string;
    }
    export namespace DescribeManagedRuleGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeManagedRuleGroupRequest) => any;
    }
    /**
        * <p>List of labels used by one or more of the rules of a <a>RuleGroup</a>. This
        *          summary object is used for the following rule group lists: </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>AvailableLabels</code> - Labels that rules add to matching requests.
        *                These labels are defined in the <code>RuleLabels</code> for a <a>Rule</a>. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ConsumedLabels</code> - Labels that rules match against.
        *                These labels are defined in a <code>LabelMatchStatement</code> specification, in the <a>Statement</a> definition of a rule.  </p>
        *             </li>
        *          </ul>
        */
    export interface LabelSummary {
            /**
                * <p>An individual label specification.</p>
                */
            Name?: string;
    }
    export namespace LabelSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelSummary) => any;
    }
    /**
        * <p>High-level information about a <a>Rule</a>, returned by operations like <a>DescribeManagedRuleGroup</a>. This provides information like the ID, that you can use to retrieve and manage a <code>RuleGroup</code>, and the ARN, that you provide to the <a>RuleGroupReferenceStatement</a> to use the rule group in a <a>Rule</a>.</p>
        */
    export interface RuleSummary {
            /**
                * <p>The name of the rule. </p>
                */
            Name?: string;
            /**
                * <p>The action that WAF should take on a web request when it matches a rule's
                *          statement. Settings at the web ACL level can override the rule action setting. </p>
                */
            Action?: RuleAction;
    }
    export namespace RuleSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleSummary) => any;
    }
    export interface DescribeManagedRuleGroupResponse {
            /**
                * <p>The managed rule group's version. </p>
                */
            VersionName?: string;
            /**
                * <p>The Amazon resource name (ARN) of the Amazon Simple Notification Service SNS topic that's used to record changes
                *          to the managed rule group. You can subscribe to the SNS topic to receive notifications when
                *          the managed rule group is modified, such as for new versions and for version expiration.
                *          For more information, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/welcome.html">Amazon Simple Notification Service Developer Guide</a>.</p>
                */
            SnsTopicArn?: string;
            /**
                * <p>The web ACL capacity units (WCUs) required for this rule group. WAF uses web ACL
                *          capacity units (WCU) to calculate and control the operating resources that are used to run
                *          your rules, rule groups, and web ACLs. WAF calculates capacity differently for each rule
                *          type, to reflect each rule's relative cost. Rule group capacity is fixed at creation, so
                *          users can plan their web ACL WCU usage when they use a rule group. The WCU limit for web
                *          ACLs is 1,500. </p>
                */
            Capacity?: number;
            /**
                * <p></p>
                */
            Rules?: RuleSummary[];
            /**
                * <p>The label namespace prefix for this rule group. All labels added by rules in this rule group have this prefix. </p>
                *          <ul>
                *             <li>
                *                <p>The syntax for the label namespace prefix for a managed rule group is the following: </p>
                *                <p>
                *                   <code>awswaf:managed:<vendor>:<rule group name></code>:</p>
                *             </li>
                *             <li>
                *                <p>When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: </p>
                *                <p>
                *                   <code><label namespace>:<label from rule></code>
                *                </p>
                *
                *             </li>
                *          </ul>
                */
            LabelNamespace?: string;
            /**
                * <p>The labels that one or more rules in this rule group add to matching web requests. These labels are defined in the <code>RuleLabels</code> for a <a>Rule</a>.</p>
                */
            AvailableLabels?: LabelSummary[];
            /**
                * <p>The labels that one or more rules in this rule group match against in label match statements. These labels are defined in a <code>LabelMatchStatement</code> specification, in the <a>Statement</a> definition of a rule.  </p>
                */
            ConsumedLabels?: LabelSummary[];
    }
    export namespace DescribeManagedRuleGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeManagedRuleGroupResponse) => any;
    }
    export interface DisassociateWebACLRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource to disassociate from the web ACL. </p>
                *
                *          <p>The ARN must be in one of the following formats:</p>
                *          <ul>
                *             <li>
                *                <p>For an Application Load Balancer: <code>arn:aws:elasticloadbalancing:<i>region</i>:<i>account-id</i>:loadbalancer/app/<i>load-balancer-name</i>/<i>load-balancer-id</i>
                *                   </code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>For an Amazon API Gateway REST API: <code>arn:aws:apigateway:<i>region</i>::/restapis/<i>api-id</i>/stages/<i>stage-name</i>
                *                   </code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>For an AppSync GraphQL API: <code>arn:aws:appsync:<i>region</i>:<i>account-id</i>:apis/<i>GraphQLApiId</i>
                *                   </code>
                *                </p>
                *             </li>
                *          </ul>
                */
            ResourceArn: string | undefined;
    }
    export namespace DisassociateWebACLRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateWebACLRequest) => any;
    }
    export interface DisassociateWebACLResponse {
    }
    export namespace DisassociateWebACLResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateWebACLResponse) => any;
    }
    export enum Platform {
            ANDROID = "ANDROID",
            IOS = "IOS"
    }
    export interface GenerateMobileSdkReleaseUrlRequest {
            /**
                * <p>The device platform.</p>
                */
            Platform: Platform | string | undefined;
            /**
                * <p>The release version. For the latest available version, specify
                *          <code>LATEST</code>.</p>
                */
            ReleaseVersion: string | undefined;
    }
    export namespace GenerateMobileSdkReleaseUrlRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateMobileSdkReleaseUrlRequest) => any;
    }
    export interface GenerateMobileSdkReleaseUrlResponse {
            /**
                * <p>The presigned download URL for the specified SDK release.</p>
                */
            Url?: string;
    }
    export namespace GenerateMobileSdkReleaseUrlResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateMobileSdkReleaseUrlResponse) => any;
    }
    export interface GetIPSetRequest {
            /**
                * <p>The name of the IP set. You cannot change the name of an <code>IPSet</code> after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id: string | undefined;
    }
    export namespace GetIPSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIPSetRequest) => any;
    }
    /**
        * <p>Contains zero or more IP addresses or blocks of IP addresses specified in Classless
        *          Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges
        *          except for /0. For information about CIDR notation, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless
        *             Inter-Domain Routing</a>. </p>
        *          <p>WAF assigns an ARN to each <code>IPSet</code> that you create. To use an IP set in a
        *          rule, you provide the ARN to the <a>Rule</a> statement <a>IPSetReferenceStatement</a>. </p>
        */
    export interface IPSet {
            /**
                * <p>The name of the IP set. You cannot change the name of an <code>IPSet</code> after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the entity.</p>
                */
            ARN: string | undefined;
            /**
                * <p>A description of the IP set that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>The version of the IP addresses, either <code>IPV4</code> or <code>IPV6</code>. </p>
                */
            IPAddressVersion: IPAddressVersion | string | undefined;
            /**
                * <p>Contains an array of strings that specifies zero or more IP addresses or blocks of IP addresses in Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges except for /0. </p>
                *          <p>Example address strings: </p>
                *          <ul>
                *             <li>
                *                <p>To configure WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify <code>192.0.2.44/32</code>.</p>
                *             </li>
                *             <li>
                *                <p>To configure WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify
                *                <code>192.0.2.0/24</code>.</p>
                *             </li>
                *             <li>
                *                <p>To configure WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify <code>1111:0000:0000:0000:0000:0000:0000:0111/128</code>.</p>
                *             </li>
                *             <li>
                *                <p>To configure WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify <code>1111:0000:0000:0000:0000:0000:0000:0000/64</code>.</p>
                *             </li>
                *          </ul>
                *          <p>For more information about CIDR notation, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless Inter-Domain Routing</a>.</p>
                *          <p>Example JSON <code>Addresses</code> specifications: </p>
                *          <ul>
                *             <li>
                *                <p>Empty array: <code>"Addresses": []</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Array with one address: <code>"Addresses": ["192.0.2.44/32"]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Array with three addresses: <code>"Addresses": ["192.0.2.44/32", "192.0.2.0/24", "192.0.0.0/16"]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>INVALID specification: <code>"Addresses": [""]</code> INVALID </p>
                *             </li>
                *          </ul>
                */
            Addresses: string[] | undefined;
    }
    export namespace IPSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IPSet) => any;
    }
    export interface GetIPSetResponse {
            /**
                * <p></p>
                */
            IPSet?: IPSet;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken?: string;
    }
    export namespace GetIPSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIPSetResponse) => any;
    }
    export interface GetLoggingConfigurationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the web ACL for which you want to get the <a>LoggingConfiguration</a>.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace GetLoggingConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoggingConfigurationRequest) => any;
    }
    export enum FilterBehavior {
            DROP = "DROP",
            KEEP = "KEEP"
    }
    /**
        * <p>A single label name condition for a <a>Condition</a> in a logging
        *          filter.</p>
        */
    export interface LabelNameCondition {
            /**
                * <p>The label name that a log record must contain in order to meet the condition. This must
                *          be a fully qualified label name. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label.  </p>
                */
            LabelName: string | undefined;
    }
    export namespace LabelNameCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelNameCondition) => any;
    }
    /**
        * <p>A single match condition for a <a>Filter</a>.</p>
        */
    export interface Condition {
            /**
                * <p>A single action condition. This is the action setting that a log record must contain in order to meet the condition.</p>
                */
            ActionCondition?: ActionCondition;
            /**
                * <p>A single label name condition. This is the fully qualified label name that a log record must contain in order to meet the condition.
                *        Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label.  </p>
                */
            LabelNameCondition?: LabelNameCondition;
    }
    export namespace Condition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Condition) => any;
    }
    export enum FilterRequirement {
            MEETS_ALL = "MEETS_ALL",
            MEETS_ANY = "MEETS_ANY"
    }
    /**
        * <p>A single logging filter, used in <a>LoggingFilter</a>. </p>
        */
    export interface Filter {
            /**
                * <p>How to handle logs that satisfy the filter's conditions and requirement. </p>
                */
            Behavior: FilterBehavior | string | undefined;
            /**
                * <p>Logic to apply to the filtering conditions. You can specify that, in order to satisfy
                *          the filter, a log must match all conditions or must match at least one condition.</p>
                */
            Requirement: FilterRequirement | string | undefined;
            /**
                * <p>Match conditions for the filter.</p>
                */
            Conditions: Condition[] | undefined;
    }
    export namespace Filter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Filter) => any;
    }
    /**
        * <p>Filtering that specifies which web requests are kept in the logs and which are dropped,
        *          defined for a web ACL's <a>LoggingConfiguration</a>. </p>
        *          <p>You can filter on the rule action and on the web request labels that were applied by
        *          matching rules during web ACL evaluation. </p>
        */
    export interface LoggingFilter {
            /**
                * <p>The filters that you want to apply to the logs. </p>
                */
            Filters: Filter[] | undefined;
            /**
                * <p>Default handling for logs that don't match any of the specified filtering conditions.
                *       </p>
                */
            DefaultBehavior: FilterBehavior | string | undefined;
    }
    export namespace LoggingFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoggingFilter) => any;
    }
    /**
        * <p>Defines an association between logging destinations and a web ACL resource, for logging
        *          from WAF. As part of the association, you can specify parts of the standard logging
        *          fields to keep out of the logs and you can specify filters so that you log only a subset of
        *          the logging records. </p>
        *          <note>
        *             <p>You can define one logging destination per web ACL.</p>
        *          </note>
        *          <p>You can access information about the traffic that WAF inspects using the following
        *          steps:</p>
        *          <ol>
        *             <li>
        *                <p>Create your logging destination. You can use an Amazon CloudWatch Logs log group, an Amazon Simple Storage Service (Amazon S3) bucket, or an Amazon Kinesis Data Firehose.
        *                  For information about configuring logging destinations and the permissions that are required for each, see
        *                  <a href="https://docs.aws.amazon.com/waf/latest/developerguide/logging.html">Logging web ACL traffic information</a>
        *                  in the <i>WAF Developer Guide</i>.</p>
        *             </li>
        *             <li>
        *                <p>Associate your logging destination to your web ACL using a
        *                   <code>PutLoggingConfiguration</code> request.</p>
        *             </li>
        *          </ol>
        *          <p>When you successfully enable logging using a <code>PutLoggingConfiguration</code>
        *           request, WAF creates an additional role or policy that is required to write
        *               logs to the logging destination. For an Amazon CloudWatch Logs log group, WAF creates a resource policy on the log group.
        *           For an Amazon S3 bucket, WAF creates a bucket policy. For an Amazon Kinesis Data Firehose, WAF creates a service-linked role.</p>
        *          <p>For additional information about web ACL logging, see
        *            <a href="https://docs.aws.amazon.com/waf/latest/developerguide/logging.html">Logging web ACL traffic information</a>
        *                in the <i>WAF Developer Guide</i>.</p>
        */
    export interface LoggingConfiguration {
            /**
                * <p>The Amazon Resource Name (ARN) of the web ACL that you want to associate with
                *             <code>LogDestinationConfigs</code>.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The logging destination configuration that you want to associate with the web
                *          ACL.</p>
                *          <note>
                *             <p>You can associate one logging destination to a web ACL.</p>
                *          </note>
                */
            LogDestinationConfigs: string[] | undefined;
            /**
                * <p>The parts of the request that you want to keep out of the logs. For example, if you
                *          redact the <code>SingleHeader</code> field, the <code>HEADER</code> field in the logs will
                *          be <code>xxx</code>. </p>
                *          <note>
                *             <p>You can specify only the following fields for redaction: <code>UriPath</code>,
                *                <code>QueryString</code>, <code>SingleHeader</code>, <code>Method</code>, and
                *                <code>JsonBody</code>.</p>
                *          </note>
                */
            RedactedFields?: FieldToMatch[];
            /**
                * <p>Indicates whether the logging configuration was created by Firewall Manager, as part of an
                *          WAF policy configuration. If true, only Firewall Manager can modify or delete the
                *          configuration. </p>
                */
            ManagedByFirewallManager?: boolean;
            /**
                * <p>Filtering that specifies which web requests are kept in the logs and which are dropped.
                *          You can filter on the rule action and on the web request labels that were applied by
                *          matching rules during web ACL evaluation. </p>
                */
            LoggingFilter?: LoggingFilter;
    }
    export namespace LoggingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoggingConfiguration) => any;
    }
    export interface GetLoggingConfigurationResponse {
            /**
                * <p>The <a>LoggingConfiguration</a> for the specified web ACL.</p>
                */
            LoggingConfiguration?: LoggingConfiguration;
    }
    export namespace GetLoggingConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoggingConfigurationResponse) => any;
    }
    export interface GetManagedRuleSetRequest {
            /**
                * <p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>
                *          <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p>
                */
            Id: string | undefined;
    }
    export namespace GetManagedRuleSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetManagedRuleSetRequest) => any;
    }
    /**
        * <p>Information for a single version of a managed rule set. </p>
        *          <note>
        *             <p>This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. </p>
        *             <p>Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are <code>ListManagedRuleSets</code>, <code>GetManagedRuleSet</code>, <code>PutManagedRuleSetVersions</code>, and <code>UpdateManagedRuleSetVersionExpiryDate</code>.</p>
        *          </note>
        */
    export interface ManagedRuleSetVersion {
            /**
                * <p>The Amazon Resource Name (ARN) of the vendor rule group that's used to define the
                *          published version of your managed rule group. </p>
                */
            AssociatedRuleGroupArn?: string;
            /**
                * <p>The web ACL capacity units (WCUs) required for this rule group.</p>
                *           <p>WAF uses WCUs to calculate and control the operating
                *          resources that are used to run your rules, rule groups, and web ACLs. WAF
                *          calculates capacity differently for each rule type, to reflect the relative cost of each rule.
                *          Simple rules that cost little to run use fewer WCUs than more complex rules
                * 				that use more processing power.
                * 				Rule group capacity is fixed at creation, which helps users plan their
                *          web ACL WCU usage when they use a rule group.
                *          The WCU limit for web ACLs is 1,500.  </p>
                */
            Capacity?: number;
            /**
                * <p>The amount of time you expect this version of your managed rule group to last, in days.
                *       </p>
                */
            ForecastedLifetime?: number;
            /**
                * <p>The time that you first published this version. </p>
                *          <p>Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". </p>
                */
            PublishTimestamp?: Date;
            /**
                * <p>The last time that you updated this version. </p>
                *          <p>Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". </p>
                */
            LastUpdateTimestamp?: Date;
            /**
                * <p>The time that this version is set to expire.</p>
                *          <p>Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". </p>
                */
            ExpiryTimestamp?: Date;
    }
    export namespace ManagedRuleSetVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManagedRuleSetVersion) => any;
    }
    /**
        * <p>A set of rules that is managed by Amazon Web Services and Amazon Web Services Marketplace sellers to provide versioned managed
        *          rule groups for customers of WAF.</p>
        *          <note>
        *             <p>This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. </p>
        *             <p>Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are <code>ListManagedRuleSets</code>, <code>GetManagedRuleSet</code>, <code>PutManagedRuleSetVersions</code>, and <code>UpdateManagedRuleSetVersionExpiryDate</code>.</p>
        *          </note>
        */
    export interface ManagedRuleSet {
            /**
                * <p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>
                *          <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p>
                */
            Name: string | undefined;
            /**
                * <p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p>
                */
            Id: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the entity.</p>
                */
            ARN: string | undefined;
            /**
                * <p>A description of the set that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>The versions of this managed rule set that are available for use by customers. </p>
                */
            PublishedVersions?: Record<string, ManagedRuleSetVersion>;
            /**
                * <p>The version that you would like your customers to use.</p>
                */
            RecommendedVersion?: string;
            /**
                * <p>The label namespace prefix for the managed rule groups that are offered to customers from this managed rule set. All labels that are added by rules in the managed rule group have this prefix. </p>
                *          <ul>
                *             <li>
                *                <p>The syntax for the label namespace prefix for a managed rule group is the following: </p>
                *                <p>
                *                   <code>awswaf:managed:<vendor>:<rule group name></code>:</p>
                *             </li>
                *             <li>
                *                <p>When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: </p>
                *                <p>
                *                   <code><label namespace>:<label from rule></code>
                *                </p>
                *
                *             </li>
                *          </ul>
                */
            LabelNamespace?: string;
    }
    export namespace ManagedRuleSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManagedRuleSet) => any;
    }
    export interface GetManagedRuleSetResponse {
            /**
                * <p>The managed rule set that you requested. </p>
                */
            ManagedRuleSet?: ManagedRuleSet;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken?: string;
    }
    export namespace GetManagedRuleSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetManagedRuleSetResponse) => any;
    }
    export interface GetMobileSdkReleaseRequest {
            /**
                * <p>The device platform.</p>
                */
            Platform: Platform | string | undefined;
            /**
                * <p>The release version. For the latest available version, specify
                *          <code>LATEST</code>.</p>
                */
            ReleaseVersion: string | undefined;
    }
    export namespace GetMobileSdkReleaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMobileSdkReleaseRequest) => any;
    }
    /**
        * <p>Information for a release of the mobile SDK, including release notes and tags.</p>
        *          <p>The mobile SDK is not generally available. Customers who have access to the mobile SDK can use it to establish and manage Security Token Service (STS) security tokens for use in HTTP(S) requests from a mobile device to WAF. For more information, see
        * <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-application-integration.html">WAF client application integration</a> in the <i>WAF Developer Guide</i>.</p>
        */
    export interface MobileSdkRelease {
            /**
                * <p>The release version. </p>
                */
            ReleaseVersion?: string;
            /**
                * <p>The timestamp of the release. </p>
                */
            Timestamp?: Date;
            /**
                * <p>Notes describing the release.</p>
                */
            ReleaseNotes?: string;
            /**
                * <p>Tags that are associated with the release. </p>
                */
            Tags?: Tag[];
    }
    export namespace MobileSdkRelease {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MobileSdkRelease) => any;
    }
    export interface GetMobileSdkReleaseResponse {
            /**
                * <p>Information for a specified SDK release, including release notes and tags.</p>
                */
            MobileSdkRelease?: MobileSdkRelease;
    }
    export namespace GetMobileSdkReleaseResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMobileSdkReleaseResponse) => any;
    }
    export interface GetPermissionPolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the rule group for which you want to get the
                *          policy.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace GetPermissionPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPermissionPolicyRequest) => any;
    }
    export interface GetPermissionPolicyResponse {
            /**
                * <p>The IAM policy that is attached to the specified rule group.</p>
                */
            Policy?: string;
    }
    export namespace GetPermissionPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPermissionPolicyResponse) => any;
    }
    export interface GetRateBasedStatementManagedKeysRequest {
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>The name of the web ACL. You cannot change the name of a web ACL after you create it.</p>
                */
            WebACLName: string | undefined;
            /**
                * <p>The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            WebACLId: string | undefined;
            /**
                * <p>The name of the rule group reference statement in your web ACL. This is required only
                *          when you have the rate-based rule nested inside a rule group. </p>
                */
            RuleGroupRuleName?: string;
            /**
                * <p>The name of the rate-based rule to get the keys for. If you have the rule defined inside
                *          a rule group that you're using in your web ACL, also provide the name of the rule group
                *          reference statement in the request parameter <code>RuleGroupRuleName</code>.</p>
                */
            RuleName: string | undefined;
    }
    export namespace GetRateBasedStatementManagedKeysRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRateBasedStatementManagedKeysRequest) => any;
    }
    /**
        * <p>The set of IP addresses that are currently blocked for a <a>RateBasedStatement</a>.</p>
        */
    export interface RateBasedStatementManagedKeysIPSet {
            /**
                * <p>The version of the IP addresses, either <code>IPV4</code> or <code>IPV6</code>. </p>
                */
            IPAddressVersion?: IPAddressVersion | string;
            /**
                * <p>The IP addresses that are currently blocked.</p>
                */
            Addresses?: string[];
    }
    export namespace RateBasedStatementManagedKeysIPSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RateBasedStatementManagedKeysIPSet) => any;
    }
    export interface GetRateBasedStatementManagedKeysResponse {
            /**
                * <p>The keys that are of Internet Protocol version 4 (IPv4). </p>
                */
            ManagedKeysIPV4?: RateBasedStatementManagedKeysIPSet;
            /**
                * <p>The keys that are of Internet Protocol version 6 (IPv6). </p>
                */
            ManagedKeysIPV6?: RateBasedStatementManagedKeysIPSet;
    }
    export namespace GetRateBasedStatementManagedKeysResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRateBasedStatementManagedKeysResponse) => any;
    }
    export interface GetRegexPatternSetRequest {
            /**
                * <p>The name of the set. You cannot change the name after you create the set.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id: string | undefined;
    }
    export namespace GetRegexPatternSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRegexPatternSetRequest) => any;
    }
    /**
        * <p>Contains one or more regular expressions. </p>
        *          <p>WAF assigns an ARN to each <code>RegexPatternSet</code> that you create. To use a
        *          set in a rule, you provide the ARN to the <a>Rule</a> statement <a>RegexPatternSetReferenceStatement</a>. </p>
        */
    export interface RegexPatternSet {
            /**
                * <p>The name of the set. You cannot change the name after you create the set.</p>
                */
            Name?: string;
            /**
                * <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the entity.</p>
                */
            ARN?: string;
            /**
                * <p>A description of the set that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>The regular expression patterns in the set.</p>
                */
            RegularExpressionList?: Regex[];
    }
    export namespace RegexPatternSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegexPatternSet) => any;
    }
    export interface GetRegexPatternSetResponse {
            /**
                * <p></p>
                */
            RegexPatternSet?: RegexPatternSet;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken?: string;
    }
    export namespace GetRegexPatternSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRegexPatternSetResponse) => any;
    }
    export interface GetRuleGroupRequest {
            /**
                * <p>The name of the rule group. You cannot change the name of a rule group after you create it.</p>
                */
            Name?: string;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope?: Scope | string;
            /**
                * <p>A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the entity.</p>
                */
            ARN?: string;
    }
    export namespace GetRuleGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRuleGroupRequest) => any;
    }
    /**
        * <p>In a <a>GetSampledRequests</a> request, the <code>StartTime</code> and
        *             <code>EndTime</code> objects specify the time range for which you want WAF to
        *          return a sample of web requests.</p>
        *          <p>You must specify the times in Coordinated Universal Time (UTC) format. UTC format
        *          includes the special designator, <code>Z</code>. For example,
        *             <code>"2016-09-27T14:50Z"</code>. You can specify any time range in the previous three
        *          hours.</p>
        *          <p>In a <a>GetSampledRequests</a> response, the <code>StartTime</code> and
        *             <code>EndTime</code> objects specify the time range for which WAF actually returned a
        *          sample of web requests. WAF gets the specified number of requests from among the first
        *          5,000 requests that your Amazon Web Services resource receives during the specified time period. If your
        *          resource receives more than 5,000 requests during that period, WAF stops sampling after
        *          the 5,000th request. In that case, <code>EndTime</code> is the time that WAF received the
        *          5,000th request.</p>
        */
    export interface TimeWindow {
            /**
                * <p>The beginning of the time range from which you want <code>GetSampledRequests</code> to
                *          return a sample of the requests that your Amazon Web Services resource received. You must specify the
                *          times in Coordinated Universal Time (UTC) format. UTC format includes the special
                *          designator, <code>Z</code>. For example, <code>"2016-09-27T14:50Z"</code>. You can specify
                *          any time range in the previous three hours.</p>
                */
            StartTime: Date | undefined;
            /**
                * <p>The end of the time range from which you want <code>GetSampledRequests</code> to return
                *          a sample of the requests that your Amazon Web Services resource received. You must specify the times in
                *          Coordinated Universal Time (UTC) format. UTC format includes the special designator,
                *             <code>Z</code>. For example, <code>"2016-09-27T14:50Z"</code>. You can specify any time
                *          range in the previous three hours.</p>
                */
            EndTime: Date | undefined;
    }
    export namespace TimeWindow {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TimeWindow) => any;
    }
    export interface GetSampledRequestsRequest {
            /**
                * <p>The Amazon resource name (ARN) of the <code>WebACL</code> for which you want a sample of
                *          requests.</p>
                */
            WebAclArn: string | undefined;
            /**
                * <p>The metric name assigned to the <code>Rule</code> or <code>RuleGroup</code> for which
                *          you want a sample of requests.</p>
                */
            RuleMetricName: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>The start date and time and the end date and time of the range for which you want
                *             <code>GetSampledRequests</code> to return a sample of requests. You must specify the
                *          times in Coordinated Universal Time (UTC) format. UTC format includes the special
                *          designator, <code>Z</code>. For example, <code>"2016-09-27T14:50Z"</code>. You can specify
                *          any time range in the previous three hours. If you specify a start time that's earlier than
                *          three hours ago, WAF sets it to three hours ago.</p>
                */
            TimeWindow: TimeWindow | undefined;
            /**
                * <p>The number of requests that you want WAF to return from among the first 5,000
                *          requests that your Amazon Web Services resource received during the time range. If your resource received
                *          fewer requests than the value of <code>MaxItems</code>, <code>GetSampledRequests</code>
                *          returns information about all of them. </p>
                */
            MaxItems: number | undefined;
    }
    export namespace GetSampledRequestsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSampledRequestsRequest) => any;
    }
    export enum FailureReason {
            TOKEN_EXPIRED = "TOKEN_EXPIRED",
            TOKEN_MISSING = "TOKEN_MISSING"
    }
    /**
        * <p>The result from the inspection of the web request for a valid <code>CAPTCHA</code>
        *          token. </p>
        */
    export interface CaptchaResponse {
            /**
                * <p>The HTTP response code indicating the status of the <code>CAPTCHA</code> token in the
                *          web request. If the token is missing, invalid, or expired, this code is <code>405 Method
                *             Not Allowed</code>.</p>
                */
            ResponseCode?: number;
            /**
                * <p>The time that the <code>CAPTCHA</code> puzzle was solved for the supplied token. </p>
                */
            SolveTimestamp?: number;
            /**
                * <p>The reason for failure, populated when the evaluation of the token fails.</p>
                */
            FailureReason?: FailureReason | string;
    }
    export namespace CaptchaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CaptchaResponse) => any;
    }
    /**
        * <p>Part of the response from <a>GetSampledRequests</a>. This is a complex type
        *          that appears as <code>Headers</code> in the response syntax. <code>HTTPHeader</code>
        *          contains the names and values of all of the headers that appear in one of the web requests.
        *       </p>
        */
    export interface HTTPHeader {
            /**
                * <p>The name of the HTTP header.</p>
                */
            Name?: string;
            /**
                * <p>The value of the HTTP header.</p>
                */
            Value?: string;
    }
    export namespace HTTPHeader {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HTTPHeader) => any;
    }
    /**
        * <p>Part of the response from <a>GetSampledRequests</a>. This is a complex type
        *          that appears as <code>Request</code> in the response syntax. <code>HTTPRequest</code>
        *          contains information about one of the web requests. </p>
        */
    export interface HTTPRequest {
            /**
                * <p>The IP address that the request originated from. If the web ACL is associated with a
                *          CloudFront distribution, this is the value of one of the following fields in CloudFront access
                *          logs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>c-ip</code>, if the viewer did not use an HTTP proxy or a load balancer to send
                *                the request</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>x-forwarded-for</code>, if the viewer did use an HTTP proxy or a load balancer
                *                to send the request</p>
                *             </li>
                *          </ul>
                */
            ClientIP?: string;
            /**
                * <p>The two-letter country code for the country that the request originated from. For a
                *          current list of country codes, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1
                *          alpha-2</a>.</p>
                */
            Country?: string;
            /**
                * <p>The URI path of the request, which identifies the resource, for example,
                *             <code>/images/daily-ad.jpg</code>.</p>
                */
            URI?: string;
            /**
                * <p>The HTTP method specified in the sampled web request. </p>
                */
            Method?: string;
            /**
                * <p>The HTTP version specified in the sampled web request, for example,
                *             <code>HTTP/1.1</code>.</p>
                */
            HTTPVersion?: string;
            /**
                * <p>A complex type that contains the name and value for each header in the sampled web
                *          request.</p>
                */
            Headers?: HTTPHeader[];
    }
    export namespace HTTPRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HTTPRequest) => any;
    }
    /**
        * <p>Represents a single sampled web request. The response from <a>GetSampledRequests</a> includes a <code>SampledHTTPRequests</code> complex type
        *          that appears as <code>SampledRequests</code> in the response syntax.
        *             <code>SampledHTTPRequests</code> contains an array of <code>SampledHTTPRequest</code>
        *          objects.</p>
        */
    export interface SampledHTTPRequest {
            /**
                * <p>A complex type that contains detailed information about the request.</p>
                */
            Request: HTTPRequest | undefined;
            /**
                * <p>A value that indicates how one result in the response relates proportionally to other
                *          results in the response. For example, a result that has a weight of <code>2</code>
                *          represents roughly twice as many web requests as a result that has a weight of
                *             <code>1</code>.</p>
                */
            Weight: number | undefined;
            /**
                * <p>The time at which WAF received the request from your Amazon Web Services resource, in Unix time
                *          format (in seconds).</p>
                */
            Timestamp?: Date;
            /**
                * <p>The action for the <code>Rule</code> that the request matched: <code>Allow</code>,
                *             <code>Block</code>, or <code>Count</code>.</p>
                */
            Action?: string;
            /**
                * <p>The name of the <code>Rule</code> that the request matched. For managed rule groups, the
                *          format for this name is <code><vendor name>#<managed rule group name>#<rule
                *             name></code>. For your own rule groups, the format for this name is <code><rule
                *             group name>#<rule name></code>. If the rule is not in a rule group, this field
                *          is absent. </p>
                */
            RuleNameWithinRuleGroup?: string;
            /**
                * <p>Custom request headers inserted by WAF into the request, according to the custom
                *          request configuration for the matching rule action.</p>
                */
            RequestHeadersInserted?: HTTPHeader[];
            /**
                * <p>The response code that was sent for the request.</p>
                */
            ResponseCodeSent?: number;
            /**
                * <p>Labels applied to the web request by matching rules. WAF applies fully qualified
                *          labels to matching web requests. A fully qualified label is the concatenation of a label
                *          namespace and a rule label. The rule's rule group or web ACL defines the label namespace. </p>
                *          <p>For example,
                *             <code>awswaf:111122223333:myRuleGroup:testRules:testNS1:testNS2:labelNameA</code> or
                *             <code>awswaf:managed:aws:managed-rule-set:header:encoding:utf8</code>. </p>
                */
            Labels?: Label[];
            /**
                * <p>The <code>CAPTCHA</code> response for the request.</p>
                */
            CaptchaResponse?: CaptchaResponse;
    }
    export namespace SampledHTTPRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SampledHTTPRequest) => any;
    }
    export interface GetSampledRequestsResponse {
            /**
                * <p>A complex type that contains detailed information about each of the requests in the
                *          sample.</p>
                */
            SampledRequests?: SampledHTTPRequest[];
            /**
                * <p>The total number of requests from which <code>GetSampledRequests</code> got a sample of
                *             <code>MaxItems</code> requests. If <code>PopulationSize</code> is less than
                *             <code>MaxItems</code>, the sample includes every request that your Amazon Web Services resource
                *          received during the specified time range.</p>
                */
            PopulationSize?: number;
            /**
                * <p>Usually, <code>TimeWindow</code> is the time range that you specified in the
                *             <code>GetSampledRequests</code> request. However, if your Amazon Web Services resource received more
                *          than 5,000 requests during the time range that you specified in the request,
                *             <code>GetSampledRequests</code> returns the time range for the first 5,000 requests.
                *          Times are in Coordinated Universal Time (UTC) format.</p>
                */
            TimeWindow?: TimeWindow;
    }
    export namespace GetSampledRequestsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSampledRequestsResponse) => any;
    }
    export interface GetWebACLRequest {
            /**
                * <p>The name of the web ACL. You cannot change the name of a web ACL after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id: string | undefined;
    }
    export namespace GetWebACLRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWebACLRequest) => any;
    }
    export interface GetWebACLForResourceRequest {
            /**
                * <p>The ARN (Amazon Resource Name) of the resource.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace GetWebACLForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWebACLForResourceRequest) => any;
    }
    export interface ListAvailableManagedRuleGroupsRequest {
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p>The maximum number of objects that you want WAF to return for this request. If more
                *           objects are available, in the response, WAF provides a
                *          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                */
            Limit?: number;
    }
    export namespace ListAvailableManagedRuleGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAvailableManagedRuleGroupsRequest) => any;
    }
    /**
        * <p>High-level information about a managed rule group, returned by <a>ListAvailableManagedRuleGroups</a>. This provides information like the name and vendor name, that you provide when you add a <a>ManagedRuleGroupStatement</a> to a web ACL. Managed rule groups include Amazon Web Services Managed Rules rule groups, which are free of charge to WAF customers, and Amazon Web Services Marketplace managed rule groups, which you can subscribe to through Amazon Web Services Marketplace. </p>
        */
    export interface ManagedRuleGroupSummary {
            /**
                * <p>The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.</p>
                */
            VendorName?: string;
            /**
                * <p>The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.</p>
                */
            Name?: string;
            /**
                * <p>Indicates whether the managed rule group is versioned. If it is, you can retrieve the
                *          versions list by calling <a>ListAvailableManagedRuleGroupVersions</a>. </p>
                */
            VersioningSupported?: boolean;
            /**
                * <p>The description of the managed rule group, provided by Amazon Web Services Managed Rules or the Amazon Web Services Marketplace seller who manages it.</p>
                */
            Description?: string;
    }
    export namespace ManagedRuleGroupSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManagedRuleGroupSummary) => any;
    }
    export interface ListAvailableManagedRuleGroupsResponse {
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p></p>
                */
            ManagedRuleGroups?: ManagedRuleGroupSummary[];
    }
    export namespace ListAvailableManagedRuleGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAvailableManagedRuleGroupsResponse) => any;
    }
    export interface ListAvailableManagedRuleGroupVersionsRequest {
            /**
                * <p>The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.</p>
                */
            VendorName: string | undefined;
            /**
                * <p>The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p>The maximum number of objects that you want WAF to return for this request. If more
                *           objects are available, in the response, WAF provides a
                *          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                */
            Limit?: number;
    }
    export namespace ListAvailableManagedRuleGroupVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAvailableManagedRuleGroupVersionsRequest) => any;
    }
    /**
        * <p>Describes a single version of a managed rule group. </p>
        */
    export interface ManagedRuleGroupVersion {
            /**
                * <p>The version name. </p>
                */
            Name?: string;
            /**
                * <p>The date and time that the managed rule group owner updated the rule group version
                *          information. </p>
                */
            LastUpdateTimestamp?: Date;
    }
    export namespace ManagedRuleGroupVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManagedRuleGroupVersion) => any;
    }
    export interface ListAvailableManagedRuleGroupVersionsResponse {
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p>The versions that are currently available for the specified managed rule group. </p>
                */
            Versions?: ManagedRuleGroupVersion[];
            /**
                * <p>The name of the version that's currently set as the default. </p>
                */
            CurrentDefaultVersion?: string;
    }
    export namespace ListAvailableManagedRuleGroupVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAvailableManagedRuleGroupVersionsResponse) => any;
    }
    export interface ListIPSetsRequest {
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p>The maximum number of objects that you want WAF to return for this request. If more
                *           objects are available, in the response, WAF provides a
                *          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                */
            Limit?: number;
    }
    export namespace ListIPSetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIPSetsRequest) => any;
    }
    export interface ListIPSetsResponse {
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p>Array of IPSets. This may not be the full list of IPSets that you have defined. See the
                *             <code>Limit</code> specification for this request.</p>
                */
            IPSets?: IPSetSummary[];
    }
    export namespace ListIPSetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListIPSetsResponse) => any;
    }
    export interface ListLoggingConfigurationsRequest {
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p>The maximum number of objects that you want WAF to return for this request. If more
                *           objects are available, in the response, WAF provides a
                *          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                */
            Limit?: number;
    }
    export namespace ListLoggingConfigurationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLoggingConfigurationsRequest) => any;
    }
    export interface ListLoggingConfigurationsResponse {
            /**
                * <p></p>
                */
            LoggingConfigurations?: LoggingConfiguration[];
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
    }
    export namespace ListLoggingConfigurationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLoggingConfigurationsResponse) => any;
    }
    export interface ListManagedRuleSetsRequest {
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p>The maximum number of objects that you want WAF to return for this request. If more
                *           objects are available, in the response, WAF provides a
                *          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                */
            Limit?: number;
    }
    export namespace ListManagedRuleSetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListManagedRuleSetsRequest) => any;
    }
    /**
        * <p>High-level information for a managed rule set. </p>
        *          <note>
        *             <p>This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. </p>
        *             <p>Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are <code>ListManagedRuleSets</code>, <code>GetManagedRuleSet</code>, <code>PutManagedRuleSetVersions</code>, and <code>UpdateManagedRuleSetVersionExpiryDate</code>.</p>
        *          </note>
        */
    export interface ManagedRuleSetSummary {
            /**
                * <p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>
                *          <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p>
                */
            Name?: string;
            /**
                * <p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p>
                */
            Id?: string;
            /**
                * <p>A description of the set that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the entity.</p>
                */
            ARN?: string;
            /**
                * <p>The label namespace prefix for the managed rule groups that are offered to customers from this managed rule set. All labels that are added by rules in the managed rule group have this prefix. </p>
                *          <ul>
                *             <li>
                *                <p>The syntax for the label namespace prefix for a managed rule group is the following: </p>
                *                <p>
                *                   <code>awswaf:managed:<vendor>:<rule group name></code>:</p>
                *             </li>
                *             <li>
                *                <p>When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: </p>
                *                <p>
                *                   <code><label namespace>:<label from rule></code>
                *                </p>
                *
                *             </li>
                *          </ul>
                */
            LabelNamespace?: string;
    }
    export namespace ManagedRuleSetSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManagedRuleSetSummary) => any;
    }
    export interface ListManagedRuleSetsResponse {
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p>Your managed rule sets. </p>
                */
            ManagedRuleSets?: ManagedRuleSetSummary[];
    }
    export namespace ListManagedRuleSetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListManagedRuleSetsResponse) => any;
    }
    export interface ListMobileSdkReleasesRequest {
            /**
                * <p>The device platform to retrieve the list for.</p>
                */
            Platform: Platform | string | undefined;
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p>The maximum number of objects that you want WAF to return for this request. If more
                *           objects are available, in the response, WAF provides a
                *          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                */
            Limit?: number;
    }
    export namespace ListMobileSdkReleasesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMobileSdkReleasesRequest) => any;
    }
    /**
        * <p>High level information for an SDK release. </p>
        */
    export interface ReleaseSummary {
            /**
                * <p>The release version. </p>
                */
            ReleaseVersion?: string;
            /**
                * <p>The timestamp of the release. </p>
                */
            Timestamp?: Date;
    }
    export namespace ReleaseSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReleaseSummary) => any;
    }
    export interface ListMobileSdkReleasesResponse {
            /**
                * <p>High level information for the available SDK releases. </p>
                */
            ReleaseSummaries?: ReleaseSummary[];
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
    }
    export namespace ListMobileSdkReleasesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMobileSdkReleasesResponse) => any;
    }
    export interface ListRegexPatternSetsRequest {
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p>The maximum number of objects that you want WAF to return for this request. If more
                *           objects are available, in the response, WAF provides a
                *          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                */
            Limit?: number;
    }
    export namespace ListRegexPatternSetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRegexPatternSetsRequest) => any;
    }
    export interface ListRegexPatternSetsResponse {
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p></p>
                */
            RegexPatternSets?: RegexPatternSetSummary[];
    }
    export namespace ListRegexPatternSetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRegexPatternSetsResponse) => any;
    }
    export enum ResourceType {
            API_GATEWAY = "API_GATEWAY",
            APPLICATION_LOAD_BALANCER = "APPLICATION_LOAD_BALANCER",
            APPSYNC = "APPSYNC"
    }
    export interface ListResourcesForWebACLRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the web ACL.</p>
                */
            WebACLArn: string | undefined;
            /**
                * <p>Used for web ACLs that are scoped for regional applications.
                *          A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API. </p>
                */
            ResourceType?: ResourceType | string;
    }
    export namespace ListResourcesForWebACLRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourcesForWebACLRequest) => any;
    }
    export interface ListResourcesForWebACLResponse {
            /**
                * <p>The array of Amazon Resource Names (ARNs) of the associated resources.</p>
                */
            ResourceArns?: string[];
    }
    export namespace ListResourcesForWebACLResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourcesForWebACLResponse) => any;
    }
    export interface ListRuleGroupsRequest {
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p>The maximum number of objects that you want WAF to return for this request. If more
                *           objects are available, in the response, WAF provides a
                *          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                */
            Limit?: number;
    }
    export namespace ListRuleGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRuleGroupsRequest) => any;
    }
    export interface ListRuleGroupsResponse {
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p></p>
                */
            RuleGroups?: RuleGroupSummary[];
    }
    export namespace ListRuleGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRuleGroupsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p>The maximum number of objects that you want WAF to return for this request. If more
                *           objects are available, in the response, WAF provides a
                *          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                */
            Limit?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceARN: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    /**
        * <p>The collection of tagging definitions for an Amazon Web Services resource. Tags are key:value pairs
        *          that you can use to categorize and manage your resources, for purposes like billing or
        *          other management. Typically, the tag key represents a category, such as "environment", and
        *          the tag value represents a specific value within that category, such as "test,"
        *          "development," or "production". Or you might set the tag key to "customer" and the value to
        *          the customer name or ID. You can specify one or more tags to add to each Amazon Web Services resource, up
        *          to 50 tags for a resource.</p>
        *          <p>You can tag the Amazon Web Services resources that you manage through WAF: web ACLs, rule
        *          groups, IP sets, and regex pattern sets. You can't manage or view tags through the WAF
        *          console. </p>
        */
    export interface TagInfoForResource {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceARN?: string;
            /**
                * <p>The array of <a>Tag</a> objects defined for the resource. </p>
                */
            TagList?: Tag[];
    }
    export namespace TagInfoForResource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagInfoForResource) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p>The collection of tagging definitions for the resource. </p>
                */
            TagInfoForResource?: TagInfoForResource;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListWebACLsRequest {
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p>The maximum number of objects that you want WAF to return for this request. If more
                *           objects are available, in the response, WAF provides a
                *          <code>NextMarker</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                */
            Limit?: number;
    }
    export namespace ListWebACLsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWebACLsRequest) => any;
    }
    export interface ListWebACLsResponse {
            /**
                * <p>When you request a list of objects with a <code>Limit</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the limit, WAF returns a <code>NextMarker</code>
                *          value in the response. To retrieve the next batch of objects, provide the marker from the prior call in your next request.</p>
                */
            NextMarker?: string;
            /**
                * <p></p>
                */
            WebACLs?: WebACLSummary[];
    }
    export namespace ListWebACLsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWebACLsResponse) => any;
    }
    export interface PutLoggingConfigurationRequest {
            /**
                * <p></p>
                */
            LoggingConfiguration: LoggingConfiguration | undefined;
    }
    export namespace PutLoggingConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutLoggingConfigurationRequest) => any;
    }
    export interface PutLoggingConfigurationResponse {
            /**
                * <p></p>
                */
            LoggingConfiguration?: LoggingConfiguration;
    }
    export namespace PutLoggingConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutLoggingConfigurationResponse) => any;
    }
    /**
        * <p>The operation failed because you don't have the permissions that your logging
        *          configuration requires. For information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/logging.html">Logging web ACL traffic information</a>
        *          in the <i>WAF Developer Guide</i>.</p>
        */
    export class WAFLogDestinationPermissionIssueException extends __BaseException {
            readonly name: "WAFLogDestinationPermissionIssueException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFLogDestinationPermissionIssueException, __BaseException>);
    }
    /**
        * <p>WAF is not able to access the service linked role. This can be caused by a
        *          previous <code>PutLoggingConfiguration</code> request, which can lock the service linked
        *          role for about 20 seconds. Please try your request again. The service linked role can also
        *          be locked by a previous <code>DeleteServiceLinkedRole</code> request, which can lock the
        *          role for 15 minutes or more. If you recently made a call to
        *             <code>DeleteServiceLinkedRole</code>, wait at least 15 minutes and try the request
        *          again. If you receive this same exception again, you will have to wait additional time
        *          until the role is unlocked.</p>
        */
    export class WAFServiceLinkedRoleErrorException extends __BaseException {
            readonly name: "WAFServiceLinkedRoleErrorException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFServiceLinkedRoleErrorException, __BaseException>);
    }
    /**
        * <p>A version of the named managed rule group, that the rule group's vendor publishes for
        *          use by customers. </p>
        *          <note>
        *             <p>This is intended for use only by vendors of managed rule sets. Vendors are Amazon Web Services and Amazon Web Services Marketplace sellers. </p>
        *             <p>Vendors, you can use the managed rule set APIs to provide controlled rollout of your versioned managed rule group offerings for your customers. The APIs are <code>ListManagedRuleSets</code>, <code>GetManagedRuleSet</code>, <code>PutManagedRuleSetVersions</code>, and <code>UpdateManagedRuleSetVersionExpiryDate</code>.</p>
        *          </note>
        */
    export interface VersionToPublish {
            /**
                * <p>The Amazon Resource Name (ARN) of the vendor's rule group that's used in the published
                *          managed rule group version. </p>
                */
            AssociatedRuleGroupArn?: string;
            /**
                * <p>The amount of time the vendor expects this version of the managed rule group to last, in
                *          days. </p>
                */
            ForecastedLifetime?: number;
    }
    export namespace VersionToPublish {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VersionToPublish) => any;
    }
    export interface PutManagedRuleSetVersionsRequest {
            /**
                * <p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>
                *          <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p>
                */
            Id: string | undefined;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken: string | undefined;
            /**
                * <p>The version of the named managed rule group that you'd like your customers to choose,
                *          from among your version offerings. </p>
                */
            RecommendedVersion?: string;
            /**
                * <p>The versions of the named managed rule group that you want to offer to your customers.
                *       </p>
                */
            VersionsToPublish?: Record<string, VersionToPublish>;
    }
    export namespace PutManagedRuleSetVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutManagedRuleSetVersionsRequest) => any;
    }
    export interface PutManagedRuleSetVersionsResponse {
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            NextLockToken?: string;
    }
    export namespace PutManagedRuleSetVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutManagedRuleSetVersionsResponse) => any;
    }
    export interface PutPermissionPolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the <a>RuleGroup</a> to which you want to
                *          attach the policy.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The policy to attach to the specified rule group. </p>
                *
                *          <p>The policy specifications must conform to the following:</p>
                *          <ul>
                *             <li>
                *                <p>The policy must be composed using IAM Policy version 2012-10-17 or version 2015-01-01.</p>
                *             </li>
                *             <li>
                *                <p>The policy must include specifications for <code>Effect</code>, <code>Action</code>, and <code>Principal</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Effect</code> must specify <code>Allow</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Action</code> must specify <code>wafv2:CreateWebACL</code>, <code>wafv2:UpdateWebACL</code>, and
                *              <code>wafv2:PutFirewallManagerRuleGroups</code> and may optionally specify <code>wafv2:GetRuleGroup</code>.
                *                  WAF rejects any extra actions or wildcard actions in the policy.</p>
                *             </li>
                *             <li>
                *                <p>The policy must not include a <code>Resource</code> parameter.</p>
                *             </li>
                *          </ul>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html">IAM Policies</a>.  </p>
                */
            Policy: string | undefined;
    }
    export namespace PutPermissionPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPermissionPolicyRequest) => any;
    }
    export interface PutPermissionPolicyResponse {
    }
    export namespace PutPermissionPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutPermissionPolicyResponse) => any;
    }
    /**
        * <p>The operation failed because the specified policy isn't in the proper format. </p>
        *
        *          <p>The policy specifications must conform to the following:</p>
        *          <ul>
        *             <li>
        *                <p>The policy must be composed using IAM Policy version 2012-10-17 or version 2015-01-01.</p>
        *             </li>
        *             <li>
        *                <p>The policy must include specifications for <code>Effect</code>, <code>Action</code>, and <code>Principal</code>.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Effect</code> must specify <code>Allow</code>.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Action</code> must specify <code>wafv2:CreateWebACL</code>, <code>wafv2:UpdateWebACL</code>, and
        *              <code>wafv2:PutFirewallManagerRuleGroups</code> and may optionally specify <code>wafv2:GetRuleGroup</code>.
        *                  WAF rejects any extra actions or wildcard actions in the policy.</p>
        *             </li>
        *             <li>
        *                <p>The policy must not include a <code>Resource</code> parameter.</p>
        *             </li>
        *          </ul>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html">IAM Policies</a>.  </p>
        */
    export class WAFInvalidPermissionPolicyException extends __BaseException {
            readonly name: "WAFInvalidPermissionPolicyException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<WAFInvalidPermissionPolicyException, __BaseException>);
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>An array of key:value pairs to associate with the resource.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>An array of keys identifying the tags to disassociate from the resource.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateIPSetRequest {
            /**
                * <p>The name of the IP set. You cannot change the name of an <code>IPSet</code> after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id: string | undefined;
            /**
                * <p>A description of the IP set that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>Contains an array of strings that specifies zero or more IP addresses or blocks of IP addresses in Classless Inter-Domain Routing (CIDR) notation. WAF supports all IPv4 and IPv6 CIDR ranges except for /0. </p>
                *          <p>Example address strings: </p>
                *          <ul>
                *             <li>
                *                <p>To configure WAF to allow, block, or count requests that originated from the IP address 192.0.2.44, specify <code>192.0.2.44/32</code>.</p>
                *             </li>
                *             <li>
                *                <p>To configure WAF to allow, block, or count requests that originated from IP addresses from 192.0.2.0 to 192.0.2.255, specify
                *                <code>192.0.2.0/24</code>.</p>
                *             </li>
                *             <li>
                *                <p>To configure WAF to allow, block, or count requests that originated from the IP address 1111:0000:0000:0000:0000:0000:0000:0111, specify <code>1111:0000:0000:0000:0000:0000:0000:0111/128</code>.</p>
                *             </li>
                *             <li>
                *                <p>To configure WAF to allow, block, or count requests that originated from IP addresses 1111:0000:0000:0000:0000:0000:0000:0000 to 1111:0000:0000:0000:ffff:ffff:ffff:ffff, specify <code>1111:0000:0000:0000:0000:0000:0000:0000/64</code>.</p>
                *             </li>
                *          </ul>
                *          <p>For more information about CIDR notation, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless Inter-Domain Routing</a>.</p>
                *          <p>Example JSON <code>Addresses</code> specifications: </p>
                *          <ul>
                *             <li>
                *                <p>Empty array: <code>"Addresses": []</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Array with one address: <code>"Addresses": ["192.0.2.44/32"]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Array with three addresses: <code>"Addresses": ["192.0.2.44/32", "192.0.2.0/24", "192.0.0.0/16"]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>INVALID specification: <code>"Addresses": [""]</code> INVALID </p>
                *             </li>
                *          </ul>
                */
            Addresses: string[] | undefined;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken: string | undefined;
    }
    export namespace UpdateIPSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIPSetRequest) => any;
    }
    export interface UpdateIPSetResponse {
            /**
                * <p>A token used for optimistic locking. WAF returns this token to your <code>update</code> requests. You use <code>NextLockToken</code> in the same manner as you use <code>LockToken</code>. </p>
                */
            NextLockToken?: string;
    }
    export namespace UpdateIPSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateIPSetResponse) => any;
    }
    export interface UpdateManagedRuleSetVersionExpiryDateRequest {
            /**
                * <p>The name of the managed rule set. You use this, along with the rule set ID, to identify the rule set.</p>
                *          <p>This name is assigned to the corresponding managed rule group, which your customers can access and use. </p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>A unique identifier for the managed rule set. The ID is returned in the responses to commands like <code>list</code>. You provide it to operations like <code>get</code> and <code>update</code>.</p>
                */
            Id: string | undefined;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken: string | undefined;
            /**
                * <p>The version that you want to remove from your list of offerings for the named managed
                *          rule group. </p>
                */
            VersionToExpire: string | undefined;
            /**
                * <p>The time that you want the version to expire.</p>
                *          <p>Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". </p>
                */
            ExpiryTimestamp: Date | undefined;
    }
    export namespace UpdateManagedRuleSetVersionExpiryDateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateManagedRuleSetVersionExpiryDateRequest) => any;
    }
    export interface UpdateManagedRuleSetVersionExpiryDateResponse {
            /**
                * <p>The version that is set to expire. </p>
                */
            ExpiringVersion?: string;
            /**
                * <p>The time that the version will expire. </p>
                *          <p>Times are in Coordinated Universal Time (UTC) format. UTC format includes the special designator, Z. For example, "2016-09-27T14:50Z". </p>
                */
            ExpiryTimestamp?: Date;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            NextLockToken?: string;
    }
    export namespace UpdateManagedRuleSetVersionExpiryDateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateManagedRuleSetVersionExpiryDateResponse) => any;
    }
    export interface UpdateRegexPatternSetRequest {
            /**
                * <p>The name of the set. You cannot change the name after you create the set.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>A unique identifier for the set. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id: string | undefined;
            /**
                * <p>A description of the set that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p></p>
                */
            RegularExpressionList: Regex[] | undefined;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken: string | undefined;
    }
    export namespace UpdateRegexPatternSetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRegexPatternSetRequest) => any;
    }
    export interface UpdateRegexPatternSetResponse {
            /**
                * <p>A token used for optimistic locking. WAF returns this token to your <code>update</code> requests. You use <code>NextLockToken</code> in the same manner as you use <code>LockToken</code>. </p>
                */
            NextLockToken?: string;
    }
    export namespace UpdateRegexPatternSetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRegexPatternSetResponse) => any;
    }
    export interface UpdateRuleGroupResponse {
            /**
                * <p>A token used for optimistic locking. WAF returns this token to your <code>update</code> requests. You use <code>NextLockToken</code> in the same manner as you use <code>LockToken</code>. </p>
                */
            NextLockToken?: string;
    }
    export namespace UpdateRuleGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRuleGroupResponse) => any;
    }
    export interface UpdateWebACLResponse {
            /**
                * <p>A token used for optimistic locking. WAF returns this token to your <code>update</code> requests. You use <code>NextLockToken</code> in the same manner as you use <code>LockToken</code>. </p>
                */
            NextLockToken?: string;
    }
    export namespace UpdateWebACLResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWebACLResponse) => any;
    }
    /**
        * <p>The processing guidance for a <a>Rule</a>, used by WAF to determine whether
        *          a web request matches the rule. </p>
        */
    export interface Statement {
            /**
                * <p>A rule statement that defines a string match search for WAF to apply to web requests. The byte match statement provides the bytes to search for, the location in requests that you want WAF to search, and other settings. The bytes to search for are typically a string that corresponds with ASCII characters. In the WAF console and the developer guide, this is called a string match statement.</p>
                */
            ByteMatchStatement?: ByteMatchStatement;
            /**
                * <p>A rule statement that inspects for malicious SQL code. Attackers insert malicious SQL code into web requests to do things like modify your database or extract data from it. </p>
                */
            SqliMatchStatement?: SqliMatchStatement;
            /**
                * <p>A rule statement that inspects for cross-site scripting (XSS) attacks. In XSS attacks, the attacker
                * uses vulnerabilities in a benign website as a vehicle to inject malicious client-site scripts into other legitimate web browsers. </p>
                */
            XssMatchStatement?: XssMatchStatement;
            /**
                * <p>A rule statement that compares a number of bytes against the size of a request component, using a comparison operator, such as greater than (>) or less than (<). For example, you can use a size constraint statement to look for query strings that are longer than 100 bytes. </p>
                *          <p>If you configure WAF to inspect the request body, WAF inspects only the first 8192 bytes (8 KB). If the request body for your web requests never exceeds 8192 bytes, you could use a size constraint statement to block requests that have a request body greater than 8192 bytes.</p>
                *          <p>If you choose URI for the value of Part of the request to filter on, the slash (/) in the URI counts as one character. For example, the URI <code>/logo.jpg</code> is nine characters long.</p>
                */
            SizeConstraintStatement?: SizeConstraintStatement;
            /**
                * <p>A rule statement used to identify web requests based on country of origin.  </p>
                */
            GeoMatchStatement?: GeoMatchStatement;
            /**
                * <p>A rule statement used to run the rules that are defined in a <a>RuleGroup</a>. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.</p>
                *          <p>You cannot nest a <code>RuleGroupReferenceStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. You
                *       can only use a rule group reference statement at the top level inside a web ACL. </p>
                */
            RuleGroupReferenceStatement?: RuleGroupReferenceStatement;
            /**
                * <p>A rule statement used to detect web requests coming from particular IP addresses or address ranges. To use this, create an <a>IPSet</a> that specifies the addresses you want to detect, then use the ARN of that set in this statement. To create an IP set, see <a>CreateIPSet</a>.</p>
                *          <p>Each IP set rule statement references an IP set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.</p>
                */
            IPSetReferenceStatement?: IPSetReferenceStatement;
            /**
                * <p>A rule statement used to search web request components for matches with regular expressions. To use this, create a <a>RegexPatternSet</a> that specifies the expressions that you want to detect, then use the ARN of that set in this statement. A web request matches the pattern set rule statement if the request component matches any of the patterns in the set. To create a regex pattern set, see <a>CreateRegexPatternSet</a>.</p>
                *          <p>Each regex pattern set rule statement references a regex pattern set. You create and maintain the set independent of your rules. This allows you to use the single set in multiple rules. When you update the referenced set, WAF automatically updates all rules that reference it.</p>
                */
            RegexPatternSetReferenceStatement?: RegexPatternSetReferenceStatement;
            /**
                * <p>A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests. </p>
                *          <p>WAF tracks and manages web requests separately for each instance of a rate-based rule that you use. For example, if you provide the same rate-based rule settings in two web ACLs, each of the two rule statements represents a separate instance of the rate-based rule and gets its own tracking and management by WAF. If you define a rate-based rule inside a rule group, and then use that rule group in multiple places, each use creates a separate instance of the rate-based rule that gets its own tracking and management by WAF. </p>
                *          <p>When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit.</p>
                *          <p>You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:</p>
                *          <ul>
                *             <li>
                *                <p>An IP match statement with an IP set that specified the address 192.0.2.44.</p>
                *             </li>
                *             <li>
                *                <p>A string match statement that searches in the User-Agent header for the string BadBot.</p>
                *             </li>
                *          </ul>
                *          <p>In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet the criteria of both of the nested statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet the criteria of both of the nested statements are not counted towards the rate limit and are not affected by this rule.</p>
                *          <p>You cannot nest a <code>RateBasedStatement</code> inside another statement, for example inside a <code>NotStatement</code> or <code>OrStatement</code>. You can define a <code>RateBasedStatement</code> inside a web ACL and inside a rule group. </p>
                */
            RateBasedStatement?: RateBasedStatement;
            /**
                * <p>A logical rule statement used to combine other rule statements with AND logic. You provide more than one <a>Statement</a> within the <code>AndStatement</code>. </p>
                */
            AndStatement?: AndStatement;
            /**
                * <p>A logical rule statement used to combine other rule statements with OR logic. You provide more than one <a>Statement</a> within the <code>OrStatement</code>. </p>
                */
            OrStatement?: OrStatement;
            /**
                * <p>A logical rule statement used to negate the results of another rule statement. You provide one <a>Statement</a> within the <code>NotStatement</code>.</p>
                */
            NotStatement?: NotStatement;
            /**
                * <p>A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling <a>ListAvailableManagedRuleGroups</a>.</p>
                *          <p>You cannot nest a <code>ManagedRuleGroupStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p>
                */
            ManagedRuleGroupStatement?: ManagedRuleGroupStatement;
            /**
                * <p>A rule statement that defines a string match search against labels that have been added to the web request by rules that have already run in the web ACL. </p>
                *          <p>The label match statement provides the label or namespace string to search for. The label string can represent a part or all of the fully qualified label name that had been added to the web request. Fully qualified labels have a prefix, optional namespaces, and label name. The prefix identifies the rule group or web ACL context of the rule that added the label.  If you do not provide the fully qualified name in your label match string, WAF performs the search for labels that were added in the same context as the label match statement. </p>
                */
            LabelMatchStatement?: LabelMatchStatement;
            /**
                * <p>A rule statement used to search web request components for a match against a single regular expression. </p>
                */
            RegexMatchStatement?: RegexMatchStatement;
    }
    export namespace Statement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Statement) => any;
    }
    /**
        * <p>A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling <a>ListAvailableManagedRuleGroups</a>.</p>
        *          <p>You cannot nest a <code>ManagedRuleGroupStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p>
        */
    export interface ManagedRuleGroupStatement {
            /**
                * <p>The name of the managed rule group vendor. You use this, along with the rule group name, to identify the rule group.</p>
                */
            VendorName: string | undefined;
            /**
                * <p>The name of the managed rule group. You use this, along with the vendor name, to identify the rule group.</p>
                */
            Name: string | undefined;
            /**
                * <p>The version of the managed rule group to use. If you specify this, the version setting
                *          is fixed until you change it. If you don't specify this, WAF uses the vendor's
                *          default version, and then keeps the version at the vendor's default when the vendor updates
                *          the managed rule group settings. </p>
                */
            Version?: string;
            /**
                * <p>The rules in the referenced rule group whose actions are set to <code>Count</code>. When
                *          you exclude a rule, WAF evaluates it exactly as it would if the rule action setting were
                *             <code>Count</code>. This is a useful option for testing the rules in a rule group
                *          without modifying how they handle your web traffic.</p>
                */
            ExcludedRules?: ExcludedRule[];
            /**
                * <p>An optional nested statement that narrows the scope of the web requests that are
                *          evaluated by the managed rule group. Requests are only evaluated by the rule group if they
                *          match the scope-down statement. You can use any nestable <a>Statement</a> in the
                *          scope-down statement, and you can nest statements at any level, the same as you can for a
                *          rule statement. </p>
                */
            ScopeDownStatement?: Statement;
            /**
                * <p>Additional information that's used by a managed rule group. Most managed rule groups don't require this.</p>
                *          <p>Use this for the account takeover prevention managed rule group
                *       <code>AWSManagedRulesATPRuleSet</code>, to provide information about the sign-in page of your application. </p>
                *          <p>You can provide multiple individual <code>ManagedRuleGroupConfig</code> objects for any rule group configuration, for example <code>UsernameField</code> and <code>PasswordField</code>. The configuration that you provide depends on the needs of the managed rule group. For the ATP managed rule group, you provide the following individual configuration objects: <code>LoginPath</code>, <code>PasswordField</code>, <code>PayloadType</code> and <code>UsernameField</code>.</p>
                */
            ManagedRuleGroupConfigs?: ManagedRuleGroupConfig[];
    }
    export namespace ManagedRuleGroupStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManagedRuleGroupStatement) => any;
    }
    /**
        * <p>A logical rule statement used to negate the results of another rule statement. You provide one <a>Statement</a> within the <code>NotStatement</code>.</p>
        */
    export interface NotStatement {
            /**
                * <p>The statement to negate. You can use any statement that can be nested.</p>
                */
            Statement: Statement | undefined;
    }
    export namespace NotStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotStatement) => any;
    }
    /**
        * <p>A rate-based rule tracks the rate of requests for each originating IP address, and triggers the rule action when the rate exceeds a limit that you specify on the number of requests in any 5-minute time span. You can use this to put a temporary block on requests from an IP address that is sending excessive requests. </p>
        *          <p>WAF tracks and manages web requests separately for each instance of a rate-based rule that you use. For example, if you provide the same rate-based rule settings in two web ACLs, each of the two rule statements represents a separate instance of the rate-based rule and gets its own tracking and management by WAF. If you define a rate-based rule inside a rule group, and then use that rule group in multiple places, each use creates a separate instance of the rate-based rule that gets its own tracking and management by WAF. </p>
        *          <p>When the rule action triggers, WAF blocks additional requests from the IP address until the request rate falls below the limit.</p>
        *          <p>You can optionally nest another statement inside the rate-based statement, to narrow the scope of the rule so that it only counts requests that match the nested statement. For example, based on recent requests that you have seen from an attacker, you might create a rate-based rule with a nested AND rule statement that contains the following nested statements:</p>
        *          <ul>
        *             <li>
        *                <p>An IP match statement with an IP set that specified the address 192.0.2.44.</p>
        *             </li>
        *             <li>
        *                <p>A string match statement that searches in the User-Agent header for the string BadBot.</p>
        *             </li>
        *          </ul>
        *          <p>In this rate-based rule, you also define a rate limit. For this example, the rate limit is 1,000. Requests that meet the criteria of both of the nested statements are counted. If the count exceeds 1,000 requests per five minutes, the rule action triggers. Requests that do not meet the criteria of both of the nested statements are not counted towards the rate limit and are not affected by this rule.</p>
        *          <p>You cannot nest a <code>RateBasedStatement</code> inside another statement, for example inside a <code>NotStatement</code> or <code>OrStatement</code>. You can define a <code>RateBasedStatement</code> inside a web ACL and inside a rule group. </p>
        */
    export interface RateBasedStatement {
            /**
                * <p>The limit on requests per 5-minute period for a single originating IP address. If the
                *          statement includes a <code>ScopeDownStatement</code>, this limit is applied only to the
                *          requests that match the statement.</p>
                */
            Limit: number | undefined;
            /**
                * <p>Setting that indicates how to aggregate the request counts. The options are the
                *          following:</p>
                *          <ul>
                *             <li>
                *                <p>IP - Aggregate the request counts on the IP address from the web request
                *                origin.</p>
                *             </li>
                *             <li>
                *                <p>FORWARDED_IP - Aggregate the request counts on the first IP address in an
                *                HTTP header. If you use this, configure the <code>ForwardedIPConfig</code>, to
                *                specify the header to use. </p>
                *             </li>
                *          </ul>
                */
            AggregateKeyType: RateBasedStatementAggregateKeyType | string | undefined;
            /**
                * <p>An optional nested statement that narrows the scope of the web requests that are
                *          evaluated by the rate-based statement. Requests are only tracked by the rate-based
                *          statement if they match the scope-down statement. You can use any nestable <a>Statement</a> in the scope-down statement, and you can nest statements at any
                *          level, the same as you can for a rule statement. </p>
                */
            ScopeDownStatement?: Statement;
            /**
                * <p>The configuration for inspecting IP addresses in an HTTP header that you specify, instead of using the IP address that's reported by the web request origin. Commonly, this is the X-Forwarded-For (XFF) header, but you can specify any header name. </p>
                *
                *          <note>
                *             <p>If the specified header isn't present in the request, WAF doesn't apply the rule to the web request at all.</p>
                *          </note>
                *
                *
                *          <p>This is required if <code>AggregateKeyType</code> is set to
                *          <code>FORWARDED_IP</code>.</p>
                */
            ForwardedIPConfig?: ForwardedIPConfig;
    }
    export namespace RateBasedStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RateBasedStatement) => any;
    }
    /**
        * <p>A single rule, which you can use in a <a>WebACL</a> or <a>RuleGroup</a> to identify web requests that you want to allow, block, or count.
        *          Each rule includes one top-level <a>Statement</a> that WAF uses to
        *          identify matching web requests, and parameters that govern how WAF handles them. </p>
        */
    export interface Rule {
            /**
                * <p>The name of the rule. You can't change the name of a <code>Rule</code> after you create
                *          it. </p>
                */
            Name: string | undefined;
            /**
                * <p>If you define more than one <code>Rule</code> in a <code>WebACL</code>, WAF
                *          evaluates each request against the <code>Rules</code> in order based on the value of
                *             <code>Priority</code>. WAF processes rules with lower priority first. The priorities
                *          don't need to be consecutive, but they must all be different.</p>
                */
            Priority: number | undefined;
            /**
                * <p>The WAF processing statement for the rule, for example <a>ByteMatchStatement</a> or <a>SizeConstraintStatement</a>. </p>
                */
            Statement: Statement | undefined;
            /**
                * <p>The action that WAF should take on a web request when it matches the rule statement. Settings at the web ACL level can override the rule action setting. </p>
                *         <p>This is used only for rules whose statements do not reference a rule group. Rule statements that reference a rule group include <code>RuleGroupReferenceStatement</code> and <code>ManagedRuleGroupStatement</code>. </p>
                *          <p>You must specify either this <code>Action</code> setting or the rule <code>OverrideAction</code> setting, but not both:</p>
                *          <ul>
                *             <li>
                *                <p>If the rule statement does not reference a rule group, use this rule action setting and not the rule override action setting. </p>
                *             </li>
                *             <li>
                *                <p>If the rule statement references a rule group, use the override action setting and not this action setting.  </p>
                *             </li>
                *          </ul>
                */
            Action?: RuleAction;
            /**
                * <p>The action to use in the place of the action that results from the rule group evaluation. Set the override action to none to leave the result of the rule group alone. Set it to count to override the result to count only. </p>
                *          <p>You can only use this for rule statements that reference a rule group, like <code>RuleGroupReferenceStatement</code> and <code>ManagedRuleGroupStatement</code>. </p>
                *          <note>
                *             <p>This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count
                *   matches, do not use this and instead exclude those rules in your rule group reference statement settings. </p>
                *          </note>
                */
            OverrideAction?: OverrideAction;
            /**
                * <p>Labels to apply to web requests that match the rule match statement. WAF applies
                *          fully qualified labels to matching web requests. A fully qualified label is the
                *          concatenation of a label namespace and a rule label. The rule's rule group or web ACL
                *          defines the label namespace. </p>
                *          <p>Rules that run after this rule in the web ACL can match against these labels using a
                *             <code>LabelMatchStatement</code>.</p>
                *          <p>For each label, provide a case-sensitive string containing optional namespaces and a
                *          label name, according to the following guidelines:</p>
                *          <ul>
                *             <li>
                *                <p>Separate each component of the label with a colon. </p>
                *             </li>
                *             <li>
                *                <p>Each namespace or name can have up to 128 characters.</p>
                *             </li>
                *             <li>
                *                <p>You can specify up to 5 namespaces in a label.</p>
                *             </li>
                *             <li>
                *                <p>Don't use the following reserved words in your label specification:
                *                   <code>aws</code>, <code>waf</code>, <code>managed</code>, <code>rulegroup</code>,
                *                   <code>webacl</code>, <code>regexpatternset</code>, or <code>ipset</code>.</p>
                *             </li>
                *          </ul>
                *          <p>For example, <code>myLabelName</code> or <code>nameSpace1:nameSpace2:myLabelName</code>.
                *       </p>
                */
            RuleLabels?: Label[];
            /**
                * <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
                */
            VisibilityConfig: VisibilityConfig | undefined;
            /**
                * <p>Specifies how WAF should handle <code>CAPTCHA</code> evaluations. If you don't specify this, WAF uses the <code>CAPTCHA</code> configuration that's defined for the web ACL. </p>
                */
            CaptchaConfig?: CaptchaConfig;
    }
    export namespace Rule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Rule) => any;
    }
    /**
        * <p>A logical rule statement used to combine other rule statements with AND logic. You provide more than one <a>Statement</a> within the <code>AndStatement</code>. </p>
        */
    export interface AndStatement {
            /**
                * <p>The statements to combine with AND logic. You can use any statements that can be nested.
                *       </p>
                */
            Statements: Statement[] | undefined;
    }
    export namespace AndStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AndStatement) => any;
    }
    /**
        * <p>A logical rule statement used to combine other rule statements with OR logic. You provide more than one <a>Statement</a> within the <code>OrStatement</code>. </p>
        */
    export interface OrStatement {
            /**
                * <p>The statements to combine with OR logic. You can use any statements that can be
                *          nested.</p>
                */
            Statements: Statement[] | undefined;
    }
    export namespace OrStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrStatement) => any;
    }
    /**
        * <p>The processing guidance for an Firewall Manager rule. This is like a regular rule <a>Statement</a>, but it can only contain a rule group reference.</p>
        */
    export interface FirewallManagerStatement {
            /**
                * <p>A rule statement used to run the rules that are defined in a managed rule group. To use this, provide the vendor name and the name of the rule group in this statement. You can retrieve the required names by calling <a>ListAvailableManagedRuleGroups</a>.</p>
                *          <p>You cannot nest a <code>ManagedRuleGroupStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. It can only be referenced as a top-level statement within a rule.</p>
                */
            ManagedRuleGroupStatement?: ManagedRuleGroupStatement;
            /**
                * <p>A rule statement used to run the rules that are defined in a <a>RuleGroup</a>. To use this, create a rule group with your rules, then provide the ARN of the rule group in this statement.</p>
                *          <p>You cannot nest a <code>RuleGroupReferenceStatement</code>, for example for use inside a <code>NotStatement</code> or <code>OrStatement</code>. You
                *       can only use a rule group reference statement at the top level inside a web ACL. </p>
                */
            RuleGroupReferenceStatement?: RuleGroupReferenceStatement;
    }
    export namespace FirewallManagerStatement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirewallManagerStatement) => any;
    }
    /**
        * <p>A rule group that's defined for an Firewall Manager WAF policy.</p>
        */
    export interface FirewallManagerRuleGroup {
            /**
                * <p>The name of the rule group. You cannot change the name of a rule group after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>If you define more than one rule group in the first or last Firewall Manager rule groups, WAF
                *          evaluates each request against the rule groups in order, starting from the lowest priority
                *          setting. The priorities don't need to be consecutive, but they must all be
                *          different.</p>
                */
            Priority: number | undefined;
            /**
                * <p>The processing guidance for an Firewall Manager rule. This is like a regular rule <a>Statement</a>, but it can only contain a rule group reference.</p>
                */
            FirewallManagerStatement: FirewallManagerStatement | undefined;
            /**
                * <p>The action to use in the place of the action that results from the rule group evaluation. Set the override action to none to leave the result of the rule group alone. Set it to count to override the result to count only. </p>
                *          <p>You can only use this for rule statements that reference a rule group, like <code>RuleGroupReferenceStatement</code> and <code>ManagedRuleGroupStatement</code>. </p>
                *          <note>
                *             <p>This option is usually set to none. It does not affect how the rules in the rule group are evaluated. If you want the rules in the rule group to only count
                *   matches, do not use this and instead exclude those rules in your rule group reference statement settings. </p>
                *          </note>
                */
            OverrideAction: OverrideAction | undefined;
            /**
                * <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
                */
            VisibilityConfig: VisibilityConfig | undefined;
    }
    export namespace FirewallManagerRuleGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirewallManagerRuleGroup) => any;
    }
    export interface CheckCapacityRequest {
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>An array of <a>Rule</a> that you're configuring to use in a rule group or web
                *          ACL. </p>
                */
            Rules: Rule[] | undefined;
    }
    export namespace CheckCapacityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CheckCapacityRequest) => any;
    }
    export interface CreateRuleGroupRequest {
            /**
                * <p>The name of the rule group. You cannot change the name of a rule group after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>The web ACL capacity units (WCUs) required for this rule group.</p>
                *           <p>When you create your own rule group, you define this, and you cannot change it after creation.
                *           When you add or modify the rules in a rule group, WAF enforces this limit. You can check the capacity
                *           for a set of rules using <a>CheckCapacity</a>.</p>
                *           <p>WAF uses WCUs to calculate and control the operating
                *          resources that are used to run your rules, rule groups, and web ACLs. WAF
                *          calculates capacity differently for each rule type, to reflect the relative cost of each rule.
                *          Simple rules that cost little to run use fewer WCUs than more complex rules
                * 				that use more processing power.
                * 				Rule group capacity is fixed at creation, which helps users plan their
                *          web ACL WCU usage when they use a rule group.
                *          The WCU limit for web ACLs is 1,500.  </p>
                */
            Capacity: number | undefined;
            /**
                * <p>A description of the rule group that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>The <a>Rule</a> statements used to identify the web requests that you
                *          want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching
                *          web requests, and parameters that govern how WAF handles them.
                *       </p>
                */
            Rules?: Rule[];
            /**
                * <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
                */
            VisibilityConfig: VisibilityConfig | undefined;
            /**
                * <p>An array of key:value pairs to associate with the resource.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. </p>
                *          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                *          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                */
            CustomResponseBodies?: Record<string, CustomResponseBody>;
    }
    export namespace CreateRuleGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRuleGroupRequest) => any;
    }
    export interface CreateWebACLRequest {
            /**
                * <p>The name of the web ACL. You cannot change the name of a web ACL after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>The action to perform if none of the <code>Rules</code> contained in the <code>WebACL</code> match. </p>
                */
            DefaultAction: DefaultAction | undefined;
            /**
                * <p>A description of the web ACL that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>The <a>Rule</a> statements used to identify the web requests that you
                *          want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching
                *          web requests, and parameters that govern how WAF handles them.
                *       </p>
                */
            Rules?: Rule[];
            /**
                * <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
                */
            VisibilityConfig: VisibilityConfig | undefined;
            /**
                * <p>An array of key:value pairs to associate with the resource.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. </p>
                *          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                *          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                */
            CustomResponseBodies?: Record<string, CustomResponseBody>;
            /**
                * <p>Specifies how WAF should handle <code>CAPTCHA</code> evaluations for rules that don't have their own <code>CaptchaConfig</code> settings. If you don't specify this, WAF uses its default settings for <code>CaptchaConfig</code>. </p>
                */
            CaptchaConfig?: CaptchaConfig;
    }
    export namespace CreateWebACLRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWebACLRequest) => any;
    }
    /**
        * <p> A rule group defines a collection of rules to inspect and control web requests that you can use in a <a>WebACL</a>. When you create a rule group, you define an immutable capacity limit. If you update a rule group, you must stay within the capacity. This allows others to reuse the rule group with confidence in its capacity requirements. </p>
        */
    export interface RuleGroup {
            /**
                * <p>The name of the rule group. You cannot change the name of a rule group after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id: string | undefined;
            /**
                * <p>The web ACL capacity units (WCUs) required for this rule group.</p>
                *           <p>When you create your own rule group, you define this, and you cannot change it after creation.
                *           When you add or modify the rules in a rule group, WAF enforces this limit. You can check the capacity
                *           for a set of rules using <a>CheckCapacity</a>.</p>
                *           <p>WAF uses WCUs to calculate and control the operating
                *          resources that are used to run your rules, rule groups, and web ACLs. WAF
                *          calculates capacity differently for each rule type, to reflect the relative cost of each rule.
                *          Simple rules that cost little to run use fewer WCUs than more complex rules
                * 				that use more processing power.
                * 				Rule group capacity is fixed at creation, which helps users plan their
                *          web ACL WCU usage when they use a rule group.
                *          The WCU limit for web ACLs is 1,500.  </p>
                */
            Capacity: number | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the entity.</p>
                */
            ARN: string | undefined;
            /**
                * <p>A description of the rule group that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>The <a>Rule</a> statements used to identify the web requests that you
                *          want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching
                *          web requests, and parameters that govern how WAF handles them.
                *       </p>
                */
            Rules?: Rule[];
            /**
                * <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
                */
            VisibilityConfig: VisibilityConfig | undefined;
            /**
                * <p>The label namespace prefix for this rule group. All labels added by rules in this rule group have this prefix. </p>
                *          <ul>
                *             <li>
                *                <p>The syntax for the label namespace prefix for your rule groups is the following: </p>
                *                <p>
                *                   <code>awswaf:<account ID>:rulegroup:<rule group name>:</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: </p>
                *                <p>
                *                   <code><label namespace>:<label from rule></code>
                *                </p>
                *
                *             </li>
                *          </ul>
                */
            LabelNamespace?: string;
            /**
                * <p>A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. </p>
                *          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                *          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                */
            CustomResponseBodies?: Record<string, CustomResponseBody>;
            /**
                * <p>The labels that one or more rules in this rule group add to matching web requests. These labels are defined in the <code>RuleLabels</code> for a <a>Rule</a>.</p>
                */
            AvailableLabels?: LabelSummary[];
            /**
                * <p>The labels that one or more rules in this rule group match against in label match statements. These labels are defined in a <code>LabelMatchStatement</code> specification, in the <a>Statement</a> definition of a rule.  </p>
                */
            ConsumedLabels?: LabelSummary[];
    }
    export namespace RuleGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroup) => any;
    }
    export interface UpdateRuleGroupRequest {
            /**
                * <p>The name of the rule group. You cannot change the name of a rule group after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>A unique identifier for the rule group. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id: string | undefined;
            /**
                * <p>A description of the rule group that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>The <a>Rule</a> statements used to identify the web requests that you
                *          want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching
                *          web requests, and parameters that govern how WAF handles them.
                *       </p>
                */
            Rules?: Rule[];
            /**
                * <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
                */
            VisibilityConfig: VisibilityConfig | undefined;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken: string | undefined;
            /**
                * <p>A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the rule group, and then use them in the rules that you define in the rule group. </p>
                *          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                *          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                */
            CustomResponseBodies?: Record<string, CustomResponseBody>;
    }
    export namespace UpdateRuleGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRuleGroupRequest) => any;
    }
    export interface UpdateWebACLRequest {
            /**
                * <p>The name of the web ACL. You cannot change the name of a web ACL after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>Specifies whether this is for an Amazon CloudFront distribution or for a regional application. A regional application can be an Application Load Balancer (ALB), an Amazon API Gateway REST API, or an AppSync GraphQL API.  </p>
                *          <p>To work with CloudFront, you must also specify the Region US East (N. Virginia) as follows: </p>
                *          <ul>
                *             <li>
                *                <p>CLI - Specify the Region when you use the CloudFront scope: <code>--scope=CLOUDFRONT --region=us-east-1</code>. </p>
                *             </li>
                *             <li>
                *                <p>API and SDKs - For all calls, use the Region endpoint us-east-1. </p>
                *             </li>
                *          </ul>
                */
            Scope: Scope | string | undefined;
            /**
                * <p>The unique identifier for the web ACL. This ID is returned in the responses to create and list commands. You provide it to operations like update and delete.</p>
                */
            Id: string | undefined;
            /**
                * <p>The action to perform if none of the <code>Rules</code> contained in the <code>WebACL</code> match. </p>
                */
            DefaultAction: DefaultAction | undefined;
            /**
                * <p>A description of the web ACL that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>The <a>Rule</a> statements used to identify the web requests that you
                *          want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching
                *          web requests, and parameters that govern how WAF handles them.
                *       </p>
                */
            Rules?: Rule[];
            /**
                * <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
                */
            VisibilityConfig: VisibilityConfig | undefined;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken: string | undefined;
            /**
                * <p>A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. </p>
                *          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                *          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                */
            CustomResponseBodies?: Record<string, CustomResponseBody>;
            /**
                * <p>Specifies how WAF should handle <code>CAPTCHA</code> evaluations for rules that don't have their own <code>CaptchaConfig</code> settings. If you don't specify this, WAF uses its default settings for <code>CaptchaConfig</code>. </p>
                */
            CaptchaConfig?: CaptchaConfig;
    }
    export namespace UpdateWebACLRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateWebACLRequest) => any;
    }
    export interface GetRuleGroupResponse {
            /**
                * <p></p>
                */
            RuleGroup?: RuleGroup;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken?: string;
    }
    export namespace GetRuleGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRuleGroupResponse) => any;
    }
    /**
        * <p> A web ACL defines a collection of rules to use to inspect and control web requests. Each rule has an action defined (allow, block, or count) for requests that match the statement of the rule. In the web ACL, you assign a default action to take (allow, block) for any request that does not match any of the rules. The rules in a web ACL can be a combination of the types <a>Rule</a>, <a>RuleGroup</a>, and managed rule group. You can associate a web ACL with one or more Amazon Web Services resources to protect. The resources can be an Amazon CloudFront distribution, an Amazon API Gateway REST API, an Application Load Balancer, or an AppSync GraphQL API.  </p>
        */
    export interface WebACL {
            /**
                * <p>The name of the web ACL. You cannot change the name of a web ACL after you create it.</p>
                */
            Name: string | undefined;
            /**
                * <p>A unique identifier for the <code>WebACL</code>. This ID is returned in the responses to
                *          create and list commands. You use this ID to do things like get, update, and delete a
                *             <code>WebACL</code>.</p>
                */
            Id: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the web ACL that you want to associate with the
                *          resource.</p>
                */
            ARN: string | undefined;
            /**
                * <p>The action to perform if none of the <code>Rules</code> contained in the <code>WebACL</code> match. </p>
                */
            DefaultAction: DefaultAction | undefined;
            /**
                * <p>A description of the web ACL that helps with identification. </p>
                */
            Description?: string;
            /**
                * <p>The <a>Rule</a> statements used to identify the web requests that you
                *          want to allow, block, or count. Each rule includes one top-level statement that WAF uses to identify matching
                *          web requests, and parameters that govern how WAF handles them.
                *       </p>
                */
            Rules?: Rule[];
            /**
                * <p>Defines and enables Amazon CloudWatch metrics and web request sample collection.  </p>
                */
            VisibilityConfig: VisibilityConfig | undefined;
            /**
                * <p>The web ACL capacity units (WCUs) currently being used by this web ACL. </p>
                *          <p>WAF uses WCUs to calculate and control the operating
                *          resources that are used to run your rules, rule groups, and web ACLs. WAF
                *          calculates capacity differently for each rule type, to reflect the relative cost of each rule.
                *          Simple rules that cost little to run use fewer WCUs than more complex rules
                * 				that use more processing power.
                * 				Rule group capacity is fixed at creation, which helps users plan their
                *          web ACL WCU usage when they use a rule group.
                *          The WCU limit for web ACLs is 1,500.  </p>
                */
            Capacity?: number;
            /**
                * <p>The first set of rules for WAF to process in the web ACL. This is defined in an
                *          Firewall Manager WAF policy and contains only rule group references. You can't alter these. Any
                *          rules and rule groups that you define for the web ACL are prioritized after these. </p>
                *          <p>In the Firewall Manager WAF policy, the Firewall Manager administrator can define a set of rule groups to run
                *          first in the web ACL and a set of rule groups to run last. Within each set, the
                *          administrator prioritizes the rule groups, to determine their relative processing
                *          order.</p>
                */
            PreProcessFirewallManagerRuleGroups?: FirewallManagerRuleGroup[];
            /**
                * <p>The last set of rules for WAF to process in the web ACL. This is defined in an
                *          Firewall Manager WAF policy and contains only rule group references. You can't alter these. Any
                *          rules and rule groups that you define for the web ACL are prioritized before these. </p>
                *          <p>In the Firewall Manager WAF policy, the Firewall Manager administrator can define a set of rule groups to run
                *          first in the web ACL and a set of rule groups to run last. Within each set, the
                *          administrator prioritizes the rule groups, to determine their relative processing
                *          order.</p>
                */
            PostProcessFirewallManagerRuleGroups?: FirewallManagerRuleGroup[];
            /**
                * <p>Indicates whether this web ACL is managed by Firewall Manager. If true, then only Firewall Manager can
                *          delete the web ACL or any Firewall Manager rule groups in the web ACL. </p>
                */
            ManagedByFirewallManager?: boolean;
            /**
                * <p>The label namespace prefix for this web ACL. All labels added by rules in this web ACL have this prefix. </p>
                *          <ul>
                *             <li>
                *                <p>The syntax for the label namespace prefix for a web ACL is the following: </p>
                *                <p>
                *                   <code>awswaf:<account ID>:webacl:<web ACL name>:</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>When a rule with a label matches a web request, WAF adds the fully qualified label to the request. A fully qualified label is made up of the label namespace from the rule group or web ACL where the rule is defined and the label from the rule, separated by a colon: </p>
                *                <p>
                *                   <code><label namespace>:<label from rule></code>
                *                </p>
                *
                *             </li>
                *          </ul>
                */
            LabelNamespace?: string;
            /**
                * <p>A map of custom response keys and content bodies. When you create a rule with a block action, you can send a custom response to the web request. You define these for the web ACL, and then use them in the rules and default actions that you define in the web ACL. </p>
                *          <p>For information about customizing web requests and responses, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-custom-request-response.html">Customizing web requests and responses in WAF</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                *          <p>For information about the limits on count and size for custom request and response settings, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/limits.html">WAF quotas</a> in the
                *          <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF Developer Guide</a>. </p>
                */
            CustomResponseBodies?: Record<string, CustomResponseBody>;
            /**
                * <p>Specifies how WAF should handle <code>CAPTCHA</code> evaluations for rules that don't have their own <code>CaptchaConfig</code> settings. If you don't specify this, WAF uses its default settings for <code>CaptchaConfig</code>. </p>
                */
            CaptchaConfig?: CaptchaConfig;
    }
    export namespace WebACL {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WebACL) => any;
    }
    export interface GetWebACLForResourceResponse {
            /**
                * <p>The web ACL that is associated with the resource. If there is no associated resource,
                *          WAF returns a null web ACL.</p>
                */
            WebACL?: WebACL;
    }
    export namespace GetWebACLForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWebACLForResourceResponse) => any;
    }
    export interface GetWebACLResponse {
            /**
                * <p>The web ACL specification. You can modify the settings in this web ACL and use it to
                *          update this web ACL or create a new one.</p>
                */
            WebACL?: WebACL;
            /**
                * <p>A token used for optimistic locking. WAF returns a token to your <code>get</code> and <code>list</code> requests, to mark the state of the entity at the time of the request. To make changes to the entity associated with the token, you provide the token to operations like <code>update</code> and <code>delete</code>. WAF uses the token to ensure that no changes have been made to the entity since you last retrieved it. If a change has been made, the update fails with a <code>WAFOptimisticLockException</code>. If this happens, perform another <code>get</code>, and use the new token returned by that operation. </p>
                */
            LockToken?: string;
            /**
                * <p>The URL to use in SDK integrations with Amazon Web Services managed rule groups. For example, you can use the integration SDKs with the account takeover prevention managed rule group <code>AWSManagedRulesATPRuleSet</code>. This is only populated if you are using a rule group in your web ACL that integrates with your applications in this way. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-application-integration.html">WAF client application integration</a> in the <i>WAF Developer Guide</i>.</p>
                */
            ApplicationIntegrationURL?: string;
    }
    export namespace GetWebACLResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetWebACLResponse) => any;
    }
}

declare module '@aws-sdk/client-wafv2/node_modules/@aws-sdk/client-wafv2/dist-types/models/WAFV2ServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from WAFV2 service.
        */
    export class WAFV2ServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

