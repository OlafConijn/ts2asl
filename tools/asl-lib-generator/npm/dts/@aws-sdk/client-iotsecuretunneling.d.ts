// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-iotsecuretunneling' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CloseTunnelCommandInput, CloseTunnelCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/CloseTunnelCommand";
    import { DescribeTunnelCommandInput, DescribeTunnelCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/DescribeTunnelCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/ListTagsForResourceCommand";
    import { ListTunnelsCommandInput, ListTunnelsCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/ListTunnelsCommand";
    import { OpenTunnelCommandInput, OpenTunnelCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/OpenTunnelCommand";
    import { RotateTunnelAccessTokenCommandInput, RotateTunnelAccessTokenCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/RotateTunnelAccessTokenCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/UntagResourceCommand";
    import { IoTSecureTunnelingClient } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/IoTSecureTunnelingClient";
    /**
        * <fullname>IoT Secure Tunneling</fullname>
        * 		       <p>IoT Secure Tunneling creates remote connections to devices deployed in the
        * 			field.</p>
        * 		       <p>For more information about how IoT Secure Tunneling works, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/secure-tunneling.html">IoT
        * 				Secure Tunneling</a>.</p>
        */
    export class IoTSecureTunneling extends IoTSecureTunnelingClient {
            /**
                * <p>Closes a tunnel identified by the unique tunnel id. When a <code>CloseTunnel</code>
                * 			request is received, we close the WebSocket connections between the client and proxy
                * 			server so no data can be transmitted.</p>
                * 		       <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CloseTunnel</a> action.</p>
                */
            closeTunnel(args: CloseTunnelCommandInput, options?: __HttpHandlerOptions): Promise<CloseTunnelCommandOutput>;
            closeTunnel(args: CloseTunnelCommandInput, cb: (err: any, data?: CloseTunnelCommandOutput) => void): void;
            closeTunnel(args: CloseTunnelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CloseTunnelCommandOutput) => void): void;
            /**
                * <p>Gets information about a tunnel identified by the unique tunnel id.</p>
                * 		       <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeTunnel</a> action.</p>
                */
            describeTunnel(args: DescribeTunnelCommandInput, options?: __HttpHandlerOptions): Promise<DescribeTunnelCommandOutput>;
            describeTunnel(args: DescribeTunnelCommandInput, cb: (err: any, data?: DescribeTunnelCommandOutput) => void): void;
            describeTunnel(args: DescribeTunnelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeTunnelCommandOutput) => void): void;
            /**
                * <p>Lists the tags for the specified resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>List all tunnels for an Amazon Web Services account. Tunnels are listed by creation time in
                * 			descending order, newer tunnels will be listed before older tunnels.</p>
                * 		       <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListTunnels</a> action.</p>
                */
            listTunnels(args: ListTunnelsCommandInput, options?: __HttpHandlerOptions): Promise<ListTunnelsCommandOutput>;
            listTunnels(args: ListTunnelsCommandInput, cb: (err: any, data?: ListTunnelsCommandOutput) => void): void;
            listTunnels(args: ListTunnelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTunnelsCommandOutput) => void): void;
            /**
                * <p>Creates a new tunnel, and returns two client access tokens for clients to use to
                * 			connect to the IoT Secure Tunneling proxy server.</p>
                * 		       <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">OpenTunnel</a> action.</p>
                */
            openTunnel(args: OpenTunnelCommandInput, options?: __HttpHandlerOptions): Promise<OpenTunnelCommandOutput>;
            openTunnel(args: OpenTunnelCommandInput, cb: (err: any, data?: OpenTunnelCommandOutput) => void): void;
            openTunnel(args: OpenTunnelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: OpenTunnelCommandOutput) => void): void;
            /**
                * <p>Revokes the current client access token (CAT) and returns new CAT for clients to
                * 			use when reconnecting to secure tunneling to access the same tunnel.</p>
                * 		       <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">RotateTunnelAccessToken</a> action.</p>
                * 		       <note>
                * 			         <p>Rotating the CAT doesn't extend the tunnel duration. For example, say the tunnel
                * 				duration is 12 hours and the tunnel has already been open for 4 hours. When you
                * 				rotate the access tokens, the new tokens that are generated can only be used for the
                * 				remaining 8 hours.</p>
                * 		       </note>
                */
            rotateTunnelAccessToken(args: RotateTunnelAccessTokenCommandInput, options?: __HttpHandlerOptions): Promise<RotateTunnelAccessTokenCommandOutput>;
            rotateTunnelAccessToken(args: RotateTunnelAccessTokenCommandInput, cb: (err: any, data?: RotateTunnelAccessTokenCommandOutput) => void): void;
            rotateTunnelAccessToken(args: RotateTunnelAccessTokenCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RotateTunnelAccessTokenCommandOutput) => void): void;
            /**
                * <p>A resource tag.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes a tag from a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/CloseTunnelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTSecureTunnelingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/IoTSecureTunnelingClient";
    import { CloseTunnelRequest, CloseTunnelResponse } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/models/models_0";
    export interface CloseTunnelCommandInput extends CloseTunnelRequest {
    }
    export interface CloseTunnelCommandOutput extends CloseTunnelResponse, __MetadataBearer {
    }
    /**
        * <p>Closes a tunnel identified by the unique tunnel id. When a <code>CloseTunnel</code>
        * 			request is received, we close the WebSocket connections between the client and proxy
        * 			server so no data can be transmitted.</p>
        * 		       <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">CloseTunnel</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTSecureTunnelingClient, CloseTunnelCommand } from "@aws-sdk/client-iotsecuretunneling"; // ES Modules import
        * // const { IoTSecureTunnelingClient, CloseTunnelCommand } = require("@aws-sdk/client-iotsecuretunneling"); // CommonJS import
        * const client = new IoTSecureTunnelingClient(config);
        * const command = new CloseTunnelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CloseTunnelCommandInput} for command's `input` shape.
        * @see {@link CloseTunnelCommandOutput} for command's `response` shape.
        * @see {@link IoTSecureTunnelingClientResolvedConfig | config} for IoTSecureTunnelingClient's `config` shape.
        *
        */
    export class CloseTunnelCommand extends $Command<CloseTunnelCommandInput, CloseTunnelCommandOutput, IoTSecureTunnelingClientResolvedConfig> {
            readonly input: CloseTunnelCommandInput;
            constructor(input: CloseTunnelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTSecureTunnelingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CloseTunnelCommandInput, CloseTunnelCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/DescribeTunnelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTSecureTunnelingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/IoTSecureTunnelingClient";
    import { DescribeTunnelRequest, DescribeTunnelResponse } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/models/models_0";
    export interface DescribeTunnelCommandInput extends DescribeTunnelRequest {
    }
    export interface DescribeTunnelCommandOutput extends DescribeTunnelResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about a tunnel identified by the unique tunnel id.</p>
        * 		       <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">DescribeTunnel</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTSecureTunnelingClient, DescribeTunnelCommand } from "@aws-sdk/client-iotsecuretunneling"; // ES Modules import
        * // const { IoTSecureTunnelingClient, DescribeTunnelCommand } = require("@aws-sdk/client-iotsecuretunneling"); // CommonJS import
        * const client = new IoTSecureTunnelingClient(config);
        * const command = new DescribeTunnelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeTunnelCommandInput} for command's `input` shape.
        * @see {@link DescribeTunnelCommandOutput} for command's `response` shape.
        * @see {@link IoTSecureTunnelingClientResolvedConfig | config} for IoTSecureTunnelingClient's `config` shape.
        *
        */
    export class DescribeTunnelCommand extends $Command<DescribeTunnelCommandInput, DescribeTunnelCommandOutput, IoTSecureTunnelingClientResolvedConfig> {
            readonly input: DescribeTunnelCommandInput;
            constructor(input: DescribeTunnelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTSecureTunnelingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeTunnelCommandInput, DescribeTunnelCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTSecureTunnelingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/IoTSecureTunnelingClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags for the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTSecureTunnelingClient, ListTagsForResourceCommand } from "@aws-sdk/client-iotsecuretunneling"; // ES Modules import
        * // const { IoTSecureTunnelingClient, ListTagsForResourceCommand } = require("@aws-sdk/client-iotsecuretunneling"); // CommonJS import
        * const client = new IoTSecureTunnelingClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link IoTSecureTunnelingClientResolvedConfig | config} for IoTSecureTunnelingClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, IoTSecureTunnelingClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTSecureTunnelingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/ListTunnelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTSecureTunnelingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/IoTSecureTunnelingClient";
    import { ListTunnelsRequest, ListTunnelsResponse } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/models/models_0";
    export interface ListTunnelsCommandInput extends ListTunnelsRequest {
    }
    export interface ListTunnelsCommandOutput extends ListTunnelsResponse, __MetadataBearer {
    }
    /**
        * <p>List all tunnels for an Amazon Web Services account. Tunnels are listed by creation time in
        * 			descending order, newer tunnels will be listed before older tunnels.</p>
        * 		       <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">ListTunnels</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTSecureTunnelingClient, ListTunnelsCommand } from "@aws-sdk/client-iotsecuretunneling"; // ES Modules import
        * // const { IoTSecureTunnelingClient, ListTunnelsCommand } = require("@aws-sdk/client-iotsecuretunneling"); // CommonJS import
        * const client = new IoTSecureTunnelingClient(config);
        * const command = new ListTunnelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTunnelsCommandInput} for command's `input` shape.
        * @see {@link ListTunnelsCommandOutput} for command's `response` shape.
        * @see {@link IoTSecureTunnelingClientResolvedConfig | config} for IoTSecureTunnelingClient's `config` shape.
        *
        */
    export class ListTunnelsCommand extends $Command<ListTunnelsCommandInput, ListTunnelsCommandOutput, IoTSecureTunnelingClientResolvedConfig> {
            readonly input: ListTunnelsCommandInput;
            constructor(input: ListTunnelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTSecureTunnelingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTunnelsCommandInput, ListTunnelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/OpenTunnelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTSecureTunnelingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/IoTSecureTunnelingClient";
    import { OpenTunnelRequest, OpenTunnelResponse } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/models/models_0";
    export interface OpenTunnelCommandInput extends OpenTunnelRequest {
    }
    export interface OpenTunnelCommandOutput extends OpenTunnelResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new tunnel, and returns two client access tokens for clients to use to
        * 			connect to the IoT Secure Tunneling proxy server.</p>
        * 		       <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">OpenTunnel</a> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTSecureTunnelingClient, OpenTunnelCommand } from "@aws-sdk/client-iotsecuretunneling"; // ES Modules import
        * // const { IoTSecureTunnelingClient, OpenTunnelCommand } = require("@aws-sdk/client-iotsecuretunneling"); // CommonJS import
        * const client = new IoTSecureTunnelingClient(config);
        * const command = new OpenTunnelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link OpenTunnelCommandInput} for command's `input` shape.
        * @see {@link OpenTunnelCommandOutput} for command's `response` shape.
        * @see {@link IoTSecureTunnelingClientResolvedConfig | config} for IoTSecureTunnelingClient's `config` shape.
        *
        */
    export class OpenTunnelCommand extends $Command<OpenTunnelCommandInput, OpenTunnelCommandOutput, IoTSecureTunnelingClientResolvedConfig> {
            readonly input: OpenTunnelCommandInput;
            constructor(input: OpenTunnelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTSecureTunnelingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<OpenTunnelCommandInput, OpenTunnelCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/RotateTunnelAccessTokenCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTSecureTunnelingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/IoTSecureTunnelingClient";
    import { RotateTunnelAccessTokenRequest, RotateTunnelAccessTokenResponse } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/models/models_0";
    export interface RotateTunnelAccessTokenCommandInput extends RotateTunnelAccessTokenRequest {
    }
    export interface RotateTunnelAccessTokenCommandOutput extends RotateTunnelAccessTokenResponse, __MetadataBearer {
    }
    /**
        * <p>Revokes the current client access token (CAT) and returns new CAT for clients to
        * 			use when reconnecting to secure tunneling to access the same tunnel.</p>
        * 		       <p>Requires permission to access the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsiot.html#awsiot-actions-as-permissions">RotateTunnelAccessToken</a> action.</p>
        * 		       <note>
        * 			         <p>Rotating the CAT doesn't extend the tunnel duration. For example, say the tunnel
        * 				duration is 12 hours and the tunnel has already been open for 4 hours. When you
        * 				rotate the access tokens, the new tokens that are generated can only be used for the
        * 				remaining 8 hours.</p>
        * 		       </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTSecureTunnelingClient, RotateTunnelAccessTokenCommand } from "@aws-sdk/client-iotsecuretunneling"; // ES Modules import
        * // const { IoTSecureTunnelingClient, RotateTunnelAccessTokenCommand } = require("@aws-sdk/client-iotsecuretunneling"); // CommonJS import
        * const client = new IoTSecureTunnelingClient(config);
        * const command = new RotateTunnelAccessTokenCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RotateTunnelAccessTokenCommandInput} for command's `input` shape.
        * @see {@link RotateTunnelAccessTokenCommandOutput} for command's `response` shape.
        * @see {@link IoTSecureTunnelingClientResolvedConfig | config} for IoTSecureTunnelingClient's `config` shape.
        *
        */
    export class RotateTunnelAccessTokenCommand extends $Command<RotateTunnelAccessTokenCommandInput, RotateTunnelAccessTokenCommandOutput, IoTSecureTunnelingClientResolvedConfig> {
            readonly input: RotateTunnelAccessTokenCommandInput;
            constructor(input: RotateTunnelAccessTokenCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTSecureTunnelingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RotateTunnelAccessTokenCommandInput, RotateTunnelAccessTokenCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTSecureTunnelingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/IoTSecureTunnelingClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>A resource tag.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTSecureTunnelingClient, TagResourceCommand } from "@aws-sdk/client-iotsecuretunneling"; // ES Modules import
        * // const { IoTSecureTunnelingClient, TagResourceCommand } = require("@aws-sdk/client-iotsecuretunneling"); // CommonJS import
        * const client = new IoTSecureTunnelingClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link IoTSecureTunnelingClientResolvedConfig | config} for IoTSecureTunnelingClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, IoTSecureTunnelingClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTSecureTunnelingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IoTSecureTunnelingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/IoTSecureTunnelingClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes a tag from a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IoTSecureTunnelingClient, UntagResourceCommand } from "@aws-sdk/client-iotsecuretunneling"; // ES Modules import
        * // const { IoTSecureTunnelingClient, UntagResourceCommand } = require("@aws-sdk/client-iotsecuretunneling"); // CommonJS import
        * const client = new IoTSecureTunnelingClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link IoTSecureTunnelingClientResolvedConfig | config} for IoTSecureTunnelingClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, IoTSecureTunnelingClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IoTSecureTunnelingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/IoTSecureTunnelingClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CloseTunnelCommandInput, CloseTunnelCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/CloseTunnelCommand";
    import { DescribeTunnelCommandInput, DescribeTunnelCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/DescribeTunnelCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/ListTagsForResourceCommand";
    import { ListTunnelsCommandInput, ListTunnelsCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/ListTunnelsCommand";
    import { OpenTunnelCommandInput, OpenTunnelCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/OpenTunnelCommand";
    import { RotateTunnelAccessTokenCommandInput, RotateTunnelAccessTokenCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/RotateTunnelAccessTokenCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/commands/UntagResourceCommand";
    export type ServiceInputTypes = CloseTunnelCommandInput | DescribeTunnelCommandInput | ListTagsForResourceCommandInput | ListTunnelsCommandInput | OpenTunnelCommandInput | RotateTunnelAccessTokenCommandInput | TagResourceCommandInput | UntagResourceCommandInput;
    export type ServiceOutputTypes = CloseTunnelCommandOutput | DescribeTunnelCommandOutput | ListTagsForResourceCommandOutput | ListTunnelsCommandOutput | OpenTunnelCommandOutput | RotateTunnelAccessTokenCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type IoTSecureTunnelingClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of IoTSecureTunnelingClient class constructor that set the region, credentials and other options.
        */
    export interface IoTSecureTunnelingClientConfig extends IoTSecureTunnelingClientConfigType {
    }
    type IoTSecureTunnelingClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of IoTSecureTunnelingClient class. This is resolved and normalized from the {@link IoTSecureTunnelingClientConfig | constructor configuration interface}.
        */
    export interface IoTSecureTunnelingClientResolvedConfig extends IoTSecureTunnelingClientResolvedConfigType {
    }
    /**
        * <fullname>IoT Secure Tunneling</fullname>
        * 		       <p>IoT Secure Tunneling creates remote connections to devices deployed in the
        * 			field.</p>
        * 		       <p>For more information about how IoT Secure Tunneling works, see <a href="https://docs.aws.amazon.com/iot/latest/developerguide/secure-tunneling.html">IoT
        * 				Secure Tunneling</a>.</p>
        */
    export class IoTSecureTunnelingClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, IoTSecureTunnelingClientResolvedConfig> {
            /**
                * The resolved configuration of IoTSecureTunnelingClient class. This is resolved and normalized from the {@link IoTSecureTunnelingClientConfig | constructor configuration interface}.
                */
            readonly config: IoTSecureTunnelingClientResolvedConfig;
            constructor(configuration: IoTSecureTunnelingClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { IoTSecureTunnelingServiceException as __BaseException } from "@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/models/IoTSecureTunnelingServiceException";
    export enum ClientMode {
            ALL = "ALL",
            DESTINATION = "DESTINATION",
            SOURCE = "SOURCE"
    }
    export interface CloseTunnelRequest {
            /**
                * <p>The ID of the tunnel to close.</p>
                */
            tunnelId: string | undefined;
            /**
                * <p>When set to true, IoT Secure Tunneling deletes the tunnel data
                * 			immediately.</p>
                */
            delete?: boolean;
    }
    export namespace CloseTunnelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloseTunnelRequest) => any;
    }
    export interface CloseTunnelResponse {
    }
    export namespace CloseTunnelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloseTunnelResponse) => any;
    }
    /**
        * <p>Thrown when an operation is attempted on a resource that does not exist.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export enum ConnectionStatus {
            CONNECTED = "CONNECTED",
            DISCONNECTED = "DISCONNECTED"
    }
    /**
        * <p>The state of a connection.</p>
        */
    export interface ConnectionState {
            /**
                * <p>The connection status of the tunnel. Valid values are <code>CONNECTED</code> and
                * 				<code>DISCONNECTED</code>.</p>
                */
            status?: ConnectionStatus | string;
            /**
                * <p>The last time the connection status was updated.</p>
                */
            lastUpdatedAt?: Date;
    }
    export namespace ConnectionState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionState) => any;
    }
    export interface DescribeTunnelRequest {
            /**
                * <p>The tunnel to describe.</p>
                */
            tunnelId: string | undefined;
    }
    export namespace DescribeTunnelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTunnelRequest) => any;
    }
    /**
        * <p>The destination configuration.</p>
        */
    export interface DestinationConfig {
            /**
                * <p>The name of the IoT thing to which you want to connect.</p>
                */
            thingName?: string;
            /**
                * <p>A list of service names that identify the target application. The IoT client
                * 			running on the destination device reads this value and uses it to look up a port or an
                * 			IP address and a port. The IoT client instantiates the local proxy, which uses this
                * 			information to connect to the destination application.</p>
                */
            services: string[] | undefined;
    }
    export namespace DestinationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DestinationConfig) => any;
    }
    export enum TunnelStatus {
            CLOSED = "CLOSED",
            OPEN = "OPEN"
    }
    /**
        * <p>An arbitary key/value pair used to add searchable metadata to secure tunnel
        * 			resources.</p>
        */
    export interface Tag {
            /**
                * <p>The key of the tag.</p>
                */
            key: string | undefined;
            /**
                * <p>The value of the tag.</p>
                */
            value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>Tunnel timeout configuration.</p>
        */
    export interface TimeoutConfig {
            /**
                * <p>The maximum amount of time (in minutes) a tunnel can remain open. If not specified,
                * 			maxLifetimeTimeoutMinutes defaults to 720 minutes. Valid values are from 1 minute to 12
                * 			hours (720 minutes) </p>
                */
            maxLifetimeTimeoutMinutes?: number;
    }
    export namespace TimeoutConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TimeoutConfig) => any;
    }
    /**
        * <p>A connection between a source computer and a destination device.</p>
        */
    export interface Tunnel {
            /**
                * <p>A unique alpha-numeric ID that identifies a tunnel.</p>
                */
            tunnelId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of a tunnel.</p>
                */
            tunnelArn?: string;
            /**
                * <p>The status of a tunnel. Valid values are: Open and Closed.</p>
                */
            status?: TunnelStatus | string;
            /**
                * <p>The connection state of the source application.</p>
                */
            sourceConnectionState?: ConnectionState;
            /**
                * <p>The connection state of the destination application.</p>
                */
            destinationConnectionState?: ConnectionState;
            /**
                * <p>A description of the tunnel.</p>
                */
            description?: string;
            /**
                * <p>The destination configuration that specifies the thing name of the destination
                * 			device and a service name that the local proxy uses to connect to the destination
                * 			application.</p>
                */
            destinationConfig?: DestinationConfig;
            /**
                * <p>Timeout configuration for the tunnel.</p>
                */
            timeoutConfig?: TimeoutConfig;
            /**
                * <p>A list of tag metadata associated with the secure tunnel.</p>
                */
            tags?: Tag[];
            /**
                * <p>The time when the tunnel was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The last time the tunnel was updated.</p>
                */
            lastUpdatedAt?: Date;
    }
    export namespace Tunnel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tunnel) => any;
    }
    export interface DescribeTunnelResponse {
            /**
                * <p>The tunnel being described.</p>
                */
            tunnel?: Tunnel;
    }
    export namespace DescribeTunnelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeTunnelResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The resource ARN.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tags for the specified resource.</p>
                */
            tags?: Tag[];
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListTunnelsRequest {
            /**
                * <p>The name of the IoT thing associated with the destination device.</p>
                */
            thingName?: string;
            /**
                * <p>The maximum number of results to return at once.</p>
                */
            maxResults?: number;
            /**
                * <p>To retrieve the next set of results, the nextToken value from a previous response;
                * 			otherwise null to receive the first set of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListTunnelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTunnelsRequest) => any;
    }
    /**
        * <p>Information about the tunnel.</p>
        */
    export interface TunnelSummary {
            /**
                * <p>The unique alpha-numeric identifier for the tunnel.</p>
                */
            tunnelId?: string;
            /**
                * <p>The Amazon Resource Name of the tunnel. </p>
                */
            tunnelArn?: string;
            /**
                * <p>The status of a tunnel. Valid values are: Open and Closed.</p>
                */
            status?: TunnelStatus | string;
            /**
                * <p>A description of the tunnel.</p>
                */
            description?: string;
            /**
                * <p>The time the tunnel was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The time the tunnel was last updated.</p>
                */
            lastUpdatedAt?: Date;
    }
    export namespace TunnelSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TunnelSummary) => any;
    }
    export interface ListTunnelsResponse {
            /**
                * <p>A short description of the tunnels in an Amazon Web Services account.</p>
                */
            tunnelSummaries?: TunnelSummary[];
            /**
                * <p>The token to use to get the next set of results, or null if there are no additional
                * 			results.</p>
                */
            nextToken?: string;
    }
    export namespace ListTunnelsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTunnelsResponse) => any;
    }
    /**
        * <p>Thrown when a tunnel limit is exceeded.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    export interface OpenTunnelRequest {
            /**
                * <p>A short text description of the tunnel. </p>
                */
            description?: string;
            /**
                * <p>A collection of tag metadata.</p>
                */
            tags?: Tag[];
            /**
                * <p>The destination configuration for the OpenTunnel request.</p>
                */
            destinationConfig?: DestinationConfig;
            /**
                * <p>Timeout configuration for a tunnel.</p>
                */
            timeoutConfig?: TimeoutConfig;
    }
    export namespace OpenTunnelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpenTunnelRequest) => any;
    }
    export interface OpenTunnelResponse {
            /**
                * <p>A unique alpha-numeric tunnel ID.</p>
                */
            tunnelId?: string;
            /**
                * <p>The Amazon Resource Name for the tunnel.</p>
                */
            tunnelArn?: string;
            /**
                * <p>The access token the source local proxy uses to connect to IoT Secure
                * 			Tunneling.</p>
                */
            sourceAccessToken?: string;
            /**
                * <p>The access token the destination local proxy uses to connect to IoT Secure
                * 			Tunneling.</p>
                */
            destinationAccessToken?: string;
    }
    export namespace OpenTunnelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpenTunnelResponse) => any;
    }
    export interface RotateTunnelAccessTokenRequest {
            /**
                * <p>The tunnel for which you want to rotate the access tokens.</p>
                */
            tunnelId: string | undefined;
            /**
                * <p>The mode of the client that will use the client token, which can be either the source
                * 			or destination, or both source and destination.</p>
                */
            clientMode: ClientMode | string | undefined;
            /**
                * <p>The destination configuration.</p>
                */
            destinationConfig?: DestinationConfig;
    }
    export namespace RotateTunnelAccessTokenRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RotateTunnelAccessTokenRequest) => any;
    }
    export interface RotateTunnelAccessTokenResponse {
            /**
                * <p>The Amazon Resource Name for the tunnel.</p>
                */
            tunnelArn?: string;
            /**
                * <p>The client access token that the source local proxy uses to connect to IoT Secure
                * 			Tunneling.</p>
                */
            sourceAccessToken?: string;
            /**
                * <p>The client access token that the destination local proxy uses to connect to IoT
                * 			Secure Tunneling.</p>
                */
            destinationAccessToken?: string;
    }
    export namespace RotateTunnelAccessTokenResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RotateTunnelAccessTokenResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The ARN of the resource.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The tags for the resource.</p>
                */
            tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The resource ARN.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The keys of the tags to remove.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
}

declare module '@aws-sdk/client-iotsecuretunneling/node_modules/@aws-sdk/client-iotsecuretunneling/dist-types/models/IoTSecureTunnelingServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from IoTSecureTunneling service.
        */
    export class IoTSecureTunnelingServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

