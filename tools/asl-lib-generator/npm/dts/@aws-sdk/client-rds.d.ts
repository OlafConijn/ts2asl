// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-rds' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AddRoleToDBClusterCommandInput, AddRoleToDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AddRoleToDBClusterCommand";
    import { AddRoleToDBInstanceCommandInput, AddRoleToDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AddRoleToDBInstanceCommand";
    import { AddSourceIdentifierToSubscriptionCommandInput, AddSourceIdentifierToSubscriptionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AddSourceIdentifierToSubscriptionCommand";
    import { AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AddTagsToResourceCommand";
    import { ApplyPendingMaintenanceActionCommandInput, ApplyPendingMaintenanceActionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ApplyPendingMaintenanceActionCommand";
    import { AuthorizeDBSecurityGroupIngressCommandInput, AuthorizeDBSecurityGroupIngressCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AuthorizeDBSecurityGroupIngressCommand";
    import { BacktrackDBClusterCommandInput, BacktrackDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/BacktrackDBClusterCommand";
    import { CancelExportTaskCommandInput, CancelExportTaskCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CancelExportTaskCommand";
    import { CopyDBClusterParameterGroupCommandInput, CopyDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyDBClusterParameterGroupCommand";
    import { CopyDBClusterSnapshotCommandInput, CopyDBClusterSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyDBClusterSnapshotCommand";
    import { CopyDBParameterGroupCommandInput, CopyDBParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyDBParameterGroupCommand";
    import { CopyDBSnapshotCommandInput, CopyDBSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyDBSnapshotCommand";
    import { CopyOptionGroupCommandInput, CopyOptionGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyOptionGroupCommand";
    import { CreateCustomDBEngineVersionCommandInput, CreateCustomDBEngineVersionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateCustomDBEngineVersionCommand";
    import { CreateDBClusterCommandInput, CreateDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBClusterCommand";
    import { CreateDBClusterEndpointCommandInput, CreateDBClusterEndpointCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBClusterEndpointCommand";
    import { CreateDBClusterParameterGroupCommandInput, CreateDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBClusterParameterGroupCommand";
    import { CreateDBClusterSnapshotCommandInput, CreateDBClusterSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBClusterSnapshotCommand";
    import { CreateDBInstanceCommandInput, CreateDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBInstanceCommand";
    import { CreateDBInstanceReadReplicaCommandInput, CreateDBInstanceReadReplicaCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBInstanceReadReplicaCommand";
    import { CreateDBParameterGroupCommandInput, CreateDBParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBParameterGroupCommand";
    import { CreateDBProxyCommandInput, CreateDBProxyCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBProxyCommand";
    import { CreateDBProxyEndpointCommandInput, CreateDBProxyEndpointCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBProxyEndpointCommand";
    import { CreateDBSecurityGroupCommandInput, CreateDBSecurityGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBSecurityGroupCommand";
    import { CreateDBSnapshotCommandInput, CreateDBSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBSnapshotCommand";
    import { CreateDBSubnetGroupCommandInput, CreateDBSubnetGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBSubnetGroupCommand";
    import { CreateEventSubscriptionCommandInput, CreateEventSubscriptionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateEventSubscriptionCommand";
    import { CreateGlobalClusterCommandInput, CreateGlobalClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateGlobalClusterCommand";
    import { CreateOptionGroupCommandInput, CreateOptionGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateOptionGroupCommand";
    import { DeleteCustomDBEngineVersionCommandInput, DeleteCustomDBEngineVersionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteCustomDBEngineVersionCommand";
    import { DeleteDBClusterCommandInput, DeleteDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBClusterCommand";
    import { DeleteDBClusterEndpointCommandInput, DeleteDBClusterEndpointCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBClusterEndpointCommand";
    import { DeleteDBClusterParameterGroupCommandInput, DeleteDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBClusterParameterGroupCommand";
    import { DeleteDBClusterSnapshotCommandInput, DeleteDBClusterSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBClusterSnapshotCommand";
    import { DeleteDBInstanceAutomatedBackupCommandInput, DeleteDBInstanceAutomatedBackupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBInstanceAutomatedBackupCommand";
    import { DeleteDBInstanceCommandInput, DeleteDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBInstanceCommand";
    import { DeleteDBParameterGroupCommandInput, DeleteDBParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBParameterGroupCommand";
    import { DeleteDBProxyCommandInput, DeleteDBProxyCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBProxyCommand";
    import { DeleteDBProxyEndpointCommandInput, DeleteDBProxyEndpointCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBProxyEndpointCommand";
    import { DeleteDBSecurityGroupCommandInput, DeleteDBSecurityGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBSecurityGroupCommand";
    import { DeleteDBSnapshotCommandInput, DeleteDBSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBSnapshotCommand";
    import { DeleteDBSubnetGroupCommandInput, DeleteDBSubnetGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBSubnetGroupCommand";
    import { DeleteEventSubscriptionCommandInput, DeleteEventSubscriptionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteEventSubscriptionCommand";
    import { DeleteGlobalClusterCommandInput, DeleteGlobalClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteGlobalClusterCommand";
    import { DeleteOptionGroupCommandInput, DeleteOptionGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteOptionGroupCommand";
    import { DeregisterDBProxyTargetsCommandInput, DeregisterDBProxyTargetsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeregisterDBProxyTargetsCommand";
    import { DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeAccountAttributesCommand";
    import { DescribeCertificatesCommandInput, DescribeCertificatesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeCertificatesCommand";
    import { DescribeDBClusterBacktracksCommandInput, DescribeDBClusterBacktracksCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterBacktracksCommand";
    import { DescribeDBClusterEndpointsCommandInput, DescribeDBClusterEndpointsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterEndpointsCommand";
    import { DescribeDBClusterParameterGroupsCommandInput, DescribeDBClusterParameterGroupsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterParameterGroupsCommand";
    import { DescribeDBClusterParametersCommandInput, DescribeDBClusterParametersCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterParametersCommand";
    import { DescribeDBClustersCommandInput, DescribeDBClustersCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClustersCommand";
    import { DescribeDBClusterSnapshotAttributesCommandInput, DescribeDBClusterSnapshotAttributesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterSnapshotAttributesCommand";
    import { DescribeDBClusterSnapshotsCommandInput, DescribeDBClusterSnapshotsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterSnapshotsCommand";
    import { DescribeDBEngineVersionsCommandInput, DescribeDBEngineVersionsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBEngineVersionsCommand";
    import { DescribeDBInstanceAutomatedBackupsCommandInput, DescribeDBInstanceAutomatedBackupsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBInstanceAutomatedBackupsCommand";
    import { DescribeDBInstancesCommandInput, DescribeDBInstancesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBInstancesCommand";
    import { DescribeDBLogFilesCommandInput, DescribeDBLogFilesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBLogFilesCommand";
    import { DescribeDBParameterGroupsCommandInput, DescribeDBParameterGroupsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBParameterGroupsCommand";
    import { DescribeDBParametersCommandInput, DescribeDBParametersCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBParametersCommand";
    import { DescribeDBProxiesCommandInput, DescribeDBProxiesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBProxiesCommand";
    import { DescribeDBProxyEndpointsCommandInput, DescribeDBProxyEndpointsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBProxyEndpointsCommand";
    import { DescribeDBProxyTargetGroupsCommandInput, DescribeDBProxyTargetGroupsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBProxyTargetGroupsCommand";
    import { DescribeDBProxyTargetsCommandInput, DescribeDBProxyTargetsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBProxyTargetsCommand";
    import { DescribeDBSecurityGroupsCommandInput, DescribeDBSecurityGroupsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBSecurityGroupsCommand";
    import { DescribeDBSnapshotAttributesCommandInput, DescribeDBSnapshotAttributesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBSnapshotAttributesCommand";
    import { DescribeDBSnapshotsCommandInput, DescribeDBSnapshotsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBSnapshotsCommand";
    import { DescribeDBSubnetGroupsCommandInput, DescribeDBSubnetGroupsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBSubnetGroupsCommand";
    import { DescribeEngineDefaultClusterParametersCommandInput, DescribeEngineDefaultClusterParametersCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEngineDefaultClusterParametersCommand";
    import { DescribeEngineDefaultParametersCommandInput, DescribeEngineDefaultParametersCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEngineDefaultParametersCommand";
    import { DescribeEventCategoriesCommandInput, DescribeEventCategoriesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEventCategoriesCommand";
    import { DescribeEventsCommandInput, DescribeEventsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEventsCommand";
    import { DescribeEventSubscriptionsCommandInput, DescribeEventSubscriptionsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEventSubscriptionsCommand";
    import { DescribeExportTasksCommandInput, DescribeExportTasksCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeExportTasksCommand";
    import { DescribeGlobalClustersCommandInput, DescribeGlobalClustersCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeGlobalClustersCommand";
    import { DescribeOptionGroupOptionsCommandInput, DescribeOptionGroupOptionsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeOptionGroupOptionsCommand";
    import { DescribeOptionGroupsCommandInput, DescribeOptionGroupsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeOptionGroupsCommand";
    import { DescribeOrderableDBInstanceOptionsCommandInput, DescribeOrderableDBInstanceOptionsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeOrderableDBInstanceOptionsCommand";
    import { DescribePendingMaintenanceActionsCommandInput, DescribePendingMaintenanceActionsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribePendingMaintenanceActionsCommand";
    import { DescribeReservedDBInstancesCommandInput, DescribeReservedDBInstancesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeReservedDBInstancesCommand";
    import { DescribeReservedDBInstancesOfferingsCommandInput, DescribeReservedDBInstancesOfferingsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeReservedDBInstancesOfferingsCommand";
    import { DescribeSourceRegionsCommandInput, DescribeSourceRegionsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeSourceRegionsCommand";
    import { DescribeValidDBInstanceModificationsCommandInput, DescribeValidDBInstanceModificationsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeValidDBInstanceModificationsCommand";
    import { DownloadDBLogFilePortionCommandInput, DownloadDBLogFilePortionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DownloadDBLogFilePortionCommand";
    import { FailoverDBClusterCommandInput, FailoverDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/FailoverDBClusterCommand";
    import { FailoverGlobalClusterCommandInput, FailoverGlobalClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/FailoverGlobalClusterCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ListTagsForResourceCommand";
    import { ModifyCertificatesCommandInput, ModifyCertificatesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyCertificatesCommand";
    import { ModifyCurrentDBClusterCapacityCommandInput, ModifyCurrentDBClusterCapacityCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyCurrentDBClusterCapacityCommand";
    import { ModifyCustomDBEngineVersionCommandInput, ModifyCustomDBEngineVersionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyCustomDBEngineVersionCommand";
    import { ModifyDBClusterCommandInput, ModifyDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBClusterCommand";
    import { ModifyDBClusterEndpointCommandInput, ModifyDBClusterEndpointCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBClusterEndpointCommand";
    import { ModifyDBClusterParameterGroupCommandInput, ModifyDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBClusterParameterGroupCommand";
    import { ModifyDBClusterSnapshotAttributeCommandInput, ModifyDBClusterSnapshotAttributeCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBClusterSnapshotAttributeCommand";
    import { ModifyDBInstanceCommandInput, ModifyDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBInstanceCommand";
    import { ModifyDBParameterGroupCommandInput, ModifyDBParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBParameterGroupCommand";
    import { ModifyDBProxyCommandInput, ModifyDBProxyCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBProxyCommand";
    import { ModifyDBProxyEndpointCommandInput, ModifyDBProxyEndpointCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBProxyEndpointCommand";
    import { ModifyDBProxyTargetGroupCommandInput, ModifyDBProxyTargetGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBProxyTargetGroupCommand";
    import { ModifyDBSnapshotAttributeCommandInput, ModifyDBSnapshotAttributeCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBSnapshotAttributeCommand";
    import { ModifyDBSnapshotCommandInput, ModifyDBSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBSnapshotCommand";
    import { ModifyDBSubnetGroupCommandInput, ModifyDBSubnetGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBSubnetGroupCommand";
    import { ModifyEventSubscriptionCommandInput, ModifyEventSubscriptionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyEventSubscriptionCommand";
    import { ModifyGlobalClusterCommandInput, ModifyGlobalClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyGlobalClusterCommand";
    import { ModifyOptionGroupCommandInput, ModifyOptionGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyOptionGroupCommand";
    import { PromoteReadReplicaCommandInput, PromoteReadReplicaCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/PromoteReadReplicaCommand";
    import { PromoteReadReplicaDBClusterCommandInput, PromoteReadReplicaDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/PromoteReadReplicaDBClusterCommand";
    import { PurchaseReservedDBInstancesOfferingCommandInput, PurchaseReservedDBInstancesOfferingCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/PurchaseReservedDBInstancesOfferingCommand";
    import { RebootDBClusterCommandInput, RebootDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RebootDBClusterCommand";
    import { RebootDBInstanceCommandInput, RebootDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RebootDBInstanceCommand";
    import { RegisterDBProxyTargetsCommandInput, RegisterDBProxyTargetsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RegisterDBProxyTargetsCommand";
    import { RemoveFromGlobalClusterCommandInput, RemoveFromGlobalClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveFromGlobalClusterCommand";
    import { RemoveRoleFromDBClusterCommandInput, RemoveRoleFromDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveRoleFromDBClusterCommand";
    import { RemoveRoleFromDBInstanceCommandInput, RemoveRoleFromDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveRoleFromDBInstanceCommand";
    import { RemoveSourceIdentifierFromSubscriptionCommandInput, RemoveSourceIdentifierFromSubscriptionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveSourceIdentifierFromSubscriptionCommand";
    import { RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveTagsFromResourceCommand";
    import { ResetDBClusterParameterGroupCommandInput, ResetDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ResetDBClusterParameterGroupCommand";
    import { ResetDBParameterGroupCommandInput, ResetDBParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ResetDBParameterGroupCommand";
    import { RestoreDBClusterFromS3CommandInput, RestoreDBClusterFromS3CommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBClusterFromS3Command";
    import { RestoreDBClusterFromSnapshotCommandInput, RestoreDBClusterFromSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBClusterFromSnapshotCommand";
    import { RestoreDBClusterToPointInTimeCommandInput, RestoreDBClusterToPointInTimeCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBClusterToPointInTimeCommand";
    import { RestoreDBInstanceFromDBSnapshotCommandInput, RestoreDBInstanceFromDBSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBInstanceFromDBSnapshotCommand";
    import { RestoreDBInstanceFromS3CommandInput, RestoreDBInstanceFromS3CommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBInstanceFromS3Command";
    import { RestoreDBInstanceToPointInTimeCommandInput, RestoreDBInstanceToPointInTimeCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBInstanceToPointInTimeCommand";
    import { RevokeDBSecurityGroupIngressCommandInput, RevokeDBSecurityGroupIngressCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RevokeDBSecurityGroupIngressCommand";
    import { StartActivityStreamCommandInput, StartActivityStreamCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartActivityStreamCommand";
    import { StartDBClusterCommandInput, StartDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartDBClusterCommand";
    import { StartDBInstanceAutomatedBackupsReplicationCommandInput, StartDBInstanceAutomatedBackupsReplicationCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartDBInstanceAutomatedBackupsReplicationCommand";
    import { StartDBInstanceCommandInput, StartDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartDBInstanceCommand";
    import { StartExportTaskCommandInput, StartExportTaskCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartExportTaskCommand";
    import { StopActivityStreamCommandInput, StopActivityStreamCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StopActivityStreamCommand";
    import { StopDBClusterCommandInput, StopDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StopDBClusterCommand";
    import { StopDBInstanceAutomatedBackupsReplicationCommandInput, StopDBInstanceAutomatedBackupsReplicationCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StopDBInstanceAutomatedBackupsReplicationCommand";
    import { StopDBInstanceCommandInput, StopDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StopDBInstanceCommand";
    import { RDSClient } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    /**
        * <fullname>Amazon Relational Database Service</fullname>
        *         <p></p>
        *
        *         <p>Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and
        *           scale a relational database in the cloud. It provides cost-efficient, resizeable capacity for an industry-standard relational
        *           database and manages common database administration tasks, freeing up developers to focus on what makes their applications
        *           and businesses unique.</p>
        *         <p>Amazon RDS gives you access to the capabilities of a MySQL, MariaDB, PostgreSQL, Microsoft SQL Server,
        *           Oracle, or Amazon Aurora database server. These capabilities mean that the code, applications, and tools
        *           you already use today with your existing databases work with Amazon RDS without modification. Amazon RDS
        *           automatically backs up your database and maintains the database software that powers your DB instance. Amazon RDS
        *           is flexible: you can scale your DB instance's compute resources and storage capacity to meet your
        *           application's demand. As with all Amazon Web Services, there are no up-front investments, and you pay only for
        *           the resources you use.</p>
        *         <p>This interface reference for Amazon RDS contains documentation for a programming or command line interface
        *           you can use to manage Amazon RDS. Amazon RDS is asynchronous, which means that some interfaces might
        *           require techniques such as polling or callback functions to determine when a command has been applied. In this
        *           reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot,
        *           or during the maintenance window. The reference structure is as follows, and we list following some related topics
        *           from the user guide.</p>
        *         <p>
        *             <b>Amazon RDS API Reference</b>
        *          </p>
        *         <ul>
        *             <li>
        *                 <p>For the alphabetical list of API actions, see
        *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html">API Actions</a>.</p>
        *             </li>
        *             <li>
        *                 <p>For the alphabetical list of data types, see
        *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Types.html">Data Types</a>.</p>
        *             </li>
        *             <li>
        *                 <p>For a list of common query parameters, see
        *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonParameters.html">Common Parameters</a>.</p>
        *             </li>
        *             <li>
        *                 <p>For descriptions of the error codes, see
        *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
        *             </li>
        *          </ul>
        *         <p>
        *             <b>Amazon RDS User Guide</b>
        *          </p>
        *         <ul>
        *             <li>
        *                 <p>For a summary of the Amazon RDS interfaces, see
        *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html#Welcome.Interfaces">Available RDS Interfaces</a>.</p>
        *             </li>
        *             <li>
        *                 <p>For more information about how to use the Query API, see
        *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Using_the_Query_API.html">Using the Query API</a>.</p>
        *             </li>
        *          </ul>
        */
    export class RDS extends RDSClient {
            /**
                * <p>Associates an Identity and Access Management (IAM) role with a DB cluster.</p>
                */
            addRoleToDBCluster(args: AddRoleToDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<AddRoleToDBClusterCommandOutput>;
            addRoleToDBCluster(args: AddRoleToDBClusterCommandInput, cb: (err: any, data?: AddRoleToDBClusterCommandOutput) => void): void;
            addRoleToDBCluster(args: AddRoleToDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddRoleToDBClusterCommandOutput) => void): void;
            /**
                * <p>Associates an Amazon Web Services Identity and Access Management (IAM) role with a DB instance.</p>
                *         <note>
                *             <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p>
                *         </note>
                *         <p>This command doesn't apply to RDS Custom.</p>
                */
            addRoleToDBInstance(args: AddRoleToDBInstanceCommandInput, options?: __HttpHandlerOptions): Promise<AddRoleToDBInstanceCommandOutput>;
            addRoleToDBInstance(args: AddRoleToDBInstanceCommandInput, cb: (err: any, data?: AddRoleToDBInstanceCommandOutput) => void): void;
            addRoleToDBInstance(args: AddRoleToDBInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddRoleToDBInstanceCommandOutput) => void): void;
            /**
                * <p>Adds a source identifier to an existing RDS event notification subscription.</p>
                */
            addSourceIdentifierToSubscription(args: AddSourceIdentifierToSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<AddSourceIdentifierToSubscriptionCommandOutput>;
            addSourceIdentifierToSubscription(args: AddSourceIdentifierToSubscriptionCommandInput, cb: (err: any, data?: AddSourceIdentifierToSubscriptionCommandOutput) => void): void;
            addSourceIdentifierToSubscription(args: AddSourceIdentifierToSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddSourceIdentifierToSubscriptionCommandOutput) => void): void;
            /**
                * <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p>
                *         <p>For an overview on tagging Amazon RDS resources,
                *             see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
                */
            addTagsToResource(args: AddTagsToResourceCommandInput, options?: __HttpHandlerOptions): Promise<AddTagsToResourceCommandOutput>;
            addTagsToResource(args: AddTagsToResourceCommandInput, cb: (err: any, data?: AddTagsToResourceCommandOutput) => void): void;
            addTagsToResource(args: AddTagsToResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddTagsToResourceCommandOutput) => void): void;
            /**
                * <p>Applies a pending maintenance action to a resource (for example, to a DB instance).</p>
                */
            applyPendingMaintenanceAction(args: ApplyPendingMaintenanceActionCommandInput, options?: __HttpHandlerOptions): Promise<ApplyPendingMaintenanceActionCommandOutput>;
            applyPendingMaintenanceAction(args: ApplyPendingMaintenanceActionCommandInput, cb: (err: any, data?: ApplyPendingMaintenanceActionCommandOutput) => void): void;
            applyPendingMaintenanceAction(args: ApplyPendingMaintenanceActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ApplyPendingMaintenanceActionCommandOutput) => void): void;
            /**
                * <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security
                *           groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC
                *           instances. Second, IP ranges are available if the application accessing your database is running on the internet.
                *           Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId
                *           and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p>
                *         <note>
                *             <p>You can't authorize ingress from an EC2 security group in one Amazon Web Services Region to an Amazon RDS DB instance in
                *              another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p>
                *         </note>
                *         <p>For an overview of CIDR ranges, go to the
                *             <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
                */
            authorizeDBSecurityGroupIngress(args: AuthorizeDBSecurityGroupIngressCommandInput, options?: __HttpHandlerOptions): Promise<AuthorizeDBSecurityGroupIngressCommandOutput>;
            authorizeDBSecurityGroupIngress(args: AuthorizeDBSecurityGroupIngressCommandInput, cb: (err: any, data?: AuthorizeDBSecurityGroupIngressCommandOutput) => void): void;
            authorizeDBSecurityGroupIngress(args: AuthorizeDBSecurityGroupIngressCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AuthorizeDBSecurityGroupIngressCommandOutput) => void): void;
            /**
                * <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p>
                *         <p>For more information on backtracking, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html">
                *                 Backtracking an Aurora DB Cluster</a> in the
                *             <i>Amazon Aurora User Guide</i>.</p>
                *         <note>
                *             <p>This action only applies to Aurora MySQL DB clusters.</p>
                *         </note>
                */
            backtrackDBCluster(args: BacktrackDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<BacktrackDBClusterCommandOutput>;
            backtrackDBCluster(args: BacktrackDBClusterCommandInput, cb: (err: any, data?: BacktrackDBClusterCommandOutput) => void): void;
            backtrackDBCluster(args: BacktrackDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BacktrackDBClusterCommandOutput) => void): void;
            /**
                * <p>Cancels an export task in progress that is exporting a snapshot to Amazon S3.
                *             Any data that has already been written to the S3 bucket isn't removed.</p>
                */
            cancelExportTask(args: CancelExportTaskCommandInput, options?: __HttpHandlerOptions): Promise<CancelExportTaskCommandOutput>;
            cancelExportTask(args: CancelExportTaskCommandInput, cb: (err: any, data?: CancelExportTaskCommandOutput) => void): void;
            cancelExportTask(args: CancelExportTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelExportTaskCommandOutput) => void): void;
            /**
                * <p>Copies the specified DB cluster parameter group.</p>
                */
            copyDBClusterParameterGroup(args: CopyDBClusterParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<CopyDBClusterParameterGroupCommandOutput>;
            copyDBClusterParameterGroup(args: CopyDBClusterParameterGroupCommandInput, cb: (err: any, data?: CopyDBClusterParameterGroupCommandOutput) => void): void;
            copyDBClusterParameterGroup(args: CopyDBClusterParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CopyDBClusterParameterGroupCommandOutput) => void): void;
            /**
                * <p>Copies a snapshot of a DB cluster.</p>
                *         <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code>
                *           must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p>
                *         <p>You can copy an encrypted DB cluster snapshot from another Amazon Web Services Region. In that case, the Amazon Web Services Region where you call the <code>CopyDBClusterSnapshot</code> action
                *           is the destination Amazon Web Services Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another Amazon Web Services Region,
                *           you must provide the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>KmsKeyId</code> - The Amazon Web Services Key Management System (Amazon Web Services KMS) key identifier for the key to use to
                *               encrypt the copy of the DB cluster snapshot in the destination Amazon Web Services Region.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PreSignedUrl</code> -  A URL that contains a Signature Version 4 signed request for the
                *               <code>CopyDBClusterSnapshot</code> action to be called in the source Amazon Web Services Region where the DB cluster snapshot is copied from.
                *               The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the
                *               source Amazon Web Services Region that contains the encrypted DB cluster snapshot to be copied.</p>
                *                 <p>The pre-signed URL request must contain the following parameter values:</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>KmsKeyId</code> - The Amazon Web Services KMS key identifier for the KMS key to use to encrypt the copy of the DB
                *                       cluster snapshot in the destination Amazon Web Services Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code>
                *                       action that is called in the destination Amazon Web Services Region, and the action contained in the pre-signed URL.</p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>DestinationRegion</code> - The name of the Amazon Web Services Region that the DB cluster snapshot is to be created in.</p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster
                *                       snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example,
                *                       if you are copying an encrypted DB cluster snapshot from the us-west-2 Amazon Web Services Region, then your <code>SourceDBClusterSnapshotIdentifier</code>
                *                       looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p>
                *                     </li>
                *                </ul>
                *                 <p>To learn how to generate a Signature Version 4 signed request, see
                *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">
                *                       Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)</a> and
                *                   <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">
                *                       Signature Version 4 Signing Process</a>.</p>
                *                 <note>
                *                     <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the CLI)
                *                       instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid
                *                       request for the operation that can be executed in the source Amazon Web Services Region.</p>
                *                 </note>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination Amazon Web Services Region.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied.
                *               This identifier must be in the ARN format for the source Amazon Web Services Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL.</p>
                *             </li>
                *          </ul>
                *         <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified
                *           by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p>
                *         <p>For more information on copying encrypted Amazon Aurora DB cluster snapshots from one Amazon Web Services Region to another, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html">
                *               Copying a Snapshot</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *                 What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *                 Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            copyDBClusterSnapshot(args: CopyDBClusterSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CopyDBClusterSnapshotCommandOutput>;
            copyDBClusterSnapshot(args: CopyDBClusterSnapshotCommandInput, cb: (err: any, data?: CopyDBClusterSnapshotCommandOutput) => void): void;
            copyDBClusterSnapshot(args: CopyDBClusterSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CopyDBClusterSnapshotCommandOutput) => void): void;
            /**
                * <p>Copies the specified DB parameter group.</p>
                */
            copyDBParameterGroup(args: CopyDBParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<CopyDBParameterGroupCommandOutput>;
            copyDBParameterGroup(args: CopyDBParameterGroupCommandInput, cb: (err: any, data?: CopyDBParameterGroupCommandOutput) => void): void;
            copyDBParameterGroup(args: CopyDBParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CopyDBParameterGroupCommandOutput) => void): void;
            /**
                * <p>Copies the specified DB snapshot. The source DB snapshot must be in the <code>available</code> state.</p>
                *         <p>You can copy a snapshot from one Amazon Web Services Region to another. In that case, the Amazon Web Services Region
                *             where you call the <code>CopyDBSnapshot</code> action is the destination Amazon Web Services Region for the
                *             DB snapshot copy.</p>
                *         <p>This command doesn't apply to RDS Custom.</p>
                *         <p>For more information about copying snapshots, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            copyDBSnapshot(args: CopyDBSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CopyDBSnapshotCommandOutput>;
            copyDBSnapshot(args: CopyDBSnapshotCommandInput, cb: (err: any, data?: CopyDBSnapshotCommandOutput) => void): void;
            copyDBSnapshot(args: CopyDBSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CopyDBSnapshotCommandOutput) => void): void;
            /**
                * <p>Copies the specified option group.</p>
                */
            copyOptionGroup(args: CopyOptionGroupCommandInput, options?: __HttpHandlerOptions): Promise<CopyOptionGroupCommandOutput>;
            copyOptionGroup(args: CopyOptionGroupCommandInput, cb: (err: any, data?: CopyOptionGroupCommandOutput) => void): void;
            copyOptionGroup(args: CopyOptionGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CopyOptionGroupCommandOutput) => void): void;
            /**
                * <p>Creates a custom DB engine version (CEV). A CEV is a binary volume snapshot of a database engine and specific
                *             AMI. The supported engines are the following:</p>
                *         <ul>
                *             <li>
                *                 <p>Oracle Database 12.1 Enterprise Edition with the January 2021 or later RU/RUR</p>
                *             </li>
                *             <li>
                *                 <p>Oracle Database 19c Enterprise Edition with the January 2021 or later RU/RUR</p>
                *             </li>
                *          </ul>
                *         <p>Amazon RDS, which is a fully managed service, supplies the Amazon Machine Image (AMI) and database software.
                *             The Amazon RDS database software is preinstalled, so you need only select a DB engine and version, and create
                *             your database. With Amazon RDS Custom for Oracle, you upload your database installation files in Amazon S3.</p>
                *         <p>When you create a custom engine version, you specify the files in a JSON document called a CEV manifest.
                *             This document describes installation .zip files stored in Amazon S3. RDS Custom creates your CEV from
                *             the installation files that you provided. This service model is called Bring Your Own Media (BYOM).</p>
                *         <p>Creation takes approximately two hours. If creation fails, RDS Custom issues <code>RDS-EVENT-0196</code> with
                *             the message <code>Creation failed for custom engine version</code>, and includes details about the failure.
                *             For example, the event prints missing files.</p>
                *         <p>After you create the CEV, it is available for use. You can create multiple CEVs, and create multiple
                *             RDS Custom instances from any CEV. You can also change the status of a CEV to make it available or
                *             inactive.</p>
                *         <note>
                *             <p>The MediaImport service that imports files from Amazon S3 to create CEVs isn't integrated with
                *             Amazon Web Services CloudTrail. If you turn on data logging for Amazon RDS in CloudTrail, calls to the
                *             <code>CreateCustomDbEngineVersion</code> event aren't logged. However, you might see calls from the
                *             API gateway that accesses your Amazon S3 bucket. These calls originate from the MediaImport service for
                *             the <code>CreateCustomDbEngineVersion</code> event.</p>
                *         </note>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.create">
                *                 Creating a CEV</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            createCustomDBEngineVersion(args: CreateCustomDBEngineVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreateCustomDBEngineVersionCommandOutput>;
            createCustomDBEngineVersion(args: CreateCustomDBEngineVersionCommandInput, cb: (err: any, data?: CreateCustomDBEngineVersionCommandOutput) => void): void;
            createCustomDBEngineVersion(args: CreateCustomDBEngineVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCustomDBEngineVersionCommandOutput) => void): void;
            /**
                * <p>Creates a new Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
                *         <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create an Amazon
                *             Aurora DB cluster as a read replica of another DB cluster or Amazon RDS MySQL or
                *             PostgreSQL DB instance. For cross-Region replication where the DB cluster identified by
                *                 <code>ReplicationSourceIdentifier</code> is encrypted, also specify the
                *                 <code>PreSignedUrl</code> parameter.</p>
                *         <p>For more information on Amazon Aurora, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            createDBCluster(args: CreateDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBClusterCommandOutput>;
            createDBCluster(args: CreateDBClusterCommandInput, cb: (err: any, data?: CreateDBClusterCommandOutput) => void): void;
            createDBCluster(args: CreateDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBClusterCommandOutput) => void): void;
            /**
                * <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p>
                *         <note>
                *             <p>This action only applies to Aurora DB clusters.</p>
                *         </note>
                */
            createDBClusterEndpoint(args: CreateDBClusterEndpointCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBClusterEndpointCommandOutput>;
            createDBClusterEndpoint(args: CreateDBClusterEndpointCommandInput, cb: (err: any, data?: CreateDBClusterEndpointCommandOutput) => void): void;
            createDBClusterEndpoint(args: CreateDBClusterEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBClusterEndpointCommandOutput) => void): void;
            /**
                * <p>Creates a new DB cluster parameter group.</p>
                *         <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p>
                *         <p>A DB cluster parameter group is initially created with the default parameters for the
                *             database engine used by instances in the DB cluster. To provide custom values for any of the
                *             parameters, you must modify the group after creating it using
                *             <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to
                *             associate it with your DB cluster using <code>ModifyDBCluster</code>.</p>
                *         <p>When you associate a new DB cluster parameter group with a running Aurora DB cluster, reboot the DB
                *             instances in the DB cluster without failover for the new DB cluster parameter group and
                *             associated settings to take effect.</p>
                *         <p>When you associate a new DB cluster parameter group with a running Multi-AZ DB cluster, reboot the DB
                *           cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p>
                *         <important>
                *             <p>After you create a DB cluster parameter group, you should wait at least 5 minutes
                *                 before creating your first DB cluster
                *                 that uses that DB cluster parameter group as the default parameter
                *                 group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter
                *                 group is used as the default for a new DB cluster. This is especially important for parameters
                *                 that are critical when creating the default database for a DB cluster, such as the character set
                *                 for the default database defined by the <code>character_set_database</code> parameter. You can use the
                *                 <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
                *                 <code>DescribeDBClusterParameters</code> action to verify
                *                 that your DB cluster parameter group has been created or modified.</p>
                *         </important>
                *         <p>For more information on Amazon Aurora, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            createDBClusterParameterGroup(args: CreateDBClusterParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBClusterParameterGroupCommandOutput>;
            createDBClusterParameterGroup(args: CreateDBClusterParameterGroupCommandInput, cb: (err: any, data?: CreateDBClusterParameterGroupCommandOutput) => void): void;
            createDBClusterParameterGroup(args: CreateDBClusterParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBClusterParameterGroupCommandOutput) => void): void;
            /**
                * <p>Creates a snapshot of a DB cluster.</p>
                *         <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What is Amazon
                *                 Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            createDBClusterSnapshot(args: CreateDBClusterSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBClusterSnapshotCommandOutput>;
            createDBClusterSnapshot(args: CreateDBClusterSnapshotCommandInput, cb: (err: any, data?: CreateDBClusterSnapshotCommandOutput) => void): void;
            createDBClusterSnapshot(args: CreateDBClusterSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBClusterSnapshotCommandOutput) => void): void;
            /**
                * <p>Creates a new DB instance.</p>
                */
            createDBInstance(args: CreateDBInstanceCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBInstanceCommandOutput>;
            createDBInstance(args: CreateDBInstanceCommandInput, cb: (err: any, data?: CreateDBInstanceCommandOutput) => void): void;
            createDBInstance(args: CreateDBInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBInstanceCommandOutput) => void): void;
            /**
                * <p>Creates a new DB instance that acts as a read replica for an existing source DB
                *             instance. You can create a read replica for a DB instance running MySQL, MariaDB,
                *             Oracle, PostgreSQL, or SQL Server. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read
                *                 Replicas</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>Amazon Aurora doesn't support this action. Call the <code>CreateDBInstance</code>
                *             action to create a DB instance for an Aurora DB cluster.</p>
                *         <p>All read replica DB instances are created with backups disabled. All other DB
                *             instance attributes (including DB security groups and DB parameter groups) are inherited
                *             from the source DB instance, except as specified.</p>
                *         <important>
                *             <p>Your source DB instance must have backup retention enabled.</p>
                *         </important>
                */
            createDBInstanceReadReplica(args: CreateDBInstanceReadReplicaCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBInstanceReadReplicaCommandOutput>;
            createDBInstanceReadReplica(args: CreateDBInstanceReadReplicaCommandInput, cb: (err: any, data?: CreateDBInstanceReadReplicaCommandOutput) => void): void;
            createDBInstanceReadReplica(args: CreateDBInstanceReadReplicaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBInstanceReadReplicaCommandOutput) => void): void;
            /**
                * <p>Creates a new DB parameter group.</p>
                *         <p>A DB parameter group is initially created with the default parameters for the
                *             database engine used by the DB instance. To provide custom values for any of the
                *             parameters, you must modify the group after creating it using
                *             <code>ModifyDBParameterGroup</code>. Once you've created a DB parameter group, you need to
                *             associate it with your DB instance using <code>ModifyDBInstance</code>. When you associate
                *             a new DB parameter group with a running DB instance, you need to reboot the DB
                *             instance without failover for the new DB parameter group and associated settings to take effect.</p>
                *         <p>This command doesn't apply to RDS Custom.</p>
                *         <important>
                *             <p>After you create a DB parameter group, you should wait at least 5 minutes
                *                 before creating your first DB instance that uses that DB parameter group as the default parameter
                *                 group. This allows Amazon RDS to fully complete the create action before the parameter
                *                 group is used as the default for a new DB instance. This is especially important for parameters
                *                 that are critical when creating the default database for a DB instance, such as the character set
                *                 for the default database defined by the <code>character_set_database</code> parameter. You can use the
                *                 <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
                *                 <i>DescribeDBParameters</i> command to verify
                *                 that your DB parameter group has been created or modified.</p>
                *         </important>
                */
            createDBParameterGroup(args: CreateDBParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBParameterGroupCommandOutput>;
            createDBParameterGroup(args: CreateDBParameterGroupCommandInput, cb: (err: any, data?: CreateDBParameterGroupCommandOutput) => void): void;
            createDBParameterGroup(args: CreateDBParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBParameterGroupCommandOutput) => void): void;
            /**
                * <p>Creates a new DB proxy.</p>
                */
            createDBProxy(args: CreateDBProxyCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBProxyCommandOutput>;
            createDBProxy(args: CreateDBProxyCommandInput, cb: (err: any, data?: CreateDBProxyCommandOutput) => void): void;
            createDBProxy(args: CreateDBProxyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBProxyCommandOutput) => void): void;
            /**
                * <p>Creates a <code>DBProxyEndpoint</code>. Only applies to proxies that are associated with Aurora DB clusters.
                *         You can use DB proxy endpoints to specify read/write or read-only access to the DB cluster. You can also use
                *         DB proxy endpoints to access a DB proxy through a different VPC than the proxy's default VPC.</p>
                */
            createDBProxyEndpoint(args: CreateDBProxyEndpointCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBProxyEndpointCommandOutput>;
            createDBProxyEndpoint(args: CreateDBProxyEndpointCommandInput, cb: (err: any, data?: CreateDBProxyEndpointCommandOutput) => void): void;
            createDBProxyEndpoint(args: CreateDBProxyEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBProxyEndpointCommandOutput) => void): void;
            /**
                * <p>Creates a new DB security group. DB security groups control access to a DB instance.</p>
                *         <note>
                *             <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p>
                *         </note>
                */
            createDBSecurityGroup(args: CreateDBSecurityGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBSecurityGroupCommandOutput>;
            createDBSecurityGroup(args: CreateDBSecurityGroupCommandInput, cb: (err: any, data?: CreateDBSecurityGroupCommandOutput) => void): void;
            createDBSecurityGroup(args: CreateDBSecurityGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBSecurityGroupCommandOutput) => void): void;
            /**
                * <p>Creates a snapshot of a DB instance. The source DB instance must be in the <code>available</code> or
                *                 <code>storage-optimization</code> state.</p>
                */
            createDBSnapshot(args: CreateDBSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBSnapshotCommandOutput>;
            createDBSnapshot(args: CreateDBSnapshotCommandInput, cb: (err: any, data?: CreateDBSnapshotCommandOutput) => void): void;
            createDBSnapshot(args: CreateDBSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBSnapshotCommandOutput) => void): void;
            /**
                * <p>Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Web Services Region.</p>
                */
            createDBSubnetGroup(args: CreateDBSubnetGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateDBSubnetGroupCommandOutput>;
            createDBSubnetGroup(args: CreateDBSubnetGroupCommandInput, cb: (err: any, data?: CreateDBSubnetGroupCommandOutput) => void): void;
            createDBSubnetGroup(args: CreateDBSubnetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDBSubnetGroupCommandOutput) => void): void;
            /**
                * <p>Creates an RDS event notification subscription. This action requires a topic Amazon
                *             Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API.
                *             To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the
                *             topic. The ARN is displayed in the SNS console.</p>
                *         <p>You can specify the type of source (<code>SourceType</code>) that you want to be
                *             notified of and provide a list of RDS sources (<code>SourceIds</code>) that triggers the
                *             events. You can also provide a list of event categories (<code>EventCategories</code>)
                *             for events that you want to be notified of. For example, you can specify
                *                 <code>SourceType</code> = <code>db-instance</code>, <code>SourceIds</code> =
                *                 <code>mydbinstance1</code>, <code>mydbinstance2</code> and
                *                 <code>EventCategories</code> = <code>Availability</code>,
                *             <code>Backup</code>.</p>
                *         <p>If you specify both the <code>SourceType</code> and <code>SourceIds</code>, such as <code>SourceType</code> = <code>db-instance</code>
                *           and <code>SourceIds</code> = <code>myDBInstance1</code>, you are notified of all the <code>db-instance</code> events for
                *           the specified source. If you specify a <code>SourceType</code> but do not specify <code>SourceIds</code>,
                *           you receive notice of the events for that source type for all your RDS sources. If you
                *           don't specify either the SourceType or the <code>SourceIds</code>, you are notified of events
                *           generated from all RDS sources belonging to your customer account.</p>
                *         <note>
                *             <p>RDS event notification is only available for unencrypted SNS topics. If you specify an
                *               encrypted SNS topic, event notifications aren't sent for the topic.</p>
                *         </note>
                */
            createEventSubscription(args: CreateEventSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<CreateEventSubscriptionCommandOutput>;
            createEventSubscription(args: CreateEventSubscriptionCommandInput, cb: (err: any, data?: CreateEventSubscriptionCommandOutput) => void): void;
            createEventSubscription(args: CreateEventSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateEventSubscriptionCommandOutput) => void): void;
            /**
                * <p>Creates an Aurora global database
                *         spread across multiple Amazon Web Services Regions. The global database
                *         contains a single primary cluster with read-write capability,
                *         and a read-only secondary cluster that receives
                *         data from the primary cluster through high-speed replication
                *         performed by the Aurora storage subsystem.</p>
                *         <p>You can create a global database that is initially empty, and then
                *         add a primary cluster and a secondary cluster to it.
                *         Or you can specify an existing Aurora cluster during the create operation,
                *         and this cluster becomes the primary cluster of the global database.</p>
                *         <note>
                *             <p>This action only applies to Aurora DB clusters.</p>
                *         </note>
                */
            createGlobalCluster(args: CreateGlobalClusterCommandInput, options?: __HttpHandlerOptions): Promise<CreateGlobalClusterCommandOutput>;
            createGlobalCluster(args: CreateGlobalClusterCommandInput, cb: (err: any, data?: CreateGlobalClusterCommandOutput) => void): void;
            createGlobalCluster(args: CreateGlobalClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGlobalClusterCommandOutput) => void): void;
            /**
                * <p>Creates a new option group. You can create up to 20 option groups.</p>
                *         <p>This command doesn't apply to RDS Custom.</p>
                */
            createOptionGroup(args: CreateOptionGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateOptionGroupCommandOutput>;
            createOptionGroup(args: CreateOptionGroupCommandInput, cb: (err: any, data?: CreateOptionGroupCommandOutput) => void): void;
            createOptionGroup(args: CreateOptionGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateOptionGroupCommandOutput) => void): void;
            /**
                * <p>Deletes a custom engine version. To run this command, make sure you meet the following prerequisites:</p>
                *         <ul>
                *             <li>
                *                 <p>The CEV must not be the default for RDS Custom. If it is, change the default
                *                 before running this command.</p>
                *             </li>
                *             <li>
                *                 <p>The CEV must not be associated with an RDS Custom DB instance, RDS Custom instance snapshot,
                *                 or automated backup of your RDS Custom instance.</p>
                *             </li>
                *          </ul>
                *         <p>Typically, deletion takes a few minutes.</p>
                *         <note>
                *             <p>The MediaImport service that imports files from Amazon S3 to create CEVs isn't integrated with
                *             Amazon Web Services CloudTrail. If you turn on data logging for Amazon RDS in CloudTrail, calls to the
                *             <code>DeleteCustomDbEngineVersion</code> event aren't logged. However, you might see calls from the
                *             API gateway that accesses your Amazon S3 bucket. These calls originate from the MediaImport service for
                *             the <code>DeleteCustomDbEngineVersion</code> event.</p>
                *         </note>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.delete">
                *             Deleting a CEV</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            deleteCustomDBEngineVersion(args: DeleteCustomDBEngineVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCustomDBEngineVersionCommandOutput>;
            deleteCustomDBEngineVersion(args: DeleteCustomDBEngineVersionCommandInput, cb: (err: any, data?: DeleteCustomDBEngineVersionCommandOutput) => void): void;
            deleteCustomDBEngineVersion(args: DeleteCustomDBEngineVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCustomDBEngineVersionCommandOutput) => void): void;
            /**
                * <p>The DeleteDBCluster action deletes a previously provisioned DB cluster.
                *           When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered.
                *           Manual DB cluster snapshots of the specified DB cluster are not deleted.</p>
                *         <p>For more information on Amazon Aurora, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            deleteDBCluster(args: DeleteDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBClusterCommandOutput>;
            deleteDBCluster(args: DeleteDBClusterCommandInput, cb: (err: any, data?: DeleteDBClusterCommandOutput) => void): void;
            deleteDBCluster(args: DeleteDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBClusterCommandOutput) => void): void;
            /**
                * <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p>
                *         <note>
                *             <p>This action only applies to Aurora DB clusters.</p>
                *         </note>
                */
            deleteDBClusterEndpoint(args: DeleteDBClusterEndpointCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBClusterEndpointCommandOutput>;
            deleteDBClusterEndpoint(args: DeleteDBClusterEndpointCommandInput, cb: (err: any, data?: DeleteDBClusterEndpointCommandOutput) => void): void;
            deleteDBClusterEndpoint(args: DeleteDBClusterEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBClusterEndpointCommandOutput) => void): void;
            /**
                * <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p>
                *         <p>For more information on Amazon Aurora, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            deleteDBClusterParameterGroup(args: DeleteDBClusterParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBClusterParameterGroupCommandOutput>;
            deleteDBClusterParameterGroup(args: DeleteDBClusterParameterGroupCommandInput, cb: (err: any, data?: DeleteDBClusterParameterGroupCommandOutput) => void): void;
            deleteDBClusterParameterGroup(args: DeleteDBClusterParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBClusterParameterGroupCommandOutput) => void): void;
            /**
                * <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p>
                *         <note>
                *             <p>The DB cluster snapshot must be in the <code>available</code> state to be
                *             deleted.</p>
                *         </note>
                *         <p>For more information on Amazon Aurora, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            deleteDBClusterSnapshot(args: DeleteDBClusterSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBClusterSnapshotCommandOutput>;
            deleteDBClusterSnapshot(args: DeleteDBClusterSnapshotCommandInput, cb: (err: any, data?: DeleteDBClusterSnapshotCommandOutput) => void): void;
            deleteDBClusterSnapshot(args: DeleteDBClusterSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBClusterSnapshotCommandOutput) => void): void;
            /**
                * <p>The DeleteDBInstance action deletes a previously provisioned DB instance.
                *           When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered.
                *           Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p>
                *         <p>If you request a final DB snapshot
                *         the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code>
                *         is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p>
                *         <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>,
                *           or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p>
                *         <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following
                *       conditions are true:</p>
                *         <ul>
                *             <li>
                *                 <p>The DB cluster is a read replica of another Amazon Aurora DB cluster.</p>
                *             </li>
                *             <li>
                *                 <p>The DB instance is the only instance in the DB cluster.</p>
                *             </li>
                *          </ul>
                *         <p>To delete a DB instance in this case, first call the
                *                 <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so
                *             it's no longer a read replica. After the promotion completes, then call the
                *                 <code>DeleteDBInstance</code> API action to delete the final instance in the DB
                *             cluster.</p>
                */
            deleteDBInstance(args: DeleteDBInstanceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBInstanceCommandOutput>;
            deleteDBInstance(args: DeleteDBInstanceCommandInput, cb: (err: any, data?: DeleteDBInstanceCommandOutput) => void): void;
            deleteDBInstance(args: DeleteDBInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBInstanceCommandOutput) => void): void;
            /**
                * <p>Deletes automated backups using the <code>DbiResourceId</code> value of the source DB instance or the Amazon Resource Name (ARN) of the automated backups.</p>
                */
            deleteDBInstanceAutomatedBackup(args: DeleteDBInstanceAutomatedBackupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBInstanceAutomatedBackupCommandOutput>;
            deleteDBInstanceAutomatedBackup(args: DeleteDBInstanceAutomatedBackupCommandInput, cb: (err: any, data?: DeleteDBInstanceAutomatedBackupCommandOutput) => void): void;
            deleteDBInstanceAutomatedBackup(args: DeleteDBInstanceAutomatedBackupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBInstanceAutomatedBackupCommandOutput) => void): void;
            /**
                * <p>Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.</p>
                */
            deleteDBParameterGroup(args: DeleteDBParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBParameterGroupCommandOutput>;
            deleteDBParameterGroup(args: DeleteDBParameterGroupCommandInput, cb: (err: any, data?: DeleteDBParameterGroupCommandOutput) => void): void;
            deleteDBParameterGroup(args: DeleteDBParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBParameterGroupCommandOutput) => void): void;
            /**
                * <p>Deletes an existing DB proxy.</p>
                */
            deleteDBProxy(args: DeleteDBProxyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBProxyCommandOutput>;
            deleteDBProxy(args: DeleteDBProxyCommandInput, cb: (err: any, data?: DeleteDBProxyCommandOutput) => void): void;
            deleteDBProxy(args: DeleteDBProxyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBProxyCommandOutput) => void): void;
            /**
                * <p>Deletes a <code>DBProxyEndpoint</code>. Doing so removes the ability to access the DB proxy using the
                *         endpoint that you defined. The endpoint that you delete might have provided capabilities such as read/write
                *         or read-only operations, or using a different VPC than the DB proxy's default VPC.</p>
                */
            deleteDBProxyEndpoint(args: DeleteDBProxyEndpointCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBProxyEndpointCommandOutput>;
            deleteDBProxyEndpoint(args: DeleteDBProxyEndpointCommandInput, cb: (err: any, data?: DeleteDBProxyEndpointCommandOutput) => void): void;
            deleteDBProxyEndpoint(args: DeleteDBProxyEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBProxyEndpointCommandOutput) => void): void;
            /**
                * <p>Deletes a DB security group.</p>
                *         <note>
                *             <p>The specified DB security group must not be associated with any DB instances.</p>
                *         </note>
                */
            deleteDBSecurityGroup(args: DeleteDBSecurityGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBSecurityGroupCommandOutput>;
            deleteDBSecurityGroup(args: DeleteDBSecurityGroupCommandInput, cb: (err: any, data?: DeleteDBSecurityGroupCommandOutput) => void): void;
            deleteDBSecurityGroup(args: DeleteDBSecurityGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBSecurityGroupCommandOutput) => void): void;
            /**
                * <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is
                *             terminated.</p>
                *         <note>
                *             <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p>
                *         </note>
                */
            deleteDBSnapshot(args: DeleteDBSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBSnapshotCommandOutput>;
            deleteDBSnapshot(args: DeleteDBSnapshotCommandInput, cb: (err: any, data?: DeleteDBSnapshotCommandOutput) => void): void;
            deleteDBSnapshot(args: DeleteDBSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBSnapshotCommandOutput) => void): void;
            /**
                * <p>Deletes a DB subnet group.</p>
                *         <note>
                *             <p>The specified database subnet group must not be associated with any DB instances.</p>
                *         </note>
                */
            deleteDBSubnetGroup(args: DeleteDBSubnetGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDBSubnetGroupCommandOutput>;
            deleteDBSubnetGroup(args: DeleteDBSubnetGroupCommandInput, cb: (err: any, data?: DeleteDBSubnetGroupCommandOutput) => void): void;
            deleteDBSubnetGroup(args: DeleteDBSubnetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDBSubnetGroupCommandOutput) => void): void;
            /**
                * <p>Deletes an RDS event notification subscription.</p>
                */
            deleteEventSubscription(args: DeleteEventSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteEventSubscriptionCommandOutput>;
            deleteEventSubscription(args: DeleteEventSubscriptionCommandInput, cb: (err: any, data?: DeleteEventSubscriptionCommandOutput) => void): void;
            deleteEventSubscription(args: DeleteEventSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteEventSubscriptionCommandOutput) => void): void;
            /**
                * <p>Deletes a global database cluster. The primary and secondary clusters must already be detached or
                *         destroyed first.</p>
                *         <note>
                *             <p>This action only applies to Aurora DB clusters.</p>
                *         </note>
                */
            deleteGlobalCluster(args: DeleteGlobalClusterCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGlobalClusterCommandOutput>;
            deleteGlobalCluster(args: DeleteGlobalClusterCommandInput, cb: (err: any, data?: DeleteGlobalClusterCommandOutput) => void): void;
            deleteGlobalCluster(args: DeleteGlobalClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGlobalClusterCommandOutput) => void): void;
            /**
                * <p>Deletes an existing option group.</p>
                */
            deleteOptionGroup(args: DeleteOptionGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteOptionGroupCommandOutput>;
            deleteOptionGroup(args: DeleteOptionGroupCommandInput, cb: (err: any, data?: DeleteOptionGroupCommandOutput) => void): void;
            deleteOptionGroup(args: DeleteOptionGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteOptionGroupCommandOutput) => void): void;
            /**
                * <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
                */
            deregisterDBProxyTargets(args: DeregisterDBProxyTargetsCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterDBProxyTargetsCommandOutput>;
            deregisterDBProxyTargets(args: DeregisterDBProxyTargetsCommandInput, cb: (err: any, data?: DeregisterDBProxyTargetsCommandOutput) => void): void;
            deregisterDBProxyTargets(args: DeregisterDBProxyTargetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterDBProxyTargetsCommandOutput) => void): void;
            /**
                * <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p>
                *         <p>This command doesn't take any parameters.</p>
                */
            describeAccountAttributes(args: DescribeAccountAttributesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAccountAttributesCommandOutput>;
            describeAccountAttributes(args: DescribeAccountAttributesCommandInput, cb: (err: any, data?: DescribeAccountAttributesCommandOutput) => void): void;
            describeAccountAttributes(args: DescribeAccountAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAccountAttributesCommandOutput) => void): void;
            /**
                * <p>Lists the set of CA certificates provided by Amazon RDS for this Amazon Web Services account.</p>
                */
            describeCertificates(args: DescribeCertificatesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeCertificatesCommandOutput>;
            describeCertificates(args: DescribeCertificatesCommandInput, cb: (err: any, data?: DescribeCertificatesCommandOutput) => void): void;
            describeCertificates(args: DescribeCertificatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeCertificatesCommandOutput) => void): void;
            /**
                * <p>Returns information about backtracks for a DB cluster.</p>
                *         <p>For more information on Amazon Aurora, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *                 What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <note>
                *             <p>This action only applies to Aurora MySQL DB clusters.</p>
                *         </note>
                */
            describeDBClusterBacktracks(args: DescribeDBClusterBacktracksCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBClusterBacktracksCommandOutput>;
            describeDBClusterBacktracks(args: DescribeDBClusterBacktracksCommandInput, cb: (err: any, data?: DescribeDBClusterBacktracksCommandOutput) => void): void;
            describeDBClusterBacktracks(args: DescribeDBClusterBacktracksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBClusterBacktracksCommandOutput) => void): void;
            /**
                * <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p>
                *         <note>
                *             <p>This action only applies to Aurora DB clusters.</p>
                *         </note>
                */
            describeDBClusterEndpoints(args: DescribeDBClusterEndpointsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBClusterEndpointsCommandOutput>;
            describeDBClusterEndpoints(args: DescribeDBClusterEndpointsCommandInput, cb: (err: any, data?: DescribeDBClusterEndpointsCommandOutput) => void): void;
            describeDBClusterEndpoints(args: DescribeDBClusterEndpointsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBClusterEndpointsCommandOutput) => void): void;
            /**
                * <p>Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a
                *             <code>DBClusterParameterGroupName</code> parameter is specified,
                *             the list will contain only the description of the specified DB cluster parameter group.</p>
                *         <p>For more information on Amazon Aurora, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            describeDBClusterParameterGroups(args: DescribeDBClusterParameterGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBClusterParameterGroupsCommandOutput>;
            describeDBClusterParameterGroups(args: DescribeDBClusterParameterGroupsCommandInput, cb: (err: any, data?: DescribeDBClusterParameterGroupsCommandOutput) => void): void;
            describeDBClusterParameterGroups(args: DescribeDBClusterParameterGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBClusterParameterGroupsCommandOutput) => void): void;
            /**
                * <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p>
                *         <p>For more information on Amazon Aurora, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            describeDBClusterParameters(args: DescribeDBClusterParametersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBClusterParametersCommandOutput>;
            describeDBClusterParameters(args: DescribeDBClusterParametersCommandInput, cb: (err: any, data?: DescribeDBClusterParametersCommandOutput) => void): void;
            describeDBClusterParameters(args: DescribeDBClusterParametersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBClusterParametersCommandOutput) => void): void;
            /**
                * <p>Returns information about Amazon Aurora DB clusters and Multi-AZ DB clusters. This API supports pagination.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p>
                */
            describeDBClusters(args: DescribeDBClustersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBClustersCommandOutput>;
            describeDBClusters(args: DescribeDBClustersCommandInput, cb: (err: any, data?: DescribeDBClustersCommandOutput) => void): void;
            describeDBClusters(args: DescribeDBClustersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBClustersCommandOutput) => void): void;
            /**
                * <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p>
                *         <p>When sharing snapshots with other Amazon Web Services accounts, <code>DescribeDBClusterSnapshotAttributes</code>
                *             returns the <code>restore</code> attribute and a list of IDs for the Amazon Web Services accounts that are
                *             authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of
                *             values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and
                *             can be copied or restored by all Amazon Web Services accounts.</p>
                *         <p>To add or remove access for an Amazon Web Services account to copy or restore a manual DB cluster snapshot, or to make the
                *             manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
                */
            describeDBClusterSnapshotAttributes(args: DescribeDBClusterSnapshotAttributesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBClusterSnapshotAttributesCommandOutput>;
            describeDBClusterSnapshotAttributes(args: DescribeDBClusterSnapshotAttributesCommandInput, cb: (err: any, data?: DescribeDBClusterSnapshotAttributesCommandOutput) => void): void;
            describeDBClusterSnapshotAttributes(args: DescribeDBClusterSnapshotAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBClusterSnapshotAttributesCommandOutput) => void): void;
            /**
                * <p>Returns information about DB cluster snapshots. This API action supports pagination.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            describeDBClusterSnapshots(args: DescribeDBClusterSnapshotsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBClusterSnapshotsCommandOutput>;
            describeDBClusterSnapshots(args: DescribeDBClusterSnapshotsCommandInput, cb: (err: any, data?: DescribeDBClusterSnapshotsCommandOutput) => void): void;
            describeDBClusterSnapshots(args: DescribeDBClusterSnapshotsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBClusterSnapshotsCommandOutput) => void): void;
            /**
                * <p>Returns a list of the available DB engines.</p>
                */
            describeDBEngineVersions(args: DescribeDBEngineVersionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBEngineVersionsCommandOutput>;
            describeDBEngineVersions(args: DescribeDBEngineVersionsCommandInput, cb: (err: any, data?: DescribeDBEngineVersionsCommandOutput) => void): void;
            describeDBEngineVersions(args: DescribeDBEngineVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBEngineVersionsCommandOutput) => void): void;
            /**
                * <p>Displays backups for both current and deleted
                *             instances. For example, use this operation to
                *             find details about automated backups for previously deleted instances. Current instances
                *             with retention periods greater than zero (0) are returned for both the
                *             <code>DescribeDBInstanceAutomatedBackups</code> and
                *             <code>DescribeDBInstances</code> operations.</p>
                *         <p>All parameters are optional.</p>
                */
            describeDBInstanceAutomatedBackups(args: DescribeDBInstanceAutomatedBackupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBInstanceAutomatedBackupsCommandOutput>;
            describeDBInstanceAutomatedBackups(args: DescribeDBInstanceAutomatedBackupsCommandInput, cb: (err: any, data?: DescribeDBInstanceAutomatedBackupsCommandOutput) => void): void;
            describeDBInstanceAutomatedBackups(args: DescribeDBInstanceAutomatedBackupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBInstanceAutomatedBackupsCommandOutput) => void): void;
            /**
                * <p>Returns information about provisioned RDS instances. This API supports pagination.</p>
                *         <note>
                *             <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p>
                *         </note>
                */
            describeDBInstances(args: DescribeDBInstancesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBInstancesCommandOutput>;
            describeDBInstances(args: DescribeDBInstancesCommandInput, cb: (err: any, data?: DescribeDBInstancesCommandOutput) => void): void;
            describeDBInstances(args: DescribeDBInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBInstancesCommandOutput) => void): void;
            /**
                * <p>Returns a list of DB log files for the DB instance.</p>
                *         <p>This command doesn't apply to RDS Custom.</p>
                */
            describeDBLogFiles(args: DescribeDBLogFilesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBLogFilesCommandOutput>;
            describeDBLogFiles(args: DescribeDBLogFilesCommandInput, cb: (err: any, data?: DescribeDBLogFilesCommandOutput) => void): void;
            describeDBLogFiles(args: DescribeDBLogFilesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBLogFilesCommandOutput) => void): void;
            /**
                * <p>Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified,
                *             the list will contain only the description of the specified DB parameter group.</p>
                */
            describeDBParameterGroups(args: DescribeDBParameterGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBParameterGroupsCommandOutput>;
            describeDBParameterGroups(args: DescribeDBParameterGroupsCommandInput, cb: (err: any, data?: DescribeDBParameterGroupsCommandOutput) => void): void;
            describeDBParameterGroups(args: DescribeDBParameterGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBParameterGroupsCommandOutput) => void): void;
            /**
                * <p>Returns the detailed parameter list for a particular DB parameter group.</p>
                */
            describeDBParameters(args: DescribeDBParametersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBParametersCommandOutput>;
            describeDBParameters(args: DescribeDBParametersCommandInput, cb: (err: any, data?: DescribeDBParametersCommandOutput) => void): void;
            describeDBParameters(args: DescribeDBParametersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBParametersCommandOutput) => void): void;
            /**
                * <p>Returns information about DB proxies.</p>
                */
            describeDBProxies(args: DescribeDBProxiesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBProxiesCommandOutput>;
            describeDBProxies(args: DescribeDBProxiesCommandInput, cb: (err: any, data?: DescribeDBProxiesCommandOutput) => void): void;
            describeDBProxies(args: DescribeDBProxiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBProxiesCommandOutput) => void): void;
            /**
                * <p>Returns information about DB proxy endpoints.</p>
                */
            describeDBProxyEndpoints(args: DescribeDBProxyEndpointsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBProxyEndpointsCommandOutput>;
            describeDBProxyEndpoints(args: DescribeDBProxyEndpointsCommandInput, cb: (err: any, data?: DescribeDBProxyEndpointsCommandOutput) => void): void;
            describeDBProxyEndpoints(args: DescribeDBProxyEndpointsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBProxyEndpointsCommandOutput) => void): void;
            /**
                * <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
                */
            describeDBProxyTargetGroups(args: DescribeDBProxyTargetGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBProxyTargetGroupsCommandOutput>;
            describeDBProxyTargetGroups(args: DescribeDBProxyTargetGroupsCommandInput, cb: (err: any, data?: DescribeDBProxyTargetGroupsCommandOutput) => void): void;
            describeDBProxyTargetGroups(args: DescribeDBProxyTargetGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBProxyTargetGroupsCommandOutput) => void): void;
            /**
                * <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
                */
            describeDBProxyTargets(args: DescribeDBProxyTargetsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBProxyTargetsCommandOutput>;
            describeDBProxyTargets(args: DescribeDBProxyTargetsCommandInput, cb: (err: any, data?: DescribeDBProxyTargetsCommandOutput) => void): void;
            describeDBProxyTargets(args: DescribeDBProxyTargetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBProxyTargetsCommandOutput) => void): void;
            /**
                * <p>Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified,
                *             the list will contain only the descriptions of the specified DB security group.</p>
                */
            describeDBSecurityGroups(args: DescribeDBSecurityGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBSecurityGroupsCommandOutput>;
            describeDBSecurityGroups(args: DescribeDBSecurityGroupsCommandInput, cb: (err: any, data?: DescribeDBSecurityGroupsCommandOutput) => void): void;
            describeDBSecurityGroups(args: DescribeDBSecurityGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBSecurityGroupsCommandOutput) => void): void;
            /**
                * <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p>
                *         <p>When sharing snapshots with other Amazon Web Services accounts, <code>DescribeDBSnapshotAttributes</code>
                *       returns the <code>restore</code> attribute and a list of IDs for the Amazon Web Services accounts that are
                *       authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of
                *       values for the <code>restore</code> attribute, then the manual DB snapshot is public and
                *       can be copied or restored by all Amazon Web Services accounts.</p>
                *         <p>To add or remove access for an Amazon Web Services account to copy or restore a manual DB snapshot, or to make the
                *       manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
                */
            describeDBSnapshotAttributes(args: DescribeDBSnapshotAttributesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBSnapshotAttributesCommandOutput>;
            describeDBSnapshotAttributes(args: DescribeDBSnapshotAttributesCommandInput, cb: (err: any, data?: DescribeDBSnapshotAttributesCommandOutput) => void): void;
            describeDBSnapshotAttributes(args: DescribeDBSnapshotAttributesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBSnapshotAttributesCommandOutput) => void): void;
            /**
                * <p>Returns information about DB snapshots. This API action supports pagination.</p>
                */
            describeDBSnapshots(args: DescribeDBSnapshotsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBSnapshotsCommandOutput>;
            describeDBSnapshots(args: DescribeDBSnapshotsCommandInput, cb: (err: any, data?: DescribeDBSnapshotsCommandOutput) => void): void;
            describeDBSnapshots(args: DescribeDBSnapshotsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBSnapshotsCommandOutput) => void): void;
            /**
                * <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p>
                *         <p>For an overview of CIDR ranges, go to the
                *             <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
                */
            describeDBSubnetGroups(args: DescribeDBSubnetGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDBSubnetGroupsCommandOutput>;
            describeDBSubnetGroups(args: DescribeDBSubnetGroupsCommandInput, cb: (err: any, data?: DescribeDBSubnetGroupsCommandOutput) => void): void;
            describeDBSubnetGroups(args: DescribeDBSubnetGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDBSubnetGroupsCommandOutput) => void): void;
            /**
                * <p>Returns the default engine and system parameter information for the cluster database engine.</p>
                *         <p>For more information on Amazon Aurora, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                */
            describeEngineDefaultClusterParameters(args: DescribeEngineDefaultClusterParametersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEngineDefaultClusterParametersCommandOutput>;
            describeEngineDefaultClusterParameters(args: DescribeEngineDefaultClusterParametersCommandInput, cb: (err: any, data?: DescribeEngineDefaultClusterParametersCommandOutput) => void): void;
            describeEngineDefaultClusterParameters(args: DescribeEngineDefaultClusterParametersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEngineDefaultClusterParametersCommandOutput) => void): void;
            /**
                * <p>Returns the default engine and system parameter information for the specified database engine.</p>
                */
            describeEngineDefaultParameters(args: DescribeEngineDefaultParametersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEngineDefaultParametersCommandOutput>;
            describeEngineDefaultParameters(args: DescribeEngineDefaultParametersCommandInput, cb: (err: any, data?: DescribeEngineDefaultParametersCommandOutput) => void): void;
            describeEngineDefaultParameters(args: DescribeEngineDefaultParametersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEngineDefaultParametersCommandOutput) => void): void;
            /**
                * <p>Displays a list of categories for all event source types, or, if specified, for a specified source type.
                *             You can also see this list in the "Amazon RDS event categories and event messages" section of the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.Messages.html">
                *                 <i>Amazon RDS User Guide</i>
                *             </a> or the
                *                 <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Messages.html">
                *                 <i>Amazon Aurora User Guide</i>
                *             </a>.</p>
                */
            describeEventCategories(args: DescribeEventCategoriesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEventCategoriesCommandOutput>;
            describeEventCategories(args: DescribeEventCategoriesCommandInput, cb: (err: any, data?: DescribeEventCategoriesCommandOutput) => void): void;
            describeEventCategories(args: DescribeEventCategoriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEventCategoriesCommandOutput) => void): void;
            /**
                * <p>Returns events related to DB instances, DB clusters, DB parameter groups, DB security groups, DB snapshots, DB cluster snapshots, and RDS Proxies for the past 14 days.
                *           Events specific to a particular DB instance, DB cluster, DB parameter group, DB security group, DB snapshot, DB cluster snapshot group, or RDS Proxy can be
                *           obtained by providing the name as a parameter.</p>
                *         <note>
                *             <p>By default, RDS returns events that were generated in the past hour.</p>
                *         </note>
                */
            describeEvents(args: DescribeEventsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEventsCommandOutput>;
            describeEvents(args: DescribeEventsCommandInput, cb: (err: any, data?: DescribeEventsCommandOutput) => void): void;
            describeEvents(args: DescribeEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEventsCommandOutput) => void): void;
            /**
                * <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes
                *           <code>SubscriptionName</code>, <code>SNSTopicARN</code>, <code>CustomerID</code>, <code>SourceType</code>, <code>SourceID</code>, <code>CreationTime</code>, and <code>Status</code>.</p>
                *         <p>If you specify a <code>SubscriptionName</code>, lists the description for that subscription.</p>
                */
            describeEventSubscriptions(args: DescribeEventSubscriptionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEventSubscriptionsCommandOutput>;
            describeEventSubscriptions(args: DescribeEventSubscriptionsCommandInput, cb: (err: any, data?: DescribeEventSubscriptionsCommandOutput) => void): void;
            describeEventSubscriptions(args: DescribeEventSubscriptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEventSubscriptionsCommandOutput) => void): void;
            /**
                * <p>Returns information about a snapshot export to Amazon S3. This API operation supports
                *             pagination.</p>
                */
            describeExportTasks(args: DescribeExportTasksCommandInput, options?: __HttpHandlerOptions): Promise<DescribeExportTasksCommandOutput>;
            describeExportTasks(args: DescribeExportTasksCommandInput, cb: (err: any, data?: DescribeExportTasksCommandOutput) => void): void;
            describeExportTasks(args: DescribeExportTasksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeExportTasksCommandOutput) => void): void;
            /**
                * <p>Returns information about Aurora global database clusters. This API supports pagination.</p>
                *         <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What is Amazon Aurora?</a> in the
                *         <i>Amazon Aurora User Guide</i>.</p>
                *         <note>
                *             <p>This action only applies to Aurora DB clusters.</p>
                *         </note>
                */
            describeGlobalClusters(args: DescribeGlobalClustersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeGlobalClustersCommandOutput>;
            describeGlobalClusters(args: DescribeGlobalClustersCommandInput, cb: (err: any, data?: DescribeGlobalClustersCommandOutput) => void): void;
            describeGlobalClusters(args: DescribeGlobalClustersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeGlobalClustersCommandOutput) => void): void;
            /**
                * <p>Describes all available options.</p>
                */
            describeOptionGroupOptions(args: DescribeOptionGroupOptionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOptionGroupOptionsCommandOutput>;
            describeOptionGroupOptions(args: DescribeOptionGroupOptionsCommandInput, cb: (err: any, data?: DescribeOptionGroupOptionsCommandOutput) => void): void;
            describeOptionGroupOptions(args: DescribeOptionGroupOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOptionGroupOptionsCommandOutput) => void): void;
            /**
                * <p>Describes the available option groups.</p>
                */
            describeOptionGroups(args: DescribeOptionGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOptionGroupsCommandOutput>;
            describeOptionGroups(args: DescribeOptionGroupsCommandInput, cb: (err: any, data?: DescribeOptionGroupsCommandOutput) => void): void;
            describeOptionGroups(args: DescribeOptionGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOptionGroupsCommandOutput) => void): void;
            /**
                * <p>Returns a list of orderable DB instance options for the specified DB engine, DB engine version, and DB instance class.</p>
                */
            describeOrderableDBInstanceOptions(args: DescribeOrderableDBInstanceOptionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOrderableDBInstanceOptionsCommandOutput>;
            describeOrderableDBInstanceOptions(args: DescribeOrderableDBInstanceOptionsCommandInput, cb: (err: any, data?: DescribeOrderableDBInstanceOptionsCommandOutput) => void): void;
            describeOrderableDBInstanceOptions(args: DescribeOrderableDBInstanceOptionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOrderableDBInstanceOptionsCommandOutput) => void): void;
            /**
                * <p>Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.</p>
                */
            describePendingMaintenanceActions(args: DescribePendingMaintenanceActionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribePendingMaintenanceActionsCommandOutput>;
            describePendingMaintenanceActions(args: DescribePendingMaintenanceActionsCommandInput, cb: (err: any, data?: DescribePendingMaintenanceActionsCommandOutput) => void): void;
            describePendingMaintenanceActions(args: DescribePendingMaintenanceActionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePendingMaintenanceActionsCommandOutput) => void): void;
            /**
                * <p>Returns information about reserved DB instances for this account, or about a specified reserved DB instance.</p>
                */
            describeReservedDBInstances(args: DescribeReservedDBInstancesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReservedDBInstancesCommandOutput>;
            describeReservedDBInstances(args: DescribeReservedDBInstancesCommandInput, cb: (err: any, data?: DescribeReservedDBInstancesCommandOutput) => void): void;
            describeReservedDBInstances(args: DescribeReservedDBInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReservedDBInstancesCommandOutput) => void): void;
            /**
                * <p>Lists available reserved DB instance offerings.</p>
                */
            describeReservedDBInstancesOfferings(args: DescribeReservedDBInstancesOfferingsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReservedDBInstancesOfferingsCommandOutput>;
            describeReservedDBInstancesOfferings(args: DescribeReservedDBInstancesOfferingsCommandInput, cb: (err: any, data?: DescribeReservedDBInstancesOfferingsCommandOutput) => void): void;
            describeReservedDBInstancesOfferings(args: DescribeReservedDBInstancesOfferingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReservedDBInstancesOfferingsCommandOutput) => void): void;
            /**
                * <p>Returns a list of the source Amazon Web Services Regions where the current Amazon Web Services Region can create a read replica,
                *          copy a DB snapshot from, or replicate automated backups from. This API action supports pagination.</p>
                */
            describeSourceRegions(args: DescribeSourceRegionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSourceRegionsCommandOutput>;
            describeSourceRegions(args: DescribeSourceRegionsCommandInput, cb: (err: any, data?: DescribeSourceRegionsCommandOutput) => void): void;
            describeSourceRegions(args: DescribeSourceRegionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSourceRegionsCommandOutput) => void): void;
            /**
                * <p>You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to
                *             your DB instance. You can use this information when you call <code>ModifyDBInstance</code>.</p>
                *         <p>This command doesn't apply to RDS Custom.</p>
                */
            describeValidDBInstanceModifications(args: DescribeValidDBInstanceModificationsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeValidDBInstanceModificationsCommandOutput>;
            describeValidDBInstanceModifications(args: DescribeValidDBInstanceModificationsCommandInput, cb: (err: any, data?: DescribeValidDBInstanceModificationsCommandOutput) => void): void;
            describeValidDBInstanceModifications(args: DescribeValidDBInstanceModificationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeValidDBInstanceModificationsCommandOutput) => void): void;
            /**
                * <p>Downloads all or a portion of the specified log file, up to 1 MB in size.</p>
                *         <p>This command doesn't apply to RDS Custom.</p>
                */
            downloadDBLogFilePortion(args: DownloadDBLogFilePortionCommandInput, options?: __HttpHandlerOptions): Promise<DownloadDBLogFilePortionCommandOutput>;
            downloadDBLogFilePortion(args: DownloadDBLogFilePortionCommandInput, cb: (err: any, data?: DownloadDBLogFilePortionCommandOutput) => void): void;
            downloadDBLogFilePortion(args: DownloadDBLogFilePortionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DownloadDBLogFilePortionCommandOutput) => void): void;
            /**
                * <p>Forces a failover for a DB cluster.</p>
                *         <p>For an Aurora DB cluster, failover for a DB cluster promotes one of the Aurora Replicas (read-only instances)
                *           in the DB cluster to be the primary DB instance (the cluster writer).</p>
                *         <p>For a Multi-AZ DB cluster, failover for a DB cluster promotes one of the readable standby DB instances (read-only instances)
                *           in the DB cluster to be the primary DB instance (the cluster writer).</p>
                *         <p>An Amazon Aurora DB cluster automatically fails over to an Aurora Replica, if one exists,
                *           when the primary DB instance fails. A Multi-AZ DB cluster automatically fails over to a readbable standby
                *           DB instance when the primary DB instance fails.</p>
                *         <p>To simulate a failure of a primary instance for testing, you can force a failover.
                *           Because each instance in a DB cluster has its own endpoint address, make sure to clean up and re-establish any existing
                *           connections that use those endpoint addresses when the failover is complete.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            failoverDBCluster(args: FailoverDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<FailoverDBClusterCommandOutput>;
            failoverDBCluster(args: FailoverDBClusterCommandInput, cb: (err: any, data?: FailoverDBClusterCommandOutput) => void): void;
            failoverDBCluster(args: FailoverDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: FailoverDBClusterCommandOutput) => void): void;
            /**
                * <p>Initiates the failover process for an Aurora global database (<a>GlobalCluster</a>).</p>
                *         <p>A failover for an Aurora global database promotes one of secondary read-only DB clusters to be
                *        the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words,
                *      the role of the current primary DB cluster and the selected (target) DB cluster are switched. The selected
                *      secondary DB cluster assumes full read/write capabilities for the Aurora global database.</p>
                *         <p>For more information about failing over an Amazon Aurora global database, see
                *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-disaster-recovery.html#aurora-global-database-disaster-recovery.managed-failover">Managed planned failover for Amazon Aurora global
                *         databases</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <note>
                *             <p>This action applies to <a>GlobalCluster</a> (Aurora global databases) only. Use this action only on
                *        healthy Aurora global databases with running Aurora DB clusters and no Region-wide outages, to test disaster recovery scenarios or to
                *         reconfigure your Aurora global database topology.</p>
                *         </note>
                */
            failoverGlobalCluster(args: FailoverGlobalClusterCommandInput, options?: __HttpHandlerOptions): Promise<FailoverGlobalClusterCommandOutput>;
            failoverGlobalCluster(args: FailoverGlobalClusterCommandInput, cb: (err: any, data?: FailoverGlobalClusterCommandOutput) => void): void;
            failoverGlobalCluster(args: FailoverGlobalClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: FailoverGlobalClusterCommandOutput) => void): void;
            /**
                * <p>Lists all tags on an Amazon RDS resource.</p>
                *         <p>For an overview on tagging an Amazon RDS resource,
                *           see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>
                *           in the <i>Amazon RDS User Guide</i>.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS)
                *           certificate for Amazon RDS for new DB instances, or remove the override.</p>
                *         <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB
                *             instances that is different from the default certificate provided by RDS. You can also
                *             use this operation to remove the override, so that new DB instances use the default
                *             certificate provided by RDS.</p>
                *         <p>You might need to override the default certificate in the following situations:</p>
                *         <ul>
                *             <li>
                *                 <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet
                *                   the RDS default CA certificate for the specified Amazon Web Services Region.</p>
                *             </li>
                *             <li>
                *                 <p>RDS has already moved to a new default CA certificate for the specified Amazon Web Services
                *                     Region, but you are still in the process of supporting the new CA certificate.
                *                     In this case, you temporarily need additional time to finish your application
                *                     changes.</p>
                *             </li>
                *          </ul>
                *         <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html">
                *               Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html">
                *               Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
                */
            modifyCertificates(args: ModifyCertificatesCommandInput, options?: __HttpHandlerOptions): Promise<ModifyCertificatesCommandOutput>;
            modifyCertificates(args: ModifyCertificatesCommandInput, cb: (err: any, data?: ModifyCertificatesCommandOutput) => void): void;
            modifyCertificates(args: ModifyCertificatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyCertificatesCommandOutput) => void): void;
            /**
                * <p>Set the capacity of an Aurora Serverless v1 DB cluster to a specific value.</p>
                *         <p>Aurora Serverless v1 scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale
                *         fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code>
                *         to set the capacity explicitly.</p>
                *         <p>After this call sets the DB cluster capacity, Aurora Serverless v1 can automatically scale
                *             the DB cluster based on the cooldown period for scaling up and the cooldown period
                *             for scaling down.</p>
                *         <p>For more information about Aurora Serverless v1, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless v1</a> in the
                *           <i>Amazon Aurora User Guide</i>.</p>
                *         <important>
                *             <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that
                *               prevent Aurora Serverless v1 from finding a scaling point might be dropped. For more information about scaling points,
                *               see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling">
                *                   Autoscaling for Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         </important>
                *         <note>
                *             <p>This action only applies to Aurora Serverless v1 DB clusters.</p>
                *         </note>
                */
            modifyCurrentDBClusterCapacity(args: ModifyCurrentDBClusterCapacityCommandInput, options?: __HttpHandlerOptions): Promise<ModifyCurrentDBClusterCapacityCommandOutput>;
            modifyCurrentDBClusterCapacity(args: ModifyCurrentDBClusterCapacityCommandInput, cb: (err: any, data?: ModifyCurrentDBClusterCapacityCommandOutput) => void): void;
            modifyCurrentDBClusterCapacity(args: ModifyCurrentDBClusterCapacityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyCurrentDBClusterCapacityCommandOutput) => void): void;
            /**
                * <p>Modifies the status of a custom engine version (CEV). You can find CEVs to modify by calling
                *             <code>DescribeDBEngineVersions</code>.</p>
                *         <note>
                *             <p>The MediaImport service that imports files from Amazon S3 to create CEVs isn't integrated with
                *                 Amazon Web Services CloudTrail. If you turn on data logging for Amazon RDS in CloudTrail, calls to the
                *                 <code>ModifyCustomDbEngineVersion</code> event aren't logged. However, you might see calls from the
                *                 API gateway that accesses your Amazon S3 bucket. These calls originate from the MediaImport service for
                *                 the <code>ModifyCustomDbEngineVersion</code> event.</p>
                *         </note>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.modify">Modifying CEV status</a>
                *             in the <i>Amazon RDS User Guide</i>.</p>
                */
            modifyCustomDBEngineVersion(args: ModifyCustomDBEngineVersionCommandInput, options?: __HttpHandlerOptions): Promise<ModifyCustomDBEngineVersionCommandOutput>;
            modifyCustomDBEngineVersion(args: ModifyCustomDBEngineVersionCommandInput, cb: (err: any, data?: ModifyCustomDBEngineVersionCommandOutput) => void): void;
            modifyCustomDBEngineVersion(args: ModifyCustomDBEngineVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyCustomDBEngineVersionCommandOutput) => void): void;
            /**
                * <p>Modify the settings for an Amazon Aurora DB cluster or a Multi-AZ DB cluster.
                *            You can change one or more settings by specifying these parameters and the new values in the
                *            request.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            modifyDBCluster(args: ModifyDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBClusterCommandOutput>;
            modifyDBCluster(args: ModifyDBClusterCommandInput, cb: (err: any, data?: ModifyDBClusterCommandOutput) => void): void;
            modifyDBCluster(args: ModifyDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBClusterCommandOutput) => void): void;
            /**
                * <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p>
                *         <note>
                *             <p>This action only applies to Aurora DB clusters.</p>
                *         </note>
                */
            modifyDBClusterEndpoint(args: ModifyDBClusterEndpointCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBClusterEndpointCommandOutput>;
            modifyDBClusterEndpoint(args: ModifyDBClusterEndpointCommandInput, cb: (err: any, data?: ModifyDBClusterEndpointCommandOutput) => void): void;
            modifyDBClusterEndpoint(args: ModifyDBClusterEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBClusterEndpointCommandOutput) => void): void;
            /**
                * <p>Modifies the parameters of a DB cluster parameter group. To modify more than one parameter,
                *             submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>,
                *             and <code>ApplyMethod</code>. A maximum of 20
                *             parameters can be modified in a single request.</p>
                *         <important>
                *             <p>After you create a DB cluster parameter group, you should wait at least 5 minutes
                *                 before creating your first DB cluster that uses that DB cluster parameter group as the default parameter
                *                 group. This allows Amazon RDS to fully complete the create action before the parameter
                *                 group is used as the default for a new DB cluster. This is especially important for parameters
                *                 that are critical when creating the default database for a DB cluster, such as the character set
                *                 for the default database defined by the <code>character_set_database</code> parameter. You can use the
                *                 <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
                *                 <code>DescribeDBClusterParameters</code> action to verify
                *                 that your DB cluster parameter group has been created or modified.</p>
                *             <p>If the modified DB cluster parameter group is used by an Aurora Serverless v1 cluster, Aurora
                *                applies the update immediately. The cluster restart might interrupt your workload. In that case,
                *                your application must reopen any connections and retry any transactions that were active
                *                when the parameter changes took effect.</p>
                *         </important>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            modifyDBClusterParameterGroup(args: ModifyDBClusterParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBClusterParameterGroupCommandOutput>;
            modifyDBClusterParameterGroup(args: ModifyDBClusterParameterGroupCommandInput, cb: (err: any, data?: ModifyDBClusterParameterGroupCommandOutput) => void): void;
            modifyDBClusterParameterGroup(args: ModifyDBClusterParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBClusterParameterGroupCommandOutput) => void): void;
            /**
                * <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p>
                *         <p>To share a manual DB cluster snapshot with other Amazon Web Services accounts, specify
                *                 <code>restore</code> as the <code>AttributeName</code> and use the
                *                 <code>ValuesToAdd</code> parameter to add a list of IDs of the Amazon Web Services accounts that are
                *             authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to
                *             make the manual DB cluster snapshot public, which means that it can be copied or
                *             restored by all Amazon Web Services accounts.</p>
                *         <note>
                *             <p>Don't add the <code>all</code> value for any manual DB cluster snapshots
                *                 that contain private information that you don't want available to all Amazon Web Services
                *                 accounts.</p>
                *         </note>
                *         <p>If a manual DB cluster snapshot is encrypted, it can be shared, but only by
                *             specifying a list of authorized Amazon Web Services account IDs for the <code>ValuesToAdd</code>
                *             parameter. You can't use <code>all</code> as a value for that parameter in this
                *             case.</p>
                *         <p>To view which Amazon Web Services accounts have access to copy or restore a manual DB cluster
                *             snapshot, or whether a manual DB cluster snapshot is public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action. The accounts are
                *             returned as values for the <code>restore</code> attribute.</p>
                */
            modifyDBClusterSnapshotAttribute(args: ModifyDBClusterSnapshotAttributeCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBClusterSnapshotAttributeCommandOutput>;
            modifyDBClusterSnapshotAttribute(args: ModifyDBClusterSnapshotAttributeCommandInput, cb: (err: any, data?: ModifyDBClusterSnapshotAttributeCommandOutput) => void): void;
            modifyDBClusterSnapshotAttribute(args: ModifyDBClusterSnapshotAttributeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBClusterSnapshotAttributeCommandOutput) => void): void;
            /**
                * <p>Modifies settings for a DB instance.
                *           You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
                *             To learn what modifications you can make to your DB instance,
                *             call <code>DescribeValidDBInstanceModifications</code>
                *             before you call <code>ModifyDBInstance</code>.</p>
                */
            modifyDBInstance(args: ModifyDBInstanceCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBInstanceCommandOutput>;
            modifyDBInstance(args: ModifyDBInstanceCommandInput, cb: (err: any, data?: ModifyDBInstanceCommandOutput) => void): void;
            modifyDBInstance(args: ModifyDBInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBInstanceCommandOutput) => void): void;
            /**
                * <p>Modifies the parameters of a DB parameter group. To modify more than one parameter,
                *         submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and
                *         <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p>
                *         <important>
                *             <p>After you modify a DB parameter group, you should wait at least 5 minutes
                *             before creating your first DB instance that uses that DB parameter group as the default parameter
                *             group. This allows Amazon RDS to fully complete the modify action before the parameter
                *             group is used as the default for a new DB instance. This is especially important for parameters
                *             that are critical when creating the default database for a DB instance, such as the character set
                *             for the default database defined by the <code>character_set_database</code> parameter. You can use the
                *             <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
                *             <i>DescribeDBParameters</i> command to verify
                *             that your DB parameter group has been created or modified.</p>
                *         </important>
                */
            modifyDBParameterGroup(args: ModifyDBParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBParameterGroupCommandOutput>;
            modifyDBParameterGroup(args: ModifyDBParameterGroupCommandInput, cb: (err: any, data?: ModifyDBParameterGroupCommandOutput) => void): void;
            modifyDBParameterGroup(args: ModifyDBParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBParameterGroupCommandOutput) => void): void;
            /**
                * <p>Changes the settings for an existing DB proxy.</p>
                */
            modifyDBProxy(args: ModifyDBProxyCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBProxyCommandOutput>;
            modifyDBProxy(args: ModifyDBProxyCommandInput, cb: (err: any, data?: ModifyDBProxyCommandOutput) => void): void;
            modifyDBProxy(args: ModifyDBProxyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBProxyCommandOutput) => void): void;
            /**
                * <p>Changes the settings for an existing DB proxy endpoint.</p>
                */
            modifyDBProxyEndpoint(args: ModifyDBProxyEndpointCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBProxyEndpointCommandOutput>;
            modifyDBProxyEndpoint(args: ModifyDBProxyEndpointCommandInput, cb: (err: any, data?: ModifyDBProxyEndpointCommandOutput) => void): void;
            modifyDBProxyEndpoint(args: ModifyDBProxyEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBProxyEndpointCommandOutput) => void): void;
            /**
                * <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
                */
            modifyDBProxyTargetGroup(args: ModifyDBProxyTargetGroupCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBProxyTargetGroupCommandOutput>;
            modifyDBProxyTargetGroup(args: ModifyDBProxyTargetGroupCommandInput, cb: (err: any, data?: ModifyDBProxyTargetGroupCommandOutput) => void): void;
            modifyDBProxyTargetGroup(args: ModifyDBProxyTargetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBProxyTargetGroupCommandOutput) => void): void;
            /**
                * <p>Updates a manual DB snapshot with a new engine version. The snapshot can be encrypted
                *             or unencrypted, but not shared or public.
                *
                *     </p>
                *         <p>Amazon RDS supports upgrading DB snapshots for MySQL, PostgreSQL, and Oracle. This command
                *           doesn't apply to RDS Custom.</p>
                */
            modifyDBSnapshot(args: ModifyDBSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBSnapshotCommandOutput>;
            modifyDBSnapshot(args: ModifyDBSnapshotCommandInput, cb: (err: any, data?: ModifyDBSnapshotCommandOutput) => void): void;
            modifyDBSnapshot(args: ModifyDBSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBSnapshotCommandOutput) => void): void;
            /**
                * <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p>
                *         <p>To share a manual DB snapshot with other Amazon Web Services accounts, specify <code>restore</code>
                *             as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add
                *             a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual DB snapshot.
                *             Uses the value <code>all</code> to make the manual DB snapshot public, which means it
                *             can be copied or restored by all Amazon Web Services accounts.</p>
                *         <note>
                *             <p>Don't add the <code>all</code> value for any manual DB snapshots that
                *                 contain private information that you don't want available to all Amazon Web Services
                *                 accounts.</p>
                *         </note>
                *         <p>If the manual DB snapshot is encrypted, it can be shared, but only by specifying a
                *             list of authorized Amazon Web Services account IDs for the <code>ValuesToAdd</code> parameter. You
                *             can't use <code>all</code> as a value for that parameter in this case.</p>
                *         <p>To view which Amazon Web Services accounts have access to copy or restore a manual DB snapshot, or
                *             whether a manual DB snapshot public or private, use the <a>DescribeDBSnapshotAttributes</a> API action. The accounts are returned as
                *             values for the <code>restore</code> attribute.</p>
                */
            modifyDBSnapshotAttribute(args: ModifyDBSnapshotAttributeCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBSnapshotAttributeCommandOutput>;
            modifyDBSnapshotAttribute(args: ModifyDBSnapshotAttributeCommandInput, cb: (err: any, data?: ModifyDBSnapshotAttributeCommandOutput) => void): void;
            modifyDBSnapshotAttribute(args: ModifyDBSnapshotAttributeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBSnapshotAttributeCommandOutput) => void): void;
            /**
                * <p>Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Web Services Region.</p>
                */
            modifyDBSubnetGroup(args: ModifyDBSubnetGroupCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDBSubnetGroupCommandOutput>;
            modifyDBSubnetGroup(args: ModifyDBSubnetGroupCommandInput, cb: (err: any, data?: ModifyDBSubnetGroupCommandOutput) => void): void;
            modifyDBSubnetGroup(args: ModifyDBSubnetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDBSubnetGroupCommandOutput) => void): void;
            /**
                * <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change
                *         source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p>
                *         <p>You can see a list of the event categories for a given source type (<code>SourceType</code>)
                *           in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> in the <i>Amazon RDS User Guide</i>
                *             or by using the <code>DescribeEventCategories</code> operation.</p>
                */
            modifyEventSubscription(args: ModifyEventSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<ModifyEventSubscriptionCommandOutput>;
            modifyEventSubscription(args: ModifyEventSubscriptionCommandInput, cb: (err: any, data?: ModifyEventSubscriptionCommandOutput) => void): void;
            modifyEventSubscription(args: ModifyEventSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyEventSubscriptionCommandOutput) => void): void;
            /**
                * <p>Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration
                *         parameters by specifying these parameters and the new values in the request. For more information on
                *         Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What is Amazon Aurora?</a> in the
                *         <i>Amazon Aurora User Guide</i>.</p>
                *         <note>
                *             <p>This action only applies to Aurora DB clusters.</p>
                *         </note>
                */
            modifyGlobalCluster(args: ModifyGlobalClusterCommandInput, options?: __HttpHandlerOptions): Promise<ModifyGlobalClusterCommandOutput>;
            modifyGlobalCluster(args: ModifyGlobalClusterCommandInput, cb: (err: any, data?: ModifyGlobalClusterCommandOutput) => void): void;
            modifyGlobalCluster(args: ModifyGlobalClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyGlobalClusterCommandOutput) => void): void;
            /**
                * <p>Modifies an existing option group.</p>
                */
            modifyOptionGroup(args: ModifyOptionGroupCommandInput, options?: __HttpHandlerOptions): Promise<ModifyOptionGroupCommandOutput>;
            modifyOptionGroup(args: ModifyOptionGroupCommandInput, cb: (err: any, data?: ModifyOptionGroupCommandOutput) => void): void;
            modifyOptionGroup(args: ModifyOptionGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyOptionGroupCommandOutput) => void): void;
            /**
                * <p>Promotes a read replica DB instance to a standalone DB instance.</p>
                *         <note>
                *             <ul>
                *                <li>
                *                     <p>Backup duration is a function of the amount of changes to the database since the previous
                *                         backup. If you plan to promote a read replica to a standalone instance, we
                *                         recommend that you enable backups and complete at least one backup prior to
                *                         promotion. In addition, a read replica cannot be promoted to a standalone
                *                         instance when it is in the <code>backing-up</code> status. If you have
                *                         enabled backups on your read replica, configure the automated backup window
                *                         so that daily backups do not interfere with read replica
                *                         promotion.</p>
                *                 </li>
                *                <li>
                *                     <p>This command doesn't apply to Aurora MySQL, Aurora PostgreSQL, or RDS Custom.</p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            promoteReadReplica(args: PromoteReadReplicaCommandInput, options?: __HttpHandlerOptions): Promise<PromoteReadReplicaCommandOutput>;
            promoteReadReplica(args: PromoteReadReplicaCommandInput, cb: (err: any, data?: PromoteReadReplicaCommandOutput) => void): void;
            promoteReadReplica(args: PromoteReadReplicaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PromoteReadReplicaCommandOutput) => void): void;
            /**
                * <p>Promotes a read replica DB cluster to a standalone DB cluster.</p>
                */
            promoteReadReplicaDBCluster(args: PromoteReadReplicaDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<PromoteReadReplicaDBClusterCommandOutput>;
            promoteReadReplicaDBCluster(args: PromoteReadReplicaDBClusterCommandInput, cb: (err: any, data?: PromoteReadReplicaDBClusterCommandOutput) => void): void;
            promoteReadReplicaDBCluster(args: PromoteReadReplicaDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PromoteReadReplicaDBClusterCommandOutput) => void): void;
            /**
                * <p>Purchases a reserved DB instance offering.</p>
                */
            purchaseReservedDBInstancesOffering(args: PurchaseReservedDBInstancesOfferingCommandInput, options?: __HttpHandlerOptions): Promise<PurchaseReservedDBInstancesOfferingCommandOutput>;
            purchaseReservedDBInstancesOffering(args: PurchaseReservedDBInstancesOfferingCommandInput, cb: (err: any, data?: PurchaseReservedDBInstancesOfferingCommandOutput) => void): void;
            purchaseReservedDBInstancesOffering(args: PurchaseReservedDBInstancesOfferingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PurchaseReservedDBInstancesOfferingCommandOutput) => void): void;
            /**
                * <p>You might need to reboot your DB cluster, usually for maintenance reasons.
                *           For example, if you make certain modifications,
                *           or if you change the DB cluster parameter group associated with the DB cluster,
                *           reboot the DB cluster for the changes to take effect.</p>
                *         <p>Rebooting a DB cluster restarts the database engine service. Rebooting a DB
                *           cluster results in a momentary outage, during which the DB cluster status is set to rebooting.</p>
                *         <p>Use this operation only for a non-Aurora Multi-AZ DB cluster.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the
                *           <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            rebootDBCluster(args: RebootDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<RebootDBClusterCommandOutput>;
            rebootDBCluster(args: RebootDBClusterCommandInput, cb: (err: any, data?: RebootDBClusterCommandOutput) => void): void;
            rebootDBCluster(args: RebootDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RebootDBClusterCommandOutput) => void): void;
            /**
                * <p>You might need to reboot your DB instance, usually for maintenance reasons.
                *         For example, if you make certain modifications,
                *         or if you change the DB parameter group associated with the DB instance,
                *         you must reboot the instance for the changes to take effect.</p>
                *         <p>Rebooting a DB instance restarts the database engine service.
                *         Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
                *         <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>This command doesn't apply to RDS Custom.</p>
                */
            rebootDBInstance(args: RebootDBInstanceCommandInput, options?: __HttpHandlerOptions): Promise<RebootDBInstanceCommandOutput>;
            rebootDBInstance(args: RebootDBInstanceCommandInput, cb: (err: any, data?: RebootDBInstanceCommandOutput) => void): void;
            rebootDBInstance(args: RebootDBInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RebootDBInstanceCommandOutput) => void): void;
            /**
                * <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
                */
            registerDBProxyTargets(args: RegisterDBProxyTargetsCommandInput, options?: __HttpHandlerOptions): Promise<RegisterDBProxyTargetsCommandOutput>;
            registerDBProxyTargets(args: RegisterDBProxyTargetsCommandInput, cb: (err: any, data?: RegisterDBProxyTargetsCommandOutput) => void): void;
            registerDBProxyTargets(args: RegisterDBProxyTargetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterDBProxyTargetsCommandOutput) => void): void;
            /**
                * <p>Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a
                *         standalone cluster with read-write capability instead of being read-only and receiving data from a
                *         primary cluster in a different Region.</p>
                *         <note>
                *             <p>This action only applies to Aurora DB clusters.</p>
                *         </note>
                */
            removeFromGlobalCluster(args: RemoveFromGlobalClusterCommandInput, options?: __HttpHandlerOptions): Promise<RemoveFromGlobalClusterCommandOutput>;
            removeFromGlobalCluster(args: RemoveFromGlobalClusterCommandInput, cb: (err: any, data?: RemoveFromGlobalClusterCommandOutput) => void): void;
            removeFromGlobalCluster(args: RemoveFromGlobalClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveFromGlobalClusterCommandOutput) => void): void;
            /**
                * <p>Removes the asssociation of an Amazon Web Services Identity and Access Management (IAM) role from a
                *             DB cluster.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *                 What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *                 Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            removeRoleFromDBCluster(args: RemoveRoleFromDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<RemoveRoleFromDBClusterCommandOutput>;
            removeRoleFromDBCluster(args: RemoveRoleFromDBClusterCommandInput, cb: (err: any, data?: RemoveRoleFromDBClusterCommandOutput) => void): void;
            removeRoleFromDBCluster(args: RemoveRoleFromDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveRoleFromDBClusterCommandOutput) => void): void;
            /**
                * <p>Disassociates an Amazon Web Services Identity and Access Management (IAM) role from a DB instance.</p>
                */
            removeRoleFromDBInstance(args: RemoveRoleFromDBInstanceCommandInput, options?: __HttpHandlerOptions): Promise<RemoveRoleFromDBInstanceCommandOutput>;
            removeRoleFromDBInstance(args: RemoveRoleFromDBInstanceCommandInput, cb: (err: any, data?: RemoveRoleFromDBInstanceCommandOutput) => void): void;
            removeRoleFromDBInstance(args: RemoveRoleFromDBInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveRoleFromDBInstanceCommandOutput) => void): void;
            /**
                * <p>Removes a source identifier from an existing RDS event notification subscription.</p>
                */
            removeSourceIdentifierFromSubscription(args: RemoveSourceIdentifierFromSubscriptionCommandInput, options?: __HttpHandlerOptions): Promise<RemoveSourceIdentifierFromSubscriptionCommandOutput>;
            removeSourceIdentifierFromSubscription(args: RemoveSourceIdentifierFromSubscriptionCommandInput, cb: (err: any, data?: RemoveSourceIdentifierFromSubscriptionCommandOutput) => void): void;
            removeSourceIdentifierFromSubscription(args: RemoveSourceIdentifierFromSubscriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveSourceIdentifierFromSubscriptionCommandOutput) => void): void;
            /**
                * <p>Removes metadata tags from an Amazon RDS resource.</p>
                *         <p>For an overview on tagging an Amazon RDS resource,
                *           see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>
                *           in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            removeTagsFromResource(args: RemoveTagsFromResourceCommandInput, options?: __HttpHandlerOptions): Promise<RemoveTagsFromResourceCommandOutput>;
            removeTagsFromResource(args: RemoveTagsFromResourceCommandInput, cb: (err: any, data?: RemoveTagsFromResourceCommandOutput) => void): void;
            removeTagsFromResource(args: RemoveTagsFromResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveTagsFromResourceCommandOutput) => void): void;
            /**
                * <p>Modifies the parameters of a DB cluster parameter group to the default value. To
                *             reset specific parameters submit a list of the following: <code>ParameterName</code>
                *             and <code>ApplyMethod</code>. To reset the
                *             entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code>
                *             and <code>ResetAllParameters</code> parameters.</p>
                *         <p>When resetting the entire group, dynamic parameters are updated immediately and static parameters
                *             are set to <code>pending-reboot</code> to take effect on the next DB instance restart
                *             or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every
                *             DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            resetDBClusterParameterGroup(args: ResetDBClusterParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<ResetDBClusterParameterGroupCommandOutput>;
            resetDBClusterParameterGroup(args: ResetDBClusterParameterGroupCommandInput, cb: (err: any, data?: ResetDBClusterParameterGroupCommandOutput) => void): void;
            resetDBClusterParameterGroup(args: ResetDBClusterParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResetDBClusterParameterGroupCommandOutput) => void): void;
            /**
                * <p>Modifies the parameters of a DB parameter group to the engine/system default value.
                *             To reset specific parameters, provide a list of the following:
                *                 <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB
                *             parameter group, specify the <code>DBParameterGroup</code> name and
                *                 <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic
                *             parameters are updated immediately and static parameters are set to
                *                 <code>pending-reboot</code> to take effect on the next DB instance restart or
                *                 <code>RebootDBInstance</code> request.</p>
                */
            resetDBParameterGroup(args: ResetDBParameterGroupCommandInput, options?: __HttpHandlerOptions): Promise<ResetDBParameterGroupCommandOutput>;
            resetDBParameterGroup(args: ResetDBParameterGroupCommandInput, cb: (err: any, data?: ResetDBParameterGroupCommandOutput) => void): void;
            resetDBParameterGroup(args: ResetDBParameterGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResetDBParameterGroupCommandOutput) => void): void;
            /**
                * <p>Creates an Amazon Aurora DB cluster from MySQL data stored in an Amazon S3 bucket.
                *             Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be
                *             created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.ExtMySQL.html#AuroraMySQL.Migrating.ExtMySQL.S3"> Migrating Data from MySQL by Using an Amazon S3 Bucket</a> in the
                *                 <i>Amazon Aurora User Guide</i>.</p>
                *         <note>
                *             <p>This action only restores the DB cluster, not the DB instances for that DB
                *                   cluster. You must invoke the <code>CreateDBInstance</code> action to create DB
                *                   instances for the restored DB cluster, specifying the identifier of the restored DB
                *                   cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after
                *                   the <code>RestoreDBClusterFromS3</code> action has completed and the DB
                *                   cluster is available.</p>
                *         </note>
                *         <p>For more information on Amazon Aurora, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *                 What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <note>
                *             <p>This action only applies to Aurora DB clusters. The source DB engine must be
                *                 MySQL.</p>
                *         </note>
                */
            restoreDBClusterFromS3(args: RestoreDBClusterFromS3CommandInput, options?: __HttpHandlerOptions): Promise<RestoreDBClusterFromS3CommandOutput>;
            restoreDBClusterFromS3(args: RestoreDBClusterFromS3CommandInput, cb: (err: any, data?: RestoreDBClusterFromS3CommandOutput) => void): void;
            restoreDBClusterFromS3(args: RestoreDBClusterFromS3CommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreDBClusterFromS3CommandOutput) => void): void;
            /**
                * <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p>
                *         <p>The target DB cluster is created from the source snapshot with a default
                *             configuration. If you don't specify a security group, the new DB cluster is
                *             associated with the default security group.</p>
                *         <note>
                *             <p>This action only restores the DB cluster, not the DB instances for that DB
                *                 cluster. You must invoke the <code>CreateDBInstance</code> action to create DB
                *                 instances for the restored DB cluster, specifying the identifier of the restored DB
                *                 cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after
                *                 the <code>RestoreDBClusterFromSnapshot</code> action has completed and the DB
                *                 cluster is available.</p>
                *         </note>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            restoreDBClusterFromSnapshot(args: RestoreDBClusterFromSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<RestoreDBClusterFromSnapshotCommandOutput>;
            restoreDBClusterFromSnapshot(args: RestoreDBClusterFromSnapshotCommandInput, cb: (err: any, data?: RestoreDBClusterFromSnapshotCommandOutput) => void): void;
            restoreDBClusterFromSnapshot(args: RestoreDBClusterFromSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreDBClusterFromSnapshotCommandOutput) => void): void;
            /**
                * <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point
                *             in time before <code>LatestRestorableTime</code> for up to
                *                 <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the
                *             source DB cluster with the same configuration as the original DB cluster, except that
                *             the new DB cluster is created with the default DB security group.</p>
                *         <note>
                *             <p>For Aurora, this action only restores the DB cluster, not the DB instances for that DB
                *                 cluster. You must invoke the <code>CreateDBInstance</code> action to create DB
                *                 instances for the restored DB cluster, specifying the identifier of the restored DB
                *                 cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after
                *                 the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB
                *                 cluster is available.</p>
                *         </note>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            restoreDBClusterToPointInTime(args: RestoreDBClusterToPointInTimeCommandInput, options?: __HttpHandlerOptions): Promise<RestoreDBClusterToPointInTimeCommandOutput>;
            restoreDBClusterToPointInTime(args: RestoreDBClusterToPointInTimeCommandInput, cb: (err: any, data?: RestoreDBClusterToPointInTimeCommandOutput) => void): void;
            restoreDBClusterToPointInTime(args: RestoreDBClusterToPointInTimeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreDBClusterToPointInTimeCommandOutput) => void): void;
            /**
                * <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with most
                *             of the source's original configuration, including the default security group and DB parameter group. By default, the new DB
                *             instance is created as a Single-AZ deployment, except when the instance is a SQL Server instance that has an option group
                *             associated with mirroring. In this case, the instance becomes a Multi-AZ deployment, not a Single-AZ deployment.</p>
                *         <p>If you want to replace your original DB instance with the new, restored DB instance, then rename your original DB instance
                *             before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. After you
                *             have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as
                *             the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you replace the original
                *             DB instance with the DB instance created from the snapshot.</p>
                *         <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code>
                *       must be the ARN of the shared DB snapshot.</p>
                *         <note>
                *             <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p>
                *         </note>
                */
            restoreDBInstanceFromDBSnapshot(args: RestoreDBInstanceFromDBSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<RestoreDBInstanceFromDBSnapshotCommandOutput>;
            restoreDBInstanceFromDBSnapshot(args: RestoreDBInstanceFromDBSnapshotCommandInput, cb: (err: any, data?: RestoreDBInstanceFromDBSnapshotCommandOutput) => void): void;
            restoreDBInstanceFromDBSnapshot(args: RestoreDBInstanceFromDBSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreDBInstanceFromDBSnapshotCommandOutput) => void): void;
            /**
                * <p>Amazon Relational Database Service (Amazon RDS)
                *             supports importing MySQL databases by using backup files.
                *             You can create a backup of your on-premises database,
                *             store it on Amazon Simple Storage Service (Amazon S3),
                *             and then restore the backup file onto a new Amazon RDS DB instance running MySQL.
                *             For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a>
                *             in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>This command doesn't apply to RDS Custom.</p>
                */
            restoreDBInstanceFromS3(args: RestoreDBInstanceFromS3CommandInput, options?: __HttpHandlerOptions): Promise<RestoreDBInstanceFromS3CommandOutput>;
            restoreDBInstanceFromS3(args: RestoreDBInstanceFromS3CommandInput, cb: (err: any, data?: RestoreDBInstanceFromS3CommandOutput) => void): void;
            restoreDBInstanceFromS3(args: RestoreDBInstanceFromS3CommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreDBInstanceFromS3CommandOutput) => void): void;
            /**
                * <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p>
                *         <p>The target database is created with most of the original configuration, but in a
                *             system-selected Availability Zone, with the default security group, the default subnet
                *             group, and the default DB parameter group. By default, the new DB instance is created as
                *             a single-AZ deployment except when the instance is a SQL Server instance that has an
                *             option group that is associated with mirroring; in this case, the instance becomes a
                *             mirrored deployment and not a single-AZ deployment.</p>
                *         <note>
                *             <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p>
                *         </note>
                */
            restoreDBInstanceToPointInTime(args: RestoreDBInstanceToPointInTimeCommandInput, options?: __HttpHandlerOptions): Promise<RestoreDBInstanceToPointInTimeCommandOutput>;
            restoreDBInstanceToPointInTime(args: RestoreDBInstanceToPointInTimeCommandInput, cb: (err: any, data?: RestoreDBInstanceToPointInTimeCommandOutput) => void): void;
            restoreDBInstanceToPointInTime(args: RestoreDBInstanceToPointInTimeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RestoreDBInstanceToPointInTimeCommandOutput) => void): void;
            /**
                * <p>Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC security groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).</p>
                */
            revokeDBSecurityGroupIngress(args: RevokeDBSecurityGroupIngressCommandInput, options?: __HttpHandlerOptions): Promise<RevokeDBSecurityGroupIngressCommandOutput>;
            revokeDBSecurityGroupIngress(args: RevokeDBSecurityGroupIngressCommandInput, cb: (err: any, data?: RevokeDBSecurityGroupIngressCommandOutput) => void): void;
            revokeDBSecurityGroupIngress(args: RevokeDBSecurityGroupIngressCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RevokeDBSecurityGroupIngressCommandOutput) => void): void;
            /**
                * <p>Starts a database activity stream to monitor activity on the database.
                *             For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a>
                *             in the <i>Amazon Aurora User Guide</i>.</p>
                */
            startActivityStream(args: StartActivityStreamCommandInput, options?: __HttpHandlerOptions): Promise<StartActivityStreamCommandOutput>;
            startActivityStream(args: StartActivityStreamCommandInput, cb: (err: any, data?: StartActivityStreamCommandOutput) => void): void;
            startActivityStream(args: StartActivityStreamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartActivityStreamCommandOutput) => void): void;
            /**
                * <p>Starts an Amazon Aurora DB cluster that was stopped using the Amazon Web Services console, the stop-db-cluster
                *        CLI command, or the StopDBCluster action.</p>
                *         <p>For more information, see
                *            <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html">
                *                Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <note>
                *             <p>This action only applies to Aurora DB clusters.</p>
                *         </note>
                */
            startDBCluster(args: StartDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<StartDBClusterCommandOutput>;
            startDBCluster(args: StartDBClusterCommandInput, cb: (err: any, data?: StartDBClusterCommandOutput) => void): void;
            startDBCluster(args: StartDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartDBClusterCommandOutput) => void): void;
            /**
                * <p>Starts an Amazon RDS DB instance that was stopped using the Amazon Web Services console, the stop-db-instance CLI command, or the StopDBInstance action.</p>
                *         <p>For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html">
                *                 Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the
                *             <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <note>
                *             <p>This command doesn't apply to RDS Custom, Aurora MySQL, and Aurora PostgreSQL.
                *             For Aurora DB clusters, use <code>StartDBCluster</code> instead.</p>
                *         </note>
                */
            startDBInstance(args: StartDBInstanceCommandInput, options?: __HttpHandlerOptions): Promise<StartDBInstanceCommandOutput>;
            startDBInstance(args: StartDBInstanceCommandInput, cb: (err: any, data?: StartDBInstanceCommandOutput) => void): void;
            startDBInstance(args: StartDBInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartDBInstanceCommandOutput) => void): void;
            /**
                * <p>Enables replication of automated backups to a different Amazon Web Services Region.</p>
                *         <p>This command doesn't apply to RDS Custom.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReplicateBackups.html">
                *             Replicating Automated Backups to Another Amazon Web Services Region</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            startDBInstanceAutomatedBackupsReplication(args: StartDBInstanceAutomatedBackupsReplicationCommandInput, options?: __HttpHandlerOptions): Promise<StartDBInstanceAutomatedBackupsReplicationCommandOutput>;
            startDBInstanceAutomatedBackupsReplication(args: StartDBInstanceAutomatedBackupsReplicationCommandInput, cb: (err: any, data?: StartDBInstanceAutomatedBackupsReplicationCommandOutput) => void): void;
            startDBInstanceAutomatedBackupsReplication(args: StartDBInstanceAutomatedBackupsReplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartDBInstanceAutomatedBackupsReplicationCommandOutput) => void): void;
            /**
                * <p>Starts an export of a snapshot to Amazon S3.
                *             The provided IAM role must have access to the S3 bucket.</p>
                *         <p>This command doesn't apply to RDS Custom.</p>
                */
            startExportTask(args: StartExportTaskCommandInput, options?: __HttpHandlerOptions): Promise<StartExportTaskCommandOutput>;
            startExportTask(args: StartExportTaskCommandInput, cb: (err: any, data?: StartExportTaskCommandOutput) => void): void;
            startExportTask(args: StartExportTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartExportTaskCommandOutput) => void): void;
            /**
                * <p>Stops a database activity stream that was started using the Amazon Web Services console,
                *             the <code>start-activity-stream</code> CLI command, or the <code>StartActivityStream</code> action.</p>
                *         <p>For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a>
                *             in the <i>Amazon Aurora User Guide</i>.</p>
                */
            stopActivityStream(args: StopActivityStreamCommandInput, options?: __HttpHandlerOptions): Promise<StopActivityStreamCommandOutput>;
            stopActivityStream(args: StopActivityStreamCommandInput, cb: (err: any, data?: StopActivityStreamCommandOutput) => void): void;
            stopActivityStream(args: StopActivityStreamCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopActivityStreamCommandOutput) => void): void;
            /**
                * <p>Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's
                *        metadata, including its endpoints and DB parameter groups. Aurora also
                *        retains the transaction logs so you can do a point-in-time restore if necessary.</p>
                *         <p>For more information, see
                *            <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html">
                *                Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <note>
                *             <p>This action only applies to Aurora DB clusters.</p>
                *         </note>
                */
            stopDBCluster(args: StopDBClusterCommandInput, options?: __HttpHandlerOptions): Promise<StopDBClusterCommandOutput>;
            stopDBCluster(args: StopDBClusterCommandInput, cb: (err: any, data?: StopDBClusterCommandOutput) => void): void;
            stopDBCluster(args: StopDBClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopDBClusterCommandOutput) => void): void;
            /**
                * <p>Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint,
                *             DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if
                *             necessary.</p>
                *         <p>For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html">
                *                 Stopping an Amazon RDS DB Instance Temporarily</a> in the
                *             <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <note>
                *             <p>This command doesn't apply to RDS Custom, Aurora MySQL, and Aurora PostgreSQL.
                *             For Aurora clusters, use <code>StopDBCluster</code> instead.</p>
                *         </note>
                */
            stopDBInstance(args: StopDBInstanceCommandInput, options?: __HttpHandlerOptions): Promise<StopDBInstanceCommandOutput>;
            stopDBInstance(args: StopDBInstanceCommandInput, cb: (err: any, data?: StopDBInstanceCommandOutput) => void): void;
            stopDBInstance(args: StopDBInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopDBInstanceCommandOutput) => void): void;
            /**
                * <p>Stops automated backup replication for a DB instance.</p>
                *         <p>This command doesn't apply to RDS Custom.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReplicateBackups.html">
                *             Replicating Automated Backups to Another Amazon Web Services Region</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            stopDBInstanceAutomatedBackupsReplication(args: StopDBInstanceAutomatedBackupsReplicationCommandInput, options?: __HttpHandlerOptions): Promise<StopDBInstanceAutomatedBackupsReplicationCommandOutput>;
            stopDBInstanceAutomatedBackupsReplication(args: StopDBInstanceAutomatedBackupsReplicationCommandInput, cb: (err: any, data?: StopDBInstanceAutomatedBackupsReplicationCommandOutput) => void): void;
            stopDBInstanceAutomatedBackupsReplication(args: StopDBInstanceAutomatedBackupsReplicationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopDBInstanceAutomatedBackupsReplicationCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AddRoleToDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AddRoleToDBClusterMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface AddRoleToDBClusterCommandInput extends AddRoleToDBClusterMessage {
    }
    export interface AddRoleToDBClusterCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Associates an Identity and Access Management (IAM) role with a DB cluster.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, AddRoleToDBClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, AddRoleToDBClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new AddRoleToDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddRoleToDBClusterCommandInput} for command's `input` shape.
        * @see {@link AddRoleToDBClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class AddRoleToDBClusterCommand extends $Command<AddRoleToDBClusterCommandInput, AddRoleToDBClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: AddRoleToDBClusterCommandInput;
            constructor(input: AddRoleToDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddRoleToDBClusterCommandInput, AddRoleToDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AddRoleToDBInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AddRoleToDBInstanceMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface AddRoleToDBInstanceCommandInput extends AddRoleToDBInstanceMessage {
    }
    export interface AddRoleToDBInstanceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Associates an Amazon Web Services Identity and Access Management (IAM) role with a DB instance.</p>
        *         <note>
        *             <p>To add a role to a DB instance, the status of the DB instance must be <code>available</code>.</p>
        *         </note>
        *         <p>This command doesn't apply to RDS Custom.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, AddRoleToDBInstanceCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, AddRoleToDBInstanceCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new AddRoleToDBInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddRoleToDBInstanceCommandInput} for command's `input` shape.
        * @see {@link AddRoleToDBInstanceCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class AddRoleToDBInstanceCommand extends $Command<AddRoleToDBInstanceCommandInput, AddRoleToDBInstanceCommandOutput, RDSClientResolvedConfig> {
            readonly input: AddRoleToDBInstanceCommandInput;
            constructor(input: AddRoleToDBInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddRoleToDBInstanceCommandInput, AddRoleToDBInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AddSourceIdentifierToSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AddSourceIdentifierToSubscriptionMessage, AddSourceIdentifierToSubscriptionResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface AddSourceIdentifierToSubscriptionCommandInput extends AddSourceIdentifierToSubscriptionMessage {
    }
    export interface AddSourceIdentifierToSubscriptionCommandOutput extends AddSourceIdentifierToSubscriptionResult, __MetadataBearer {
    }
    /**
        * <p>Adds a source identifier to an existing RDS event notification subscription.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, AddSourceIdentifierToSubscriptionCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, AddSourceIdentifierToSubscriptionCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new AddSourceIdentifierToSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddSourceIdentifierToSubscriptionCommandInput} for command's `input` shape.
        * @see {@link AddSourceIdentifierToSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class AddSourceIdentifierToSubscriptionCommand extends $Command<AddSourceIdentifierToSubscriptionCommandInput, AddSourceIdentifierToSubscriptionCommandOutput, RDSClientResolvedConfig> {
            readonly input: AddSourceIdentifierToSubscriptionCommandInput;
            constructor(input: AddSourceIdentifierToSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddSourceIdentifierToSubscriptionCommandInput, AddSourceIdentifierToSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AddTagsToResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AddTagsToResourceMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface AddTagsToResourceCommandInput extends AddTagsToResourceMessage {
    }
    export interface AddTagsToResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds metadata tags to an Amazon RDS resource. These tags can also be used with cost allocation reporting to track cost associated with Amazon RDS resources, or used in a Condition statement in an IAM policy for Amazon RDS.</p>
        *         <p>For an overview on tagging Amazon RDS resources,
        *             see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, AddTagsToResourceCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, AddTagsToResourceCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new AddTagsToResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddTagsToResourceCommandInput} for command's `input` shape.
        * @see {@link AddTagsToResourceCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class AddTagsToResourceCommand extends $Command<AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput, RDSClientResolvedConfig> {
            readonly input: AddTagsToResourceCommandInput;
            constructor(input: AddTagsToResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ApplyPendingMaintenanceActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApplyPendingMaintenanceActionMessage, ApplyPendingMaintenanceActionResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ApplyPendingMaintenanceActionCommandInput extends ApplyPendingMaintenanceActionMessage {
    }
    export interface ApplyPendingMaintenanceActionCommandOutput extends ApplyPendingMaintenanceActionResult, __MetadataBearer {
    }
    /**
        * <p>Applies a pending maintenance action to a resource (for example, to a DB instance).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ApplyPendingMaintenanceActionCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ApplyPendingMaintenanceActionCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ApplyPendingMaintenanceActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ApplyPendingMaintenanceActionCommandInput} for command's `input` shape.
        * @see {@link ApplyPendingMaintenanceActionCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ApplyPendingMaintenanceActionCommand extends $Command<ApplyPendingMaintenanceActionCommandInput, ApplyPendingMaintenanceActionCommandOutput, RDSClientResolvedConfig> {
            readonly input: ApplyPendingMaintenanceActionCommandInput;
            constructor(input: ApplyPendingMaintenanceActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ApplyPendingMaintenanceActionCommandInput, ApplyPendingMaintenanceActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AuthorizeDBSecurityGroupIngressCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuthorizeDBSecurityGroupIngressMessage, AuthorizeDBSecurityGroupIngressResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface AuthorizeDBSecurityGroupIngressCommandInput extends AuthorizeDBSecurityGroupIngressMessage {
    }
    export interface AuthorizeDBSecurityGroupIngressCommandOutput extends AuthorizeDBSecurityGroupIngressResult, __MetadataBearer {
    }
    /**
        * <p>Enables ingress to a DBSecurityGroup using one of two forms of authorization. First, EC2 or VPC security
        *           groups can be added to the DBSecurityGroup if the application using the database is running on EC2 or VPC
        *           instances. Second, IP ranges are available if the application accessing your database is running on the internet.
        *           Required parameters for this API are one of CIDR range, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId
        *           and either EC2SecurityGroupName or EC2SecurityGroupId for non-VPC).</p>
        *         <note>
        *             <p>You can't authorize ingress from an EC2 security group in one Amazon Web Services Region to an Amazon RDS DB instance in
        *              another. You can't authorize ingress from a VPC security group in one VPC to an Amazon RDS DB instance in another.</p>
        *         </note>
        *         <p>For an overview of CIDR ranges, go to the
        *             <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, AuthorizeDBSecurityGroupIngressCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, AuthorizeDBSecurityGroupIngressCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new AuthorizeDBSecurityGroupIngressCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AuthorizeDBSecurityGroupIngressCommandInput} for command's `input` shape.
        * @see {@link AuthorizeDBSecurityGroupIngressCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class AuthorizeDBSecurityGroupIngressCommand extends $Command<AuthorizeDBSecurityGroupIngressCommandInput, AuthorizeDBSecurityGroupIngressCommandOutput, RDSClientResolvedConfig> {
            readonly input: AuthorizeDBSecurityGroupIngressCommandInput;
            constructor(input: AuthorizeDBSecurityGroupIngressCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AuthorizeDBSecurityGroupIngressCommandInput, AuthorizeDBSecurityGroupIngressCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/BacktrackDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { BacktrackDBClusterMessage, DBClusterBacktrack } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface BacktrackDBClusterCommandInput extends BacktrackDBClusterMessage {
    }
    export interface BacktrackDBClusterCommandOutput extends DBClusterBacktrack, __MetadataBearer {
    }
    /**
        * <p>Backtracks a DB cluster to a specific time, without creating a new DB cluster.</p>
        *         <p>For more information on backtracking, see
        *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Backtrack.html">
        *                 Backtracking an Aurora DB Cluster</a> in the
        *             <i>Amazon Aurora User Guide</i>.</p>
        *         <note>
        *             <p>This action only applies to Aurora MySQL DB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, BacktrackDBClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, BacktrackDBClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new BacktrackDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BacktrackDBClusterCommandInput} for command's `input` shape.
        * @see {@link BacktrackDBClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class BacktrackDBClusterCommand extends $Command<BacktrackDBClusterCommandInput, BacktrackDBClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: BacktrackDBClusterCommandInput;
            constructor(input: BacktrackDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BacktrackDBClusterCommandInput, BacktrackDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CancelExportTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelExportTaskMessage, ExportTask } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CancelExportTaskCommandInput extends CancelExportTaskMessage {
    }
    export interface CancelExportTaskCommandOutput extends ExportTask, __MetadataBearer {
    }
    /**
        * <p>Cancels an export task in progress that is exporting a snapshot to Amazon S3.
        *             Any data that has already been written to the S3 bucket isn't removed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CancelExportTaskCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CancelExportTaskCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CancelExportTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelExportTaskCommandInput} for command's `input` shape.
        * @see {@link CancelExportTaskCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CancelExportTaskCommand extends $Command<CancelExportTaskCommandInput, CancelExportTaskCommandOutput, RDSClientResolvedConfig> {
            readonly input: CancelExportTaskCommandInput;
            constructor(input: CancelExportTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelExportTaskCommandInput, CancelExportTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyDBClusterParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CopyDBClusterParameterGroupMessage, CopyDBClusterParameterGroupResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CopyDBClusterParameterGroupCommandInput extends CopyDBClusterParameterGroupMessage {
    }
    export interface CopyDBClusterParameterGroupCommandOutput extends CopyDBClusterParameterGroupResult, __MetadataBearer {
    }
    /**
        * <p>Copies the specified DB cluster parameter group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CopyDBClusterParameterGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CopyDBClusterParameterGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CopyDBClusterParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CopyDBClusterParameterGroupCommandInput} for command's `input` shape.
        * @see {@link CopyDBClusterParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CopyDBClusterParameterGroupCommand extends $Command<CopyDBClusterParameterGroupCommandInput, CopyDBClusterParameterGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: CopyDBClusterParameterGroupCommandInput;
            constructor(input: CopyDBClusterParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CopyDBClusterParameterGroupCommandInput, CopyDBClusterParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyDBClusterSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CopyDBClusterSnapshotMessage, CopyDBClusterSnapshotResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CopyDBClusterSnapshotCommandInput extends CopyDBClusterSnapshotMessage {
    }
    export interface CopyDBClusterSnapshotCommandOutput extends CopyDBClusterSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Copies a snapshot of a DB cluster.</p>
        *         <p>To copy a DB cluster snapshot from a shared manual DB cluster snapshot, <code>SourceDBClusterSnapshotIdentifier</code>
        *           must be the Amazon Resource Name (ARN) of the shared DB cluster snapshot.</p>
        *         <p>You can copy an encrypted DB cluster snapshot from another Amazon Web Services Region. In that case, the Amazon Web Services Region where you call the <code>CopyDBClusterSnapshot</code> action
        *           is the destination Amazon Web Services Region for the encrypted DB cluster snapshot to be copied to. To copy an encrypted DB cluster snapshot from another Amazon Web Services Region,
        *           you must provide the following values:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>KmsKeyId</code> - The Amazon Web Services Key Management System (Amazon Web Services KMS) key identifier for the key to use to
        *               encrypt the copy of the DB cluster snapshot in the destination Amazon Web Services Region.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>PreSignedUrl</code> -  A URL that contains a Signature Version 4 signed request for the
        *               <code>CopyDBClusterSnapshot</code> action to be called in the source Amazon Web Services Region where the DB cluster snapshot is copied from.
        *               The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be executed in the
        *               source Amazon Web Services Region that contains the encrypted DB cluster snapshot to be copied.</p>
        *                 <p>The pre-signed URL request must contain the following parameter values:</p>
        *                 <ul>
        *                   <li>
        *                         <p>
        *                         <code>KmsKeyId</code> - The Amazon Web Services KMS key identifier for the KMS key to use to encrypt the copy of the DB
        *                       cluster snapshot in the destination Amazon Web Services Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code>
        *                       action that is called in the destination Amazon Web Services Region, and the action contained in the pre-signed URL.</p>
        *                     </li>
        *                   <li>
        *                         <p>
        *                         <code>DestinationRegion</code> - The name of the Amazon Web Services Region that the DB cluster snapshot is to be created in.</p>
        *                     </li>
        *                   <li>
        *                         <p>
        *                         <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster
        *                       snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example,
        *                       if you are copying an encrypted DB cluster snapshot from the us-west-2 Amazon Web Services Region, then your <code>SourceDBClusterSnapshotIdentifier</code>
        *                       looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p>
        *                     </li>
        *                </ul>
        *                 <p>To learn how to generate a Signature Version 4 signed request, see
        *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">
        *                       Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)</a> and
        *                   <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">
        *                       Signature Version 4 Signing Process</a>.</p>
        *                 <note>
        *                     <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the CLI)
        *                       instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid
        *                       request for the operation that can be executed in the source Amazon Web Services Region.</p>
        *                 </note>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>TargetDBClusterSnapshotIdentifier</code> - The identifier for the new copy of the DB cluster snapshot in the destination Amazon Web Services Region.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied.
        *               This identifier must be in the ARN format for the source Amazon Web Services Region and is the same value as the <code>SourceDBClusterSnapshotIdentifier</code> in the pre-signed URL.</p>
        *             </li>
        *          </ul>
        *         <p>To cancel the copy operation once it is in progress, delete the target DB cluster snapshot identified
        *           by <code>TargetDBClusterSnapshotIdentifier</code> while that DB cluster snapshot is in "copying" status.</p>
        *         <p>For more information on copying encrypted Amazon Aurora DB cluster snapshots from one Amazon Web Services Region to another, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html">
        *               Copying a Snapshot</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Amazon Aurora DB clusters, see
        *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *                 What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *                 Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CopyDBClusterSnapshotCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CopyDBClusterSnapshotCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CopyDBClusterSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CopyDBClusterSnapshotCommandInput} for command's `input` shape.
        * @see {@link CopyDBClusterSnapshotCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CopyDBClusterSnapshotCommand extends $Command<CopyDBClusterSnapshotCommandInput, CopyDBClusterSnapshotCommandOutput, RDSClientResolvedConfig> {
            readonly input: CopyDBClusterSnapshotCommandInput;
            constructor(input: CopyDBClusterSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CopyDBClusterSnapshotCommandInput, CopyDBClusterSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyDBParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CopyDBParameterGroupMessage, CopyDBParameterGroupResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CopyDBParameterGroupCommandInput extends CopyDBParameterGroupMessage {
    }
    export interface CopyDBParameterGroupCommandOutput extends CopyDBParameterGroupResult, __MetadataBearer {
    }
    /**
        * <p>Copies the specified DB parameter group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CopyDBParameterGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CopyDBParameterGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CopyDBParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CopyDBParameterGroupCommandInput} for command's `input` shape.
        * @see {@link CopyDBParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CopyDBParameterGroupCommand extends $Command<CopyDBParameterGroupCommandInput, CopyDBParameterGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: CopyDBParameterGroupCommandInput;
            constructor(input: CopyDBParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CopyDBParameterGroupCommandInput, CopyDBParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyDBSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CopyDBSnapshotMessage, CopyDBSnapshotResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CopyDBSnapshotCommandInput extends CopyDBSnapshotMessage {
    }
    export interface CopyDBSnapshotCommandOutput extends CopyDBSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Copies the specified DB snapshot. The source DB snapshot must be in the <code>available</code> state.</p>
        *         <p>You can copy a snapshot from one Amazon Web Services Region to another. In that case, the Amazon Web Services Region
        *             where you call the <code>CopyDBSnapshot</code> action is the destination Amazon Web Services Region for the
        *             DB snapshot copy.</p>
        *         <p>This command doesn't apply to RDS Custom.</p>
        *         <p>For more information about copying snapshots, see
        *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopyDBSnapshot">Copying a DB Snapshot</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CopyDBSnapshotCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CopyDBSnapshotCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CopyDBSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CopyDBSnapshotCommandInput} for command's `input` shape.
        * @see {@link CopyDBSnapshotCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CopyDBSnapshotCommand extends $Command<CopyDBSnapshotCommandInput, CopyDBSnapshotCommandOutput, RDSClientResolvedConfig> {
            readonly input: CopyDBSnapshotCommandInput;
            constructor(input: CopyDBSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CopyDBSnapshotCommandInput, CopyDBSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyOptionGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CopyOptionGroupMessage, CopyOptionGroupResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CopyOptionGroupCommandInput extends CopyOptionGroupMessage {
    }
    export interface CopyOptionGroupCommandOutput extends CopyOptionGroupResult, __MetadataBearer {
    }
    /**
        * <p>Copies the specified option group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CopyOptionGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CopyOptionGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CopyOptionGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CopyOptionGroupCommandInput} for command's `input` shape.
        * @see {@link CopyOptionGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CopyOptionGroupCommand extends $Command<CopyOptionGroupCommandInput, CopyOptionGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: CopyOptionGroupCommandInput;
            constructor(input: CopyOptionGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CopyOptionGroupCommandInput, CopyOptionGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateCustomDBEngineVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateCustomDBEngineVersionMessage, DBEngineVersion } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateCustomDBEngineVersionCommandInput extends CreateCustomDBEngineVersionMessage {
    }
    export interface CreateCustomDBEngineVersionCommandOutput extends DBEngineVersion, __MetadataBearer {
    }
    /**
        * <p>Creates a custom DB engine version (CEV). A CEV is a binary volume snapshot of a database engine and specific
        *             AMI. The supported engines are the following:</p>
        *         <ul>
        *             <li>
        *                 <p>Oracle Database 12.1 Enterprise Edition with the January 2021 or later RU/RUR</p>
        *             </li>
        *             <li>
        *                 <p>Oracle Database 19c Enterprise Edition with the January 2021 or later RU/RUR</p>
        *             </li>
        *          </ul>
        *         <p>Amazon RDS, which is a fully managed service, supplies the Amazon Machine Image (AMI) and database software.
        *             The Amazon RDS database software is preinstalled, so you need only select a DB engine and version, and create
        *             your database. With Amazon RDS Custom for Oracle, you upload your database installation files in Amazon S3.</p>
        *         <p>When you create a custom engine version, you specify the files in a JSON document called a CEV manifest.
        *             This document describes installation .zip files stored in Amazon S3. RDS Custom creates your CEV from
        *             the installation files that you provided. This service model is called Bring Your Own Media (BYOM).</p>
        *         <p>Creation takes approximately two hours. If creation fails, RDS Custom issues <code>RDS-EVENT-0196</code> with
        *             the message <code>Creation failed for custom engine version</code>, and includes details about the failure.
        *             For example, the event prints missing files.</p>
        *         <p>After you create the CEV, it is available for use. You can create multiple CEVs, and create multiple
        *             RDS Custom instances from any CEV. You can also change the status of a CEV to make it available or
        *             inactive.</p>
        *         <note>
        *             <p>The MediaImport service that imports files from Amazon S3 to create CEVs isn't integrated with
        *             Amazon Web Services CloudTrail. If you turn on data logging for Amazon RDS in CloudTrail, calls to the
        *             <code>CreateCustomDbEngineVersion</code> event aren't logged. However, you might see calls from the
        *             API gateway that accesses your Amazon S3 bucket. These calls originate from the MediaImport service for
        *             the <code>CreateCustomDbEngineVersion</code> event.</p>
        *         </note>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.create">
        *                 Creating a CEV</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateCustomDBEngineVersionCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateCustomDBEngineVersionCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateCustomDBEngineVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCustomDBEngineVersionCommandInput} for command's `input` shape.
        * @see {@link CreateCustomDBEngineVersionCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateCustomDBEngineVersionCommand extends $Command<CreateCustomDBEngineVersionCommandInput, CreateCustomDBEngineVersionCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateCustomDBEngineVersionCommandInput;
            constructor(input: CreateCustomDBEngineVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCustomDBEngineVersionCommandInput, CreateCustomDBEngineVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDBClusterMessage, CreateDBClusterResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateDBClusterCommandInput extends CreateDBClusterMessage {
    }
    export interface CreateDBClusterCommandOutput extends CreateDBClusterResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
        *         <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create an Amazon
        *             Aurora DB cluster as a read replica of another DB cluster or Amazon RDS MySQL or
        *             PostgreSQL DB instance. For cross-Region replication where the DB cluster identified by
        *                 <code>ReplicationSourceIdentifier</code> is encrypted, also specify the
        *                 <code>PreSignedUrl</code> parameter.</p>
        *         <p>For more information on Amazon Aurora, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateDBClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateDBClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBClusterCommandInput} for command's `input` shape.
        * @see {@link CreateDBClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateDBClusterCommand extends $Command<CreateDBClusterCommandInput, CreateDBClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateDBClusterCommandInput;
            constructor(input: CreateDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBClusterCommandInput, CreateDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBClusterEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDBClusterEndpointMessage, DBClusterEndpoint } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateDBClusterEndpointCommandInput extends CreateDBClusterEndpointMessage {
    }
    export interface CreateDBClusterEndpointCommandOutput extends DBClusterEndpoint, __MetadataBearer {
    }
    /**
        * <p>Creates a new custom endpoint and associates it with an Amazon Aurora DB cluster.</p>
        *         <note>
        *             <p>This action only applies to Aurora DB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateDBClusterEndpointCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateDBClusterEndpointCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateDBClusterEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBClusterEndpointCommandInput} for command's `input` shape.
        * @see {@link CreateDBClusterEndpointCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateDBClusterEndpointCommand extends $Command<CreateDBClusterEndpointCommandInput, CreateDBClusterEndpointCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateDBClusterEndpointCommandInput;
            constructor(input: CreateDBClusterEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBClusterEndpointCommandInput, CreateDBClusterEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBClusterParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDBClusterParameterGroupMessage, CreateDBClusterParameterGroupResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateDBClusterParameterGroupCommandInput extends CreateDBClusterParameterGroupMessage {
    }
    export interface CreateDBClusterParameterGroupCommandOutput extends CreateDBClusterParameterGroupResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new DB cluster parameter group.</p>
        *         <p>Parameters in a DB cluster parameter group apply to all of the instances in a DB cluster.</p>
        *         <p>A DB cluster parameter group is initially created with the default parameters for the
        *             database engine used by instances in the DB cluster. To provide custom values for any of the
        *             parameters, you must modify the group after creating it using
        *             <code>ModifyDBClusterParameterGroup</code>. Once you've created a DB cluster parameter group, you need to
        *             associate it with your DB cluster using <code>ModifyDBCluster</code>.</p>
        *         <p>When you associate a new DB cluster parameter group with a running Aurora DB cluster, reboot the DB
        *             instances in the DB cluster without failover for the new DB cluster parameter group and
        *             associated settings to take effect.</p>
        *         <p>When you associate a new DB cluster parameter group with a running Multi-AZ DB cluster, reboot the DB
        *           cluster without failover for the new DB cluster parameter group and associated settings to take effect.</p>
        *         <important>
        *             <p>After you create a DB cluster parameter group, you should wait at least 5 minutes
        *                 before creating your first DB cluster
        *                 that uses that DB cluster parameter group as the default parameter
        *                 group. This allows Amazon RDS to fully complete the create action before the DB cluster parameter
        *                 group is used as the default for a new DB cluster. This is especially important for parameters
        *                 that are critical when creating the default database for a DB cluster, such as the character set
        *                 for the default database defined by the <code>character_set_database</code> parameter. You can use the
        *                 <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
        *                 <code>DescribeDBClusterParameters</code> action to verify
        *                 that your DB cluster parameter group has been created or modified.</p>
        *         </important>
        *         <p>For more information on Amazon Aurora, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateDBClusterParameterGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateDBClusterParameterGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateDBClusterParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBClusterParameterGroupCommandInput} for command's `input` shape.
        * @see {@link CreateDBClusterParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateDBClusterParameterGroupCommand extends $Command<CreateDBClusterParameterGroupCommandInput, CreateDBClusterParameterGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateDBClusterParameterGroupCommandInput;
            constructor(input: CreateDBClusterParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBClusterParameterGroupCommandInput, CreateDBClusterParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBClusterSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDBClusterSnapshotMessage, CreateDBClusterSnapshotResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateDBClusterSnapshotCommandInput extends CreateDBClusterSnapshotMessage {
    }
    export interface CreateDBClusterSnapshotCommandOutput extends CreateDBClusterSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Creates a snapshot of a DB cluster.</p>
        *         <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What is Amazon
        *                 Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateDBClusterSnapshotCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateDBClusterSnapshotCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateDBClusterSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBClusterSnapshotCommandInput} for command's `input` shape.
        * @see {@link CreateDBClusterSnapshotCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateDBClusterSnapshotCommand extends $Command<CreateDBClusterSnapshotCommandInput, CreateDBClusterSnapshotCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateDBClusterSnapshotCommandInput;
            constructor(input: CreateDBClusterSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBClusterSnapshotCommandInput, CreateDBClusterSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDBInstanceMessage, CreateDBInstanceResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateDBInstanceCommandInput extends CreateDBInstanceMessage {
    }
    export interface CreateDBInstanceCommandOutput extends CreateDBInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new DB instance.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateDBInstanceCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateDBInstanceCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateDBInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBInstanceCommandInput} for command's `input` shape.
        * @see {@link CreateDBInstanceCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateDBInstanceCommand extends $Command<CreateDBInstanceCommandInput, CreateDBInstanceCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateDBInstanceCommandInput;
            constructor(input: CreateDBInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBInstanceCommandInput, CreateDBInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBInstanceReadReplicaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDBInstanceReadReplicaMessage, CreateDBInstanceReadReplicaResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateDBInstanceReadReplicaCommandInput extends CreateDBInstanceReadReplicaMessage {
    }
    export interface CreateDBInstanceReadReplicaCommandOutput extends CreateDBInstanceReadReplicaResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new DB instance that acts as a read replica for an existing source DB
        *             instance. You can create a read replica for a DB instance running MySQL, MariaDB,
        *             Oracle, PostgreSQL, or SQL Server. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReadRepl.html">Working with Read
        *                 Replicas</a> in the <i>Amazon RDS User Guide</i>.</p>
        *         <p>Amazon Aurora doesn't support this action. Call the <code>CreateDBInstance</code>
        *             action to create a DB instance for an Aurora DB cluster.</p>
        *         <p>All read replica DB instances are created with backups disabled. All other DB
        *             instance attributes (including DB security groups and DB parameter groups) are inherited
        *             from the source DB instance, except as specified.</p>
        *         <important>
        *             <p>Your source DB instance must have backup retention enabled.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateDBInstanceReadReplicaCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateDBInstanceReadReplicaCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateDBInstanceReadReplicaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBInstanceReadReplicaCommandInput} for command's `input` shape.
        * @see {@link CreateDBInstanceReadReplicaCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateDBInstanceReadReplicaCommand extends $Command<CreateDBInstanceReadReplicaCommandInput, CreateDBInstanceReadReplicaCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateDBInstanceReadReplicaCommandInput;
            constructor(input: CreateDBInstanceReadReplicaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBInstanceReadReplicaCommandInput, CreateDBInstanceReadReplicaCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDBParameterGroupMessage, CreateDBParameterGroupResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateDBParameterGroupCommandInput extends CreateDBParameterGroupMessage {
    }
    export interface CreateDBParameterGroupCommandOutput extends CreateDBParameterGroupResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new DB parameter group.</p>
        *         <p>A DB parameter group is initially created with the default parameters for the
        *             database engine used by the DB instance. To provide custom values for any of the
        *             parameters, you must modify the group after creating it using
        *             <code>ModifyDBParameterGroup</code>. Once you've created a DB parameter group, you need to
        *             associate it with your DB instance using <code>ModifyDBInstance</code>. When you associate
        *             a new DB parameter group with a running DB instance, you need to reboot the DB
        *             instance without failover for the new DB parameter group and associated settings to take effect.</p>
        *         <p>This command doesn't apply to RDS Custom.</p>
        *         <important>
        *             <p>After you create a DB parameter group, you should wait at least 5 minutes
        *                 before creating your first DB instance that uses that DB parameter group as the default parameter
        *                 group. This allows Amazon RDS to fully complete the create action before the parameter
        *                 group is used as the default for a new DB instance. This is especially important for parameters
        *                 that are critical when creating the default database for a DB instance, such as the character set
        *                 for the default database defined by the <code>character_set_database</code> parameter. You can use the
        *                 <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
        *                 <i>DescribeDBParameters</i> command to verify
        *                 that your DB parameter group has been created or modified.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateDBParameterGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateDBParameterGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateDBParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBParameterGroupCommandInput} for command's `input` shape.
        * @see {@link CreateDBParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateDBParameterGroupCommand extends $Command<CreateDBParameterGroupCommandInput, CreateDBParameterGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateDBParameterGroupCommandInput;
            constructor(input: CreateDBParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBParameterGroupCommandInput, CreateDBParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBProxyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDBProxyRequest, CreateDBProxyResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateDBProxyCommandInput extends CreateDBProxyRequest {
    }
    export interface CreateDBProxyCommandOutput extends CreateDBProxyResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new DB proxy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateDBProxyCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateDBProxyCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateDBProxyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBProxyCommandInput} for command's `input` shape.
        * @see {@link CreateDBProxyCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateDBProxyCommand extends $Command<CreateDBProxyCommandInput, CreateDBProxyCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateDBProxyCommandInput;
            constructor(input: CreateDBProxyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBProxyCommandInput, CreateDBProxyCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBProxyEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDBProxyEndpointRequest, CreateDBProxyEndpointResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateDBProxyEndpointCommandInput extends CreateDBProxyEndpointRequest {
    }
    export interface CreateDBProxyEndpointCommandOutput extends CreateDBProxyEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <code>DBProxyEndpoint</code>. Only applies to proxies that are associated with Aurora DB clusters.
        *         You can use DB proxy endpoints to specify read/write or read-only access to the DB cluster. You can also use
        *         DB proxy endpoints to access a DB proxy through a different VPC than the proxy's default VPC.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateDBProxyEndpointCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateDBProxyEndpointCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateDBProxyEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBProxyEndpointCommandInput} for command's `input` shape.
        * @see {@link CreateDBProxyEndpointCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateDBProxyEndpointCommand extends $Command<CreateDBProxyEndpointCommandInput, CreateDBProxyEndpointCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateDBProxyEndpointCommandInput;
            constructor(input: CreateDBProxyEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBProxyEndpointCommandInput, CreateDBProxyEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBSecurityGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDBSecurityGroupMessage, CreateDBSecurityGroupResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateDBSecurityGroupCommandInput extends CreateDBSecurityGroupMessage {
    }
    export interface CreateDBSecurityGroupCommandOutput extends CreateDBSecurityGroupResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new DB security group. DB security groups control access to a DB instance.</p>
        *         <note>
        *             <p>A DB security group controls access to EC2-Classic DB instances that are not in a VPC.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateDBSecurityGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateDBSecurityGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateDBSecurityGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBSecurityGroupCommandInput} for command's `input` shape.
        * @see {@link CreateDBSecurityGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateDBSecurityGroupCommand extends $Command<CreateDBSecurityGroupCommandInput, CreateDBSecurityGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateDBSecurityGroupCommandInput;
            constructor(input: CreateDBSecurityGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBSecurityGroupCommandInput, CreateDBSecurityGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDBSnapshotMessage, CreateDBSnapshotResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateDBSnapshotCommandInput extends CreateDBSnapshotMessage {
    }
    export interface CreateDBSnapshotCommandOutput extends CreateDBSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Creates a snapshot of a DB instance. The source DB instance must be in the <code>available</code> or
        *                 <code>storage-optimization</code> state.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateDBSnapshotCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateDBSnapshotCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateDBSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBSnapshotCommandInput} for command's `input` shape.
        * @see {@link CreateDBSnapshotCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateDBSnapshotCommand extends $Command<CreateDBSnapshotCommandInput, CreateDBSnapshotCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateDBSnapshotCommandInput;
            constructor(input: CreateDBSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBSnapshotCommandInput, CreateDBSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBSubnetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDBSubnetGroupMessage, CreateDBSubnetGroupResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateDBSubnetGroupCommandInput extends CreateDBSubnetGroupMessage {
    }
    export interface CreateDBSubnetGroupCommandOutput extends CreateDBSubnetGroupResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Web Services Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateDBSubnetGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateDBSubnetGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateDBSubnetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDBSubnetGroupCommandInput} for command's `input` shape.
        * @see {@link CreateDBSubnetGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateDBSubnetGroupCommand extends $Command<CreateDBSubnetGroupCommandInput, CreateDBSubnetGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateDBSubnetGroupCommandInput;
            constructor(input: CreateDBSubnetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDBSubnetGroupCommandInput, CreateDBSubnetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateEventSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateEventSubscriptionMessage, CreateEventSubscriptionResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateEventSubscriptionCommandInput extends CreateEventSubscriptionMessage {
    }
    export interface CreateEventSubscriptionCommandOutput extends CreateEventSubscriptionResult, __MetadataBearer {
    }
    /**
        * <p>Creates an RDS event notification subscription. This action requires a topic Amazon
        *             Resource Name (ARN) created by either the RDS console, the SNS console, or the SNS API.
        *             To obtain an ARN with SNS, you must create a topic in Amazon SNS and subscribe to the
        *             topic. The ARN is displayed in the SNS console.</p>
        *         <p>You can specify the type of source (<code>SourceType</code>) that you want to be
        *             notified of and provide a list of RDS sources (<code>SourceIds</code>) that triggers the
        *             events. You can also provide a list of event categories (<code>EventCategories</code>)
        *             for events that you want to be notified of. For example, you can specify
        *                 <code>SourceType</code> = <code>db-instance</code>, <code>SourceIds</code> =
        *                 <code>mydbinstance1</code>, <code>mydbinstance2</code> and
        *                 <code>EventCategories</code> = <code>Availability</code>,
        *             <code>Backup</code>.</p>
        *         <p>If you specify both the <code>SourceType</code> and <code>SourceIds</code>, such as <code>SourceType</code> = <code>db-instance</code>
        *           and <code>SourceIds</code> = <code>myDBInstance1</code>, you are notified of all the <code>db-instance</code> events for
        *           the specified source. If you specify a <code>SourceType</code> but do not specify <code>SourceIds</code>,
        *           you receive notice of the events for that source type for all your RDS sources. If you
        *           don't specify either the SourceType or the <code>SourceIds</code>, you are notified of events
        *           generated from all RDS sources belonging to your customer account.</p>
        *         <note>
        *             <p>RDS event notification is only available for unencrypted SNS topics. If you specify an
        *               encrypted SNS topic, event notifications aren't sent for the topic.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateEventSubscriptionCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateEventSubscriptionCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateEventSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateEventSubscriptionCommandInput} for command's `input` shape.
        * @see {@link CreateEventSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateEventSubscriptionCommand extends $Command<CreateEventSubscriptionCommandInput, CreateEventSubscriptionCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateEventSubscriptionCommandInput;
            constructor(input: CreateEventSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateEventSubscriptionCommandInput, CreateEventSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateGlobalClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateGlobalClusterMessage, CreateGlobalClusterResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateGlobalClusterCommandInput extends CreateGlobalClusterMessage {
    }
    export interface CreateGlobalClusterCommandOutput extends CreateGlobalClusterResult, __MetadataBearer {
    }
    /**
        * <p>Creates an Aurora global database
        *         spread across multiple Amazon Web Services Regions. The global database
        *         contains a single primary cluster with read-write capability,
        *         and a read-only secondary cluster that receives
        *         data from the primary cluster through high-speed replication
        *         performed by the Aurora storage subsystem.</p>
        *         <p>You can create a global database that is initially empty, and then
        *         add a primary cluster and a secondary cluster to it.
        *         Or you can specify an existing Aurora cluster during the create operation,
        *         and this cluster becomes the primary cluster of the global database.</p>
        *         <note>
        *             <p>This action only applies to Aurora DB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateGlobalClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateGlobalClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateGlobalClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateGlobalClusterCommandInput} for command's `input` shape.
        * @see {@link CreateGlobalClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateGlobalClusterCommand extends $Command<CreateGlobalClusterCommandInput, CreateGlobalClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateGlobalClusterCommandInput;
            constructor(input: CreateGlobalClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGlobalClusterCommandInput, CreateGlobalClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateOptionGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateOptionGroupMessage, CreateOptionGroupResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface CreateOptionGroupCommandInput extends CreateOptionGroupMessage {
    }
    export interface CreateOptionGroupCommandOutput extends CreateOptionGroupResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new option group. You can create up to 20 option groups.</p>
        *         <p>This command doesn't apply to RDS Custom.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, CreateOptionGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, CreateOptionGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new CreateOptionGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateOptionGroupCommandInput} for command's `input` shape.
        * @see {@link CreateOptionGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class CreateOptionGroupCommand extends $Command<CreateOptionGroupCommandInput, CreateOptionGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: CreateOptionGroupCommandInput;
            constructor(input: CreateOptionGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateOptionGroupCommandInput, CreateOptionGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteCustomDBEngineVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBEngineVersion, DeleteCustomDBEngineVersionMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteCustomDBEngineVersionCommandInput extends DeleteCustomDBEngineVersionMessage {
    }
    export interface DeleteCustomDBEngineVersionCommandOutput extends DBEngineVersion, __MetadataBearer {
    }
    /**
        * <p>Deletes a custom engine version. To run this command, make sure you meet the following prerequisites:</p>
        *         <ul>
        *             <li>
        *                 <p>The CEV must not be the default for RDS Custom. If it is, change the default
        *                 before running this command.</p>
        *             </li>
        *             <li>
        *                 <p>The CEV must not be associated with an RDS Custom DB instance, RDS Custom instance snapshot,
        *                 or automated backup of your RDS Custom instance.</p>
        *             </li>
        *          </ul>
        *         <p>Typically, deletion takes a few minutes.</p>
        *         <note>
        *             <p>The MediaImport service that imports files from Amazon S3 to create CEVs isn't integrated with
        *             Amazon Web Services CloudTrail. If you turn on data logging for Amazon RDS in CloudTrail, calls to the
        *             <code>DeleteCustomDbEngineVersion</code> event aren't logged. However, you might see calls from the
        *             API gateway that accesses your Amazon S3 bucket. These calls originate from the MediaImport service for
        *             the <code>DeleteCustomDbEngineVersion</code> event.</p>
        *         </note>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.delete">
        *             Deleting a CEV</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteCustomDBEngineVersionCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteCustomDBEngineVersionCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteCustomDBEngineVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCustomDBEngineVersionCommandInput} for command's `input` shape.
        * @see {@link DeleteCustomDBEngineVersionCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteCustomDBEngineVersionCommand extends $Command<DeleteCustomDBEngineVersionCommandInput, DeleteCustomDBEngineVersionCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteCustomDBEngineVersionCommandInput;
            constructor(input: DeleteCustomDBEngineVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCustomDBEngineVersionCommandInput, DeleteCustomDBEngineVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDBClusterMessage, DeleteDBClusterResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteDBClusterCommandInput extends DeleteDBClusterMessage {
    }
    export interface DeleteDBClusterCommandOutput extends DeleteDBClusterResult, __MetadataBearer {
    }
    /**
        * <p>The DeleteDBCluster action deletes a previously provisioned DB cluster.
        *           When you delete a DB cluster, all automated backups for that DB cluster are deleted and can't be recovered.
        *           Manual DB cluster snapshots of the specified DB cluster are not deleted.</p>
        *         <p>For more information on Amazon Aurora, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteDBClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteDBClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBClusterCommandInput} for command's `input` shape.
        * @see {@link DeleteDBClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteDBClusterCommand extends $Command<DeleteDBClusterCommandInput, DeleteDBClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteDBClusterCommandInput;
            constructor(input: DeleteDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBClusterCommandInput, DeleteDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBClusterEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBClusterEndpoint, DeleteDBClusterEndpointMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteDBClusterEndpointCommandInput extends DeleteDBClusterEndpointMessage {
    }
    export interface DeleteDBClusterEndpointCommandOutput extends DBClusterEndpoint, __MetadataBearer {
    }
    /**
        * <p>Deletes a custom endpoint and removes it from an Amazon Aurora DB cluster.</p>
        *         <note>
        *             <p>This action only applies to Aurora DB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteDBClusterEndpointCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteDBClusterEndpointCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteDBClusterEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBClusterEndpointCommandInput} for command's `input` shape.
        * @see {@link DeleteDBClusterEndpointCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteDBClusterEndpointCommand extends $Command<DeleteDBClusterEndpointCommandInput, DeleteDBClusterEndpointCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteDBClusterEndpointCommandInput;
            constructor(input: DeleteDBClusterEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBClusterEndpointCommandInput, DeleteDBClusterEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBClusterParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDBClusterParameterGroupMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteDBClusterParameterGroupCommandInput extends DeleteDBClusterParameterGroupMessage {
    }
    export interface DeleteDBClusterParameterGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a specified DB cluster parameter group. The DB cluster parameter group to be deleted can't be associated with any DB clusters.</p>
        *         <p>For more information on Amazon Aurora, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteDBClusterParameterGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteDBClusterParameterGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteDBClusterParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBClusterParameterGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteDBClusterParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteDBClusterParameterGroupCommand extends $Command<DeleteDBClusterParameterGroupCommandInput, DeleteDBClusterParameterGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteDBClusterParameterGroupCommandInput;
            constructor(input: DeleteDBClusterParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBClusterParameterGroupCommandInput, DeleteDBClusterParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBClusterSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDBClusterSnapshotMessage, DeleteDBClusterSnapshotResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteDBClusterSnapshotCommandInput extends DeleteDBClusterSnapshotMessage {
    }
    export interface DeleteDBClusterSnapshotCommandOutput extends DeleteDBClusterSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a DB cluster snapshot. If the snapshot is being copied, the copy operation is terminated.</p>
        *         <note>
        *             <p>The DB cluster snapshot must be in the <code>available</code> state to be
        *             deleted.</p>
        *         </note>
        *         <p>For more information on Amazon Aurora, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteDBClusterSnapshotCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteDBClusterSnapshotCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteDBClusterSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBClusterSnapshotCommandInput} for command's `input` shape.
        * @see {@link DeleteDBClusterSnapshotCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteDBClusterSnapshotCommand extends $Command<DeleteDBClusterSnapshotCommandInput, DeleteDBClusterSnapshotCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteDBClusterSnapshotCommandInput;
            constructor(input: DeleteDBClusterSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBClusterSnapshotCommandInput, DeleteDBClusterSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBInstanceAutomatedBackupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDBInstanceAutomatedBackupMessage, DeleteDBInstanceAutomatedBackupResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteDBInstanceAutomatedBackupCommandInput extends DeleteDBInstanceAutomatedBackupMessage {
    }
    export interface DeleteDBInstanceAutomatedBackupCommandOutput extends DeleteDBInstanceAutomatedBackupResult, __MetadataBearer {
    }
    /**
        * <p>Deletes automated backups using the <code>DbiResourceId</code> value of the source DB instance or the Amazon Resource Name (ARN) of the automated backups.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteDBInstanceAutomatedBackupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteDBInstanceAutomatedBackupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteDBInstanceAutomatedBackupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBInstanceAutomatedBackupCommandInput} for command's `input` shape.
        * @see {@link DeleteDBInstanceAutomatedBackupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteDBInstanceAutomatedBackupCommand extends $Command<DeleteDBInstanceAutomatedBackupCommandInput, DeleteDBInstanceAutomatedBackupCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteDBInstanceAutomatedBackupCommandInput;
            constructor(input: DeleteDBInstanceAutomatedBackupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBInstanceAutomatedBackupCommandInput, DeleteDBInstanceAutomatedBackupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDBInstanceMessage, DeleteDBInstanceResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteDBInstanceCommandInput extends DeleteDBInstanceMessage {
    }
    export interface DeleteDBInstanceCommandOutput extends DeleteDBInstanceResult, __MetadataBearer {
    }
    /**
        * <p>The DeleteDBInstance action deletes a previously provisioned DB instance.
        *           When you delete a DB instance, all automated backups for that instance are deleted and can't be recovered.
        *           Manual DB snapshots of the DB instance to be deleted by <code>DeleteDBInstance</code> are not deleted.</p>
        *         <p>If you request a final DB snapshot
        *         the status of the Amazon RDS DB instance is <code>deleting</code> until the DB snapshot is created. The API action <code>DescribeDBInstance</code>
        *         is used to monitor the status of this operation. The action can't be canceled or reverted once submitted.</p>
        *         <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>,
        *           or <code>incompatible-network</code>, you can only delete it when you skip creation of the final snapshot with the <code>SkipFinalSnapshot</code> parameter.</p>
        *         <p>If the specified DB instance is part of an Amazon Aurora DB cluster, you can't delete the DB instance if both of the following
        *       conditions are true:</p>
        *         <ul>
        *             <li>
        *                 <p>The DB cluster is a read replica of another Amazon Aurora DB cluster.</p>
        *             </li>
        *             <li>
        *                 <p>The DB instance is the only instance in the DB cluster.</p>
        *             </li>
        *          </ul>
        *         <p>To delete a DB instance in this case, first call the
        *                 <code>PromoteReadReplicaDBCluster</code> API action to promote the DB cluster so
        *             it's no longer a read replica. After the promotion completes, then call the
        *                 <code>DeleteDBInstance</code> API action to delete the final instance in the DB
        *             cluster.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteDBInstanceCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteDBInstanceCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteDBInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBInstanceCommandInput} for command's `input` shape.
        * @see {@link DeleteDBInstanceCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteDBInstanceCommand extends $Command<DeleteDBInstanceCommandInput, DeleteDBInstanceCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteDBInstanceCommandInput;
            constructor(input: DeleteDBInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBInstanceCommandInput, DeleteDBInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDBParameterGroupMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteDBParameterGroupCommandInput extends DeleteDBParameterGroupMessage {
    }
    export interface DeleteDBParameterGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a specified DB parameter group. The DB parameter group to be deleted can't be associated with any DB instances.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteDBParameterGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteDBParameterGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteDBParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBParameterGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteDBParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteDBParameterGroupCommand extends $Command<DeleteDBParameterGroupCommandInput, DeleteDBParameterGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteDBParameterGroupCommandInput;
            constructor(input: DeleteDBParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBParameterGroupCommandInput, DeleteDBParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBProxyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDBProxyRequest, DeleteDBProxyResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteDBProxyCommandInput extends DeleteDBProxyRequest {
    }
    export interface DeleteDBProxyCommandOutput extends DeleteDBProxyResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an existing DB proxy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteDBProxyCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteDBProxyCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteDBProxyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBProxyCommandInput} for command's `input` shape.
        * @see {@link DeleteDBProxyCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteDBProxyCommand extends $Command<DeleteDBProxyCommandInput, DeleteDBProxyCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteDBProxyCommandInput;
            constructor(input: DeleteDBProxyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBProxyCommandInput, DeleteDBProxyCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBProxyEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDBProxyEndpointRequest, DeleteDBProxyEndpointResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteDBProxyEndpointCommandInput extends DeleteDBProxyEndpointRequest {
    }
    export interface DeleteDBProxyEndpointCommandOutput extends DeleteDBProxyEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a <code>DBProxyEndpoint</code>. Doing so removes the ability to access the DB proxy using the
        *         endpoint that you defined. The endpoint that you delete might have provided capabilities such as read/write
        *         or read-only operations, or using a different VPC than the DB proxy's default VPC.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteDBProxyEndpointCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteDBProxyEndpointCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteDBProxyEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBProxyEndpointCommandInput} for command's `input` shape.
        * @see {@link DeleteDBProxyEndpointCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteDBProxyEndpointCommand extends $Command<DeleteDBProxyEndpointCommandInput, DeleteDBProxyEndpointCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteDBProxyEndpointCommandInput;
            constructor(input: DeleteDBProxyEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBProxyEndpointCommandInput, DeleteDBProxyEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBSecurityGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDBSecurityGroupMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteDBSecurityGroupCommandInput extends DeleteDBSecurityGroupMessage {
    }
    export interface DeleteDBSecurityGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a DB security group.</p>
        *         <note>
        *             <p>The specified DB security group must not be associated with any DB instances.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteDBSecurityGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteDBSecurityGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteDBSecurityGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBSecurityGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteDBSecurityGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteDBSecurityGroupCommand extends $Command<DeleteDBSecurityGroupCommandInput, DeleteDBSecurityGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteDBSecurityGroupCommandInput;
            constructor(input: DeleteDBSecurityGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBSecurityGroupCommandInput, DeleteDBSecurityGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDBSnapshotMessage, DeleteDBSnapshotResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteDBSnapshotCommandInput extends DeleteDBSnapshotMessage {
    }
    export interface DeleteDBSnapshotCommandOutput extends DeleteDBSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a DB snapshot. If the snapshot is being copied, the copy operation is
        *             terminated.</p>
        *         <note>
        *             <p>The DB snapshot must be in the <code>available</code> state to be deleted.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteDBSnapshotCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteDBSnapshotCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteDBSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBSnapshotCommandInput} for command's `input` shape.
        * @see {@link DeleteDBSnapshotCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteDBSnapshotCommand extends $Command<DeleteDBSnapshotCommandInput, DeleteDBSnapshotCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteDBSnapshotCommandInput;
            constructor(input: DeleteDBSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBSnapshotCommandInput, DeleteDBSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBSubnetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDBSubnetGroupMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteDBSubnetGroupCommandInput extends DeleteDBSubnetGroupMessage {
    }
    export interface DeleteDBSubnetGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a DB subnet group.</p>
        *         <note>
        *             <p>The specified database subnet group must not be associated with any DB instances.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteDBSubnetGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteDBSubnetGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteDBSubnetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDBSubnetGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteDBSubnetGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteDBSubnetGroupCommand extends $Command<DeleteDBSubnetGroupCommandInput, DeleteDBSubnetGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteDBSubnetGroupCommandInput;
            constructor(input: DeleteDBSubnetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDBSubnetGroupCommandInput, DeleteDBSubnetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteEventSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteEventSubscriptionMessage, DeleteEventSubscriptionResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteEventSubscriptionCommandInput extends DeleteEventSubscriptionMessage {
    }
    export interface DeleteEventSubscriptionCommandOutput extends DeleteEventSubscriptionResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an RDS event notification subscription.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteEventSubscriptionCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteEventSubscriptionCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteEventSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteEventSubscriptionCommandInput} for command's `input` shape.
        * @see {@link DeleteEventSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteEventSubscriptionCommand extends $Command<DeleteEventSubscriptionCommandInput, DeleteEventSubscriptionCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteEventSubscriptionCommandInput;
            constructor(input: DeleteEventSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteEventSubscriptionCommandInput, DeleteEventSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteGlobalClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteGlobalClusterMessage, DeleteGlobalClusterResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteGlobalClusterCommandInput extends DeleteGlobalClusterMessage {
    }
    export interface DeleteGlobalClusterCommandOutput extends DeleteGlobalClusterResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a global database cluster. The primary and secondary clusters must already be detached or
        *         destroyed first.</p>
        *         <note>
        *             <p>This action only applies to Aurora DB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteGlobalClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteGlobalClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteGlobalClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteGlobalClusterCommandInput} for command's `input` shape.
        * @see {@link DeleteGlobalClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteGlobalClusterCommand extends $Command<DeleteGlobalClusterCommandInput, DeleteGlobalClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteGlobalClusterCommandInput;
            constructor(input: DeleteGlobalClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteGlobalClusterCommandInput, DeleteGlobalClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteOptionGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteOptionGroupMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeleteOptionGroupCommandInput extends DeleteOptionGroupMessage {
    }
    export interface DeleteOptionGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an existing option group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeleteOptionGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeleteOptionGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeleteOptionGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteOptionGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteOptionGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeleteOptionGroupCommand extends $Command<DeleteOptionGroupCommandInput, DeleteOptionGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeleteOptionGroupCommandInput;
            constructor(input: DeleteOptionGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteOptionGroupCommandInput, DeleteOptionGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeregisterDBProxyTargetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeregisterDBProxyTargetsRequest, DeregisterDBProxyTargetsResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DeregisterDBProxyTargetsCommandInput extends DeregisterDBProxyTargetsRequest {
    }
    export interface DeregisterDBProxyTargetsCommandOutput extends DeregisterDBProxyTargetsResponse, __MetadataBearer {
    }
    /**
        * <p>Remove the association between one or more <code>DBProxyTarget</code> data structures and a <code>DBProxyTargetGroup</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DeregisterDBProxyTargetsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DeregisterDBProxyTargetsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DeregisterDBProxyTargetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterDBProxyTargetsCommandInput} for command's `input` shape.
        * @see {@link DeregisterDBProxyTargetsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DeregisterDBProxyTargetsCommand extends $Command<DeregisterDBProxyTargetsCommandInput, DeregisterDBProxyTargetsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DeregisterDBProxyTargetsCommandInput;
            constructor(input: DeregisterDBProxyTargetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterDBProxyTargetsCommandInput, DeregisterDBProxyTargetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeAccountAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AccountAttributesMessage, DescribeAccountAttributesMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeAccountAttributesCommandInput extends DescribeAccountAttributesMessage {
    }
    export interface DescribeAccountAttributesCommandOutput extends AccountAttributesMessage, __MetadataBearer {
    }
    /**
        * <p>Lists all of the attributes for a customer account. The attributes include Amazon RDS quotas for the account, such as the number of DB instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value.</p>
        *         <p>This command doesn't take any parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeAccountAttributesCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeAccountAttributesCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeAccountAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAccountAttributesCommandInput} for command's `input` shape.
        * @see {@link DescribeAccountAttributesCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeAccountAttributesCommand extends $Command<DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeAccountAttributesCommandInput;
            constructor(input: DescribeAccountAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeCertificatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CertificateMessage, DescribeCertificatesMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeCertificatesCommandInput extends DescribeCertificatesMessage {
    }
    export interface DescribeCertificatesCommandOutput extends CertificateMessage, __MetadataBearer {
    }
    /**
        * <p>Lists the set of CA certificates provided by Amazon RDS for this Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeCertificatesCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeCertificatesCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeCertificatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeCertificatesCommandInput} for command's `input` shape.
        * @see {@link DescribeCertificatesCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeCertificatesCommand extends $Command<DescribeCertificatesCommandInput, DescribeCertificatesCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeCertificatesCommandInput;
            constructor(input: DescribeCertificatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeCertificatesCommandInput, DescribeCertificatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterBacktracksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBClusterBacktrackMessage, DescribeDBClusterBacktracksMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBClusterBacktracksCommandInput extends DescribeDBClusterBacktracksMessage {
    }
    export interface DescribeDBClusterBacktracksCommandOutput extends DBClusterBacktrackMessage, __MetadataBearer {
    }
    /**
        * <p>Returns information about backtracks for a DB cluster.</p>
        *         <p>For more information on Amazon Aurora, see
        *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *                 What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <note>
        *             <p>This action only applies to Aurora MySQL DB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBClusterBacktracksCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBClusterBacktracksCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBClusterBacktracksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBClusterBacktracksCommandInput} for command's `input` shape.
        * @see {@link DescribeDBClusterBacktracksCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBClusterBacktracksCommand extends $Command<DescribeDBClusterBacktracksCommandInput, DescribeDBClusterBacktracksCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBClusterBacktracksCommandInput;
            constructor(input: DescribeDBClusterBacktracksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBClusterBacktracksCommandInput, DescribeDBClusterBacktracksCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterEndpointsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBClusterEndpointMessage, DescribeDBClusterEndpointsMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBClusterEndpointsCommandInput extends DescribeDBClusterEndpointsMessage {
    }
    export interface DescribeDBClusterEndpointsCommandOutput extends DBClusterEndpointMessage, __MetadataBearer {
    }
    /**
        * <p>Returns information about endpoints for an Amazon Aurora DB cluster.</p>
        *         <note>
        *             <p>This action only applies to Aurora DB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBClusterEndpointsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBClusterEndpointsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBClusterEndpointsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBClusterEndpointsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBClusterEndpointsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBClusterEndpointsCommand extends $Command<DescribeDBClusterEndpointsCommandInput, DescribeDBClusterEndpointsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBClusterEndpointsCommandInput;
            constructor(input: DescribeDBClusterEndpointsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBClusterEndpointsCommandInput, DescribeDBClusterEndpointsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterParameterGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBClusterParameterGroupsMessage, DescribeDBClusterParameterGroupsMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBClusterParameterGroupsCommandInput extends DescribeDBClusterParameterGroupsMessage {
    }
    export interface DescribeDBClusterParameterGroupsCommandOutput extends DBClusterParameterGroupsMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of <code>DBClusterParameterGroup</code> descriptions. If a
        *             <code>DBClusterParameterGroupName</code> parameter is specified,
        *             the list will contain only the description of the specified DB cluster parameter group.</p>
        *         <p>For more information on Amazon Aurora, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBClusterParameterGroupsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBClusterParameterGroupsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBClusterParameterGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBClusterParameterGroupsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBClusterParameterGroupsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBClusterParameterGroupsCommand extends $Command<DescribeDBClusterParameterGroupsCommandInput, DescribeDBClusterParameterGroupsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBClusterParameterGroupsCommandInput;
            constructor(input: DescribeDBClusterParameterGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBClusterParameterGroupsCommandInput, DescribeDBClusterParameterGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterParametersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBClusterParameterGroupDetails, DescribeDBClusterParametersMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBClusterParametersCommandInput extends DescribeDBClusterParametersMessage {
    }
    export interface DescribeDBClusterParametersCommandOutput extends DBClusterParameterGroupDetails, __MetadataBearer {
    }
    /**
        * <p>Returns the detailed parameter list for a particular DB cluster parameter group.</p>
        *         <p>For more information on Amazon Aurora, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBClusterParametersCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBClusterParametersCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBClusterParametersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBClusterParametersCommandInput} for command's `input` shape.
        * @see {@link DescribeDBClusterParametersCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBClusterParametersCommand extends $Command<DescribeDBClusterParametersCommandInput, DescribeDBClusterParametersCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBClusterParametersCommandInput;
            constructor(input: DescribeDBClusterParametersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBClusterParametersCommandInput, DescribeDBClusterParametersCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClustersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBClusterMessage, DescribeDBClustersMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBClustersCommandInput extends DescribeDBClustersMessage {
    }
    export interface DescribeDBClustersCommandOutput extends DBClusterMessage, __MetadataBearer {
    }
    /**
        * <p>Returns information about Amazon Aurora DB clusters and Multi-AZ DB clusters. This API supports pagination.</p>
        *         <p>For more information on Amazon Aurora DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
        *         <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBClustersCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBClustersCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBClustersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBClustersCommandInput} for command's `input` shape.
        * @see {@link DescribeDBClustersCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBClustersCommand extends $Command<DescribeDBClustersCommandInput, DescribeDBClustersCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBClustersCommandInput;
            constructor(input: DescribeDBClustersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBClustersCommandInput, DescribeDBClustersCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterSnapshotAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDBClusterSnapshotAttributesMessage, DescribeDBClusterSnapshotAttributesResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBClusterSnapshotAttributesCommandInput extends DescribeDBClusterSnapshotAttributesMessage {
    }
    export interface DescribeDBClusterSnapshotAttributesCommandOutput extends DescribeDBClusterSnapshotAttributesResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of DB cluster snapshot attribute names and values for a manual DB cluster snapshot.</p>
        *         <p>When sharing snapshots with other Amazon Web Services accounts, <code>DescribeDBClusterSnapshotAttributes</code>
        *             returns the <code>restore</code> attribute and a list of IDs for the Amazon Web Services accounts that are
        *             authorized to copy or restore the manual DB cluster snapshot. If <code>all</code> is included in the list of
        *             values for the <code>restore</code> attribute, then the manual DB cluster snapshot is public and
        *             can be copied or restored by all Amazon Web Services accounts.</p>
        *         <p>To add or remove access for an Amazon Web Services account to copy or restore a manual DB cluster snapshot, or to make the
        *             manual DB cluster snapshot public or private, use the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBClusterSnapshotAttributesCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBClusterSnapshotAttributesCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBClusterSnapshotAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBClusterSnapshotAttributesCommandInput} for command's `input` shape.
        * @see {@link DescribeDBClusterSnapshotAttributesCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBClusterSnapshotAttributesCommand extends $Command<DescribeDBClusterSnapshotAttributesCommandInput, DescribeDBClusterSnapshotAttributesCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBClusterSnapshotAttributesCommandInput;
            constructor(input: DescribeDBClusterSnapshotAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBClusterSnapshotAttributesCommandInput, DescribeDBClusterSnapshotAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterSnapshotsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBClusterSnapshotMessage, DescribeDBClusterSnapshotsMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBClusterSnapshotsCommandInput extends DescribeDBClusterSnapshotsMessage {
    }
    export interface DescribeDBClusterSnapshotsCommandOutput extends DBClusterSnapshotMessage, __MetadataBearer {
    }
    /**
        * <p>Returns information about DB cluster snapshots. This API action supports pagination.</p>
        *         <p>For more information on Amazon Aurora DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBClusterSnapshotsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBClusterSnapshotsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBClusterSnapshotsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBClusterSnapshotsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBClusterSnapshotsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBClusterSnapshotsCommand extends $Command<DescribeDBClusterSnapshotsCommandInput, DescribeDBClusterSnapshotsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBClusterSnapshotsCommandInput;
            constructor(input: DescribeDBClusterSnapshotsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBClusterSnapshotsCommandInput, DescribeDBClusterSnapshotsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBEngineVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBEngineVersionMessage, DescribeDBEngineVersionsMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBEngineVersionsCommandInput extends DescribeDBEngineVersionsMessage {
    }
    export interface DescribeDBEngineVersionsCommandOutput extends DBEngineVersionMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the available DB engines.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBEngineVersionsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBEngineVersionsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBEngineVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBEngineVersionsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBEngineVersionsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBEngineVersionsCommand extends $Command<DescribeDBEngineVersionsCommandInput, DescribeDBEngineVersionsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBEngineVersionsCommandInput;
            constructor(input: DescribeDBEngineVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBEngineVersionsCommandInput, DescribeDBEngineVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBInstanceAutomatedBackupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBInstanceAutomatedBackupMessage, DescribeDBInstanceAutomatedBackupsMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBInstanceAutomatedBackupsCommandInput extends DescribeDBInstanceAutomatedBackupsMessage {
    }
    export interface DescribeDBInstanceAutomatedBackupsCommandOutput extends DBInstanceAutomatedBackupMessage, __MetadataBearer {
    }
    /**
        * <p>Displays backups for both current and deleted
        *             instances. For example, use this operation to
        *             find details about automated backups for previously deleted instances. Current instances
        *             with retention periods greater than zero (0) are returned for both the
        *             <code>DescribeDBInstanceAutomatedBackups</code> and
        *             <code>DescribeDBInstances</code> operations.</p>
        *         <p>All parameters are optional.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBInstanceAutomatedBackupsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBInstanceAutomatedBackupsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBInstanceAutomatedBackupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBInstanceAutomatedBackupsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBInstanceAutomatedBackupsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBInstanceAutomatedBackupsCommand extends $Command<DescribeDBInstanceAutomatedBackupsCommandInput, DescribeDBInstanceAutomatedBackupsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBInstanceAutomatedBackupsCommandInput;
            constructor(input: DescribeDBInstanceAutomatedBackupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBInstanceAutomatedBackupsCommandInput, DescribeDBInstanceAutomatedBackupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBInstancesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBInstanceMessage, DescribeDBInstancesMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBInstancesCommandInput extends DescribeDBInstancesMessage {
    }
    export interface DescribeDBInstancesCommandOutput extends DBInstanceMessage, __MetadataBearer {
    }
    /**
        * <p>Returns information about provisioned RDS instances. This API supports pagination.</p>
        *         <note>
        *             <p>This operation can also return information for Amazon Neptune DB instances and Amazon DocumentDB instances.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBInstancesCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBInstancesCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBInstancesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBInstancesCommandInput} for command's `input` shape.
        * @see {@link DescribeDBInstancesCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBInstancesCommand extends $Command<DescribeDBInstancesCommandInput, DescribeDBInstancesCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBInstancesCommandInput;
            constructor(input: DescribeDBInstancesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBInstancesCommandInput, DescribeDBInstancesCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBLogFilesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDBLogFilesMessage, DescribeDBLogFilesResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBLogFilesCommandInput extends DescribeDBLogFilesMessage {
    }
    export interface DescribeDBLogFilesCommandOutput extends DescribeDBLogFilesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of DB log files for the DB instance.</p>
        *         <p>This command doesn't apply to RDS Custom.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBLogFilesCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBLogFilesCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBLogFilesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBLogFilesCommandInput} for command's `input` shape.
        * @see {@link DescribeDBLogFilesCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBLogFilesCommand extends $Command<DescribeDBLogFilesCommandInput, DescribeDBLogFilesCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBLogFilesCommandInput;
            constructor(input: DescribeDBLogFilesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBLogFilesCommandInput, DescribeDBLogFilesCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBParameterGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBParameterGroupsMessage, DescribeDBParameterGroupsMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBParameterGroupsCommandInput extends DescribeDBParameterGroupsMessage {
    }
    export interface DescribeDBParameterGroupsCommandOutput extends DBParameterGroupsMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of <code>DBParameterGroup</code> descriptions. If a <code>DBParameterGroupName</code> is specified,
        *             the list will contain only the description of the specified DB parameter group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBParameterGroupsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBParameterGroupsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBParameterGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBParameterGroupsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBParameterGroupsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBParameterGroupsCommand extends $Command<DescribeDBParameterGroupsCommandInput, DescribeDBParameterGroupsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBParameterGroupsCommandInput;
            constructor(input: DescribeDBParameterGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBParameterGroupsCommandInput, DescribeDBParameterGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBParametersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBParameterGroupDetails, DescribeDBParametersMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBParametersCommandInput extends DescribeDBParametersMessage {
    }
    export interface DescribeDBParametersCommandOutput extends DBParameterGroupDetails, __MetadataBearer {
    }
    /**
        * <p>Returns the detailed parameter list for a particular DB parameter group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBParametersCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBParametersCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBParametersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBParametersCommandInput} for command's `input` shape.
        * @see {@link DescribeDBParametersCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBParametersCommand extends $Command<DescribeDBParametersCommandInput, DescribeDBParametersCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBParametersCommandInput;
            constructor(input: DescribeDBParametersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBParametersCommandInput, DescribeDBParametersCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBProxiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDBProxiesRequest, DescribeDBProxiesResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBProxiesCommandInput extends DescribeDBProxiesRequest {
    }
    export interface DescribeDBProxiesCommandOutput extends DescribeDBProxiesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about DB proxies.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBProxiesCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBProxiesCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBProxiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBProxiesCommandInput} for command's `input` shape.
        * @see {@link DescribeDBProxiesCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBProxiesCommand extends $Command<DescribeDBProxiesCommandInput, DescribeDBProxiesCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBProxiesCommandInput;
            constructor(input: DescribeDBProxiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBProxiesCommandInput, DescribeDBProxiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBProxyEndpointsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDBProxyEndpointsRequest, DescribeDBProxyEndpointsResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBProxyEndpointsCommandInput extends DescribeDBProxyEndpointsRequest {
    }
    export interface DescribeDBProxyEndpointsCommandOutput extends DescribeDBProxyEndpointsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about DB proxy endpoints.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBProxyEndpointsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBProxyEndpointsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBProxyEndpointsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBProxyEndpointsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBProxyEndpointsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBProxyEndpointsCommand extends $Command<DescribeDBProxyEndpointsCommandInput, DescribeDBProxyEndpointsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBProxyEndpointsCommandInput;
            constructor(input: DescribeDBProxyEndpointsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBProxyEndpointsCommandInput, DescribeDBProxyEndpointsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBProxyTargetGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDBProxyTargetGroupsRequest, DescribeDBProxyTargetGroupsResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBProxyTargetGroupsCommandInput extends DescribeDBProxyTargetGroupsRequest {
    }
    export interface DescribeDBProxyTargetGroupsCommandOutput extends DescribeDBProxyTargetGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about DB proxy target groups, represented by <code>DBProxyTargetGroup</code> data structures.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBProxyTargetGroupsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBProxyTargetGroupsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBProxyTargetGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBProxyTargetGroupsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBProxyTargetGroupsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBProxyTargetGroupsCommand extends $Command<DescribeDBProxyTargetGroupsCommandInput, DescribeDBProxyTargetGroupsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBProxyTargetGroupsCommandInput;
            constructor(input: DescribeDBProxyTargetGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBProxyTargetGroupsCommandInput, DescribeDBProxyTargetGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBProxyTargetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDBProxyTargetsRequest, DescribeDBProxyTargetsResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBProxyTargetsCommandInput extends DescribeDBProxyTargetsRequest {
    }
    export interface DescribeDBProxyTargetsCommandOutput extends DescribeDBProxyTargetsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about <code>DBProxyTarget</code> objects. This API supports pagination.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBProxyTargetsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBProxyTargetsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBProxyTargetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBProxyTargetsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBProxyTargetsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBProxyTargetsCommand extends $Command<DescribeDBProxyTargetsCommandInput, DescribeDBProxyTargetsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBProxyTargetsCommandInput;
            constructor(input: DescribeDBProxyTargetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBProxyTargetsCommandInput, DescribeDBProxyTargetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBSecurityGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBSecurityGroupMessage, DescribeDBSecurityGroupsMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBSecurityGroupsCommandInput extends DescribeDBSecurityGroupsMessage {
    }
    export interface DescribeDBSecurityGroupsCommandOutput extends DBSecurityGroupMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of <code>DBSecurityGroup</code> descriptions. If a <code>DBSecurityGroupName</code> is specified,
        *             the list will contain only the descriptions of the specified DB security group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBSecurityGroupsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBSecurityGroupsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBSecurityGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBSecurityGroupsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBSecurityGroupsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBSecurityGroupsCommand extends $Command<DescribeDBSecurityGroupsCommandInput, DescribeDBSecurityGroupsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBSecurityGroupsCommandInput;
            constructor(input: DescribeDBSecurityGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBSecurityGroupsCommandInput, DescribeDBSecurityGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBSnapshotAttributesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDBSnapshotAttributesMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { DescribeDBSnapshotAttributesResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBSnapshotAttributesCommandInput extends DescribeDBSnapshotAttributesMessage {
    }
    export interface DescribeDBSnapshotAttributesCommandOutput extends DescribeDBSnapshotAttributesResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of DB snapshot attribute names and values for a manual DB snapshot.</p>
        *         <p>When sharing snapshots with other Amazon Web Services accounts, <code>DescribeDBSnapshotAttributes</code>
        *       returns the <code>restore</code> attribute and a list of IDs for the Amazon Web Services accounts that are
        *       authorized to copy or restore the manual DB snapshot. If <code>all</code> is included in the list of
        *       values for the <code>restore</code> attribute, then the manual DB snapshot is public and
        *       can be copied or restored by all Amazon Web Services accounts.</p>
        *         <p>To add or remove access for an Amazon Web Services account to copy or restore a manual DB snapshot, or to make the
        *       manual DB snapshot public or private, use the <code>ModifyDBSnapshotAttribute</code> API action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBSnapshotAttributesCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBSnapshotAttributesCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBSnapshotAttributesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBSnapshotAttributesCommandInput} for command's `input` shape.
        * @see {@link DescribeDBSnapshotAttributesCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBSnapshotAttributesCommand extends $Command<DescribeDBSnapshotAttributesCommandInput, DescribeDBSnapshotAttributesCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBSnapshotAttributesCommandInput;
            constructor(input: DescribeDBSnapshotAttributesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBSnapshotAttributesCommandInput, DescribeDBSnapshotAttributesCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBSnapshotsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBSnapshotMessage, DescribeDBSnapshotsMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBSnapshotsCommandInput extends DescribeDBSnapshotsMessage {
    }
    export interface DescribeDBSnapshotsCommandOutput extends DBSnapshotMessage, __MetadataBearer {
    }
    /**
        * <p>Returns information about DB snapshots. This API action supports pagination.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBSnapshotsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBSnapshotsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBSnapshotsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBSnapshotsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBSnapshotsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBSnapshotsCommand extends $Command<DescribeDBSnapshotsCommandInput, DescribeDBSnapshotsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBSnapshotsCommandInput;
            constructor(input: DescribeDBSnapshotsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBSnapshotsCommandInput, DescribeDBSnapshotsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBSubnetGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBSubnetGroupMessage, DescribeDBSubnetGroupsMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeDBSubnetGroupsCommandInput extends DescribeDBSubnetGroupsMessage {
    }
    export interface DescribeDBSubnetGroupsCommandOutput extends DBSubnetGroupMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.</p>
        *         <p>For an overview of CIDR ranges, go to the
        *             <a href="http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Wikipedia Tutorial</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeDBSubnetGroupsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeDBSubnetGroupsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeDBSubnetGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDBSubnetGroupsCommandInput} for command's `input` shape.
        * @see {@link DescribeDBSubnetGroupsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeDBSubnetGroupsCommand extends $Command<DescribeDBSubnetGroupsCommandInput, DescribeDBSubnetGroupsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeDBSubnetGroupsCommandInput;
            constructor(input: DescribeDBSubnetGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDBSubnetGroupsCommandInput, DescribeDBSubnetGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEngineDefaultClusterParametersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeEngineDefaultClusterParametersMessage, DescribeEngineDefaultClusterParametersResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeEngineDefaultClusterParametersCommandInput extends DescribeEngineDefaultClusterParametersMessage {
    }
    export interface DescribeEngineDefaultClusterParametersCommandOutput extends DescribeEngineDefaultClusterParametersResult, __MetadataBearer {
    }
    /**
        * <p>Returns the default engine and system parameter information for the cluster database engine.</p>
        *         <p>For more information on Amazon Aurora, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeEngineDefaultClusterParametersCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeEngineDefaultClusterParametersCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeEngineDefaultClusterParametersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEngineDefaultClusterParametersCommandInput} for command's `input` shape.
        * @see {@link DescribeEngineDefaultClusterParametersCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeEngineDefaultClusterParametersCommand extends $Command<DescribeEngineDefaultClusterParametersCommandInput, DescribeEngineDefaultClusterParametersCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeEngineDefaultClusterParametersCommandInput;
            constructor(input: DescribeEngineDefaultClusterParametersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEngineDefaultClusterParametersCommandInput, DescribeEngineDefaultClusterParametersCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEngineDefaultParametersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeEngineDefaultParametersMessage, DescribeEngineDefaultParametersResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeEngineDefaultParametersCommandInput extends DescribeEngineDefaultParametersMessage {
    }
    export interface DescribeEngineDefaultParametersCommandOutput extends DescribeEngineDefaultParametersResult, __MetadataBearer {
    }
    /**
        * <p>Returns the default engine and system parameter information for the specified database engine.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeEngineDefaultParametersCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeEngineDefaultParametersCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeEngineDefaultParametersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEngineDefaultParametersCommandInput} for command's `input` shape.
        * @see {@link DescribeEngineDefaultParametersCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeEngineDefaultParametersCommand extends $Command<DescribeEngineDefaultParametersCommandInput, DescribeEngineDefaultParametersCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeEngineDefaultParametersCommandInput;
            constructor(input: DescribeEngineDefaultParametersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEngineDefaultParametersCommandInput, DescribeEngineDefaultParametersCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEventCategoriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeEventCategoriesMessage, EventCategoriesMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeEventCategoriesCommandInput extends DescribeEventCategoriesMessage {
    }
    export interface DescribeEventCategoriesCommandOutput extends EventCategoriesMessage, __MetadataBearer {
    }
    /**
        * <p>Displays a list of categories for all event source types, or, if specified, for a specified source type.
        *             You can also see this list in the "Amazon RDS event categories and event messages" section of the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.Messages.html">
        *                 <i>Amazon RDS User Guide</i>
        *             </a> or the
        *                 <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Messages.html">
        *                 <i>Amazon Aurora User Guide</i>
        *             </a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeEventCategoriesCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeEventCategoriesCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeEventCategoriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEventCategoriesCommandInput} for command's `input` shape.
        * @see {@link DescribeEventCategoriesCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeEventCategoriesCommand extends $Command<DescribeEventCategoriesCommandInput, DescribeEventCategoriesCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeEventCategoriesCommandInput;
            constructor(input: DescribeEventCategoriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEventCategoriesCommandInput, DescribeEventCategoriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeEventsMessage, EventsMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeEventsCommandInput extends DescribeEventsMessage {
    }
    export interface DescribeEventsCommandOutput extends EventsMessage, __MetadataBearer {
    }
    /**
        * <p>Returns events related to DB instances, DB clusters, DB parameter groups, DB security groups, DB snapshots, DB cluster snapshots, and RDS Proxies for the past 14 days.
        *           Events specific to a particular DB instance, DB cluster, DB parameter group, DB security group, DB snapshot, DB cluster snapshot group, or RDS Proxy can be
        *           obtained by providing the name as a parameter.</p>
        *         <note>
        *             <p>By default, RDS returns events that were generated in the past hour.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeEventsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeEventsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEventsCommandInput} for command's `input` shape.
        * @see {@link DescribeEventsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeEventsCommand extends $Command<DescribeEventsCommandInput, DescribeEventsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeEventsCommandInput;
            constructor(input: DescribeEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEventsCommandInput, DescribeEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEventSubscriptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeEventSubscriptionsMessage, EventSubscriptionsMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeEventSubscriptionsCommandInput extends DescribeEventSubscriptionsMessage {
    }
    export interface DescribeEventSubscriptionsCommandOutput extends EventSubscriptionsMessage, __MetadataBearer {
    }
    /**
        * <p>Lists all the subscription descriptions for a customer account. The description for a subscription includes
        *           <code>SubscriptionName</code>, <code>SNSTopicARN</code>, <code>CustomerID</code>, <code>SourceType</code>, <code>SourceID</code>, <code>CreationTime</code>, and <code>Status</code>.</p>
        *         <p>If you specify a <code>SubscriptionName</code>, lists the description for that subscription.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeEventSubscriptionsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeEventSubscriptionsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeEventSubscriptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEventSubscriptionsCommandInput} for command's `input` shape.
        * @see {@link DescribeEventSubscriptionsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeEventSubscriptionsCommand extends $Command<DescribeEventSubscriptionsCommandInput, DescribeEventSubscriptionsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeEventSubscriptionsCommandInput;
            constructor(input: DescribeEventSubscriptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEventSubscriptionsCommandInput, DescribeEventSubscriptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeExportTasksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeExportTasksMessage, ExportTasksMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeExportTasksCommandInput extends DescribeExportTasksMessage {
    }
    export interface DescribeExportTasksCommandOutput extends ExportTasksMessage, __MetadataBearer {
    }
    /**
        * <p>Returns information about a snapshot export to Amazon S3. This API operation supports
        *             pagination.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeExportTasksCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeExportTasksCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeExportTasksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeExportTasksCommandInput} for command's `input` shape.
        * @see {@link DescribeExportTasksCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeExportTasksCommand extends $Command<DescribeExportTasksCommandInput, DescribeExportTasksCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeExportTasksCommandInput;
            constructor(input: DescribeExportTasksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeExportTasksCommandInput, DescribeExportTasksCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeGlobalClustersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeGlobalClustersMessage, GlobalClustersMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeGlobalClustersCommandInput extends DescribeGlobalClustersMessage {
    }
    export interface DescribeGlobalClustersCommandOutput extends GlobalClustersMessage, __MetadataBearer {
    }
    /**
        * <p>Returns information about Aurora global database clusters. This API supports pagination.</p>
        *         <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What is Amazon Aurora?</a> in the
        *         <i>Amazon Aurora User Guide</i>.</p>
        *         <note>
        *             <p>This action only applies to Aurora DB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeGlobalClustersCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeGlobalClustersCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeGlobalClustersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeGlobalClustersCommandInput} for command's `input` shape.
        * @see {@link DescribeGlobalClustersCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeGlobalClustersCommand extends $Command<DescribeGlobalClustersCommandInput, DescribeGlobalClustersCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeGlobalClustersCommandInput;
            constructor(input: DescribeGlobalClustersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeGlobalClustersCommandInput, DescribeGlobalClustersCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeOptionGroupOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeOptionGroupOptionsMessage, OptionGroupOptionsMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeOptionGroupOptionsCommandInput extends DescribeOptionGroupOptionsMessage {
    }
    export interface DescribeOptionGroupOptionsCommandOutput extends OptionGroupOptionsMessage, __MetadataBearer {
    }
    /**
        * <p>Describes all available options.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeOptionGroupOptionsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeOptionGroupOptionsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeOptionGroupOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeOptionGroupOptionsCommandInput} for command's `input` shape.
        * @see {@link DescribeOptionGroupOptionsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeOptionGroupOptionsCommand extends $Command<DescribeOptionGroupOptionsCommandInput, DescribeOptionGroupOptionsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeOptionGroupOptionsCommandInput;
            constructor(input: DescribeOptionGroupOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeOptionGroupOptionsCommandInput, DescribeOptionGroupOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeOptionGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeOptionGroupsMessage, OptionGroups } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeOptionGroupsCommandInput extends DescribeOptionGroupsMessage {
    }
    export interface DescribeOptionGroupsCommandOutput extends OptionGroups, __MetadataBearer {
    }
    /**
        * <p>Describes the available option groups.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeOptionGroupsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeOptionGroupsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeOptionGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeOptionGroupsCommandInput} for command's `input` shape.
        * @see {@link DescribeOptionGroupsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeOptionGroupsCommand extends $Command<DescribeOptionGroupsCommandInput, DescribeOptionGroupsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeOptionGroupsCommandInput;
            constructor(input: DescribeOptionGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeOptionGroupsCommandInput, DescribeOptionGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeOrderableDBInstanceOptionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeOrderableDBInstanceOptionsMessage, OrderableDBInstanceOptionsMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeOrderableDBInstanceOptionsCommandInput extends DescribeOrderableDBInstanceOptionsMessage {
    }
    export interface DescribeOrderableDBInstanceOptionsCommandOutput extends OrderableDBInstanceOptionsMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of orderable DB instance options for the specified DB engine, DB engine version, and DB instance class.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeOrderableDBInstanceOptionsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeOrderableDBInstanceOptionsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeOrderableDBInstanceOptionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeOrderableDBInstanceOptionsCommandInput} for command's `input` shape.
        * @see {@link DescribeOrderableDBInstanceOptionsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeOrderableDBInstanceOptionsCommand extends $Command<DescribeOrderableDBInstanceOptionsCommandInput, DescribeOrderableDBInstanceOptionsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeOrderableDBInstanceOptionsCommandInput;
            constructor(input: DescribeOrderableDBInstanceOptionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeOrderableDBInstanceOptionsCommandInput, DescribeOrderableDBInstanceOptionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribePendingMaintenanceActionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribePendingMaintenanceActionsMessage, PendingMaintenanceActionsMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribePendingMaintenanceActionsCommandInput extends DescribePendingMaintenanceActionsMessage {
    }
    export interface DescribePendingMaintenanceActionsCommandOutput extends PendingMaintenanceActionsMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of resources (for example, DB instances) that have at least one pending maintenance action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribePendingMaintenanceActionsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribePendingMaintenanceActionsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribePendingMaintenanceActionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePendingMaintenanceActionsCommandInput} for command's `input` shape.
        * @see {@link DescribePendingMaintenanceActionsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribePendingMaintenanceActionsCommand extends $Command<DescribePendingMaintenanceActionsCommandInput, DescribePendingMaintenanceActionsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribePendingMaintenanceActionsCommandInput;
            constructor(input: DescribePendingMaintenanceActionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePendingMaintenanceActionsCommandInput, DescribePendingMaintenanceActionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeReservedDBInstancesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeReservedDBInstancesMessage, ReservedDBInstanceMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeReservedDBInstancesCommandInput extends DescribeReservedDBInstancesMessage {
    }
    export interface DescribeReservedDBInstancesCommandOutput extends ReservedDBInstanceMessage, __MetadataBearer {
    }
    /**
        * <p>Returns information about reserved DB instances for this account, or about a specified reserved DB instance.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeReservedDBInstancesCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeReservedDBInstancesCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeReservedDBInstancesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReservedDBInstancesCommandInput} for command's `input` shape.
        * @see {@link DescribeReservedDBInstancesCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeReservedDBInstancesCommand extends $Command<DescribeReservedDBInstancesCommandInput, DescribeReservedDBInstancesCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeReservedDBInstancesCommandInput;
            constructor(input: DescribeReservedDBInstancesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReservedDBInstancesCommandInput, DescribeReservedDBInstancesCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeReservedDBInstancesOfferingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeReservedDBInstancesOfferingsMessage, ReservedDBInstancesOfferingMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeReservedDBInstancesOfferingsCommandInput extends DescribeReservedDBInstancesOfferingsMessage {
    }
    export interface DescribeReservedDBInstancesOfferingsCommandOutput extends ReservedDBInstancesOfferingMessage, __MetadataBearer {
    }
    /**
        * <p>Lists available reserved DB instance offerings.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeReservedDBInstancesOfferingsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeReservedDBInstancesOfferingsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeReservedDBInstancesOfferingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeReservedDBInstancesOfferingsCommandInput} for command's `input` shape.
        * @see {@link DescribeReservedDBInstancesOfferingsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeReservedDBInstancesOfferingsCommand extends $Command<DescribeReservedDBInstancesOfferingsCommandInput, DescribeReservedDBInstancesOfferingsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeReservedDBInstancesOfferingsCommandInput;
            constructor(input: DescribeReservedDBInstancesOfferingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeReservedDBInstancesOfferingsCommandInput, DescribeReservedDBInstancesOfferingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeSourceRegionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeSourceRegionsMessage, SourceRegionMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeSourceRegionsCommandInput extends DescribeSourceRegionsMessage {
    }
    export interface DescribeSourceRegionsCommandOutput extends SourceRegionMessage, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the source Amazon Web Services Regions where the current Amazon Web Services Region can create a read replica,
        *          copy a DB snapshot from, or replicate automated backups from. This API action supports pagination.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeSourceRegionsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeSourceRegionsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeSourceRegionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSourceRegionsCommandInput} for command's `input` shape.
        * @see {@link DescribeSourceRegionsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeSourceRegionsCommand extends $Command<DescribeSourceRegionsCommandInput, DescribeSourceRegionsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeSourceRegionsCommandInput;
            constructor(input: DescribeSourceRegionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSourceRegionsCommandInput, DescribeSourceRegionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeValidDBInstanceModificationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeValidDBInstanceModificationsMessage, DescribeValidDBInstanceModificationsResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DescribeValidDBInstanceModificationsCommandInput extends DescribeValidDBInstanceModificationsMessage {
    }
    export interface DescribeValidDBInstanceModificationsCommandOutput extends DescribeValidDBInstanceModificationsResult, __MetadataBearer {
    }
    /**
        * <p>You can call <code>DescribeValidDBInstanceModifications</code> to learn what modifications you can make to
        *             your DB instance. You can use this information when you call <code>ModifyDBInstance</code>.</p>
        *         <p>This command doesn't apply to RDS Custom.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DescribeValidDBInstanceModificationsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DescribeValidDBInstanceModificationsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DescribeValidDBInstanceModificationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeValidDBInstanceModificationsCommandInput} for command's `input` shape.
        * @see {@link DescribeValidDBInstanceModificationsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DescribeValidDBInstanceModificationsCommand extends $Command<DescribeValidDBInstanceModificationsCommandInput, DescribeValidDBInstanceModificationsCommandOutput, RDSClientResolvedConfig> {
            readonly input: DescribeValidDBInstanceModificationsCommandInput;
            constructor(input: DescribeValidDBInstanceModificationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeValidDBInstanceModificationsCommandInput, DescribeValidDBInstanceModificationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DownloadDBLogFilePortionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DownloadDBLogFilePortionDetails, DownloadDBLogFilePortionMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface DownloadDBLogFilePortionCommandInput extends DownloadDBLogFilePortionMessage {
    }
    export interface DownloadDBLogFilePortionCommandOutput extends DownloadDBLogFilePortionDetails, __MetadataBearer {
    }
    /**
        * <p>Downloads all or a portion of the specified log file, up to 1 MB in size.</p>
        *         <p>This command doesn't apply to RDS Custom.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, DownloadDBLogFilePortionCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, DownloadDBLogFilePortionCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new DownloadDBLogFilePortionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DownloadDBLogFilePortionCommandInput} for command's `input` shape.
        * @see {@link DownloadDBLogFilePortionCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class DownloadDBLogFilePortionCommand extends $Command<DownloadDBLogFilePortionCommandInput, DownloadDBLogFilePortionCommandOutput, RDSClientResolvedConfig> {
            readonly input: DownloadDBLogFilePortionCommandInput;
            constructor(input: DownloadDBLogFilePortionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DownloadDBLogFilePortionCommandInput, DownloadDBLogFilePortionCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/FailoverDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FailoverDBClusterMessage, FailoverDBClusterResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface FailoverDBClusterCommandInput extends FailoverDBClusterMessage {
    }
    export interface FailoverDBClusterCommandOutput extends FailoverDBClusterResult, __MetadataBearer {
    }
    /**
        * <p>Forces a failover for a DB cluster.</p>
        *         <p>For an Aurora DB cluster, failover for a DB cluster promotes one of the Aurora Replicas (read-only instances)
        *           in the DB cluster to be the primary DB instance (the cluster writer).</p>
        *         <p>For a Multi-AZ DB cluster, failover for a DB cluster promotes one of the readable standby DB instances (read-only instances)
        *           in the DB cluster to be the primary DB instance (the cluster writer).</p>
        *         <p>An Amazon Aurora DB cluster automatically fails over to an Aurora Replica, if one exists,
        *           when the primary DB instance fails. A Multi-AZ DB cluster automatically fails over to a readbable standby
        *           DB instance when the primary DB instance fails.</p>
        *         <p>To simulate a failure of a primary instance for testing, you can force a failover.
        *           Because each instance in a DB cluster has its own endpoint address, make sure to clean up and re-establish any existing
        *           connections that use those endpoint addresses when the failover is complete.</p>
        *         <p>For more information on Amazon Aurora DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, FailoverDBClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, FailoverDBClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new FailoverDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link FailoverDBClusterCommandInput} for command's `input` shape.
        * @see {@link FailoverDBClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class FailoverDBClusterCommand extends $Command<FailoverDBClusterCommandInput, FailoverDBClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: FailoverDBClusterCommandInput;
            constructor(input: FailoverDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<FailoverDBClusterCommandInput, FailoverDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/FailoverGlobalClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FailoverGlobalClusterMessage, FailoverGlobalClusterResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface FailoverGlobalClusterCommandInput extends FailoverGlobalClusterMessage {
    }
    export interface FailoverGlobalClusterCommandOutput extends FailoverGlobalClusterResult, __MetadataBearer {
    }
    /**
        * <p>Initiates the failover process for an Aurora global database (<a>GlobalCluster</a>).</p>
        *         <p>A failover for an Aurora global database promotes one of secondary read-only DB clusters to be
        *        the primary DB cluster and demotes the primary DB cluster to being a secondary (read-only) DB cluster. In other words,
        *      the role of the current primary DB cluster and the selected (target) DB cluster are switched. The selected
        *      secondary DB cluster assumes full read/write capabilities for the Aurora global database.</p>
        *         <p>For more information about failing over an Amazon Aurora global database, see
        *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-disaster-recovery.html#aurora-global-database-disaster-recovery.managed-failover">Managed planned failover for Amazon Aurora global
        *         databases</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <note>
        *             <p>This action applies to <a>GlobalCluster</a> (Aurora global databases) only. Use this action only on
        *        healthy Aurora global databases with running Aurora DB clusters and no Region-wide outages, to test disaster recovery scenarios or to
        *         reconfigure your Aurora global database topology.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, FailoverGlobalClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, FailoverGlobalClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new FailoverGlobalClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link FailoverGlobalClusterCommandInput} for command's `input` shape.
        * @see {@link FailoverGlobalClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class FailoverGlobalClusterCommand extends $Command<FailoverGlobalClusterCommandInput, FailoverGlobalClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: FailoverGlobalClusterCommandInput;
            constructor(input: FailoverGlobalClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<FailoverGlobalClusterCommandInput, FailoverGlobalClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceMessage, TagListMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceMessage {
    }
    export interface ListTagsForResourceCommandOutput extends TagListMessage, __MetadataBearer {
    }
    /**
        * <p>Lists all tags on an Amazon RDS resource.</p>
        *         <p>For an overview on tagging an Amazon RDS resource,
        *           see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>
        *           in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ListTagsForResourceCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ListTagsForResourceCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, RDSClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyCertificatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyCertificatesMessage, ModifyCertificatesResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyCertificatesCommandInput extends ModifyCertificatesMessage {
    }
    export interface ModifyCertificatesCommandOutput extends ModifyCertificatesResult, __MetadataBearer {
    }
    /**
        * <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS)
        *           certificate for Amazon RDS for new DB instances, or remove the override.</p>
        *         <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB
        *             instances that is different from the default certificate provided by RDS. You can also
        *             use this operation to remove the override, so that new DB instances use the default
        *             certificate provided by RDS.</p>
        *         <p>You might need to override the default certificate in the following situations:</p>
        *         <ul>
        *             <li>
        *                 <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet
        *                   the RDS default CA certificate for the specified Amazon Web Services Region.</p>
        *             </li>
        *             <li>
        *                 <p>RDS has already moved to a new default CA certificate for the specified Amazon Web Services
        *                     Region, but you are still in the process of supporting the new CA certificate.
        *                     In this case, you temporarily need additional time to finish your application
        *                     changes.</p>
        *             </li>
        *          </ul>
        *         <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html">
        *               Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p>
        *         <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html">
        *               Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyCertificatesCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyCertificatesCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyCertificatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyCertificatesCommandInput} for command's `input` shape.
        * @see {@link ModifyCertificatesCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyCertificatesCommand extends $Command<ModifyCertificatesCommandInput, ModifyCertificatesCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyCertificatesCommandInput;
            constructor(input: ModifyCertificatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyCertificatesCommandInput, ModifyCertificatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyCurrentDBClusterCapacityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBClusterCapacityInfo, ModifyCurrentDBClusterCapacityMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyCurrentDBClusterCapacityCommandInput extends ModifyCurrentDBClusterCapacityMessage {
    }
    export interface ModifyCurrentDBClusterCapacityCommandOutput extends DBClusterCapacityInfo, __MetadataBearer {
    }
    /**
        * <p>Set the capacity of an Aurora Serverless v1 DB cluster to a specific value.</p>
        *         <p>Aurora Serverless v1 scales seamlessly based on the workload on the DB cluster. In some cases, the capacity might not scale
        *         fast enough to meet a sudden change in workload, such as a large number of new transactions. Call <code>ModifyCurrentDBClusterCapacity</code>
        *         to set the capacity explicitly.</p>
        *         <p>After this call sets the DB cluster capacity, Aurora Serverless v1 can automatically scale
        *             the DB cluster based on the cooldown period for scaling up and the cooldown period
        *             for scaling down.</p>
        *         <p>For more information about Aurora Serverless v1, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless v1</a> in the
        *           <i>Amazon Aurora User Guide</i>.</p>
        *         <important>
        *             <p>If you call <code>ModifyCurrentDBClusterCapacity</code> with the default <code>TimeoutAction</code>, connections that
        *               prevent Aurora Serverless v1 from finding a scaling point might be dropped. For more information about scaling points,
        *               see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling">
        *                   Autoscaling for Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         </important>
        *         <note>
        *             <p>This action only applies to Aurora Serverless v1 DB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyCurrentDBClusterCapacityCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyCurrentDBClusterCapacityCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyCurrentDBClusterCapacityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyCurrentDBClusterCapacityCommandInput} for command's `input` shape.
        * @see {@link ModifyCurrentDBClusterCapacityCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyCurrentDBClusterCapacityCommand extends $Command<ModifyCurrentDBClusterCapacityCommandInput, ModifyCurrentDBClusterCapacityCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyCurrentDBClusterCapacityCommandInput;
            constructor(input: ModifyCurrentDBClusterCapacityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyCurrentDBClusterCapacityCommandInput, ModifyCurrentDBClusterCapacityCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyCustomDBEngineVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBEngineVersion } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { ModifyCustomDBEngineVersionMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyCustomDBEngineVersionCommandInput extends ModifyCustomDBEngineVersionMessage {
    }
    export interface ModifyCustomDBEngineVersionCommandOutput extends DBEngineVersion, __MetadataBearer {
    }
    /**
        * <p>Modifies the status of a custom engine version (CEV). You can find CEVs to modify by calling
        *             <code>DescribeDBEngineVersions</code>.</p>
        *         <note>
        *             <p>The MediaImport service that imports files from Amazon S3 to create CEVs isn't integrated with
        *                 Amazon Web Services CloudTrail. If you turn on data logging for Amazon RDS in CloudTrail, calls to the
        *                 <code>ModifyCustomDbEngineVersion</code> event aren't logged. However, you might see calls from the
        *                 API gateway that accesses your Amazon S3 bucket. These calls originate from the MediaImport service for
        *                 the <code>ModifyCustomDbEngineVersion</code> event.</p>
        *         </note>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.modify">Modifying CEV status</a>
        *             in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyCustomDBEngineVersionCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyCustomDBEngineVersionCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyCustomDBEngineVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyCustomDBEngineVersionCommandInput} for command's `input` shape.
        * @see {@link ModifyCustomDBEngineVersionCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyCustomDBEngineVersionCommand extends $Command<ModifyCustomDBEngineVersionCommandInput, ModifyCustomDBEngineVersionCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyCustomDBEngineVersionCommandInput;
            constructor(input: ModifyCustomDBEngineVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyCustomDBEngineVersionCommandInput, ModifyCustomDBEngineVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyDBClusterMessage, ModifyDBClusterResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyDBClusterCommandInput extends ModifyDBClusterMessage {
    }
    export interface ModifyDBClusterCommandOutput extends ModifyDBClusterResult, __MetadataBearer {
    }
    /**
        * <p>Modify the settings for an Amazon Aurora DB cluster or a Multi-AZ DB cluster.
        *            You can change one or more settings by specifying these parameters and the new values in the
        *            request.</p>
        *         <p>For more information on Amazon Aurora DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyDBClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyDBClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBClusterCommandInput} for command's `input` shape.
        * @see {@link ModifyDBClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyDBClusterCommand extends $Command<ModifyDBClusterCommandInput, ModifyDBClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyDBClusterCommandInput;
            constructor(input: ModifyDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBClusterCommandInput, ModifyDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBClusterEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBClusterEndpoint } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { ModifyDBClusterEndpointMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyDBClusterEndpointCommandInput extends ModifyDBClusterEndpointMessage {
    }
    export interface ModifyDBClusterEndpointCommandOutput extends DBClusterEndpoint, __MetadataBearer {
    }
    /**
        * <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p>
        *         <note>
        *             <p>This action only applies to Aurora DB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyDBClusterEndpointCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyDBClusterEndpointCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyDBClusterEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBClusterEndpointCommandInput} for command's `input` shape.
        * @see {@link ModifyDBClusterEndpointCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyDBClusterEndpointCommand extends $Command<ModifyDBClusterEndpointCommandInput, ModifyDBClusterEndpointCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyDBClusterEndpointCommandInput;
            constructor(input: ModifyDBClusterEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBClusterEndpointCommandInput, ModifyDBClusterEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBClusterParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBClusterParameterGroupNameMessage, ModifyDBClusterParameterGroupMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyDBClusterParameterGroupCommandInput extends ModifyDBClusterParameterGroupMessage {
    }
    export interface ModifyDBClusterParameterGroupCommandOutput extends DBClusterParameterGroupNameMessage, __MetadataBearer {
    }
    /**
        * <p>Modifies the parameters of a DB cluster parameter group. To modify more than one parameter,
        *             submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>,
        *             and <code>ApplyMethod</code>. A maximum of 20
        *             parameters can be modified in a single request.</p>
        *         <important>
        *             <p>After you create a DB cluster parameter group, you should wait at least 5 minutes
        *                 before creating your first DB cluster that uses that DB cluster parameter group as the default parameter
        *                 group. This allows Amazon RDS to fully complete the create action before the parameter
        *                 group is used as the default for a new DB cluster. This is especially important for parameters
        *                 that are critical when creating the default database for a DB cluster, such as the character set
        *                 for the default database defined by the <code>character_set_database</code> parameter. You can use the
        *                 <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
        *                 <code>DescribeDBClusterParameters</code> action to verify
        *                 that your DB cluster parameter group has been created or modified.</p>
        *             <p>If the modified DB cluster parameter group is used by an Aurora Serverless v1 cluster, Aurora
        *                applies the update immediately. The cluster restart might interrupt your workload. In that case,
        *                your application must reopen any connections and retry any transactions that were active
        *                when the parameter changes took effect.</p>
        *         </important>
        *         <p>For more information on Amazon Aurora DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyDBClusterParameterGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyDBClusterParameterGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyDBClusterParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBClusterParameterGroupCommandInput} for command's `input` shape.
        * @see {@link ModifyDBClusterParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyDBClusterParameterGroupCommand extends $Command<ModifyDBClusterParameterGroupCommandInput, ModifyDBClusterParameterGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyDBClusterParameterGroupCommandInput;
            constructor(input: ModifyDBClusterParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBClusterParameterGroupCommandInput, ModifyDBClusterParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBClusterSnapshotAttributeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyDBClusterSnapshotAttributeMessage, ModifyDBClusterSnapshotAttributeResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyDBClusterSnapshotAttributeCommandInput extends ModifyDBClusterSnapshotAttributeMessage {
    }
    export interface ModifyDBClusterSnapshotAttributeCommandOutput extends ModifyDBClusterSnapshotAttributeResult, __MetadataBearer {
    }
    /**
        * <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB cluster snapshot.</p>
        *         <p>To share a manual DB cluster snapshot with other Amazon Web Services accounts, specify
        *                 <code>restore</code> as the <code>AttributeName</code> and use the
        *                 <code>ValuesToAdd</code> parameter to add a list of IDs of the Amazon Web Services accounts that are
        *             authorized to restore the manual DB cluster snapshot. Use the value <code>all</code> to
        *             make the manual DB cluster snapshot public, which means that it can be copied or
        *             restored by all Amazon Web Services accounts.</p>
        *         <note>
        *             <p>Don't add the <code>all</code> value for any manual DB cluster snapshots
        *                 that contain private information that you don't want available to all Amazon Web Services
        *                 accounts.</p>
        *         </note>
        *         <p>If a manual DB cluster snapshot is encrypted, it can be shared, but only by
        *             specifying a list of authorized Amazon Web Services account IDs for the <code>ValuesToAdd</code>
        *             parameter. You can't use <code>all</code> as a value for that parameter in this
        *             case.</p>
        *         <p>To view which Amazon Web Services accounts have access to copy or restore a manual DB cluster
        *             snapshot, or whether a manual DB cluster snapshot is public or private, use the <a>DescribeDBClusterSnapshotAttributes</a> API action. The accounts are
        *             returned as values for the <code>restore</code> attribute.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyDBClusterSnapshotAttributeCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyDBClusterSnapshotAttributeCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyDBClusterSnapshotAttributeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBClusterSnapshotAttributeCommandInput} for command's `input` shape.
        * @see {@link ModifyDBClusterSnapshotAttributeCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyDBClusterSnapshotAttributeCommand extends $Command<ModifyDBClusterSnapshotAttributeCommandInput, ModifyDBClusterSnapshotAttributeCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyDBClusterSnapshotAttributeCommandInput;
            constructor(input: ModifyDBClusterSnapshotAttributeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBClusterSnapshotAttributeCommandInput, ModifyDBClusterSnapshotAttributeCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyDBInstanceMessage, ModifyDBInstanceResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyDBInstanceCommandInput extends ModifyDBInstanceMessage {
    }
    export interface ModifyDBInstanceCommandOutput extends ModifyDBInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Modifies settings for a DB instance.
        *           You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
        *             To learn what modifications you can make to your DB instance,
        *             call <code>DescribeValidDBInstanceModifications</code>
        *             before you call <code>ModifyDBInstance</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyDBInstanceCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyDBInstanceCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyDBInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBInstanceCommandInput} for command's `input` shape.
        * @see {@link ModifyDBInstanceCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyDBInstanceCommand extends $Command<ModifyDBInstanceCommandInput, ModifyDBInstanceCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyDBInstanceCommandInput;
            constructor(input: ModifyDBInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBInstanceCommandInput, ModifyDBInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBParameterGroupNameMessage, ModifyDBParameterGroupMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyDBParameterGroupCommandInput extends ModifyDBParameterGroupMessage {
    }
    export interface ModifyDBParameterGroupCommandOutput extends DBParameterGroupNameMessage, __MetadataBearer {
    }
    /**
        * <p>Modifies the parameters of a DB parameter group. To modify more than one parameter,
        *         submit a list of the following: <code>ParameterName</code>, <code>ParameterValue</code>, and
        *         <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p>
        *         <important>
        *             <p>After you modify a DB parameter group, you should wait at least 5 minutes
        *             before creating your first DB instance that uses that DB parameter group as the default parameter
        *             group. This allows Amazon RDS to fully complete the modify action before the parameter
        *             group is used as the default for a new DB instance. This is especially important for parameters
        *             that are critical when creating the default database for a DB instance, such as the character set
        *             for the default database defined by the <code>character_set_database</code> parameter. You can use the
        *             <i>Parameter Groups</i> option of the <a href="https://console.aws.amazon.com/rds/">Amazon RDS console</a> or the
        *             <i>DescribeDBParameters</i> command to verify
        *             that your DB parameter group has been created or modified.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyDBParameterGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyDBParameterGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyDBParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBParameterGroupCommandInput} for command's `input` shape.
        * @see {@link ModifyDBParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyDBParameterGroupCommand extends $Command<ModifyDBParameterGroupCommandInput, ModifyDBParameterGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyDBParameterGroupCommandInput;
            constructor(input: ModifyDBParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBParameterGroupCommandInput, ModifyDBParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBProxyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyDBProxyRequest, ModifyDBProxyResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyDBProxyCommandInput extends ModifyDBProxyRequest {
    }
    export interface ModifyDBProxyCommandOutput extends ModifyDBProxyResponse, __MetadataBearer {
    }
    /**
        * <p>Changes the settings for an existing DB proxy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyDBProxyCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyDBProxyCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyDBProxyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBProxyCommandInput} for command's `input` shape.
        * @see {@link ModifyDBProxyCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyDBProxyCommand extends $Command<ModifyDBProxyCommandInput, ModifyDBProxyCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyDBProxyCommandInput;
            constructor(input: ModifyDBProxyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBProxyCommandInput, ModifyDBProxyCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBProxyEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyDBProxyEndpointRequest, ModifyDBProxyEndpointResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyDBProxyEndpointCommandInput extends ModifyDBProxyEndpointRequest {
    }
    export interface ModifyDBProxyEndpointCommandOutput extends ModifyDBProxyEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>Changes the settings for an existing DB proxy endpoint.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyDBProxyEndpointCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyDBProxyEndpointCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyDBProxyEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBProxyEndpointCommandInput} for command's `input` shape.
        * @see {@link ModifyDBProxyEndpointCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyDBProxyEndpointCommand extends $Command<ModifyDBProxyEndpointCommandInput, ModifyDBProxyEndpointCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyDBProxyEndpointCommandInput;
            constructor(input: ModifyDBProxyEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBProxyEndpointCommandInput, ModifyDBProxyEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBProxyTargetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyDBProxyTargetGroupRequest, ModifyDBProxyTargetGroupResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyDBProxyTargetGroupCommandInput extends ModifyDBProxyTargetGroupRequest {
    }
    export interface ModifyDBProxyTargetGroupCommandOutput extends ModifyDBProxyTargetGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the properties of a <code>DBProxyTargetGroup</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyDBProxyTargetGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyDBProxyTargetGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyDBProxyTargetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBProxyTargetGroupCommandInput} for command's `input` shape.
        * @see {@link ModifyDBProxyTargetGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyDBProxyTargetGroupCommand extends $Command<ModifyDBProxyTargetGroupCommandInput, ModifyDBProxyTargetGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyDBProxyTargetGroupCommandInput;
            constructor(input: ModifyDBProxyTargetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBProxyTargetGroupCommandInput, ModifyDBProxyTargetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBSnapshotAttributeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyDBSnapshotAttributeMessage, ModifyDBSnapshotAttributeResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyDBSnapshotAttributeCommandInput extends ModifyDBSnapshotAttributeMessage {
    }
    export interface ModifyDBSnapshotAttributeCommandOutput extends ModifyDBSnapshotAttributeResult, __MetadataBearer {
    }
    /**
        * <p>Adds an attribute and values to, or removes an attribute and values from, a manual DB snapshot.</p>
        *         <p>To share a manual DB snapshot with other Amazon Web Services accounts, specify <code>restore</code>
        *             as the <code>AttributeName</code> and use the <code>ValuesToAdd</code> parameter to add
        *             a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual DB snapshot.
        *             Uses the value <code>all</code> to make the manual DB snapshot public, which means it
        *             can be copied or restored by all Amazon Web Services accounts.</p>
        *         <note>
        *             <p>Don't add the <code>all</code> value for any manual DB snapshots that
        *                 contain private information that you don't want available to all Amazon Web Services
        *                 accounts.</p>
        *         </note>
        *         <p>If the manual DB snapshot is encrypted, it can be shared, but only by specifying a
        *             list of authorized Amazon Web Services account IDs for the <code>ValuesToAdd</code> parameter. You
        *             can't use <code>all</code> as a value for that parameter in this case.</p>
        *         <p>To view which Amazon Web Services accounts have access to copy or restore a manual DB snapshot, or
        *             whether a manual DB snapshot public or private, use the <a>DescribeDBSnapshotAttributes</a> API action. The accounts are returned as
        *             values for the <code>restore</code> attribute.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyDBSnapshotAttributeCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyDBSnapshotAttributeCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyDBSnapshotAttributeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBSnapshotAttributeCommandInput} for command's `input` shape.
        * @see {@link ModifyDBSnapshotAttributeCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyDBSnapshotAttributeCommand extends $Command<ModifyDBSnapshotAttributeCommandInput, ModifyDBSnapshotAttributeCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyDBSnapshotAttributeCommandInput;
            constructor(input: ModifyDBSnapshotAttributeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBSnapshotAttributeCommandInput, ModifyDBSnapshotAttributeCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyDBSnapshotMessage, ModifyDBSnapshotResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyDBSnapshotCommandInput extends ModifyDBSnapshotMessage {
    }
    export interface ModifyDBSnapshotCommandOutput extends ModifyDBSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Updates a manual DB snapshot with a new engine version. The snapshot can be encrypted
        *             or unencrypted, but not shared or public.
        *
        *     </p>
        *         <p>Amazon RDS supports upgrading DB snapshots for MySQL, PostgreSQL, and Oracle. This command
        *           doesn't apply to RDS Custom.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyDBSnapshotCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyDBSnapshotCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyDBSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBSnapshotCommandInput} for command's `input` shape.
        * @see {@link ModifyDBSnapshotCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyDBSnapshotCommand extends $Command<ModifyDBSnapshotCommandInput, ModifyDBSnapshotCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyDBSnapshotCommandInput;
            constructor(input: ModifyDBSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBSnapshotCommandInput, ModifyDBSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBSubnetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyDBSubnetGroupMessage, ModifyDBSubnetGroupResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyDBSubnetGroupCommandInput extends ModifyDBSubnetGroupMessage {
    }
    export interface ModifyDBSubnetGroupCommandOutput extends ModifyDBSubnetGroupResult, __MetadataBearer {
    }
    /**
        * <p>Modifies an existing DB subnet group. DB subnet groups must contain at least one subnet in at least two AZs in the Amazon Web Services Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyDBSubnetGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyDBSubnetGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyDBSubnetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDBSubnetGroupCommandInput} for command's `input` shape.
        * @see {@link ModifyDBSubnetGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyDBSubnetGroupCommand extends $Command<ModifyDBSubnetGroupCommandInput, ModifyDBSubnetGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyDBSubnetGroupCommandInput;
            constructor(input: ModifyDBSubnetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDBSubnetGroupCommandInput, ModifyDBSubnetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyEventSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyEventSubscriptionMessage, ModifyEventSubscriptionResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyEventSubscriptionCommandInput extends ModifyEventSubscriptionMessage {
    }
    export interface ModifyEventSubscriptionCommandOutput extends ModifyEventSubscriptionResult, __MetadataBearer {
    }
    /**
        * <p>Modifies an existing RDS event notification subscription. You can't modify the source identifiers using this call. To change
        *         source identifiers for a subscription, use the <code>AddSourceIdentifierToSubscription</code> and <code>RemoveSourceIdentifierFromSubscription</code> calls.</p>
        *         <p>You can see a list of the event categories for a given source type (<code>SourceType</code>)
        *           in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> in the <i>Amazon RDS User Guide</i>
        *             or by using the <code>DescribeEventCategories</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyEventSubscriptionCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyEventSubscriptionCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyEventSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyEventSubscriptionCommandInput} for command's `input` shape.
        * @see {@link ModifyEventSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyEventSubscriptionCommand extends $Command<ModifyEventSubscriptionCommandInput, ModifyEventSubscriptionCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyEventSubscriptionCommandInput;
            constructor(input: ModifyEventSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyEventSubscriptionCommandInput, ModifyEventSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyGlobalClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyGlobalClusterMessage, ModifyGlobalClusterResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyGlobalClusterCommandInput extends ModifyGlobalClusterMessage {
    }
    export interface ModifyGlobalClusterCommandOutput extends ModifyGlobalClusterResult, __MetadataBearer {
    }
    /**
        * <p>Modify a setting for an Amazon Aurora global cluster. You can change one or more database configuration
        *         parameters by specifying these parameters and the new values in the request. For more information on
        *         Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What is Amazon Aurora?</a> in the
        *         <i>Amazon Aurora User Guide</i>.</p>
        *         <note>
        *             <p>This action only applies to Aurora DB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyGlobalClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyGlobalClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyGlobalClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyGlobalClusterCommandInput} for command's `input` shape.
        * @see {@link ModifyGlobalClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyGlobalClusterCommand extends $Command<ModifyGlobalClusterCommandInput, ModifyGlobalClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyGlobalClusterCommandInput;
            constructor(input: ModifyGlobalClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyGlobalClusterCommandInput, ModifyGlobalClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyOptionGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyOptionGroupMessage, ModifyOptionGroupResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ModifyOptionGroupCommandInput extends ModifyOptionGroupMessage {
    }
    export interface ModifyOptionGroupCommandOutput extends ModifyOptionGroupResult, __MetadataBearer {
    }
    /**
        * <p>Modifies an existing option group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ModifyOptionGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ModifyOptionGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ModifyOptionGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyOptionGroupCommandInput} for command's `input` shape.
        * @see {@link ModifyOptionGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ModifyOptionGroupCommand extends $Command<ModifyOptionGroupCommandInput, ModifyOptionGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: ModifyOptionGroupCommandInput;
            constructor(input: ModifyOptionGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyOptionGroupCommandInput, ModifyOptionGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/PromoteReadReplicaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PromoteReadReplicaMessage, PromoteReadReplicaResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface PromoteReadReplicaCommandInput extends PromoteReadReplicaMessage {
    }
    export interface PromoteReadReplicaCommandOutput extends PromoteReadReplicaResult, __MetadataBearer {
    }
    /**
        * <p>Promotes a read replica DB instance to a standalone DB instance.</p>
        *         <note>
        *             <ul>
        *                <li>
        *                     <p>Backup duration is a function of the amount of changes to the database since the previous
        *                         backup. If you plan to promote a read replica to a standalone instance, we
        *                         recommend that you enable backups and complete at least one backup prior to
        *                         promotion. In addition, a read replica cannot be promoted to a standalone
        *                         instance when it is in the <code>backing-up</code> status. If you have
        *                         enabled backups on your read replica, configure the automated backup window
        *                         so that daily backups do not interfere with read replica
        *                         promotion.</p>
        *                 </li>
        *                <li>
        *                     <p>This command doesn't apply to Aurora MySQL, Aurora PostgreSQL, or RDS Custom.</p>
        *                 </li>
        *             </ul>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, PromoteReadReplicaCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, PromoteReadReplicaCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new PromoteReadReplicaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PromoteReadReplicaCommandInput} for command's `input` shape.
        * @see {@link PromoteReadReplicaCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class PromoteReadReplicaCommand extends $Command<PromoteReadReplicaCommandInput, PromoteReadReplicaCommandOutput, RDSClientResolvedConfig> {
            readonly input: PromoteReadReplicaCommandInput;
            constructor(input: PromoteReadReplicaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PromoteReadReplicaCommandInput, PromoteReadReplicaCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/PromoteReadReplicaDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PromoteReadReplicaDBClusterMessage, PromoteReadReplicaDBClusterResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface PromoteReadReplicaDBClusterCommandInput extends PromoteReadReplicaDBClusterMessage {
    }
    export interface PromoteReadReplicaDBClusterCommandOutput extends PromoteReadReplicaDBClusterResult, __MetadataBearer {
    }
    /**
        * <p>Promotes a read replica DB cluster to a standalone DB cluster.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, PromoteReadReplicaDBClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, PromoteReadReplicaDBClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new PromoteReadReplicaDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PromoteReadReplicaDBClusterCommandInput} for command's `input` shape.
        * @see {@link PromoteReadReplicaDBClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class PromoteReadReplicaDBClusterCommand extends $Command<PromoteReadReplicaDBClusterCommandInput, PromoteReadReplicaDBClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: PromoteReadReplicaDBClusterCommandInput;
            constructor(input: PromoteReadReplicaDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PromoteReadReplicaDBClusterCommandInput, PromoteReadReplicaDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/PurchaseReservedDBInstancesOfferingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PurchaseReservedDBInstancesOfferingMessage, PurchaseReservedDBInstancesOfferingResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface PurchaseReservedDBInstancesOfferingCommandInput extends PurchaseReservedDBInstancesOfferingMessage {
    }
    export interface PurchaseReservedDBInstancesOfferingCommandOutput extends PurchaseReservedDBInstancesOfferingResult, __MetadataBearer {
    }
    /**
        * <p>Purchases a reserved DB instance offering.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, PurchaseReservedDBInstancesOfferingCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, PurchaseReservedDBInstancesOfferingCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new PurchaseReservedDBInstancesOfferingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PurchaseReservedDBInstancesOfferingCommandInput} for command's `input` shape.
        * @see {@link PurchaseReservedDBInstancesOfferingCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class PurchaseReservedDBInstancesOfferingCommand extends $Command<PurchaseReservedDBInstancesOfferingCommandInput, PurchaseReservedDBInstancesOfferingCommandOutput, RDSClientResolvedConfig> {
            readonly input: PurchaseReservedDBInstancesOfferingCommandInput;
            constructor(input: PurchaseReservedDBInstancesOfferingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PurchaseReservedDBInstancesOfferingCommandInput, PurchaseReservedDBInstancesOfferingCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RebootDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RebootDBClusterMessage, RebootDBClusterResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RebootDBClusterCommandInput extends RebootDBClusterMessage {
    }
    export interface RebootDBClusterCommandOutput extends RebootDBClusterResult, __MetadataBearer {
    }
    /**
        * <p>You might need to reboot your DB cluster, usually for maintenance reasons.
        *           For example, if you make certain modifications,
        *           or if you change the DB cluster parameter group associated with the DB cluster,
        *           reboot the DB cluster for the changes to take effect.</p>
        *         <p>Rebooting a DB cluster restarts the database engine service. Rebooting a DB
        *           cluster results in a momentary outage, during which the DB cluster status is set to rebooting.</p>
        *         <p>Use this operation only for a non-Aurora Multi-AZ DB cluster.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the
        *           <i>Amazon RDS User Guide.</i>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RebootDBClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RebootDBClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RebootDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RebootDBClusterCommandInput} for command's `input` shape.
        * @see {@link RebootDBClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RebootDBClusterCommand extends $Command<RebootDBClusterCommandInput, RebootDBClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: RebootDBClusterCommandInput;
            constructor(input: RebootDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RebootDBClusterCommandInput, RebootDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RebootDBInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RebootDBInstanceMessage, RebootDBInstanceResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RebootDBInstanceCommandInput extends RebootDBInstanceMessage {
    }
    export interface RebootDBInstanceCommandOutput extends RebootDBInstanceResult, __MetadataBearer {
    }
    /**
        * <p>You might need to reboot your DB instance, usually for maintenance reasons.
        *         For example, if you make certain modifications,
        *         or if you change the DB parameter group associated with the DB instance,
        *         you must reboot the instance for the changes to take effect.</p>
        *         <p>Rebooting a DB instance restarts the database engine service.
        *         Rebooting a DB instance results in a momentary outage, during which the DB instance status is set to rebooting.</p>
        *         <p>For more information about rebooting, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_RebootInstance.html">Rebooting a DB Instance</a> in the <i>Amazon RDS User Guide.</i>
        *          </p>
        *         <p>This command doesn't apply to RDS Custom.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RebootDBInstanceCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RebootDBInstanceCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RebootDBInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RebootDBInstanceCommandInput} for command's `input` shape.
        * @see {@link RebootDBInstanceCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RebootDBInstanceCommand extends $Command<RebootDBInstanceCommandInput, RebootDBInstanceCommandOutput, RDSClientResolvedConfig> {
            readonly input: RebootDBInstanceCommandInput;
            constructor(input: RebootDBInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RebootDBInstanceCommandInput, RebootDBInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RegisterDBProxyTargetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RegisterDBProxyTargetsRequest, RegisterDBProxyTargetsResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RegisterDBProxyTargetsCommandInput extends RegisterDBProxyTargetsRequest {
    }
    export interface RegisterDBProxyTargetsCommandOutput extends RegisterDBProxyTargetsResponse, __MetadataBearer {
    }
    /**
        * <p>Associate one or more <code>DBProxyTarget</code> data structures with a <code>DBProxyTargetGroup</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RegisterDBProxyTargetsCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RegisterDBProxyTargetsCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RegisterDBProxyTargetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterDBProxyTargetsCommandInput} for command's `input` shape.
        * @see {@link RegisterDBProxyTargetsCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RegisterDBProxyTargetsCommand extends $Command<RegisterDBProxyTargetsCommandInput, RegisterDBProxyTargetsCommandOutput, RDSClientResolvedConfig> {
            readonly input: RegisterDBProxyTargetsCommandInput;
            constructor(input: RegisterDBProxyTargetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterDBProxyTargetsCommandInput, RegisterDBProxyTargetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveFromGlobalClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RemoveFromGlobalClusterMessage, RemoveFromGlobalClusterResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RemoveFromGlobalClusterCommandInput extends RemoveFromGlobalClusterMessage {
    }
    export interface RemoveFromGlobalClusterCommandOutput extends RemoveFromGlobalClusterResult, __MetadataBearer {
    }
    /**
        * <p>Detaches an Aurora secondary cluster from an Aurora global database cluster. The cluster becomes a
        *         standalone cluster with read-write capability instead of being read-only and receiving data from a
        *         primary cluster in a different Region.</p>
        *         <note>
        *             <p>This action only applies to Aurora DB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RemoveFromGlobalClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RemoveFromGlobalClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RemoveFromGlobalClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveFromGlobalClusterCommandInput} for command's `input` shape.
        * @see {@link RemoveFromGlobalClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RemoveFromGlobalClusterCommand extends $Command<RemoveFromGlobalClusterCommandInput, RemoveFromGlobalClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: RemoveFromGlobalClusterCommandInput;
            constructor(input: RemoveFromGlobalClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveFromGlobalClusterCommandInput, RemoveFromGlobalClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveRoleFromDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RemoveRoleFromDBClusterMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RemoveRoleFromDBClusterCommandInput extends RemoveRoleFromDBClusterMessage {
    }
    export interface RemoveRoleFromDBClusterCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the asssociation of an Amazon Web Services Identity and Access Management (IAM) role from a
        *             DB cluster.</p>
        *         <p>For more information on Amazon Aurora DB clusters, see
        *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *                 What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *                 Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RemoveRoleFromDBClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RemoveRoleFromDBClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RemoveRoleFromDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveRoleFromDBClusterCommandInput} for command's `input` shape.
        * @see {@link RemoveRoleFromDBClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RemoveRoleFromDBClusterCommand extends $Command<RemoveRoleFromDBClusterCommandInput, RemoveRoleFromDBClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: RemoveRoleFromDBClusterCommandInput;
            constructor(input: RemoveRoleFromDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveRoleFromDBClusterCommandInput, RemoveRoleFromDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveRoleFromDBInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RemoveRoleFromDBInstanceMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RemoveRoleFromDBInstanceCommandInput extends RemoveRoleFromDBInstanceMessage {
    }
    export interface RemoveRoleFromDBInstanceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Disassociates an Amazon Web Services Identity and Access Management (IAM) role from a DB instance.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RemoveRoleFromDBInstanceCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RemoveRoleFromDBInstanceCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RemoveRoleFromDBInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveRoleFromDBInstanceCommandInput} for command's `input` shape.
        * @see {@link RemoveRoleFromDBInstanceCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RemoveRoleFromDBInstanceCommand extends $Command<RemoveRoleFromDBInstanceCommandInput, RemoveRoleFromDBInstanceCommandOutput, RDSClientResolvedConfig> {
            readonly input: RemoveRoleFromDBInstanceCommandInput;
            constructor(input: RemoveRoleFromDBInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveRoleFromDBInstanceCommandInput, RemoveRoleFromDBInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveSourceIdentifierFromSubscriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RemoveSourceIdentifierFromSubscriptionMessage, RemoveSourceIdentifierFromSubscriptionResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RemoveSourceIdentifierFromSubscriptionCommandInput extends RemoveSourceIdentifierFromSubscriptionMessage {
    }
    export interface RemoveSourceIdentifierFromSubscriptionCommandOutput extends RemoveSourceIdentifierFromSubscriptionResult, __MetadataBearer {
    }
    /**
        * <p>Removes a source identifier from an existing RDS event notification subscription.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RemoveSourceIdentifierFromSubscriptionCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RemoveSourceIdentifierFromSubscriptionCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RemoveSourceIdentifierFromSubscriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveSourceIdentifierFromSubscriptionCommandInput} for command's `input` shape.
        * @see {@link RemoveSourceIdentifierFromSubscriptionCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RemoveSourceIdentifierFromSubscriptionCommand extends $Command<RemoveSourceIdentifierFromSubscriptionCommandInput, RemoveSourceIdentifierFromSubscriptionCommandOutput, RDSClientResolvedConfig> {
            readonly input: RemoveSourceIdentifierFromSubscriptionCommandInput;
            constructor(input: RemoveSourceIdentifierFromSubscriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveSourceIdentifierFromSubscriptionCommandInput, RemoveSourceIdentifierFromSubscriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveTagsFromResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RemoveTagsFromResourceMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RemoveTagsFromResourceCommandInput extends RemoveTagsFromResourceMessage {
    }
    export interface RemoveTagsFromResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes metadata tags from an Amazon RDS resource.</p>
        *         <p>For an overview on tagging an Amazon RDS resource,
        *           see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Tagging.html">Tagging Amazon RDS Resources</a>
        *           in the <i>Amazon RDS User Guide.</i>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RemoveTagsFromResourceCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RemoveTagsFromResourceCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RemoveTagsFromResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveTagsFromResourceCommandInput} for command's `input` shape.
        * @see {@link RemoveTagsFromResourceCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RemoveTagsFromResourceCommand extends $Command<RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput, RDSClientResolvedConfig> {
            readonly input: RemoveTagsFromResourceCommandInput;
            constructor(input: RemoveTagsFromResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ResetDBClusterParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBClusterParameterGroupNameMessage, ResetDBClusterParameterGroupMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ResetDBClusterParameterGroupCommandInput extends ResetDBClusterParameterGroupMessage {
    }
    export interface ResetDBClusterParameterGroupCommandOutput extends DBClusterParameterGroupNameMessage, __MetadataBearer {
    }
    /**
        * <p>Modifies the parameters of a DB cluster parameter group to the default value. To
        *             reset specific parameters submit a list of the following: <code>ParameterName</code>
        *             and <code>ApplyMethod</code>. To reset the
        *             entire DB cluster parameter group, specify the <code>DBClusterParameterGroupName</code>
        *             and <code>ResetAllParameters</code> parameters.</p>
        *         <p>When resetting the entire group, dynamic parameters are updated immediately and static parameters
        *             are set to <code>pending-reboot</code> to take effect on the next DB instance restart
        *             or <code>RebootDBInstance</code> request. You must call <code>RebootDBInstance</code> for every
        *             DB instance in your DB cluster that you want the updated static parameter to apply to.</p>
        *         <p>For more information on Amazon Aurora DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ResetDBClusterParameterGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ResetDBClusterParameterGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ResetDBClusterParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResetDBClusterParameterGroupCommandInput} for command's `input` shape.
        * @see {@link ResetDBClusterParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ResetDBClusterParameterGroupCommand extends $Command<ResetDBClusterParameterGroupCommandInput, ResetDBClusterParameterGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: ResetDBClusterParameterGroupCommandInput;
            constructor(input: ResetDBClusterParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResetDBClusterParameterGroupCommandInput, ResetDBClusterParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ResetDBParameterGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DBParameterGroupNameMessage, ResetDBParameterGroupMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface ResetDBParameterGroupCommandInput extends ResetDBParameterGroupMessage {
    }
    export interface ResetDBParameterGroupCommandOutput extends DBParameterGroupNameMessage, __MetadataBearer {
    }
    /**
        * <p>Modifies the parameters of a DB parameter group to the engine/system default value.
        *             To reset specific parameters, provide a list of the following:
        *                 <code>ParameterName</code> and <code>ApplyMethod</code>. To reset the entire DB
        *             parameter group, specify the <code>DBParameterGroup</code> name and
        *                 <code>ResetAllParameters</code> parameters. When resetting the entire group, dynamic
        *             parameters are updated immediately and static parameters are set to
        *                 <code>pending-reboot</code> to take effect on the next DB instance restart or
        *                 <code>RebootDBInstance</code> request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, ResetDBParameterGroupCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, ResetDBParameterGroupCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new ResetDBParameterGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResetDBParameterGroupCommandInput} for command's `input` shape.
        * @see {@link ResetDBParameterGroupCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class ResetDBParameterGroupCommand extends $Command<ResetDBParameterGroupCommandInput, ResetDBParameterGroupCommandOutput, RDSClientResolvedConfig> {
            readonly input: ResetDBParameterGroupCommandInput;
            constructor(input: ResetDBParameterGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResetDBParameterGroupCommandInput, ResetDBParameterGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBClusterFromS3Command' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RestoreDBClusterFromS3Message, RestoreDBClusterFromS3Result } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RestoreDBClusterFromS3CommandInput extends RestoreDBClusterFromS3Message {
    }
    export interface RestoreDBClusterFromS3CommandOutput extends RestoreDBClusterFromS3Result, __MetadataBearer {
    }
    /**
        * <p>Creates an Amazon Aurora DB cluster from MySQL data stored in an Amazon S3 bucket.
        *             Amazon RDS must be authorized to access the Amazon S3 bucket and the data must be
        *             created using the Percona XtraBackup utility as described in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Migrating.ExtMySQL.html#AuroraMySQL.Migrating.ExtMySQL.S3"> Migrating Data from MySQL by Using an Amazon S3 Bucket</a> in the
        *                 <i>Amazon Aurora User Guide</i>.</p>
        *         <note>
        *             <p>This action only restores the DB cluster, not the DB instances for that DB
        *                   cluster. You must invoke the <code>CreateDBInstance</code> action to create DB
        *                   instances for the restored DB cluster, specifying the identifier of the restored DB
        *                   cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after
        *                   the <code>RestoreDBClusterFromS3</code> action has completed and the DB
        *                   cluster is available.</p>
        *         </note>
        *         <p>For more information on Amazon Aurora, see
        *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *                 What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <note>
        *             <p>This action only applies to Aurora DB clusters. The source DB engine must be
        *                 MySQL.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RestoreDBClusterFromS3Command } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RestoreDBClusterFromS3Command } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RestoreDBClusterFromS3Command(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestoreDBClusterFromS3CommandInput} for command's `input` shape.
        * @see {@link RestoreDBClusterFromS3CommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RestoreDBClusterFromS3Command extends $Command<RestoreDBClusterFromS3CommandInput, RestoreDBClusterFromS3CommandOutput, RDSClientResolvedConfig> {
            readonly input: RestoreDBClusterFromS3CommandInput;
            constructor(input: RestoreDBClusterFromS3CommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreDBClusterFromS3CommandInput, RestoreDBClusterFromS3CommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBClusterFromSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RestoreDBClusterFromSnapshotMessage, RestoreDBClusterFromSnapshotResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RestoreDBClusterFromSnapshotCommandInput extends RestoreDBClusterFromSnapshotMessage {
    }
    export interface RestoreDBClusterFromSnapshotCommandOutput extends RestoreDBClusterFromSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p>
        *         <p>The target DB cluster is created from the source snapshot with a default
        *             configuration. If you don't specify a security group, the new DB cluster is
        *             associated with the default security group.</p>
        *         <note>
        *             <p>This action only restores the DB cluster, not the DB instances for that DB
        *                 cluster. You must invoke the <code>CreateDBInstance</code> action to create DB
        *                 instances for the restored DB cluster, specifying the identifier of the restored DB
        *                 cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after
        *                 the <code>RestoreDBClusterFromSnapshot</code> action has completed and the DB
        *                 cluster is available.</p>
        *         </note>
        *         <p>For more information on Amazon Aurora DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RestoreDBClusterFromSnapshotCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RestoreDBClusterFromSnapshotCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RestoreDBClusterFromSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestoreDBClusterFromSnapshotCommandInput} for command's `input` shape.
        * @see {@link RestoreDBClusterFromSnapshotCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RestoreDBClusterFromSnapshotCommand extends $Command<RestoreDBClusterFromSnapshotCommandInput, RestoreDBClusterFromSnapshotCommandOutput, RDSClientResolvedConfig> {
            readonly input: RestoreDBClusterFromSnapshotCommandInput;
            constructor(input: RestoreDBClusterFromSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreDBClusterFromSnapshotCommandInput, RestoreDBClusterFromSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBClusterToPointInTimeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RestoreDBClusterToPointInTimeMessage, RestoreDBClusterToPointInTimeResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RestoreDBClusterToPointInTimeCommandInput extends RestoreDBClusterToPointInTimeMessage {
    }
    export interface RestoreDBClusterToPointInTimeCommandOutput extends RestoreDBClusterToPointInTimeResult, __MetadataBearer {
    }
    /**
        * <p>Restores a DB cluster to an arbitrary point in time. Users can restore to any point
        *             in time before <code>LatestRestorableTime</code> for up to
        *                 <code>BackupRetentionPeriod</code> days. The target DB cluster is created from the
        *             source DB cluster with the same configuration as the original DB cluster, except that
        *             the new DB cluster is created with the default DB security group.</p>
        *         <note>
        *             <p>For Aurora, this action only restores the DB cluster, not the DB instances for that DB
        *                 cluster. You must invoke the <code>CreateDBInstance</code> action to create DB
        *                 instances for the restored DB cluster, specifying the identifier of the restored DB
        *                 cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after
        *                 the <code>RestoreDBClusterToPointInTime</code> action has completed and the DB
        *                 cluster is available.</p>
        *         </note>
        *         <p>For more information on Amazon Aurora DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RestoreDBClusterToPointInTimeCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RestoreDBClusterToPointInTimeCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RestoreDBClusterToPointInTimeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestoreDBClusterToPointInTimeCommandInput} for command's `input` shape.
        * @see {@link RestoreDBClusterToPointInTimeCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RestoreDBClusterToPointInTimeCommand extends $Command<RestoreDBClusterToPointInTimeCommandInput, RestoreDBClusterToPointInTimeCommandOutput, RDSClientResolvedConfig> {
            readonly input: RestoreDBClusterToPointInTimeCommandInput;
            constructor(input: RestoreDBClusterToPointInTimeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreDBClusterToPointInTimeCommandInput, RestoreDBClusterToPointInTimeCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBInstanceFromDBSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RestoreDBInstanceFromDBSnapshotMessage, RestoreDBInstanceFromDBSnapshotResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RestoreDBInstanceFromDBSnapshotCommandInput extends RestoreDBInstanceFromDBSnapshotMessage {
    }
    export interface RestoreDBInstanceFromDBSnapshotCommandOutput extends RestoreDBInstanceFromDBSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with most
        *             of the source's original configuration, including the default security group and DB parameter group. By default, the new DB
        *             instance is created as a Single-AZ deployment, except when the instance is a SQL Server instance that has an option group
        *             associated with mirroring. In this case, the instance becomes a Multi-AZ deployment, not a Single-AZ deployment.</p>
        *         <p>If you want to replace your original DB instance with the new, restored DB instance, then rename your original DB instance
        *             before you call the RestoreDBInstanceFromDBSnapshot action. RDS doesn't allow two DB instances with the same name. After you
        *             have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as
        *             the DBInstanceIdentifier in the call to the RestoreDBInstanceFromDBSnapshot action. The result is that you replace the original
        *             DB instance with the DB instance created from the snapshot.</p>
        *         <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code>
        *       must be the ARN of the shared DB snapshot.</p>
        *         <note>
        *             <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RestoreDBInstanceFromDBSnapshotCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RestoreDBInstanceFromDBSnapshotCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RestoreDBInstanceFromDBSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestoreDBInstanceFromDBSnapshotCommandInput} for command's `input` shape.
        * @see {@link RestoreDBInstanceFromDBSnapshotCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RestoreDBInstanceFromDBSnapshotCommand extends $Command<RestoreDBInstanceFromDBSnapshotCommandInput, RestoreDBInstanceFromDBSnapshotCommandOutput, RDSClientResolvedConfig> {
            readonly input: RestoreDBInstanceFromDBSnapshotCommandInput;
            constructor(input: RestoreDBInstanceFromDBSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreDBInstanceFromDBSnapshotCommandInput, RestoreDBInstanceFromDBSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBInstanceFromS3Command' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RestoreDBInstanceFromS3Message, RestoreDBInstanceFromS3Result } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RestoreDBInstanceFromS3CommandInput extends RestoreDBInstanceFromS3Message {
    }
    export interface RestoreDBInstanceFromS3CommandOutput extends RestoreDBInstanceFromS3Result, __MetadataBearer {
    }
    /**
        * <p>Amazon Relational Database Service (Amazon RDS)
        *             supports importing MySQL databases by using backup files.
        *             You can create a backup of your on-premises database,
        *             store it on Amazon Simple Storage Service (Amazon S3),
        *             and then restore the backup file onto a new Amazon RDS DB instance running MySQL.
        *             For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Procedural.Importing.html">Importing Data into an Amazon RDS MySQL DB Instance</a>
        *             in the <i>Amazon RDS User Guide.</i>
        *          </p>
        *         <p>This command doesn't apply to RDS Custom.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RestoreDBInstanceFromS3Command } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RestoreDBInstanceFromS3Command } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RestoreDBInstanceFromS3Command(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestoreDBInstanceFromS3CommandInput} for command's `input` shape.
        * @see {@link RestoreDBInstanceFromS3CommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RestoreDBInstanceFromS3Command extends $Command<RestoreDBInstanceFromS3CommandInput, RestoreDBInstanceFromS3CommandOutput, RDSClientResolvedConfig> {
            readonly input: RestoreDBInstanceFromS3CommandInput;
            constructor(input: RestoreDBInstanceFromS3CommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreDBInstanceFromS3CommandInput, RestoreDBInstanceFromS3CommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBInstanceToPointInTimeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RestoreDBInstanceToPointInTimeMessage, RestoreDBInstanceToPointInTimeResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RestoreDBInstanceToPointInTimeCommandInput extends RestoreDBInstanceToPointInTimeMessage {
    }
    export interface RestoreDBInstanceToPointInTimeCommandOutput extends RestoreDBInstanceToPointInTimeResult, __MetadataBearer {
    }
    /**
        * <p>Restores a DB instance to an arbitrary point in time. You can restore to any point in time before the time identified by the LatestRestorableTime property. You can restore to a point up to the number of days specified by the BackupRetentionPeriod property.</p>
        *         <p>The target database is created with most of the original configuration, but in a
        *             system-selected Availability Zone, with the default security group, the default subnet
        *             group, and the default DB parameter group. By default, the new DB instance is created as
        *             a single-AZ deployment except when the instance is a SQL Server instance that has an
        *             option group that is associated with mirroring; in this case, the instance becomes a
        *             mirrored deployment and not a single-AZ deployment.</p>
        *         <note>
        *             <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterToPointInTime</code>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RestoreDBInstanceToPointInTimeCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RestoreDBInstanceToPointInTimeCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RestoreDBInstanceToPointInTimeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RestoreDBInstanceToPointInTimeCommandInput} for command's `input` shape.
        * @see {@link RestoreDBInstanceToPointInTimeCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RestoreDBInstanceToPointInTimeCommand extends $Command<RestoreDBInstanceToPointInTimeCommandInput, RestoreDBInstanceToPointInTimeCommandOutput, RDSClientResolvedConfig> {
            readonly input: RestoreDBInstanceToPointInTimeCommandInput;
            constructor(input: RestoreDBInstanceToPointInTimeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RestoreDBInstanceToPointInTimeCommandInput, RestoreDBInstanceToPointInTimeCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RevokeDBSecurityGroupIngressCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RevokeDBSecurityGroupIngressMessage, RevokeDBSecurityGroupIngressResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface RevokeDBSecurityGroupIngressCommandInput extends RevokeDBSecurityGroupIngressMessage {
    }
    export interface RevokeDBSecurityGroupIngressCommandOutput extends RevokeDBSecurityGroupIngressResult, __MetadataBearer {
    }
    /**
        * <p>Revokes ingress from a DBSecurityGroup for previously authorized IP ranges or EC2 or VPC security groups. Required parameters for this API are one of CIDRIP, EC2SecurityGroupId for VPC, or (EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, RevokeDBSecurityGroupIngressCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, RevokeDBSecurityGroupIngressCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new RevokeDBSecurityGroupIngressCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RevokeDBSecurityGroupIngressCommandInput} for command's `input` shape.
        * @see {@link RevokeDBSecurityGroupIngressCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class RevokeDBSecurityGroupIngressCommand extends $Command<RevokeDBSecurityGroupIngressCommandInput, RevokeDBSecurityGroupIngressCommandOutput, RDSClientResolvedConfig> {
            readonly input: RevokeDBSecurityGroupIngressCommandInput;
            constructor(input: RevokeDBSecurityGroupIngressCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RevokeDBSecurityGroupIngressCommandInput, RevokeDBSecurityGroupIngressCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartActivityStreamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartActivityStreamRequest, StartActivityStreamResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface StartActivityStreamCommandInput extends StartActivityStreamRequest {
    }
    export interface StartActivityStreamCommandOutput extends StartActivityStreamResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a database activity stream to monitor activity on the database.
        *             For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a>
        *             in the <i>Amazon Aurora User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, StartActivityStreamCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, StartActivityStreamCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new StartActivityStreamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartActivityStreamCommandInput} for command's `input` shape.
        * @see {@link StartActivityStreamCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class StartActivityStreamCommand extends $Command<StartActivityStreamCommandInput, StartActivityStreamCommandOutput, RDSClientResolvedConfig> {
            readonly input: StartActivityStreamCommandInput;
            constructor(input: StartActivityStreamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartActivityStreamCommandInput, StartActivityStreamCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartDBClusterMessage, StartDBClusterResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface StartDBClusterCommandInput extends StartDBClusterMessage {
    }
    export interface StartDBClusterCommandOutput extends StartDBClusterResult, __MetadataBearer {
    }
    /**
        * <p>Starts an Amazon Aurora DB cluster that was stopped using the Amazon Web Services console, the stop-db-cluster
        *        CLI command, or the StopDBCluster action.</p>
        *         <p>For more information, see
        *            <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html">
        *                Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <note>
        *             <p>This action only applies to Aurora DB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, StartDBClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, StartDBClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new StartDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartDBClusterCommandInput} for command's `input` shape.
        * @see {@link StartDBClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class StartDBClusterCommand extends $Command<StartDBClusterCommandInput, StartDBClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: StartDBClusterCommandInput;
            constructor(input: StartDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartDBClusterCommandInput, StartDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartDBInstanceAutomatedBackupsReplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartDBInstanceAutomatedBackupsReplicationMessage, StartDBInstanceAutomatedBackupsReplicationResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface StartDBInstanceAutomatedBackupsReplicationCommandInput extends StartDBInstanceAutomatedBackupsReplicationMessage {
    }
    export interface StartDBInstanceAutomatedBackupsReplicationCommandOutput extends StartDBInstanceAutomatedBackupsReplicationResult, __MetadataBearer {
    }
    /**
        * <p>Enables replication of automated backups to a different Amazon Web Services Region.</p>
        *         <p>This command doesn't apply to RDS Custom.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReplicateBackups.html">
        *             Replicating Automated Backups to Another Amazon Web Services Region</a> in the <i>Amazon RDS User Guide.</i>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, StartDBInstanceAutomatedBackupsReplicationCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, StartDBInstanceAutomatedBackupsReplicationCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new StartDBInstanceAutomatedBackupsReplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartDBInstanceAutomatedBackupsReplicationCommandInput} for command's `input` shape.
        * @see {@link StartDBInstanceAutomatedBackupsReplicationCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class StartDBInstanceAutomatedBackupsReplicationCommand extends $Command<StartDBInstanceAutomatedBackupsReplicationCommandInput, StartDBInstanceAutomatedBackupsReplicationCommandOutput, RDSClientResolvedConfig> {
            readonly input: StartDBInstanceAutomatedBackupsReplicationCommandInput;
            constructor(input: StartDBInstanceAutomatedBackupsReplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartDBInstanceAutomatedBackupsReplicationCommandInput, StartDBInstanceAutomatedBackupsReplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartDBInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartDBInstanceMessage, StartDBInstanceResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface StartDBInstanceCommandInput extends StartDBInstanceMessage {
    }
    export interface StartDBInstanceCommandOutput extends StartDBInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Starts an Amazon RDS DB instance that was stopped using the Amazon Web Services console, the stop-db-instance CLI command, or the StopDBInstance action.</p>
        *         <p>For more information, see
        *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StartInstance.html">
        *                 Starting an Amazon RDS DB instance That Was Previously Stopped</a> in the
        *             <i>Amazon RDS User Guide.</i>
        *          </p>
        *         <note>
        *             <p>This command doesn't apply to RDS Custom, Aurora MySQL, and Aurora PostgreSQL.
        *             For Aurora DB clusters, use <code>StartDBCluster</code> instead.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, StartDBInstanceCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, StartDBInstanceCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new StartDBInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartDBInstanceCommandInput} for command's `input` shape.
        * @see {@link StartDBInstanceCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class StartDBInstanceCommand extends $Command<StartDBInstanceCommandInput, StartDBInstanceCommandOutput, RDSClientResolvedConfig> {
            readonly input: StartDBInstanceCommandInput;
            constructor(input: StartDBInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartDBInstanceCommandInput, StartDBInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartExportTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ExportTask } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { StartExportTaskMessage } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface StartExportTaskCommandInput extends StartExportTaskMessage {
    }
    export interface StartExportTaskCommandOutput extends ExportTask, __MetadataBearer {
    }
    /**
        * <p>Starts an export of a snapshot to Amazon S3.
        *             The provided IAM role must have access to the S3 bucket.</p>
        *         <p>This command doesn't apply to RDS Custom.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, StartExportTaskCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, StartExportTaskCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new StartExportTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartExportTaskCommandInput} for command's `input` shape.
        * @see {@link StartExportTaskCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class StartExportTaskCommand extends $Command<StartExportTaskCommandInput, StartExportTaskCommandOutput, RDSClientResolvedConfig> {
            readonly input: StartExportTaskCommandInput;
            constructor(input: StartExportTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartExportTaskCommandInput, StartExportTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StopActivityStreamCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopActivityStreamRequest, StopActivityStreamResponse } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface StopActivityStreamCommandInput extends StopActivityStreamRequest {
    }
    export interface StopActivityStreamCommandOutput extends StopActivityStreamResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a database activity stream that was started using the Amazon Web Services console,
        *             the <code>start-activity-stream</code> CLI command, or the <code>StartActivityStream</code> action.</p>
        *         <p>For more information, see
        *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/DBActivityStreams.html">Database Activity Streams</a>
        *             in the <i>Amazon Aurora User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, StopActivityStreamCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, StopActivityStreamCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new StopActivityStreamCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopActivityStreamCommandInput} for command's `input` shape.
        * @see {@link StopActivityStreamCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class StopActivityStreamCommand extends $Command<StopActivityStreamCommandInput, StopActivityStreamCommandOutput, RDSClientResolvedConfig> {
            readonly input: StopActivityStreamCommandInput;
            constructor(input: StopActivityStreamCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopActivityStreamCommandInput, StopActivityStreamCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StopDBClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopDBClusterMessage, StopDBClusterResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface StopDBClusterCommandInput extends StopDBClusterMessage {
    }
    export interface StopDBClusterCommandOutput extends StopDBClusterResult, __MetadataBearer {
    }
    /**
        * <p>Stops an Amazon Aurora DB cluster. When you stop a DB cluster, Aurora retains the DB cluster's
        *        metadata, including its endpoints and DB parameter groups. Aurora also
        *        retains the transaction logs so you can do a point-in-time restore if necessary.</p>
        *         <p>For more information, see
        *            <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-cluster-stop-start.html">
        *                Stopping and Starting an Aurora Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
        *         <note>
        *             <p>This action only applies to Aurora DB clusters.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, StopDBClusterCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, StopDBClusterCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new StopDBClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopDBClusterCommandInput} for command's `input` shape.
        * @see {@link StopDBClusterCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class StopDBClusterCommand extends $Command<StopDBClusterCommandInput, StopDBClusterCommandOutput, RDSClientResolvedConfig> {
            readonly input: StopDBClusterCommandInput;
            constructor(input: StopDBClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopDBClusterCommandInput, StopDBClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StopDBInstanceAutomatedBackupsReplicationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopDBInstanceAutomatedBackupsReplicationMessage, StopDBInstanceAutomatedBackupsReplicationResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface StopDBInstanceAutomatedBackupsReplicationCommandInput extends StopDBInstanceAutomatedBackupsReplicationMessage {
    }
    export interface StopDBInstanceAutomatedBackupsReplicationCommandOutput extends StopDBInstanceAutomatedBackupsReplicationResult, __MetadataBearer {
    }
    /**
        * <p>Stops automated backup replication for a DB instance.</p>
        *         <p>This command doesn't apply to RDS Custom.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ReplicateBackups.html">
        *             Replicating Automated Backups to Another Amazon Web Services Region</a> in the <i>Amazon RDS User Guide.</i>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, StopDBInstanceAutomatedBackupsReplicationCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, StopDBInstanceAutomatedBackupsReplicationCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new StopDBInstanceAutomatedBackupsReplicationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopDBInstanceAutomatedBackupsReplicationCommandInput} for command's `input` shape.
        * @see {@link StopDBInstanceAutomatedBackupsReplicationCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class StopDBInstanceAutomatedBackupsReplicationCommand extends $Command<StopDBInstanceAutomatedBackupsReplicationCommandInput, StopDBInstanceAutomatedBackupsReplicationCommandOutput, RDSClientResolvedConfig> {
            readonly input: StopDBInstanceAutomatedBackupsReplicationCommandInput;
            constructor(input: StopDBInstanceAutomatedBackupsReplicationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopDBInstanceAutomatedBackupsReplicationCommandInput, StopDBInstanceAutomatedBackupsReplicationCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StopDBInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopDBInstanceMessage, StopDBInstanceResult } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1";
    import { RDSClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient";
    export interface StopDBInstanceCommandInput extends StopDBInstanceMessage {
    }
    export interface StopDBInstanceCommandOutput extends StopDBInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Stops an Amazon RDS DB instance. When you stop a DB instance, Amazon RDS retains the DB instance's metadata, including its endpoint,
        *             DB parameter group, and option group membership. Amazon RDS also retains the transaction logs so you can do a point-in-time restore if
        *             necessary.</p>
        *         <p>For more information, see
        *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_StopInstance.html">
        *                 Stopping an Amazon RDS DB Instance Temporarily</a> in the
        *             <i>Amazon RDS User Guide.</i>
        *          </p>
        *         <note>
        *             <p>This command doesn't apply to RDS Custom, Aurora MySQL, and Aurora PostgreSQL.
        *             For Aurora clusters, use <code>StopDBCluster</code> instead.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RDSClient, StopDBInstanceCommand } from "@aws-sdk/client-rds"; // ES Modules import
        * // const { RDSClient, StopDBInstanceCommand } = require("@aws-sdk/client-rds"); // CommonJS import
        * const client = new RDSClient(config);
        * const command = new StopDBInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopDBInstanceCommandInput} for command's `input` shape.
        * @see {@link StopDBInstanceCommandOutput} for command's `response` shape.
        * @see {@link RDSClientResolvedConfig | config} for RDSClient's `config` shape.
        *
        */
    export class StopDBInstanceCommand extends $Command<StopDBInstanceCommandInput, StopDBInstanceCommandOutput, RDSClientResolvedConfig> {
            readonly input: StopDBInstanceCommandInput;
            constructor(input: StopDBInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RDSClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopDBInstanceCommandInput, StopDBInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/RDSClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddRoleToDBClusterCommandInput, AddRoleToDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AddRoleToDBClusterCommand";
    import { AddRoleToDBInstanceCommandInput, AddRoleToDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AddRoleToDBInstanceCommand";
    import { AddSourceIdentifierToSubscriptionCommandInput, AddSourceIdentifierToSubscriptionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AddSourceIdentifierToSubscriptionCommand";
    import { AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AddTagsToResourceCommand";
    import { ApplyPendingMaintenanceActionCommandInput, ApplyPendingMaintenanceActionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ApplyPendingMaintenanceActionCommand";
    import { AuthorizeDBSecurityGroupIngressCommandInput, AuthorizeDBSecurityGroupIngressCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/AuthorizeDBSecurityGroupIngressCommand";
    import { BacktrackDBClusterCommandInput, BacktrackDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/BacktrackDBClusterCommand";
    import { CancelExportTaskCommandInput, CancelExportTaskCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CancelExportTaskCommand";
    import { CopyDBClusterParameterGroupCommandInput, CopyDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyDBClusterParameterGroupCommand";
    import { CopyDBClusterSnapshotCommandInput, CopyDBClusterSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyDBClusterSnapshotCommand";
    import { CopyDBParameterGroupCommandInput, CopyDBParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyDBParameterGroupCommand";
    import { CopyDBSnapshotCommandInput, CopyDBSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyDBSnapshotCommand";
    import { CopyOptionGroupCommandInput, CopyOptionGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CopyOptionGroupCommand";
    import { CreateCustomDBEngineVersionCommandInput, CreateCustomDBEngineVersionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateCustomDBEngineVersionCommand";
    import { CreateDBClusterCommandInput, CreateDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBClusterCommand";
    import { CreateDBClusterEndpointCommandInput, CreateDBClusterEndpointCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBClusterEndpointCommand";
    import { CreateDBClusterParameterGroupCommandInput, CreateDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBClusterParameterGroupCommand";
    import { CreateDBClusterSnapshotCommandInput, CreateDBClusterSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBClusterSnapshotCommand";
    import { CreateDBInstanceCommandInput, CreateDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBInstanceCommand";
    import { CreateDBInstanceReadReplicaCommandInput, CreateDBInstanceReadReplicaCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBInstanceReadReplicaCommand";
    import { CreateDBParameterGroupCommandInput, CreateDBParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBParameterGroupCommand";
    import { CreateDBProxyCommandInput, CreateDBProxyCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBProxyCommand";
    import { CreateDBProxyEndpointCommandInput, CreateDBProxyEndpointCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBProxyEndpointCommand";
    import { CreateDBSecurityGroupCommandInput, CreateDBSecurityGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBSecurityGroupCommand";
    import { CreateDBSnapshotCommandInput, CreateDBSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBSnapshotCommand";
    import { CreateDBSubnetGroupCommandInput, CreateDBSubnetGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateDBSubnetGroupCommand";
    import { CreateEventSubscriptionCommandInput, CreateEventSubscriptionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateEventSubscriptionCommand";
    import { CreateGlobalClusterCommandInput, CreateGlobalClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateGlobalClusterCommand";
    import { CreateOptionGroupCommandInput, CreateOptionGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/CreateOptionGroupCommand";
    import { DeleteCustomDBEngineVersionCommandInput, DeleteCustomDBEngineVersionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteCustomDBEngineVersionCommand";
    import { DeleteDBClusterCommandInput, DeleteDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBClusterCommand";
    import { DeleteDBClusterEndpointCommandInput, DeleteDBClusterEndpointCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBClusterEndpointCommand";
    import { DeleteDBClusterParameterGroupCommandInput, DeleteDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBClusterParameterGroupCommand";
    import { DeleteDBClusterSnapshotCommandInput, DeleteDBClusterSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBClusterSnapshotCommand";
    import { DeleteDBInstanceAutomatedBackupCommandInput, DeleteDBInstanceAutomatedBackupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBInstanceAutomatedBackupCommand";
    import { DeleteDBInstanceCommandInput, DeleteDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBInstanceCommand";
    import { DeleteDBParameterGroupCommandInput, DeleteDBParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBParameterGroupCommand";
    import { DeleteDBProxyCommandInput, DeleteDBProxyCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBProxyCommand";
    import { DeleteDBProxyEndpointCommandInput, DeleteDBProxyEndpointCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBProxyEndpointCommand";
    import { DeleteDBSecurityGroupCommandInput, DeleteDBSecurityGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBSecurityGroupCommand";
    import { DeleteDBSnapshotCommandInput, DeleteDBSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBSnapshotCommand";
    import { DeleteDBSubnetGroupCommandInput, DeleteDBSubnetGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteDBSubnetGroupCommand";
    import { DeleteEventSubscriptionCommandInput, DeleteEventSubscriptionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteEventSubscriptionCommand";
    import { DeleteGlobalClusterCommandInput, DeleteGlobalClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteGlobalClusterCommand";
    import { DeleteOptionGroupCommandInput, DeleteOptionGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeleteOptionGroupCommand";
    import { DeregisterDBProxyTargetsCommandInput, DeregisterDBProxyTargetsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DeregisterDBProxyTargetsCommand";
    import { DescribeAccountAttributesCommandInput, DescribeAccountAttributesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeAccountAttributesCommand";
    import { DescribeCertificatesCommandInput, DescribeCertificatesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeCertificatesCommand";
    import { DescribeDBClusterBacktracksCommandInput, DescribeDBClusterBacktracksCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterBacktracksCommand";
    import { DescribeDBClusterEndpointsCommandInput, DescribeDBClusterEndpointsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterEndpointsCommand";
    import { DescribeDBClusterParameterGroupsCommandInput, DescribeDBClusterParameterGroupsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterParameterGroupsCommand";
    import { DescribeDBClusterParametersCommandInput, DescribeDBClusterParametersCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterParametersCommand";
    import { DescribeDBClustersCommandInput, DescribeDBClustersCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClustersCommand";
    import { DescribeDBClusterSnapshotAttributesCommandInput, DescribeDBClusterSnapshotAttributesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterSnapshotAttributesCommand";
    import { DescribeDBClusterSnapshotsCommandInput, DescribeDBClusterSnapshotsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBClusterSnapshotsCommand";
    import { DescribeDBEngineVersionsCommandInput, DescribeDBEngineVersionsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBEngineVersionsCommand";
    import { DescribeDBInstanceAutomatedBackupsCommandInput, DescribeDBInstanceAutomatedBackupsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBInstanceAutomatedBackupsCommand";
    import { DescribeDBInstancesCommandInput, DescribeDBInstancesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBInstancesCommand";
    import { DescribeDBLogFilesCommandInput, DescribeDBLogFilesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBLogFilesCommand";
    import { DescribeDBParameterGroupsCommandInput, DescribeDBParameterGroupsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBParameterGroupsCommand";
    import { DescribeDBParametersCommandInput, DescribeDBParametersCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBParametersCommand";
    import { DescribeDBProxiesCommandInput, DescribeDBProxiesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBProxiesCommand";
    import { DescribeDBProxyEndpointsCommandInput, DescribeDBProxyEndpointsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBProxyEndpointsCommand";
    import { DescribeDBProxyTargetGroupsCommandInput, DescribeDBProxyTargetGroupsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBProxyTargetGroupsCommand";
    import { DescribeDBProxyTargetsCommandInput, DescribeDBProxyTargetsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBProxyTargetsCommand";
    import { DescribeDBSecurityGroupsCommandInput, DescribeDBSecurityGroupsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBSecurityGroupsCommand";
    import { DescribeDBSnapshotAttributesCommandInput, DescribeDBSnapshotAttributesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBSnapshotAttributesCommand";
    import { DescribeDBSnapshotsCommandInput, DescribeDBSnapshotsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBSnapshotsCommand";
    import { DescribeDBSubnetGroupsCommandInput, DescribeDBSubnetGroupsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeDBSubnetGroupsCommand";
    import { DescribeEngineDefaultClusterParametersCommandInput, DescribeEngineDefaultClusterParametersCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEngineDefaultClusterParametersCommand";
    import { DescribeEngineDefaultParametersCommandInput, DescribeEngineDefaultParametersCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEngineDefaultParametersCommand";
    import { DescribeEventCategoriesCommandInput, DescribeEventCategoriesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEventCategoriesCommand";
    import { DescribeEventsCommandInput, DescribeEventsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEventsCommand";
    import { DescribeEventSubscriptionsCommandInput, DescribeEventSubscriptionsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeEventSubscriptionsCommand";
    import { DescribeExportTasksCommandInput, DescribeExportTasksCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeExportTasksCommand";
    import { DescribeGlobalClustersCommandInput, DescribeGlobalClustersCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeGlobalClustersCommand";
    import { DescribeOptionGroupOptionsCommandInput, DescribeOptionGroupOptionsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeOptionGroupOptionsCommand";
    import { DescribeOptionGroupsCommandInput, DescribeOptionGroupsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeOptionGroupsCommand";
    import { DescribeOrderableDBInstanceOptionsCommandInput, DescribeOrderableDBInstanceOptionsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeOrderableDBInstanceOptionsCommand";
    import { DescribePendingMaintenanceActionsCommandInput, DescribePendingMaintenanceActionsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribePendingMaintenanceActionsCommand";
    import { DescribeReservedDBInstancesCommandInput, DescribeReservedDBInstancesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeReservedDBInstancesCommand";
    import { DescribeReservedDBInstancesOfferingsCommandInput, DescribeReservedDBInstancesOfferingsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeReservedDBInstancesOfferingsCommand";
    import { DescribeSourceRegionsCommandInput, DescribeSourceRegionsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeSourceRegionsCommand";
    import { DescribeValidDBInstanceModificationsCommandInput, DescribeValidDBInstanceModificationsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DescribeValidDBInstanceModificationsCommand";
    import { DownloadDBLogFilePortionCommandInput, DownloadDBLogFilePortionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/DownloadDBLogFilePortionCommand";
    import { FailoverDBClusterCommandInput, FailoverDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/FailoverDBClusterCommand";
    import { FailoverGlobalClusterCommandInput, FailoverGlobalClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/FailoverGlobalClusterCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ListTagsForResourceCommand";
    import { ModifyCertificatesCommandInput, ModifyCertificatesCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyCertificatesCommand";
    import { ModifyCurrentDBClusterCapacityCommandInput, ModifyCurrentDBClusterCapacityCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyCurrentDBClusterCapacityCommand";
    import { ModifyCustomDBEngineVersionCommandInput, ModifyCustomDBEngineVersionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyCustomDBEngineVersionCommand";
    import { ModifyDBClusterCommandInput, ModifyDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBClusterCommand";
    import { ModifyDBClusterEndpointCommandInput, ModifyDBClusterEndpointCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBClusterEndpointCommand";
    import { ModifyDBClusterParameterGroupCommandInput, ModifyDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBClusterParameterGroupCommand";
    import { ModifyDBClusterSnapshotAttributeCommandInput, ModifyDBClusterSnapshotAttributeCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBClusterSnapshotAttributeCommand";
    import { ModifyDBInstanceCommandInput, ModifyDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBInstanceCommand";
    import { ModifyDBParameterGroupCommandInput, ModifyDBParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBParameterGroupCommand";
    import { ModifyDBProxyCommandInput, ModifyDBProxyCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBProxyCommand";
    import { ModifyDBProxyEndpointCommandInput, ModifyDBProxyEndpointCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBProxyEndpointCommand";
    import { ModifyDBProxyTargetGroupCommandInput, ModifyDBProxyTargetGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBProxyTargetGroupCommand";
    import { ModifyDBSnapshotAttributeCommandInput, ModifyDBSnapshotAttributeCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBSnapshotAttributeCommand";
    import { ModifyDBSnapshotCommandInput, ModifyDBSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBSnapshotCommand";
    import { ModifyDBSubnetGroupCommandInput, ModifyDBSubnetGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyDBSubnetGroupCommand";
    import { ModifyEventSubscriptionCommandInput, ModifyEventSubscriptionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyEventSubscriptionCommand";
    import { ModifyGlobalClusterCommandInput, ModifyGlobalClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyGlobalClusterCommand";
    import { ModifyOptionGroupCommandInput, ModifyOptionGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ModifyOptionGroupCommand";
    import { PromoteReadReplicaCommandInput, PromoteReadReplicaCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/PromoteReadReplicaCommand";
    import { PromoteReadReplicaDBClusterCommandInput, PromoteReadReplicaDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/PromoteReadReplicaDBClusterCommand";
    import { PurchaseReservedDBInstancesOfferingCommandInput, PurchaseReservedDBInstancesOfferingCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/PurchaseReservedDBInstancesOfferingCommand";
    import { RebootDBClusterCommandInput, RebootDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RebootDBClusterCommand";
    import { RebootDBInstanceCommandInput, RebootDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RebootDBInstanceCommand";
    import { RegisterDBProxyTargetsCommandInput, RegisterDBProxyTargetsCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RegisterDBProxyTargetsCommand";
    import { RemoveFromGlobalClusterCommandInput, RemoveFromGlobalClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveFromGlobalClusterCommand";
    import { RemoveRoleFromDBClusterCommandInput, RemoveRoleFromDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveRoleFromDBClusterCommand";
    import { RemoveRoleFromDBInstanceCommandInput, RemoveRoleFromDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveRoleFromDBInstanceCommand";
    import { RemoveSourceIdentifierFromSubscriptionCommandInput, RemoveSourceIdentifierFromSubscriptionCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveSourceIdentifierFromSubscriptionCommand";
    import { RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RemoveTagsFromResourceCommand";
    import { ResetDBClusterParameterGroupCommandInput, ResetDBClusterParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ResetDBClusterParameterGroupCommand";
    import { ResetDBParameterGroupCommandInput, ResetDBParameterGroupCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/ResetDBParameterGroupCommand";
    import { RestoreDBClusterFromS3CommandInput, RestoreDBClusterFromS3CommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBClusterFromS3Command";
    import { RestoreDBClusterFromSnapshotCommandInput, RestoreDBClusterFromSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBClusterFromSnapshotCommand";
    import { RestoreDBClusterToPointInTimeCommandInput, RestoreDBClusterToPointInTimeCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBClusterToPointInTimeCommand";
    import { RestoreDBInstanceFromDBSnapshotCommandInput, RestoreDBInstanceFromDBSnapshotCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBInstanceFromDBSnapshotCommand";
    import { RestoreDBInstanceFromS3CommandInput, RestoreDBInstanceFromS3CommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBInstanceFromS3Command";
    import { RestoreDBInstanceToPointInTimeCommandInput, RestoreDBInstanceToPointInTimeCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RestoreDBInstanceToPointInTimeCommand";
    import { RevokeDBSecurityGroupIngressCommandInput, RevokeDBSecurityGroupIngressCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/RevokeDBSecurityGroupIngressCommand";
    import { StartActivityStreamCommandInput, StartActivityStreamCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartActivityStreamCommand";
    import { StartDBClusterCommandInput, StartDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartDBClusterCommand";
    import { StartDBInstanceAutomatedBackupsReplicationCommandInput, StartDBInstanceAutomatedBackupsReplicationCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartDBInstanceAutomatedBackupsReplicationCommand";
    import { StartDBInstanceCommandInput, StartDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartDBInstanceCommand";
    import { StartExportTaskCommandInput, StartExportTaskCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StartExportTaskCommand";
    import { StopActivityStreamCommandInput, StopActivityStreamCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StopActivityStreamCommand";
    import { StopDBClusterCommandInput, StopDBClusterCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StopDBClusterCommand";
    import { StopDBInstanceAutomatedBackupsReplicationCommandInput, StopDBInstanceAutomatedBackupsReplicationCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StopDBInstanceAutomatedBackupsReplicationCommand";
    import { StopDBInstanceCommandInput, StopDBInstanceCommandOutput } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/commands/StopDBInstanceCommand";
    export type ServiceInputTypes = AddRoleToDBClusterCommandInput | AddRoleToDBInstanceCommandInput | AddSourceIdentifierToSubscriptionCommandInput | AddTagsToResourceCommandInput | ApplyPendingMaintenanceActionCommandInput | AuthorizeDBSecurityGroupIngressCommandInput | BacktrackDBClusterCommandInput | CancelExportTaskCommandInput | CopyDBClusterParameterGroupCommandInput | CopyDBClusterSnapshotCommandInput | CopyDBParameterGroupCommandInput | CopyDBSnapshotCommandInput | CopyOptionGroupCommandInput | CreateCustomDBEngineVersionCommandInput | CreateDBClusterCommandInput | CreateDBClusterEndpointCommandInput | CreateDBClusterParameterGroupCommandInput | CreateDBClusterSnapshotCommandInput | CreateDBInstanceCommandInput | CreateDBInstanceReadReplicaCommandInput | CreateDBParameterGroupCommandInput | CreateDBProxyCommandInput | CreateDBProxyEndpointCommandInput | CreateDBSecurityGroupCommandInput | CreateDBSnapshotCommandInput | CreateDBSubnetGroupCommandInput | CreateEventSubscriptionCommandInput | CreateGlobalClusterCommandInput | CreateOptionGroupCommandInput | DeleteCustomDBEngineVersionCommandInput | DeleteDBClusterCommandInput | DeleteDBClusterEndpointCommandInput | DeleteDBClusterParameterGroupCommandInput | DeleteDBClusterSnapshotCommandInput | DeleteDBInstanceAutomatedBackupCommandInput | DeleteDBInstanceCommandInput | DeleteDBParameterGroupCommandInput | DeleteDBProxyCommandInput | DeleteDBProxyEndpointCommandInput | DeleteDBSecurityGroupCommandInput | DeleteDBSnapshotCommandInput | DeleteDBSubnetGroupCommandInput | DeleteEventSubscriptionCommandInput | DeleteGlobalClusterCommandInput | DeleteOptionGroupCommandInput | DeregisterDBProxyTargetsCommandInput | DescribeAccountAttributesCommandInput | DescribeCertificatesCommandInput | DescribeDBClusterBacktracksCommandInput | DescribeDBClusterEndpointsCommandInput | DescribeDBClusterParameterGroupsCommandInput | DescribeDBClusterParametersCommandInput | DescribeDBClusterSnapshotAttributesCommandInput | DescribeDBClusterSnapshotsCommandInput | DescribeDBClustersCommandInput | DescribeDBEngineVersionsCommandInput | DescribeDBInstanceAutomatedBackupsCommandInput | DescribeDBInstancesCommandInput | DescribeDBLogFilesCommandInput | DescribeDBParameterGroupsCommandInput | DescribeDBParametersCommandInput | DescribeDBProxiesCommandInput | DescribeDBProxyEndpointsCommandInput | DescribeDBProxyTargetGroupsCommandInput | DescribeDBProxyTargetsCommandInput | DescribeDBSecurityGroupsCommandInput | DescribeDBSnapshotAttributesCommandInput | DescribeDBSnapshotsCommandInput | DescribeDBSubnetGroupsCommandInput | DescribeEngineDefaultClusterParametersCommandInput | DescribeEngineDefaultParametersCommandInput | DescribeEventCategoriesCommandInput | DescribeEventSubscriptionsCommandInput | DescribeEventsCommandInput | DescribeExportTasksCommandInput | DescribeGlobalClustersCommandInput | DescribeOptionGroupOptionsCommandInput | DescribeOptionGroupsCommandInput | DescribeOrderableDBInstanceOptionsCommandInput | DescribePendingMaintenanceActionsCommandInput | DescribeReservedDBInstancesCommandInput | DescribeReservedDBInstancesOfferingsCommandInput | DescribeSourceRegionsCommandInput | DescribeValidDBInstanceModificationsCommandInput | DownloadDBLogFilePortionCommandInput | FailoverDBClusterCommandInput | FailoverGlobalClusterCommandInput | ListTagsForResourceCommandInput | ModifyCertificatesCommandInput | ModifyCurrentDBClusterCapacityCommandInput | ModifyCustomDBEngineVersionCommandInput | ModifyDBClusterCommandInput | ModifyDBClusterEndpointCommandInput | ModifyDBClusterParameterGroupCommandInput | ModifyDBClusterSnapshotAttributeCommandInput | ModifyDBInstanceCommandInput | ModifyDBParameterGroupCommandInput | ModifyDBProxyCommandInput | ModifyDBProxyEndpointCommandInput | ModifyDBProxyTargetGroupCommandInput | ModifyDBSnapshotAttributeCommandInput | ModifyDBSnapshotCommandInput | ModifyDBSubnetGroupCommandInput | ModifyEventSubscriptionCommandInput | ModifyGlobalClusterCommandInput | ModifyOptionGroupCommandInput | PromoteReadReplicaCommandInput | PromoteReadReplicaDBClusterCommandInput | PurchaseReservedDBInstancesOfferingCommandInput | RebootDBClusterCommandInput | RebootDBInstanceCommandInput | RegisterDBProxyTargetsCommandInput | RemoveFromGlobalClusterCommandInput | RemoveRoleFromDBClusterCommandInput | RemoveRoleFromDBInstanceCommandInput | RemoveSourceIdentifierFromSubscriptionCommandInput | RemoveTagsFromResourceCommandInput | ResetDBClusterParameterGroupCommandInput | ResetDBParameterGroupCommandInput | RestoreDBClusterFromS3CommandInput | RestoreDBClusterFromSnapshotCommandInput | RestoreDBClusterToPointInTimeCommandInput | RestoreDBInstanceFromDBSnapshotCommandInput | RestoreDBInstanceFromS3CommandInput | RestoreDBInstanceToPointInTimeCommandInput | RevokeDBSecurityGroupIngressCommandInput | StartActivityStreamCommandInput | StartDBClusterCommandInput | StartDBInstanceAutomatedBackupsReplicationCommandInput | StartDBInstanceCommandInput | StartExportTaskCommandInput | StopActivityStreamCommandInput | StopDBClusterCommandInput | StopDBInstanceAutomatedBackupsReplicationCommandInput | StopDBInstanceCommandInput;
    export type ServiceOutputTypes = AddRoleToDBClusterCommandOutput | AddRoleToDBInstanceCommandOutput | AddSourceIdentifierToSubscriptionCommandOutput | AddTagsToResourceCommandOutput | ApplyPendingMaintenanceActionCommandOutput | AuthorizeDBSecurityGroupIngressCommandOutput | BacktrackDBClusterCommandOutput | CancelExportTaskCommandOutput | CopyDBClusterParameterGroupCommandOutput | CopyDBClusterSnapshotCommandOutput | CopyDBParameterGroupCommandOutput | CopyDBSnapshotCommandOutput | CopyOptionGroupCommandOutput | CreateCustomDBEngineVersionCommandOutput | CreateDBClusterCommandOutput | CreateDBClusterEndpointCommandOutput | CreateDBClusterParameterGroupCommandOutput | CreateDBClusterSnapshotCommandOutput | CreateDBInstanceCommandOutput | CreateDBInstanceReadReplicaCommandOutput | CreateDBParameterGroupCommandOutput | CreateDBProxyCommandOutput | CreateDBProxyEndpointCommandOutput | CreateDBSecurityGroupCommandOutput | CreateDBSnapshotCommandOutput | CreateDBSubnetGroupCommandOutput | CreateEventSubscriptionCommandOutput | CreateGlobalClusterCommandOutput | CreateOptionGroupCommandOutput | DeleteCustomDBEngineVersionCommandOutput | DeleteDBClusterCommandOutput | DeleteDBClusterEndpointCommandOutput | DeleteDBClusterParameterGroupCommandOutput | DeleteDBClusterSnapshotCommandOutput | DeleteDBInstanceAutomatedBackupCommandOutput | DeleteDBInstanceCommandOutput | DeleteDBParameterGroupCommandOutput | DeleteDBProxyCommandOutput | DeleteDBProxyEndpointCommandOutput | DeleteDBSecurityGroupCommandOutput | DeleteDBSnapshotCommandOutput | DeleteDBSubnetGroupCommandOutput | DeleteEventSubscriptionCommandOutput | DeleteGlobalClusterCommandOutput | DeleteOptionGroupCommandOutput | DeregisterDBProxyTargetsCommandOutput | DescribeAccountAttributesCommandOutput | DescribeCertificatesCommandOutput | DescribeDBClusterBacktracksCommandOutput | DescribeDBClusterEndpointsCommandOutput | DescribeDBClusterParameterGroupsCommandOutput | DescribeDBClusterParametersCommandOutput | DescribeDBClusterSnapshotAttributesCommandOutput | DescribeDBClusterSnapshotsCommandOutput | DescribeDBClustersCommandOutput | DescribeDBEngineVersionsCommandOutput | DescribeDBInstanceAutomatedBackupsCommandOutput | DescribeDBInstancesCommandOutput | DescribeDBLogFilesCommandOutput | DescribeDBParameterGroupsCommandOutput | DescribeDBParametersCommandOutput | DescribeDBProxiesCommandOutput | DescribeDBProxyEndpointsCommandOutput | DescribeDBProxyTargetGroupsCommandOutput | DescribeDBProxyTargetsCommandOutput | DescribeDBSecurityGroupsCommandOutput | DescribeDBSnapshotAttributesCommandOutput | DescribeDBSnapshotsCommandOutput | DescribeDBSubnetGroupsCommandOutput | DescribeEngineDefaultClusterParametersCommandOutput | DescribeEngineDefaultParametersCommandOutput | DescribeEventCategoriesCommandOutput | DescribeEventSubscriptionsCommandOutput | DescribeEventsCommandOutput | DescribeExportTasksCommandOutput | DescribeGlobalClustersCommandOutput | DescribeOptionGroupOptionsCommandOutput | DescribeOptionGroupsCommandOutput | DescribeOrderableDBInstanceOptionsCommandOutput | DescribePendingMaintenanceActionsCommandOutput | DescribeReservedDBInstancesCommandOutput | DescribeReservedDBInstancesOfferingsCommandOutput | DescribeSourceRegionsCommandOutput | DescribeValidDBInstanceModificationsCommandOutput | DownloadDBLogFilePortionCommandOutput | FailoverDBClusterCommandOutput | FailoverGlobalClusterCommandOutput | ListTagsForResourceCommandOutput | ModifyCertificatesCommandOutput | ModifyCurrentDBClusterCapacityCommandOutput | ModifyCustomDBEngineVersionCommandOutput | ModifyDBClusterCommandOutput | ModifyDBClusterEndpointCommandOutput | ModifyDBClusterParameterGroupCommandOutput | ModifyDBClusterSnapshotAttributeCommandOutput | ModifyDBInstanceCommandOutput | ModifyDBParameterGroupCommandOutput | ModifyDBProxyCommandOutput | ModifyDBProxyEndpointCommandOutput | ModifyDBProxyTargetGroupCommandOutput | ModifyDBSnapshotAttributeCommandOutput | ModifyDBSnapshotCommandOutput | ModifyDBSubnetGroupCommandOutput | ModifyEventSubscriptionCommandOutput | ModifyGlobalClusterCommandOutput | ModifyOptionGroupCommandOutput | PromoteReadReplicaCommandOutput | PromoteReadReplicaDBClusterCommandOutput | PurchaseReservedDBInstancesOfferingCommandOutput | RebootDBClusterCommandOutput | RebootDBInstanceCommandOutput | RegisterDBProxyTargetsCommandOutput | RemoveFromGlobalClusterCommandOutput | RemoveRoleFromDBClusterCommandOutput | RemoveRoleFromDBInstanceCommandOutput | RemoveSourceIdentifierFromSubscriptionCommandOutput | RemoveTagsFromResourceCommandOutput | ResetDBClusterParameterGroupCommandOutput | ResetDBParameterGroupCommandOutput | RestoreDBClusterFromS3CommandOutput | RestoreDBClusterFromSnapshotCommandOutput | RestoreDBClusterToPointInTimeCommandOutput | RestoreDBInstanceFromDBSnapshotCommandOutput | RestoreDBInstanceFromS3CommandOutput | RestoreDBInstanceToPointInTimeCommandOutput | RevokeDBSecurityGroupIngressCommandOutput | StartActivityStreamCommandOutput | StartDBClusterCommandOutput | StartDBInstanceAutomatedBackupsReplicationCommandOutput | StartDBInstanceCommandOutput | StartExportTaskCommandOutput | StopActivityStreamCommandOutput | StopDBClusterCommandOutput | StopDBInstanceAutomatedBackupsReplicationCommandOutput | StopDBInstanceCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type RDSClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of RDSClient class constructor that set the region, credentials and other options.
        */
    export interface RDSClientConfig extends RDSClientConfigType {
    }
    type RDSClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of RDSClient class. This is resolved and normalized from the {@link RDSClientConfig | constructor configuration interface}.
        */
    export interface RDSClientResolvedConfig extends RDSClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon Relational Database Service</fullname>
        *         <p></p>
        *
        *         <p>Amazon Relational Database Service (Amazon RDS) is a web service that makes it easier to set up, operate, and
        *           scale a relational database in the cloud. It provides cost-efficient, resizeable capacity for an industry-standard relational
        *           database and manages common database administration tasks, freeing up developers to focus on what makes their applications
        *           and businesses unique.</p>
        *         <p>Amazon RDS gives you access to the capabilities of a MySQL, MariaDB, PostgreSQL, Microsoft SQL Server,
        *           Oracle, or Amazon Aurora database server. These capabilities mean that the code, applications, and tools
        *           you already use today with your existing databases work with Amazon RDS without modification. Amazon RDS
        *           automatically backs up your database and maintains the database software that powers your DB instance. Amazon RDS
        *           is flexible: you can scale your DB instance's compute resources and storage capacity to meet your
        *           application's demand. As with all Amazon Web Services, there are no up-front investments, and you pay only for
        *           the resources you use.</p>
        *         <p>This interface reference for Amazon RDS contains documentation for a programming or command line interface
        *           you can use to manage Amazon RDS. Amazon RDS is asynchronous, which means that some interfaces might
        *           require techniques such as polling or callback functions to determine when a command has been applied. In this
        *           reference, the parameter descriptions indicate whether a command is applied immediately, on the next instance reboot,
        *           or during the maintenance window. The reference structure is as follows, and we list following some related topics
        *           from the user guide.</p>
        *         <p>
        *             <b>Amazon RDS API Reference</b>
        *          </p>
        *         <ul>
        *             <li>
        *                 <p>For the alphabetical list of API actions, see
        *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Operations.html">API Actions</a>.</p>
        *             </li>
        *             <li>
        *                 <p>For the alphabetical list of data types, see
        *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_Types.html">Data Types</a>.</p>
        *             </li>
        *             <li>
        *                 <p>For a list of common query parameters, see
        *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonParameters.html">Common Parameters</a>.</p>
        *             </li>
        *             <li>
        *                 <p>For descriptions of the error codes, see
        *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/CommonErrors.html">Common Errors</a>.</p>
        *             </li>
        *          </ul>
        *         <p>
        *             <b>Amazon RDS User Guide</b>
        *          </p>
        *         <ul>
        *             <li>
        *                 <p>For a summary of the Amazon RDS interfaces, see
        *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html#Welcome.Interfaces">Available RDS Interfaces</a>.</p>
        *             </li>
        *             <li>
        *                 <p>For more information about how to use the Query API, see
        *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Using_the_Query_API.html">Using the Query API</a>.</p>
        *             </li>
        *          </ul>
        */
    export class RDSClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, RDSClientResolvedConfig> {
            /**
                * The resolved configuration of RDSClient class. This is resolved and normalized from the {@link RDSClientConfig | constructor configuration interface}.
                */
            readonly config: RDSClientResolvedConfig;
            constructor(configuration: RDSClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { RDSServiceException as __BaseException } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/RDSServiceException";
    /**
        * <p>Describes a quota for an Amazon Web Services account.</p>
        *         <p>The following are account quotas:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>AllocatedStorage</code> - The total allocated storage per account, in GiB.
        *                     The used value is the total allocated storage in the account, in GiB.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>AuthorizationsPerDBSecurityGroup</code> - The number of ingress rules per DB security group.
        *                   The used value is the highest number of ingress rules in a DB security group in the account. Other
        *                   DB security groups in the account might have a lower number of ingress rules.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>CustomEndpointsPerDBCluster</code> - The number of custom endpoints per DB cluster.
        *                   The used value is the highest number of custom endpoints in a DB clusters in the account. Other
        *                   DB clusters in the account might have a lower number of custom endpoints.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DBClusterParameterGroups</code> - The number of DB cluster parameter groups
        *                     per account, excluding default parameter groups. The used value is the count of
        *                     nondefault DB cluster parameter groups in the account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DBClusterRoles</code> - The number of associated Amazon Web Services Identity and Access Management (IAM) roles per DB cluster.
        *                   The used value is the highest number of associated IAM roles for a DB cluster in the account. Other
        *                   DB clusters in the account might have a lower number of associated IAM roles.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DBClusters</code> - The number of DB clusters per account.
        *                   The used value is the count of DB clusters in the account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DBInstanceRoles</code> - The number of associated IAM roles per DB instance.
        *                   The used value is the highest number of associated IAM roles for a DB instance in the account. Other
        *                   DB instances in the account might have a lower number of associated IAM roles.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DBInstances</code> - The number of DB instances per account.
        *                   The used value is the count of the DB instances in the account.</p>
        *                 <p>Amazon RDS DB instances, Amazon Aurora DB instances, Amazon Neptune instances, and Amazon DocumentDB
        *                       instances apply to this quota.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DBParameterGroups</code> - The number of DB parameter groups per account,
        *                     excluding default parameter groups. The used value is the count of nondefault DB
        *                     parameter groups in the account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DBSecurityGroups</code> - The number of DB security groups (not VPC
        *                     security groups) per account, excluding the default security group. The used
        *                     value is the count of nondefault DB security groups in the account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DBSubnetGroups</code> - The number of DB subnet groups per account.
        *                   The used value is the count of the DB subnet groups in the account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>EventSubscriptions</code> - The number of event subscriptions per account.
        *                   The used value is the count of the event subscriptions in the account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>ManualClusterSnapshots</code> - The number of manual DB cluster snapshots per account.
        *                   The used value is the count of the manual DB cluster snapshots in the account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>ManualSnapshots</code> - The number of manual DB instance snapshots per account.
        *                   The used value is the count of the manual DB instance snapshots in the account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>OptionGroups</code> - The number of DB option groups per account, excluding
        *                     default option groups. The used value is the count of nondefault DB option
        *                     groups in the account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>ReadReplicasPerMaster</code> - The number of read replicas per DB
        *                     instance. The used value is the highest number of read replicas for a DB
        *                     instance in the account. Other DB instances in the account might have a lower
        *                     number of read replicas.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>ReservedDBInstances</code> - The number of reserved DB instances per account.
        *                   The used value is the count of the active reserved DB instances in the account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>SubnetsPerDBSubnetGroup</code> - The number of subnets per DB subnet group.
        *                   The used value is highest number of subnets for a DB subnet group in the account. Other
        *                   DB subnet groups in the account might have a lower number of subnets.</p>
        *             </li>
        *          </ul>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html">Quotas for Amazon RDS</a> in the
        *                 <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_Limits.html">Quotas for Amazon Aurora</a> in the
        *                 <i>Amazon Aurora User Guide</i>.</p>
        */
    export interface AccountQuota {
            /**
                * <p>The name of the Amazon RDS quota for this Amazon Web Services account.</p>
                */
            AccountQuotaName?: string;
            /**
                * <p>The amount currently used toward the quota maximum.</p>
                */
            Used?: number;
            /**
                * <p>The maximum allowed value for the quota.</p>
                */
            Max?: number;
    }
    export namespace AccountQuota {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountQuota) => any;
    }
    /**
        * <p>Data returned by the <b>DescribeAccountAttributes</b> action.</p>
        */
    export interface AccountAttributesMessage {
            /**
                * <p>A list of <code>AccountQuota</code> objects. Within this list, each quota has a name,
                *             a count of usage toward the quota maximum, and a maximum value for the quota.</p>
                */
            AccountQuotas?: AccountQuota[];
    }
    export namespace AccountAttributesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountAttributesMessage) => any;
    }
    export type ActivityStreamMode = "async" | "sync";
    export type ActivityStreamStatus = "started" | "starting" | "stopped" | "stopping";
    export interface AddRoleToDBClusterMessage {
            /**
                * <p>The name of the DB cluster to associate the IAM role with.</p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB
                *             cluster, for example <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The name of the feature for the DB cluster that the IAM role is to be associated with.
                *             For information about supported feature names, see <a>DBEngineVersion</a>.</p>
                */
            FeatureName?: string;
    }
    export namespace AddRoleToDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddRoleToDBClusterMessage) => any;
    }
    /**
        * <p>
        *             <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster.</p>
        */
    export class DBClusterNotFoundFault extends __BaseException {
            readonly name: "DBClusterNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterNotFoundFault, __BaseException>);
    }
    /**
        * <p>The specified IAM role Amazon Resource Name (ARN) is already associated with the specified DB cluster.</p>
        */
    export class DBClusterRoleAlreadyExistsFault extends __BaseException {
            readonly name: "DBClusterRoleAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterRoleAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>You have exceeded the maximum number of IAM roles that can be associated with the specified DB cluster.</p>
        */
    export class DBClusterRoleQuotaExceededFault extends __BaseException {
            readonly name: "DBClusterRoleQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterRoleQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>The requested operation can't be performed while the cluster is in this state.</p>
        */
    export class InvalidDBClusterStateFault extends __BaseException {
            readonly name: "InvalidDBClusterStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBClusterStateFault, __BaseException>);
    }
    export interface AddRoleToDBInstanceMessage {
            /**
                * <p>The name of the DB instance to associate the IAM role with.</p>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for
                *             example <code>arn:aws:iam::123456789012:role/AccessRole</code>.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The name of the feature for the DB instance that the IAM role is to be associated with.
                *             For information about supported feature names, see <a>DBEngineVersion</a>.</p>
                */
            FeatureName: string | undefined;
    }
    export namespace AddRoleToDBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddRoleToDBInstanceMessage) => any;
    }
    /**
        * <p>
        *             <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance.</p>
        */
    export class DBInstanceNotFoundFault extends __BaseException {
            readonly name: "DBInstanceNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBInstanceNotFoundFault, __BaseException>);
    }
    /**
        * <p>The specified <code>RoleArn</code> or <code>FeatureName</code> value is already associated with the DB instance.</p>
        */
    export class DBInstanceRoleAlreadyExistsFault extends __BaseException {
            readonly name: "DBInstanceRoleAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBInstanceRoleAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>You can't associate any more Amazon Web Services Identity and Access Management (IAM) roles with the DB instance because the quota has been reached.</p>
        */
    export class DBInstanceRoleQuotaExceededFault extends __BaseException {
            readonly name: "DBInstanceRoleQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBInstanceRoleQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>The DB instance isn't in a valid state.</p>
        */
    export class InvalidDBInstanceStateFault extends __BaseException {
            readonly name: "InvalidDBInstanceStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBInstanceStateFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface AddSourceIdentifierToSubscriptionMessage {
            /**
                * <p>The name of the RDS event notification subscription you want to add a source identifier to.</p>
                */
            SubscriptionName: string | undefined;
            /**
                * <p>The identifier of the event source to be added.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If the source type is a DB instance, a <code>DBInstanceIdentifier</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB cluster, a <code>DBClusterIdentifier</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB cluster snapshot, a <code>DBClusterSnapshotIdentifier</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is an RDS Proxy, a <code>DBProxyName</code> value must be supplied.</p>
                *             </li>
                *          </ul>
                */
            SourceIdentifier: string | undefined;
    }
    export namespace AddSourceIdentifierToSubscriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddSourceIdentifierToSubscriptionMessage) => any;
    }
    /**
        * <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
        */
    export interface EventSubscription {
            /**
                * <p>The Amazon Web Services customer account associated with the RDS event notification subscription.</p>
                */
            CustomerAwsId?: string;
            /**
                * <p>The RDS event notification subscription Id.</p>
                */
            CustSubscriptionId?: string;
            /**
                * <p>The topic ARN of the RDS event notification subscription.</p>
                */
            SnsTopicArn?: string;
            /**
                * <p>The status of the RDS event notification subscription.</p>
                *         <p>Constraints:</p>
                *         <p>Can be one of the following: creating | modifying | deleting | active | no-permission | topic-not-exist</p>
                *         <p>The status "no-permission" indicates that RDS no longer has permission to post to the SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.</p>
                */
            Status?: string;
            /**
                * <p>The time the RDS event notification subscription was created.</p>
                */
            SubscriptionCreationTime?: string;
            /**
                * <p>The source type for the RDS event notification subscription.</p>
                */
            SourceType?: string;
            /**
                * <p>A list of source IDs for the RDS event notification subscription.</p>
                */
            SourceIdsList?: string[];
            /**
                * <p>A list of event categories for the RDS event notification subscription.</p>
                */
            EventCategoriesList?: string[];
            /**
                * <p>A Boolean value indicating if the subscription is enabled. True indicates the subscription is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The Amazon Resource Name (ARN) for the event subscription.</p>
                */
            EventSubscriptionArn?: string;
    }
    export namespace EventSubscription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventSubscription) => any;
    }
    export interface AddSourceIdentifierToSubscriptionResult {
            /**
                * <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
                */
            EventSubscription?: EventSubscription;
    }
    export namespace AddSourceIdentifierToSubscriptionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddSourceIdentifierToSubscriptionResult) => any;
    }
    /**
        * <p>The requested source could not be found.</p>
        */
    export class SourceNotFoundFault extends __BaseException {
            readonly name: "SourceNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SourceNotFoundFault, __BaseException>);
    }
    /**
        * <p>The subscription name does not exist.</p>
        */
    export class SubscriptionNotFoundFault extends __BaseException {
            readonly name: "SubscriptionNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SubscriptionNotFoundFault, __BaseException>);
    }
    /**
        * <p>Metadata assigned to an Amazon RDS resource consisting of a key-value pair.</p>
        */
    export interface Tag {
            /**
                * <p>A key is the required name of the tag. The string value can be from 1 to 128 Unicode characters in length and can't be prefixed with <code>aws:</code> or <code>rds:</code>. The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', ':', '/', '=', '+', '-', '@' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$").</p>
                */
            Key?: string;
            /**
                * <p>A value is the optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and can't be prefixed with <code>aws:</code> or <code>rds:</code>. The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', ':', '/', '=', '+', '-', '@' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*)$").</p>
                */
            Value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p></p>
        */
    export interface AddTagsToResourceMessage {
            /**
                * <p>The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about
                *             creating an ARN,
                *         see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
                *             Constructing an RDS Amazon Resource Name (ARN)</a>.</p>
                */
            ResourceName: string | undefined;
            /**
                * <p>The tags to be assigned to the Amazon RDS resource.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace AddTagsToResourceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsToResourceMessage) => any;
    }
    /**
        * <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
        */
    export class DBProxyNotFoundFault extends __BaseException {
            readonly name: "DBProxyNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBProxyNotFoundFault, __BaseException>);
    }
    /**
        * <p>The specified target group isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
        */
    export class DBProxyTargetGroupNotFoundFault extends __BaseException {
            readonly name: "DBProxyTargetGroupNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBProxyTargetGroupNotFoundFault, __BaseException>);
    }
    /**
        * <p>
        *             <code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot.</p>
        */
    export class DBSnapshotNotFoundFault extends __BaseException {
            readonly name: "DBSnapshotNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSnapshotNotFoundFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface ApplyPendingMaintenanceActionMessage {
            /**
                * <p>The RDS Amazon Resource Name (ARN) of the resource that the
                *       pending maintenance action applies to. For information about
                *       creating an ARN,
                *       see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
                *         Constructing an RDS Amazon Resource Name (ARN)</a>.</p>
                */
            ResourceIdentifier: string | undefined;
            /**
                * <p>The pending maintenance action to apply to this resource.</p>
                *         <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>,
                *           <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code>
                *          </p>
                */
            ApplyAction: string | undefined;
            /**
                * <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in
                *            request of type <code>immediate</code> can't be undone.</p>
                *         <p>Valid values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>immediate</code> - Apply the maintenance action immediately.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>next-maintenance</code> - Apply the maintenance action during
                *             the next maintenance window for the resource.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code>
                *             opt-in requests.</p>
                *             </li>
                *          </ul>
                */
            OptInType: string | undefined;
    }
    export namespace ApplyPendingMaintenanceActionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplyPendingMaintenanceActionMessage) => any;
    }
    /**
        * <p>Provides information about a pending maintenance action for a resource.</p>
        */
    export interface PendingMaintenanceAction {
            /**
                * <p>The type of pending maintenance action that is available for the resource.
                *           Valid actions are <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>,
                *           and <code>ca-certificate-rotation</code>.</p>
                */
            Action?: string;
            /**
                * <p>The date of the maintenance window when the action is applied.
                *            The maintenance action is applied to the resource during
                *            its first maintenance window after this date.</p>
                */
            AutoAppliedAfterDate?: Date;
            /**
                * <p>The date when the maintenance action is automatically applied.</p>
                *         <p>On this date, the maintenance action is applied to the resource as soon as possible,
                *             regardless of the maintenance window for the resource. There might be a delay of
                *             one or more days from this date before the maintenance action is applied.</p>
                */
            ForcedApplyDate?: Date;
            /**
                * <p>Indicates the type of opt-in request that has been received for the resource.</p>
                */
            OptInStatus?: string;
            /**
                * <p>The effective date when the pending maintenance action is applied
                *            to the resource. This date takes into account opt-in requests received from
                *            the <code>ApplyPendingMaintenanceAction</code> API, the <code>AutoAppliedAfterDate</code>,
                *            and the <code>ForcedApplyDate</code>. This value is blank if an
                *            opt-in request has not been received and nothing has been specified as
                *            <code>AutoAppliedAfterDate</code> or <code>ForcedApplyDate</code>.</p>
                */
            CurrentApplyDate?: Date;
            /**
                * <p>A description providing more detail about the maintenance action.</p>
                */
            Description?: string;
    }
    export namespace PendingMaintenanceAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingMaintenanceAction) => any;
    }
    /**
        * <p>Describes the pending maintenance actions for a resource.</p>
        */
    export interface ResourcePendingMaintenanceActions {
            /**
                * <p>The ARN of the resource that has pending maintenance actions.</p>
                */
            ResourceIdentifier?: string;
            /**
                * <p>A list that provides details about the pending maintenance actions for the resource.</p>
                */
            PendingMaintenanceActionDetails?: PendingMaintenanceAction[];
    }
    export namespace ResourcePendingMaintenanceActions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourcePendingMaintenanceActions) => any;
    }
    export interface ApplyPendingMaintenanceActionResult {
            /**
                * <p>Describes the pending maintenance actions for a resource.</p>
                */
            ResourcePendingMaintenanceActions?: ResourcePendingMaintenanceActions;
    }
    export namespace ApplyPendingMaintenanceActionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApplyPendingMaintenanceActionResult) => any;
    }
    /**
        * <p>The specified resource ID was not found.</p>
        */
    export class ResourceNotFoundFault extends __BaseException {
            readonly name: "ResourceNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundFault, __BaseException>);
    }
    /**
        * <p>The specified CIDR IP range or Amazon EC2 security group is already authorized for
        *             the specified DB security group.</p>
        */
    export class AuthorizationAlreadyExistsFault extends __BaseException {
            readonly name: "AuthorizationAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AuthorizationAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>The DB security group authorization quota has been reached.</p>
        */
    export class AuthorizationQuotaExceededFault extends __BaseException {
            readonly name: "AuthorizationQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AuthorizationQuotaExceededFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface AuthorizeDBSecurityGroupIngressMessage {
            /**
                * <p>The name of the DB security group to add authorization to.</p>
                */
            DBSecurityGroupName: string | undefined;
            /**
                * <p>The IP range to authorize.</p>
                */
            CIDRIP?: string;
            /**
                * <p>Name of the EC2 security group to authorize.
                *         For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
                *         Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code>
                *       or <code>EC2SecurityGroupId</code> must be provided.</p>
                */
            EC2SecurityGroupName?: string;
            /**
                * <p>Id of the EC2 security group to authorize.
                *         For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
                *         Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
                */
            EC2SecurityGroupId?: string;
            /**
                * <p>Amazon Web Services account number of the owner of the EC2 security group
                *         specified in the <code>EC2SecurityGroupName</code> parameter.
                *         The Amazon Web Services access key ID isn't an acceptable value.
                *         For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
                *         Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
                */
            EC2SecurityGroupOwnerId?: string;
    }
    export namespace AuthorizeDBSecurityGroupIngressMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuthorizeDBSecurityGroupIngressMessage) => any;
    }
    /**
        * <p>This data type is used as a response element in the following actions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>AuthorizeDBSecurityGroupIngress</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DescribeDBSecurityGroups</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>RevokeDBSecurityGroupIngress</code>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface EC2SecurityGroup {
            /**
                * <p>Provides the status of the EC2 security group. Status can be "authorizing", "authorized", "revoking", and "revoked".</p>
                */
            Status?: string;
            /**
                * <p>Specifies the name of the EC2 security group.</p>
                */
            EC2SecurityGroupName?: string;
            /**
                * <p>Specifies the id of the EC2 security group.</p>
                */
            EC2SecurityGroupId?: string;
            /**
                * <p>Specifies the Amazon Web Services ID of the owner of the EC2 security group
                *         specified in the <code>EC2SecurityGroupName</code> field.</p>
                */
            EC2SecurityGroupOwnerId?: string;
    }
    export namespace EC2SecurityGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EC2SecurityGroup) => any;
    }
    /**
        * <p>This data type is used as a response element in the <code>DescribeDBSecurityGroups</code> action.</p>
        */
    export interface IPRange {
            /**
                * <p>Specifies the status of the IP range. Status can be "authorizing", "authorized", "revoking", and "revoked".</p>
                */
            Status?: string;
            /**
                * <p>Specifies the IP range.</p>
                */
            CIDRIP?: string;
    }
    export namespace IPRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IPRange) => any;
    }
    /**
        * <p>Contains the details for an Amazon RDS DB security group.</p>
        *         <p>This data type is used as a response element
        *           in the <code>DescribeDBSecurityGroups</code> action.</p>
        */
    export interface DBSecurityGroup {
            /**
                * <p>Provides the Amazon Web Services ID of the owner of a specific DB security group.</p>
                */
            OwnerId?: string;
            /**
                * <p>Specifies the name of the DB security group.</p>
                */
            DBSecurityGroupName?: string;
            /**
                * <p>Provides the description of the DB security group.</p>
                */
            DBSecurityGroupDescription?: string;
            /**
                * <p>Provides the VpcId of the DB security group.</p>
                */
            VpcId?: string;
            /**
                * <p>Contains a list of <code>EC2SecurityGroup</code> elements.</p>
                */
            EC2SecurityGroups?: EC2SecurityGroup[];
            /**
                * <p>Contains a list of <code>IPRange</code> elements.</p>
                */
            IPRanges?: IPRange[];
            /**
                * <p>The Amazon Resource Name (ARN) for the DB security group.</p>
                */
            DBSecurityGroupArn?: string;
    }
    export namespace DBSecurityGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBSecurityGroup) => any;
    }
    export interface AuthorizeDBSecurityGroupIngressResult {
            /**
                * <p>Contains the details for an Amazon RDS DB security group.</p>
                *         <p>This data type is used as a response element
                *           in the <code>DescribeDBSecurityGroups</code> action.</p>
                */
            DBSecurityGroup?: DBSecurityGroup;
    }
    export namespace AuthorizeDBSecurityGroupIngressResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuthorizeDBSecurityGroupIngressResult) => any;
    }
    /**
        * <p>
        *             <code>DBSecurityGroupName</code> doesn't refer to an existing DB security group.</p>
        */
    export class DBSecurityGroupNotFoundFault extends __BaseException {
            readonly name: "DBSecurityGroupNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSecurityGroupNotFoundFault, __BaseException>);
    }
    /**
        * <p>The state of the DB security group doesn't allow deletion.</p>
        */
    export class InvalidDBSecurityGroupStateFault extends __BaseException {
            readonly name: "InvalidDBSecurityGroupStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBSecurityGroupStateFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface BacktrackDBClusterMessage {
            /**
                * <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is
                *             stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster1</code>
                *          </p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO
                *             8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia
                *             page.</a>
                *          </p>
                *         <note>
                *             <p>If the specified time isn't a consistent time for the DB cluster,
                *                 Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p>
                *         </note>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain a valid ISO 8601 timestamp.</p>
                *             </li>
                *             <li>
                *                 <p>Can't contain a timestamp set in the future.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>2017-07-08T18:00Z</code>
                *          </p>
                */
            BacktrackTo: Date | undefined;
            /**
                * <p>A value that indicates whether to force the DB cluster to backtrack when binary logging is
                *             enabled. Otherwise, an error occurs when binary logging is enabled.</p>
                */
            Force?: boolean;
            /**
                * <p>A value that indicates whether to backtrack the DB cluster to the earliest possible
                *             backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest
                *             backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest
                *             backtrack time, an error occurs.</p>
                */
            UseEarliestTimeOnPointInTimeUnavailable?: boolean;
    }
    export namespace BacktrackDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BacktrackDBClusterMessage) => any;
    }
    /**
        * <p>This data type is used as a response element in the <code>DescribeDBClusterBacktracks</code> action.</p>
        */
    export interface DBClusterBacktrack {
            /**
                * <p>Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>Contains the backtrack identifier.</p>
                */
            BacktrackIdentifier?: string;
            /**
                * <p>The timestamp of the time to which the DB cluster was backtracked.</p>
                */
            BacktrackTo?: Date;
            /**
                * <p>The timestamp of the time from which the DB cluster was backtracked.</p>
                */
            BacktrackedFrom?: Date;
            /**
                * <p>The timestamp of the time at which the backtrack was requested.</p>
                */
            BacktrackRequestCreationTime?: Date;
            /**
                * <p>The status of the backtrack. This property returns one of the following
                *             values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>applying</code> - The backtrack is currently being applied to or rolled back from the DB cluster.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>completed</code> - The backtrack has successfully been applied to or rolled back from the DB cluster.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>failed</code> - An error occurred while the backtrack was applied to or rolled back from the DB cluster.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>pending</code> - The backtrack is currently pending application to or rollback from the DB cluster.</p>
                *             </li>
                *          </ul>
                */
            Status?: string;
    }
    export namespace DBClusterBacktrack {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterBacktrack) => any;
    }
    export interface CancelExportTaskMessage {
            /**
                * <p>The identifier of the snapshot export task to cancel.</p>
                */
            ExportTaskIdentifier: string | undefined;
    }
    export namespace CancelExportTaskMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelExportTaskMessage) => any;
    }
    /**
        * <p>Contains the details of a snapshot export to Amazon S3.</p>
        *         <p>This data type is used as a response element in the <code>DescribeExportTasks</code> action.</p>
        */
    export interface ExportTask {
            /**
                * <p>A unique identifier for the snapshot export task. This ID isn't an identifier for
                *             the Amazon S3 bucket where the snapshot is exported to.</p>
                */
            ExportTaskIdentifier?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.</p>
                */
            SourceArn?: string;
            /**
                * <p>The data exported from the snapshot. Valid values are the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>database</code> - Export all the data from a specified database.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>database.table</code>
                *                     <i>table-name</i> -
                *                 Export a table of the snapshot. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>database.schema</code>
                *                     <i>schema-name</i> - Export a database schema of the snapshot.
                *                 This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>database.schema.table</code>
                *                     <i>table-name</i> - Export a table of the database schema.
                *                 This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p>
                *             </li>
                *          </ul>
                */
            ExportOnly?: string[];
            /**
                * <p>The time that the snapshot was created.</p>
                */
            SnapshotTime?: Date;
            /**
                * <p>The time that the snapshot export task started.</p>
                */
            TaskStartTime?: Date;
            /**
                * <p>The time that the snapshot export task completed.</p>
                */
            TaskEndTime?: Date;
            /**
                * <p>The Amazon S3 bucket that the snapshot is exported to.</p>
                */
            S3Bucket?: string;
            /**
                * <p>The Amazon S3 bucket prefix that is the file name and path of the exported snapshot.</p>
                */
            S3Prefix?: string;
            /**
                * <p>The name of the IAM role that is used to write to Amazon S3 when exporting a snapshot.</p>
                */
            IamRoleArn?: string;
            /**
                * <p>The key identifier of the Amazon Web Services KMS key that is used to encrypt the snapshot when it's exported to
                *             Amazon S3. The KMS key identifier is its key ARN, key ID, alias ARN, or alias name. The IAM role used for the snapshot export
                *             must have encryption and decryption permissions to use this KMS key.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The progress status of the export task.</p>
                */
            Status?: string;
            /**
                * <p>The progress of the snapshot export task as a percentage.</p>
                */
            PercentProgress?: number;
            /**
                * <p>The total amount of data exported, in gigabytes.</p>
                */
            TotalExtractedDataInGB?: number;
            /**
                * <p>The reason the export failed, if it failed.</p>
                */
            FailureCause?: string;
            /**
                * <p>A warning about the snapshot export task.</p>
                */
            WarningMessage?: string;
    }
    export namespace ExportTask {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportTask) => any;
    }
    /**
        * <p>The export task doesn't exist.</p>
        */
    export class ExportTaskNotFoundFault extends __BaseException {
            readonly name: "ExportTaskNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ExportTaskNotFoundFault, __BaseException>);
    }
    /**
        * <p>You can't cancel an export task that has completed.</p>
        */
    export class InvalidExportTaskStateFault extends __BaseException {
            readonly name: "InvalidExportTaskStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidExportTaskStateFault, __BaseException>);
    }
    export interface CopyDBClusterParameterGroupMessage {
            /**
                * <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group.
                *             For information about
                *             creating an ARN,
                *             see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
                *                 Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must specify a valid DB cluster parameter group.</p>
                *             </li>
                *          </ul>
                */
            SourceDBClusterParameterGroupIdentifier: string | undefined;
            /**
                * <p>The identifier for the copied DB cluster parameter group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Can't be null, empty, or blank</p>
                *             </li>
                *             <li>
                *                 <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster-param-group1</code>
                *          </p>
                */
            TargetDBClusterParameterGroupIdentifier: string | undefined;
            /**
                * <p>A description for the copied DB cluster parameter group.</p>
                */
            TargetDBClusterParameterGroupDescription: string | undefined;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
    }
    export namespace CopyDBClusterParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyDBClusterParameterGroupMessage) => any;
    }
    /**
        * <p>Contains the details of an Amazon RDS DB cluster parameter group.</p>
        *         <p>This data type is used as a response element in the <code>DescribeDBClusterParameterGroups</code> action.</p>
        */
    export interface DBClusterParameterGroup {
            /**
                * <p>The name of the DB cluster parameter group.</p>
                */
            DBClusterParameterGroupName?: string;
            /**
                * <p>The name of the DB parameter group family that this DB cluster parameter group is compatible with.</p>
                */
            DBParameterGroupFamily?: string;
            /**
                * <p>Provides the customer-specified description for this DB cluster parameter group.</p>
                */
            Description?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the DB cluster parameter group.</p>
                */
            DBClusterParameterGroupArn?: string;
    }
    export namespace DBClusterParameterGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterParameterGroup) => any;
    }
    export interface CopyDBClusterParameterGroupResult {
            /**
                * <p>Contains the details of an Amazon RDS DB cluster parameter group.</p>
                *         <p>This data type is used as a response element in the <code>DescribeDBClusterParameterGroups</code> action.</p>
                */
            DBClusterParameterGroup?: DBClusterParameterGroup;
    }
    export namespace CopyDBClusterParameterGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyDBClusterParameterGroupResult) => any;
    }
    /**
        * <p>A DB parameter group with the same name exists.</p>
        */
    export class DBParameterGroupAlreadyExistsFault extends __BaseException {
            readonly name: "DBParameterGroupAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBParameterGroupAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>
        *             <code>DBParameterGroupName</code> doesn't refer to an
        *         existing DB parameter group.</p>
        */
    export class DBParameterGroupNotFoundFault extends __BaseException {
            readonly name: "DBParameterGroupNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBParameterGroupNotFoundFault, __BaseException>);
    }
    /**
        * <p>The request would result in the user exceeding the allowed number of DB parameter
        *             groups.</p>
        */
    export class DBParameterGroupQuotaExceededFault extends __BaseException {
            readonly name: "DBParameterGroupQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBParameterGroupQuotaExceededFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CopyDBClusterSnapshotMessage {
            /**
                * <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p>
                *         <p>You can't copy an encrypted, shared DB cluster snapshot from one Amazon Web Services Region to another.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must specify a valid system snapshot in the "available" state.</p>
                *             </li>
                *             <li>
                *                 <p>If the source snapshot is in the same Amazon Web Services Region as the copy, specify a valid DB snapshot identifier.</p>
                *             </li>
                *             <li>
                *                 <p>If the source snapshot is in a different Amazon Web Services Region than the copy,
                *               specify a valid DB cluster snapshot ARN. For more information, go to
                *               <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions">
                *                   Copying Snapshots Across Amazon Web Services Regions</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster-snapshot1</code>
                *          </p>
                */
            SourceDBClusterSnapshotIdentifier: string | undefined;
            /**
                * <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster-snapshot2</code>
                *          </p>
                */
            TargetDBClusterSnapshotIdentifier: string | undefined;
            /**
                * <p>The Amazon Web Services KMS key identifier for an encrypted DB cluster snapshot.
                *             The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the Amazon Web Services KMS key.</p>
                *         <p>If you copy an encrypted DB cluster snapshot from your Amazon Web Services account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new KMS key.
                *             If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.</p>
                *         <p>If you copy an encrypted DB cluster snapshot that is shared from another Amazon Web Services account, then you must specify a value for <code>KmsKeyId</code>.</p>
                *         <p>To copy an encrypted DB cluster snapshot to another Amazon Web Services Region, you must set <code>KmsKeyId</code> to the Amazon Web Services KMS key identifier
                *             you want to use to encrypt the copy of the DB cluster snapshot in the destination Amazon Web Services Region. KMS keys are specific to the Amazon Web Services
                *             Region that they are created in, and you can't use KMS keys from one Amazon Web Services Region
                *             in another Amazon Web Services Region.</p>
                *         <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter,
                *             an error is returned.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the Amazon Web Services Region that contains the
                *             source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another Amazon Web Services Region.
                *             Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same Amazon Web Services Region.</p>
                *         <p>The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be
                *             executed in the source Amazon Web Services Region that contains the encrypted DB cluster snapshot to be copied.
                *             The pre-signed URL request must contain the following parameter values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>KmsKeyId</code> - The Amazon Web Services KMS key identifier for the KMS key to use to encrypt the copy of the DB
                *                 cluster snapshot in the destination Amazon Web Services Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code>
                *                 action that is called in the destination Amazon Web Services Region, and the action contained in the pre-signed URL.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DestinationRegion</code> - The name of the Amazon Web Services Region that the DB cluster snapshot is to be created in.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster
                *                 snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example,
                *                 if you are copying an encrypted DB cluster snapshot from the us-west-2 Amazon Web Services Region, then your <code>SourceDBClusterSnapshotIdentifier</code>
                *                 looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p>
                *             </li>
                *          </ul>
                *         <p>To learn how to generate a Signature Version 4 signed request, see
                *
                *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">
                *                 Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)</a> and
                *             <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">
                *                 Signature Version 4 Signing Process</a>.</p>
                *         <note>
                *             <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the CLI)
                *                 instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid
                *                 request for the operation that can be executed in the source Amazon Web Services Region.</p>
                *         </note>
                */
            PreSignedUrl?: string;
            /**
                * <p>A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot.
                *             By default, tags are not copied.</p>
                */
            CopyTags?: boolean;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
    }
    export namespace CopyDBClusterSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyDBClusterSnapshotMessage) => any;
    }
    /**
        * <p>Contains the details for an Amazon RDS DB cluster snapshot</p>
        *         <p>This data type is used as a response element
        *           in the <code>DescribeDBClusterSnapshots</code> action.</p>
        */
    export interface DBClusterSnapshot {
            /**
                * <p>Provides the list of Availability Zones (AZs) where instances in the DB cluster snapshot can be restored.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>Specifies the identifier for the DB cluster snapshot.</p>
                */
            DBClusterSnapshotIdentifier?: string;
            /**
                * <p>Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.</p>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).</p>
                */
            SnapshotCreateTime?: Date;
            /**
                * <p>Specifies the name of the database engine for this DB cluster snapshot.</p>
                */
            Engine?: string;
            /**
                * <p>Provides the engine mode of the database engine for this DB cluster snapshot.</p>
                */
            EngineMode?: string;
            /**
                * <p>Specifies the allocated storage size in gibibytes (GiB).</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>Specifies the status of this DB cluster snapshot. Valid statuses are the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>available</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>copying</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>creating</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Status?: string;
            /**
                * <p>Specifies the port that the DB cluster was listening on at the time of the snapshot.</p>
                */
            Port?: number;
            /**
                * <p>Provides the VPC ID associated with the DB cluster snapshot.</p>
                */
            VpcId?: string;
            /**
                * <p>Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
                */
            ClusterCreateTime?: Date;
            /**
                * <p>Provides the master username for this DB cluster snapshot.</p>
                */
            MasterUsername?: string;
            /**
                * <p>Provides the version of the database engine for this DB cluster snapshot.</p>
                */
            EngineVersion?: string;
            /**
                * <p>Provides the license model information for this DB cluster snapshot.</p>
                */
            LicenseModel?: string;
            /**
                * <p>Provides the type of the DB cluster snapshot.</p>
                */
            SnapshotType?: string;
            /**
                * <p>Specifies the percentage of the estimated data that has been transferred.</p>
                */
            PercentProgress?: number;
            /**
                * <p>Specifies whether the DB cluster snapshot is encrypted.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>If <code>StorageEncrypted</code> is true, the Amazon Web Services KMS key identifier for the encrypted DB cluster snapshot.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the DB cluster snapshot.</p>
                */
            DBClusterSnapshotArn?: string;
            /**
                * <p>If the DB cluster snapshot was copied from a source DB cluster snapshot, the Amazon
                *             Resource Name (ARN) for the source DB cluster snapshot, otherwise, a null value.</p>
                */
            SourceDBClusterSnapshotArn?: string;
            /**
                * <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
                */
            IAMDatabaseAuthenticationEnabled?: boolean;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            TagList?: Tag[];
    }
    export namespace DBClusterSnapshot {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterSnapshot) => any;
    }
    export interface CopyDBClusterSnapshotResult {
            /**
                * <p>Contains the details for an Amazon RDS DB cluster snapshot</p>
                *         <p>This data type is used as a response element
                *           in the <code>DescribeDBClusterSnapshots</code> action.</p>
                */
            DBClusterSnapshot?: DBClusterSnapshot;
    }
    export namespace CopyDBClusterSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyDBClusterSnapshotResult) => any;
    }
    /**
        * <p>The user already has a DB cluster snapshot with the given identifier.</p>
        */
    export class DBClusterSnapshotAlreadyExistsFault extends __BaseException {
            readonly name: "DBClusterSnapshotAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterSnapshotAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>
        *             <code>DBClusterSnapshotIdentifier</code> doesn't refer to an existing DB cluster snapshot.</p>
        */
    export class DBClusterSnapshotNotFoundFault extends __BaseException {
            readonly name: "DBClusterSnapshotNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterSnapshotNotFoundFault, __BaseException>);
    }
    /**
        * <p>The supplied value isn't a valid DB cluster snapshot state.</p>
        */
    export class InvalidDBClusterSnapshotStateFault extends __BaseException {
            readonly name: "InvalidDBClusterSnapshotStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBClusterSnapshotStateFault, __BaseException>);
    }
    /**
        * <p>An error occurred accessing an Amazon Web Services KMS key.</p>
        */
    export class KMSKeyNotAccessibleFault extends __BaseException {
            readonly name: "KMSKeyNotAccessibleFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KMSKeyNotAccessibleFault, __BaseException>);
    }
    /**
        * <p>The request would result in the user exceeding the allowed number of DB
        *             snapshots.</p>
        */
    export class SnapshotQuotaExceededFault extends __BaseException {
            readonly name: "SnapshotQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SnapshotQuotaExceededFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CopyDBParameterGroupMessage {
            /**
                * <p>The identifier or ARN for the source DB parameter group.
                *         For information about
                *         creating an ARN,
                *         see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
                *             Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must specify a valid DB parameter group.</p>
                *             </li>
                *          </ul>
                */
            SourceDBParameterGroupIdentifier: string | undefined;
            /**
                * <p>The identifier for the copied DB parameter group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Can't be null, empty, or blank</p>
                *             </li>
                *             <li>
                *                 <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-db-parameter-group</code>
                *          </p>
                */
            TargetDBParameterGroupIdentifier: string | undefined;
            /**
                * <p>A description for the copied DB parameter group.</p>
                */
            TargetDBParameterGroupDescription: string | undefined;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
    }
    export namespace CopyDBParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyDBParameterGroupMessage) => any;
    }
    /**
        * <p>Contains the details of an Amazon RDS DB parameter group.</p>
        *         <p>This data type is used as a response element in the <code>DescribeDBParameterGroups</code> action.</p>
        */
    export interface DBParameterGroup {
            /**
                * <p>The name of the DB parameter group.</p>
                */
            DBParameterGroupName?: string;
            /**
                * <p>The name of the DB parameter group family that this DB parameter group is compatible with.</p>
                */
            DBParameterGroupFamily?: string;
            /**
                * <p>Provides the customer-specified description for this DB parameter group.</p>
                */
            Description?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the DB parameter group.</p>
                */
            DBParameterGroupArn?: string;
    }
    export namespace DBParameterGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBParameterGroup) => any;
    }
    export interface CopyDBParameterGroupResult {
            /**
                * <p>Contains the details of an Amazon RDS DB parameter group.</p>
                *         <p>This data type is used as a response element in the <code>DescribeDBParameterGroups</code> action.</p>
                */
            DBParameterGroup?: DBParameterGroup;
    }
    export namespace CopyDBParameterGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyDBParameterGroupResult) => any;
    }
    /**
        * <p></p>
        */
    export interface CopyDBSnapshotMessage {
            /**
                * <p>The identifier for the source DB snapshot.</p>
                *         <p>If the source snapshot is in the same Amazon Web Services Region as the copy, specify a valid DB
                *             snapshot identifier. For example, you might specify
                *                 <code>rds:mysql-instance1-snapshot-20130805</code>.</p>
                *         <p>If the source snapshot is in a different Amazon Web Services Region than the copy, specify a valid DB
                *             snapshot ARN. For example, you might specify
                *                 <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>.</p>
                *         <p>If you are copying from a shared manual DB snapshot,
                *           this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot.</p>
                *         <p>If you are copying an encrypted snapshot
                *             this parameter must be in the ARN format for the source Amazon Web Services Region,
                *             and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must specify a valid system snapshot in the "available" state.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>rds:mydb-2012-04-02-00-01</code>
                *          </p>
                *         <p>Example: <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>
                *          </p>
                */
            SourceDBSnapshotIdentifier: string | undefined;
            /**
                * <p>The identifier for the copy of the snapshot.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Can't be null, empty, or blank</p>
                *             </li>
                *             <li>
                *                 <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-db-snapshot</code>
                *          </p>
                */
            TargetDBSnapshotIdentifier: string | undefined;
            /**
                * <p>The Amazon Web Services KMS key identifier for an encrypted DB snapshot.
                *             The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                *         <p>If you copy an encrypted DB snapshot from your Amazon Web Services account,
                *             you can specify a value for this parameter to encrypt the copy with a new KMS key.
                *             If you don't specify a value for this parameter,
                *             then the copy of the DB snapshot is encrypted with the same Amazon Web Services KMS key as the source DB snapshot.</p>
                *         <p>If you copy an encrypted DB snapshot that is shared from another Amazon Web Services account,
                *             then you must specify a value for this parameter.</p>
                *         <p>If you specify this parameter when you copy an unencrypted snapshot,
                *             the copy is encrypted.</p>
                *         <p>If you copy an encrypted snapshot to a different Amazon Web Services Region, then you must specify
                *             an Amazon Web Services KMS key identifier for the destination Amazon Web Services Region. KMS keys are specific to the Amazon Web Services Region
                *             that they are created in, and you can't use KMS keys from one Amazon Web Services Region in another
                *             Amazon Web Services Region.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
            /**
                * <p>A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.</p>
                */
            CopyTags?: boolean;
            /**
                * <p>The URL that contains a Signature Version 4 signed request for the
                *                 <code>CopyDBSnapshot</code> API action in the source Amazon Web Services Region that contains the
                *             source DB snapshot to copy.</p>
                *         <p>You must specify this parameter when you copy an encrypted DB snapshot from another
                *             Amazon Web Services Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are
                *             copying an encrypted DB snapshot in the same Amazon Web Services Region.</p>
                *         <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action
                *             that can be executed in the source Amazon Web Services Region that contains the encrypted DB snapshot to be copied.
                *             The presigned URL request must contain the following parameter values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>DestinationRegion</code> - The Amazon Web Services Region that the encrypted DB snapshot is copied to.
                *                     This Amazon Web Services Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL.</p>
                *                 <p>For example, if you copy an encrypted DB snapshot from the us-west-2 Amazon Web Services Region
                *                     to the us-east-1 Amazon Web Services Region, then you call the <code>CopyDBSnapshot</code> action in
                *                     the us-east-1 Amazon Web Services Region and provide a presigned URL that contains a call to the
                *                         <code>CopyDBSnapshot</code> action in the us-west-2 Amazon Web Services Region. For this
                *                     example, the <code>DestinationRegion</code> in the presigned URL must be set to
                *                     the us-east-1 Amazon Web Services Region.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>KmsKeyId</code> - The Amazon Web Services KMS key identifier for the KMS key to use to encrypt the copy of the DB snapshot in the destination Amazon Web Services Region.
                *                     This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination Amazon Web Services Region,
                *                     and the action contained in the presigned URL.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied.
                *                     This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region.
                *                     For example, if you are copying an encrypted DB snapshot from the us-west-2 Amazon Web Services Region, then your <code>SourceDBSnapshotIdentifier</code> looks like
                *                     the following example: <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>.</p>
                *             </li>
                *          </ul>
                *         <p>To learn how to generate a Signature Version 4 signed request, see
                *         <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)</a> and
                *         <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>.</p>
                *         <note>
                *             <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the CLI)
                *                instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid
                *                request for the operation that can be executed in the source Amazon Web Services Region.</p>
                *         </note>
                */
            PreSignedUrl?: string;
            /**
                * <p>The name of an option group to associate with the copy of the snapshot.</p>
                *         <p>Specify this option if you are copying a snapshot from one Amazon Web Services Region to another,
                *             and your DB instance uses a nondefault option group.
                *             If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server,
                *             you must specify this option when copying across Amazon Web Services Regions.
                *             For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option group considerations</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>The external custom Availability Zone (CAZ) identifier for the target CAZ.</p>
                *         <p>Example: <code>rds-caz-aiqhTgQv</code>.</p>
                */
            TargetCustomAvailabilityZone?: string;
    }
    export namespace CopyDBSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyDBSnapshotMessage) => any;
    }
    /**
        * <p>Contains the processor features of a DB instance class.</p>
        *         <p>To specify the number of CPU cores, use the <code>coreCount</code> feature name
        *             for the <code>Name</code> parameter. To specify the number of threads per core, use the
        *             <code>threadsPerCore</code> feature name for the <code>Name</code> parameter.</p>
        *         <p>You can set the processor features of the DB instance class for a DB instance when you
        *             call one of the following actions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>CreateDBInstance</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>ModifyDBInstance</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>RestoreDBInstanceFromDBSnapshot</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>RestoreDBInstanceFromS3</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>RestoreDBInstanceToPointInTime</code>
        *                </p>
        *             </li>
        *          </ul>
        *         <p>You can view the valid processor values for a particular instance class by calling the
        *                 <code>DescribeOrderableDBInstanceOptions</code> action and specifying the
        *             instance class for the <code>DBInstanceClass</code> parameter.</p>
        *         <p>In addition, you can use the following actions for DB instance class processor information:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>DescribeDBInstances</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DescribeDBSnapshots</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DescribeValidDBInstanceModifications</code>
        *                </p>
        *             </li>
        *          </ul>
        *         <p>If you call <code>DescribeDBInstances</code>, <code>ProcessorFeature</code> returns
        *             non-null values only if the following conditions are met:</p>
        *         <ul>
        *             <li>
        *                 <p>You are accessing an Oracle DB instance.</p>
        *             </li>
        *             <li>
        *                 <p>Your Oracle DB instance class supports configuring the number of CPU cores and threads per core.</p>
        *             </li>
        *             <li>
        *                 <p>The current number CPU cores and threads is set to a non-default value.</p>
        *             </li>
        *          </ul>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#USER_ConfigureProcessor">Configuring the
        *                 Processor of the DB Instance Class</a> in the <i>Amazon RDS User Guide.
        *             </i>
        *          </p>
        */
    export interface ProcessorFeature {
            /**
                * <p>The name of the processor feature. Valid names are <code>coreCount</code> and <code>threadsPerCore</code>.</p>
                */
            Name?: string;
            /**
                * <p>The value of a processor feature name.</p>
                */
            Value?: string;
    }
    export namespace ProcessorFeature {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessorFeature) => any;
    }
    /**
        * <p>Contains the details of an Amazon RDS DB snapshot.</p>
        *         <p>This data type is used as a response element
        *           in the <code>DescribeDBSnapshots</code> action.</p>
        */
    export interface DBSnapshot {
            /**
                * <p>Specifies the identifier for the DB snapshot.</p>
                */
            DBSnapshotIdentifier?: string;
            /**
                * <p>Specifies the DB instance identifier of the DB instance this DB snapshot was created from.</p>
                */
            DBInstanceIdentifier?: string;
            /**
                * <p>Specifies when the snapshot was taken in Coordinated Universal Time (UTC). Changes for the copy when the snapshot is copied.</p>
                */
            SnapshotCreateTime?: Date;
            /**
                * <p>Specifies the name of the database engine.</p>
                */
            Engine?: string;
            /**
                * <p>Specifies the allocated storage size in gibibytes (GiB).</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>Specifies the status of this DB snapshot.</p>
                */
            Status?: string;
            /**
                * <p>Specifies the port that the database engine was listening on at the time of the snapshot.</p>
                */
            Port?: number;
            /**
                * <p>Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>Provides the VPC ID associated with the DB snapshot.</p>
                */
            VpcId?: string;
            /**
                * <p>Specifies the time in Coordinated Universal Time (UTC) when the DB instance, from
                *             which the snapshot was taken, was created.</p>
                */
            InstanceCreateTime?: Date;
            /**
                * <p>Provides the master username for the DB snapshot.</p>
                */
            MasterUsername?: string;
            /**
                * <p>Specifies the version of the database engine.</p>
                */
            EngineVersion?: string;
            /**
                * <p>License model information for the restored DB instance.</p>
                */
            LicenseModel?: string;
            /**
                * <p>Provides the type of the DB snapshot.</p>
                */
            SnapshotType?: string;
            /**
                * <p>Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.</p>
                */
            Iops?: number;
            /**
                * <p>Provides the option group name for the DB snapshot.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>The percentage of the estimated data that has been transferred.</p>
                */
            PercentProgress?: number;
            /**
                * <p>The Amazon Web Services Region that the DB snapshot was created in or copied from.</p>
                */
            SourceRegion?: string;
            /**
                * <p>The DB snapshot Amazon Resource Name (ARN) that the DB snapshot was copied from. It only has a value in the case of a cross-account or cross-Region copy.</p>
                */
            SourceDBSnapshotIdentifier?: string;
            /**
                * <p>Specifies the storage type associated with DB snapshot.</p>
                */
            StorageType?: string;
            /**
                * <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
                */
            TdeCredentialArn?: string;
            /**
                * <p>Specifies whether the DB snapshot is encrypted.</p>
                */
            Encrypted?: boolean;
            /**
                * <p>If <code>Encrypted</code> is true, the Amazon Web Services KMS key identifier
                *             for the encrypted DB snapshot.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the DB snapshot.</p>
                */
            DBSnapshotArn?: string;
            /**
                * <p>The time zone of the DB snapshot.
                *             In most cases, the <code>Timezone</code> element is empty.
                *             <code>Timezone</code> content appears only for
                *             snapshots taken from
                *             Microsoft SQL Server DB instances
                *             that were created with a time zone specified.</p>
                */
            Timezone?: string;
            /**
                * <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
                */
            IAMDatabaseAuthenticationEnabled?: boolean;
            /**
                * <p>The number of CPU cores and the number of threads per core for the DB instance class
                *             of the DB instance when the DB snapshot was created.</p>
                */
            ProcessorFeatures?: ProcessorFeature[];
            /**
                * <p>The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
                */
            DbiResourceId?: string;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            TagList?: Tag[];
            /**
                * <p>Specifies the time of the CreateDBSnapshot operation in Coordinated Universal Time (UTC). Doesn't change when the snapshot is copied.</p>
                */
            OriginalSnapshotCreateTime?: Date;
            /**
                * <p>Specifies where manual snapshots are stored: Amazon Web Services Outposts or the Amazon Web Services Region.</p>
                */
            SnapshotTarget?: string;
    }
    export namespace DBSnapshot {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBSnapshot) => any;
    }
    export interface CopyDBSnapshotResult {
            /**
                * <p>Contains the details of an Amazon RDS DB snapshot.</p>
                *         <p>This data type is used as a response element
                *           in the <code>DescribeDBSnapshots</code> action.</p>
                */
            DBSnapshot?: DBSnapshot;
    }
    export namespace CopyDBSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyDBSnapshotResult) => any;
    }
    /**
        * <p>
        *             <code>CustomAvailabilityZoneId</code> doesn't refer to an existing custom
        *             Availability Zone identifier.</p>
        */
    export class CustomAvailabilityZoneNotFoundFault extends __BaseException {
            readonly name: "CustomAvailabilityZoneNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CustomAvailabilityZoneNotFoundFault, __BaseException>);
    }
    /**
        * <p>
        *             <code>DBSnapshotIdentifier</code> is already used by an existing snapshot.</p>
        */
    export class DBSnapshotAlreadyExistsFault extends __BaseException {
            readonly name: "DBSnapshotAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSnapshotAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>The state of the DB snapshot doesn't allow deletion.</p>
        */
    export class InvalidDBSnapshotStateFault extends __BaseException {
            readonly name: "InvalidDBSnapshotStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBSnapshotStateFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CopyOptionGroupMessage {
            /**
                * <p>The identifier for the source option group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must specify a valid option group.</p>
                *             </li>
                *          </ul>
                */
            SourceOptionGroupIdentifier: string | undefined;
            /**
                * <p>The identifier for the copied option group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Can't be null, empty, or blank</p>
                *             </li>
                *             <li>
                *                 <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-option-group</code>
                *          </p>
                */
            TargetOptionGroupIdentifier: string | undefined;
            /**
                * <p>The description for the copied option group.</p>
                */
            TargetOptionGroupDescription: string | undefined;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
    }
    export namespace CopyOptionGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyOptionGroupMessage) => any;
    }
    /**
        * <p>This data type is used as a response element in the following actions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>ModifyDBInstance</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>RebootDBInstance</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>RestoreDBInstanceFromDBSnapshot</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>RestoreDBInstanceToPointInTime</code>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface DBSecurityGroupMembership {
            /**
                * <p>The name of the DB security group.</p>
                */
            DBSecurityGroupName?: string;
            /**
                * <p>The status of the DB security group.</p>
                */
            Status?: string;
    }
    export namespace DBSecurityGroupMembership {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBSecurityGroupMembership) => any;
    }
    /**
        * <p>Option settings are the actual settings being applied or configured for that option. It is used when you modify an option group or describe option groups. For example, the NATIVE_NETWORK_ENCRYPTION option has a setting called SQLNET.ENCRYPTION_SERVER that can have several different values.</p>
        */
    export interface OptionSetting {
            /**
                * <p>The name of the option that has settings that you can set.</p>
                */
            Name?: string;
            /**
                * <p>The current value of the option setting.</p>
                */
            Value?: string;
            /**
                * <p>The default value of the option setting.</p>
                */
            DefaultValue?: string;
            /**
                * <p>The description of the option setting.</p>
                */
            Description?: string;
            /**
                * <p>The DB engine specific parameter type.</p>
                */
            ApplyType?: string;
            /**
                * <p>The data type of the option setting.</p>
                */
            DataType?: string;
            /**
                * <p>The allowed values of the option setting.</p>
                */
            AllowedValues?: string;
            /**
                * <p>A Boolean value that, when true, indicates the option setting can be modified from the default.</p>
                */
            IsModifiable?: boolean;
            /**
                * <p>Indicates if the option setting is part of a collection.</p>
                */
            IsCollection?: boolean;
    }
    export namespace OptionSetting {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OptionSetting) => any;
    }
    /**
        * <p>This data type is used as a response element for queries on VPC security group membership.</p>
        */
    export interface VpcSecurityGroupMembership {
            /**
                * <p>The name of the VPC security group.</p>
                */
            VpcSecurityGroupId?: string;
            /**
                * <p>The status of the VPC security group.</p>
                */
            Status?: string;
    }
    export namespace VpcSecurityGroupMembership {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcSecurityGroupMembership) => any;
    }
    /**
        * <p>Option details.</p>
        */
    export interface Option {
            /**
                * <p>The name of the option.</p>
                */
            OptionName?: string;
            /**
                * <p>The description of the option.</p>
                */
            OptionDescription?: string;
            /**
                * <p>Indicate if this option is persistent.</p>
                */
            Persistent?: boolean;
            /**
                * <p>Indicate if this option is permanent.</p>
                */
            Permanent?: boolean;
            /**
                * <p>If required, the port configured for this option to use.</p>
                */
            Port?: number;
            /**
                * <p>The version of the option.</p>
                */
            OptionVersion?: string;
            /**
                * <p>The option settings for this option.</p>
                */
            OptionSettings?: OptionSetting[];
            /**
                * <p>If the option requires access to a port, then this DB security group allows access to the port.</p>
                */
            DBSecurityGroupMemberships?: DBSecurityGroupMembership[];
            /**
                * <p>If the option requires access to a port, then this VPC security group allows access to the port.</p>
                */
            VpcSecurityGroupMemberships?: VpcSecurityGroupMembership[];
    }
    export namespace Option {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Option) => any;
    }
    /**
        * <p></p>
        */
    export interface OptionGroup {
            /**
                * <p>Specifies the name of the option group.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>Provides a description of the option group.</p>
                */
            OptionGroupDescription?: string;
            /**
                * <p>Indicates the name of the engine that this option group can be applied to.</p>
                */
            EngineName?: string;
            /**
                * <p>Indicates the major engine version associated with this option group.</p>
                */
            MajorEngineVersion?: string;
            /**
                * <p>Indicates what options are available in the option group.</p>
                */
            Options?: Option[];
            /**
                * <p>Indicates whether this option group can be applied to both VPC
                *            and non-VPC instances. The value <code>true</code> indicates the option group
                *            can be applied to both VPC and non-VPC instances.</p>
                */
            AllowsVpcAndNonVpcInstanceMemberships?: boolean;
            /**
                * <p>If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>false</code>, this field is blank.
                *            If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>true</code> and this field is blank,
                *            then this option group can be applied to both VPC and non-VPC instances.
                *            If this field contains a value, then this option group can only be
                *            applied to instances that are in the VPC indicated by this field.</p>
                */
            VpcId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the option group.</p>
                */
            OptionGroupArn?: string;
    }
    export namespace OptionGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OptionGroup) => any;
    }
    export interface CopyOptionGroupResult {
            /**
                * <p></p>
                */
            OptionGroup?: OptionGroup;
    }
    export namespace CopyOptionGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopyOptionGroupResult) => any;
    }
    /**
        * <p>The option group you are trying to create already exists.</p>
        */
    export class OptionGroupAlreadyExistsFault extends __BaseException {
            readonly name: "OptionGroupAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OptionGroupAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>The specified option group could not be found.</p>
        */
    export class OptionGroupNotFoundFault extends __BaseException {
            readonly name: "OptionGroupNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OptionGroupNotFoundFault, __BaseException>);
    }
    /**
        * <p>The quota of 20 option groups was exceeded for this Amazon Web Services account.</p>
        */
    export class OptionGroupQuotaExceededFault extends __BaseException {
            readonly name: "OptionGroupQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OptionGroupQuotaExceededFault, __BaseException>);
    }
    export interface CreateCustomDBEngineVersionMessage {
            /**
                * <p>The database engine to use for your custom engine version (CEV). The only supported value is
                *             <code>custom-oracle-ee</code>.</p>
                */
            Engine: string | undefined;
            /**
                * <p>The name of your CEV. The name format is <code>19.<i>customized_string</i>
                *             </code>. For example,
                *             a valid name is <code>19.my_cev1</code>. This setting is required for RDS Custom for Oracle, but optional for Amazon RDS.
                *             The combination of <code>Engine</code> and <code>EngineVersion</code> is unique per customer per Region.</p>
                */
            EngineVersion: string | undefined;
            /**
                * <p>The name of an Amazon S3 bucket that contains database installation files for your CEV. For example, a valid
                *             bucket name is <code>my-custom-installation-files</code>.</p>
                */
            DatabaseInstallationFilesS3BucketName: string | undefined;
            /**
                * <p>The Amazon S3 directory that contains the database installation files for your CEV. For example, a valid
                *             bucket name is <code>123456789012/cev1</code>. If this setting isn't specified, no prefix is assumed.</p>
                */
            DatabaseInstallationFilesS3Prefix?: string;
            /**
                * <p>The Amazon Web Services KMS key identifier for an encrypted CEV. A symmetric KMS key is required for
                *             RDS Custom, but optional for Amazon RDS.</p>
                *         <p>If you have an existing symmetric KMS key in your account, you can use it with RDS Custom.
                *             No further action is necessary. If you don't already have a symmetric KMS key in your account,
                *             follow the instructions in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html#create-symmetric-cmk">
                *                 Creating symmetric KMS keys</a> in the <i>Amazon Web Services Key Management Service
                *                     Developer Guide</i>.</p>
                *         <p>You can choose the same symmetric key when you create a CEV and a DB instance, or choose different keys.</p>
                */
            KMSKeyId: string | undefined;
            /**
                * <p>An optional description of your CEV.</p>
                */
            Description?: string;
            /**
                * <p>The CEV manifest, which is a JSON document that describes the installation .zip files stored in Amazon S3.
                *             Specify the name/value pairs in a file or a quoted string. RDS Custom applies the patches in the order in which
                *             they are listed.</p>
                *         <p>The following JSON fields are valid:</p>
                *         <dl>
                *             <dt>MediaImportTemplateVersion</dt>
                *             <dd>
                *                     <p>Version of the CEV manifest. The date is in the format <code>YYYY-MM-DD</code>.</p>
                *                 </dd>
                *             <dt>databaseInstallationFileNames</dt>
                *             <dd>
                *                     <p>Ordered list of installation files for the CEV.</p>
                *                 </dd>
                *             <dt>opatchFileNames</dt>
                *             <dd>
                *                     <p>Ordered list of OPatch installers used for the Oracle DB engine.</p>
                *                 </dd>
                *             <dt>psuRuPatchFileNames</dt>
                *             <dd>
                *                     <p>The PSU and RU patches for this CEV.</p>
                *                 </dd>
                *             <dt>OtherPatchFileNames</dt>
                *             <dd>
                *                     <p>The patches that are not in the list of PSU and RU patches.
                *                     Amazon RDS applies these patches after applying the PSU and RU patches.</p>
                *                 </dd>
                *          </dl>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.preparing.manifest">
                *             Creating the CEV manifest</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            Manifest: string | undefined;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
    }
    export namespace CreateCustomDBEngineVersionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCustomDBEngineVersionMessage) => any;
    }
    /**
        * <p>A CEV with the specified name already exists.</p>
        */
    export class CustomDBEngineVersionAlreadyExistsFault extends __BaseException {
            readonly name: "CustomDBEngineVersionAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CustomDBEngineVersionAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>You have exceeded your CEV quota.</p>
        */
    export class CustomDBEngineVersionQuotaExceededFault extends __BaseException {
            readonly name: "CustomDBEngineVersionQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CustomDBEngineVersionQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>This data type is used as a response element in the action <code>DescribeDBEngineVersions</code>.</p>
        */
    export interface CharacterSet {
            /**
                * <p>The name of the character set.</p>
                */
            CharacterSetName?: string;
            /**
                * <p>The description of the character set.</p>
                */
            CharacterSetDescription?: string;
    }
    export namespace CharacterSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CharacterSet) => any;
    }
    /**
        * <p>A time zone associated with a
        *             <code>DBInstance</code>
        *             or a <code>DBSnapshot</code>.
        *             This data type is an element in the response to
        *             the <code>DescribeDBInstances</code>,
        *             the <code>DescribeDBSnapshots</code>,
        *             and the <code>DescribeDBEngineVersions</code>
        *             actions.</p>
        */
    export interface Timezone {
            /**
                * <p>The name of the time zone.</p>
                */
            TimezoneName?: string;
    }
    export namespace Timezone {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Timezone) => any;
    }
    /**
        * <p>The version of the database engine that a DB instance can be upgraded to.</p>
        */
    export interface UpgradeTarget {
            /**
                * <p>The name of the upgrade target database engine.</p>
                */
            Engine?: string;
            /**
                * <p>The version number of the upgrade target database engine.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The version of the database engine that a DB instance can be upgraded to.</p>
                */
            Description?: string;
            /**
                * <p>A value that indicates whether the target version is applied to any source DB instances that have <code>AutoMinorVersionUpgrade</code> set to true.</p>
                */
            AutoUpgrade?: boolean;
            /**
                * <p>A value that indicates whether upgrading to the target version requires upgrading the major version of the database engine.</p>
                */
            IsMajorVersionUpgrade?: boolean;
            /**
                * <p>A list of the supported DB engine modes for the target engine version.</p>
                */
            SupportedEngineModes?: string[];
            /**
                * <p>A value that indicates whether you can use Aurora parallel query with the target engine version.</p>
                */
            SupportsParallelQuery?: boolean;
            /**
                * <p>A value that indicates whether you can use Aurora global databases with the target engine version.</p>
                */
            SupportsGlobalDatabases?: boolean;
            /**
                * <p>A value that indicates whether you can use Babelfish for Aurora PostgreSQL with the target engine version.</p>
                */
            SupportsBabelfish?: boolean;
    }
    export namespace UpgradeTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpgradeTarget) => any;
    }
    /**
        * <p>This data type is used as a response element in the action <code>DescribeDBEngineVersions</code>.</p>
        */
    export interface DBEngineVersion {
            /**
                * <p>The name of the database engine.</p>
                */
            Engine?: string;
            /**
                * <p>The version number of the database engine.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The name of the DB parameter group family for the database engine.</p>
                */
            DBParameterGroupFamily?: string;
            /**
                * <p>The description of the database engine.</p>
                */
            DBEngineDescription?: string;
            /**
                * <p>The description of the database engine version.</p>
                */
            DBEngineVersionDescription?: string;
            /**
                * <p>The default character set for new instances of this engine version,
                *             if the <code>CharacterSetName</code> parameter of the CreateDBInstance API
                *             isn't specified.</p>
                */
            DefaultCharacterSet?: CharacterSet;
            /**
                * <p>A list of the character sets supported by this engine for the <code>CharacterSetName</code> parameter of the <code>CreateDBInstance</code> operation.</p>
                */
            SupportedCharacterSets?: CharacterSet[];
            /**
                * <p>A list of the character sets supported by the Oracle DB engine for the <code>NcharCharacterSetName</code> parameter of the <code>CreateDBInstance</code> operation.</p>
                */
            SupportedNcharCharacterSets?: CharacterSet[];
            /**
                * <p>A list of engine versions that this database engine version can be upgraded to.</p>
                */
            ValidUpgradeTarget?: UpgradeTarget[];
            /**
                * <p>A list of the time zones supported by this engine for the
                *             <code>Timezone</code> parameter of the <code>CreateDBInstance</code> action.</p>
                */
            SupportedTimezones?: Timezone[];
            /**
                * <p>The types of logs that the database engine has available for export to CloudWatch Logs.</p>
                */
            ExportableLogTypes?: string[];
            /**
                * <p>A value that indicates whether the engine version supports exporting the log types specified by ExportableLogTypes to CloudWatch Logs.</p>
                */
            SupportsLogExportsToCloudwatchLogs?: boolean;
            /**
                * <p>Indicates whether the database engine version supports read replicas.</p>
                */
            SupportsReadReplica?: boolean;
            /**
                * <p>A list of the supported DB engine modes.</p>
                */
            SupportedEngineModes?: string[];
            /**
                * <p>A list of features supported by the DB engine.</p>
                *         <p>The supported features vary by DB engine and DB engine version.</p>
                *         <p>To determine the supported features for a specific DB engine and DB engine version using the CLI,
                *         use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine <engine_name> --engine-version <engine_version></code>
                *          </p>
                *         <p>For example, to determine the supported features for RDS for PostgreSQL version 13.3 using the CLI,
                *         use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine postgres --engine-version 13.3</code>
                *          </p>
                *         <p>The supported features are listed under <code>SupportedFeatureNames</code> in the output.</p>
                */
            SupportedFeatureNames?: string[];
            /**
                * <p>The status of the DB engine version, either <code>available</code> or <code>deprecated</code>.</p>
                */
            Status?: string;
            /**
                * <p>A value that indicates whether you can use Aurora parallel query with a specific DB engine version.</p>
                */
            SupportsParallelQuery?: boolean;
            /**
                * <p>A value that indicates whether you can use Aurora global databases with a specific DB engine version.</p>
                */
            SupportsGlobalDatabases?: boolean;
            /**
                * <p>The major engine version of the CEV.</p>
                */
            MajorEngineVersion?: string;
            /**
                * <p>The name of the Amazon S3 bucket that contains your database installation files.</p>
                */
            DatabaseInstallationFilesS3BucketName?: string;
            /**
                * <p>The Amazon S3 directory that contains the database installation files.
                *             If not specified, then no prefix is assumed.</p>
                */
            DatabaseInstallationFilesS3Prefix?: string;
            /**
                * <p>The ARN of the custom engine version.</p>
                */
            DBEngineVersionArn?: string;
            /**
                * <p>The Amazon Web Services KMS key identifier for an encrypted CEV. This parameter is required for
                *             RDS Custom, but optional for Amazon RDS.</p>
                */
            KMSKeyId?: string;
            /**
                * <p>The creation time of the DB engine version.</p>
                */
            CreateTime?: Date;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            TagList?: Tag[];
            /**
                * <p>A value that indicates whether the engine version supports Babelfish for Aurora PostgreSQL.</p>
                */
            SupportsBabelfish?: boolean;
    }
    export namespace DBEngineVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBEngineVersion) => any;
    }
    /**
        * <p>Contains the scaling configuration of an Aurora Serverless v1 DB cluster.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless v1</a> in the
        *             <i>Amazon Aurora User Guide</i>.</p>
        */
    export interface ScalingConfiguration {
            /**
                * <p>The minimum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p>
                *         <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p>
                *         <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p>
                *         <p>The minimum capacity must be less than or equal to the maximum capacity.</p>
                */
            MinCapacity?: number;
            /**
                * <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p>
                *         <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p>
                *         <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p>
                *         <p>The maximum capacity must be greater than or equal to the minimum capacity.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>A value that indicates whether to allow or disallow automatic pause for an Aurora DB cluster in <code>serverless</code> DB engine mode.
                *             A DB cluster can be paused only when it's idle (it has no connections).</p>
                *         <note>
                *             <p>If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot.
                *                 In this case, the DB cluster is restored when there is a request to connect to it.</p>
                *         </note>
                */
            AutoPause?: boolean;
            /**
                * <p>The time, in seconds, before an Aurora DB cluster in <code>serverless</code> mode is paused.</p>
                *         <p>Specify a value between 300 and 86,400 seconds.</p>
                */
            SecondsUntilAutoPause?: number;
            /**
                * <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p>
                *         <p>
                *             <code>ForceApplyCapacityChange</code> sets the capacity to the specified value as soon as possible.</p>
                *         <p>
                *             <code>RollbackCapacityChange</code>, the default, ignores the capacity change if a scaling point isn't found in the timeout period.</p>
                *         <important>
                *             <p>If you specify <code>ForceApplyCapacityChange</code>, connections that
                *                 prevent Aurora Serverless v1 from finding a scaling point might be dropped.</p>
                *         </important>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.how-it-works.auto-scaling">
                *                     Autoscaling for Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
                */
            TimeoutAction?: string;
            /**
                * <p>The amount of time, in seconds, that Aurora Serverless v1 tries to find a scaling point
                *             to perform seamless scaling before enforcing the timeout action. The default is 300.</p>
                *         <p>Specify a value between 60 and 600 seconds.</p>
                */
            SecondsBeforeTimeout?: number;
    }
    export namespace ScalingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScalingConfiguration) => any;
    }
    /**
        * <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the
        *             <i>Amazon Aurora User Guide</i>.</p>
        */
    export interface ServerlessV2ScalingConfiguration {
            /**
                * <p>The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster.
                *             You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. The smallest value
                *             that you can use is 0.5.</p>
                */
            MinCapacity?: number;
            /**
                * <p>The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster.
                *             You can specify ACU values in half-step increments, such as 40, 40.5, 41, and so on. The largest value
                *             that you can use is 128.</p>
                */
            MaxCapacity?: number;
    }
    export namespace ServerlessV2ScalingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerlessV2ScalingConfiguration) => any;
    }
    /**
        * <p></p>
        */
    export interface CreateDBClusterMessage {
            /**
                * <p>A list of Availability Zones (AZs) where DB instances in the DB cluster can be created.</p>
                *         <p>For information on Amazon Web Services Regions and Availability Zones, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and
                *               Availability Zones</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>The number of days for which automated backups are retained.</p>
                *         <p>Default: 1</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be a value from 1 to 35</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>A value that indicates that the DB cluster should be associated with the specified CharacterSet.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            CharacterSetName?: string;
            /**
                * <p>The name for your database of up to 64 alphanumeric characters. If you do not
                *             provide a name, Amazon RDS doesn't create a database in the DB cluster you are
                *             creating.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DatabaseName?: string;
            /**
                * <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster1</code>
                *          </p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The name of the DB cluster parameter group to associate
                *             with this DB cluster. If you do not specify a value, then
                *           the default DB cluster parameter group for the specified DB engine and version is used.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the name of an existing DB cluster parameter group.</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DBClusterParameterGroupName?: string;
            /**
                * <p>A list of EC2 VPC security groups to associate with this DB cluster.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>A DB subnet group to associate with this DB cluster.</p>
                *         <p>This setting is required to create a Multi-AZ DB cluster.</p>
                *         <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p>
                *         <p>Example: <code>mydbsubnetgroup</code>
                *          </p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>The name of the database engine to be used for this DB cluster.</p>
                *         <p>Valid Values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-postgresql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mysql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            Engine: string | undefined;
            /**
                * <p>The version number of the database engine to use.</p>
                *         <p>To list all of the available engine versions for MySQL 5.6-compatible Aurora, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>To list all of the available engine versions for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>To list all of the available engine versions for Aurora PostgreSQL, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>To list all of the available engine versions for RDS for MySQL, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine mysql --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>To list all of the available engine versions for RDS for PostgreSQL, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>
                *             <b>Aurora MySQL</b>
                *          </p>
                *         <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html">MySQL on Amazon RDS Versions</a> in the
                *           <i>Amazon Aurora User Guide</i>.</p>
                *         <p>
                *             <b>Aurora PostgreSQL</b>
                *          </p>
                *         <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.20180305.html">Amazon Aurora PostgreSQL releases and engine versions</a> in the
                *            <i>Amazon Aurora User Guide</i>.</p>
                *         <p>
                *             <b>MySQL</b>
                *          </p>
                *         <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the
                *           <i>Amazon RDS User Guide</i>.</p>
                *         <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *         <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon RDS for PostgreSQL versions and extensions</a> in the
                *           <i>Amazon RDS User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            EngineVersion?: string;
            /**
                * <p>The port number on which the instances in the DB cluster accept connections.</p>
                *         <p>
                *             <b>RDS for MySQL and Aurora MySQL</b>
                *          </p>
                *         <p>Default: <code>3306</code>
                *          </p>
                *         <p>Valid values: <code>1150-65535</code>
                *          </p>
                *         <p>
                *             <b>RDS for PostgreSQL and Aurora PostgreSQL</b>
                *          </p>
                *         <p>Default: <code>5432</code>
                *          </p>
                *         <p>Valid values: <code>1150-65535</code>
                *          </p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            Port?: number;
            /**
                * <p>The name of the master user for the DB cluster.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be 1 to 16 letters or numbers.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't be a reserved word for the chosen database engine.</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            MasterUsername?: string;
            /**
                * <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
                *         <p>Constraints: Must contain from 8 to 41 characters.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            MasterUserPassword?: string;
            /**
                * <p>A value that indicates that the DB cluster should be associated with the specified option group.</p>
                *         <p>DB clusters are associated with a default option group that can't be modified.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>The daily time range during which automated backups are created
                *         if automated backups are enabled
                *         using the <code>BackupRetentionPeriod</code> parameter.</p>
                *         <p>The default is a 30-minute window selected at random from an
                *         8-hour block of time for each Amazon Web Services Region.
                *         To view the time blocks available, see
                *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow">
                *             Backup window</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Must be in Universal Coordinated Time (UTC).</p>
                *             </li>
                *             <li>
                *                 <p>Must not conflict with the preferred maintenance window.</p>
                *             </li>
                *             <li>
                *                 <p>Must be at least 30 minutes.</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
                *         <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
                *          </p>
                *         <p>The default is a 30-minute window selected at random from an
                *             8-hour block of time for each Amazon Web Services Region, occurring on a random day of the
                *             week. To see the time blocks available, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora">
                *                 Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
                *         <p>Constraints: Minimum 30-minute window.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB
                *             cluster is created as a read replica.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            ReplicationSourceIdentifier?: string;
            /**
                * <p>Tags to assign to the DB cluster.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            Tags?: Tag[];
            /**
                * <p>A value that indicates whether the DB cluster is encrypted.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>The Amazon Web Services KMS key identifier for an encrypted DB cluster.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
                *                  To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
                *         <p>When a KMS key isn't specified in <code>KmsKeyId</code>:</p>
                *         <ul>
                *             <li>
                *                 <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted
                *                     source, then Amazon RDS will use the KMS key used to encrypt the
                *                     source. Otherwise, Amazon RDS will use your default KMS key.</p>
                *             </li>
                *             <li>
                *                 <p>If the <code>StorageEncrypted</code> parameter is enabled and
                *                         <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS
                *                     will use your default KMS key.</p>
                *             </li>
                *          </ul>
                *         <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account
                *             has a different default KMS key for each Amazon Web Services Region.</p>
                *         <p>If you create a read replica of an encrypted DB cluster in another Amazon Web Services Region, you
                *             must set <code>KmsKeyId</code> to a KMS key identifier that is valid in the destination Amazon Web Services
                *             Region. This KMS key is used to encrypt the read replica in that Amazon Web Services Region.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            KmsKeyId?: string;
            /**
                * <p>A URL that contains a Signature Version 4 signed request for
                *             the <code>CreateDBCluster</code> action to be called in the source Amazon Web Services Region where the DB cluster is replicated from.
                *             Specify <code>PreSignedUrl</code> only when you are performing cross-Region replication from an encrypted DB cluster.</p>
                *         <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action
                *             that can be executed in the source Amazon Web Services Region that contains the encrypted DB cluster to be copied.</p>
                *         <p>The pre-signed URL request must contain the following parameter values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>KmsKeyId</code> - The Amazon Web Services KMS key identifier for the KMS key to use to encrypt the copy of
                *                 the DB cluster in the destination Amazon Web Services Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code>
                *                 action that is called in the destination Amazon Web Services Region, and the action contained in the pre-signed URL.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DestinationRegion</code> - The name of the Amazon Web Services Region that Aurora read replica will
                *                     be created in.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied.
                *                 This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an
                *                 encrypted DB cluster from the us-west-2 Amazon Web Services Region, then your <code>ReplicationSourceIdentifier</code> would look like
                *                 Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p>
                *             </li>
                *          </ul>
                *         <p>To learn how to generate a Signature Version 4 signed request, see
                *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">
                *                 Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)</a> and
                *             <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">
                *                 Signature Version 4 Signing Process</a>.</p>
                *         <note>
                *             <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the CLI)
                *                 instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid
                *                 request for the operation that can be executed in the source Amazon Web Services Region.</p>
                *         </note>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            PreSignedUrl?: string;
            /**
                * <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access
                *             Management (IAM) accounts to database accounts. By default, mapping isn't
                *             enabled.</p>
                *         <p>For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
                *                 IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i>.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            EnableIAMDatabaseAuthentication?: boolean;
            /**
                * <p>The target backtrack window, in seconds. To disable backtracking, set this value to
                *             0.</p>
                *         <p>Default: 0</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora MySQL DB clusters only</p>
                */
            BacktrackWindow?: number;
            /**
                * <p>The list of log types that need to be enabled for exporting to CloudWatch Logs. The values
                *             in the list depend on the DB engine being used.</p>
                *         <p>
                *             <b>RDS for MySQL</b>
                *          </p>
                *         <p>Possible values are <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
                *         <p>
                *             <b>RDS for PostgreSQL</b>
                *          </p>
                *         <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.</p>
                *         <p>
                *             <b>Aurora MySQL</b>
                *          </p>
                *         <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
                *         <p>
                *             <b>Aurora PostgreSQL</b>
                *          </p>
                *         <p>Possible value is <code>postgresql</code>.</p>
                *         <p>For more information about exporting CloudWatch Logs for Amazon RDS, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            EnableCloudwatchLogsExports?: string[];
            /**
                * <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>,
                *             <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
                *         <p>The <code>parallelquery</code> engine mode isn't required for Aurora MySQL version 1.23 and higher 1.x versions,
                *             and version 2.09 and higher 2.x versions.</p>
                *         <p>The <code>global</code> engine mode isn't required for Aurora MySQL version 1.22 and higher 1.x versions,
                *             and <code>global</code> engine mode isn't required for any 2.x versions.</p>
                *         <p>The <code>multimaster</code> engine mode only applies for DB clusters created with Aurora MySQL version 5.6.10a.</p>
                *         <p>For Aurora PostgreSQL, the <code>global</code> engine mode isn't required, and both the <code>parallelquery</code>
                *             and the <code>multimaster</code> engine modes currently aren't supported.</p>
                *         <p>Limitations and requirements apply to some DB engine modes. For more information, see the
                *             following sections in the <i>Amazon Aurora User Guide</i>:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations">
                *                         Limitations of Aurora Serverless v1</a>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations">
                *                         Limitations of Parallel Query</a>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations">
                *                         Limitations of Aurora Global Databases</a>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations">
                *                         Limitations of Multi-Master Clusters</a>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            EngineMode?: string;
            /**
                * <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            ScalingConfiguration?: ScalingConfiguration;
            /**
                * <p>A value that indicates whether the DB cluster has deletion protection enabled.
                *             The database can't be deleted when deletion protection is enabled. By default,
                *             deletion protection isn't enabled.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The global cluster ID of an Aurora cluster that becomes the primary cluster
                *             in the new global database cluster.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            GlobalClusterIdentifier?: string;
            /**
                * <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless v1 DB cluster. By default, the HTTP endpoint
                *             is disabled.</p>
                *         <p>When enabled, the HTTP endpoint provides a connectionless web service API for running
                *             SQL queries on the Aurora Serverless v1 DB cluster. You can also query your database
                *             from inside the RDS console with the query editor.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless v1</a> in the
                *             <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            EnableHttpEndpoint?: boolean;
            /**
                * <p>A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster.
                *             The default is not to copy them.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>The Active Directory directory ID to create the DB cluster in.</p>
                *         <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos authentication to authenticate users that connect to the DB cluster.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos authentication</a>
                *             in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            Domain?: string;
            /**
                * <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            DomainIAMRoleName?: string;
            /**
                * <p>A value that indicates whether to enable this DB cluster to forward write operations to the primary cluster of an
                *       Aurora global database (<a>GlobalCluster</a>). By default, write operations are not allowed on Aurora DB clusters that
                *       are secondary clusters in an Aurora global database.</p>
                *         <p>You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter
                *       enabled, a secondary cluster can forward writes to the current primary cluster and the resulting changes are replicated back to
                *       this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the
                *         primary is demoted by the <a>FailoverGlobalCluster</a> API operation, but it does nothing until then.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            EnableGlobalWriteForwarding?: boolean;
            /**
                * <p>The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example db.m6g.xlarge.
                *             Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.</p>
                *         <p>For the full list of DB instance classes and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB instance class</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting is required to create a Multi-AZ DB cluster.</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            DBClusterInstanceClass?: string;
            /**
                * <p>The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster.</p>
                *         <p>This setting is required to create a Multi-AZ DB cluster.</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>Specifies the storage type to be associated with the DB cluster.</p>
                *         <p>This setting is required to create a Multi-AZ DB cluster.</p>
                *         <p>Valid values: <code>io1</code>
                *          </p>
                *         <p>When specified, a value for the <code>Iops</code> parameter is required.</p>
                *         <p>Default: <code>io1</code>
                *          </p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            StorageType?: string;
            /**
                * <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated
                *             for each DB instance in the Multi-AZ DB cluster.</p>
                *         <p>For information about valid <code>Iops</code> values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage to improve performance</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting is required to create a Multi-AZ DB cluster.</p>
                *         <p>Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB cluster.</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            Iops?: number;
            /**
                * <p>A value that indicates whether the DB cluster is publicly accessible.</p>
                *         <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint
                *             resolves to the private IP address from within the DB cluster's virtual private cloud
                *             (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access
                *             to the DB cluster is ultimately controlled by the security group it uses. That public
                *             access isn't permitted if the security group assigned to the DB cluster doesn't permit
                *             it.</p>
                *         <p>When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address.</p>
                *         <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
                *         <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
                *         <ul>
                *             <li>
                *                 <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.</p>
                *             </li>
                *             <li>
                *                 <p>If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.</p>
                *             </li>
                *          </ul>
                *         <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
                *         <ul>
                *             <li>
                *                 <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.</p>
                *             </li>
                *             <li>
                *                 <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>A value that indicates whether minor engine upgrades are applied automatically to the DB cluster during the maintenance window.
                *             By default, minor engine upgrades are applied automatically.</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster. To turn off
                *             collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p>
                *         <p>If <code>MonitoringRoleArn</code> is specified, also set <code>MonitoringInterval</code>
                *             to a value other than 0.</p>
                *         <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code>
                *          </p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            MonitoringInterval?: number;
            /**
                * <p>The Amazon Resource Name (ARN) for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.
                *             An example is <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role,
                *             see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting
                *                 up and enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>If <code>MonitoringInterval</code> is set to a value other than 0, supply a <code>MonitoringRoleArn</code> value.</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            MonitoringRoleArn?: string;
            /**
                * <p>A value that indicates whether to turn on Performance Insights for the DB cluster.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">
                *             Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            EnablePerformanceInsights?: boolean;
            /**
                * <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                *         <p>If you don't specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS
                *             uses your default KMS key. There is a default KMS key for your Amazon Web Services account.
                *             Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            PerformanceInsightsKMSKeyId?: string;
            /**
                * <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            PerformanceInsightsRetentionPeriod?: number;
            /**
                * <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the
                *             <i>Amazon Aurora User Guide</i>.</p>
                */
            ServerlessV2ScalingConfiguration?: ServerlessV2ScalingConfiguration;
    }
    export namespace CreateDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBClusterMessage) => any;
    }
    /**
        * <p>Describes an Amazon Web Services Identity and Access Management (IAM) role that is associated with a DB cluster.</p>
        */
    export interface DBClusterRole {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.</p>
                */
            RoleArn?: string;
            /**
                * <p>Describes the state of association between the IAM role and the DB cluster. The Status property returns one of the following
                *         values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>ACTIVE</code> - the IAM role ARN is associated with the DB cluster and can be used to
                *             access other Amazon Web Services on your behalf.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PENDING</code> - the IAM role ARN is being associated with the DB cluster.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>INVALID</code> - the IAM role ARN is associated with the DB cluster, but the DB cluster is unable
                *                 to assume the IAM role in order to access other Amazon Web Services on your behalf.</p>
                *             </li>
                *          </ul>
                */
            Status?: string;
            /**
                * <p>The name of the feature associated with the Amazon Web Services Identity and Access Management (IAM) role.
                *             For information about supported feature names, see <a>DBEngineVersion</a>.</p>
                */
            FeatureName?: string;
    }
    export namespace DBClusterRole {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterRole) => any;
    }
    /**
        * <p>Contains information about an instance that is part of a DB cluster.</p>
        */
    export interface DBClusterMember {
            /**
                * <p>Specifies the instance identifier for this member of the DB cluster.</p>
                */
            DBInstanceIdentifier?: string;
            /**
                * <p>Value that is <code>true</code> if the cluster member is the primary instance for the DB cluster and <code>false</code> otherwise.</p>
                */
            IsClusterWriter?: boolean;
            /**
                * <p>Specifies the status of the DB cluster parameter group for this member of the DB cluster.</p>
                */
            DBClusterParameterGroupStatus?: string;
            /**
                * <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance
                *       after a failure of the existing primary instance. For more information,
                *       see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance">
                *           Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
                */
            PromotionTier?: number;
    }
    export namespace DBClusterMember {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterMember) => any;
    }
    /**
        * <p>Contains status information for a DB cluster option group.</p>
        */
    export interface DBClusterOptionGroupStatus {
            /**
                * <p>Specifies the name of the DB cluster option group.</p>
                */
            DBClusterOptionGroupName?: string;
            /**
                * <p>Specifies the status of the DB cluster option group.</p>
                */
            Status?: string;
    }
    export namespace DBClusterOptionGroupStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterOptionGroupStatus) => any;
    }
    /**
        * <p>An Active Directory Domain membership record associated with the DB instance or cluster.</p>
        */
    export interface DomainMembership {
            /**
                * <p>The identifier of the Active Directory Domain.</p>
                */
            Domain?: string;
            /**
                * <p>The status of the Active Directory Domain membership for the DB instance or cluster. Values include joined, pending-join, failed, and so on.</p>
                */
            Status?: string;
            /**
                * <p>The fully qualified domain name of the Active Directory Domain.</p>
                */
            FQDN?: string;
            /**
                * <p>The name of the IAM role to be used when making API calls to the Directory Service.</p>
                */
            IAMRoleName?: string;
    }
    export namespace DomainMembership {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainMembership) => any;
    }
    export enum WriteForwardingStatus {
            DISABLED = "disabled",
            DISABLING = "disabling",
            ENABLED = "enabled",
            ENABLING = "enabling",
            UNKNOWN = "unknown"
    }
    /**
        * <p>A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.</p>
        */
    export interface PendingCloudwatchLogsExports {
            /**
                * <p>Log types that are in the process of being deactivated. After they are deactivated, these log types aren't exported to CloudWatch Logs.</p>
                */
            LogTypesToEnable?: string[];
            /**
                * <p>Log types that are in the process of being enabled. After they are enabled, these log types are exported to CloudWatch Logs.</p>
                */
            LogTypesToDisable?: string[];
    }
    export namespace PendingCloudwatchLogsExports {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingCloudwatchLogsExports) => any;
    }
    /**
        * <p>This data type is used as a response element in the <code>ModifyDBCluster</code> operation and
        *             contains changes that will be applied during the next maintenance window.</p>
        */
    export interface ClusterPendingModifiedValues {
            /**
                * <p>A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.</p>
                */
            PendingCloudwatchLogsExports?: PendingCloudwatchLogsExports;
            /**
                * <p>The DBClusterIdentifier value for the DB cluster.</p>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>The master credentials for the DB cluster.</p>
                */
            MasterUserPassword?: string;
            /**
                * <p>A value that indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
                */
            IAMDatabaseAuthenticationEnabled?: boolean;
            /**
                * <p>The database engine version.</p>
                */
            EngineVersion?: string;
    }
    export namespace ClusterPendingModifiedValues {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClusterPendingModifiedValues) => any;
    }
    /**
        * <p>Shows the scaling configuration for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless v1</a> in the
        *             <i>Amazon Aurora User Guide</i>.</p>
        */
    export interface ScalingConfigurationInfo {
            /**
                * <p>The maximum capacity for the Aurora DB cluster in <code>serverless</code> DB engine
                *             mode.</p>
                */
            MinCapacity?: number;
            /**
                * <p>The maximum capacity for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>A value that indicates whether automatic pause is allowed for the Aurora DB cluster
                *             in <code>serverless</code> DB engine mode.</p>
                *         <p>When the value is set to false for an Aurora Serverless v1 DB cluster, the DB cluster automatically resumes.</p>
                */
            AutoPause?: boolean;
            /**
                * <p>The remaining amount of time, in seconds, before the Aurora DB cluster in
                *                 <code>serverless</code> mode is paused. A DB cluster can be paused only when
                *             it's idle (it has no connections).</p>
                */
            SecondsUntilAutoPause?: number;
            /**
                * <p>The action that occurs when Aurora times out while attempting to change the capacity of an
                *             Aurora Serverless v1 cluster. The value is either <code>ForceApplyCapacityChange</code> or
                *             <code>RollbackCapacityChange</code>.</p>
                *         <p>
                *             <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p>
                *         <p>
                *             <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
                */
            TimeoutAction?: string;
            /**
                * <p>The number of seconds before scaling times out. What happens when an attempted scaling action times out
                *             is determined by the <code>TimeoutAction</code> setting.</p>
                */
            SecondsBeforeTimeout?: number;
    }
    export namespace ScalingConfigurationInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScalingConfigurationInfo) => any;
    }
    /**
        * <p>Shows the scaling configuration for an Aurora Serverless v2 DB cluster.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the
        *             <i>Amazon Aurora User Guide</i>.</p>
        */
    export interface ServerlessV2ScalingConfigurationInfo {
            /**
                * <p>The minimum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster.
                *             You can specify ACU values in half-step increments, such as 8, 8.5, 9, and so on. The smallest value
                *             that you can use is 0.5.</p>
                */
            MinCapacity?: number;
            /**
                * <p>The maximum number of Aurora capacity units (ACUs) for a DB instance in an Aurora Serverless v2 cluster.
                *             You can specify ACU values in half-step increments, such as 40, 40.5, 41, and so on. The largest value
                *             that you can use is 128.</p>
                */
            MaxCapacity?: number;
    }
    export namespace ServerlessV2ScalingConfigurationInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerlessV2ScalingConfigurationInfo) => any;
    }
    /**
        * <p>Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
        *         <p>For an Amazon Aurora DB cluster, this data type is used as a response element in the operations
        *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
        *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>PromoteReadReplicaDBCluster</code>,
        *           <code>RestoreDBClusterFromS3</code>, <code>RestoreDBClusterFromSnapshot</code>,
        *           <code>RestoreDBClusterToPointInTime</code>, <code>StartDBCluster</code>, and <code>StopDBCluster</code>.</p>
        *         <p>For a Multi-AZ DB cluster, this data type is used as a response element in the operations
        *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
        *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>RebootDBCluster</code>,
        *           <code>RestoreDBClusterFromSnapshot</code>, and <code>RestoreDBClusterToPointInTime</code>.</p>
        *         <p>For more information on Amazon Aurora DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
        *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
        *          </p>
        *         <p>For more information on Multi-AZ DB clusters, see
        *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
        *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
        *          </p>
        */
    export interface DBCluster {
            /**
                * <p>For all database engines except Amazon Aurora, <code>AllocatedStorage</code> specifies the allocated storage size in gibibytes (GiB).
                *           For Aurora, <code>AllocatedStorage</code> always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically
                *       adjusts as needed.</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>Provides the list of Availability Zones (AZs) where instances in the DB cluster can be created.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>Specifies the number of days for which automatic DB snapshots are retained.</p>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>If present, specifies the name of the character set that this cluster is associated with.</p>
                */
            CharacterSetName?: string;
            /**
                * <p>Contains the name of the initial database of this DB cluster that was provided at create time, if one was specified when the DB cluster was created. This same name is returned for the life of the DB cluster.</p>
                */
            DatabaseName?: string;
            /**
                * <p>Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>Specifies the name of the DB cluster parameter group for the DB cluster.</p>
                */
            DBClusterParameterGroup?: string;
            /**
                * <p>Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.</p>
                */
            DBSubnetGroup?: string;
            /**
                * <p>Specifies the current state of this DB cluster.</p>
                */
            Status?: string;
            /**
                * <p>The time when a stopped DB cluster is restarted automatically.</p>
                */
            AutomaticRestartTime?: Date;
            /**
                * <p>Specifies the progress of the operation as a percentage.</p>
                */
            PercentProgress?: string;
            /**
                * <p>The earliest time to which a database can be restored with point-in-time
                *             restore.</p>
                */
            EarliestRestorableTime?: Date;
            /**
                * <p>Specifies the connection endpoint for the primary instance of the DB cluster.</p>
                */
            Endpoint?: string;
            /**
                * <p>The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances
                *             connections across the Aurora Replicas that are available in a DB cluster. As clients request new connections
                *             to the reader endpoint, Aurora distributes the connection requests among the Aurora Replicas in the DB cluster.
                *             This functionality can help balance your read workload across multiple Aurora Replicas in your DB cluster.</p>
                *         <p>If a failover occurs, and the Aurora Replica that you are connected to is promoted
                *             to be the primary instance, your connection is dropped. To
                *             continue sending your read workload to other Aurora Replicas in the cluster,
                *             you can then reconnect to the reader endpoint.</p>
                */
            ReaderEndpoint?: string;
            /**
                * <p>Identifies all custom endpoints associated with the cluster.</p>
                */
            CustomEndpoints?: string[];
            /**
                * <p>Specifies whether the DB cluster has instances in multiple Availability Zones.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>The name of the database engine to be used for this DB cluster.</p>
                */
            Engine?: string;
            /**
                * <p>Indicates the database engine version.</p>
                */
            EngineVersion?: string;
            /**
                * <p>Specifies the latest time to which a database can be restored with point-in-time restore.</p>
                */
            LatestRestorableTime?: Date;
            /**
                * <p>Specifies the port that the database engine is listening on.</p>
                */
            Port?: number;
            /**
                * <p>Contains the master username for the DB cluster.</p>
                */
            MasterUsername?: string;
            /**
                * <p>Provides the list of option group memberships for this DB cluster.</p>
                */
            DBClusterOptionGroupMemberships?: DBClusterOptionGroupStatus[];
            /**
                * <p>Specifies the daily time range during which automated backups are
                *             created if automated backups are enabled, as determined
                *             by the <code>BackupRetentionPeriod</code>.</p>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>Contains the identifier of the source DB cluster if this DB cluster is a read
                *             replica.</p>
                */
            ReplicationSourceIdentifier?: string;
            /**
                * <p>Contains one or more identifiers of the read replicas associated with this DB
                *             cluster.</p>
                */
            ReadReplicaIdentifiers?: string[];
            /**
                * <p>Provides the list of instances that make up the DB cluster.</p>
                */
            DBClusterMembers?: DBClusterMember[];
            /**
                * <p>Provides a list of VPC security groups that the DB cluster belongs to.</p>
                */
            VpcSecurityGroups?: VpcSecurityGroupMembership[];
            /**
                * <p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>
                */
            HostedZoneId?: string;
            /**
                * <p>Specifies whether the DB cluster is encrypted.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>If <code>StorageEncrypted</code> is enabled, the Amazon Web Services KMS key identifier for the encrypted DB cluster.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The Amazon Web Services Region-unique, immutable identifier for the DB cluster. This identifier is found in Amazon Web Services CloudTrail log entries whenever
                *           the KMS key for the DB cluster is accessed.</p>
                */
            DbClusterResourceId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the DB cluster.</p>
                */
            DBClusterArn?: string;
            /**
                * <p>Provides a list of the Amazon Web Services Identity and Access Management (IAM) roles that are associated with the DB cluster.
                *           IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other Amazon Web Services
                *           on your behalf.</p>
                */
            AssociatedRoles?: DBClusterRole[];
            /**
                * <p>A value that indicates whether the mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
                */
            IAMDatabaseAuthenticationEnabled?: boolean;
            /**
                * <p>Identifies the clone group to which the DB cluster is associated.</p>
                */
            CloneGroupId?: string;
            /**
                * <p>Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
                */
            ClusterCreateTime?: Date;
            /**
                * <p>The earliest time to which a DB cluster can be backtracked.</p>
                */
            EarliestBacktrackTime?: Date;
            /**
                * <p>The target backtrack window, in seconds. If this value is set to 0, backtracking is
                *             disabled for the DB cluster. Otherwise, backtracking is enabled.</p>
                */
            BacktrackWindow?: number;
            /**
                * <p>The number of change records stored for Backtrack.</p>
                */
            BacktrackConsumedChangeRecords?: number;
            /**
                * <p>A list of log types that this DB cluster is configured to export to CloudWatch Logs.</p>
                *         <p>Log types vary by DB engine. For information about the log types for each DB engine, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html">Amazon RDS Database Log Files</a> in the <i>Amazon Aurora User Guide.</i>
                *          </p>
                */
            EnabledCloudwatchLogsExports?: string[];
            /**
                * <p>The current capacity of an Aurora Serverless v1 DB cluster. The capacity is 0 (zero)
                *           when the cluster is paused.</p>
                *         <p>For more information about Aurora Serverless v1, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless v1</a> in the
                *           <i>Amazon Aurora User Guide</i>.</p>
                */
            Capacity?: number;
            /**
                * <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>,
                *             <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html">
                *             CreateDBCluster</a>.</p>
                */
            EngineMode?: string;
            /**
                * <p>Shows the scaling configuration for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless v1</a> in the
                *             <i>Amazon Aurora User Guide</i>.</p>
                */
            ScalingConfigurationInfo?: ScalingConfigurationInfo;
            /**
                * <p>Indicates if the DB cluster has deletion protection enabled.
                *             The database can't be deleted when deletion protection is enabled.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>A value that indicates whether the HTTP endpoint for an Aurora Serverless v1 DB cluster is enabled.</p>
                *         <p>When enabled, the HTTP endpoint provides a connectionless web service API for running
                *           SQL queries on the Aurora Serverless v1 DB cluster. You can also query your database
                *           from inside the RDS console with the query editor.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless v1</a> in the
                *           <i>Amazon Aurora User Guide</i>.</p>
                */
            HttpEndpointEnabled?: boolean;
            /**
                * <p>The mode of the database activity stream.
                *            Database events such as a change or access generate an activity stream event.
                *            The database session can handle these events either synchronously or asynchronously.</p>
                */
            ActivityStreamMode?: ActivityStreamMode | string;
            /**
                * <p>The status of the database activity stream.</p>
                */
            ActivityStreamStatus?: ActivityStreamStatus | string;
            /**
                * <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                */
            ActivityStreamKmsKeyId?: string;
            /**
                * <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
                */
            ActivityStreamKinesisStreamName?: string;
            /**
                * <p>Specifies whether tags are copied from the DB cluster to snapshots of the DB cluster.</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>Specifies whether the DB cluster is a clone of a DB cluster owned by a different Amazon Web Services account.</p>
                */
            CrossAccountClone?: boolean;
            /**
                * <p>The Active Directory Domain membership records associated with the DB cluster.</p>
                */
            DomainMemberships?: DomainMembership[];
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            TagList?: Tag[];
            /**
                * <p>Specifies whether a secondary cluster in an Aurora global database has
                *         write forwarding enabled, not enabled, or is in the process of enabling it.</p>
                */
            GlobalWriteForwardingStatus?: WriteForwardingStatus | string;
            /**
                * <p>Specifies whether you have requested to enable write forwarding for a secondary cluster
                *       in an Aurora global database. Because write forwarding takes time to enable, check the
                *       value of <code>GlobalWriteForwardingStatus</code> to confirm that the request has completed
                *       before using the write forwarding feature for this cluster.</p>
                */
            GlobalWriteForwardingRequested?: boolean;
            /**
                * <p>A value that specifies that changes to the DB cluster are pending. This element is only included when changes are pending.
                *           Specific changes are identified by subelements.</p>
                */
            PendingModifiedValues?: ClusterPendingModifiedValues;
            /**
                * <p>The name of the compute and memory capacity class of the DB instance.</p>
                *         <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
                */
            DBClusterInstanceClass?: string;
            /**
                * <p>The storage type associated with the DB cluster.</p>
                *         <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
                */
            StorageType?: string;
            /**
                * <p>The Provisioned IOPS (I/O operations per second) value.</p>
                *         <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
                */
            Iops?: number;
            /**
                * <p>Specifies the accessibility options for the DB instance.</p>
                *         <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private
                *             IP address from within the DB instance's virtual private cloud (VPC).
                *             It resolves to the public IP address from outside of the DB instance's VPC.
                *             Access to the DB instance is ultimately controlled by the security group it uses.
                *             That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
                *         <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
                *         <p>For more information, see <a>CreateDBInstance</a>.</p>
                *         <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>A value that indicates that minor version patches are applied automatically.</p>
                *         <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster.</p>
                *         <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
                */
            MonitoringInterval?: number;
            /**
                * <p>The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.</p>
                *         <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
                */
            MonitoringRoleArn?: string;
            /**
                * <p>True if Performance Insights is enabled for the DB cluster, and otherwise false.</p>
                *         <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
                */
            PerformanceInsightsEnabled?: boolean;
            /**
                * <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                *         <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
                */
            PerformanceInsightsKMSKeyId?: string;
            /**
                * <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).</p>
                *         <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
                */
            PerformanceInsightsRetentionPeriod?: number;
            /**
                * <p>Shows the scaling configuration for an Aurora Serverless v2 DB cluster.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the
                *             <i>Amazon Aurora User Guide</i>.</p>
                */
            ServerlessV2ScalingConfiguration?: ServerlessV2ScalingConfigurationInfo;
    }
    export namespace DBCluster {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBCluster) => any;
    }
    export interface CreateDBClusterResult {
            /**
                * <p>Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
                *         <p>For an Amazon Aurora DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>PromoteReadReplicaDBCluster</code>,
                *           <code>RestoreDBClusterFromS3</code>, <code>RestoreDBClusterFromSnapshot</code>,
                *           <code>RestoreDBClusterToPointInTime</code>, <code>StartDBCluster</code>, and <code>StopDBCluster</code>.</p>
                *         <p>For a Multi-AZ DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>RebootDBCluster</code>,
                *           <code>RestoreDBClusterFromSnapshot</code>, and <code>RestoreDBClusterToPointInTime</code>.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
                *          </p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace CreateDBClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBClusterResult) => any;
    }
    /**
        * <p>The user already has a DB cluster with the given identifier.</p>
        */
    export class DBClusterAlreadyExistsFault extends __BaseException {
            readonly name: "DBClusterAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>
        *             <code>DBClusterParameterGroupName</code> doesn't refer to an existing DB
        *             cluster parameter group.</p>
        */
    export class DBClusterParameterGroupNotFoundFault extends __BaseException {
            readonly name: "DBClusterParameterGroupNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterParameterGroupNotFoundFault, __BaseException>);
    }
    /**
        * <p>The user attempted to create a new DB cluster and the user has already reached the
        *             maximum allowed DB cluster quota.</p>
        */
    export class DBClusterQuotaExceededFault extends __BaseException {
            readonly name: "DBClusterQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
        */
    export class DBSubnetGroupDoesNotCoverEnoughAZs extends __BaseException {
            readonly name: "DBSubnetGroupDoesNotCoverEnoughAZs";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSubnetGroupDoesNotCoverEnoughAZs, __BaseException>);
    }
    /**
        * <p>
        *             <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group.</p>
        */
    export class DBSubnetGroupNotFoundFault extends __BaseException {
            readonly name: "DBSubnetGroupNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSubnetGroupNotFoundFault, __BaseException>);
    }
    /**
        * <p>
        *             <code>Domain</code> doesn't refer to an existing Active Directory domain.</p>
        */
    export class DomainNotFoundFault extends __BaseException {
            readonly name: "DomainNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DomainNotFoundFault, __BaseException>);
    }
    /**
        * <p>The <code>GlobalClusterIdentifier</code> doesn't refer to an existing global database cluster.</p>
        */
    export class GlobalClusterNotFoundFault extends __BaseException {
            readonly name: "GlobalClusterNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<GlobalClusterNotFoundFault, __BaseException>);
    }
    /**
        * <p>There is insufficient storage available for the current action. You might be able to
        *             resolve this error by updating your subnet group to use different Availability Zones
        *             that have more storage available.</p>
        */
    export class InsufficientStorageClusterCapacityFault extends __BaseException {
            readonly name: "InsufficientStorageClusterCapacityFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientStorageClusterCapacityFault, __BaseException>);
    }
    /**
        * <p>The DB subnet group cannot be deleted because it's in use.</p>
        */
    export class InvalidDBSubnetGroupStateFault extends __BaseException {
            readonly name: "InvalidDBSubnetGroupStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBSubnetGroupStateFault, __BaseException>);
    }
    /**
        * <p>The global cluster is in an invalid state and can't perform the requested operation.</p>
        */
    export class InvalidGlobalClusterStateFault extends __BaseException {
            readonly name: "InvalidGlobalClusterStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidGlobalClusterStateFault, __BaseException>);
    }
    /**
        * <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
        */
    export class InvalidSubnet extends __BaseException {
            readonly name: "InvalidSubnet";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSubnet, __BaseException>);
    }
    /**
        * <p>The DB subnet group doesn't cover all Availability Zones after it's
        *             created because of users' change.</p>
        */
    export class InvalidVPCNetworkStateFault extends __BaseException {
            readonly name: "InvalidVPCNetworkStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidVPCNetworkStateFault, __BaseException>);
    }
    /**
        * <p>The request would result in the user exceeding the allowed amount of storage
        *             available across all DB instances.</p>
        */
    export class StorageQuotaExceededFault extends __BaseException {
            readonly name: "StorageQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StorageQuotaExceededFault, __BaseException>);
    }
    export interface CreateDBClusterEndpointMessage {
            /**
                * <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is
                *             stored as a lowercase string.</p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The identifier to use for the new endpoint. This parameter is stored as a lowercase string.</p>
                */
            DBClusterEndpointIdentifier: string | undefined;
            /**
                * <p>The type of the endpoint, one of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.</p>
                */
            EndpointType: string | undefined;
            /**
                * <p>List of DB instance identifiers that are part of the custom endpoint group.</p>
                */
            StaticMembers?: string[];
            /**
                * <p>List of DB instance identifiers that aren't part of the custom endpoint group.
                *             All other eligible instances are reachable through the custom endpoint.
                *             This parameter is relevant only if the list of static members is empty.</p>
                */
            ExcludedMembers?: string[];
            /**
                * <p>The tags to be assigned to the Amazon RDS resource.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDBClusterEndpointMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBClusterEndpointMessage) => any;
    }
    /**
        * <p>This data type represents the information you need to connect to an Amazon Aurora DB cluster.
        *       This data type is used as a response element in the following actions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>CreateDBClusterEndpoint</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DescribeDBClusterEndpoints</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>ModifyDBClusterEndpoint</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DeleteDBClusterEndpoint</code>
        *                </p>
        *             </li>
        *          </ul>
        *         <p>For the data structure that represents Amazon RDS DB instance endpoints,
        *         see <code>Endpoint</code>.</p>
        */
    export interface DBClusterEndpoint {
            /**
                * <p>The identifier associated with the endpoint. This parameter is stored as a lowercase string.</p>
                */
            DBClusterEndpointIdentifier?: string;
            /**
                * <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is
                *             stored as a lowercase string.</p>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.</p>
                */
            DBClusterEndpointResourceIdentifier?: string;
            /**
                * <p>The DNS address of the endpoint.</p>
                */
            Endpoint?: string;
            /**
                * <p>The current status of the endpoint. One of: <code>creating</code>, <code>available</code>, <code>deleting</code>, <code>inactive</code>, <code>modifying</code>. The <code>inactive</code> state applies to an endpoint that can't be used for a certain kind of cluster,
                *      such as a <code>writer</code> endpoint for a read-only secondary cluster in a global database.</p>
                */
            Status?: string;
            /**
                * <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>CUSTOM</code>.</p>
                */
            EndpointType?: string;
            /**
                * <p>The type associated with a custom endpoint. One of: <code>READER</code>,
                *        <code>WRITER</code>, <code>ANY</code>.</p>
                */
            CustomEndpointType?: string;
            /**
                * <p>List of DB instance identifiers that are part of the custom endpoint group.</p>
                */
            StaticMembers?: string[];
            /**
                * <p>List of DB instance identifiers that aren't part of the custom endpoint group.
                *        All other eligible instances are reachable through the custom endpoint.
                *        Only relevant if the list of static members is empty.</p>
                */
            ExcludedMembers?: string[];
            /**
                * <p>The Amazon Resource Name (ARN) for the endpoint.</p>
                */
            DBClusterEndpointArn?: string;
    }
    export namespace DBClusterEndpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterEndpoint) => any;
    }
    /**
        * <p>The specified custom endpoint can't be created because it already exists.</p>
        */
    export class DBClusterEndpointAlreadyExistsFault extends __BaseException {
            readonly name: "DBClusterEndpointAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterEndpointAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>The cluster already has the maximum number of custom endpoints.</p>
        */
    export class DBClusterEndpointQuotaExceededFault extends __BaseException {
            readonly name: "DBClusterEndpointQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterEndpointQuotaExceededFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CreateDBClusterParameterGroupMessage {
            /**
                * <p>The name of the DB cluster parameter group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must not match the name of an existing DB cluster parameter group.</p>
                *             </li>
                *          </ul>
                *         <note>
                *             <p>This value is stored as a lowercase string.</p>
                *         </note>
                */
            DBClusterParameterGroupName: string | undefined;
            /**
                * <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster
                *           parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p>
                *         <p>
                *             <b>Aurora MySQL</b>
                *          </p>
                *         <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code>, <code>aurora-mysql8.0</code>
                *          </p>
                *         <p>
                *             <b>Aurora PostgreSQL</b>
                *          </p>
                *         <p>Example: <code>aurora-postgresql9.6</code>
                *          </p>
                *         <p>
                *             <b>RDS for MySQL</b>
                *          </p>
                *         <p>Example: <code>mysql8.0</code>
                *          </p>
                *         <p>
                *             <b>RDS for PostgreSQL</b>
                *          </p>
                *         <p>Example: <code>postgres12</code>
                *          </p>
                *         <p>To list all of the available parameter group families for a DB engine, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine <engine></code>
                *          </p>
                *         <p>For example, to list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql</code>
                *          </p>
                *         <note>
                *             <p>The output contains duplicates.</p>
                *         </note>
                *         <p>The following are the valid DB engine values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-postgresql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mysql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            DBParameterGroupFamily: string | undefined;
            /**
                * <p>The description for the DB cluster parameter group.</p>
                */
            Description: string | undefined;
            /**
                * <p>Tags to assign to the DB cluster parameter group.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDBClusterParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBClusterParameterGroupMessage) => any;
    }
    export interface CreateDBClusterParameterGroupResult {
            /**
                * <p>Contains the details of an Amazon RDS DB cluster parameter group.</p>
                *         <p>This data type is used as a response element in the <code>DescribeDBClusterParameterGroups</code> action.</p>
                */
            DBClusterParameterGroup?: DBClusterParameterGroup;
    }
    export namespace CreateDBClusterParameterGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBClusterParameterGroupResult) => any;
    }
    /**
        * <p></p>
        */
    export interface CreateDBClusterSnapshotMessage {
            /**
                * <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster1-snapshot1</code>
                *          </p>
                */
            DBClusterSnapshotIdentifier: string | undefined;
            /**
                * <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing DBCluster.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster1</code>
                *          </p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The tags to be assigned to the DB cluster snapshot.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDBClusterSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBClusterSnapshotMessage) => any;
    }
    export interface CreateDBClusterSnapshotResult {
            /**
                * <p>Contains the details for an Amazon RDS DB cluster snapshot</p>
                *         <p>This data type is used as a response element
                *           in the <code>DescribeDBClusterSnapshots</code> action.</p>
                */
            DBClusterSnapshot?: DBClusterSnapshot;
    }
    export namespace CreateDBClusterSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBClusterSnapshotResult) => any;
    }
    /**
        * <p>The specified CIDR IP range or Amazon EC2 security group might not be authorized
        *             for the specified DB security group.</p>
        *         <p>Or, RDS might not be authorized to perform necessary actions using IAM on your
        *             behalf.</p>
        */
    export class AuthorizationNotFoundFault extends __BaseException {
            readonly name: "AuthorizationNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AuthorizationNotFoundFault, __BaseException>);
    }
    export class BackupPolicyNotFoundFault extends __BaseException {
            readonly name: "BackupPolicyNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BackupPolicyNotFoundFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CreateDBInstanceMessage {
            /**
                * <p>The meaning of this parameter differs according to the database engine you use.</p>
                *         <p>
                *             <b>MySQL</b>
                *          </p>
                *         <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain 1 to 64 letters or numbers.</p>
                *             </li>
                *             <li>
                *                 <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p>
                *             </li>
                *             <li>
                *                 <p>Can't be a word reserved by the specified database engine</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>MariaDB</b>
                *          </p>
                *         <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain 1 to 64 letters or numbers.</p>
                *             </li>
                *             <li>
                *                 <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p>
                *             </li>
                *             <li>
                *                 <p>Can't be a word reserved by the specified database engine</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *         <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, a database named <code>postgres</code>
                *           is created in the DB instance.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain 1 to 63 letters, numbers, or underscores.</p>
                *             </li>
                *             <li>
                *                 <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p>
                *             </li>
                *             <li>
                *                 <p>Can't be a word reserved by the specified database engine</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Oracle</b>
                *          </p>
                *         <p>The Oracle System ID (SID) of the created DB instance.
                *           If you specify <code>null</code>, the default value <code>ORCL</code> is used.
                *           You can't specify the string NULL, or any other reserved word, for <code>DBName</code>.</p>
                *         <p>Default: <code>ORCL</code>
                *          </p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Can't be longer than 8 characters</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Amazon RDS Custom for Oracle</b>
                *          </p>
                *         <p>The Oracle System ID (SID) of the created RDS Custom DB instance.
                *           If you don't specify a value, the default value is <code>ORCL</code>.</p>
                *         <p>Default: <code>ORCL</code>
                *          </p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>It must contain 1 to 8 alphanumeric characters.</p>
                *             </li>
                *             <li>
                *                 <p>It must contain a letter.</p>
                *             </li>
                *             <li>
                *                 <p>It can't be a word reserved by the database engine.</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Amazon RDS Custom for SQL Server</b>
                *          </p>
                *         <p>Not applicable. Must be null.</p>
                *         <p>
                *             <b>SQL Server</b>
                *          </p>
                *         <p>Not applicable. Must be null.</p>
                *         <p>
                *             <b>Amazon Aurora MySQL</b>
                *          </p>
                *         <p>The name of the database to create when the primary DB instance of the Aurora MySQL DB cluster is
                *           created. If this parameter isn't specified for an Aurora MySQL DB cluster, no database is created
                *           in the DB cluster.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>It must contain 1 to 64 alphanumeric characters.</p>
                *             </li>
                *             <li>
                *                 <p>It can't be a word reserved by the database engine.</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Amazon Aurora PostgreSQL</b>
                *          </p>
                *         <p>The name of the database to create when the primary DB instance of the Aurora PostgreSQL DB cluster is
                *           created. If this parameter isn't specified for an Aurora PostgreSQL DB cluster,
                *           a database named <code>postgres</code> is created in the DB cluster.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>It must contain 1 to 63 alphanumeric characters.</p>
                *             </li>
                *             <li>
                *                 <p>It must begin with a letter or an underscore.
                *                   Subsequent characters can be letters, underscores, or digits
                *                   (0 to 9).</p>
                *             </li>
                *             <li>
                *                 <p>It can't be a word reserved by the
                *                   database engine.</p>
                *             </li>
                *          </ul>
                */
            DBName?: string;
            /**
                * <p>The DB instance identifier. This parameter is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>mydbinstance</code>
                *          </p>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>The amount of storage in gibibytes (GiB) to allocate for the DB instance.</p>
                *         <p>Type: Integer</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your
                *           database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p>
                *         <p>
                *             <b>Amazon RDS Custom</b>
                *          </p>
                *         <p>Constraints to the amount of storage for each storage type are the following:</p>
                *         <ul>
                *             <li>
                *                 <p>General Purpose (SSD) storage (gp2): Must be an integer from 40 to 65536 for RDS Custom for Oracle,
                *               16384 for RDS Custom for SQL Server.</p>
                *             </li>
                *             <li>
                *                 <p>Provisioned IOPS storage (io1): Must be an integer from 40 to 65536 for RDS Custom for Oracle,
                *               16384 for RDS Custom for SQL Server.</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>MySQL</b>
                *          </p>
                *         <p>Constraints to the amount of storage for each storage type are the following:</p>
                *         <ul>
                *             <li>
                *                 <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p>
                *             </li>
                *             <li>
                *                 <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p>
                *             </li>
                *             <li>
                *                 <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>MariaDB</b>
                *          </p>
                *         <p>Constraints to the amount of storage for each storage type are the following:</p>
                *         <ul>
                *             <li>
                *                 <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p>
                *             </li>
                *             <li>
                *                 <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p>
                *             </li>
                *             <li>
                *                 <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *         <p>Constraints to the amount of storage for each storage type are the following:</p>
                *         <ul>
                *             <li>
                *                 <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p>
                *             </li>
                *             <li>
                *                 <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p>
                *             </li>
                *             <li>
                *                 <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Oracle</b>
                *          </p>
                *         <p>Constraints to the amount of storage for each storage type are the following:</p>
                *         <ul>
                *             <li>
                *                 <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p>
                *             </li>
                *             <li>
                *                 <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p>
                *             </li>
                *             <li>
                *                 <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>SQL Server</b>
                *          </p>
                *         <p>Constraints to the amount of storage for each storage type are the following:</p>
                *         <ul>
                *             <li>
                *                 <p>General Purpose (SSD) storage (gp2):</p>
                *                 <ul>
                *                   <li>
                *                         <p>Enterprise and Standard editions: Must be an integer from 20 to 16384.</p>
                *                     </li>
                *                   <li>
                *                         <p>Web and Express editions: Must be an integer from 20 to 16384.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>Provisioned IOPS storage (io1):</p>
                *                 <ul>
                *                   <li>
                *                         <p>Enterprise and Standard editions: Must be an integer from 100 to 16384.</p>
                *                     </li>
                *                   <li>
                *                         <p>Web and Express editions: Must be an integer from 100 to 16384.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>Magnetic storage (standard):</p>
                *                 <ul>
                *                   <li>
                *                         <p>Enterprise and Standard editions: Must be an integer from 20 to 1024.</p>
                *                     </li>
                *                   <li>
                *                         <p>Web and Express editions: Must be an integer from 20 to 1024.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            AllocatedStorage?: number;
            /**
                * <p>The compute and memory capacity of the DB instance, for example db.m4.large.
                *           Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.
                *           For the full list of DB instance classes,
                *           and availability for your engine, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            DBInstanceClass: string | undefined;
            /**
                * <p>The name of the database engine to be used for this instance.</p>
                *         <p>Not every database engine is available for every Amazon Web Services Region.</p>
                *         <p>Valid Values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-postgresql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>custom-oracle-ee (for RDS Custom for Oracle instances)</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>custom-sqlserver-ee (for RDS Custom for SQL Server instances)</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>custom-sqlserver-se (for RDS Custom for SQL Server instances)</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>custom-sqlserver-web (for RDS Custom for SQL Server instances)</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mariadb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mysql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-se</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ex</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-web</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Engine: string | undefined;
            /**
                * <p>The name for the master user.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. The name for the master user is managed by the DB cluster.</p>
                *         <p>
                *             <b>Amazon RDS</b>
                *          </p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Required.</p>
                *             </li>
                *             <li>
                *                 <p>Must be 1 to 16 letters, numbers, or underscores.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't be a reserved word for the chosen database engine.</p>
                *             </li>
                *          </ul>
                */
            MasterUsername?: string;
            /**
                * <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. The password for the master user is managed by the DB
                *             cluster.</p>
                *         <p>
                *             <b>MariaDB</b>
                *          </p>
                *         <p>Constraints: Must contain from 8 to 41 characters.</p>
                *         <p>
                *             <b>Microsoft SQL Server</b>
                *          </p>
                *         <p>Constraints: Must contain from 8 to 128 characters.</p>
                *         <p>
                *             <b>MySQL</b>
                *          </p>
                *         <p>Constraints: Must contain from 8 to 41 characters.</p>
                *         <p>
                *             <b>Oracle</b>
                *          </p>
                *         <p>Constraints: Must contain from 8 to 30 characters.</p>
                *         <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *         <p>Constraints: Must contain from 8 to 128 characters.</p>
                */
            MasterUserPassword?: string;
            /**
                * <p>A list of DB security groups to associate with this DB instance.</p>
                *         <p>Default: The default DB security group for the database engine.</p>
                */
            DBSecurityGroups?: string[];
            /**
                * <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. The associated list of EC2 VPC security groups is managed by
                *           the DB cluster.</p>
                *         <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>The Availability Zone (AZ) where the database will be created. For information on
                *         Amazon Web Services Regions and Availability Zones, see
                *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions
                *         and Availability Zones</a>.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Each Aurora DB cluster hosts copies of its storage in three separate Availability Zones. Specify one of these
                *             Availability Zones. Aurora automatically chooses an appropriate Availability Zone if you don't specify one.</p>
                *         <p>Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region.</p>
                *         <p>Example: <code>us-east-1d</code>
                *          </p>
                *         <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment.
                *             The specified Availability Zone must be in the same Amazon Web Services Region as the current endpoint.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>A DB subnet group to associate with this DB instance.</p>
                *         <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p>
                *         <p>Example: <code>mydbsubnetgroup</code>
                *          </p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>The time range each week during which system maintenance can occur,
                *           in Universal Coordinated Time (UTC).
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>.</p>
                *         <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
                *          </p>
                *         <p>The default is a 30-minute window selected at random from an
                *             8-hour block of time for each Amazon Web Services Region, occurring on a random day of the
                *             week.</p>
                *         <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
                *         <p>Constraints: Minimum 30-minute window.</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then
                *           the default DB parameter group for the specified DB engine and version is used.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                */
            DBParameterGroupName?: string;
            /**
                * <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables
                *           backups. Setting this parameter to 0 disables automated backups.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. The retention period for automated backups is managed by the DB cluster.</p>
                *         <p>Default: 1</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be a value from 0 to 35</p>
                *             </li>
                *             <li>
                *                 <p>Can't be set to 0 if the DB instance is a source to read replicas</p>
                *             </li>
                *             <li>
                *                 <p>Can't be set to 0 or 35 for an RDS Custom for Oracle DB instance</p>
                *             </li>
                *          </ul>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>The daily time range during which automated backups are created
                *         if automated backups are enabled,
                *         using the <code>BackupRetentionPeriod</code> parameter.
                *           The default is a 30-minute window selected at random from an
                *           8-hour block of time for each Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. The daily time range for creating automated backups is managed by
                *           the DB cluster.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Must be in Universal Coordinated Time (UTC).</p>
                *             </li>
                *             <li>
                *                 <p>Must not conflict with the preferred maintenance window.</p>
                *             </li>
                *             <li>
                *                 <p>Must be at least 30 minutes.</p>
                *             </li>
                *          </ul>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>The port number on which the database accepts connections.</p>
                *         <p>
                *             <b>MySQL</b>
                *          </p>
                *         <p>Default: <code>3306</code>
                *          </p>
                *         <p>Valid values: <code>1150-65535</code>
                *          </p>
                *         <p>Type: Integer</p>
                *         <p>
                *             <b>MariaDB</b>
                *          </p>
                *         <p>Default: <code>3306</code>
                *          </p>
                *         <p>Valid values: <code>1150-65535</code>
                *          </p>
                *         <p>Type: Integer</p>
                *         <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *         <p>Default: <code>5432</code>
                *          </p>
                *         <p>Valid values: <code>1150-65535</code>
                *          </p>
                *         <p>Type: Integer</p>
                *         <p>
                *             <b>Oracle</b>
                *          </p>
                *         <p>Default: <code>1521</code>
                *          </p>
                *         <p>Valid values: <code>1150-65535</code>
                *          </p>
                *         <p>
                *             <b>SQL Server</b>
                *          </p>
                *         <p>Default: <code>1433</code>
                *          </p>
                *         <p>Valid values: <code>1150-65535</code> except <code>1234</code>, <code>1434</code>,
                *                 <code>3260</code>, <code>3343</code>, <code>3389</code>, <code>47001</code>, and
                *                 <code>49152-49156</code>.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Default: <code>3306</code>
                *          </p>
                *         <p>Valid values: <code>1150-65535</code>
                *          </p>
                *         <p>Type: Integer</p>
                */
            Port?: number;
            /**
                * <p>A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set
                *           the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>The version number of the database engine to use.</p>
                *         <p>For a list of valid engine versions, use the  <code>DescribeDBEngineVersions</code> action.</p>
                *         <p>The following are the database engines and links to information about the major and minor versions that are available with
                *           Amazon RDS. Not every database engine is available for every Amazon Web Services Region.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. The version number of the database engine to be used by the DB
                *             instance is managed by the DB cluster.</p>
                *         <p>
                *             <b>Amazon RDS Custom for Oracle</b>
                *          </p>
                *         <p>A custom engine version (CEV) that you have previously created. This setting is required for RDS Custom for Oracle. The CEV
                *           name has the following format: <code>19.<i>customized_string</i>
                *             </code>. An example identifier is
                *           <code>19.my_cev1</code>. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-creating.html#custom-creating.create">
                *               Creating an RDS Custom for Oracle DB instance</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>
                *             <b>Amazon RDS Custom for SQL Server</b>
                *          </p>
                *         <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-reqs-limits-MS.html">RDS Custom for SQL Server general requirements</a>
                *           in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>
                *             <b>MariaDB</b>
                *          </p>
                *         <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the
                *           <i>Amazon RDS User Guide</i>.</p>
                *         <p>
                *             <b>Microsoft SQL Server</b>
                *          </p>
                *         <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.VersionSupport">Microsoft SQL Server Versions on Amazon RDS</a> in the
                *           <i>Amazon RDS User Guide</i>.</p>
                *         <p>
                *             <b>MySQL</b>
                *          </p>
                *         <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the
                *           <i>Amazon RDS User Guide</i>.</p>
                *         <p>
                *             <b>Oracle</b>
                *          </p>
                *         <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the
                *           <i>Amazon RDS User Guide</i>.</p>
                *         <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *         <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon RDS for PostgreSQL versions and extensions</a> in the
                *           <i>Amazon RDS User Guide</i>.</p>
                */
            EngineVersion?: string;
            /**
                * <p>A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window.
                *           By default, minor engine upgrades are applied automatically.</p>
                *         <p>If you create an RDS Custom DB instance, you must set <code>AutoMinorVersionUpgrade</code> to
                *           <code>false</code>.</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>License model information for this DB instance.</p>
                *         <p>Valid values:  <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code>
                *          </p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            LicenseModel?: string;
            /**
                * <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
                *           For information about valid <code>Iops</code> values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage to improve performance</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50
                *           of the storage amount for the DB instance. For SQL Server DB instances, must be a multiple between 1 and 50
                *           of the storage amount for the DB instance.</p>
                */
            Iops?: number;
            /**
                * <p>A value that indicates that the DB instance should be associated with the specified option group.</p>
                *         <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed
                *           from an option group. Also, that option group can't be removed from a DB instance after it is
                *           associated with a DB instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>For supported engines, this value indicates that the DB instance should be associated with the
                *           specified <code>CharacterSet</code>.</p>
                *         <p>This setting doesn't apply to RDS Custom. However, if you need to change the character set,
                *           you can change it on the database itself.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. The character set is managed by
                *           the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
                */
            CharacterSetName?: string;
            /**
                * <p>The name of the NCHAR character set for the Oracle DB instance.</p>
                *         <p>This parameter doesn't apply to RDS Custom.</p>
                */
            NcharCharacterSetName?: string;
            /**
                * <p>A value that indicates whether the DB instance is publicly accessible.</p>
                *         <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from
                *           within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC.
                *           Access to the DB instance is ultimately controlled by the security group it uses.
                *           That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
                *         <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
                *         <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
                *         <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
                *         <ul>
                *             <li>
                *                 <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB instance is private.</p>
                *             </li>
                *             <li>
                *                 <p>If the default VPC in the target Region has an internet gateway attached to it, the DB instance is public.</p>
                *             </li>
                *          </ul>
                *         <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
                *         <ul>
                *             <li>
                *                 <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB instance is private.</p>
                *             </li>
                *             <li>
                *                 <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB instance is public.</p>
                *             </li>
                *          </ul>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>Tags to assign to the DB instance.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The identifier of the DB cluster that the instance will belong to.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>Specifies the storage type to be associated with the DB instance.</p>
                *         <p>Valid values: <code>standard | gp2 | io1</code>
                *          </p>
                *         <p>If you specify <code>io1</code>, you must also include a value for the
                *             <code>Iops</code> parameter.</p>
                *         <p>Default: <code>io1</code> if the <code>Iops</code> parameter
                *             is specified, otherwise <code>gp2</code>
                *          </p>
                */
            StorageType?: string;
            /**
                * <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            TdeCredentialArn?: string;
            /**
                * <p>The password for the given ARN from the key store in order to access the device.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            TdeCredentialPassword?: string;
            /**
                * <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p>
                *         <p>For RDS Custom instances, either set this parameter to <code>true</code> or leave it unset.
                *           If you set this parameter to <code>false</code>, RDS reports an error.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. The encryption for DB instances is managed by the DB cluster.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>The Amazon Web Services KMS key identifier for an encrypted DB instance.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
                *           To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. The Amazon Web Services KMS key identifier is managed by
                *           the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
                *         <p>If <code>StorageEncrypted</code> is enabled, and you do
                *         not specify a value for the <code>KmsKeyId</code> parameter, then
                *         Amazon RDS uses your default KMS key. There is a
                *         default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different
                *         default KMS key for each Amazon Web Services Region.</p>
                *         <p>
                *             <b>Amazon RDS Custom</b>
                *          </p>
                *         <p>A KMS key is required for RDS Custom instances. For most RDS engines, if you leave this parameter empty
                *           while enabling <code>StorageEncrypted</code>, the engine uses the default KMS key. However, RDS Custom
                *           doesn't use the default key when this parameter is empty. You must explicitly specify a key.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL
                *             Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
                *            Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            Domain?: string;
            /**
                * <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this
                *           value for an Aurora DB instance has no effect on the DB cluster setting.</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for
                *           the DB instance. To disable collection of Enhanced Monitoring metrics, specify 0. The default is 0.</p>
                *         <p>If <code>MonitoringRoleArn</code> is specified, then you must set <code>MonitoringInterval</code>
                *       to a value other than 0.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code>
                *          </p>
                */
            MonitoringInterval?: number;
            /**
                * <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For
                *           example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role,
                *       see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a>
                *           in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            MonitoringRoleArn?: string;
            /**
                * <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            DomainIAMRoleName?: string;
            /**
                * <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance
                *           after a failure of the existing primary instance. For more information,
                *       see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance">
                *           Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Default: 1</p>
                *         <p>Valid Values: 0 - 15</p>
                */
            PromotionTier?: number;
            /**
                * <p>The time zone of the DB instance.
                *             The time zone parameter is currently supported only by
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>.</p>
                */
            Timezone?: string;
            /**
                * <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management
                *             (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
                *         <p>This setting doesn't apply to RDS Custom or Amazon Aurora. In Aurora, mapping Amazon Web Services IAM accounts
                *         to database accounts is managed by the DB cluster.</p>
                *         <p>For more information, see
                *        <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
                *            IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            EnableIAMDatabaseAuthentication?: boolean;
            /**
                * <p>A value that indicates whether to enable Performance Insights for the DB instance. For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            EnablePerformanceInsights?: boolean;
            /**
                * <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                *         <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS
                *             uses your default KMS key. There is a default KMS key for your Amazon Web Services account.
                *             Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            PerformanceInsightsKMSKeyId?: string;
            /**
                * <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            PerformanceInsightsRetentionPeriod?: number;
            /**
                * <p>The list of log types that need to be enabled for exporting to CloudWatch Logs. The values
                *             in the list depend on the DB engine. For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">
                *             Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. CloudWatch Logs exports are managed by the DB cluster.</p>
                *         <p>
                *             <b>RDS Custom</b>
                *          </p>
                *         <p>Not applicable.</p>
                *         <p>
                *             <b>MariaDB</b>
                *          </p>
                *         <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
                *         <p>
                *             <b>Microsoft SQL Server</b>
                *          </p>
                *         <p>Possible values are <code>agent</code> and <code>error</code>.</p>
                *         <p>
                *             <b>MySQL</b>
                *          </p>
                *         <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
                *         <p>
                *             <b>Oracle</b>
                *          </p>
                *         <p>Possible values are <code>alert</code>, <code>audit</code>, <code>listener</code>, <code>trace</code>, and
                *             <code>oemagent</code>.</p>
                *         <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *         <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.</p>
                */
            EnableCloudwatchLogsExports?: string[];
            /**
                * <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            ProcessorFeatures?: ProcessorFeature[];
            /**
                * <p>A value that indicates whether the DB instance has deletion protection enabled.
                *             The database can't be deleted when deletion protection is enabled. By default,
                *             deletion protection isn't enabled. For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
                *                 Deleting a DB Instance</a>.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. You can enable or disable deletion protection for the DB cluster.
                *             For more information, see <code>CreateDBCluster</code>. DB instances in a DB
                *             cluster can be deleted even when deletion protection is enabled for the DB cluster.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
                *         <p>For more information about this setting, including limitations that apply to it, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
                *                 Managing capacity automatically with Amazon RDS storage autoscaling</a>
                *             in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            MaxAllocatedStorage?: number;
            /**
                * <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS
                *             on Outposts DB instance.</p>
                *         <p>A <i>CoIP</i> provides local or external connectivity to resources in
                *             your Outpost subnets through your on-premises network. For some use cases, a CoIP can
                *             provide lower latency for connections to the DB instance from outside of its virtual
                *             private cloud (VPC) on your local network.</p>
                *         <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a>
                *             in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a>
                *             in the <i>Amazon Web Services Outposts User Guide</i>.</p>
                */
            EnableCustomerOwnedIp?: boolean;
            /**
                * <p>The instance profile associated with the underlying Amazon EC2 instance of an
                *             RDS Custom DB instance. The instance profile must meet the following requirements:</p>
                *         <ul>
                *             <li>
                *                 <p>The profile must exist in your account.</p>
                *             </li>
                *             <li>
                *                 <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p>
                *             </li>
                *             <li>
                *                 <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p>
                *             </li>
                *          </ul>
                *         <p>For the list of permissions required for the IAM role, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc">
                *                 Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting is required for RDS Custom.</p>
                */
            CustomIamInstanceProfile?: string;
            /**
                * <p>Specifies where automated backups and manual snapshots are stored.</p>
                *         <p>Possible values are <code>outposts</code> (Amazon Web Services Outposts) and <code>region</code> (Amazon Web Services Region). The default is <code>region</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working
                *             with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            BackupTarget?: string;
            /**
                * <p>The network type of the DB instance.</p>
                *         <p>Valid values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>IPV4</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DUAL</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance.
                *             A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6
                *             protocols (<code>DUAL</code>).</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
                *             Working with a DB instance in a VPC</a> in the
                *             <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            NetworkType?: string;
    }
    export namespace CreateDBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBInstanceMessage) => any;
    }
    /**
        * <p>Describes an Amazon Web Services Identity and Access Management (IAM) role that is associated with a DB instance.</p>
        */
    export interface DBInstanceRole {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that is associated with the DB
                *             instance.</p>
                */
            RoleArn?: string;
            /**
                * <p>The name of the feature associated with the Amazon Web Services Identity and Access Management (IAM) role.
                *             For information about supported feature names, see <code>DBEngineVersion</code>.</p>
                */
            FeatureName?: string;
            /**
                * <p>Describes the state of association between the IAM role and the DB instance. The Status property returns one of the following
                *             values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>ACTIVE</code> - the IAM role ARN is associated with the DB instance and can be used to
                *                 access other Amazon Web Services services on your behalf.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>PENDING</code> - the IAM role ARN is being associated with the DB instance.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>INVALID</code> - the IAM role ARN is associated with the DB instance, but the DB instance is unable
                *                 to assume the IAM role in order to access other Amazon Web Services services on your behalf.</p>
                *             </li>
                *          </ul>
                */
            Status?: string;
    }
    export namespace DBInstanceRole {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBInstanceRole) => any;
    }
    export enum AutomationMode {
            ALL_PAUSED = "all-paused",
            FULL = "full"
    }
    /**
        * <p>Automated backups of a DB instance replicated to another Amazon Web Services Region. They consist of system backups, transaction logs, and database instance properties.</p>
        */
    export interface DBInstanceAutomatedBackupsReplication {
            /**
                * <p>The Amazon Resource Name (ARN) of the replicated automated backups.</p>
                */
            DBInstanceAutomatedBackupsArn?: string;
    }
    export namespace DBInstanceAutomatedBackupsReplication {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBInstanceAutomatedBackupsReplication) => any;
    }
    /**
        * <p>The status of the DB parameter group.</p>
        *         <p>This data type is used as a response element in the following actions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>CreateDBInstance</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>CreateDBInstanceReadReplica</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DeleteDBInstance</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>ModifyDBInstance</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>RebootDBInstance</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>RestoreDBInstanceFromDBSnapshot</code>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface DBParameterGroupStatus {
            /**
                * <p>The name of the DB parameter group.</p>
                */
            DBParameterGroupName?: string;
            /**
                * <p>The status of parameter updates.</p>
                */
            ParameterApplyStatus?: string;
    }
    export namespace DBParameterGroupStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBParameterGroupStatus) => any;
    }
    /**
        * <p>Contains Availability Zone information.</p>
        *         <p>This data type is used as an element in the <code>OrderableDBInstanceOption</code>
        *             data type.</p>
        */
    export interface AvailabilityZone {
            /**
                * <p>The name of the Availability Zone.</p>
                */
            Name?: string;
    }
    export namespace AvailabilityZone {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AvailabilityZone) => any;
    }
    /**
        * <p>A data type that represents an Outpost.</p>
        *         <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Amazon RDS on Amazon Web Services Outposts</a>
        *           in the <i>Amazon RDS User Guide.</i>
        *          </p>
        */
    export interface Outpost {
            /**
                * <p>The Amazon Resource Name (ARN) of the Outpost.</p>
                */
            Arn?: string;
    }
    export namespace Outpost {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Outpost) => any;
    }
    /**
        * <p>This data type is used as a response element for the <code>DescribeDBSubnetGroups</code> operation.</p>
        */
    export interface Subnet {
            /**
                * <p>The identifier of the subnet.</p>
                */
            SubnetIdentifier?: string;
            /**
                * <p>Contains Availability Zone information.</p>
                *         <p>This data type is used as an element in the <code>OrderableDBInstanceOption</code>
                *             data type.</p>
                */
            SubnetAvailabilityZone?: AvailabilityZone;
            /**
                * <p>If the subnet is associated with an Outpost, this value specifies the Outpost.</p>
                *         <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Amazon RDS on Amazon Web Services Outposts</a>
                *             in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            SubnetOutpost?: Outpost;
            /**
                * <p>The status of the subnet.</p>
                */
            SubnetStatus?: string;
    }
    export namespace Subnet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Subnet) => any;
    }
    /**
        * <p>Contains the details of an Amazon RDS DB subnet group.</p>
        *         <p>This data type is used as a response element
        *           in the <code>DescribeDBSubnetGroups</code> action.</p>
        */
    export interface DBSubnetGroup {
            /**
                * <p>The name of the DB subnet group.</p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>Provides the description of the DB subnet group.</p>
                */
            DBSubnetGroupDescription?: string;
            /**
                * <p>Provides the VpcId of the DB subnet group.</p>
                */
            VpcId?: string;
            /**
                * <p>Provides the status of the DB subnet group.</p>
                */
            SubnetGroupStatus?: string;
            /**
                * <p>Contains a list of <code>Subnet</code> elements.</p>
                */
            Subnets?: Subnet[];
            /**
                * <p>The Amazon Resource Name (ARN) for the DB subnet group.</p>
                */
            DBSubnetGroupArn?: string;
            /**
                * <p>The network type of the DB subnet group.</p>
                *         <p>Valid values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>IPV4</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DUAL</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6
                *             protocols (<code>DUAL</code>).</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
                *             Working with a DB instance in a VPC</a> in the
                *             <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            SupportedNetworkTypes?: string[];
    }
    export namespace DBSubnetGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBSubnetGroup) => any;
    }
    /**
        * <p>This data type represents the information you need to connect to an Amazon RDS DB instance.
        *       This data type is used as a response element in the following actions:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>CreateDBInstance</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DescribeDBInstances</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DeleteDBInstance</code>
        *                </p>
        *             </li>
        *          </ul>
        *         <p>For the data structure that represents Amazon Aurora DB cluster endpoints,
        *         see <code>DBClusterEndpoint</code>.</p>
        */
    export interface Endpoint {
            /**
                * <p>Specifies the DNS address of the DB instance.</p>
                */
            Address?: string;
            /**
                * <p>Specifies the port that the database engine is listening on.</p>
                */
            Port?: number;
            /**
                * <p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>
                */
            HostedZoneId?: string;
    }
    export namespace Endpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Endpoint) => any;
    }
    /**
        * <p>Provides information on the option groups the DB instance is a member of.</p>
        */
    export interface OptionGroupMembership {
            /**
                * <p>The name of the option group that the instance belongs to.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>The status of the DB instance's option group membership. Valid values are:
                *       <code>in-sync</code>,
                *       <code>pending-apply</code>,
                *       <code>pending-removal</code>,
                *       <code>pending-maintenance-apply</code>,
                *       <code>pending-maintenance-removal</code>,
                *       <code>applying</code>,
                *       <code>removing</code>,
                *       and <code>failed</code>.</p>
                */
            Status?: string;
    }
    export namespace OptionGroupMembership {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OptionGroupMembership) => any;
    }
    /**
        * <p>This data type is used as a response element in the <code>ModifyDBInstance</code> operation and
        *           contains changes that will be applied during the next maintenance window.</p>
        */
    export interface PendingModifiedValues {
            /**
                * <p>The name of the compute and memory capacity class for the DB instance.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>The allocated storage size for the DB instance specified in gibibytes (GiB).</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>The master credentials for the DB instance.</p>
                */
            MasterUserPassword?: string;
            /**
                * <p>The port for the DB instance.</p>
                */
            Port?: number;
            /**
                * <p>The number of days for which automated backups are retained.</p>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>A value that indicates that the Single-AZ DB instance will change to a Multi-AZ deployment.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>The database engine version.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The license model for the DB instance.</p>
                *         <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> |
                *             <code>general-public-license</code>
                *          </p>
                */
            LicenseModel?: string;
            /**
                * <p>The Provisioned IOPS value for the DB instance.</p>
                */
            Iops?: number;
            /**
                * <p>The  database identifier for the DB instance.</p>
                */
            DBInstanceIdentifier?: string;
            /**
                * <p>The storage type of the DB instance.</p>
                */
            StorageType?: string;
            /**
                * <p>The identifier of the CA certificate for the DB instance.</p>
                */
            CACertificateIdentifier?: string;
            /**
                * <p>The DB subnet group for the DB instance.</p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.</p>
                */
            PendingCloudwatchLogsExports?: PendingCloudwatchLogsExports;
            /**
                * <p>The number of CPU cores and the number of threads per core for the DB instance class
                *             of the DB instance.</p>
                */
            ProcessorFeatures?: ProcessorFeature[];
            /**
                * <p>Whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
                */
            IAMDatabaseAuthenticationEnabled?: boolean;
            /**
                * <p>The automation mode of the RDS Custom DB instance: <code>full</code> or <code>all-paused</code>.
                *             If <code>full</code>, the DB instance automates monitoring and instance recovery. If
                *             <code>all-paused</code>, the instance pauses automation for the duration set by
                *             <code>--resume-full-automation-mode-minutes</code>.</p>
                */
            AutomationMode?: AutomationMode | string;
            /**
                * <p>The number of minutes to pause the automation. When the time period ends, RDS Custom resumes full automation.
                *             The minimum value is 60 (default). The maximum value is 1,440.</p>
                */
            ResumeFullAutomationModeTime?: Date;
    }
    export namespace PendingModifiedValues {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingModifiedValues) => any;
    }
    export enum ReplicaMode {
            MOUNTED = "mounted",
            OPEN_READ_ONLY = "open-read-only"
    }
    /**
        * <p>Provides a list of status information for a DB instance.</p>
        */
    export interface DBInstanceStatusInfo {
            /**
                * <p>This value is currently "read replication."</p>
                */
            StatusType?: string;
            /**
                * <p>Boolean value that is true if the instance is operating normally, or false if the instance is in an error state.</p>
                */
            Normal?: boolean;
            /**
                * <p>Status of the DB instance. For a StatusType of read replica, the values can be
                *             replicating, replication stop point set, replication stop point reached, error, stopped,
                *             or terminated.</p>
                */
            Status?: string;
            /**
                * <p>Details of the error if there is an error for the instance. If the instance isn't in an error state, this value is blank.</p>
                */
            Message?: string;
    }
    export namespace DBInstanceStatusInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBInstanceStatusInfo) => any;
    }
    /**
        * <p>Contains the details of an Amazon RDS DB instance.</p>
        *         <p>This data type is used as a response element in the operations <code>CreateDBInstance</code>,
        *           <code>CreateDBInstanceReadReplica</code>, <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>,
        *           <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>, <code>RebootDBInstance</code>,
        *           <code>RestoreDBInstanceFromDBSnapshot</code>, <code>RestoreDBInstanceFromS3</code>, <code>RestoreDBInstanceToPointInTime</code>,
        *           <code>StartDBInstance</code>, and <code>StopDBInstance</code>.</p>
        */
    export interface DBInstance {
            /**
                * <p>Contains a user-supplied database identifier. This identifier is the unique key that identifies a DB instance.</p>
                */
            DBInstanceIdentifier?: string;
            /**
                * <p>Contains the name of the compute and memory capacity class of the DB instance.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>The name of the database engine to be used for this DB instance.</p>
                */
            Engine?: string;
            /**
                * <p>Specifies the current state of this database.</p>
                *         <p>For information about DB instance statuses, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/accessing-monitoring.html#Overview.DBInstance.Status">Viewing DB instance status</a>
                *           in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            DBInstanceStatus?: string;
            /**
                * <p>The time when a stopped DB instance is restarted automatically.</p>
                */
            AutomaticRestartTime?: Date;
            /**
                * <p>Contains the master username for the DB instance.</p>
                */
            MasterUsername?: string;
            /**
                * <p>The meaning of this parameter differs according to the database engine you use.</p>
                *         <p>
                *             <b>MySQL, MariaDB, SQL Server, PostgreSQL</b>
                *          </p>
                *         <p>Contains the name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance.</p>
                *         <p>Type: String</p>
                *         <p>
                *             <b>Oracle</b>
                *          </p>
                *         <p>Contains the Oracle System ID (SID) of the created DB instance. Not shown when the returned parameters do not apply to an Oracle DB instance.</p>
                */
            DBName?: string;
            /**
                * <p>Specifies the connection endpoint.</p>
                *         <note>
                *             <p>The endpoint might not be shown for instances whose status is <code>creating</code>.</p>
                *         </note>
                */
            Endpoint?: Endpoint;
            /**
                * <p>Specifies the allocated storage size specified in gibibytes (GiB).</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>Provides the date and time the DB instance was created.</p>
                */
            InstanceCreateTime?: Date;
            /**
                * <p>Specifies the daily time range during which automated backups are
                *         created if automated backups are enabled, as determined
                *         by the <code>BackupRetentionPeriod</code>.</p>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>Specifies the number of days for which automatic DB snapshots are retained.</p>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>A list of DB security group elements containing
                *         <code>DBSecurityGroup.Name</code> and <code>DBSecurityGroup.Status</code> subelements.</p>
                */
            DBSecurityGroups?: DBSecurityGroupMembership[];
            /**
                * <p>Provides a list of VPC security group elements that the DB instance belongs to.</p>
                */
            VpcSecurityGroups?: VpcSecurityGroupMembership[];
            /**
                * <p>Provides the list of DB parameter groups applied to this DB instance.</p>
                */
            DBParameterGroups?: DBParameterGroupStatus[];
            /**
                * <p>Specifies the name of the Availability Zone the DB instance is located in.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>Specifies information on the subnet group associated with the DB instance, including the name, description, and subnets in the subnet group.</p>
                */
            DBSubnetGroup?: DBSubnetGroup;
            /**
                * <p>Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>A value that specifies that changes to the DB instance are pending. This element is only included when changes are pending. Specific changes are identified by subelements.</p>
                */
            PendingModifiedValues?: PendingModifiedValues;
            /**
                * <p>Specifies the latest time to which a database can be restored with point-in-time restore.</p>
                */
            LatestRestorableTime?: Date;
            /**
                * <p>Specifies if the DB instance is a Multi-AZ deployment. This setting doesn't apply to RDS Custom.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>Indicates the database engine version.</p>
                */
            EngineVersion?: string;
            /**
                * <p>A value that indicates that minor version patches are applied automatically.</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>Contains the identifier of the source DB instance if this DB instance is a read
                *             replica.</p>
                */
            ReadReplicaSourceDBInstanceIdentifier?: string;
            /**
                * <p>Contains one or more identifiers of the read replicas associated with this DB
                *             instance.</p>
                */
            ReadReplicaDBInstanceIdentifiers?: string[];
            /**
                * <p>Contains one or more identifiers of Aurora DB clusters to which the RDS DB instance
                *             is replicated as a read replica. For example, when you create an Aurora read replica of
                *             an RDS for MySQL DB instance, the Aurora MySQL DB cluster for the Aurora read replica is
                *             shown. This output doesn't contain information about cross-Region Aurora read
                *             replicas.</p>
                *         <note>
                *             <p>Currently, each RDS DB instance can have only one Aurora read replica.</p>
                *         </note>
                */
            ReadReplicaDBClusterIdentifiers?: string[];
            /**
                * <p>The open mode of an Oracle read replica. The default is <code>open-read-only</code>.
                *             For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a>
                *             in the <i>Amazon RDS User Guide</i>.</p>
                *         <note>
                *             <p>This attribute is only supported in RDS for Oracle.</p>
                *         </note>
                */
            ReplicaMode?: ReplicaMode | string;
            /**
                * <p>License model information for this DB instance. This setting doesn't apply to RDS Custom.</p>
                */
            LicenseModel?: string;
            /**
                * <p>Specifies the Provisioned IOPS (I/O operations per second) value.</p>
                */
            Iops?: number;
            /**
                * <p>Provides the list of option group memberships for this DB instance.</p>
                */
            OptionGroupMemberships?: OptionGroupMembership[];
            /**
                * <p>If present, specifies the name of the character set that this instance is associated with.</p>
                */
            CharacterSetName?: string;
            /**
                * <p>The name of the NCHAR character set for the Oracle DB instance. This character set specifies the
                *             Unicode encoding for data stored in table columns of type NCHAR, NCLOB, or NVARCHAR2.</p>
                */
            NcharCharacterSetName?: string;
            /**
                * <p>If present, specifies the name of the secondary Availability Zone for a DB instance with multi-AZ support.</p>
                */
            SecondaryAvailabilityZone?: string;
            /**
                * <p>Specifies the accessibility options for the DB instance.</p>
                *         <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint
                *           resolves to the private IP address from within the DB cluster's virtual private cloud
                *           (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access
                *           to the DB cluster is ultimately controlled by the security group it uses. That public
                *           access isn't permitted if the security group assigned to the DB cluster doesn't permit
                *           it.</p>
                *         <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
                *         <p>For more information, see <a>CreateDBInstance</a>.</p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>The status of a read replica. If the instance isn't a read replica, this is
                *             blank.</p>
                */
            StatusInfos?: DBInstanceStatusInfo[];
            /**
                * <p>Specifies the storage type associated with DB instance.</p>
                */
            StorageType?: string;
            /**
                * <p>The ARN from the key store with which the instance is associated for TDE encryption.</p>
                */
            TdeCredentialArn?: string;
            /**
                * <p>Specifies the port that the DB instance listens on. If the DB instance is part of a DB cluster, this can be a different port than the DB cluster port.</p>
                */
            DbInstancePort?: number;
            /**
                * <p>If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.</p>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>Specifies whether the DB instance is encrypted.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>If <code>StorageEncrypted</code> is true, the Amazon Web Services KMS key identifier
                *             for the encrypted DB instance.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The Amazon Web Services Region-unique, immutable identifier for the DB instance. This identifier is found in Amazon Web Services CloudTrail log
                *           entries whenever the Amazon Web Services KMS key for the DB instance is accessed.</p>
                */
            DbiResourceId?: string;
            /**
                * <p>The identifier of the CA certificate for this DB instance.</p>
                */
            CACertificateIdentifier?: string;
            /**
                * <p>The Active Directory Domain membership records associated with the DB instance.</p>
                */
            DomainMemberships?: DomainMembership[];
            /**
                * <p>Specifies whether tags are copied from the DB instance to snapshots of the DB instance.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this
                *             value for an Aurora DB instance has no effect on the DB cluster setting. For more
                *             information, see <code>DBCluster</code>.</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.</p>
                */
            MonitoringInterval?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that receives the Enhanced Monitoring metrics data for the DB instance.</p>
                */
            EnhancedMonitoringResourceArn?: string;
            /**
                * <p>The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.</p>
                */
            MonitoringRoleArn?: string;
            /**
                * <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance
                *       after a failure of the existing primary instance. For more information,
                *       see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance">
                *           Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
                */
            PromotionTier?: number;
            /**
                * <p>The Amazon Resource Name (ARN) for the DB instance.</p>
                */
            DBInstanceArn?: string;
            /**
                * <p>The time zone of the DB instance.
                *             In most cases, the <code>Timezone</code> element is empty.
                *             <code>Timezone</code> content appears only for
                *             Microsoft SQL Server DB instances
                *             that were created with a time zone specified.</p>
                */
            Timezone?: string;
            /**
                * <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
                *         <p>IAM database authentication can be enabled for the following database engines</p>
                *         <ul>
                *             <li>
                *                 <p>For MySQL 5.6, minor version 5.6.34 or higher</p>
                *             </li>
                *             <li>
                *                 <p>For MySQL 5.7, minor version 5.7.16 or higher</p>
                *             </li>
                *             <li>
                *                 <p>Aurora 5.6 or higher. To enable IAM database authentication for Aurora, see DBCluster Type.</p>
                *             </li>
                *          </ul>
                */
            IAMDatabaseAuthenticationEnabled?: boolean;
            /**
                * <p>True if Performance Insights is enabled for the DB instance, and otherwise false.</p>
                */
            PerformanceInsightsEnabled?: boolean;
            /**
                * <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                */
            PerformanceInsightsKMSKeyId?: string;
            /**
                * <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).</p>
                */
            PerformanceInsightsRetentionPeriod?: number;
            /**
                * <p>A list of log types that this DB instance is configured to export to CloudWatch Logs.</p>
                *         <p>Log types vary by DB engine. For information about the log types for each DB engine, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html">Amazon RDS Database Log Files</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            EnabledCloudwatchLogsExports?: string[];
            /**
                * <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
                */
            ProcessorFeatures?: ProcessorFeature[];
            /**
                * <p>Indicates if the DB instance has deletion protection enabled.
                *             The database can't be deleted when deletion protection is enabled.
                *             For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
                *                 Deleting a DB Instance</a>.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The Amazon Web Services Identity and Access Management (IAM) roles associated with the DB instance.</p>
                */
            AssociatedRoles?: DBInstanceRole[];
            /**
                * <p>Specifies the listener connection endpoint for SQL Server Always On.</p>
                */
            ListenerEndpoint?: Endpoint;
            /**
                * <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
                */
            MaxAllocatedStorage?: number;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            TagList?: Tag[];
            /**
                * <p>The list of replicated automated backups associated with the DB instance.</p>
                */
            DBInstanceAutomatedBackupsReplications?: DBInstanceAutomatedBackupsReplication[];
            /**
                * <p>Specifies whether a customer-owned IP address (CoIP) is enabled for an RDS on Outposts DB instance.</p>
                *         <p>A <i>CoIP </i>provides local or external connectivity to resources in
                *             your Outpost subnets through your on-premises network. For some use cases, a CoIP can
                *             provide lower latency for connections to the DB instance from outside of its virtual
                *             private cloud (VPC) on your local network.</p>
                *         <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a>
                *             in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a>
                *             in the <i>Amazon Web Services Outposts User Guide</i>.</p>
                */
            CustomerOwnedIpEnabled?: boolean;
            /**
                * <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
                */
            AwsBackupRecoveryPointArn?: string;
            /**
                * <p>The status of the database activity stream.</p>
                */
            ActivityStreamStatus?: ActivityStreamStatus | string;
            /**
                * <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream.
                *             The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                */
            ActivityStreamKmsKeyId?: string;
            /**
                * <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
                */
            ActivityStreamKinesisStreamName?: string;
            /**
                * <p>The mode of the database activity stream. Database events such as a change or access generate
                *             an activity stream event. RDS for Oracle always handles these events asynchronously.</p>
                */
            ActivityStreamMode?: ActivityStreamMode | string;
            /**
                * <p>Indicates whether engine-native audit fields are included in the database activity stream.</p>
                */
            ActivityStreamEngineNativeAuditFieldsIncluded?: boolean;
            /**
                * <p>The automation mode of the RDS Custom DB instance: <code>full</code> or <code>all paused</code>.
                *             If <code>full</code>, the DB instance automates monitoring and instance recovery. If
                *             <code>all paused</code>, the instance pauses automation for the duration set by
                *             <code>--resume-full-automation-mode-minutes</code>.</p>
                */
            AutomationMode?: AutomationMode | string;
            /**
                * <p>The number of minutes to pause the automation. When the time period ends, RDS Custom resumes full automation.
                *             The minimum value is 60 (default). The maximum value is 1,440.</p>
                */
            ResumeFullAutomationModeTime?: Date;
            /**
                * <p>The instance profile associated with the underlying Amazon EC2 instance of an
                *             RDS Custom DB instance. The instance profile must meet the following requirements:</p>
                *         <ul>
                *             <li>
                *                 <p>The profile must exist in your account.</p>
                *             </li>
                *             <li>
                *                 <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p>
                *             </li>
                *             <li>
                *                 <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p>
                *             </li>
                *          </ul>
                *         <p>For the list of permissions required for the IAM role, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc">
                *                 Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            CustomIamInstanceProfile?: string;
            /**
                * <p>Specifies where automated backups and manual snapshots are stored: Amazon Web Services Outposts or the Amazon Web Services Region.</p>
                */
            BackupTarget?: string;
            /**
                * <p>The network type of the DB instance.</p>
                *         <p>Valid values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>IPV4</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DUAL</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance.
                *             A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6
                *             protocols (<code>DUAL</code>).</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
                *             Working with a DB instance in a VPC</a> in the
                *             <i>Amazon RDS User Guide</i> and
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
                *                 Working with a DB instance in a VPC</a> in the
                *             <i>Amazon Aurora User Guide.</i>
                *          </p>
                */
            NetworkType?: string;
    }
    export namespace DBInstance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBInstance) => any;
    }
    export interface CreateDBInstanceResult {
            /**
                * <p>Contains the details of an Amazon RDS DB instance.</p>
                *         <p>This data type is used as a response element in the operations <code>CreateDBInstance</code>,
                *           <code>CreateDBInstanceReadReplica</code>, <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>,
                *           <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>, <code>RebootDBInstance</code>,
                *           <code>RestoreDBInstanceFromDBSnapshot</code>, <code>RestoreDBInstanceFromS3</code>, <code>RestoreDBInstanceToPointInTime</code>,
                *           <code>StartDBInstance</code>, and <code>StopDBInstance</code>.</p>
                */
            DBInstance?: DBInstance;
    }
    export namespace CreateDBInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBInstanceResult) => any;
    }
    /**
        * <p>The user already has a DB instance with the given identifier.</p>
        */
    export class DBInstanceAlreadyExistsFault extends __BaseException {
            readonly name: "DBInstanceAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBInstanceAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>The request would result in the user exceeding the allowed number of DB
        *             instances.</p>
        */
    export class InstanceQuotaExceededFault extends __BaseException {
            readonly name: "InstanceQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InstanceQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>The specified DB instance class isn't available in the specified Availability
        *             Zone.</p>
        */
    export class InsufficientDBInstanceCapacityFault extends __BaseException {
            readonly name: "InsufficientDBInstanceCapacityFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientDBInstanceCapacityFault, __BaseException>);
    }
    /**
        * <p>The network type is invalid for the DB instance. Valid nework type values are <code>IPV4</code> and <code>DUAL</code>.</p>
        */
    export class NetworkTypeNotSupported extends __BaseException {
            readonly name: "NetworkTypeNotSupported";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NetworkTypeNotSupported, __BaseException>);
    }
    /**
        * <p>Provisioned IOPS not available in the specified Availability Zone.</p>
        */
    export class ProvisionedIopsNotAvailableInAZFault extends __BaseException {
            readonly name: "ProvisionedIopsNotAvailableInAZFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ProvisionedIopsNotAvailableInAZFault, __BaseException>);
    }
    /**
        * <p>Storage of the <code>StorageType</code> specified can't be associated
        *             with the DB instance.</p>
        */
    export class StorageTypeNotSupportedFault extends __BaseException {
            readonly name: "StorageTypeNotSupportedFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StorageTypeNotSupportedFault, __BaseException>);
    }
    export interface CreateDBInstanceReadReplicaMessage {
            /**
                * <p>The DB instance identifier of the read replica. This identifier is the unique key
                *             that identifies a DB instance. This parameter is stored as a lowercase string.</p>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>The identifier of the DB instance that will act as the source for the read replica.
                *             Each DB instance can have up to five read replicas.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, PostgreSQL, or SQL Server DB
                *                     instance.</p>
                *             </li>
                *             <li>
                *                 <p>Can specify a DB instance that is a MySQL read replica only if the source is running MySQL
                *                     5.6 or later.</p>
                *             </li>
                *             <li>
                *                 <p>For the limitations of Oracle read replicas, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the
                *                   <i>Amazon RDS User Guide</i>.</p>
                *             </li>
                *             <li>
                *                 <p>For the limitations of SQL Server read replicas, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/SQLServer.ReadReplicas.Limitations.html">Read Replica
                *                         Limitations with Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p>
                *             </li>
                *             <li>
                *                 <p>Can specify a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or
                *                     later (9.4.7 and higher for cross-Region replication).</p>
                *             </li>
                *             <li>
                *                 <p>The specified DB instance must have automatic backups enabled, that is, its backup
                *                     retention period must be greater than 0.</p>
                *             </li>
                *             <li>
                *                 <p>If the source DB instance is in the same Amazon Web Services Region as the read replica, specify a valid DB
                *                     instance identifier.</p>
                *             </li>
                *             <li>
                *                 <p>If the source DB instance is in a different Amazon Web Services Region from the read replica, specify a valid DB instance ARN.
                *              For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">Constructing an ARN for Amazon RDS</a>
                *              in the <i>Amazon RDS User Guide</i>. This doesn't apply to SQL Server or RDS Custom, which don't support
                *              cross-Region replicas.</p>
                *             </li>
                *          </ul>
                */
            SourceDBInstanceIdentifier: string | undefined;
            /**
                * <p>The compute and memory capacity of the read replica, for example
                *                 db.m4.large. Not all DB instance classes are available in all Amazon Web Services
                *             Regions, or for all database engines. For the full list of DB instance classes, and
                *             availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance
                *                 Class</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>Default: Inherits from the source DB instance.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>The Availability Zone (AZ) where the read replica will be created.</p>
                *         <p>Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region.</p>
                *         <p>Example: <code>us-east-1d</code>
                *          </p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The port number that the DB instance uses for connections.</p>
                *         <p>Default: Inherits from the source DB instance</p>
                *         <p>Valid Values: <code>1150-65535</code>
                *          </p>
                */
            Port?: number;
            /**
                * <p>A value that indicates whether the read replica is in a Multi-AZ deployment.</p>
                *         <p>You can create a read replica as a Multi-AZ DB instance. RDS creates a standby of
                *             your replica in another Availability Zone for failover support for the replica. Creating
                *             your read replica as a Multi-AZ DB instance is independent of whether the source
                *             database is a Multi-AZ DB instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>A value that indicates whether minor engine upgrades are applied automatically to the
                *             read replica during the maintenance window.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Default: Inherits from the source DB instance</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p>
                */
            Iops?: number;
            /**
                * <p>The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.</p>
                *         <note>
                *             <p>For SQL Server, you must use the option group associated with the source
                *                 instance.</p>
                *         </note>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>The name of the DB parameter group to associate with this DB instance.</p>
                *         <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS
                *             uses the <code>DBParameterGroup</code> of source DB instance for a same Region read
                *             replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a
                *             cross-Region read replica.</p>
                *         <p>Specifying a parameter group for this operation is only supported for Oracle DB instances. It
                *         isn't supported for RDS Custom.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                */
            DBParameterGroupName?: string;
            /**
                * <p>A value that indicates whether the DB instance is publicly accessible.</p>
                *         <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint
                *           resolves to the private IP address from within the DB cluster's virtual private cloud
                *           (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access
                *           to the DB cluster is ultimately controlled by the security group it uses. That public
                *           access isn't permitted if the security group assigned to the DB cluster doesn't permit
                *           it.</p>
                *         <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
                *         <p>For more information, see <a>CreateDBInstance</a>.</p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
            /**
                * <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Can only be specified if the source DB instance identifier specifies a DB instance in another Amazon Web Services Region.</p>
                *             </li>
                *             <li>
                *                 <p>If supplied, must match the name of an existing DBSubnetGroup.</p>
                *             </li>
                *             <li>
                *                 <p>The specified DB subnet group must be in the same Amazon Web Services Region in which the operation is running.</p>
                *             </li>
                *             <li>
                *                 <p>All read replicas in one Amazon Web Services Region that are created from the same source DB
                *                     instance must either:></p>
                *                 <ul>
                *                   <li>
                *                         <p>Specify DB subnet groups from the same VPC. All these read replicas are created in the same
                *                             VPC.</p>
                *                     </li>
                *                   <li>
                *                         <p>Not specify a DB subnet group. All these read replicas are created outside of any
                *                             VPC.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                *         <p>Example: <code>mydbsubnetgroup</code>
                *          </p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>A list of Amazon EC2 VPC security groups to associate with the read replica.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>Specifies the storage type to be associated with the read replica.</p>
                *         <p>Valid values: <code>standard | gp2 | io1</code>
                *          </p>
                *         <p>If you specify <code>io1</code>, you must also include a value for the
                *             <code>Iops</code> parameter.</p>
                *         <p>Default: <code>io1</code> if the <code>Iops</code> parameter
                *             is specified, otherwise <code>gp2</code>
                *          </p>
                */
            StorageType?: string;
            /**
                * <p>A value that indicates whether to copy all tags from the read replica to snapshots of
                *             the read replica. By default, tags are not copied.</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>The interval, in seconds, between points when Enhanced Monitoring metrics are
                *             collected for the read replica. To disable collecting Enhanced Monitoring metrics,
                *             specify 0. The default is 0.</p>
                *         <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code>
                *       to a value other than 0.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code>
                *          </p>
                */
            MonitoringInterval?: number;
            /**
                * <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For
                *       example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role,
                *       go to <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To
                *           create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must
                *           supply a <code>MonitoringRoleArn</code> value.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            MonitoringRoleArn?: string;
            /**
                * <p>The Amazon Web Services KMS key identifier for an encrypted read replica.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                *         <p>If you create an encrypted read replica in the same Amazon Web Services Region as the source DB
                *             instance, then do not specify a value for this parameter. A read replica in the same Amazon Web Services Region
                *             is always encrypted with the same KMS key as the source DB instance.</p>
                *         <p>If you create an encrypted read replica in a different Amazon Web Services Region, then you must
                *             specify a KMS key identifier for the destination Amazon Web Services Region. KMS keys are specific to
                *             the Amazon Web Services Region that they are created in, and you can't use KMS keys from one
                *             Amazon Web Services Region in another Amazon Web Services Region.</p>
                *         <p>You can't create an encrypted read replica from an unencrypted DB instance.</p>
                *         <p>This setting doesn't apply to RDS Custom, which uses the same KMS key as the primary
                *             replica.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action
                *             in the source Amazon Web Services Region that contains the source DB instance.</p>
                *         <p>You must specify this parameter when you create an encrypted read replica from
                *             another Amazon Web Services Region by using the Amazon RDS API. Don't specify
                *                 <code>PreSignedUrl</code> when you are creating an encrypted read replica in the
                *             same Amazon Web Services Region.</p>
                *         <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action
                *             that can be executed in the source Amazon Web Services Region that contains the encrypted source DB instance.
                *             The presigned URL request must contain the following parameter values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>DestinationRegion</code> - The Amazon Web Services Region that the encrypted read
                *                     replica is created in. This Amazon Web Services Region is the same one where the
                *                         <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL.</p>
                *                 <p>For example, if you create an encrypted DB instance in the us-west-1 Amazon Web Services Region,
                *                     from a source DB instance in the us-east-2 Amazon Web Services Region,
                *                     then you call the <code>CreateDBInstanceReadReplica</code> action in
                *                     the us-east-1 Amazon Web Services Region and provide a presigned URL that contains a call to the
                *                     <code>CreateDBInstanceReadReplica</code> action in the us-west-2 Amazon Web Services Region. For this
                *                     example, the <code>DestinationRegion</code> in the presigned URL must be set to
                *                     the us-east-1 Amazon Web Services Region.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>KmsKeyId</code> - The Amazon Web Services KMS key identifier for the key to use to
                *                     encrypt the read replica in the destination Amazon Web Services Region. This is the same
                *                     identifier for both the <code>CreateDBInstanceReadReplica</code> action that is
                *                     called in the destination Amazon Web Services Region, and the action contained in the presigned
                *                     URL.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for
                *                     the encrypted DB instance to be replicated. This identifier must be in the
                *                     Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you
                *                     are creating an encrypted read replica from a DB instance in the us-west-2 Amazon Web Services
                *                     Region, then your <code>SourceDBInstanceIdentifier</code> looks like the
                *                     following example:
                *                         <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>.</p>
                *             </li>
                *          </ul>
                *         <p>To learn how to generate a Signature Version 4 signed request, see
                *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)</a> and
                *             <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>.</p>
                *         <note>
                *             <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify
                *                     <code>SourceRegion</code> (or <code>--source-region</code> for the CLI)
                *                 instead of specifying <code>PreSignedUrl</code> manually. Specifying
                *                     <code>SourceRegion</code> autogenerates a presigned URL that is a valid request
                *                 for the operation that can be executed in the source Amazon Web Services Region.</p>
                *             <p>
                *                <code>SourceRegion</code> isn't supported for SQL Server, because SQL Server on Amazon RDS
                *                 doesn't support cross-Region read replicas.</p>
                *         </note>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            PreSignedUrl?: string;
            /**
                * <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management
                *             (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
                *         <p>For more information about IAM database authentication, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
                *               IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            EnableIAMDatabaseAuthentication?: boolean;
            /**
                * <p>A value that indicates whether to enable Performance Insights for the read replica.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using
                *             Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            EnablePerformanceInsights?: boolean;
            /**
                * <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                *         <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS
                *             uses your default KMS key. There is a default KMS key for your Amazon Web Services account.
                *             Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            PerformanceInsightsKMSKeyId?: string;
            /**
                * <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            PerformanceInsightsRetentionPeriod?: number;
            /**
                * <p>The list of logs that the new DB instance is to export to CloudWatch Logs. The values
                *             in the list depend on the DB engine being used. For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
                *                 Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            EnableCloudwatchLogsExports?: string[];
            /**
                * <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            ProcessorFeatures?: ProcessorFeature[];
            /**
                * <p>A value that indicates whether the DB instance class of the DB instance uses its default
                *             processor features.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            UseDefaultProcessorFeatures?: boolean;
            /**
                * <p>A value that indicates whether the DB instance has deletion protection enabled.
                *             The database can't be deleted when deletion protection is enabled. By default,
                *             deletion protection isn't enabled. For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
                *                 Deleting a DB Instance</a>.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL
                *             Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
                *             Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            Domain?: string;
            /**
                * <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            DomainIAMRoleName?: string;
            /**
                * <p>The open mode of the replica database: mounted or read-only.</p>
                *         <note>
                *             <p>This parameter is only supported for Oracle DB instances.</p>
                *         </note>
                *         <p>Mounted DB replicas are included in Oracle Database Enterprise Edition. The main use case for
                *             mounted replicas is cross-Region disaster recovery. The primary database doesn't use Active
                *             Data Guard to transmit information to the mounted replica. Because it doesn't accept
                *             user connections, a mounted replica can't serve a read-only workload.</p>
                *         <p>You can create a combination of mounted and read-only DB replicas for the same primary DB instance.
                *             For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a>
                *             in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>For RDS Custom, you must specify this parameter and set it to <code>mounted</code>. The value won't be set by default.
                *             After replica creation, you can manage the open mode manually.</p>
                */
            ReplicaMode?: ReplicaMode | string;
            /**
                * <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
                *         <p>For more information about this setting, including limitations that apply to it, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
                *                 Managing capacity automatically with Amazon RDS storage autoscaling</a>
                *             in the <i>Amazon RDS User Guide</i>.</p>
                */
            MaxAllocatedStorage?: number;
            /**
                * <p>The instance profile associated with the underlying Amazon EC2 instance of an
                *             RDS Custom DB instance. The instance profile must meet the following requirements:</p>
                *         <ul>
                *             <li>
                *                 <p>The profile must exist in your account.</p>
                *             </li>
                *             <li>
                *                 <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p>
                *             </li>
                *             <li>
                *                 <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p>
                *             </li>
                *          </ul>
                *         <p>For the list of permissions required for the IAM role, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc">
                *                 Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting is required for RDS Custom.</p>
                */
            CustomIamInstanceProfile?: string;
            /**
                * <p>The network type of the DB instance.</p>
                *         <p>Valid values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>IPV4</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DUAL</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>The network type is determined by the <code>DBSubnetGroup</code> specified for read replica.
                *             A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6
                *             protocols (<code>DUAL</code>).</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
                *             Working with a DB instance in a VPC</a> in the
                *             <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            NetworkType?: string;
    }
    export namespace CreateDBInstanceReadReplicaMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBInstanceReadReplicaMessage) => any;
    }
    export interface CreateDBInstanceReadReplicaResult {
            /**
                * <p>Contains the details of an Amazon RDS DB instance.</p>
                *         <p>This data type is used as a response element in the operations <code>CreateDBInstance</code>,
                *           <code>CreateDBInstanceReadReplica</code>, <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>,
                *           <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>, <code>RebootDBInstance</code>,
                *           <code>RestoreDBInstanceFromDBSnapshot</code>, <code>RestoreDBInstanceFromS3</code>, <code>RestoreDBInstanceToPointInTime</code>,
                *           <code>StartDBInstance</code>, and <code>StopDBInstance</code>.</p>
                */
            DBInstance?: DBInstance;
    }
    export namespace CreateDBInstanceReadReplicaResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBInstanceReadReplicaResult) => any;
    }
    /**
        * <p>The DBSubnetGroup shouldn't be specified while creating read replicas that lie
        *             in the same region as the source instance.</p>
        */
    export class DBSubnetGroupNotAllowedFault extends __BaseException {
            readonly name: "DBSubnetGroupNotAllowedFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSubnetGroupNotAllowedFault, __BaseException>);
    }
    /**
        * <p>The DBSubnetGroup doesn't belong to the same VPC as that of an existing
        *             cross-region read replica of the same source instance.</p>
        */
    export class InvalidDBSubnetGroupFault extends __BaseException {
            readonly name: "InvalidDBSubnetGroupFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBSubnetGroupFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CreateDBParameterGroupMessage {
            /**
                * <p>The name of the DB parameter group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                *         <note>
                *             <p>This value is stored as a lowercase string.</p>
                *         </note>
                */
            DBParameterGroupName: string | undefined;
            /**
                * <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p>
                *         <p>To list all of the available parameter group families for a DB engine, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine <engine></code>
                *          </p>
                *         <p>For example, to list all of the available parameter group families for the MySQL DB engine, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine mysql</code>
                *          </p>
                *         <note>
                *             <p>The output contains duplicates.</p>
                *         </note>
                *         <p>The following are the valid DB engine values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-postgresql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mariadb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mysql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-se</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ex</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-web</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            DBParameterGroupFamily: string | undefined;
            /**
                * <p>The description for the DB parameter group.</p>
                */
            Description: string | undefined;
            /**
                * <p>Tags to assign to the DB parameter group.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDBParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBParameterGroupMessage) => any;
    }
    export interface CreateDBParameterGroupResult {
            /**
                * <p>Contains the details of an Amazon RDS DB parameter group.</p>
                *         <p>This data type is used as a response element in the <code>DescribeDBParameterGroups</code> action.</p>
                */
            DBParameterGroup?: DBParameterGroup;
    }
    export namespace CreateDBParameterGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBParameterGroupResult) => any;
    }
    export enum AuthScheme {
            SECRETS = "SECRETS"
    }
    export enum IAMAuthMode {
            DISABLED = "DISABLED",
            REQUIRED = "REQUIRED"
    }
    /**
        * <p>Specifies the details of authentication used by a proxy to log in as a specific database user.</p>
        */
    export interface UserAuthConfig {
            /**
                * <p>A user-specified description about the authentication used by a proxy to log in as a specific database user.</p>
                */
            Description?: string;
            /**
                * <p>The name of the database user to which the proxy connects.</p>
                */
            UserName?: string;
            /**
                * <p>The type of authentication that the proxy uses for connections from the proxy to the underlying database.</p>
                */
            AuthScheme?: AuthScheme | string;
            /**
                * <p>The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate
                *         to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.</p>
                */
            SecretArn?: string;
            /**
                * <p>Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy.</p>
                */
            IAMAuth?: IAMAuthMode | string;
    }
    export namespace UserAuthConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserAuthConfig) => any;
    }
    export enum EngineFamily {
            MYSQL = "MYSQL",
            POSTGRESQL = "POSTGRESQL"
    }
    export interface CreateDBProxyRequest {
            /**
                * <p>The identifier for the proxy. This name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
                */
            DBProxyName: string | undefined;
            /**
                * <p>The kinds of databases that the proxy can connect to.
                *           This value determines which database network protocol the proxy recognizes when it interprets
                *         network traffic to and from the database.
                *         The engine family applies to MySQL and PostgreSQL for both RDS and Aurora.</p>
                */
            EngineFamily: EngineFamily | string | undefined;
            /**
                * <p>The authorization mechanism that the proxy uses.</p>
                */
            Auth: UserAuthConfig[] | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>One or more VPC subnet IDs to associate with the new proxy.</p>
                */
            VpcSubnetIds: string[] | undefined;
            /**
                * <p>One or more VPC security group IDs to associate with the new proxy.</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
                *         By enabling this setting, you can enforce encrypted TLS connections to the proxy.</p>
                */
            RequireTLS?: boolean;
            /**
                * <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this
                *         value higher or lower than the connection timeout limit for the associated database.</p>
                */
            IdleClientTimeout?: number;
            /**
                * <p>Whether the proxy includes detailed information about SQL statements in its logs.
                *         This information helps you to debug issues involving SQL behavior or the performance
                *         and scalability of the proxy connections. The debug information includes the text of
                *         SQL statements that you submit through the proxy. Thus, only enable this setting
                *         when needed for debugging, and only when you have security measures in place to
                *         safeguard any sensitive information that appears in the logs.</p>
                */
            DebugLogging?: boolean;
            /**
                * <p>An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDBProxyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBProxyRequest) => any;
    }
    /**
        * <p>Returns the details of authentication used by a proxy to log in as a specific database user.</p>
        */
    export interface UserAuthConfigInfo {
            /**
                * <p>A user-specified description about the authentication used by a proxy to log in as a specific database user.</p>
                */
            Description?: string;
            /**
                * <p>The name of the database user to which the proxy connects.</p>
                */
            UserName?: string;
            /**
                * <p>The type of authentication that the proxy uses for connections from the proxy to the underlying database.</p>
                */
            AuthScheme?: AuthScheme | string;
            /**
                * <p>The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate
                *         to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.</p>
                */
            SecretArn?: string;
            /**
                * <p>Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy.</p>
                */
            IAMAuth?: IAMAuthMode | string;
    }
    export namespace UserAuthConfigInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserAuthConfigInfo) => any;
    }
    export enum DBProxyStatus {
            AVAILABLE = "available",
            CREATING = "creating",
            DELETING = "deleting",
            INCOMPATIBLE_NETWORK = "incompatible-network",
            INSUFFICIENT_RESOURCE_LIMITS = "insufficient-resource-limits",
            MODIFYING = "modifying",
            REACTIVATING = "reactivating",
            SUSPENDED = "suspended",
            SUSPENDING = "suspending"
    }
    /**
        * <p>The data structure representing a proxy managed by the RDS Proxy.</p>
        *         <p>This data type is used as a response element in the <code>DescribeDBProxies</code> action.</p>
        */
    export interface DBProxy {
            /**
                * <p>The identifier for the proxy. This name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
                */
            DBProxyName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the proxy.</p>
                */
            DBProxyArn?: string;
            /**
                * <p>The current status of this proxy. A status of <code>available</code> means the
                *         proxy is ready to handle requests. Other values indicate that you must wait for
                *         the proxy to be ready, or take some action to resolve an issue.</p>
                */
            Status?: DBProxyStatus | string;
            /**
                * <p>The engine family applies to MySQL and PostgreSQL for both RDS and Aurora.</p>
                */
            EngineFamily?: string;
            /**
                * <p>Provides the VPC ID of the DB proxy.</p>
                */
            VpcId?: string;
            /**
                * <p>Provides a list of VPC security groups that the proxy belongs to.</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>The EC2 subnet IDs for the proxy.</p>
                */
            VpcSubnetIds?: string[];
            /**
                * <p>One or more data structures specifying the authorization mechanism to connect to the associated RDS DB instance
                *         or Aurora DB cluster.</p>
                */
            Auth?: UserAuthConfigInfo[];
            /**
                * <p>The Amazon Resource Name (ARN) for the IAM role that the proxy uses to access Amazon Secrets Manager.</p>
                */
            RoleArn?: string;
            /**
                * <p>The endpoint that you can use to connect to the DB proxy. You include the endpoint value in the
                *         connection string for a database client application.</p>
                */
            Endpoint?: string;
            /**
                * <p>Indicates whether Transport Layer Security (TLS) encryption is required for connections to the proxy.</p>
                */
            RequireTLS?: boolean;
            /**
                * <p>The number of seconds a connection to the proxy can have no activity before the proxy drops the client connection.
                *         The proxy keeps the underlying database connection open and puts it back into the connection pool for reuse by
                *         later connection requests.</p>
                *         <p>Default: 1800 (30 minutes)</p>
                *         <p>Constraints: 1 to 28,800</p>
                */
            IdleClientTimeout?: number;
            /**
                * <p>Whether the proxy includes detailed information about SQL statements in its logs.
                *         This information helps you to debug issues involving SQL behavior or the performance
                *         and scalability of the proxy connections. The debug information includes the text of
                *         SQL statements that you submit through the proxy. Thus, only enable this setting
                *         when needed for debugging, and only when you have security measures in place to
                *         safeguard any sensitive information that appears in the logs.</p>
                */
            DebugLogging?: boolean;
            /**
                * <p>The date and time when the proxy was first created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The date and time when the proxy was last updated.</p>
                */
            UpdatedDate?: Date;
    }
    export namespace DBProxy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBProxy) => any;
    }
    export interface CreateDBProxyResponse {
            /**
                * <p>The <code>DBProxy</code> structure corresponding to the new proxy.</p>
                */
            DBProxy?: DBProxy;
    }
    export namespace CreateDBProxyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBProxyResponse) => any;
    }
    /**
        * <p>The specified proxy name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
        */
    export class DBProxyAlreadyExistsFault extends __BaseException {
            readonly name: "DBProxyAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBProxyAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>Your Amazon Web Services account already has the maximum number of proxies in the specified Amazon Web Services Region.</p>
        */
    export class DBProxyQuotaExceededFault extends __BaseException {
            readonly name: "DBProxyQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBProxyQuotaExceededFault, __BaseException>);
    }
    export enum DBProxyEndpointTargetRole {
            READ_ONLY = "READ_ONLY",
            READ_WRITE = "READ_WRITE"
    }
    export interface CreateDBProxyEndpointRequest {
            /**
                * <p>The name of the DB proxy associated with the DB proxy endpoint that you create.</p>
                */
            DBProxyName: string | undefined;
            /**
                * <p>The name of the DB proxy endpoint to create.</p>
                */
            DBProxyEndpointName: string | undefined;
            /**
                * <p>The VPC subnet IDs for the DB proxy endpoint that you create. You can specify a
                *         different set of subnet IDs than for the original DB proxy.</p>
                */
            VpcSubnetIds: string[] | undefined;
            /**
                * <p>The VPC security group IDs for the DB proxy endpoint that you create. You can
                *         specify a different set of security group IDs than for the original DB proxy.
                *         The default is the default security group for the VPC.</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>A value that indicates whether the DB proxy endpoint can be used for read/write
                *         or read-only operations. The default is <code>READ_WRITE</code>.</p>
                */
            TargetRole?: DBProxyEndpointTargetRole | string;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDBProxyEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBProxyEndpointRequest) => any;
    }
    export enum DBProxyEndpointStatus {
            AVAILABLE = "available",
            CREATING = "creating",
            DELETING = "deleting",
            INCOMPATIBLE_NETWORK = "incompatible-network",
            INSUFFICIENT_RESOURCE_LIMITS = "insufficient-resource-limits",
            MODIFYING = "modifying"
    }
    /**
        * <p>The data structure representing an endpoint associated with a DB proxy. RDS automatically creates one
        *         endpoint for each DB proxy. For Aurora DB clusters, you can associate additional endpoints with the same
        *         DB proxy. These endpoints can be read/write or read-only. They can also reside in different VPCs than the
        *         associated DB proxy.</p>
        *         <p>This data type is used as a response element in the <code>DescribeDBProxyEndpoints</code> operation.</p>
        */
    export interface DBProxyEndpoint {
            /**
                * <p>The name for the DB proxy endpoint. An identifier must begin with a letter and
                *         must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen
                *         or contain two consecutive hyphens.</p>
                */
            DBProxyEndpointName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the DB proxy endpoint.</p>
                */
            DBProxyEndpointArn?: string;
            /**
                * <p>The identifier for the DB proxy that is associated with this DB proxy endpoint.</p>
                */
            DBProxyName?: string;
            /**
                * <p>The current status of this DB proxy endpoint. A status of <code>available</code> means the
                *         endpoint is ready to handle requests. Other values indicate that you must wait for
                *         the endpoint to be ready, or take some action to resolve an issue.</p>
                */
            Status?: DBProxyEndpointStatus | string;
            /**
                * <p>Provides the VPC ID of the DB proxy endpoint.</p>
                */
            VpcId?: string;
            /**
                * <p>Provides a list of VPC security groups that the DB proxy endpoint belongs to.</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>The EC2 subnet IDs for the DB proxy endpoint.</p>
                */
            VpcSubnetIds?: string[];
            /**
                * <p>The endpoint that you can use to connect to the DB proxy. You include the endpoint value in the
                *         connection string for a database client application.</p>
                */
            Endpoint?: string;
            /**
                * <p>The date and time when the DB proxy endpoint was first created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>A value that indicates whether the DB proxy endpoint can be used for read/write or read-only operations.</p>
                */
            TargetRole?: DBProxyEndpointTargetRole | string;
            /**
                * <p>A value that indicates whether this endpoint is the default endpoint for the associated DB proxy.
                *         Default DB proxy endpoints always have read/write capability. Other endpoints that you associate with the
                *         DB proxy can be either read/write or read-only.</p>
                */
            IsDefault?: boolean;
    }
    export namespace DBProxyEndpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBProxyEndpoint) => any;
    }
    export interface CreateDBProxyEndpointResponse {
            /**
                * <p>The <code>DBProxyEndpoint</code> object that is created by the API operation.
                *         The DB proxy endpoint that you create might provide capabilities such as read/write
                *         or read-only operations, or using a different VPC than the proxy's default VPC.</p>
                */
            DBProxyEndpoint?: DBProxyEndpoint;
    }
    export namespace CreateDBProxyEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBProxyEndpointResponse) => any;
    }
    /**
        * <p>The specified DB proxy endpoint name must be unique for all DB proxy endpoints owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
        */
    export class DBProxyEndpointAlreadyExistsFault extends __BaseException {
            readonly name: "DBProxyEndpointAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBProxyEndpointAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>The DB proxy already has the maximum number of endpoints.</p>
        */
    export class DBProxyEndpointQuotaExceededFault extends __BaseException {
            readonly name: "DBProxyEndpointQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBProxyEndpointQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>The requested operation can't be performed while the proxy is in this state.</p>
        */
    export class InvalidDBProxyStateFault extends __BaseException {
            readonly name: "InvalidDBProxyStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBProxyStateFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CreateDBSecurityGroupMessage {
            /**
                * <p>The name for the DB security group. This value is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *             <li>
                *                 <p>Must not be "Default"</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>mysecuritygroup</code>
                *          </p>
                */
            DBSecurityGroupName: string | undefined;
            /**
                * <p>The description for the DB security group.</p>
                */
            DBSecurityGroupDescription: string | undefined;
            /**
                * <p>Tags to assign to the DB security group.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDBSecurityGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBSecurityGroupMessage) => any;
    }
    export interface CreateDBSecurityGroupResult {
            /**
                * <p>Contains the details for an Amazon RDS DB security group.</p>
                *         <p>This data type is used as a response element
                *           in the <code>DescribeDBSecurityGroups</code> action.</p>
                */
            DBSecurityGroup?: DBSecurityGroup;
    }
    export namespace CreateDBSecurityGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBSecurityGroupResult) => any;
    }
    /**
        * <p>A DB security group with the name specified in
        *         <code>DBSecurityGroupName</code> already exists.</p>
        */
    export class DBSecurityGroupAlreadyExistsFault extends __BaseException {
            readonly name: "DBSecurityGroupAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSecurityGroupAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>A DB security group isn't allowed for this action.</p>
        */
    export class DBSecurityGroupNotSupportedFault extends __BaseException {
            readonly name: "DBSecurityGroupNotSupportedFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSecurityGroupNotSupportedFault, __BaseException>);
    }
    /**
        * <p>The request would result in the user exceeding the allowed number of DB security
        *             groups.</p>
        */
    export class DBSecurityGroupQuotaExceededFault extends __BaseException {
            readonly name: "DBSecurityGroupQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSecurityGroupQuotaExceededFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CreateDBSnapshotMessage {
            /**
                * <p>The identifier for the DB snapshot.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Can't be null, empty, or blank</p>
                *             </li>
                *             <li>
                *                 <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-snapshot-id</code>
                *          </p>
                */
            DBSnapshotIdentifier: string | undefined;
            /**
                * <p>The identifier of the DB instance that you want to create the snapshot of.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing DBInstance.</p>
                *             </li>
                *          </ul>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDBSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBSnapshotMessage) => any;
    }
    export interface CreateDBSnapshotResult {
            /**
                * <p>Contains the details of an Amazon RDS DB snapshot.</p>
                *         <p>This data type is used as a response element
                *           in the <code>DescribeDBSnapshots</code> action.</p>
                */
            DBSnapshot?: DBSnapshot;
    }
    export namespace CreateDBSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBSnapshotResult) => any;
    }
    /**
        * <p></p>
        */
    export interface CreateDBSubnetGroupMessage {
            /**
                * <p>The name for the DB subnet group. This value is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>Must not be default.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>mydbsubnetgroup</code>
                *          </p>
                */
            DBSubnetGroupName: string | undefined;
            /**
                * <p>The description for the DB subnet group.</p>
                */
            DBSubnetGroupDescription: string | undefined;
            /**
                * <p>The EC2 Subnet IDs for the DB subnet group.</p>
                */
            SubnetIds: string[] | undefined;
            /**
                * <p>Tags to assign to the DB subnet group.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateDBSubnetGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBSubnetGroupMessage) => any;
    }
    export interface CreateDBSubnetGroupResult {
            /**
                * <p>Contains the details of an Amazon RDS DB subnet group.</p>
                *         <p>This data type is used as a response element
                *           in the <code>DescribeDBSubnetGroups</code> action.</p>
                */
            DBSubnetGroup?: DBSubnetGroup;
    }
    export namespace CreateDBSubnetGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDBSubnetGroupResult) => any;
    }
    /**
        * <p>
        *             <code>DBSubnetGroupName</code> is already used by an existing DB subnet group.</p>
        */
    export class DBSubnetGroupAlreadyExistsFault extends __BaseException {
            readonly name: "DBSubnetGroupAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSubnetGroupAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>The request would result in the user exceeding the allowed number of DB subnet
        *             groups.</p>
        */
    export class DBSubnetGroupQuotaExceededFault extends __BaseException {
            readonly name: "DBSubnetGroupQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSubnetGroupQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>The request would result in the user exceeding the allowed number of subnets in a
        *             DB subnet groups.</p>
        */
    export class DBSubnetQuotaExceededFault extends __BaseException {
            readonly name: "DBSubnetQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBSubnetQuotaExceededFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CreateEventSubscriptionMessage {
            /**
                * <p>The name of the subscription.</p>
                *         <p>Constraints: The name must be less than 255 characters.</p>
                */
            SubscriptionName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>
                */
            SnsTopicArn: string | undefined;
            /**
                * <p>The type of source that is generating the events. For example, if you want to be
                *             notified of events generated by a DB instance, you set this parameter to
                *                 <code>db-instance</code>. For RDS Proxy events, specify <code>db-proxy</code>. If this value isn't specified, all events are
                *             returned.</p>
                *         <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> | <code>db-proxy</code>
                *          </p>
                */
            SourceType?: string;
            /**
                * <p>A list of event categories for a particular source type (<code>SourceType</code>)
                *             that you want to subscribe to. You can see a list of the categories for a given source type in the "Amazon RDS event categories and event messages" section of the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.Messages.html">
                *                 <i>Amazon RDS User Guide</i>
                *             </a> or the
                *                 <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Events.Messages.html">
                *                 <i>Amazon Aurora User Guide</i>
                *             </a>.
                *                 You can also see this list by using the <code>DescribeEventCategories</code> operation.</p>
                */
            EventCategories?: string[];
            /**
                * <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response.
                *           An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If <code>SourceIds</code> are supplied, <code>SourceType</code> must also be provided.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB instance, a <code>DBInstanceIdentifier</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB cluster, a <code>DBClusterIdentifier</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB cluster snapshot, a <code>DBClusterSnapshotIdentifier</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is an RDS Proxy, a <code>DBProxyName</code> value must be supplied.</p>
                *             </li>
                *          </ul>
                */
            SourceIds?: string[];
            /**
                * <p>A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active.</p>
                */
            Enabled?: boolean;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
    }
    export namespace CreateEventSubscriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEventSubscriptionMessage) => any;
    }
    export interface CreateEventSubscriptionResult {
            /**
                * <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
                */
            EventSubscription?: EventSubscription;
    }
    export namespace CreateEventSubscriptionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateEventSubscriptionResult) => any;
    }
    /**
        * <p>You have reached the maximum number of event subscriptions.</p>
        */
    export class EventSubscriptionQuotaExceededFault extends __BaseException {
            readonly name: "EventSubscriptionQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EventSubscriptionQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>SNS has responded that there is a problem with the SNS topic specified.</p>
        */
    export class SNSInvalidTopicFault extends __BaseException {
            readonly name: "SNSInvalidTopicFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SNSInvalidTopicFault, __BaseException>);
    }
    /**
        * <p>You do not have permission to publish to the SNS topic ARN.</p>
        */
    export class SNSNoAuthorizationFault extends __BaseException {
            readonly name: "SNSNoAuthorizationFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SNSNoAuthorizationFault, __BaseException>);
    }
    /**
        * <p>The SNS topic ARN does not exist.</p>
        */
    export class SNSTopicArnNotFoundFault extends __BaseException {
            readonly name: "SNSTopicArnNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SNSTopicArnNotFoundFault, __BaseException>);
    }
    /**
        * <p>The supplied subscription name already exists.</p>
        */
    export class SubscriptionAlreadyExistFault extends __BaseException {
            readonly name: "SubscriptionAlreadyExistFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SubscriptionAlreadyExistFault, __BaseException>);
    }
    /**
        * <p>The supplied category does not exist.</p>
        */
    export class SubscriptionCategoryNotFoundFault extends __BaseException {
            readonly name: "SubscriptionCategoryNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SubscriptionCategoryNotFoundFault, __BaseException>);
    }
    export interface CreateGlobalClusterMessage {
            /**
                * <p>The cluster identifier of the new global database cluster.</p>
                */
            GlobalClusterIdentifier?: string;
            /**
                * <p>The Amazon Resource Name (ARN) to use as the primary cluster of the global database.
                *         This parameter is optional.</p>
                */
            SourceDBClusterIdentifier?: string;
            /**
                * <p>The name of the database engine to be used for this DB cluster.</p>
                */
            Engine?: string;
            /**
                * <p>The engine version of the Aurora global database.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The deletion protection setting for the new global database.
                *         The global database can't be deleted when deletion protection is enabled.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon
                *         Aurora will not create a database in the global database cluster you are creating.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The storage encryption setting for the new global database cluster.</p>
                */
            StorageEncrypted?: boolean;
    }
    export namespace CreateGlobalClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGlobalClusterMessage) => any;
    }
    export enum FailoverStatus {
            CANCELLING = "cancelling",
            FAILING_OVER = "failing-over",
            PENDING = "pending"
    }
    /**
        * <p>Contains the state of scheduled or in-process failover operations on an
        *       Aurora global database (<a>GlobalCluster</a>). This Data type is empty unless a failover
        *       operation is scheduled or is currently underway on the Aurora global database.</p>
        */
    export interface FailoverState {
            /**
                * <p>The current status of the Aurora global database (<a>GlobalCluster</a>). Possible values are as follows:</p>
                *         <ul>
                *             <li>
                *                 <p>pending  A request to fail over the Aurora global database (<a>GlobalCluster</a>) has been received by the service. The
                *         <code>GlobalCluster</code>'s primary DB cluster and the specified secondary DB cluster are being verified before the failover
                *         process can start.</p>
                *             </li>
                *             <li>
                *                 <p>failing-over  This status covers the range of Aurora internal operations that take place during the failover process, such
                *         as demoting the primary Aurora DB cluster, promoting the secondary Aurora DB, and synchronizing replicas.</p>
                *             </li>
                *             <li>
                *                 <p>cancelling  The request to fail over the Aurora global database (<a>GlobalCluster</a>) was cancelled and the primary
                *         Aurora DB cluster and the selected secondary Aurora DB cluster are returning to their previous states.</p>
                *             </li>
                *          </ul>
                */
            Status?: FailoverStatus | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Aurora DB cluster that is currently being demoted, and which is associated with this
                *        state.</p>
                */
            FromDbClusterArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Aurora DB cluster that is currently being promoted, and which is associated
                *      with this state.</p>
                */
            ToDbClusterArn?: string;
    }
    export namespace FailoverState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailoverState) => any;
    }
    /**
        * <p>A data structure with information about any primary and
        *         secondary clusters associated with an Aurora global database.</p>
        */
    export interface GlobalClusterMember {
            /**
                * <p>The Amazon Resource Name (ARN) for each Aurora cluster.</p>
                */
            DBClusterArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for each read-only secondary cluster
                *         associated with the Aurora global database.</p>
                */
            Readers?: string[];
            /**
                * <p>Specifies whether the Aurora cluster is the primary cluster
                *         (that is, has read-write capability) for the Aurora global
                *         database with which it is associated.</p>
                */
            IsWriter?: boolean;
            /**
                * <p>Specifies whether a secondary cluster in an Aurora global database has
                *         write forwarding enabled, not enabled, or is in the process of enabling it.</p>
                */
            GlobalWriteForwardingStatus?: WriteForwardingStatus | string;
    }
    export namespace GlobalClusterMember {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GlobalClusterMember) => any;
    }
    /**
        * <p>A data type representing an Aurora global database.</p>
        */
    export interface GlobalCluster {
            /**
                * <p>Contains a user-supplied global database cluster identifier. This identifier is the unique key that
                *         identifies a global database cluster.</p>
                */
            GlobalClusterIdentifier?: string;
            /**
                * <p>The Amazon Web Services Region-unique, immutable identifier for the global database cluster. This identifier is found in
                *         Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS key for the DB cluster is accessed.</p>
                */
            GlobalClusterResourceId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the global database cluster.</p>
                */
            GlobalClusterArn?: string;
            /**
                * <p>Specifies the current state of this global database cluster.</p>
                */
            Status?: string;
            /**
                * <p>The Aurora database engine used by the global database cluster.</p>
                */
            Engine?: string;
            /**
                * <p>Indicates the database engine version.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The default database name within the new global database cluster.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The storage encryption setting for the global database cluster.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>The deletion protection setting for the new global database cluster.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The list of cluster IDs for secondary clusters within the global database cluster. Currently limited to
                *         1 item.</p>
                */
            GlobalClusterMembers?: GlobalClusterMember[];
            /**
                * <p>A data object containing all properties for the current state of an in-process or pending failover process for this Aurora global database.
                *       This object is empty unless the <a>FailoverGlobalCluster</a> API operation has been called on this Aurora global database (<a>GlobalCluster</a>).</p>
                */
            FailoverState?: FailoverState;
    }
    export namespace GlobalCluster {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GlobalCluster) => any;
    }
    export interface CreateGlobalClusterResult {
            /**
                * <p>A data type representing an Aurora global database.</p>
                */
            GlobalCluster?: GlobalCluster;
    }
    export namespace CreateGlobalClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGlobalClusterResult) => any;
    }
    /**
        * <p>The <code>GlobalClusterIdentifier</code> already exists. Choose a new global database identifier (unique name) to create a new global database cluster.</p>
        */
    export class GlobalClusterAlreadyExistsFault extends __BaseException {
            readonly name: "GlobalClusterAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<GlobalClusterAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>The number of global database clusters for this account is already at the maximum allowed.</p>
        */
    export class GlobalClusterQuotaExceededFault extends __BaseException {
            readonly name: "GlobalClusterQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<GlobalClusterQuotaExceededFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CreateOptionGroupMessage {
            /**
                * <p>Specifies the name of the option group to be created.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be 1 to 255 letters, numbers, or hyphens</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>myoptiongroup</code>
                *          </p>
                */
            OptionGroupName: string | undefined;
            /**
                * <p>Specifies the name of the engine that this option group should be associated with.</p>
                *         <p>Valid Values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>mariadb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mysql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-se</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ex</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-web</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            EngineName: string | undefined;
            /**
                * <p>Specifies the major version of the engine that this option group should be associated with.</p>
                */
            MajorEngineVersion: string | undefined;
            /**
                * <p>The description of the option group.</p>
                */
            OptionGroupDescription: string | undefined;
            /**
                * <p>Tags to assign to the option group.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateOptionGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOptionGroupMessage) => any;
    }
    export interface CreateOptionGroupResult {
            /**
                * <p></p>
                */
            OptionGroup?: OptionGroup;
    }
    export namespace CreateOptionGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOptionGroupResult) => any;
    }
    /**
        * <p>The specified CEV was not found.</p>
        */
    export class CustomDBEngineVersionNotFoundFault extends __BaseException {
            readonly name: "CustomDBEngineVersionNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CustomDBEngineVersionNotFoundFault, __BaseException>);
    }
    export interface DeleteCustomDBEngineVersionMessage {
            /**
                * <p>The database engine. The only supported engine is <code>custom-oracle-ee</code>.</p>
                */
            Engine: string | undefined;
            /**
                * <p>The custom engine version (CEV) for your DB instance. This option is required for
                *             RDS Custom, but optional for Amazon RDS. The combination of <code>Engine</code> and
                *             <code>EngineVersion</code> is unique per customer per Amazon Web Services Region.</p>
                */
            EngineVersion: string | undefined;
    }
    export namespace DeleteCustomDBEngineVersionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCustomDBEngineVersionMessage) => any;
    }
    /**
        * <p>You can't delete the CEV.</p>
        */
    export class InvalidCustomDBEngineVersionStateFault extends __BaseException {
            readonly name: "InvalidCustomDBEngineVersionStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidCustomDBEngineVersionStateFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface DeleteDBClusterMessage {
            /**
                * <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match an existing DBClusterIdentifier.</p>
                *             </li>
                *          </ul>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted.
                *           If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot
                *           is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created.
                *           By default, this parameter is disabled.</p>
                *         <note>
                *             <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p>
                *         </note>
                */
            SkipFinalSnapshot?: boolean;
            /**
                * <p>The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code>
                *       is disabled.</p>
                *         <note>
                *             <p>Specifying this parameter and also skipping the creation of a final DB cluster snapshot
                *           with the <code>SkipFinalShapshot</code> parameter results in an error.</p>
                *         </note>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                */
            FinalDBSnapshotIdentifier?: string;
    }
    export namespace DeleteDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBClusterMessage) => any;
    }
    export interface DeleteDBClusterResult {
            /**
                * <p>Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
                *         <p>For an Amazon Aurora DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>PromoteReadReplicaDBCluster</code>,
                *           <code>RestoreDBClusterFromS3</code>, <code>RestoreDBClusterFromSnapshot</code>,
                *           <code>RestoreDBClusterToPointInTime</code>, <code>StartDBCluster</code>, and <code>StopDBCluster</code>.</p>
                *         <p>For a Multi-AZ DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>RebootDBCluster</code>,
                *           <code>RestoreDBClusterFromSnapshot</code>, and <code>RestoreDBClusterToPointInTime</code>.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
                *          </p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace DeleteDBClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBClusterResult) => any;
    }
    /**
        * <p>The specified custom endpoint doesn't exist.</p>
        */
    export class DBClusterEndpointNotFoundFault extends __BaseException {
            readonly name: "DBClusterEndpointNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterEndpointNotFoundFault, __BaseException>);
    }
    export interface DeleteDBClusterEndpointMessage {
            /**
                * <p>The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.</p>
                */
            DBClusterEndpointIdentifier: string | undefined;
    }
    export namespace DeleteDBClusterEndpointMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBClusterEndpointMessage) => any;
    }
    /**
        * <p>The requested operation can't be performed on the endpoint while the endpoint is in this state.</p>
        */
    export class InvalidDBClusterEndpointStateFault extends __BaseException {
            readonly name: "InvalidDBClusterEndpointStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBClusterEndpointStateFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface DeleteDBClusterParameterGroupMessage {
            /**
                * <p>The name of the DB cluster parameter group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be the name of an existing DB cluster parameter group.</p>
                *             </li>
                *             <li>
                *                 <p>You can't delete a default DB cluster parameter group.</p>
                *             </li>
                *             <li>
                *                 <p>Can't be associated with any DB clusters.</p>
                *             </li>
                *          </ul>
                */
            DBClusterParameterGroupName: string | undefined;
    }
    export namespace DeleteDBClusterParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBClusterParameterGroupMessage) => any;
    }
    /**
        * <p>The DB parameter group is in use or is in an invalid state. If you are attempting
        *             to delete the parameter group, you can't delete it when the parameter group is in
        *             this state.</p>
        */
    export class InvalidDBParameterGroupStateFault extends __BaseException {
            readonly name: "InvalidDBParameterGroupStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBParameterGroupStateFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface DeleteDBClusterSnapshotMessage {
            /**
                * <p>The identifier of the DB cluster snapshot to delete.</p>
                *         <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
                */
            DBClusterSnapshotIdentifier: string | undefined;
    }
    export namespace DeleteDBClusterSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBClusterSnapshotMessage) => any;
    }
    export interface DeleteDBClusterSnapshotResult {
            /**
                * <p>Contains the details for an Amazon RDS DB cluster snapshot</p>
                *         <p>This data type is used as a response element
                *           in the <code>DescribeDBClusterSnapshots</code> action.</p>
                */
            DBClusterSnapshot?: DBClusterSnapshot;
    }
    export namespace DeleteDBClusterSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBClusterSnapshotResult) => any;
    }
    /**
        * <p>The quota for retained automated backups was exceeded. This prevents you
        *             from retaining any additional automated backups. The retained automated backups
        *             quota is the same as your DB Instance quota.</p>
        */
    export class DBInstanceAutomatedBackupQuotaExceededFault extends __BaseException {
            readonly name: "DBInstanceAutomatedBackupQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBInstanceAutomatedBackupQuotaExceededFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface DeleteDBInstanceMessage {
            /**
                * <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the name of an existing DB instance.</p>
                *             </li>
                *          </ul>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>A value that indicates whether to skip the creation of a final DB snapshot before deleting the instance.
                *           If you enable this parameter, RDS doesn't create a DB snapshot. If you don't enable this parameter,
                *           RDS creates a DB snapshot before the DB instance is deleted. By default, skip isn't enabled,
                *           and the DB snapshot is created.</p>
                *         <note>
                *             <p>If you don't enable this parameter, you must specify the <code>FinalDBSnapshotIdentifier</code> parameter.</p>
                *         </note>
                *         <p>When a DB instance is in a failure state and has a status of <code>failed</code>, <code>incompatible-restore</code>,
                *           or <code>incompatible-network</code>, RDS can delete the instance only if you enable this parameter.</p>
                *         <p>If you delete a read replica or an RDS Custom instance, you must enable this setting.</p>
                *         <p>This setting is required for RDS Custom.</p>
                */
            SkipFinalSnapshot?: boolean;
            /**
                * <p>The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code>
                *         parameter is disabled.</p>
                *         <note>
                *             <p>If you enable this parameter and also enable SkipFinalShapshot, the command results in an error.</p>
                *         </note>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be 1 to 255 letters or numbers.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>Can't be specified when deleting a read replica.</p>
                *             </li>
                *          </ul>
                */
            FinalDBSnapshotIdentifier?: string;
            /**
                * <p>A value that indicates whether to remove automated backups immediately after the DB
                *             instance is deleted. This parameter isn't case-sensitive. The default is to remove
                *             automated backups immediately after the DB instance is deleted.</p>
                */
            DeleteAutomatedBackups?: boolean;
    }
    export namespace DeleteDBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBInstanceMessage) => any;
    }
    export interface DeleteDBInstanceResult {
            /**
                * <p>Contains the details of an Amazon RDS DB instance.</p>
                *         <p>This data type is used as a response element in the operations <code>CreateDBInstance</code>,
                *           <code>CreateDBInstanceReadReplica</code>, <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>,
                *           <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>, <code>RebootDBInstance</code>,
                *           <code>RestoreDBInstanceFromDBSnapshot</code>, <code>RestoreDBInstanceFromS3</code>, <code>RestoreDBInstanceToPointInTime</code>,
                *           <code>StartDBInstance</code>, and <code>StopDBInstance</code>.</p>
                */
            DBInstance?: DBInstance;
    }
    export namespace DeleteDBInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBInstanceResult) => any;
    }
    /**
        * <p>No automated backup for this DB instance was found.</p>
        */
    export class DBInstanceAutomatedBackupNotFoundFault extends __BaseException {
            readonly name: "DBInstanceAutomatedBackupNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBInstanceAutomatedBackupNotFoundFault, __BaseException>);
    }
    /**
        * <p>Parameter input for the <code>DeleteDBInstanceAutomatedBackup</code> operation.</p>
        */
    export interface DeleteDBInstanceAutomatedBackupMessage {
            /**
                * <p>The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
                */
            DbiResourceId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the automated backups to delete, for example,
                *             <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            DBInstanceAutomatedBackupsArn?: string;
    }
    export namespace DeleteDBInstanceAutomatedBackupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBInstanceAutomatedBackupMessage) => any;
    }
    /**
        * <p>Earliest and latest time an instance can be restored to:</p>
        */
    export interface RestoreWindow {
            /**
                * <p>The earliest time you can restore an instance to.</p>
                */
            EarliestTime?: Date;
            /**
                * <p>The latest time you can restore an instance to.</p>
                */
            LatestTime?: Date;
    }
    export namespace RestoreWindow {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreWindow) => any;
    }
    /**
        * <p>An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that
        *             existed at the time you deleted the source instance.</p>
        */
    export interface DBInstanceAutomatedBackup {
            /**
                * <p>The Amazon Resource Name (ARN) for the automated backups.</p>
                */
            DBInstanceArn?: string;
            /**
                * <p>The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
                */
            DbiResourceId?: string;
            /**
                * <p>The Amazon Web Services Region associated with the automated backup.</p>
                */
            Region?: string;
            /**
                * <p>The customer id of the instance that is/was associated with the automated backup.</p>
                */
            DBInstanceIdentifier?: string;
            /**
                * <p>Earliest and latest time an instance can be restored to.</p>
                */
            RestoreWindow?: RestoreWindow;
            /**
                * <p>Specifies the allocated storage size in gibibytes (GiB).</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>Provides a list of status information for an automated backup:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>active</code> - automated backups for current instances</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>retained</code> - automated backups for deleted instances</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>creating</code> - automated backups that are waiting
                *                 for the first automated snapshot to be available.</p>
                *             </li>
                *          </ul>
                */
            Status?: string;
            /**
                * <p>The port number that the automated backup used for connections.</p>
                *         <p>Default: Inherits from the source DB instance</p>
                *         <p>Valid Values: <code>1150-65535</code>
                *          </p>
                */
            Port?: number;
            /**
                * <p>The Availability Zone that the automated backup was created in. For information on
                *             Amazon Web Services Regions and Availability Zones, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions
                *                 and Availability Zones</a>.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>Provides the VPC ID associated with the DB instance</p>
                */
            VpcId?: string;
            /**
                * <p>Provides the date and time that the DB instance was created.</p>
                */
            InstanceCreateTime?: Date;
            /**
                * <p>The license model of an automated backup.</p>
                */
            MasterUsername?: string;
            /**
                * <p>The name of the database engine for this automated backup.</p>
                */
            Engine?: string;
            /**
                * <p>The version of the database engine for the automated backup.</p>
                */
            EngineVersion?: string;
            /**
                * <p>License model information for the automated backup.</p>
                */
            LicenseModel?: string;
            /**
                * <p>The IOPS (I/O operations per second) value for the automated backup.</p>
                */
            Iops?: number;
            /**
                * <p>The option group the automated backup is associated with. If omitted, the default option group for the engine specified is used.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>The ARN from the key store with which the automated backup is associated for TDE encryption.</p>
                */
            TdeCredentialArn?: string;
            /**
                * <p>Specifies whether the automated backup is encrypted.</p>
                */
            Encrypted?: boolean;
            /**
                * <p>Specifies the storage type associated with the automated backup.</p>
                */
            StorageType?: string;
            /**
                * <p>The Amazon Web Services KMS key ID for an automated backup.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The time zone of the automated backup. In most cases, the <code>Timezone</code> element is empty.
                *             <code>Timezone</code> content appears only for Microsoft SQL Server DB instances
                *             that were created with a time zone specified.</p>
                */
            Timezone?: string;
            /**
                * <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled,
                *             and otherwise false.</p>
                */
            IAMDatabaseAuthenticationEnabled?: boolean;
            /**
                * <p>The retention period for the automated backups.</p>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>The Amazon Resource Name (ARN) for the replicated automated backups.</p>
                */
            DBInstanceAutomatedBackupsArn?: string;
            /**
                * <p>The list of replications to different Amazon Web Services Regions associated with the automated backup.</p>
                */
            DBInstanceAutomatedBackupsReplications?: DBInstanceAutomatedBackupsReplication[];
            /**
                * <p>Specifies where automated backups are stored: Amazon Web Services Outposts or the Amazon Web Services Region.</p>
                */
            BackupTarget?: string;
    }
    export namespace DBInstanceAutomatedBackup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBInstanceAutomatedBackup) => any;
    }
    export interface DeleteDBInstanceAutomatedBackupResult {
            /**
                * <p>An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that
                *             existed at the time you deleted the source instance.</p>
                */
            DBInstanceAutomatedBackup?: DBInstanceAutomatedBackup;
    }
    export namespace DeleteDBInstanceAutomatedBackupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBInstanceAutomatedBackupResult) => any;
    }
    /**
        * <p>The automated backup is in an invalid state.
        *             For example, this automated backup is associated with an active instance.</p>
        */
    export class InvalidDBInstanceAutomatedBackupStateFault extends __BaseException {
            readonly name: "InvalidDBInstanceAutomatedBackupStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBInstanceAutomatedBackupStateFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface DeleteDBParameterGroupMessage {
            /**
                * <p>The name of the DB parameter group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be the name of an existing DB parameter group</p>
                *             </li>
                *             <li>
                *                 <p>You can't delete a default DB parameter group</p>
                *             </li>
                *             <li>
                *                 <p>Can't be associated with any DB instances</p>
                *             </li>
                *          </ul>
                */
            DBParameterGroupName: string | undefined;
    }
    export namespace DeleteDBParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBParameterGroupMessage) => any;
    }
    export interface DeleteDBProxyRequest {
            /**
                * <p>The name of the DB proxy to delete.</p>
                */
            DBProxyName: string | undefined;
    }
    export namespace DeleteDBProxyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBProxyRequest) => any;
    }
    export interface DeleteDBProxyResponse {
            /**
                * <p>The data structure representing the details of the DB proxy that you delete.</p>
                */
            DBProxy?: DBProxy;
    }
    export namespace DeleteDBProxyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBProxyResponse) => any;
    }
    /**
        * <p>The DB proxy endpoint doesn't exist.</p>
        */
    export class DBProxyEndpointNotFoundFault extends __BaseException {
            readonly name: "DBProxyEndpointNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBProxyEndpointNotFoundFault, __BaseException>);
    }
    export interface DeleteDBProxyEndpointRequest {
            /**
                * <p>The name of the DB proxy endpoint to delete.</p>
                */
            DBProxyEndpointName: string | undefined;
    }
    export namespace DeleteDBProxyEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBProxyEndpointRequest) => any;
    }
    export interface DeleteDBProxyEndpointResponse {
            /**
                * <p>The data structure representing the details of the DB proxy endpoint that you delete.</p>
                */
            DBProxyEndpoint?: DBProxyEndpoint;
    }
    export namespace DeleteDBProxyEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBProxyEndpointResponse) => any;
    }
    /**
        * <p>You can't perform this operation while the DB proxy endpoint is in a particular state.</p>
        */
    export class InvalidDBProxyEndpointStateFault extends __BaseException {
            readonly name: "InvalidDBProxyEndpointStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBProxyEndpointStateFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface DeleteDBSecurityGroupMessage {
            /**
                * <p>The name of the DB security group to delete.</p>
                *         <note>
                *             <p>You can't delete the default DB security group.</p>
                *         </note>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *             <li>
                *                 <p>Must not be "Default"</p>
                *             </li>
                *          </ul>
                */
            DBSecurityGroupName: string | undefined;
    }
    export namespace DeleteDBSecurityGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBSecurityGroupMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteDBSnapshotMessage {
            /**
                * <p>The DB snapshot identifier.</p>
                *         <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
                */
            DBSnapshotIdentifier: string | undefined;
    }
    export namespace DeleteDBSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBSnapshotMessage) => any;
    }
    export interface DeleteDBSnapshotResult {
            /**
                * <p>Contains the details of an Amazon RDS DB snapshot.</p>
                *         <p>This data type is used as a response element
                *           in the <code>DescribeDBSnapshots</code> action.</p>
                */
            DBSnapshot?: DBSnapshot;
    }
    export namespace DeleteDBSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBSnapshotResult) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteDBSubnetGroupMessage {
            /**
                * <p>The name of the database subnet group to delete.</p>
                *         <note>
                *             <p>You can't delete the default subnet group.</p>
                *         </note>
                *         <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p>
                *         <p>Example: <code>mydbsubnetgroup</code>
                *          </p>
                */
            DBSubnetGroupName: string | undefined;
    }
    export namespace DeleteDBSubnetGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDBSubnetGroupMessage) => any;
    }
    /**
        * <p>The DB subnet isn't in the <i>available</i> state.</p>
        */
    export class InvalidDBSubnetStateFault extends __BaseException {
            readonly name: "InvalidDBSubnetStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBSubnetStateFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface DeleteEventSubscriptionMessage {
            /**
                * <p>The name of the RDS event notification subscription you want to delete.</p>
                */
            SubscriptionName: string | undefined;
    }
    export namespace DeleteEventSubscriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventSubscriptionMessage) => any;
    }
    export interface DeleteEventSubscriptionResult {
            /**
                * <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
                */
            EventSubscription?: EventSubscription;
    }
    export namespace DeleteEventSubscriptionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteEventSubscriptionResult) => any;
    }
    /**
        * <p>This error can occur if someone else is modifying a subscription. You should retry the action.</p>
        */
    export class InvalidEventSubscriptionStateFault extends __BaseException {
            readonly name: "InvalidEventSubscriptionStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidEventSubscriptionStateFault, __BaseException>);
    }
    export interface DeleteGlobalClusterMessage {
            /**
                * <p>The cluster identifier of the global database cluster being deleted.</p>
                */
            GlobalClusterIdentifier: string | undefined;
    }
    export namespace DeleteGlobalClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGlobalClusterMessage) => any;
    }
    export interface DeleteGlobalClusterResult {
            /**
                * <p>A data type representing an Aurora global database.</p>
                */
            GlobalCluster?: GlobalCluster;
    }
    export namespace DeleteGlobalClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGlobalClusterResult) => any;
    }
    /**
        * <p></p>
        */
    export interface DeleteOptionGroupMessage {
            /**
                * <p>The name of the option group to be deleted.</p>
                *         <note>
                *             <p>You can't delete default option groups.</p>
                *         </note>
                */
            OptionGroupName: string | undefined;
    }
    export namespace DeleteOptionGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteOptionGroupMessage) => any;
    }
    /**
        * <p>The option group isn't in the <i>available</i> state.</p>
        */
    export class InvalidOptionGroupStateFault extends __BaseException {
            readonly name: "InvalidOptionGroupStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidOptionGroupStateFault, __BaseException>);
    }
    /**
        * <p>The specified RDS DB instance or Aurora DB cluster isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
        */
    export class DBProxyTargetNotFoundFault extends __BaseException {
            readonly name: "DBProxyTargetNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBProxyTargetNotFoundFault, __BaseException>);
    }
    export interface DeregisterDBProxyTargetsRequest {
            /**
                * <p>The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.</p>
                */
            DBProxyName: string | undefined;
            /**
                * <p>The identifier of the <code>DBProxyTargetGroup</code>.</p>
                */
            TargetGroupName?: string;
            /**
                * <p>One or more DB instance identifiers.</p>
                */
            DBInstanceIdentifiers?: string[];
            /**
                * <p>One or more DB cluster identifiers.</p>
                */
            DBClusterIdentifiers?: string[];
    }
    export namespace DeregisterDBProxyTargetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterDBProxyTargetsRequest) => any;
    }
    export interface DeregisterDBProxyTargetsResponse {
    }
    export namespace DeregisterDBProxyTargetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterDBProxyTargetsResponse) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeAccountAttributesMessage {
    }
    export namespace DescribeAccountAttributesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAccountAttributesMessage) => any;
    }
    /**
        * <p>A CA certificate for an Amazon Web Services account.</p>
        */
    export interface Certificate {
            /**
                * <p>The unique key that identifies a certificate.</p>
                */
            CertificateIdentifier?: string;
            /**
                * <p>The type of the certificate.</p>
                */
            CertificateType?: string;
            /**
                * <p>The thumbprint of the certificate.</p>
                */
            Thumbprint?: string;
            /**
                * <p>The starting date from which the certificate is valid.</p>
                */
            ValidFrom?: Date;
            /**
                * <p>The final date that the certificate continues to be valid.</p>
                */
            ValidTill?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) for the certificate.</p>
                */
            CertificateArn?: string;
            /**
                * <p>Whether there is an override for the default certificate identifier.</p>
                */
            CustomerOverride?: boolean;
            /**
                * <p>If there is an override for the default certificate identifier, when the override
                *             expires.</p>
                */
            CustomerOverrideValidTill?: Date;
    }
    export namespace Certificate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Certificate) => any;
    }
    /**
        * <p>Data returned by the <b>DescribeCertificates</b> action.</p>
        */
    export interface CertificateMessage {
            /**
                * <p>The list of <code>Certificate</code> objects for the Amazon Web Services account.</p>
                */
            Certificates?: Certificate[];
            /**
                * <p>An optional pagination token provided by a previous
                *             <code>DescribeCertificates</code> request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code> .</p>
                */
            Marker?: string;
    }
    export namespace CertificateMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CertificateMessage) => any;
    }
    /**
        * <p>
        *             <code>CertificateIdentifier</code> doesn't refer to an
        *         existing certificate.</p>
        */
    export class CertificateNotFoundFault extends __BaseException {
            readonly name: "CertificateNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CertificateNotFoundFault, __BaseException>);
    }
    /**
        * <p>A filter name and value pair that is used to return a more specific list of results
        *             from a describe operation. Filters can be used to match a set of resources by specific
        *             criteria, such as IDs. The filters supported by a describe operation are documented
        *             with the describe operation.</p>
        *         <note>
        *             <p>Currently, wildcards are not supported in filters.</p>
        *         </note>
        *         <p>The following actions can be filtered:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <code>DescribeDBClusterBacktracks</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DescribeDBClusterEndpoints</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DescribeDBClusters</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DescribeDBInstances</code>
        *                </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <code>DescribePendingMaintenanceActions</code>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface Filter {
            /**
                * <p>The name of the filter. Filter names are case-sensitive.</p>
                */
            Name: string | undefined;
            /**
                * <p>One or more filter values. Filter values are case-sensitive.</p>
                */
            Values: string[] | undefined;
    }
    export namespace Filter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Filter) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeCertificatesMessage {
            /**
                * <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match an existing CertificateIdentifier.</p>
                *             </li>
                *          </ul>
                */
            CertificateIdentifier?: string;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *         If more records exist than the specified <code>MaxRecords</code> value,
                *         a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *         <code>DescribeCertificates</code> request.
                *         If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeCertificatesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeCertificatesMessage) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeDBClusterBacktracks</code> action.</p>
        */
    export interface DBClusterBacktrackMessage {
            /**
                * <p>A pagination token that can be used in a later <code>DescribeDBClusterBacktracks</code> request.</p>
                */
            Marker?: string;
            /**
                * <p>Contains a list of backtracks for the user.</p>
                */
            DBClusterBacktracks?: DBClusterBacktrack[];
    }
    export namespace DBClusterBacktrackMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterBacktrackMessage) => any;
    }
    /**
        * <p>
        *             <code>BacktrackIdentifier</code> doesn't refer to an existing backtrack.</p>
        */
    export class DBClusterBacktrackNotFoundFault extends __BaseException {
            readonly name: "DBClusterBacktrackNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterBacktrackNotFoundFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface DescribeDBClusterBacktracksMessage {
            /**
                * <p>The DB cluster identifier of the DB cluster to be described. This parameter is
                *             stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster1</code>
                *          </p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>If specified, this value is the backtrack identifier of the backtrack to be
                *             described.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain a valid universally unique identifier (UUID). For more
                *                     information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier
                *                         (UUID) URN Namespace</a>.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code>
                *          </p>
                */
            BacktrackIdentifier?: string;
            /**
                * <p>A filter that specifies one or more DB clusters to describe. Supported filters
                *             include the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The
                *                     results list includes information about only the backtracks identified by these
                *                     identifiers.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>applying</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>completed</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>failed</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>pending</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *                 <p>The results list includes information about only the backtracks identified
                *                     by these values.</p>
                *             </li>
                *          </ul>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *             If more records exist than the specified <code>MaxRecords</code> value,
                *             a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *             <code>DescribeDBClusterBacktracks</code> request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBClusterBacktracksMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBClusterBacktracksMessage) => any;
    }
    export interface DBClusterEndpointMessage {
            /**
                * <p>An optional pagination token provided by a previous
                *             <code>DescribeDBClusterEndpoints</code> request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>Contains the details of the endpoints associated with the cluster
                *        and matching any filter conditions.</p>
                */
            DBClusterEndpoints?: DBClusterEndpoint[];
    }
    export namespace DBClusterEndpointMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterEndpointMessage) => any;
    }
    export interface DescribeDBClusterEndpointsMessage {
            /**
                * <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is
                *             stored as a lowercase string.</p>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>The identifier of the endpoint to describe. This parameter is stored as a lowercase string.</p>
                */
            DBClusterEndpointIdentifier?: string;
            /**
                * <p>A set of name-value pairs that define which endpoints to include in the output.
                *        The filters are specified as name-value pairs, in the format
                *        <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>.
                *        <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>.
                *          <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>.
                *        <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>.
                *        <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>inactive</code>, <code>modifying</code>.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *             If more records exist than the specified <code>MaxRecords</code> value,
                *             a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *             <code>DescribeDBClusterEndpoints</code> request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBClusterEndpointsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBClusterEndpointsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DBClusterParameterGroupsMessage {
            /**
                * <p>An optional pagination token provided by a previous
                *             <code>DescribeDBClusterParameterGroups</code> request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of DB cluster parameter groups.</p>
                */
            DBClusterParameterGroups?: DBClusterParameterGroup[];
    }
    export namespace DBClusterParameterGroupsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterParameterGroupsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeDBClusterParameterGroupsMessage {
            /**
                * <p>The name of a specific DB cluster parameter group to return details for.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p>
                *             </li>
                *          </ul>
                */
            DBClusterParameterGroupName?: string;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *         If more records exist than the specified <code>MaxRecords</code> value,
                *           a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *         <code>DescribeDBClusterParameterGroups</code> request.
                *         If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBClusterParameterGroupsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBClusterParameterGroupsMessage) => any;
    }
    export type ApplyMethod = "immediate" | "pending-reboot";
    /**
        * <p>This data type is used as a request parameter in the
        *         <code>ModifyDBParameterGroup</code> and <code>ResetDBParameterGroup</code> actions.</p>
        *         <p>This data type is used as a response element in the
        *         <code>DescribeEngineDefaultParameters</code> and <code>DescribeDBParameters</code> actions.</p>
        */
    export interface Parameter {
            /**
                * <p>Specifies the name of the parameter.</p>
                */
            ParameterName?: string;
            /**
                * <p>Specifies the value of the parameter.</p>
                */
            ParameterValue?: string;
            /**
                * <p>Provides a description of the parameter.</p>
                */
            Description?: string;
            /**
                * <p>Indicates the source of the parameter value.</p>
                */
            Source?: string;
            /**
                * <p>Specifies the engine specific parameters type.</p>
                */
            ApplyType?: string;
            /**
                * <p>Specifies the valid data type for the parameter.</p>
                */
            DataType?: string;
            /**
                * <p>Specifies the valid range of values for the parameter.</p>
                */
            AllowedValues?: string;
            /**
                * <p>Indicates whether (<code>true</code>) or not (<code>false</code>) the parameter can be modified.
                *         Some parameters have security or operational implications
                *         that prevent them from being changed.</p>
                */
            IsModifiable?: boolean;
            /**
                * <p>The earliest engine version to which the parameter can apply.</p>
                */
            MinimumEngineVersion?: string;
            /**
                * <p>Indicates when to apply parameter updates.</p>
                */
            ApplyMethod?: ApplyMethod | string;
            /**
                * <p>The valid DB engine modes.</p>
                */
            SupportedEngineModes?: string[];
    }
    export namespace Parameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Parameter) => any;
    }
    /**
        * <p>Provides details about a DB cluster parameter group including the parameters in the DB cluster parameter group.</p>
        */
    export interface DBClusterParameterGroupDetails {
            /**
                * <p>Provides a list of parameters for the DB cluster parameter group.</p>
                */
            Parameters?: Parameter[];
            /**
                * <p>An optional pagination token provided by a previous
                *             <code>DescribeDBClusterParameters</code> request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DBClusterParameterGroupDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterParameterGroupDetails) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeDBClusterParametersMessage {
            /**
                * <p>The name of a specific DB cluster parameter group to return parameter details for.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p>
                *             </li>
                *          </ul>
                */
            DBClusterParameterGroupName: string | undefined;
            /**
                * <p>A value that indicates to return only parameters for a specific source.
                *       Parameter sources can be <code>engine</code>, <code>service</code>,
                *       or <code>customer</code>.</p>
                */
            Source?: string;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *       If more records exist than the specified <code>MaxRecords</code> value,
                *           a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *       <code>DescribeDBClusterParameters</code> request.
                *       If this parameter is specified, the response includes
                *       only records beyond the marker,
                *       up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBClusterParametersMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBClusterParametersMessage) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeDBClusters</code> action.</p>
        */
    export interface DBClusterMessage {
            /**
                * <p>A pagination token that can be used in a later DescribeDBClusters request.</p>
                */
            Marker?: string;
            /**
                * <p>Contains a list of DB clusters for the user.</p>
                */
            DBClusters?: DBCluster[];
    }
    export namespace DBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeDBClustersMessage {
            /**
                * <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match an existing DBClusterIdentifier.</p>
                *             </li>
                *          </ul>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>A filter that specifies one or more DB clusters to describe.</p>
                *         <p>Supported filters:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>clone-group-id</code> - Accepts clone group identifiers.
                *               The results list only includes information about
                *               the DB clusters associated with these clone groups.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB
                *               cluster Amazon Resource Names (ARNs). The results list only includes information about
                *               the DB clusters identified by these ARNs.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>domain</code> - Accepts Active Directory directory IDs.
                *               The results list only includes information about
                *               the DB clusters associated with these domains.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>engine</code> - Accepts engine names.
                *               The results list only includes information about
                *               the DB clusters for these engines.</p>
                *             </li>
                *          </ul>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *             If more records exist than the specified <code>MaxRecords</code> value,
                *           a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *             <code>DescribeDBClusters</code> request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>Optional Boolean parameter that specifies whether the output includes information about clusters
                *           shared from other Amazon Web Services accounts.</p>
                */
            IncludeShared?: boolean;
    }
    export namespace DescribeDBClustersMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBClustersMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeDBClusterSnapshotAttributesMessage {
            /**
                * <p>The identifier for the DB cluster snapshot to describe the attributes for.</p>
                */
            DBClusterSnapshotIdentifier: string | undefined;
    }
    export namespace DescribeDBClusterSnapshotAttributesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBClusterSnapshotAttributesMessage) => any;
    }
    /**
        * <p>Contains the name and values of a manual DB cluster snapshot attribute.</p>
        *         <p>Manual DB cluster snapshot attributes are used to authorize other Amazon Web Services accounts
        *             to restore a manual DB cluster snapshot. For more information, see the <code>ModifyDBClusterSnapshotAttribute</code>
        *             API action.</p>
        */
    export interface DBClusterSnapshotAttribute {
            /**
                * <p>The name of the manual DB cluster snapshot attribute.</p>
                *         <p>The attribute named <code>restore</code> refers to the list of Amazon Web Services accounts that
                *             have permission to copy or restore the manual DB cluster snapshot. For more information,
                *             see the <code>ModifyDBClusterSnapshotAttribute</code>
                *             API action.</p>
                */
            AttributeName?: string;
            /**
                * <p>The value(s) for the manual DB cluster snapshot attribute.</p>
                *         <p>If the <code>AttributeName</code> field is set to <code>restore</code>, then this element
                *             returns a list of IDs of the Amazon Web Services accounts that are authorized to copy or restore the manual
                *             DB cluster snapshot. If a value of <code>all</code> is in the list, then the manual DB cluster snapshot
                *             is public and available for any Amazon Web Services account to copy or restore.</p>
                */
            AttributeValues?: string[];
    }
    export namespace DBClusterSnapshotAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterSnapshotAttribute) => any;
    }
    /**
        * <p>Contains the results of a successful call to the <code>DescribeDBClusterSnapshotAttributes</code>
        *             API action.</p>
        *         <p>Manual DB cluster snapshot attributes are used to authorize other Amazon Web Services accounts
        *             to copy or restore a manual DB cluster snapshot. For more information, see the <code>ModifyDBClusterSnapshotAttribute</code>
        *             API action.</p>
        */
    export interface DBClusterSnapshotAttributesResult {
            /**
                * <p>The identifier of the manual DB cluster snapshot that the attributes apply to.</p>
                */
            DBClusterSnapshotIdentifier?: string;
            /**
                * <p>The list of attributes and values for the manual DB cluster snapshot.</p>
                */
            DBClusterSnapshotAttributes?: DBClusterSnapshotAttribute[];
    }
    export namespace DBClusterSnapshotAttributesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterSnapshotAttributesResult) => any;
    }
    export interface DescribeDBClusterSnapshotAttributesResult {
            /**
                * <p>Contains the results of a successful call to the <code>DescribeDBClusterSnapshotAttributes</code>
                *             API action.</p>
                *         <p>Manual DB cluster snapshot attributes are used to authorize other Amazon Web Services accounts
                *             to copy or restore a manual DB cluster snapshot. For more information, see the <code>ModifyDBClusterSnapshotAttribute</code>
                *             API action.</p>
                */
            DBClusterSnapshotAttributesResult?: DBClusterSnapshotAttributesResult;
    }
    export namespace DescribeDBClusterSnapshotAttributesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBClusterSnapshotAttributesResult) => any;
    }
    /**
        * <p>Provides a list of DB cluster snapshots for the user as the result of a call to the <code>DescribeDBClusterSnapshots</code> action.</p>
        */
    export interface DBClusterSnapshotMessage {
            /**
                * <p>An optional pagination token provided by a previous
                *           <code>DescribeDBClusterSnapshots</code> request.
                *       If this parameter is specified, the response includes
                *       only records beyond the marker,
                *       up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>Provides a list of DB cluster snapshots for the user.</p>
                */
            DBClusterSnapshots?: DBClusterSnapshot[];
    }
    export namespace DBClusterSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterSnapshotMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeDBClusterSnapshotsMessage {
            /**
                * <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for.
                *             This parameter can't be used in conjunction with the
                *             <code>DBClusterSnapshotIdentifier</code> parameter.
                *             This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the identifier of an existing DBCluster.</p>
                *             </li>
                *          </ul>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>A specific DB cluster snapshot identifier to describe.
                *             This parameter can't be used in conjunction with the
                *             <code>DBClusterIdentifier</code> parameter.
                *             This value is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p>
                *             </li>
                *             <li>
                *                 <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p>
                *             </li>
                *          </ul>
                */
            DBClusterSnapshotIdentifier?: string;
            /**
                * <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by
                *               Amazon RDS for my Amazon Web Services account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>manual</code> - Return all DB cluster snapshots that have been taken by my Amazon Web Services account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my Amazon Web Services account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p>
                *             </li>
                *          </ul>
                *         <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are
                *           returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code>
                *           parameter. You can include public DB cluster snapshots with these results by enabling the
                *           <code>IncludePublic</code> parameter.</p>
                *         <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values
                *           of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is
                *           set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to
                *           <code>public</code>.</p>
                */
            SnapshotType?: string;
            /**
                * <p>A filter that specifies one or more DB cluster snapshots to describe.</p>
                *         <p>Supported filters:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB
                *               cluster Amazon Resource Names (ARNs).</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>engine</code> - Accepts names of database engines.</p>
                *             </li>
                *          </ul>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *             If more records exist than the specified <code>MaxRecords</code> value,
                *           a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *             <code>DescribeDBClusterSnapshots</code> request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A value that indicates whether to include shared manual DB cluster snapshots
                *             from other Amazon Web Services accounts that this Amazon Web Services account has been given
                *             permission to copy or restore. By default, these snapshots are not included.</p>
                *         <p>You can give an Amazon Web Services account permission to restore a manual DB cluster snapshot from
                *             another Amazon Web Services account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
                */
            IncludeShared?: boolean;
            /**
                * <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied
                *             or restored by any Amazon Web Services account. By default, the public snapshots are not included.</p>
                *         <p>You can share a manual DB cluster snapshot  as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
                */
            IncludePublic?: boolean;
    }
    export namespace DescribeDBClusterSnapshotsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBClusterSnapshotsMessage) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeDBEngineVersions</code> action.</p>
        */
    export interface DBEngineVersionMessage {
            /**
                * <p>An optional pagination token provided by a previous request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of <code>DBEngineVersion</code> elements.</p>
                */
            DBEngineVersions?: DBEngineVersion[];
    }
    export namespace DBEngineVersionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBEngineVersionMessage) => any;
    }
    export interface DescribeDBEngineVersionsMessage {
            /**
                * <p>The database engine to return.</p>
                *         <p>Valid Values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-postgresql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mariadb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mysql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-se</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ex</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-web</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Engine?: string;
            /**
                * <p>The database engine version to return.</p>
                *         <p>Example: <code>5.1.49</code>
                *          </p>
                */
            EngineVersion?: string;
            /**
                * <p>The name of a specific DB parameter group family to return details for.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match an existing DBParameterGroupFamily.</p>
                *             </li>
                *          </ul>
                */
            DBParameterGroupFamily?: string;
            /**
                * <p>A filter that specifies one or more DB engine versions to describe.</p>
                *         <p>Supported filters:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>db-parameter-group-family</code> - Accepts parameter groups family names.
                *                   The results list only includes information about
                *                   the DB engine versions for these parameter group families.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>engine</code> - Accepts engine names.
                *                   The results list only includes information about
                *                   the DB engine versions for these engines.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>engine-mode</code> - Accepts DB engine modes.
                *                   The results list only includes information about
                *                   the DB engine versions for these engine modes. Valid
                *                   DB engine modes are the following:</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>global</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>multimaster</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>parallelquery</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>provisioned</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>serverless</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>engine-version</code> - Accepts engine versions.
                *                   The results list only includes information about
                *                   the DB engine versions for these engine versions.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>status</code> - Accepts engine version statuses.
                *                   The results list only includes information about
                *                   the DB engine versions for these statuses. Valid statuses
                *                   are the following:</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>available</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>deprecated</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *     If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is
                *     included in the response so you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request.
                *         If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.</p>
                */
            DefaultOnly?: boolean;
            /**
                * <p>A value that indicates whether to list the supported character sets for each engine version.</p>
                *         <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for
                *                 <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine
                *             version.</p>
                *         <p>For RDS Custom, the default is not to list supported character sets. If you set <code>ListSupportedCharacterSets</code>
                *           to <code>true</code>, RDS Custom returns no results.</p>
                */
            ListSupportedCharacterSets?: boolean;
            /**
                * <p>A value that indicates whether to list the supported time zones for each engine version.</p>
                *         <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>,
                *             the response includes a list of supported time zones for each engine version.</p>
                *         <p>For RDS Custom, the default is not to list supported time zones. If you set <code>ListSupportedTimezones</code>
                *             to <code>true</code>, RDS Custom returns no results.</p>
                */
            ListSupportedTimezones?: boolean;
            /**
                * <p>A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.</p>
                */
            IncludeAll?: boolean;
    }
    export namespace DescribeDBEngineVersionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBEngineVersionsMessage) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeDBInstanceAutomatedBackups</code> action.</p>
        */
    export interface DBInstanceAutomatedBackupMessage {
            /**
                * <p>An optional pagination token provided by a previous request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of <code>DBInstanceAutomatedBackup</code> instances.</p>
                */
            DBInstanceAutomatedBackups?: DBInstanceAutomatedBackup[];
    }
    export namespace DBInstanceAutomatedBackupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBInstanceAutomatedBackupMessage) => any;
    }
    /**
        * <p>Parameter input for DescribeDBInstanceAutomatedBackups.</p>
        */
    export interface DescribeDBInstanceAutomatedBackupsMessage {
            /**
                * <p>The resource ID of the DB instance that is the source of
                *             the automated backup. This parameter isn't case-sensitive.</p>
                */
            DbiResourceId?: string;
            /**
                * <p>(Optional) The user-supplied instance identifier. If this parameter is specified, it must
                *             match the identifier of an existing DB instance. It returns information from the
                *             specific DB instance' automated backup. This parameter isn't case-sensitive.</p>
                */
            DBInstanceIdentifier?: string;
            /**
                * <p>A filter that specifies which resources to return based on status.</p>
                *         <p>Supported filters are the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>status</code>
                *                </p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>active</code> - automated backups for current instances</p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>retained</code> - automated backups for deleted instances and after backup replication is stopped</p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs).
                *                 The results list includes only information about the DB instance automated backups identified by these ARNs.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>dbi-resource-id</code> - Accepts DB resource identifiers and Amazon Resource Names (ARNs).
                *                 The results list includes only information about the DB instance resources identified by these ARNs.</p>
                *             </li>
                *          </ul>
                *         <p>Returns all resources by default. The status for each resource is specified in the response.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response. If more records exist than the specified
                *             <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that
                *             you can retrieve the remaining results.</p>
                */
            MaxRecords?: number;
            /**
                * <p>The pagination token provided in the previous request. If this parameter is specified the response
                *             includes only records beyond the marker, up to <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the replicated automated backups, for example,
                *             <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            DBInstanceAutomatedBackupsArn?: string;
    }
    export namespace DescribeDBInstanceAutomatedBackupsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBInstanceAutomatedBackupsMessage) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeDBInstances</code> action.</p>
        */
    export interface DBInstanceMessage {
            /**
                * <p>An optional pagination token provided by a previous request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code> .</p>
                */
            Marker?: string;
            /**
                * <p>A list of <code>DBInstance</code> instances.</p>
                */
            DBInstances?: DBInstance[];
    }
    export namespace DBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBInstanceMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeDBInstancesMessage {
            /**
                * <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the identifier of an existing DBInstance.</p>
                *             </li>
                *          </ul>
                */
            DBInstanceIdentifier?: string;
            /**
                * <p>A filter that specifies one or more DB instances to describe.</p>
                *         <p>Supported filters:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB
                *               cluster Amazon Resource Names (ARNs). The results list only includes information about
                *               the DB instances associated with the DB clusters identified by these ARNs.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>db-instance-id</code> - Accepts DB instance identifiers and DB
                *               instance Amazon Resource Names (ARNs). The results list only includes information about
                *               the DB instances identified by these ARNs.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will
                *               only include information about the DB instances identified by these DB instance resource identifiers.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>domain</code> - Accepts Active Directory directory IDs. The results list only includes
                *               information about the DB instances associated with these domains.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>engine</code> - Accepts engine names. The results list only includes information
                *               about the DB instances for these engines.</p>
                *             </li>
                *          </ul>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *         If more records exist than the specified <code>MaxRecords</code> value,
                *         a pagination token called a marker is included in the response so that
                *         you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *         <code>DescribeDBInstances</code> request.
                *         If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBInstancesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBInstancesMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeDBLogFilesMessage {
            /**
                * <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing DBInstance.</p>
                *             </li>
                *          </ul>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>Filters the available log files for log file names that contain the specified string.</p>
                */
            FilenameContains?: string;
            /**
                * <p>Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.</p>
                */
            FileLastWritten?: number;
            /**
                * <p>Filters the available log files for files larger than the specified size.</p>
                */
            FileSize?: number;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
                */
            MaxRecords?: number;
            /**
                * <p>The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBLogFilesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBLogFilesMessage) => any;
    }
    /**
        * <p>This data type is used as a response element to <code>DescribeDBLogFiles</code>.</p>
        */
    export interface DescribeDBLogFilesDetails {
            /**
                * <p>The name of the log file for the specified DB instance.</p>
                */
            LogFileName?: string;
            /**
                * <p>A POSIX timestamp when the last log entry was written.</p>
                */
            LastWritten?: number;
            /**
                * <p>The size, in bytes, of the log file for the specified DB instance.</p>
                */
            Size?: number;
    }
    export namespace DescribeDBLogFilesDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBLogFilesDetails) => any;
    }
    /**
        * <p>The response from a call to <code>DescribeDBLogFiles</code>.</p>
        */
    export interface DescribeDBLogFilesResponse {
            /**
                * <p>The DB log files returned.</p>
                */
            DescribeDBLogFiles?: DescribeDBLogFilesDetails[];
            /**
                * <p>A pagination token that can be used in a later <code>DescribeDBLogFiles</code> request.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBLogFilesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBLogFilesResponse) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeDBParameterGroups</code> action.</p>
        */
    export interface DBParameterGroupsMessage {
            /**
                * <p>An optional pagination token provided by a previous request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of <code>DBParameterGroup</code> instances.</p>
                */
            DBParameterGroups?: DBParameterGroup[];
    }
    export namespace DBParameterGroupsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBParameterGroupsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeDBParameterGroupsMessage {
            /**
                * <p>The name of a specific DB parameter group to return details for.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p>
                *             </li>
                *          </ul>
                */
            DBParameterGroupName?: string;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *         If more records exist than the specified <code>MaxRecords</code> value,
                *             a pagination token called a marker is included in the response so that
                *         you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *         <code>DescribeDBParameterGroups</code> request.
                *             If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBParameterGroupsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBParameterGroupsMessage) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeDBParameters</code> action.</p>
        */
    export interface DBParameterGroupDetails {
            /**
                * <p>A list of <code>Parameter</code> values.</p>
                */
            Parameters?: Parameter[];
            /**
                * <p>An optional pagination token provided by a previous request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DBParameterGroupDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBParameterGroupDetails) => any;
    }
    export interface DescribeDBParametersMessage {
            /**
                * <p>The name of a specific DB parameter group to return details for.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the name of an existing DBParameterGroup.</p>
                *             </li>
                *          </ul>
                */
            DBParameterGroupName: string | undefined;
            /**
                * <p>The parameter types to return.</p>
                *         <p>Default: All parameter types returned</p>
                *         <p>Valid Values: <code>user | system | engine-default</code>
                *          </p>
                */
            Source?: string;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *         If more records exist than the specified <code>MaxRecords</code> value,
                *             a pagination token called a marker is included in the response so that
                *         you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *         <code>DescribeDBParameters</code> request.
                *             If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBParametersMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBParametersMessage) => any;
    }
    export interface DescribeDBProxiesRequest {
            /**
                * <p>The name of the DB proxy. If you omit this parameter,
                *         the output includes information about all DB proxies owned by
                *         your Amazon Web Services account ID.</p>
                */
            DBProxyName?: string;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>An optional pagination token provided by a previous request.
                *         If this parameter is specified, the response includes only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of records to include in the response. If more records exist
                *           than the specified <code>MaxRecords</code> value, a pagination token called a marker is
                *           included in the response so that the remaining results can be retrieved.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
    }
    export namespace DescribeDBProxiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBProxiesRequest) => any;
    }
    export interface DescribeDBProxiesResponse {
            /**
                * <p>A return value representing an arbitrary number of <code>DBProxy</code> data structures.</p>
                */
            DBProxies?: DBProxy[];
            /**
                * <p>An optional pagination token provided by a previous request.
                *         If this parameter is specified, the response includes only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBProxiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBProxiesResponse) => any;
    }
    export interface DescribeDBProxyEndpointsRequest {
            /**
                * <p>The name of the DB proxy whose endpoints you want to describe. If you omit
                *         this parameter, the output includes information about all DB proxy endpoints
                *         associated with all your DB proxies.</p>
                */
            DBProxyName?: string;
            /**
                * <p>The name of a DB proxy endpoint to describe. If you omit this parameter,
                *         the output includes information about all DB proxy endpoints associated with
                *         the specified proxy.</p>
                */
            DBProxyEndpointName?: string;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>An optional pagination token provided by a previous request.
                *         If this parameter is specified, the response includes only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of records to include in the response. If more records exist
                *           than the specified <code>MaxRecords</code> value, a pagination token called a marker is
                *           included in the response so that the remaining results can be retrieved.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
    }
    export namespace DescribeDBProxyEndpointsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBProxyEndpointsRequest) => any;
    }
    export interface DescribeDBProxyEndpointsResponse {
            /**
                * <p>The list of <code>ProxyEndpoint</code> objects returned by the API operation.</p>
                */
            DBProxyEndpoints?: DBProxyEndpoint[];
            /**
                * <p>An optional pagination token provided by a previous request.
                *         If this parameter is specified, the response includes only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBProxyEndpointsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBProxyEndpointsResponse) => any;
    }
    export interface DescribeDBProxyTargetGroupsRequest {
            /**
                * <p>The identifier of the <code>DBProxy</code> associated with the target group.</p>
                */
            DBProxyName: string | undefined;
            /**
                * <p>The identifier of the <code>DBProxyTargetGroup</code> to describe.</p>
                */
            TargetGroupName?: string;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>An optional pagination token provided by a previous request.
                *         If this parameter is specified, the response includes only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of records to include in the response.
                *         If more records exist than the specified <code>MaxRecords</code> value,
                *         a pagination token called a marker is included in the response so that the remaining
                *         results can be retrieved.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
    }
    export namespace DescribeDBProxyTargetGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBProxyTargetGroupsRequest) => any;
    }
    /**
        * <p>Displays the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTarget</code>.</p>
        */
    export interface ConnectionPoolConfigurationInfo {
            /**
                * <p>The maximum size of the connection pool for each target in a target group. The value is expressed as a percentage of the
                *         <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p>
                */
            MaxConnectionsPercent?: number;
            /**
                * <p>Controls how actively the proxy closes idle database connections in the connection pool.
                *         The value is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.
                *         With a high value, the proxy leaves a high percentage of idle database connections open. A low value causes the proxy to close more idle connections and return them to the database.</p>
                */
            MaxIdleConnectionsPercent?: number;
            /**
                * <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the
                *         proxy has opened its maximum number of connections and all connections are busy with client sessions.</p>
                */
            ConnectionBorrowTimeout?: number;
            /**
                * <p>Each item in the list represents a class of SQL operations that normally cause all later statements
                *         in a session using a proxy to be pinned to the same underlying database connection. Including an item
                *         in the list exempts that class of SQL operations from the pinning behavior. Currently, the only
                *         allowed value is <code>EXCLUDE_VARIABLE_SETS</code>.</p>
                */
            SessionPinningFilters?: string[];
            /**
                * <p>One or more SQL statements for the proxy to run when opening each new database connection.
                *         Typically used with <code>SET</code> statements to make sure that each connection has identical
                *         settings such as time zone and character set. This setting is empty by default.
                *         For multiple statements, use semicolons as the separator.
                *         You can also include multiple variables in a single <code>SET</code> statement, such as
                *         <code>SET x=1, y=2</code>.</p>
                */
            InitQuery?: string;
    }
    export namespace ConnectionPoolConfigurationInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionPoolConfigurationInfo) => any;
    }
    /**
        * <p>Represents a set of RDS DB instances, Aurora DB clusters, or both that a proxy can connect to. Currently, each target group
        *         is associated with exactly one RDS DB instance or Aurora DB cluster.</p>
        *         <p>This data type is used as a response element in the <code>DescribeDBProxyTargetGroups</code> action.</p>
        */
    export interface DBProxyTargetGroup {
            /**
                * <p>The identifier for the RDS proxy associated with this target group.</p>
                */
            DBProxyName?: string;
            /**
                * <p>The identifier for the target group. This name must be unique for all target groups owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
                */
            TargetGroupName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) representing the target group.</p>
                */
            TargetGroupArn?: string;
            /**
                * <p>Whether this target group is the first one used for connection requests by the associated proxy.
                *         Because each proxy is currently associated with a single target group, currently this setting
                *         is always <code>true</code>.</p>
                */
            IsDefault?: boolean;
            /**
                * <p>The current status of this target group. A status of <code>available</code> means the
                *         target group is correctly associated with a database. Other values indicate that you must wait for
                *         the target group to be ready, or take some action to resolve an issue.</p>
                */
            Status?: string;
            /**
                * <p>The settings that determine the size and behavior of the connection pool for the target group.</p>
                */
            ConnectionPoolConfig?: ConnectionPoolConfigurationInfo;
            /**
                * <p>The date and time when the target group was first created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The date and time when the target group was last updated.</p>
                */
            UpdatedDate?: Date;
    }
    export namespace DBProxyTargetGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBProxyTargetGroup) => any;
    }
    export interface DescribeDBProxyTargetGroupsResponse {
            /**
                * <p>An arbitrary number of <code>DBProxyTargetGroup</code> objects, containing details of the corresponding target groups.</p>
                */
            TargetGroups?: DBProxyTargetGroup[];
            /**
                * <p>An optional pagination token provided by a previous request.
                *         If this parameter is specified, the response includes only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBProxyTargetGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBProxyTargetGroupsResponse) => any;
    }
    export interface DescribeDBProxyTargetsRequest {
            /**
                * <p>The identifier of the <code>DBProxyTarget</code> to describe.</p>
                */
            DBProxyName: string | undefined;
            /**
                * <p>The identifier of the <code>DBProxyTargetGroup</code> to describe.</p>
                */
            TargetGroupName?: string;
            /**
                * <p>This parameter is not currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>An optional pagination token provided by a previous request.
                *         If this parameter is specified, the response includes only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of records to include in the response.
                *         If more records exist than the specified <code>MaxRecords</code> value,
                *         a pagination token called a marker is included in the response so that the remaining
                *         results can be retrieved.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
    }
    export namespace DescribeDBProxyTargetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBProxyTargetsRequest) => any;
    }
    export enum TargetRole {
            READ_ONLY = "READ_ONLY",
            READ_WRITE = "READ_WRITE",
            UNKNOWN = "UNKNOWN"
    }
    export enum TargetHealthReason {
            AUTH_FAILURE = "AUTH_FAILURE",
            CONNECTION_FAILED = "CONNECTION_FAILED",
            INVALID_REPLICATION_STATE = "INVALID_REPLICATION_STATE",
            PENDING_PROXY_CAPACITY = "PENDING_PROXY_CAPACITY",
            UNREACHABLE = "UNREACHABLE"
    }
    export enum TargetState {
            available = "AVAILABLE",
            registering = "REGISTERING",
            unavailable = "UNAVAILABLE"
    }
    /**
        * <p>Information about the connection health of an RDS Proxy target.</p>
        */
    export interface TargetHealth {
            /**
                * <p>The current state of the connection health lifecycle for the RDS Proxy target.
                *            The following is a typical lifecycle example for the states of an RDS Proxy target:</p>
                *         <p>
                *             <code>registering</code> > <code>unavailable</code> > <code>available</code> > <code>unavailable</code> > <code>available</code>
                *          </p>
                */
            State?: TargetState | string;
            /**
                * <p>The reason for the current health <code>State</code> of the RDS Proxy target.</p>
                */
            Reason?: TargetHealthReason | string;
            /**
                * <p>A description of the health of the RDS Proxy target.
                *             If the <code>State</code> is <code>AVAILABLE</code>, a description is not included.</p>
                */
            Description?: string;
    }
    export namespace TargetHealth {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetHealth) => any;
    }
    export enum TargetType {
            RDS_INSTANCE = "RDS_INSTANCE",
            RDS_SERVERLESS_ENDPOINT = "RDS_SERVERLESS_ENDPOINT",
            TRACKED_CLUSTER = "TRACKED_CLUSTER"
    }
    /**
        * <p>Contains the details for an RDS Proxy target. It represents an RDS DB instance or Aurora DB cluster
        *         that the proxy can connect to. One or more targets are associated with an RDS Proxy target group.</p>
        *         <p>This data type is used as a response element in the <code>DescribeDBProxyTargets</code> action.</p>
        */
    export interface DBProxyTarget {
            /**
                * <p>The Amazon Resource Name (ARN) for the RDS DB instance or Aurora DB cluster.</p>
                */
            TargetArn?: string;
            /**
                * <p>The writer endpoint for the RDS DB instance or Aurora DB cluster.</p>
                */
            Endpoint?: string;
            /**
                * <p>The DB cluster identifier when the target represents an Aurora DB cluster. This field is blank when the target represents an RDS DB instance.</p>
                */
            TrackedClusterId?: string;
            /**
                * <p>The identifier representing the target. It can be the instance identifier for an RDS DB instance,
                *         or the cluster identifier for an Aurora DB cluster.</p>
                */
            RdsResourceId?: string;
            /**
                * <p>The port that the RDS Proxy uses to connect to the target RDS DB instance or Aurora DB cluster.</p>
                */
            Port?: number;
            /**
                * <p>Specifies the kind of database, such as an RDS DB instance or an Aurora DB cluster, that the target represents.</p>
                */
            Type?: TargetType | string;
            /**
                * <p>A value that indicates whether the target of the proxy can be used for read/write or read-only operations.</p>
                */
            Role?: TargetRole | string;
            /**
                * <p>Information about the connection health of the RDS Proxy target.</p>
                */
            TargetHealth?: TargetHealth;
    }
    export namespace DBProxyTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBProxyTarget) => any;
    }
    export interface DescribeDBProxyTargetsResponse {
            /**
                * <p>An arbitrary number of <code>DBProxyTarget</code> objects, containing details of the corresponding targets.</p>
                */
            Targets?: DBProxyTarget[];
            /**
                * <p>An optional pagination token provided by a previous request.
                *         If this parameter is specified, the response includes only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBProxyTargetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBProxyTargetsResponse) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeDBSecurityGroups</code> action.</p>
        */
    export interface DBSecurityGroupMessage {
            /**
                * <p>An optional pagination token provided by a previous request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of <code>DBSecurityGroup</code> instances.</p>
                */
            DBSecurityGroups?: DBSecurityGroup[];
    }
    export namespace DBSecurityGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBSecurityGroupMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeDBSecurityGroupsMessage {
            /**
                * <p>The name of the DB security group to return details for.</p>
                */
            DBSecurityGroupName?: string;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *         If more records exist than the specified <code>MaxRecords</code> value,
                *         a pagination token called a marker is included in the response so that
                *         you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *         <code>DescribeDBSecurityGroups</code> request.
                *         If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBSecurityGroupsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBSecurityGroupsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeDBSnapshotAttributesMessage {
            /**
                * <p>The identifier for the DB snapshot to describe the attributes for.</p>
                */
            DBSnapshotIdentifier: string | undefined;
    }
    export namespace DescribeDBSnapshotAttributesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBSnapshotAttributesMessage) => any;
    }
    /**
        * <p>Contains the name and values of a manual DB snapshot attribute</p>
        *         <p>Manual DB snapshot attributes are used to authorize other Amazon Web Services accounts
        *     to restore a manual DB snapshot. For more information, see the <code>ModifyDBSnapshotAttribute</code>
        *     API.</p>
        */
    export interface DBSnapshotAttribute {
            /**
                * <p>The name of the manual DB snapshot attribute.</p>
                *         <p>The attribute named <code>restore</code> refers to the list of Amazon Web Services accounts that
                *           have permission to copy or restore the manual DB cluster snapshot. For more information,
                *           see the <code>ModifyDBSnapshotAttribute</code>
                *           API action.</p>
                */
            AttributeName?: string;
            /**
                * <p>The value or values for the manual DB snapshot attribute.</p>
                *         <p>If the <code>AttributeName</code> field is set to <code>restore</code>, then this element
                *       returns a list of IDs of the Amazon Web Services accounts that are authorized to copy or restore the manual
                *       DB snapshot. If a value of <code>all</code> is in the list, then the manual DB snapshot
                *       is public and available for any Amazon Web Services account to copy or restore.</p>
                */
            AttributeValues?: string[];
    }
    export namespace DBSnapshotAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBSnapshotAttribute) => any;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_1' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { ActivityStreamMode, ActivityStreamStatus, AutomationMode, AvailabilityZone, Certificate, DBCluster, DBClusterSnapshotAttributesResult, DBInstance, DBInstanceAutomatedBackup, DBProxy, DBProxyEndpoint, DBProxyTarget, DBProxyTargetGroup, DBSecurityGroup, DBSnapshot, DBSnapshotAttribute, DBSubnetGroup, EventSubscription, ExportTask, Filter, GlobalCluster, OptionGroup, OptionSetting, Parameter, ProcessorFeature, ReplicaMode, ResourcePendingMaintenanceActions, ScalingConfiguration, ServerlessV2ScalingConfiguration, Tag, UserAuthConfig } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/models_0";
    import { RDSServiceException as __BaseException } from "@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/RDSServiceException";
    /**
        * <p>Contains the results of a successful call to the <code>DescribeDBSnapshotAttributes</code>
        *     API action.</p>
        *         <p>Manual DB snapshot attributes are used to authorize other Amazon Web Services accounts
        *       to copy or restore a manual DB snapshot. For more information, see the <code>ModifyDBSnapshotAttribute</code>
        *       API action.</p>
        */
    export interface DBSnapshotAttributesResult {
            /**
                * <p>The identifier of the manual DB snapshot that the attributes apply to.</p>
                */
            DBSnapshotIdentifier?: string;
            /**
                * <p>The list of attributes and values for the manual DB snapshot.</p>
                */
            DBSnapshotAttributes?: DBSnapshotAttribute[];
    }
    export namespace DBSnapshotAttributesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBSnapshotAttributesResult) => any;
    }
    export interface DescribeDBSnapshotAttributesResult {
            /**
                * <p>Contains the results of a successful call to the <code>DescribeDBSnapshotAttributes</code>
                *     API action.</p>
                *         <p>Manual DB snapshot attributes are used to authorize other Amazon Web Services accounts
                *       to copy or restore a manual DB snapshot. For more information, see the <code>ModifyDBSnapshotAttribute</code>
                *       API action.</p>
                */
            DBSnapshotAttributesResult?: DBSnapshotAttributesResult;
    }
    export namespace DescribeDBSnapshotAttributesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBSnapshotAttributesResult) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeDBSnapshots</code> action.</p>
        */
    export interface DBSnapshotMessage {
            /**
                * <p>An optional pagination token provided by a previous request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of <code>DBSnapshot</code> instances.</p>
                */
            DBSnapshots?: DBSnapshot[];
    }
    export namespace DBSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBSnapshotMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeDBSnapshotsMessage {
            /**
                * <p>The ID of the DB instance to retrieve the list of DB snapshots for.
                *         This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>.
                *         This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the identifier of an existing DBInstance.</p>
                *             </li>
                *          </ul>
                */
            DBInstanceIdentifier?: string;
            /**
                * <p>A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>.
                *             This value is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the identifier of an existing DBSnapshot.</p>
                *             </li>
                *             <li>
                *                 <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p>
                *             </li>
                *          </ul>
                */
            DBSnapshotIdentifier?: string;
            /**
                * <p>The type of snapshots to be returned. You can specify one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>automated</code> - Return all DB snapshots that have been automatically taken by
                *       Amazon RDS for my Amazon Web Services account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>manual</code> - Return all DB snapshots that have been taken by my Amazon Web Services account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>shared</code> - Return all manual DB snapshots that have been shared to my Amazon Web Services account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>public</code> - Return all DB snapshots that have been marked as public.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>awsbackup</code> - Return the DB snapshots managed by the Amazon Web Services Backup service.</p>
                *                 <p>For information about Amazon Web Services Backup, see the
                *                   <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html">
                *                         <i>Amazon Web Services Backup Developer Guide.</i>
                *                     </a>
                *                </p>
                *                 <p>The <code>awsbackup</code> type does not apply to Aurora.</p>
                *             </li>
                *          </ul>
                *         <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are
                *       returned. Shared and public DB snapshots are not included in the returned results by default.
                *       You can include shared snapshots with these results by enabling the <code>IncludeShared</code>
                *       parameter. You can include public snapshots with these results by enabling the
                *       <code>IncludePublic</code> parameter.</p>
                *         <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values
                *       of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is
                *       set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to
                *       <code>public</code>.</p>
                */
            SnapshotType?: string;
            /**
                * <p>A filter that specifies one or more DB snapshots to describe.</p>
                *         <p>Supported filters:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>db-instance-id</code> - Accepts DB instance identifiers and DB
                *               instance Amazon Resource Names (ARNs).</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>snapshot-type</code> - Accepts types of DB snapshots.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>engine</code> - Accepts names of database engines.</p>
                *             </li>
                *          </ul>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *         If more records exist than the specified <code>MaxRecords</code> value,
                *         a pagination token called a marker is included in the response so that
                *         you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *         <code>DescribeDBSnapshots</code> request.
                *             If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A value that indicates whether to include shared manual DB cluster snapshots
                *           from other Amazon Web Services accounts that this Amazon Web Services account has been given
                *           permission to copy or restore. By default, these snapshots are not included.</p>
                *         <p>You can give an Amazon Web Services account permission to restore a manual DB snapshot from
                *     another Amazon Web Services account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            IncludeShared?: boolean;
            /**
                * <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied
                *           or restored by any Amazon Web Services account. By default, the public snapshots are not included.</p>
                *         <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            IncludePublic?: boolean;
            /**
                * <p>A specific DB resource ID to describe.</p>
                */
            DbiResourceId?: string;
    }
    export namespace DescribeDBSnapshotsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBSnapshotsMessage) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeDBSubnetGroups</code> action.</p>
        */
    export interface DBSubnetGroupMessage {
            /**
                * <p>An optional pagination token provided by a previous request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of <code>DBSubnetGroup</code> instances.</p>
                */
            DBSubnetGroups?: DBSubnetGroup[];
    }
    export namespace DBSubnetGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBSubnetGroupMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeDBSubnetGroupsMessage {
            /**
                * <p>The name of the DB subnet group to return details for.</p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *         If more records exist than the specified <code>MaxRecords</code> value,
                *         a pagination token called a marker is included in the response so that
                *         you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous DescribeDBSubnetGroups request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeDBSubnetGroupsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDBSubnetGroupsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeEngineDefaultClusterParametersMessage {
            /**
                * <p>The name of the DB cluster parameter group family to return engine parameter information for.</p>
                */
            DBParameterGroupFamily: string | undefined;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *       If more records exist than the specified <code>MaxRecords</code> value,
                *           a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *       <code>DescribeEngineDefaultClusterParameters</code> request.
                *       If this parameter is specified, the response includes
                *       only records beyond the marker,
                *       up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeEngineDefaultClusterParametersMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEngineDefaultClusterParametersMessage) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeEngineDefaultParameters</code> action.</p>
        */
    export interface EngineDefaults {
            /**
                * <p>Specifies the name of the DB parameter group family that the engine default parameters apply to.</p>
                */
            DBParameterGroupFamily?: string;
            /**
                * <p>An optional pagination token provided by a previous
                *             EngineDefaults request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code> .</p>
                */
            Marker?: string;
            /**
                * <p>Contains a list of engine default parameters.</p>
                */
            Parameters?: Parameter[];
    }
    export namespace EngineDefaults {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EngineDefaults) => any;
    }
    export interface DescribeEngineDefaultClusterParametersResult {
            /**
                * <p>Contains the result of a successful invocation of the <code>DescribeEngineDefaultParameters</code> action.</p>
                */
            EngineDefaults?: EngineDefaults;
    }
    export namespace DescribeEngineDefaultClusterParametersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEngineDefaultClusterParametersResult) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeEngineDefaultParametersMessage {
            /**
                * <p>The name of the DB parameter group family.</p>
                *         <p>Valid Values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>aurora5.6</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-mysql5.7</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-mysql8.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-postgresql10</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-postgresql11</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-postgresql12</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-postgresql13</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mariadb10.2</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mariadb10.3</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mariadb10.4</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mariadb10.5</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mariadb10.6</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mysql5.7</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mysql8.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres10</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres11</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres12</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres13</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres14</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ee-11.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ee-12.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ee-13.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ee-14.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ee-15.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ex-11.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ex-12.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ex-13.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ex-14.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ex-15.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-se-11.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-se-12.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-se-13.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-se-14.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-se-15.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-web-11.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-web-12.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-web-13.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-web-14.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-web-15.0</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            DBParameterGroupFamily: string | undefined;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *         If more records exist than the specified <code>MaxRecords</code> value,
                *           a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *         <code>DescribeEngineDefaultParameters</code> request.
                *             If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeEngineDefaultParametersMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEngineDefaultParametersMessage) => any;
    }
    export interface DescribeEngineDefaultParametersResult {
            /**
                * <p>Contains the result of a successful invocation of the <code>DescribeEngineDefaultParameters</code> action.</p>
                */
            EngineDefaults?: EngineDefaults;
    }
    export namespace DescribeEngineDefaultParametersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEngineDefaultParametersResult) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeEventCategoriesMessage {
            /**
                * <p>The type of source that is generating the events. For RDS Proxy events, specify <code>db-proxy</code>.</p>
                *         <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> | <code>db-proxy</code>
                *          </p>
                */
            SourceType?: string;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
    }
    export namespace DescribeEventCategoriesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventCategoriesMessage) => any;
    }
    /**
        * <p>Contains the results of a successful invocation of the <code>DescribeEventCategories</code> operation.</p>
        */
    export interface EventCategoriesMap {
            /**
                * <p>The source type that the returned categories belong to</p>
                */
            SourceType?: string;
            /**
                * <p>The event categories for the specified source type</p>
                */
            EventCategories?: string[];
    }
    export namespace EventCategoriesMap {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventCategoriesMap) => any;
    }
    /**
        * <p>Data returned from the <code>DescribeEventCategories</code> operation.</p>
        */
    export interface EventCategoriesMessage {
            /**
                * <p>A list of <code>EventCategoriesMap</code> data types.</p>
                */
            EventCategoriesMapList?: EventCategoriesMap[];
    }
    export namespace EventCategoriesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventCategoriesMessage) => any;
    }
    export type SourceType = "custom-engine-version" | "db-cluster" | "db-cluster-snapshot" | "db-instance" | "db-parameter-group" | "db-proxy" | "db-security-group" | "db-snapshot";
    /**
        * <p></p>
        */
    export interface DescribeEventsMessage {
            /**
                * <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If <code>SourceIdentifier</code> is supplied, <code>SourceType</code> must also be provided.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB instance, a <code>DBInstanceIdentifier</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB cluster, a <code>DBClusterIdentifier</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is a DB cluster snapshot, a <code>DBClusterSnapshotIdentifier</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>If the source type is an RDS Proxy, a <code>DBProxyName</code> value must be supplied.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                */
            SourceIdentifier?: string;
            /**
                * <p>The event source to retrieve events for. If no value is specified, all events are returned.</p>
                */
            SourceType?: SourceType | string;
            /**
                * <p>The beginning of the time interval to retrieve events for,
                *         specified in ISO 8601 format. For more information about ISO 8601,
                *         go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a>
                *          </p>
                *         <p>Example: 2009-07-08T18:00Z</p>
                */
            StartTime?: Date;
            /**
                * <p>The end of the time interval for which to retrieve events,
                *         specified in ISO 8601 format. For more information about ISO 8601,
                *         go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a>
                *          </p>
                *         <p>Example: 2009-07-08T18:00Z</p>
                */
            EndTime?: Date;
            /**
                * <p>The number of minutes to retrieve events for.</p>
                *         <p>Default: 60</p>
                */
            Duration?: number;
            /**
                * <p>A list of event categories that trigger notifications for a event notification subscription.</p>
                */
            EventCategories?: string[];
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *         If more records exist than the specified <code>MaxRecords</code> value,
                *             a pagination token called a marker is included in the response so that
                *         you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *         DescribeEvents request.
                *         If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeEventsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventsMessage) => any;
    }
    /**
        * <p>This data type is used as a response element in the <code>DescribeEvents</code> action.</p>
        */
    export interface Event {
            /**
                * <p>Provides the identifier for the source of the event.</p>
                */
            SourceIdentifier?: string;
            /**
                * <p>Specifies the source type for this event.</p>
                */
            SourceType?: SourceType | string;
            /**
                * <p>Provides the text of this event.</p>
                */
            Message?: string;
            /**
                * <p>Specifies the category for the event.</p>
                */
            EventCategories?: string[];
            /**
                * <p>Specifies the date and time of the event.</p>
                */
            Date?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) for the event.</p>
                */
            SourceArn?: string;
    }
    export namespace Event {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Event) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeEvents</code> action.</p>
        */
    export interface EventsMessage {
            /**
                * <p>An optional pagination token provided by a previous
                *             Events request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of <code>Event</code> instances.</p>
                */
            Events?: Event[];
    }
    export namespace EventsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeEventSubscriptionsMessage {
            /**
                * <p>The name of the RDS event notification subscription you want to describe.</p>
                */
            SubscriptionName?: string;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *             If more records exist than the specified <code>MaxRecords</code> value,
                *             a pagination token called a marker is included in the response so that
                *             you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *             DescribeOrderableDBInstanceOptions request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code> .</p>
                */
            Marker?: string;
    }
    export namespace DescribeEventSubscriptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEventSubscriptionsMessage) => any;
    }
    /**
        * <p>Data returned by the <b>DescribeEventSubscriptions</b> action.</p>
        */
    export interface EventSubscriptionsMessage {
            /**
                * <p>An optional pagination token provided by a previous
                *             DescribeOrderableDBInstanceOptions request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of EventSubscriptions data types.</p>
                */
            EventSubscriptionsList?: EventSubscription[];
    }
    export namespace EventSubscriptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EventSubscriptionsMessage) => any;
    }
    export interface DescribeExportTasksMessage {
            /**
                * <p>The identifier of the snapshot export task to be described.</p>
                */
            ExportTaskIdentifier?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.</p>
                */
            SourceArn?: string;
            /**
                * <p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to
                *             include in the output. Filter names and values are case-sensitive.</p>
                *         <p>Supported filters include the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>export-task-identifier</code> - An identifier for the snapshot export task.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>status</code> - The status of the export task. Must be lowercase. Valid statuses are the following:</p>
                *                 <ul>
                *                   <li>
                *                         <p>
                *                         <code>canceled</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>canceling</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>complete</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>failed</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>in_progress</code>
                *                      </p>
                *                     </li>
                *                   <li>
                *                         <p>
                *                         <code>starting</code>
                *                      </p>
                *                     </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            Filters?: Filter[];
            /**
                * <p>An optional pagination token provided by a previous <code>DescribeExportTasks</code> request.
                *             If you specify this parameter, the response includes only records beyond the marker,
                *             up to the value specified by the <code>MaxRecords</code> parameter.</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of records to include in the response. If more records exist than the
                *             specified value, a pagination token called a marker is included in the response.
                *             You can use the marker in a later <code>DescribeExportTasks</code> request
                *             to retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
    }
    export namespace DescribeExportTasksMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeExportTasksMessage) => any;
    }
    export interface ExportTasksMessage {
            /**
                * <p>A pagination token that can be used in a later <code>DescribeExportTasks</code>
                *             request. A marker is used for pagination to identify the location to begin output for
                *             the next response of <code>DescribeExportTasks</code>.</p>
                */
            Marker?: string;
            /**
                * <p>Information about an export of a snapshot to Amazon S3.</p>
                */
            ExportTasks?: ExportTask[];
    }
    export namespace ExportTasksMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportTasksMessage) => any;
    }
    export interface DescribeGlobalClustersMessage {
            /**
                * <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match an existing DBClusterIdentifier.</p>
                *             </li>
                *          </ul>
                */
            GlobalClusterIdentifier?: string;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response. If more records exist than the specified
                *         <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that
                *        you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If
                *         this parameter is specified, the response includes only records beyond the marker, up to the value
                *         specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeGlobalClustersMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeGlobalClustersMessage) => any;
    }
    export interface GlobalClustersMessage {
            /**
                * <p>An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request.
                *         If this parameter is specified, the response includes
                *         only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>The list of global clusters returned by this request.</p>
                */
            GlobalClusters?: GlobalCluster[];
    }
    export namespace GlobalClustersMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GlobalClustersMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeOptionGroupOptionsMessage {
            /**
                * <p>A required parameter. Options available for the given engine name are described.</p>
                *         <p>Valid Values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>mariadb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mysql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-se</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ex</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-web</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            EngineName: string | undefined;
            /**
                * <p>If specified, filters the results to include only options for the specified major engine version.</p>
                */
            MajorEngineVersion?: string;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *             If more records exist than the specified <code>MaxRecords</code> value,
                *             a pagination token called a marker is included in the response so that
                *             you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeOptionGroupOptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOptionGroupOptionsMessage) => any;
    }
    /**
        * <p>The minimum DB engine version required for each corresponding allowed value for an option setting.</p>
        */
    export interface MinimumEngineVersionPerAllowedValue {
            /**
                * <p>The allowed value for an option setting.</p>
                */
            AllowedValue?: string;
            /**
                * <p>The minimum DB engine version required for the allowed value.</p>
                */
            MinimumEngineVersion?: string;
    }
    export namespace MinimumEngineVersionPerAllowedValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MinimumEngineVersionPerAllowedValue) => any;
    }
    /**
        * <p>Option group option settings are used to display settings available for each option with their default values and other information. These values are used with the DescribeOptionGroupOptions action.</p>
        */
    export interface OptionGroupOptionSetting {
            /**
                * <p>The name of the option group option.</p>
                */
            SettingName?: string;
            /**
                * <p>The description of the option group option.</p>
                */
            SettingDescription?: string;
            /**
                * <p>The default value for the option group option.</p>
                */
            DefaultValue?: string;
            /**
                * <p>The DB engine specific parameter type for the option group option.</p>
                */
            ApplyType?: string;
            /**
                * <p>Indicates the acceptable values for the option group option.</p>
                */
            AllowedValues?: string;
            /**
                * <p>Boolean value where true indicates that this option group option can be changed from the default value.</p>
                */
            IsModifiable?: boolean;
            /**
                * <p>Boolean value where true indicates that a value must be specified for this option setting of the option group option.</p>
                */
            IsRequired?: boolean;
            /**
                * <p>The minimum DB engine version required for the corresponding allowed value for this option setting.</p>
                */
            MinimumEngineVersionPerAllowedValue?: MinimumEngineVersionPerAllowedValue[];
    }
    export namespace OptionGroupOptionSetting {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OptionGroupOptionSetting) => any;
    }
    /**
        * <p>The version for an option. Option group option versions are returned by
        *             the <code>DescribeOptionGroupOptions</code> action.</p>
        */
    export interface OptionVersion {
            /**
                * <p>The version of the option.</p>
                */
            Version?: string;
            /**
                * <p>True if the version is the default version of the option, and otherwise false.</p>
                */
            IsDefault?: boolean;
    }
    export namespace OptionVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OptionVersion) => any;
    }
    /**
        * <p>Available option.</p>
        */
    export interface OptionGroupOption {
            /**
                * <p>The name of the option.</p>
                */
            Name?: string;
            /**
                * <p>The description of the option.</p>
                */
            Description?: string;
            /**
                * <p>The name of the engine that this option can be applied to.</p>
                */
            EngineName?: string;
            /**
                * <p>Indicates the major engine version that the option is available for.</p>
                */
            MajorEngineVersion?: string;
            /**
                * <p>The minimum required engine version for the option to be applied.</p>
                */
            MinimumRequiredMinorEngineVersion?: string;
            /**
                * <p>Specifies whether the option requires a port.</p>
                */
            PortRequired?: boolean;
            /**
                * <p>If the option requires a port, specifies the default port for the option.</p>
                */
            DefaultPort?: number;
            /**
                * <p>The options that are prerequisites for this option.</p>
                */
            OptionsDependedOn?: string[];
            /**
                * <p>The options that conflict with this option.</p>
                */
            OptionsConflictsWith?: string[];
            /**
                * <p>Persistent options can't be removed from an option group while DB instances are associated with the option group. If you disassociate all DB instances from the option group, your can remove the persistent option from the option group.</p>
                */
            Persistent?: boolean;
            /**
                * <p>Permanent options can never be removed from an option group. An option group containing a permanent option can't be removed from a DB instance.</p>
                */
            Permanent?: boolean;
            /**
                * <p>If true, you must enable the Auto Minor Version Upgrade setting for your DB instance
                *             before you can use this option.
                *             You can enable Auto Minor Version Upgrade when you first create your DB instance,
                *             or by modifying your DB instance later.</p>
                */
            RequiresAutoMinorEngineVersionUpgrade?: boolean;
            /**
                * <p>If true, you can only use this option with a DB instance that is in a VPC.</p>
                */
            VpcOnly?: boolean;
            /**
                * <p>If true, you can change the option to an earlier version of the option.
                *             This only applies to options that have different versions available.</p>
                */
            SupportsOptionVersionDowngrade?: boolean;
            /**
                * <p>The option settings that are available (and the default value) for each option in an option group.</p>
                */
            OptionGroupOptionSettings?: OptionGroupOptionSetting[];
            /**
                * <p>The versions that are available for the option.</p>
                */
            OptionGroupOptionVersions?: OptionVersion[];
    }
    export namespace OptionGroupOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OptionGroupOption) => any;
    }
    /**
        * <p></p>
        */
    export interface OptionGroupOptionsMessage {
            /**
                * <p>List of available option group options.</p>
                */
            OptionGroupOptions?: OptionGroupOption[];
            /**
                * <p>An optional pagination token provided by a previous request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace OptionGroupOptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OptionGroupOptionsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeOptionGroupsMessage {
            /**
                * <p>The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>An optional pagination token provided by a previous DescribeOptionGroups request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of records to include in the response.
                *             If more records exist than the specified <code>MaxRecords</code> value,
                *             a pagination token called a marker is included in the response so that
                *             you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>Filters the list of option groups to only include groups associated with a specific database engine.</p>
                *         <p>Valid Values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>mariadb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mysql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-se</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ex</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-web</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            EngineName?: string;
            /**
                * <p>Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.</p>
                */
            MajorEngineVersion?: string;
    }
    export namespace DescribeOptionGroupsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOptionGroupsMessage) => any;
    }
    /**
        * <p>List of option groups.</p>
        */
    export interface OptionGroups {
            /**
                * <p>List of option groups.</p>
                */
            OptionGroupsList?: OptionGroup[];
            /**
                * <p>An optional pagination token provided by a previous request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace OptionGroups {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OptionGroups) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeOrderableDBInstanceOptionsMessage {
            /**
                * <p>The name of the engine to retrieve DB instance options for.</p>
                *         <p>Valid Values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>aurora-postgresql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mariadb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mysql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-se</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ex</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-web</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Engine: string | undefined;
            /**
                * <p>The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>The license model filter value. Specify this parameter to show only the available offerings
                *           matching the specified license model.</p>
                *         <p>RDS Custom supports only the BYOL licensing model.</p>
                */
            LicenseModel?: string;
            /**
                * <p>The Availability Zone group associated with a Local Zone. Specify this parameter to retrieve available offerings for the Local Zones in the group.</p>
                *         <p>Omit this parameter to show the available offerings in the specified Amazon Web Services Region.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            AvailabilityZoneGroup?: string;
            /**
                * <p>A value that indicates whether to show only VPC or non-VPC offerings. RDS Custom supports
                *       only VPC offerings.</p>
                *         <p>RDS Custom supports only VPC offerings. If you describe non-VPC offerings for RDS Custom, the output
                *           shows VPC offerings.</p>
                */
            Vpc?: boolean;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *             If more records exist than the specified <code>MaxRecords</code> value,
                *             a pagination token called a marker is included in the response so that
                *             you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous
                *             DescribeOrderableDBInstanceOptions request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeOrderableDBInstanceOptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOrderableDBInstanceOptionsMessage) => any;
    }
    /**
        * <p>Contains the available processor feature information for the DB instance class of a DB instance.</p>
        *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html#USER_ConfigureProcessor">Configuring the
        *                 Processor of the DB Instance Class</a> in the <i>Amazon RDS User Guide.
        *             </i>
        *          </p>
        */
    export interface AvailableProcessorFeature {
            /**
                * <p>The name of the processor feature. Valid names are <code>coreCount</code>
                *             and <code>threadsPerCore</code>.</p>
                */
            Name?: string;
            /**
                * <p>The default value for the processor feature of the DB instance class.</p>
                */
            DefaultValue?: string;
            /**
                * <p>The allowed values for the processor feature of the DB instance class.</p>
                */
            AllowedValues?: string;
    }
    export namespace AvailableProcessorFeature {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AvailableProcessorFeature) => any;
    }
    /**
        * <p>Contains a list of available options for a DB instance.</p>
        *         <p>This data type is used as a response element in the <code>DescribeOrderableDBInstanceOptions</code> action.</p>
        */
    export interface OrderableDBInstanceOption {
            /**
                * <p>The engine type of a DB instance.</p>
                */
            Engine?: string;
            /**
                * <p>The engine version of a DB instance.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The DB instance class for a DB instance.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>The license model for a DB instance.</p>
                */
            LicenseModel?: string;
            /**
                * <p>The Availability Zone group for a DB instance.</p>
                */
            AvailabilityZoneGroup?: string;
            /**
                * <p>A list of Availability Zones for a DB instance.</p>
                */
            AvailabilityZones?: AvailabilityZone[];
            /**
                * <p>Indicates whether a DB instance is Multi-AZ capable.</p>
                */
            MultiAZCapable?: boolean;
            /**
                * <p>Indicates whether a DB instance can have a read replica.</p>
                */
            ReadReplicaCapable?: boolean;
            /**
                * <p>Indicates whether a DB instance is in a VPC.</p>
                */
            Vpc?: boolean;
            /**
                * <p>Indicates whether a DB instance supports encrypted storage.</p>
                */
            SupportsStorageEncryption?: boolean;
            /**
                * <p>Indicates the storage type for a DB instance.</p>
                */
            StorageType?: string;
            /**
                * <p>Indicates whether a DB instance supports provisioned IOPS.</p>
                */
            SupportsIops?: boolean;
            /**
                * <p>Indicates whether a DB instance supports Enhanced Monitoring at intervals from 1 to 60 seconds.</p>
                */
            SupportsEnhancedMonitoring?: boolean;
            /**
                * <p>Indicates whether a DB instance supports IAM database authentication.</p>
                */
            SupportsIAMDatabaseAuthentication?: boolean;
            /**
                * <p>True if a DB instance supports Performance Insights, otherwise false.</p>
                */
            SupportsPerformanceInsights?: boolean;
            /**
                * <p>Minimum storage size for a DB instance.</p>
                */
            MinStorageSize?: number;
            /**
                * <p>Maximum storage size for a DB instance.</p>
                */
            MaxStorageSize?: number;
            /**
                * <p>Minimum total provisioned IOPS for a DB instance.</p>
                */
            MinIopsPerDbInstance?: number;
            /**
                * <p>Maximum total provisioned IOPS for a DB instance.</p>
                */
            MaxIopsPerDbInstance?: number;
            /**
                * <p>Minimum provisioned IOPS per GiB for a DB instance.</p>
                */
            MinIopsPerGib?: number;
            /**
                * <p>Maximum provisioned IOPS per GiB for a DB instance.</p>
                */
            MaxIopsPerGib?: number;
            /**
                * <p>A list of the available processor features for the DB instance class of a DB instance.</p>
                */
            AvailableProcessorFeatures?: AvailableProcessorFeature[];
            /**
                * <p>A list of the supported DB engine modes.</p>
                */
            SupportedEngineModes?: string[];
            /**
                * <p>Whether Amazon RDS can automatically scale storage for DB instances that use the specified DB instance class.</p>
                */
            SupportsStorageAutoscaling?: boolean;
            /**
                * <p>Whether a DB instance supports Kerberos Authentication.</p>
                */
            SupportsKerberosAuthentication?: boolean;
            /**
                * <p>Whether a DB instance supports RDS on Outposts.</p>
                *         <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Amazon RDS on Amazon Web Services Outposts</a>
                *             in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            OutpostCapable?: boolean;
            /**
                * <p>The list of supported modes for Database Activity Streams. Aurora PostgreSQL returns the value <code>[sync,
                *           async]</code>. Aurora MySQL and RDS for Oracle return <code>[async]</code> only. If Database Activity Streams
                *           isn't supported, the return value is an empty list.</p>
                */
            SupportedActivityStreamModes?: string[];
            /**
                * <p>A value that indicates whether you can use Aurora global databases with a specific combination of other DB engine attributes.</p>
                */
            SupportsGlobalDatabases?: boolean;
            /**
                * <p>Whether DB instances can be configured as a Multi-AZ DB cluster.</p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *                Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            SupportsClusters?: boolean;
            /**
                * <p>The network types supported by the DB instance (<code>IPV4</code> or <code>DUAL</code>).</p>
                *         <p>A DB instance can support only the IPv4 protocol or the IPv4 and the IPv6
                *             protocols (<code>DUAL</code>).</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
                *             Working with a DB instance in a VPC</a> in the
                *             <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            SupportedNetworkTypes?: string[];
    }
    export namespace OrderableDBInstanceOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrderableDBInstanceOption) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeOrderableDBInstanceOptions</code> action.</p>
        */
    export interface OrderableDBInstanceOptionsMessage {
            /**
                * <p>An <code>OrderableDBInstanceOption</code> structure containing information about orderable options for the DB instance.</p>
                */
            OrderableDBInstanceOptions?: OrderableDBInstanceOption[];
            /**
                * <p>An optional pagination token provided by a previous
                *             OrderableDBInstanceOptions request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace OrderableDBInstanceOptionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrderableDBInstanceOptionsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribePendingMaintenanceActionsMessage {
            /**
                * <p>The ARN of a resource to return pending maintenance actions for.</p>
                */
            ResourceIdentifier?: string;
            /**
                * <p>A filter that specifies one or more resources to return pending maintenance actions for.</p>
                *         <p>Supported filters:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB
                *               cluster Amazon Resource Names (ARNs). The results list only includes pending maintenance
                *               actions for the DB clusters identified by these ARNs.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>db-instance-id</code> - Accepts DB instance identifiers and DB
                *             instance ARNs. The results list only includes pending maintenance
                *             actions for the DB instances identified by these ARNs.</p>
                *             </li>
                *          </ul>
                */
            Filters?: Filter[];
            /**
                * <p>An optional pagination token provided by a previous
                *             <code>DescribePendingMaintenanceActions</code> request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to a number of records specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>The maximum number of records to include in the response.
                *             If more records exist than the specified <code>MaxRecords</code> value,
                *             a pagination token called a marker is included in the response so that
                *             you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
    }
    export namespace DescribePendingMaintenanceActionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePendingMaintenanceActionsMessage) => any;
    }
    /**
        * <p>Data returned from the <b>DescribePendingMaintenanceActions</b> action.</p>
        */
    export interface PendingMaintenanceActionsMessage {
            /**
                * <p>A list of the pending maintenance actions for the resource.</p>
                */
            PendingMaintenanceActions?: ResourcePendingMaintenanceActions[];
            /**
                * <p>An optional pagination token provided by a previous
                *             <code>DescribePendingMaintenanceActions</code> request.
                *             If this parameter is specified, the response includes
                *             only records beyond the marker,
                *             up to a number of records specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace PendingMaintenanceActionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingMaintenanceActionsMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeReservedDBInstancesMessage {
            /**
                * <p>The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.</p>
                */
            ReservedDBInstanceId?: string;
            /**
                * <p>The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.</p>
                */
            ReservedDBInstancesOfferingId?: string;
            /**
                * <p>The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p>
                *         <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code>
                *          </p>
                */
            Duration?: string;
            /**
                * <p>The product description filter value. Specify this parameter to show only those reservations matching the specified product description.</p>
                */
            ProductDescription?: string;
            /**
                * <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p>
                *         <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code>
                *          </p>
                */
            OfferingType?: string;
            /**
                * <p>A value that indicates whether to show only those reservations that support Multi-AZ.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p>
                *         <note>
                *             <p>Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.</p>
                *         </note>
                */
            LeaseId?: string;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *     If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is
                *           included in the response so you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request.
                *         If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeReservedDBInstancesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReservedDBInstancesMessage) => any;
    }
    /**
        * <p>This data type is used as a response element in the
        *             <code>DescribeReservedDBInstances</code> and <code>DescribeReservedDBInstancesOfferings</code> actions.</p>
        */
    export interface RecurringCharge {
            /**
                * <p>The amount of the recurring charge.</p>
                */
            RecurringChargeAmount?: number;
            /**
                * <p>The frequency of the recurring charge.</p>
                */
            RecurringChargeFrequency?: string;
    }
    export namespace RecurringCharge {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecurringCharge) => any;
    }
    /**
        * <p>This data type is used as a response element in the
        *             <code>DescribeReservedDBInstances</code> and
        *             <code>PurchaseReservedDBInstancesOffering</code> actions.</p>
        */
    export interface ReservedDBInstance {
            /**
                * <p>The unique identifier for the reservation.</p>
                */
            ReservedDBInstanceId?: string;
            /**
                * <p>The offering identifier.</p>
                */
            ReservedDBInstancesOfferingId?: string;
            /**
                * <p>The DB instance class for the reserved DB instance.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>The time the reservation started.</p>
                */
            StartTime?: Date;
            /**
                * <p>The duration of the reservation in seconds.</p>
                */
            Duration?: number;
            /**
                * <p>The fixed price charged for this reserved DB instance.</p>
                */
            FixedPrice?: number;
            /**
                * <p>The hourly price charged for this reserved DB instance.</p>
                */
            UsagePrice?: number;
            /**
                * <p>The currency code for the reserved DB instance.</p>
                */
            CurrencyCode?: string;
            /**
                * <p>The number of reserved DB instances.</p>
                */
            DBInstanceCount?: number;
            /**
                * <p>The description of the reserved DB instance.</p>
                */
            ProductDescription?: string;
            /**
                * <p>The offering type of this reserved DB instance.</p>
                */
            OfferingType?: string;
            /**
                * <p>Indicates if the reservation applies to Multi-AZ deployments.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>The state of the reserved DB instance.</p>
                */
            State?: string;
            /**
                * <p>The recurring price charged to run this reserved DB instance.</p>
                */
            RecurringCharges?: RecurringCharge[];
            /**
                * <p>The Amazon Resource Name (ARN) for the reserved DB instance.</p>
                */
            ReservedDBInstanceArn?: string;
            /**
                * <p>The unique identifier for the lease associated with the reserved DB instance.</p>
                *         <note>
                *             <p>Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.</p>
                *         </note>
                */
            LeaseId?: string;
    }
    export namespace ReservedDBInstance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReservedDBInstance) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeReservedDBInstances</code> action.</p>
        */
    export interface ReservedDBInstanceMessage {
            /**
                * <p>An optional pagination token provided by a previous request.
                *         If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of reserved DB instances.</p>
                */
            ReservedDBInstances?: ReservedDBInstance[];
    }
    export namespace ReservedDBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReservedDBInstanceMessage) => any;
    }
    /**
        * <p>The specified reserved DB Instance not found.</p>
        */
    export class ReservedDBInstanceNotFoundFault extends __BaseException {
            readonly name: "ReservedDBInstanceNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReservedDBInstanceNotFoundFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface DescribeReservedDBInstancesOfferingsMessage {
            /**
                * <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p>
                *         <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code>
                *          </p>
                */
            ReservedDBInstancesOfferingId?: string;
            /**
                * <p>The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p>
                *         <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code>
                *          </p>
                */
            Duration?: string;
            /**
                * <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p>
                *         <note>
                *             <p>The results show offerings that partially match the filter value.</p>
                *         </note>
                */
            ProductDescription?: string;
            /**
                * <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p>
                *         <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code>
                *          </p>
                */
            OfferingType?: string;
            /**
                * <p>A value that indicates whether to show only those reservations that support Multi-AZ.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
            /**
                * <p>The maximum number of records to include in the response.
                *     If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is
                *     included in the response so you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous request.
                *         If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
    }
    export namespace DescribeReservedDBInstancesOfferingsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeReservedDBInstancesOfferingsMessage) => any;
    }
    /**
        * <p>This data type is used as a response element in the <code>DescribeReservedDBInstancesOfferings</code> action.</p>
        */
    export interface ReservedDBInstancesOffering {
            /**
                * <p>The offering identifier.</p>
                */
            ReservedDBInstancesOfferingId?: string;
            /**
                * <p>The DB instance class for the reserved DB instance.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>The duration of the offering in seconds.</p>
                */
            Duration?: number;
            /**
                * <p>The fixed price charged for this offering.</p>
                */
            FixedPrice?: number;
            /**
                * <p>The hourly price charged for this offering.</p>
                */
            UsagePrice?: number;
            /**
                * <p>The currency code for the reserved DB instance offering.</p>
                */
            CurrencyCode?: string;
            /**
                * <p>The database engine used by the offering.</p>
                */
            ProductDescription?: string;
            /**
                * <p>The offering type.</p>
                */
            OfferingType?: string;
            /**
                * <p>Indicates if the offering applies to Multi-AZ deployments.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>The recurring price charged to run this reserved DB instance.</p>
                */
            RecurringCharges?: RecurringCharge[];
    }
    export namespace ReservedDBInstancesOffering {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReservedDBInstancesOffering) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeReservedDBInstancesOfferings</code> action.</p>
        */
    export interface ReservedDBInstancesOfferingMessage {
            /**
                * <p>An optional pagination token provided by a previous request.
                *         If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of reserved DB instance offerings.</p>
                */
            ReservedDBInstancesOfferings?: ReservedDBInstancesOffering[];
    }
    export namespace ReservedDBInstancesOfferingMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReservedDBInstancesOfferingMessage) => any;
    }
    /**
        * <p>Specified offering does not exist.</p>
        */
    export class ReservedDBInstancesOfferingNotFoundFault extends __BaseException {
            readonly name: "ReservedDBInstancesOfferingNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReservedDBInstancesOfferingNotFoundFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface DescribeSourceRegionsMessage {
            /**
                * <p>The source Amazon Web Services Region name. For example, <code>us-east-1</code>.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must specify a valid Amazon Web Services Region name.</p>
                *             </li>
                *          </ul>
                */
            RegionName?: string;
            /**
                * <p>The maximum number of records to include in the response. If more records exist
                *             than the specified <code>MaxRecords</code> value, a pagination token called a marker is
                *             included in the response so you can retrieve the remaining results.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: Minimum 20, maximum 100.</p>
                */
            MaxRecords?: number;
            /**
                * <p>An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response
                *             includes only records beyond the marker, up to the value specified by
                *             <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
    }
    export namespace DescribeSourceRegionsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSourceRegionsMessage) => any;
    }
    /**
        * <p>Contains an Amazon Web Services Region name as the result of a successful call to the <code>DescribeSourceRegions</code> action.</p>
        */
    export interface SourceRegion {
            /**
                * <p>The name of the source Amazon Web Services Region.</p>
                */
            RegionName?: string;
            /**
                * <p>The endpoint for the source Amazon Web Services Region endpoint.</p>
                */
            Endpoint?: string;
            /**
                * <p>The status of the source Amazon Web Services Region.</p>
                */
            Status?: string;
            /**
                * <p>Whether the source Amazon Web Services Region supports replicating automated backups to the current Amazon Web Services Region.</p>
                */
            SupportsDBInstanceAutomatedBackupsReplication?: boolean;
    }
    export namespace SourceRegion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceRegion) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the <code>DescribeSourceRegions</code> action.</p>
        */
    export interface SourceRegionMessage {
            /**
                * <p>An optional pagination token provided by a previous request.
                *         If this parameter is specified, the response includes
                *         only records beyond the marker,
                *         up to the value specified by <code>MaxRecords</code>.</p>
                */
            Marker?: string;
            /**
                * <p>A list of <code>SourceRegion</code> instances that contains each source Amazon Web Services Region that the
                *             current Amazon Web Services Region can get a read replica or a DB snapshot from.</p>
                */
            SourceRegions?: SourceRegion[];
    }
    export namespace SourceRegionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceRegionMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DescribeValidDBInstanceModificationsMessage {
            /**
                * <p>The customer identifier or the ARN of your DB instance.</p>
                */
            DBInstanceIdentifier: string | undefined;
    }
    export namespace DescribeValidDBInstanceModificationsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeValidDBInstanceModificationsMessage) => any;
    }
    /**
        * <p>A range of double values.</p>
        */
    export interface DoubleRange {
            /**
                * <p>The minimum value in the range.</p>
                */
            From?: number;
            /**
                * <p>The maximum value in the range.</p>
                */
            To?: number;
    }
    export namespace DoubleRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DoubleRange) => any;
    }
    /**
        * <p>A range of integer values.</p>
        */
    export interface Range {
            /**
                * <p>The minimum value in the range.</p>
                */
            From?: number;
            /**
                * <p>The maximum value in the range.</p>
                */
            To?: number;
            /**
                * <p>The step value for the range.
                *             For example, if you have a range of 5,000 to 10,000,
                *             with a step value of 1,000,
                *             the valid values start at 5,000 and step up by 1,000.
                *             Even though 7,500 is within the range,
                *             it isn't a valid value for the range.
                *             The valid values are 5,000, 6,000, 7,000, 8,000...</p>
                */
            Step?: number;
    }
    export namespace Range {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Range) => any;
    }
    /**
        * <p>Information about valid modifications that you can make to your DB instance.
        *             Contains the result of a successful call to the
        *             <code>DescribeValidDBInstanceModifications</code> action.</p>
        */
    export interface ValidStorageOptions {
            /**
                * <p>The valid storage types for your DB instance.
                *             For example, gp2, io1.</p>
                */
            StorageType?: string;
            /**
                * <p>The valid range of storage in gibibytes (GiB).
                *             For example, 100 to 16384.</p>
                */
            StorageSize?: Range[];
            /**
                * <p>The valid range of provisioned IOPS.
                *             For example, 1000-20000.</p>
                */
            ProvisionedIops?: Range[];
            /**
                * <p>The valid range of Provisioned IOPS to gibibytes of storage multiplier.
                *             For example, 3-10,
                *             which means that provisioned IOPS can be between 3 and 10 times storage.</p>
                */
            IopsToStorageRatio?: DoubleRange[];
            /**
                * <p>Whether or not Amazon RDS can automatically scale storage for DB instances that use the new instance class.</p>
                */
            SupportsStorageAutoscaling?: boolean;
    }
    export namespace ValidStorageOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidStorageOptions) => any;
    }
    /**
        * <p>Information about valid modifications that you can make to your DB instance.
        *             Contains the result of a successful call to the
        *             <code>DescribeValidDBInstanceModifications</code> action.
        *             You can use this information when you call
        *             <code>ModifyDBInstance</code>.</p>
        */
    export interface ValidDBInstanceModificationsMessage {
            /**
                * <p>Valid storage options for your DB instance.</p>
                */
            Storage?: ValidStorageOptions[];
            /**
                * <p>Valid processor features for your DB instance.</p>
                */
            ValidProcessorFeatures?: AvailableProcessorFeature[];
    }
    export namespace ValidDBInstanceModificationsMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidDBInstanceModificationsMessage) => any;
    }
    export interface DescribeValidDBInstanceModificationsResult {
            /**
                * <p>Information about valid modifications that you can make to your DB instance.
                *             Contains the result of a successful call to the
                *             <code>DescribeValidDBInstanceModifications</code> action.
                *             You can use this information when you call
                *             <code>ModifyDBInstance</code>.</p>
                */
            ValidDBInstanceModificationsMessage?: ValidDBInstanceModificationsMessage;
    }
    export namespace DescribeValidDBInstanceModificationsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeValidDBInstanceModificationsResult) => any;
    }
    /**
        * <p>
        *             <code>LogFileName</code> doesn't refer to an existing DB log file.</p>
        */
    export class DBLogFileNotFoundFault extends __BaseException {
            readonly name: "DBLogFileNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBLogFileNotFoundFault, __BaseException>);
    }
    /**
        * <p>This data type is used as a response element to <code>DownloadDBLogFilePortion</code>.</p>
        */
    export interface DownloadDBLogFilePortionDetails {
            /**
                * <p>Entries from the specified log file.</p>
                */
            LogFileData?: string;
            /**
                * <p>A pagination token that can be used in a later <code>DownloadDBLogFilePortion</code> request.</p>
                */
            Marker?: string;
            /**
                * <p>Boolean value that if true, indicates there is more data to be downloaded.</p>
                */
            AdditionalDataPending?: boolean;
    }
    export namespace DownloadDBLogFilePortionDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DownloadDBLogFilePortionDetails) => any;
    }
    /**
        * <p></p>
        */
    export interface DownloadDBLogFilePortionMessage {
            /**
                * <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing DBInstance.</p>
                *             </li>
                *          </ul>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>The name of the log file to be downloaded.</p>
                */
            LogFileName: string | undefined;
            /**
                * <p>The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.</p>
                */
            Marker?: string;
            /**
                * <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p>
                *         <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning
                *             or the end of the log file, depending on the value of the Marker parameter.</p>
                *         <ul>
                *             <li>
                *                 <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a
                *               maximum of 10000 lines, starting with the most recent log entries first.</p>
                *             </li>
                *             <li>
                *                 <p>If
                *               NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end
                *                     of the log file are returned.</p>
                *             </li>
                *             <li>
                *                 <p>If Marker is specified as "0", then the specified
                *                       number of lines from the beginning of the log file are returned.</p>
                *             </li>
                *             <li>
                *                 <p>You can
                *                         download the log file in blocks of lines by specifying the size of the block using
                *                     the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your
                *                     first request. Include the Marker value returned in the response as the Marker value for the next
                *                     request, continuing until the AdditionalDataPending response element returns false.</p>
                *             </li>
                *          </ul>
                */
            NumberOfLines?: number;
    }
    export namespace DownloadDBLogFilePortionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DownloadDBLogFilePortionMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface FailoverDBClusterMessage {
            /**
                * <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing DBCluster.</p>
                *             </li>
                *          </ul>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The name of the DB instance to promote to the primary DB instance.</p>
                *         <p>Specify the DB instance identifier for an Aurora Replica or a Multi-AZ readable standby in the DB cluster,
                *         for example <code>mydbcluster-replica1</code>.</p>
                *         <p>This setting isn't supported for RDS for MySQL Multi-AZ DB clusters.</p>
                */
            TargetDBInstanceIdentifier?: string;
    }
    export namespace FailoverDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailoverDBClusterMessage) => any;
    }
    export interface FailoverDBClusterResult {
            /**
                * <p>Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
                *         <p>For an Amazon Aurora DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>PromoteReadReplicaDBCluster</code>,
                *           <code>RestoreDBClusterFromS3</code>, <code>RestoreDBClusterFromSnapshot</code>,
                *           <code>RestoreDBClusterToPointInTime</code>, <code>StartDBCluster</code>, and <code>StopDBCluster</code>.</p>
                *         <p>For a Multi-AZ DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>RebootDBCluster</code>,
                *           <code>RestoreDBClusterFromSnapshot</code>, and <code>RestoreDBClusterToPointInTime</code>.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
                *          </p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace FailoverDBClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailoverDBClusterResult) => any;
    }
    export interface FailoverGlobalClusterMessage {
            /**
                * <p>Identifier of the Aurora global database (<a>GlobalCluster</a>)
                *     that should be failed over. The identifier is the unique key assigned by
                *     the user when the Aurora global database was created. In other words,
                *     it's the name of the Aurora global database that you want to fail over.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing
                *       <a>GlobalCluster</a> (Aurora global database).</p>
                *             </li>
                *          </ul>
                */
            GlobalClusterIdentifier: string | undefined;
            /**
                * <p>Identifier of the secondary Aurora DB cluster that you want to promote to primary for the Aurora
                *        global database (<a>GlobalCluster</a>.) Use the Amazon Resource Name (ARN) for the identifier so that
                *        Aurora can locate the cluster in its Amazon Web Services Region.</p>
                */
            TargetDbClusterIdentifier: string | undefined;
    }
    export namespace FailoverGlobalClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailoverGlobalClusterMessage) => any;
    }
    export interface FailoverGlobalClusterResult {
            /**
                * <p>A data type representing an Aurora global database.</p>
                */
            GlobalCluster?: GlobalCluster;
    }
    export namespace FailoverGlobalClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailoverGlobalClusterResult) => any;
    }
    /**
        * <p></p>
        */
    export interface ListTagsForResourceMessage {
            /**
                * <p>The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about
                *             creating an ARN,
                *             see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
                *                 Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            ResourceName: string | undefined;
            /**
                * <p>This parameter isn't currently supported.</p>
                */
            Filters?: Filter[];
    }
    export namespace ListTagsForResourceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface TagListMessage {
            /**
                * <p>List of tags returned by the <code>ListTagsForResource</code> operation.</p>
                */
            TagList?: Tag[];
    }
    export namespace TagListMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagListMessage) => any;
    }
    export interface ModifyCertificatesMessage {
            /**
                * <p>The new default certificate identifier to override the current one with.</p>
                *         <p>To determine the valid values, use the <code>describe-certificates</code> CLI
                *             command or the <code>DescribeCertificates</code> API operation.</p>
                */
            CertificateIdentifier?: string;
            /**
                * <p>A value that indicates whether to remove the override for the default certificate.
                *             If the override is removed, the default certificate is the system
                *             default.</p>
                */
            RemoveCustomerOverride?: boolean;
    }
    export namespace ModifyCertificatesMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyCertificatesMessage) => any;
    }
    export interface ModifyCertificatesResult {
            /**
                * <p>A CA certificate for an Amazon Web Services account.</p>
                */
            Certificate?: Certificate;
    }
    export namespace ModifyCertificatesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyCertificatesResult) => any;
    }
    export interface DBClusterCapacityInfo {
            /**
                * <p>A user-supplied DB cluster identifier. This identifier is the unique key that
                *             identifies a DB cluster.</p>
                */
            DBClusterIdentifier?: string;
            /**
                * <p>A value that specifies the capacity that the DB cluster scales to next.</p>
                */
            PendingCapacity?: number;
            /**
                * <p>The current capacity of the DB cluster.</p>
                */
            CurrentCapacity?: number;
            /**
                * <p>The number of seconds before a call to <code>ModifyCurrentDBClusterCapacity</code> times out.</p>
                */
            SecondsBeforeTimeout?: number;
            /**
                * <p>The timeout action of a call to <code>ModifyCurrentDBClusterCapacity</code>, either
                *             <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p>
                */
            TimeoutAction?: string;
    }
    export namespace DBClusterCapacityInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterCapacityInfo) => any;
    }
    /**
        * <p>
        *             <code>Capacity</code> isn't a valid Aurora Serverless DB cluster
        *             capacity. Valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>,
        *             <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p>
        */
    export class InvalidDBClusterCapacityFault extends __BaseException {
            readonly name: "InvalidDBClusterCapacityFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDBClusterCapacityFault, __BaseException>);
    }
    export interface ModifyCurrentDBClusterCapacityMessage {
            /**
                * <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing DB cluster.</p>
                *             </li>
                *          </ul>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The DB cluster capacity.</p>
                *         <p>When you change the capacity of a paused Aurora Serverless v1 DB cluster, it automatically resumes.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p>
                *             </li>
                *             <li>
                *                 <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p>
                *             </li>
                *          </ul>
                */
            Capacity?: number;
            /**
                * <p>The amount of time, in seconds, that Aurora Serverless v1 tries to find a scaling point
                *             to perform seamless scaling before enforcing the timeout action. The default is
                *             300.</p>
                *         <p>Specify a value between 10 and 600 seconds.</p>
                */
            SecondsBeforeTimeout?: number;
            /**
                * <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p>
                *         <p>
                *             <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p>
                *         <p>
                *             <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
                */
            TimeoutAction?: string;
    }
    export namespace ModifyCurrentDBClusterCapacityMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyCurrentDBClusterCapacityMessage) => any;
    }
    export enum CustomEngineVersionStatus {
            available = "available",
            inactive = "inactive",
            inactive_except_restore = "inactive-except-restore"
    }
    export interface ModifyCustomDBEngineVersionMessage {
            /**
                * <p>The DB engine. The only supported value is <code>custom-oracle-ee</code>.</p>
                */
            Engine: string | undefined;
            /**
                * <p>The custom engine version (CEV) that you want to modify. This option is required for
                *             RDS Custom for Oracle, but optional for Amazon RDS. The combination of <code>Engine</code> and
                *             <code>EngineVersion</code> is unique per customer per Amazon Web Services Region.</p>
                */
            EngineVersion: string | undefined;
            /**
                * <p>An optional description of your CEV.</p>
                */
            Description?: string;
            /**
                * <p>The availability status to be assigned to the CEV. Valid values are as follows:</p>
                *         <dl>
                *             <dt>available</dt>
                *             <dd>
                *                     <p>You can use this CEV to create a new RDS Custom DB instance.</p>
                *                 </dd>
                *             <dt>inactive</dt>
                *             <dd>
                *                     <p>You can create a new RDS Custom instance by restoring a DB snapshot with this CEV.
                *                     You can't patch or create new instances with this CEV.</p>
                *                 </dd>
                *          </dl>
                *         <p>You can change any status to any status. A typical reason to change status is to prevent the accidental
                *             use of a CEV, or to make a deprecated CEV eligible for use again. For example, you might change the status
                *             of your CEV from <code>available</code> to <code>inactive</code>, and from <code>inactive</code> back to
                *             <code>available</code>. To change the availability status of the CEV, it must not currently be in use by an
                *             RDS Custom instance, snapshot, or automated backup.</p>
                */
            Status?: CustomEngineVersionStatus | string;
    }
    export namespace ModifyCustomDBEngineVersionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyCustomDBEngineVersionMessage) => any;
    }
    /**
        * <p>The configuration setting for the log types to be enabled for export to CloudWatch
        *             Logs for a specific DB instance or DB cluster.</p>
        *         <p>The <code>EnableLogTypes</code> and <code>DisableLogTypes</code> arrays determine which logs will be exported
        *             (or not exported) to CloudWatch Logs. The values within these arrays depend on the DB
        *             engine being used.</p>
        *         <p>For more information about exporting CloudWatch Logs for Amazon RDS DB instances, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
        *         <p>For more information about exporting CloudWatch Logs for Amazon Aurora DB clusters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
        */
    export interface CloudwatchLogsExportConfiguration {
            /**
                * <p>The list of log types to enable.</p>
                */
            EnableLogTypes?: string[];
            /**
                * <p>The list of log types to disable.</p>
                */
            DisableLogTypes?: string[];
    }
    export namespace CloudwatchLogsExportConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudwatchLogsExportConfiguration) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyDBClusterMessage {
            /**
                * <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p>
                *         <p>Constraints: This identifier must match the identifier of an existing DB
                *             cluster.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster2</code>
                *          </p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            NewDBClusterIdentifier?: string;
            /**
                * <p>A value that indicates whether the modifications in this request and
                *       any pending modifications are asynchronously applied
                *       as soon as possible, regardless of the
                *       <code>PreferredMaintenanceWindow</code> setting for the DB cluster.
                *       If this parameter is disabled, changes to the
                *       DB cluster are applied during the next maintenance window.</p>
                *         <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>,
                *       <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code>
                *       parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>,
                *       and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are
                *       applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
                *         <p>By default, this parameter is disabled.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            ApplyImmediately?: boolean;
            /**
                * <p>The number of days for which automated backups are retained. Specify a minimum value of 1.</p>
                *         <p>Default: 1</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be a value from 1 to 35</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>The name of the DB cluster parameter group to use for the DB cluster.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DBClusterParameterGroupName?: string;
            /**
                * <p>A list of VPC security groups that the DB cluster will belong to.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>The port number on which the DB cluster accepts connections.</p>
                *         <p>Constraints: Value must be <code>1150-65535</code>
                *          </p>
                *         <p>Default: The same port as the original DB cluster.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            Port?: number;
            /**
                * <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
                *         <p>Constraints: Must contain from 8 to 41 characters.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            MasterUserPassword?: string;
            /**
                * <p>A value that indicates that the DB cluster should be associated with the specified option group.</p>
                *         <p>DB clusters are associated with a default option group that can't be modified.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>The daily time range during which automated backups are created
                *             if automated backups are enabled,
                *             using the <code>BackupRetentionPeriod</code> parameter.</p>
                *         <p>The default is a 30-minute window selected at random from an
                *             8-hour block of time for each Amazon Web Services Region.
                *             To view the time blocks available, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow">
                *                 Backup window</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Must be in Universal Coordinated Time (UTC).</p>
                *             </li>
                *             <li>
                *                 <p>Must not conflict with the preferred maintenance window.</p>
                *             </li>
                *             <li>
                *                 <p>Must be at least 30 minutes.</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
                *         <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
                *          </p>
                *         <p>The default is a 30-minute window selected at random from an
                *             8-hour block of time for each Amazon Web Services Region, occurring on a random day of the
                *             week. To see the time blocks available, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora">
                *                 Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
                *         <p>Constraints: Minimum 30-minute window.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access
                *             Management (IAM) accounts to database accounts. By default, mapping isn't
                *             enabled.</p>
                *         <p>For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
                *                 IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            EnableIAMDatabaseAuthentication?: boolean;
            /**
                * <p>The target backtrack window, in seconds. To disable backtracking, set this value to
                *             0.</p>
                *         <p>Default: 0</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora MySQL DB clusters only</p>
                */
            BacktrackWindow?: number;
            /**
                * <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster. The values
                *             in the list depend on the DB engine being used.</p>
                *             <p>
                *             <b>RDS for MySQL</b>
                *          </p>
                *             <p>Possible values are <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
                *             <p>
                *             <b>RDS for PostgreSQL</b>
                *          </p>
                *             <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.</p>
                *             <p>
                *             <b>Aurora MySQL</b>
                *          </p>
                *             <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
                *             <p>
                *             <b>Aurora PostgreSQL</b>
                *          </p>
                *             <p>Possible value is <code>postgresql</code>.</p>
                *             <p>For more information about exporting CloudWatch Logs for Amazon RDS, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">
                *                 Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
                *             <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            CloudwatchLogsExportConfiguration?: CloudwatchLogsExportConfiguration;
            /**
                * <p>The version number of the database engine to which you want to upgrade.
                *             Changing this parameter results in an outage. The change is applied during
                *             the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p>
                *         <p>To list all of the available engine versions for MySQL 5.6-compatible Aurora, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>To list all of the available engine versions for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>To list all of the available engine versions for Aurora PostgreSQL, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>To list all of the available engine versions for RDS for MySQL, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine mysql --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>To list all of the available engine versions for RDS for PostgreSQL, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            EngineVersion?: string;
            /**
                * <p>A value that indicates whether major version upgrades are allowed.</p>
                *         <p>Constraints: You must allow major version upgrades when specifying a value for the
                *                 <code>EngineVersion</code> parameter that is a different major version than the DB
                *             cluster's current version.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            AllowMajorVersionUpgrade?: boolean;
            /**
                * <p>The name of the DB parameter group to apply to all instances of the DB cluster.</p>
                *         <note>
                *             <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB
                *           cluster isn't rebooted automatically. Also, parameter changes are applied immediately rather than
                *              during the next maintenance window.</p>
                *         </note>
                *         <p>Default: The existing name setting</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p>
                *             </li>
                *             <li>
                *                 <p>The <code>DBInstanceParameterGroupName</code> parameter is valid in combination with the
                *               <code>AllowMajorVersionUpgrade</code> parameter for a major version upgrade only.</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            DBInstanceParameterGroupName?: string;
            /**
                * <p>The Active Directory directory ID to move the DB cluster to.
                *           Specify <code>none</code> to remove the cluster from its current domain.
                *           The domain must be created prior to this operation.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a>
                *             in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            Domain?: string;
            /**
                * <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            DomainIAMRoleName?: string;
            /**
                * <p>The scaling properties of the DB cluster. You can only modify scaling properties for DB clusters in <code>serverless</code> DB engine mode.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            ScalingConfiguration?: ScalingConfiguration;
            /**
                * <p>A value that indicates whether the DB cluster has deletion protection enabled.
                *             The database can't be deleted when deletion protection is enabled. By default,
                *             deletion protection isn't enabled.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless v1 DB cluster. By default, the HTTP endpoint
                *             is disabled.</p>
                *         <p>When enabled, the HTTP endpoint provides a connectionless web service API for running
                *             SQL queries on the Aurora Serverless v1 DB cluster. You can also query your database
                *             from inside the RDS console with the query editor.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless v1</a> in the
                *             <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            EnableHttpEndpoint?: boolean;
            /**
                * <p>A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster.
                *             The default is not to copy them.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>A value that indicates whether to enable this DB cluster to forward write operations to the primary cluster of an
                *       Aurora global database (<a>GlobalCluster</a>). By default, write operations are not allowed on Aurora DB clusters that
                *       are secondary clusters in an Aurora global database.</p>
                *         <p>You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter
                *       enabled, a secondary cluster can forward writes to the current primary cluster and the resulting changes are replicated back to
                *       this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the primary is
                *       demoted by the <a>FailoverGlobalCluster</a> API operation, but it does nothing until then.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            EnableGlobalWriteForwarding?: boolean;
            /**
                * <p>The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example db.m6g.xlarge.
                *             Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.</p>
                *         <p>For the full list of DB instance classes and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">
                *         DB Instance Class</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            DBClusterInstanceClass?: string;
            /**
                * <p>The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster.</p>
                *         <p>Type: Integer</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>Specifies the storage type to be associated with the DB cluster.</p>
                *         <p>Valid values: <code>io1</code>
                *          </p>
                *         <p>When specified, a value for the <code>Iops</code> parameter is required.</p>
                *         <p>Default: <code>io1</code>
                *          </p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            StorageType?: string;
            /**
                * <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated
                *             for each DB instance in the Multi-AZ DB cluster.</p>
                *         <p>For information about valid Iops values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB cluster.</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            Iops?: number;
            /**
                * <p>A value that indicates whether minor engine upgrades are applied automatically to the DB cluster during the maintenance window.
                *             By default, minor engine upgrades are applied automatically.</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster.
                *             To turn off collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p>
                *         <p>If <code>MonitoringRoleArn</code> is specified, also set <code>MonitoringInterval</code>
                *             to a value other than 0.</p>
                *         <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code>
                *          </p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            MonitoringInterval?: number;
            /**
                * <p>The Amazon Resource Name (ARN) for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs. An
                *             example is <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role,
                *             see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To
                *                 create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>If <code>MonitoringInterval</code> is set to a value other than 0, supply a <code>MonitoringRoleArn</code> value.</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            MonitoringRoleArn?: string;
            /**
                * <p>A value that indicates whether to turn on Performance Insights for the DB cluster.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">
                *             Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            EnablePerformanceInsights?: boolean;
            /**
                * <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                *         <p>If you don't specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS
                *             uses your default KMS key. There is a default KMS key for your Amazon Web Services account.
                *             Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            PerformanceInsightsKMSKeyId?: string;
            /**
                * <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            PerformanceInsightsRetentionPeriod?: number;
            /**
                * <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the
                *             <i>Amazon Aurora User Guide</i>.</p>
                */
            ServerlessV2ScalingConfiguration?: ServerlessV2ScalingConfiguration;
    }
    export namespace ModifyDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBClusterMessage) => any;
    }
    export interface ModifyDBClusterResult {
            /**
                * <p>Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
                *         <p>For an Amazon Aurora DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>PromoteReadReplicaDBCluster</code>,
                *           <code>RestoreDBClusterFromS3</code>, <code>RestoreDBClusterFromSnapshot</code>,
                *           <code>RestoreDBClusterToPointInTime</code>, <code>StartDBCluster</code>, and <code>StopDBCluster</code>.</p>
                *         <p>For a Multi-AZ DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>RebootDBCluster</code>,
                *           <code>RestoreDBClusterFromSnapshot</code>, and <code>RestoreDBClusterToPointInTime</code>.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
                *          </p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace ModifyDBClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBClusterResult) => any;
    }
    export interface ModifyDBClusterEndpointMessage {
            /**
                * <p>The identifier of the endpoint to modify. This parameter is stored as a lowercase string.</p>
                */
            DBClusterEndpointIdentifier: string | undefined;
            /**
                * <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.</p>
                */
            EndpointType?: string;
            /**
                * <p>List of DB instance identifiers that are part of the custom endpoint group.</p>
                */
            StaticMembers?: string[];
            /**
                * <p>List of DB instance identifiers that aren't part of the custom endpoint group.
                *        All other eligible instances are reachable through the custom endpoint.
                *        Only relevant if the list of static members is empty.</p>
                */
            ExcludedMembers?: string[];
    }
    export namespace ModifyDBClusterEndpointMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBClusterEndpointMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface DBClusterParameterGroupNameMessage {
            /**
                * <p>The name of the DB cluster parameter group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be 1 to 255 letters or numbers.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                *         <note>
                *             <p>This value is stored as a lowercase string.</p>
                *         </note>
                */
            DBClusterParameterGroupName?: string;
    }
    export namespace DBClusterParameterGroupNameMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBClusterParameterGroupNameMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyDBClusterParameterGroupMessage {
            /**
                * <p>The name of the DB cluster parameter group to modify.</p>
                */
            DBClusterParameterGroupName: string | undefined;
            /**
                * <p>A list of parameters in the DB cluster parameter group to modify.</p>
                *         <p>Valid Values (for the application method): <code>immediate | pending-reboot</code>
                *          </p>
                *         <note>
                *             <p>You can use the <code>immediate</code> value with dynamic parameters only. You can use the
                *               <code>pending-reboot</code> value for both dynamic and static parameters.</p>
                *             <p>When the application method is <code>immediate</code>, changes to dynamic parameters are applied immediately
                *           to the DB clusters associated with the parameter group. When the application method is <code>pending-reboot</code>,
                *           changes to dynamic and static parameters are applied after a reboot without failover to the DB clusters associated with the
                *           parameter group.</p>
                *         </note>
                */
            Parameters: Parameter[] | undefined;
    }
    export namespace ModifyDBClusterParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBClusterParameterGroupMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyDBClusterSnapshotAttributeMessage {
            /**
                * <p>The identifier for the DB cluster snapshot to modify the attributes for.</p>
                */
            DBClusterSnapshotIdentifier: string | undefined;
            /**
                * <p>The name of the DB cluster snapshot attribute to modify.</p>
                *         <p>To manage authorization for other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot,
                *             set this value to <code>restore</code>.</p>
                *         <note>
                *             <p>To view the list of attributes available to modify, use the
                *                 <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
                *         </note>
                */
            AttributeName: string | undefined;
            /**
                * <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p>
                *         <p>To authorize other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more Amazon Web Services account
                *             IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by
                *             any Amazon Web Services account. Do not add the <code>all</code> value for any
                *             manual DB cluster snapshots that contain private information that you don't want available
                *             to all Amazon Web Services accounts.</p>
                */
            ValuesToAdd?: string[];
            /**
                * <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p>
                *         <p>To remove authorization for other Amazon Web Services accounts to copy or restore a manual DB cluster snapshot, set this list to include
                *             one or more Amazon Web Services account
                *             identifiers, or <code>all</code> to remove authorization for any Amazon Web Services account to copy or
                *             restore the DB cluster snapshot. If you specify <code>all</code>, an Amazon Web Services account whose account ID is
                *             explicitly added to the <code>restore</code> attribute
                *             can still copy or restore a manual DB cluster snapshot.</p>
                */
            ValuesToRemove?: string[];
    }
    export namespace ModifyDBClusterSnapshotAttributeMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBClusterSnapshotAttributeMessage) => any;
    }
    export interface ModifyDBClusterSnapshotAttributeResult {
            /**
                * <p>Contains the results of a successful call to the <code>DescribeDBClusterSnapshotAttributes</code>
                *             API action.</p>
                *         <p>Manual DB cluster snapshot attributes are used to authorize other Amazon Web Services accounts
                *             to copy or restore a manual DB cluster snapshot. For more information, see the <code>ModifyDBClusterSnapshotAttribute</code>
                *             API action.</p>
                */
            DBClusterSnapshotAttributesResult?: DBClusterSnapshotAttributesResult;
    }
    export namespace ModifyDBClusterSnapshotAttributeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBClusterSnapshotAttributeResult) => any;
    }
    /**
        * <p>You have exceeded the maximum number of accounts that you can share a manual DB snapshot with.</p>
        */
    export class SharedSnapshotQuotaExceededFault extends __BaseException {
            readonly name: "SharedSnapshotQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SharedSnapshotQuotaExceededFault, __BaseException>);
    }
    /**
        * <p>The DB upgrade failed because a resource the DB depends on can't be
        *             modified.</p>
        */
    export class DBUpgradeDependencyFailureFault extends __BaseException {
            readonly name: "DBUpgradeDependencyFailureFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBUpgradeDependencyFailureFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface ModifyDBInstanceMessage {
            /**
                * <p>The DB instance identifier. This value is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing DBInstance.</p>
                *             </li>
                *          </ul>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>The new amount of storage in gibibytes (GiB) to allocate for the DB instance.</p>
                *         <p>For MariaDB, MySQL, Oracle, and PostgreSQL,
                *           the value supplied must be at least 10% greater than the current value.
                *           Values that are not at least 10% greater than the existing value are rounded up
                *           so that they are 10% greater than the current value.</p>
                *         <p>For the valid values for allocated storage for each engine,
                *           see <code>CreateDBInstance</code>.</p>
                */
            AllocatedStorage?: number;
            /**
                * <p>The new compute and memory capacity of the DB instance, for example db.m4.large.
                *           Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.
                *           For the full list of DB instance classes,
                *           and availability for your engine, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>If you modify the DB instance class, an outage occurs during the change.
                *         The change is applied during the next maintenance window,
                *         unless <code>ApplyImmediately</code> is enabled for this request.</p>
                *         <p>This setting doesn't apply to RDS Custom for Oracle.</p>
                *         <p>Default: Uses existing setting</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>The new DB subnet group for the DB instance.
                *           You can use this parameter to move your DB instance to a different VPC.
                *
                *
                *           If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC.
                *           For more information, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Working with a DB instance in a VPC</a>
                *           in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>Changing the subnet group causes an outage during the change.
                *         The change is applied during the next maintenance window,
                *         unless you enable <code>ApplyImmediately</code>.</p>
                *         <p>This parameter doesn't apply to RDS Custom.</p>
                *         <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
                *         <p>Example: <code>mydbsubnetgroup</code>
                *          </p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't
                *           result in an outage and the change is asynchronously applied as soon as possible.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match existing DBSecurityGroups.</p>
                *             </li>
                *          </ul>
                */
            DBSecurityGroups?: string[];
            /**
                * <p>A list of Amazon EC2 VPC security groups to authorize on this DB instance. This change is
                *           asynchronously applied as soon as possible.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. The associated list of EC2 VPC security groups is managed by
                *           the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match existing VpcSecurityGroupIds.</p>
                *             </li>
                *          </ul>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>A value that indicates whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible,
                *           regardless of the <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is disabled.</p>
                *         <p>If this parameter is disabled, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage
                *         and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot. Review the table of parameters in
                *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a> in the
                *         <i>Amazon RDS User Guide</i> to see the impact of enabling or disabling <code>ApplyImmediately</code> for each modified parameter and to
                *         determine when the changes are applied.</p>
                */
            ApplyImmediately?: boolean;
            /**
                * <p>The new password for the master user. The password can include any printable ASCII
                *           character except "/", """, or "@".</p>
                *         <p>Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
                *         Between the time of the request and the completion of the request,
                *         the <code>MasterUserPassword</code> element exists in the
                *           <code>PendingModifiedValues</code> element of the operation response.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. The password for the master user is managed by the DB cluster. For
                *             more information, see <code>ModifyDBCluster</code>.</p>
                *         <p>Default: Uses existing setting</p>
                *         <p>
                *             <b>MariaDB</b>
                *          </p>
                *         <p>Constraints: Must contain from 8 to 41 characters.</p>
                *         <p>
                *             <b>Microsoft SQL Server</b>
                *          </p>
                *         <p>Constraints: Must contain from 8 to 128 characters.</p>
                *         <p>
                *             <b>MySQL</b>
                *          </p>
                *         <p>Constraints: Must contain from 8 to 41 characters.</p>
                *         <p>
                *             <b>Oracle</b>
                *          </p>
                *         <p>Constraints: Must contain from 8 to 30 characters.</p>
                *         <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *         <p>Constraints: Must contain from 8 to 128 characters.</p>
                *         <note>
                *             <p>Amazon RDS API actions never return the password,
                *               so this action provides a way to regain access to a primary instance user if the password is lost.
                *               This includes restoring privileges that might have been accidentally revoked.</p>
                *         </note>
                */
            MasterUserPassword?: string;
            /**
                * <p>The name of the DB parameter group to apply to the DB instance.</p>
                *         <p>Changing this setting doesn't result in an outage. The parameter group name itself is changed
                *           immediately, but the actual parameter changes are not applied until you reboot the
                *           instance without failover. In this case, the DB instance isn't rebooted automatically, and the
                *           parameter changes aren't applied during the next maintenance window. However, if you modify
                *           dynamic parameters in the newly associated DB parameter group, these changes are applied
                *           immediately without a reboot.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Default: Uses existing setting</p>
                *         <p>Constraints: The DB parameter group must be in the same DB parameter group family as the DB instance.</p>
                */
            DBParameterGroupName?: string;
            /**
                * <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p>
                *         <note>
                *             <p>Enabling and disabling backups can result in a brief I/O suspension that lasts from a few seconds to a few minutes, depending on the size and class of your DB instance.</p>
                *         </note>
                *         <p>These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled
                *             for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously
                *             applied as soon as possible.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. The retention period for automated backups is managed by the DB
                *             cluster. For more information, see <code>ModifyDBCluster</code>.</p>
                *         <p>Default: Uses existing setting</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>It must be a value from 0 to 35. It can't be set to 0 if the DB instance is a source to
                *               read replicas. It can't be set to 0 or 35 for an RDS Custom for Oracle DB instance.</p>
                *             </li>
                *             <li>
                *                 <p>It can be specified for a MySQL read replica only if the source is running MySQL 5.6 or
                *                     later.</p>
                *             </li>
                *             <li>
                *                 <p>It can be specified for a PostgreSQL read replica only if the source is running PostgreSQL
                *                     9.3.5.</p>
                *             </li>
                *          </ul>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>The daily time range during which automated backups are created
                *         if automated backups are enabled,
                *         as determined by the <code>BackupRetentionPeriod</code> parameter.
                *         Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
                *         The default is a 30-minute window selected at random from an
                *         8-hour block of time for each Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. The daily time range for creating automated backups is managed by
                *             the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be in the format hh24:mi-hh24:mi</p>
                *             </li>
                *             <li>
                *                 <p>Must be in Universal Time Coordinated (UTC)</p>
                *             </li>
                *             <li>
                *                 <p>Must not conflict with the preferred maintenance window</p>
                *             </li>
                *             <li>
                *                 <p>Must be at least 30 minutes</p>
                *             </li>
                *          </ul>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>The weekly time range (in UTC) during which system maintenance can occur, which
                *             might result in an outage. Changing this parameter doesn't result in an outage, except
                *             in the following situation, and the change is asynchronously applied as soon as
                *             possible. If there are pending actions that cause a reboot, and the maintenance window
                *             is changed to include the current time, then changing this parameter will cause a reboot
                *             of the DB instance. If moving this window to the current time, there must be at least 30
                *             minutes between the current time and end of the window to ensure pending changes are
                *             applied.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>Default: Uses existing setting</p>
                *         <p>Format: ddd:hh24:mi-ddd:hh24:mi</p>
                *         <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p>
                *         <p>Constraints: Must be at least 30 minutes</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>A value that indicates whether the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result
                *           in an outage. The change is applied during the next maintenance window unless the <code>ApplyImmediately</code>
                *           parameter is enabled for this request.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>The version number of the database engine to upgrade to.
                *     Changing this parameter results in an outage and the change
                *     is applied during the next maintenance window
                *     unless the <code>ApplyImmediately</code> parameter is enabled for this request.</p>
                *         <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a
                *             new DB parameter group in the DB parameter group family for the new engine version must
                *             be specified. The new DB parameter group can be the default for that DB parameter group
                *             family.</p>
                *         <p>If you specify only a major version, Amazon RDS will update the DB instance to the
                *           default minor version if the current minor version is lower.
                *           For information about valid engine versions, see <code>CreateDBInstance</code>,
                *           or call <code>DescribeDBEngineVersions</code>.</p>
                *         <p>In RDS Custom for Oracle, this parameter is supported for read replicas only if they are in the
                *           <code>PATCH_DB_FAILURE</code> lifecycle.</p>
                */
            EngineVersion?: string;
            /**
                * <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't
                *           result in an outage and the change is asynchronously applied as soon as possible.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Constraints: Major version upgrades must be allowed when specifying a value
                *           for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
                */
            AllowMajorVersionUpgrade?: boolean;
            /**
                * <p>A value that indicates whether minor version upgrades are applied automatically to the DB instance
                *           during the maintenance window. An outage occurs when all the following conditions are met:</p>
                *         <ul>
                *             <li>
                *                 <p>The automatic upgrade is enabled for the maintenance window.</p>
                *             </li>
                *             <li>
                *                 <p>A newer minor version is available.</p>
                *             </li>
                *             <li>
                *                 <p>RDS has enabled automatic patching for the engine version.</p>
                *             </li>
                *          </ul>
                *         <p>If any of the preceding conditions isn't met, RDS applies the change as soon as possible and
                *       doesn't cause an outage.</p>
                *         <p>For an RDS Custom DB instance, set <code>AutoMinorVersionUpgrade</code>
                *           to <code>false</code>. Otherwise, the operation returns an error.</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>The license model for the DB instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> |
                *             <code>general-public-license</code>
                *          </p>
                */
            LicenseModel?: string;
            /**
                * <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance.</p>
                *         <p>Changing this setting doesn't result in an outage and
                *             the change is applied during the next maintenance window
                *             unless the <code>ApplyImmediately</code> parameter is enabled for this request.
                *           If you are migrating from Provisioned IOPS to standard storage, set this value to 0.
                *           The DB instance will require a reboot for the change in storage type to take effect.</p>
                *         <p>If you choose to migrate your DB instance from using standard storage to using
                *             Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process
                *             can take time. The duration of the migration depends on several factors such as database
                *             load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS
                *             provisioned (if any), and the number of prior scale storage operations. Typical
                *             migration times are under 24 hours, but the process can take up to several days in some
                *             cases. During the migration, the DB instance is available for use, but might experience
                *             performance degradation. While the migration takes place, nightly backups for the
                *             instance are suspended. No other Amazon RDS operations can take place for the instance,
                *             including modifying the instance, rebooting the instance, deleting the instance,
                *             creating a read replica for the instance, and creating a DB snapshot of the instance.</p>
                *         <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL,
                *           the value supplied must be at least 10% greater than the current value.
                *           Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value.</p>
                *         <p>Default: Uses existing setting</p>
                */
            Iops?: number;
            /**
                * <p>A value that indicates the DB instance should be associated with the specified option group.</p>
                *         <p>Changing this parameter doesn't result in an outage, with one exception. If the parameter change results
                *           in an option group that enables OEM, it can cause a brief period, lasting less than a second, during which
                *           new connections are rejected but existing connections aren't interrupted.</p>
                *         <p>The change is applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter
                *           is enabled for this request.</p>
                *         <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed
                *           from an option group, and that option group can't be removed from a DB instance after
                *           it is associated with a DB instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance
                *           identifier, an instance reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur
                *           during the next maintenance window if you disable Apply Immediately. This value is stored as a lowercase string.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>mydbinstance</code>
                *          </p>
                */
            NewDBInstanceIdentifier?: string;
            /**
                * <p>Specifies the storage type to be associated with the DB instance.</p>
                *         <p>If you specify Provisioned IOPS (<code>io1</code>),
                *           you must also include a value for the <code>Iops</code> parameter.</p>
                *         <p>If you choose to migrate your DB instance from using standard storage to using
                *             Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process
                *             can take time. The duration of the migration depends on several factors such as database
                *             load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS
                *             provisioned (if any), and the number of prior scale storage operations. Typical
                *             migration times are under 24 hours, but the process can take up to several days in some
                *             cases. During the migration, the DB instance is available for use, but might experience
                *             performance degradation. While the migration takes place, nightly backups for the
                *             instance are suspended. No other Amazon RDS operations can take place for the instance,
                *             including modifying the instance, rebooting the instance, deleting the instance,
                *             creating a read replica for the instance, and creating a DB snapshot of the instance.</p>
                *         <p>Valid values: <code>standard | gp2 | io1</code>
                *          </p>
                *         <p>Default: <code>io1</code> if the <code>Iops</code> parameter
                *           is specified, otherwise <code>gp2</code>
                *          </p>
                */
            StorageType?: string;
            /**
                * <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            TdeCredentialArn?: string;
            /**
                * <p>The password for the given ARN from the key store in order to access the device.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            TdeCredentialPassword?: string;
            /**
                * <p>Specifies the certificate to associate with the DB instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            CACertificateIdentifier?: string;
            /**
                * <p>The Active Directory directory ID to move the DB instance to.
                *           Specify <code>none</code> to remove the instance from its current domain.
                *           You must create the domain before this operation. Currently, you can create only MySQL, Microsoft SQL
                *           Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
                *           Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            Domain?: string;
            /**
                * <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this
                *           value for an Aurora DB instance has no effect on the DB cluster setting. For more
                *           information, see <code>ModifyDBCluster</code>.</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected
                *           for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0, which is the default.</p>
                *         <p>If <code>MonitoringRoleArn</code> is specified, set <code>MonitoringInterval</code> to a value other than 0.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code>
                *          </p>
                */
            MonitoringInterval?: number;
            /**
                * <p>The port number on which the database accepts connections.</p>
                *         <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values
                *           specified for options in the option group for the DB instance.</p>
                *         <p>If you change the <code>DBPortNumber</code> value, your database restarts regardless of
                *           the value of the <code>ApplyImmediately</code> parameter.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>
                *             <b>MySQL</b>
                *          </p>
                *         <p>Default: <code>3306</code>
                *          </p>
                *         <p>Valid values: <code>1150-65535</code>
                *          </p>
                *         <p>
                *             <b>MariaDB</b>
                *          </p>
                *         <p>Default: <code>3306</code>
                *          </p>
                *         <p>Valid values: <code>1150-65535</code>
                *          </p>
                *         <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *         <p>Default: <code>5432</code>
                *          </p>
                *         <p>Valid values: <code>1150-65535</code>
                *          </p>
                *         <p>Type: Integer</p>
                *         <p>
                *             <b>Oracle</b>
                *          </p>
                *         <p>Default: <code>1521</code>
                *          </p>
                *         <p>Valid values: <code>1150-65535</code>
                *          </p>
                *         <p>
                *             <b>SQL Server</b>
                *          </p>
                *         <p>Default: <code>1433</code>
                *          </p>
                *         <p>Valid values: <code>1150-65535</code> except <code>1234</code>, <code>1434</code>,
                *                 <code>3260</code>, <code>3343</code>, <code>3389</code>, <code>47001</code>, and
                *                 <code>49152-49156</code>.</p>
                *         <p>
                *             <b>Amazon Aurora</b>
                *          </p>
                *         <p>Default: <code>3306</code>
                *          </p>
                *         <p>Valid values: <code>1150-65535</code>
                *          </p>
                */
            DBPortNumber?: number;
            /**
                * <p>A value that indicates whether the DB instance is publicly accessible.</p>
                *         <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint
                *           resolves to the private IP address from within the DB cluster's virtual private cloud
                *           (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access
                *           to the DB cluster is ultimately controlled by the security group it uses. That public
                *           access isn't permitted if the security group assigned to the DB cluster doesn't permit
                *           it.</p>
                *         <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
                *         <p>
                *             <code>PubliclyAccessible</code> only applies to DB instances in a VPC. The DB instance must be part of a
                *           public subnet and <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible.</p>
                *         <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless
                *       of the value of the <code>ApplyImmediately</code> parameter.</p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For
                *       example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role,
                *       see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To
                *           create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>If <code>MonitoringInterval</code> is set to a value other than 0, supply a <code>MonitoringRoleArn</code>
                *           value.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            MonitoringRoleArn?: string;
            /**
                * <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            DomainIAMRoleName?: string;
            /**
                * <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance
                *       after a failure of the existing primary instance. For more information,
                *       see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance">
                *           Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Default: 1</p>
                *         <p>Valid Values: 0 - 15</p>
                */
            PromotionTier?: number;
            /**
                * <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management
                *             (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
                *         <p>This setting doesn't apply to Amazon Aurora. Mapping Amazon Web Services IAM accounts to database accounts is managed by the DB
                *           cluster.</p>
                *         <p>For more information about IAM database authentication, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
                *               IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            EnableIAMDatabaseAuthentication?: boolean;
            /**
                * <p>A value that indicates whether to enable Performance Insights for the DB instance.</p>
                *         <p>For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide.</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            EnablePerformanceInsights?: boolean;
            /**
                * <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                *         <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS
                *             uses your default KMS key. There is a default KMS key for your Amazon Web Services account.
                *             Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            PerformanceInsightsKMSKeyId?: string;
            /**
                * <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            PerformanceInsightsRetentionPeriod?: number;
            /**
                * <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a
                *             specific DB instance.</p>
                *         <p>A change to the <code>CloudwatchLogsExportConfiguration</code> parameter is always applied to the DB instance
                *             immediately. Therefore, the <code>ApplyImmediately</code> parameter has no effect.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            CloudwatchLogsExportConfiguration?: CloudwatchLogsExportConfiguration;
            /**
                * <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            ProcessorFeatures?: ProcessorFeature[];
            /**
                * <p>A value that indicates whether the DB instance class of the DB instance uses its default
                *             processor features.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            UseDefaultProcessorFeatures?: boolean;
            /**
                * <p>A value that indicates whether the DB instance has deletion protection enabled.
                *             The database can't be deleted when deletion protection is enabled. By default,
                *             deletion protection isn't enabled. For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
                *                 Deleting a DB Instance</a>.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
                *         <p>For more information about this setting, including limitations that apply to it, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
                *                 Managing capacity automatically with Amazon RDS storage autoscaling</a>
                *             in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            MaxAllocatedStorage?: number;
            /**
                * <p>A value that indicates whether the DB instance is restarted when you rotate your
                *             SSL/TLS certificate.</p>
                *         <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate
                *             is not updated until the DB instance is restarted.</p>
                *         <important>
                *             <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p>
                *         </important>
                *         <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your
                *             DB engine to rotate your SSL/TLS certificate:</p>
                *         <ul>
                *             <li>
                *                 <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see
                *                     <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html">
                *                         Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see
                *                     <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html">
                *                         Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *             </li>
                *          </ul>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            CertificateRotationRestart?: boolean;
            /**
                * <p>A value that sets the open mode of a replica database to either mounted or read-only.</p>
                *         <note>
                *             <p>Currently, this parameter is only supported for Oracle DB instances.</p>
                *         </note>
                *         <p>Mounted DB replicas are included in Oracle Enterprise Edition. The main use case for
                *             mounted replicas is cross-Region disaster recovery. The primary database doesn't use
                *             Active Data Guard to transmit information to the mounted replica. Because it doesn't
                *             accept user connections, a mounted replica can't serve a read-only workload.
                *             For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a>
                *             in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            ReplicaMode?: ReplicaMode | string;
            /**
                * <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
                *         <p>A <i>CoIP</i> provides local or external connectivity to resources in
                *             your Outpost subnets through your on-premises network. For some use cases, a CoIP can
                *             provide lower latency for connections to the DB instance from outside of its virtual
                *             private cloud (VPC) on your local network.</p>
                *         <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a>
                *             in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a>
                *             in the <i>Amazon Web Services Outposts User Guide</i>.</p>
                */
            EnableCustomerOwnedIp?: boolean;
            /**
                * <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            AwsBackupRecoveryPointArn?: string;
            /**
                * <p>The automation mode of the RDS Custom DB instance: <code>full</code> or <code>all paused</code>.
                *             If <code>full</code>, the DB instance automates monitoring and instance recovery. If
                *             <code>all paused</code>, the instance pauses automation for the duration set by
                *             <code>ResumeFullAutomationModeMinutes</code>.</p>
                */
            AutomationMode?: AutomationMode | string;
            /**
                * <p>The number of minutes to pause the automation. When the time period ends, RDS Custom resumes
                *             full automation. The minimum value is <code>60</code> (default). The maximum value is <code>1,440</code>.</p>
                */
            ResumeFullAutomationModeMinutes?: number;
            /**
                * <p>The network type of the DB instance.</p>
                *         <p>Valid values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>IPV4</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DUAL</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance.
                *             A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6
                *             protocols (<code>DUAL</code>).</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
                *             Working with a DB instance in a VPC</a> in the
                *             <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            NetworkType?: string;
    }
    export namespace ModifyDBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBInstanceMessage) => any;
    }
    export interface ModifyDBInstanceResult {
            /**
                * <p>Contains the details of an Amazon RDS DB instance.</p>
                *         <p>This data type is used as a response element in the operations <code>CreateDBInstance</code>,
                *           <code>CreateDBInstanceReadReplica</code>, <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>,
                *           <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>, <code>RebootDBInstance</code>,
                *           <code>RestoreDBInstanceFromDBSnapshot</code>, <code>RestoreDBInstanceFromS3</code>, <code>RestoreDBInstanceToPointInTime</code>,
                *           <code>StartDBInstance</code>, and <code>StopDBInstance</code>.</p>
                */
            DBInstance?: DBInstance;
    }
    export namespace ModifyDBInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBInstanceResult) => any;
    }
    /**
        * <p>Contains the result of a successful invocation of the
        *         <code>ModifyDBParameterGroup</code> or <code>ResetDBParameterGroup</code> action.</p>
        */
    export interface DBParameterGroupNameMessage {
            /**
                * <p>The name of the DB parameter group.</p>
                */
            DBParameterGroupName?: string;
    }
    export namespace DBParameterGroupNameMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DBParameterGroupNameMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyDBParameterGroupMessage {
            /**
                * <p>The name of the DB parameter group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p>
                *             </li>
                *          </ul>
                */
            DBParameterGroupName: string | undefined;
            /**
                * <p>An array of parameter names, values, and the application methods for the parameter update. At least one parameter name, value, and
                *           application method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p>
                *         <p>Valid Values (for the application method): <code>immediate | pending-reboot</code>
                *          </p>
                *         <p>You can use the <code>immediate</code> value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic
                *           and static parameters.</p>
                *         <p>When the application method is <code>immediate</code>, changes to dynamic parameters are applied immediately to the DB instances associated with
                *           the parameter group.</p>
                *         <p>When the application method is <code>pending-reboot</code>, changes to dynamic and static parameters are applied after a reboot without failover
                *           to the DB instances associated with the parameter group.</p>
                *         <note>
                *             <p>You can't use <code>pending-reboot</code> with dynamic parameters on RDS for SQL Server DB instances. Use <code>immediate</code>.</p>
                *         </note>
                *         <p>For more information on modifying DB parameters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithParamGroups.html">Working
                *           with DB parameter groups</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            Parameters: Parameter[] | undefined;
    }
    export namespace ModifyDBParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBParameterGroupMessage) => any;
    }
    export interface ModifyDBProxyRequest {
            /**
                * <p>The identifier for the <code>DBProxy</code> to modify.</p>
                */
            DBProxyName: string | undefined;
            /**
                * <p>The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
                */
            NewDBProxyName?: string;
            /**
                * <p>The new authentication settings for the <code>DBProxy</code>.</p>
                */
            Auth?: UserAuthConfig[];
            /**
                * <p>Whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
                *         By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't
                *         use TLS.</p>
                */
            RequireTLS?: boolean;
            /**
                * <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this
                *         value higher or lower than the connection timeout limit for the associated database.</p>
                */
            IdleClientTimeout?: number;
            /**
                * <p>Whether the proxy includes detailed information about SQL statements in its logs.
                *         This information helps you to debug issues involving SQL behavior or the performance
                *         and scalability of the proxy connections. The debug information includes the text of
                *         SQL statements that you submit through the proxy. Thus, only enable this setting
                *         when needed for debugging, and only when you have security measures in place to
                *         safeguard any sensitive information that appears in the logs.</p>
                */
            DebugLogging?: boolean;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.</p>
                */
            RoleArn?: string;
            /**
                * <p>The new list of security groups for the <code>DBProxy</code>.</p>
                */
            SecurityGroups?: string[];
    }
    export namespace ModifyDBProxyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBProxyRequest) => any;
    }
    export interface ModifyDBProxyResponse {
            /**
                * <p>The <code>DBProxy</code> object representing the new settings for the proxy.</p>
                */
            DBProxy?: DBProxy;
    }
    export namespace ModifyDBProxyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBProxyResponse) => any;
    }
    export interface ModifyDBProxyEndpointRequest {
            /**
                * <p>The name of the DB proxy sociated with the DB proxy endpoint that you want to modify.</p>
                */
            DBProxyEndpointName: string | undefined;
            /**
                * <p>The new identifier for the <code>DBProxyEndpoint</code>. An identifier must
                *         begin with a letter and must contain only ASCII letters, digits, and hyphens; it
                *         can't end with a hyphen or contain two consecutive hyphens.</p>
                */
            NewDBProxyEndpointName?: string;
            /**
                * <p>The VPC security group IDs for the DB proxy endpoint. When the DB proxy endpoint
                *         uses a different VPC than the original proxy, you also specify a different
                *         set of security group IDs than for the original proxy.</p>
                */
            VpcSecurityGroupIds?: string[];
    }
    export namespace ModifyDBProxyEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBProxyEndpointRequest) => any;
    }
    export interface ModifyDBProxyEndpointResponse {
            /**
                * <p>The <code>DBProxyEndpoint</code> object representing the new settings for the DB proxy endpoint.</p>
                */
            DBProxyEndpoint?: DBProxyEndpoint;
    }
    export namespace ModifyDBProxyEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBProxyEndpointResponse) => any;
    }
    /**
        * <p>Specifies the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTargetGroup</code>.</p>
        */
    export interface ConnectionPoolConfiguration {
            /**
                * <p>The maximum size of the connection pool for each target in a target group. The value is expressed as a percentage of the
                *         <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p>
                *         <p>Default: 100</p>
                *         <p>Constraints: between 1 and 100</p>
                */
            MaxConnectionsPercent?: number;
            /**
                * <p>Controls how actively the proxy closes idle database connections in the connection pool.
                *         The value is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.
                *         With a high value, the proxy leaves a high percentage of idle database connections open. A low value causes the proxy to close more idle connections and return them to the database.</p>
                *         <p>Default: 50</p>
                *         <p>Constraints: between 0 and <code>MaxConnectionsPercent</code>
                *          </p>
                */
            MaxIdleConnectionsPercent?: number;
            /**
                * <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the
                *         proxy has opened its maximum number of connections and all connections are busy with client sessions.</p>
                *         <p>Default: 120</p>
                *         <p>Constraints: between 1 and 3600, or 0 representing unlimited</p>
                */
            ConnectionBorrowTimeout?: number;
            /**
                * <p>Each item in the list represents a class of SQL operations that normally cause all later statements
                *         in a session using a proxy to be pinned to the same underlying database connection. Including an item
                *         in the list exempts that class of SQL operations from the pinning behavior.</p>
                *         <p>Default: no session pinning filters</p>
                */
            SessionPinningFilters?: string[];
            /**
                * <p>One or more SQL statements for the proxy to run when opening each new database connection.
                *         Typically used with <code>SET</code> statements to make sure that each connection has identical
                *         settings such as time zone and character set. For multiple statements, use semicolons as the separator.
                *         You can also include multiple variables in a single <code>SET</code> statement, such as
                *         <code>SET x=1, y=2</code>.</p>
                *         <p>Default: no initialization query</p>
                */
            InitQuery?: string;
    }
    export namespace ConnectionPoolConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionPoolConfiguration) => any;
    }
    export interface ModifyDBProxyTargetGroupRequest {
            /**
                * <p>The name of the new target group to assign to the proxy.</p>
                */
            TargetGroupName: string | undefined;
            /**
                * <p>The name of the new proxy to which to assign the target group.</p>
                */
            DBProxyName: string | undefined;
            /**
                * <p>The settings that determine the size and behavior of the connection pool for the target group.</p>
                */
            ConnectionPoolConfig?: ConnectionPoolConfiguration;
            /**
                * <p>The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
                */
            NewName?: string;
    }
    export namespace ModifyDBProxyTargetGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBProxyTargetGroupRequest) => any;
    }
    export interface ModifyDBProxyTargetGroupResponse {
            /**
                * <p>The settings of the modified <code>DBProxyTarget</code>.</p>
                */
            DBProxyTargetGroup?: DBProxyTargetGroup;
    }
    export namespace ModifyDBProxyTargetGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBProxyTargetGroupResponse) => any;
    }
    export interface ModifyDBSnapshotMessage {
            /**
                * <p>The identifier of the DB snapshot to modify.</p>
                */
            DBSnapshotIdentifier: string | undefined;
            /**
                * <p>The engine version to upgrade the DB snapshot to.</p>
                *         <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot.</p>
                *         <p>
                *             <b>MySQL</b>
                *          </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>5.5.46</code> (supported for 5.1 DB snapshots)</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>Oracle</b>
                *          </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>12.1.0.2.v8</code>  (supported for 12.1.0.1 DB snapshots)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p>
                *             </li>
                *          </ul>
                *         <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *         <p>For the list of engine versions that are available for upgrading a DB snapshot, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion">
                *               Upgrading the PostgreSQL DB Engine for Amazon RDS</a>.</p>
                */
            EngineVersion?: string;
            /**
                * <p>The option group to identify with the upgraded DB snapshot.</p>
                *         <p>You can specify this parameter when you upgrade an Oracle DB snapshot.
                *             The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance.
                *             For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option group considerations</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            OptionGroupName?: string;
    }
    export namespace ModifyDBSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBSnapshotMessage) => any;
    }
    export interface ModifyDBSnapshotResult {
            /**
                * <p>Contains the details of an Amazon RDS DB snapshot.</p>
                *         <p>This data type is used as a response element
                *           in the <code>DescribeDBSnapshots</code> action.</p>
                */
            DBSnapshot?: DBSnapshot;
    }
    export namespace ModifyDBSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBSnapshotResult) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyDBSnapshotAttributeMessage {
            /**
                * <p>The identifier for the DB snapshot to modify the attributes for.</p>
                */
            DBSnapshotIdentifier: string | undefined;
            /**
                * <p>The name of the DB snapshot attribute to modify.</p>
                *         <p>To manage authorization for other Amazon Web Services accounts to copy or restore a manual DB snapshot,
                *       set this value to <code>restore</code>.</p>
                *         <note>
                *             <p>To view the list of attributes available to modify, use the
                *               <a>DescribeDBSnapshotAttributes</a> API action.</p>
                *         </note>
                */
            AttributeName: string | undefined;
            /**
                * <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p>
                *         <p>To authorize other Amazon Web Services accounts to copy or restore a manual snapshot, set this list to include one or more Amazon Web Services account
                *       IDs, or <code>all</code> to make the manual DB snapshot restorable by
                *       any Amazon Web Services account. Do not add the <code>all</code> value for any
                *       manual DB snapshots that contain private information that you don't want available
                *       to all Amazon Web Services accounts.</p>
                */
            ValuesToAdd?: string[];
            /**
                * <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p>
                *         <p>To remove authorization for other Amazon Web Services accounts to copy or restore a manual snapshot, set this list to include
                *       one or more Amazon Web Services account
                *       identifiers, or <code>all</code> to remove authorization for any Amazon Web Services account to copy or
                *       restore the DB snapshot. If you specify <code>all</code>, an Amazon Web Services account whose
                *       account ID is explicitly added to the <code>restore</code> attribute
                *       can still copy or restore the manual DB snapshot.</p>
                */
            ValuesToRemove?: string[];
    }
    export namespace ModifyDBSnapshotAttributeMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBSnapshotAttributeMessage) => any;
    }
    export interface ModifyDBSnapshotAttributeResult {
            /**
                * <p>Contains the results of a successful call to the <code>DescribeDBSnapshotAttributes</code>
                *     API action.</p>
                *         <p>Manual DB snapshot attributes are used to authorize other Amazon Web Services accounts
                *       to copy or restore a manual DB snapshot. For more information, see the <code>ModifyDBSnapshotAttribute</code>
                *       API action.</p>
                */
            DBSnapshotAttributesResult?: DBSnapshotAttributesResult;
    }
    export namespace ModifyDBSnapshotAttributeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBSnapshotAttributeResult) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyDBSubnetGroupMessage {
            /**
                * <p>The name for the DB subnet group. This value is stored as a lowercase string.
                *           You can't modify the default subnet group.</p>
                *         <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p>
                *         <p>Example: <code>mydbsubnetgroup</code>
                *          </p>
                */
            DBSubnetGroupName: string | undefined;
            /**
                * <p>The description for the DB subnet group.</p>
                */
            DBSubnetGroupDescription?: string;
            /**
                * <p>The EC2 subnet IDs for the DB subnet group.</p>
                */
            SubnetIds: string[] | undefined;
    }
    export namespace ModifyDBSubnetGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBSubnetGroupMessage) => any;
    }
    export interface ModifyDBSubnetGroupResult {
            /**
                * <p>Contains the details of an Amazon RDS DB subnet group.</p>
                *         <p>This data type is used as a response element
                *           in the <code>DescribeDBSubnetGroups</code> action.</p>
                */
            DBSubnetGroup?: DBSubnetGroup;
    }
    export namespace ModifyDBSubnetGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDBSubnetGroupResult) => any;
    }
    /**
        * <p>The DB subnet is already in use in the Availability Zone.</p>
        */
    export class SubnetAlreadyInUse extends __BaseException {
            readonly name: "SubnetAlreadyInUse";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SubnetAlreadyInUse, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface ModifyEventSubscriptionMessage {
            /**
                * <p>The name of the RDS event notification subscription.</p>
                */
            SubscriptionName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>
                */
            SnsTopicArn?: string;
            /**
                * <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. For RDS Proxy events, specify <code>db-proxy</code>. If this value isn't specified, all events are returned.</p>
                *         <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code> | <code>db-proxy</code>
                *          </p>
                */
            SourceType?: string;
            /**
                * <p>A list of event categories for a source type (<code>SourceType</code>) that you want to subscribe to.
                *             You can see a list of the categories for a given source type
                *             in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> in the <i>Amazon RDS User Guide</i>
                *             or by using the <code>DescribeEventCategories</code> operation.</p>
                */
            EventCategories?: string[];
            /**
                * <p>A value that indicates whether to activate the subscription.</p>
                */
            Enabled?: boolean;
    }
    export namespace ModifyEventSubscriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyEventSubscriptionMessage) => any;
    }
    export interface ModifyEventSubscriptionResult {
            /**
                * <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
                */
            EventSubscription?: EventSubscription;
    }
    export namespace ModifyEventSubscriptionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyEventSubscriptionResult) => any;
    }
    export interface ModifyGlobalClusterMessage {
            /**
                * <p>The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing global database cluster.</p>
                *             </li>
                *          </ul>
                */
            GlobalClusterIdentifier?: string;
            /**
                * <p>The new cluster identifier for the global database cluster when modifying a global database cluster.
                *         This value is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
                *             </li>
                *             <li>
                *                 <p>The first character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster2</code>
                *          </p>
                */
            NewGlobalClusterIdentifier?: string;
            /**
                * <p>Indicates if the global database cluster has deletion protection enabled. The global database cluster
                *         can't be deleted when deletion protection is enabled.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The version number of the database engine to which you want to upgrade.
                *           Changing this parameter results in an outage. The change is applied during
                *           the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p>
                *         <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'</code>
                *          </p>
                *         <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora), use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora-mysql --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'</code>
                *          </p>
                *         <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'</code>
                *          </p>
                */
            EngineVersion?: string;
            /**
                * <p>A value that indicates whether major version upgrades are allowed.</p>
                *         <p>Constraints: You must allow major version upgrades when specifying a value for the
                *                 <code>EngineVersion</code> parameter that is a different major version than the DB
                *             cluster's current version.</p>
                *         <p>If you upgrade the major version of a global database, the cluster and DB instance parameter
                *         groups are set to the default parameter groups for the new version. Apply any custom parameter
                *         groups after completing the upgrade.</p>
                */
            AllowMajorVersionUpgrade?: boolean;
    }
    export namespace ModifyGlobalClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyGlobalClusterMessage) => any;
    }
    export interface ModifyGlobalClusterResult {
            /**
                * <p>A data type representing an Aurora global database.</p>
                */
            GlobalCluster?: GlobalCluster;
    }
    export namespace ModifyGlobalClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyGlobalClusterResult) => any;
    }
    /**
        * <p>A list of all available options</p>
        */
    export interface OptionConfiguration {
            /**
                * <p>The configuration of options to include in a group.</p>
                */
            OptionName: string | undefined;
            /**
                * <p>The optional port for the option.</p>
                */
            Port?: number;
            /**
                * <p>The version for the option.</p>
                */
            OptionVersion?: string;
            /**
                * <p>A list of DBSecurityGroupMembership name strings used for this option.</p>
                */
            DBSecurityGroupMemberships?: string[];
            /**
                * <p>A list of VpcSecurityGroupMembership name strings used for this option.</p>
                */
            VpcSecurityGroupMemberships?: string[];
            /**
                * <p>The option settings to include in an option group.</p>
                */
            OptionSettings?: OptionSetting[];
    }
    export namespace OptionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OptionConfiguration) => any;
    }
    /**
        * <p></p>
        */
    export interface ModifyOptionGroupMessage {
            /**
                * <p>The name of the option group to be modified.</p>
                *         <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
                */
            OptionGroupName: string | undefined;
            /**
                * <p>Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.</p>
                */
            OptionsToInclude?: OptionConfiguration[];
            /**
                * <p>Options in this list are removed from the option group.</p>
                */
            OptionsToRemove?: string[];
            /**
                * <p>A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.</p>
                */
            ApplyImmediately?: boolean;
    }
    export namespace ModifyOptionGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyOptionGroupMessage) => any;
    }
    export interface ModifyOptionGroupResult {
            /**
                * <p></p>
                */
            OptionGroup?: OptionGroup;
    }
    export namespace ModifyOptionGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyOptionGroupResult) => any;
    }
    /**
        * <p></p>
        */
    export interface PromoteReadReplicaMessage {
            /**
                * <p>The DB instance identifier. This value is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing read replica DB instance.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>mydbinstance</code>
                *          </p>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p>
                *         <p>Default: 1</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be a value from 0 to 35.</p>
                *             </li>
                *             <li>
                *                 <p>Can't be set to 0 if the DB instance is a source to read replicas.</p>
                *             </li>
                *          </ul>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>The daily time range during which automated backups are created
                *         if automated backups are enabled,
                *         using the <code>BackupRetentionPeriod</code> parameter.</p>
                *         <p>The default is a 30-minute window selected at random from an
                *             8-hour block of time for each Amazon Web Services Region.
                *             To see the time blocks available, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html">
                *             Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Must be in Universal Coordinated Time (UTC).</p>
                *             </li>
                *             <li>
                *                 <p>Must not conflict with the preferred maintenance window.</p>
                *             </li>
                *             <li>
                *                 <p>Must be at least 30 minutes.</p>
                *             </li>
                *          </ul>
                */
            PreferredBackupWindow?: string;
    }
    export namespace PromoteReadReplicaMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PromoteReadReplicaMessage) => any;
    }
    export interface PromoteReadReplicaResult {
            /**
                * <p>Contains the details of an Amazon RDS DB instance.</p>
                *         <p>This data type is used as a response element in the operations <code>CreateDBInstance</code>,
                *           <code>CreateDBInstanceReadReplica</code>, <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>,
                *           <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>, <code>RebootDBInstance</code>,
                *           <code>RestoreDBInstanceFromDBSnapshot</code>, <code>RestoreDBInstanceFromS3</code>, <code>RestoreDBInstanceToPointInTime</code>,
                *           <code>StartDBInstance</code>, and <code>StopDBInstance</code>.</p>
                */
            DBInstance?: DBInstance;
    }
    export namespace PromoteReadReplicaResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PromoteReadReplicaResult) => any;
    }
    /**
        * <p></p>
        */
    export interface PromoteReadReplicaDBClusterMessage {
            /**
                * <p>The identifier of the DB cluster read replica to promote. This parameter isn't
                *             case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing DB cluster read replica.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster-replica1</code>
                *          </p>
                */
            DBClusterIdentifier: string | undefined;
    }
    export namespace PromoteReadReplicaDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PromoteReadReplicaDBClusterMessage) => any;
    }
    export interface PromoteReadReplicaDBClusterResult {
            /**
                * <p>Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
                *         <p>For an Amazon Aurora DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>PromoteReadReplicaDBCluster</code>,
                *           <code>RestoreDBClusterFromS3</code>, <code>RestoreDBClusterFromSnapshot</code>,
                *           <code>RestoreDBClusterToPointInTime</code>, <code>StartDBCluster</code>, and <code>StopDBCluster</code>.</p>
                *         <p>For a Multi-AZ DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>RebootDBCluster</code>,
                *           <code>RestoreDBClusterFromSnapshot</code>, and <code>RestoreDBClusterToPointInTime</code>.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
                *          </p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace PromoteReadReplicaDBClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PromoteReadReplicaDBClusterResult) => any;
    }
    /**
        * <p></p>
        */
    export interface PurchaseReservedDBInstancesOfferingMessage {
            /**
                * <p>The ID of the Reserved DB instance offering to purchase.</p>
                *         <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
                */
            ReservedDBInstancesOfferingId: string | undefined;
            /**
                * <p>Customer-specified identifier to track this reservation.</p>
                *         <p>Example: myreservationID</p>
                */
            ReservedDBInstanceId?: string;
            /**
                * <p>The number of instances to reserve.</p>
                *         <p>Default: <code>1</code>
                *          </p>
                */
            DBInstanceCount?: number;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
    }
    export namespace PurchaseReservedDBInstancesOfferingMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PurchaseReservedDBInstancesOfferingMessage) => any;
    }
    export interface PurchaseReservedDBInstancesOfferingResult {
            /**
                * <p>This data type is used as a response element in the
                *             <code>DescribeReservedDBInstances</code> and
                *             <code>PurchaseReservedDBInstancesOffering</code> actions.</p>
                */
            ReservedDBInstance?: ReservedDBInstance;
    }
    export namespace PurchaseReservedDBInstancesOfferingResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PurchaseReservedDBInstancesOfferingResult) => any;
    }
    /**
        * <p>User already has a reservation with the given identifier.</p>
        */
    export class ReservedDBInstanceAlreadyExistsFault extends __BaseException {
            readonly name: "ReservedDBInstanceAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReservedDBInstanceAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>Request would exceed the user's DB Instance quota.</p>
        */
    export class ReservedDBInstanceQuotaExceededFault extends __BaseException {
            readonly name: "ReservedDBInstanceQuotaExceededFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReservedDBInstanceQuotaExceededFault, __BaseException>);
    }
    export interface RebootDBClusterMessage {
            /**
                * <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing DBCluster.</p>
                *             </li>
                *          </ul>
                */
            DBClusterIdentifier: string | undefined;
    }
    export namespace RebootDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootDBClusterMessage) => any;
    }
    export interface RebootDBClusterResult {
            /**
                * <p>Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
                *         <p>For an Amazon Aurora DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>PromoteReadReplicaDBCluster</code>,
                *           <code>RestoreDBClusterFromS3</code>, <code>RestoreDBClusterFromSnapshot</code>,
                *           <code>RestoreDBClusterToPointInTime</code>, <code>StartDBCluster</code>, and <code>StopDBCluster</code>.</p>
                *         <p>For a Multi-AZ DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>RebootDBCluster</code>,
                *           <code>RestoreDBClusterFromSnapshot</code>, and <code>RestoreDBClusterToPointInTime</code>.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
                *          </p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace RebootDBClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootDBClusterResult) => any;
    }
    /**
        * <p></p>
        */
    export interface RebootDBInstanceMessage {
            /**
                * <p>The DB instance identifier. This parameter is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing DBInstance.</p>
                *             </li>
                *          </ul>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>A value that indicates whether the reboot is conducted through a Multi-AZ failover.</p>
                *         <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
                */
            ForceFailover?: boolean;
    }
    export namespace RebootDBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootDBInstanceMessage) => any;
    }
    export interface RebootDBInstanceResult {
            /**
                * <p>Contains the details of an Amazon RDS DB instance.</p>
                *         <p>This data type is used as a response element in the operations <code>CreateDBInstance</code>,
                *           <code>CreateDBInstanceReadReplica</code>, <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>,
                *           <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>, <code>RebootDBInstance</code>,
                *           <code>RestoreDBInstanceFromDBSnapshot</code>, <code>RestoreDBInstanceFromS3</code>, <code>RestoreDBInstanceToPointInTime</code>,
                *           <code>StartDBInstance</code>, and <code>StopDBInstance</code>.</p>
                */
            DBInstance?: DBInstance;
    }
    export namespace RebootDBInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootDBInstanceResult) => any;
    }
    /**
        * <p>The proxy is already associated with the specified RDS DB instance or Aurora DB cluster.</p>
        */
    export class DBProxyTargetAlreadyRegisteredFault extends __BaseException {
            readonly name: "DBProxyTargetAlreadyRegisteredFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBProxyTargetAlreadyRegisteredFault, __BaseException>);
    }
    /**
        * <p>The requested operation can't be performed because there aren't enough available IP addresses
        *            in the proxy's subnets. Add more CIDR blocks to the VPC or remove IP address that aren't required
        *            from the subnets.</p>
        */
    export class InsufficientAvailableIPsInSubnetFault extends __BaseException {
            readonly name: "InsufficientAvailableIPsInSubnetFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientAvailableIPsInSubnetFault, __BaseException>);
    }
    export interface RegisterDBProxyTargetsRequest {
            /**
                * <p>The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.</p>
                */
            DBProxyName: string | undefined;
            /**
                * <p>The identifier of the <code>DBProxyTargetGroup</code>.</p>
                */
            TargetGroupName?: string;
            /**
                * <p>One or more DB instance identifiers.</p>
                */
            DBInstanceIdentifiers?: string[];
            /**
                * <p>One or more DB cluster identifiers.</p>
                */
            DBClusterIdentifiers?: string[];
    }
    export namespace RegisterDBProxyTargetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterDBProxyTargetsRequest) => any;
    }
    export interface RegisterDBProxyTargetsResponse {
            /**
                * <p>One or more <code>DBProxyTarget</code> objects that are created when you register targets with a target group.</p>
                */
            DBProxyTargets?: DBProxyTarget[];
    }
    export namespace RegisterDBProxyTargetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterDBProxyTargetsResponse) => any;
    }
    export interface RemoveFromGlobalClusterMessage {
            /**
                * <p>The cluster identifier to detach from the Aurora global database cluster.</p>
                */
            GlobalClusterIdentifier?: string;
            /**
                * <p>The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster.</p>
                */
            DbClusterIdentifier?: string;
    }
    export namespace RemoveFromGlobalClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveFromGlobalClusterMessage) => any;
    }
    export interface RemoveFromGlobalClusterResult {
            /**
                * <p>A data type representing an Aurora global database.</p>
                */
            GlobalCluster?: GlobalCluster;
    }
    export namespace RemoveFromGlobalClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveFromGlobalClusterResult) => any;
    }
    /**
        * <p>The specified IAM role Amazon Resource Name (ARN) isn't associated with the specified DB cluster.</p>
        */
    export class DBClusterRoleNotFoundFault extends __BaseException {
            readonly name: "DBClusterRoleNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBClusterRoleNotFoundFault, __BaseException>);
    }
    export interface RemoveRoleFromDBClusterMessage {
            /**
                * <p>The name of the DB cluster to disassociate the IAM role from.</p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example
                *         <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The name of the feature for the DB cluster that the IAM role is to be disassociated from.
                *             For information about supported feature names, see <a>DBEngineVersion</a>.</p>
                */
            FeatureName?: string;
    }
    export namespace RemoveRoleFromDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveRoleFromDBClusterMessage) => any;
    }
    /**
        * <p>The specified <code>RoleArn</code> value doesn't match the specified feature for
        *             the DB instance.</p>
        */
    export class DBInstanceRoleNotFoundFault extends __BaseException {
            readonly name: "DBInstanceRoleNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DBInstanceRoleNotFoundFault, __BaseException>);
    }
    export interface RemoveRoleFromDBInstanceMessage {
            /**
                * <p>The name of the DB instance to disassociate the IAM role from.</p>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance,
                *             for example, <code>arn:aws:iam::123456789012:role/AccessRole</code>.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The name of the feature for the DB instance that the IAM role is to be disassociated from.
                *             For information about supported feature names, see <code>DBEngineVersion</code>.</p>
                */
            FeatureName: string | undefined;
    }
    export namespace RemoveRoleFromDBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveRoleFromDBInstanceMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface RemoveSourceIdentifierFromSubscriptionMessage {
            /**
                * <p>The name of the RDS event notification subscription you want to remove a source identifier from.</p>
                */
            SubscriptionName: string | undefined;
            /**
                * <p>The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b>
                *             for a DB instance or the name of a security group.</p>
                */
            SourceIdentifier: string | undefined;
    }
    export namespace RemoveSourceIdentifierFromSubscriptionMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveSourceIdentifierFromSubscriptionMessage) => any;
    }
    export interface RemoveSourceIdentifierFromSubscriptionResult {
            /**
                * <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
                */
            EventSubscription?: EventSubscription;
    }
    export namespace RemoveSourceIdentifierFromSubscriptionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveSourceIdentifierFromSubscriptionResult) => any;
    }
    /**
        * <p></p>
        */
    export interface RemoveTagsFromResourceMessage {
            /**
                * <p>The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about
                *             creating an ARN,
                *             see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
                *                 Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            ResourceName: string | undefined;
            /**
                * <p>The tag key (name) of the tag to be removed.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace RemoveTagsFromResourceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTagsFromResourceMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface ResetDBClusterParameterGroupMessage {
            /**
                * <p>The name of the DB cluster parameter group to reset.</p>
                */
            DBClusterParameterGroupName: string | undefined;
            /**
                * <p>A value that indicates whether to reset all parameters in the DB cluster parameter group
                *         to their default values. You can't use this parameter if there
                *         is a list of parameter names specified for the <code>Parameters</code> parameter.</p>
                */
            ResetAllParameters?: boolean;
            /**
                * <p>A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this
                *         parameter if the <code>ResetAllParameters</code> parameter is enabled.</p>
                */
            Parameters?: Parameter[];
    }
    export namespace ResetDBClusterParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResetDBClusterParameterGroupMessage) => any;
    }
    /**
        * <p></p>
        */
    export interface ResetDBParameterGroupMessage {
            /**
                * <p>The name of the DB parameter group.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the name of an existing <code>DBParameterGroup</code>.</p>
                *             </li>
                *          </ul>
                */
            DBParameterGroupName: string | undefined;
            /**
                * <p>A value that indicates whether to reset all parameters in the DB parameter group to default values.
                *           By default, all parameters in the DB parameter group are reset to default values.</p>
                */
            ResetAllParameters?: boolean;
            /**
                * <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code>
                *             name and <code>ResetAllParameters</code> parameters. To reset specific parameters,
                *             provide a list of the following: <code>ParameterName</code> and
                *             <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single
                *             request.</p>
                *         <p>
                *             <b>MySQL</b>
                *          </p>
                *         <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code>
                *          </p>
                *         <p>You can use the immediate value with dynamic parameters only. You can use
                *             the <code>pending-reboot</code> value for both dynamic and static parameters, and changes
                *             are applied when DB instance reboots.</p>
                *         <p>
                *             <b>MariaDB</b>
                *          </p>
                *         <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code>
                *          </p>
                *         <p>You can use the immediate value with dynamic parameters only. You can use
                *       the <code>pending-reboot</code> value for both dynamic and static parameters, and changes
                *       are applied when DB instance reboots.</p>
                *         <p>
                *             <b>Oracle</b>
                *          </p>
                *         <p>Valid Values (for Apply method): <code>pending-reboot</code>
                *          </p>
                */
            Parameters?: Parameter[];
    }
    export namespace ResetDBParameterGroupMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResetDBParameterGroupMessage) => any;
    }
    /**
        * <p>The specified Amazon S3 bucket name can't be found or Amazon RDS isn't
        *             authorized to access the specified Amazon S3 bucket. Verify the <b>SourceS3BucketName</b> and <b>S3IngestionRoleArn</b> values and try again.</p>
        */
    export class InvalidS3BucketFault extends __BaseException {
            readonly name: "InvalidS3BucketFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidS3BucketFault, __BaseException>);
    }
    export interface RestoreDBClusterFromS3Message {
            /**
                * <p>A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p>
                *         <p>Default: 1</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be a value from 1 to 35</p>
                *             </li>
                *          </ul>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.</p>
                */
            CharacterSetName?: string;
            /**
                * <p>The database name for the restored DB cluster.</p>
                */
            DatabaseName?: string;
            /**
                * <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-cluster1</code>
                *          </p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The name of the DB cluster parameter group to associate
                *             with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p>
                *             </li>
                *          </ul>
                */
            DBClusterParameterGroupName?: string;
            /**
                * <p>A list of EC2 VPC security groups to associate with the restored DB cluster.</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>A DB subnet group to associate with the restored DB cluster.</p>
                *         <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
                *         <p>Example: <code>mydbsubnetgroup</code>
                *          </p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>The name of the database engine to be used for this DB cluster.</p>
                *         <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora), and <code>aurora-postgresql</code>
                *          </p>
                */
            Engine: string | undefined;
            /**
                * <p>The version number of the database engine to use.</p>
                *         <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora), use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>
                *             <b>Aurora MySQL</b>
                *          </p>
                *         <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code>, <code>8.0.mysql_aurora.3.01.0</code>
                *          </p>
                *         <p>
                *             <b>Aurora PostgreSQL</b>
                *          </p>
                *         <p>Example: <code>9.6.3</code>, <code>10.7</code>
                *          </p>
                */
            EngineVersion?: string;
            /**
                * <p>The port number on which the instances in the restored DB cluster accept connections.</p>
                *         <p>Default: <code>3306</code>
                *          </p>
                */
            Port?: number;
            /**
                * <p>The name of the master user for the restored DB cluster.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be 1 to 16 letters or numbers.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't be a reserved word for the chosen database engine.</p>
                *             </li>
                *          </ul>
                */
            MasterUsername: string | undefined;
            /**
                * <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
                *         <p>Constraints: Must contain from 8 to 41 characters.</p>
                */
            MasterUserPassword: string | undefined;
            /**
                * <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p>
                *         <p>Permanent options can't be removed from an option group. An option group can't be removed from a
                *             DB cluster once it is associated with a DB cluster.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>The daily time range during which automated backups are created
                *             if automated backups are enabled
                *             using the <code>BackupRetentionPeriod</code> parameter.</p>
                *         <p>The default is a 30-minute window selected at random from an
                *             8-hour block of time for each Amazon Web Services Region.
                *             To view the time blocks available, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow">
                *                 Backup window</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Must be in Universal Coordinated Time (UTC).</p>
                *             </li>
                *             <li>
                *                 <p>Must not conflict with the preferred maintenance window.</p>
                *             </li>
                *             <li>
                *                 <p>Must be at least 30 minutes.</p>
                *             </li>
                *          </ul>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
                *         <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
                *          </p>
                *         <p>The default is a 30-minute window selected at random from an
                *             8-hour block of time for each Amazon Web Services Region, occurring on a random day of the
                *             week. To see the time blocks available, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora">
                *                 Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
                *         <p>Constraints: Minimum 30-minute window.</p>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
            /**
                * <p>A value that indicates whether the restored DB cluster is encrypted.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>The Amazon Web Services KMS key identifier for an encrypted DB cluster.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
                *             To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
                *         <p>If the StorageEncrypted parameter is enabled, and you do
                *             not specify a value for the <code>KmsKeyId</code> parameter, then
                *             Amazon RDS will use your default KMS key. There is a
                *             default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different
                *             default KMS key for each Amazon Web Services Region.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access
                *             Management (IAM) accounts to database accounts. By default, mapping isn't
                *             enabled.</p>
                *         <p>For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
                *                 IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
                */
            EnableIAMDatabaseAuthentication?: boolean;
            /**
                * <p>The identifier for the database engine that was backed up to create the files stored in the
                *             Amazon S3 bucket.</p>
                *         <p>Valid values: <code>mysql</code>
                *          </p>
                */
            SourceEngine: string | undefined;
            /**
                * <p>The version of the database that the backup files were created from.</p>
                *         <p>MySQL versions 5.5, 5.6, and 5.7 are supported.</p>
                *         <p>Example: <code>5.6.40</code>, <code>5.7.28</code>
                *          </p>
                */
            SourceEngineVersion: string | undefined;
            /**
                * <p>The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.</p>
                */
            S3BucketName: string | undefined;
            /**
                * <p>The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster.
                *         If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is
                *         created by using all of the files in the Amazon S3 bucket.</p>
                */
            S3Prefix?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that authorizes
                *         Amazon RDS to access the Amazon S3 bucket on your behalf.</p>
                */
            S3IngestionRoleArn: string | undefined;
            /**
                * <p>The target backtrack window, in seconds. To disable backtracking, set this value to
                *             0.</p>
                *         <note>
                *             <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
                *         </note>
                *         <p>Default: 0</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
                *             </li>
                *          </ul>
                */
            BacktrackWindow?: number;
            /**
                * <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values
                *             in the list depend on the DB engine being used.</p>
                *         <p>
                *             <b>Aurora MySQL</b>
                *          </p>
                *         <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
                *         <p>
                *             <b>Aurora PostgreSQL</b>
                *          </p>
                *         <p>Possible value is <code>postgresql</code>.</p>
                *         <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
                */
            EnableCloudwatchLogsExports?: string[];
            /**
                * <p>A value that indicates whether the DB cluster has deletion protection enabled.
                *             The database can't be deleted when deletion protection is enabled. By default,
                *             deletion protection isn't enabled.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>Specify the Active Directory directory ID to restore the DB cluster in.
                *           The domain must be created prior to this operation.</p>
                *         <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster.
                *         For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a>
                *         in the <i>Amazon Aurora User Guide</i>.</p>
                */
            Domain?: string;
            /**
                * <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
                */
            DomainIAMRoleName?: string;
            /**
                * <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the
                *             <i>Amazon Aurora User Guide</i>.</p>
                */
            ServerlessV2ScalingConfiguration?: ServerlessV2ScalingConfiguration;
    }
    export namespace RestoreDBClusterFromS3Message {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBClusterFromS3Message) => any;
    }
    export interface RestoreDBClusterFromS3Result {
            /**
                * <p>Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
                *         <p>For an Amazon Aurora DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>PromoteReadReplicaDBCluster</code>,
                *           <code>RestoreDBClusterFromS3</code>, <code>RestoreDBClusterFromSnapshot</code>,
                *           <code>RestoreDBClusterToPointInTime</code>, <code>StartDBCluster</code>, and <code>StopDBCluster</code>.</p>
                *         <p>For a Multi-AZ DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>RebootDBCluster</code>,
                *           <code>RestoreDBClusterFromSnapshot</code>, and <code>RestoreDBClusterToPointInTime</code>.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
                *          </p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace RestoreDBClusterFromS3Result {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBClusterFromS3Result) => any;
    }
    /**
        * <p>The DB cluster doesn't have enough capacity for the current operation.</p>
        */
    export class InsufficientDBClusterCapacityFault extends __BaseException {
            readonly name: "InsufficientDBClusterCapacityFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientDBClusterCapacityFault, __BaseException>);
    }
    /**
        * <p>Cannot restore from VPC backup to non-VPC DB instance.</p>
        */
    export class InvalidRestoreFault extends __BaseException {
            readonly name: "InvalidRestoreFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRestoreFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface RestoreDBClusterFromSnapshotMessage {
            /**
                * <p>Provides the list of Availability Zones (AZs) where instances in the restored DB
                *             cluster can be created.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            AvailabilityZones?: string[];
            /**
                * <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot.
                *             This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-snapshot-id</code>
                *          </p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p>
                *         <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB
                *             cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing Snapshot.</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            SnapshotIdentifier: string | undefined;
            /**
                * <p>The database engine to use for the new DB cluster.</p>
                *         <p>Default: The same as source</p>
                *         <p>Constraint: Must be compatible with the engine of the source</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            Engine: string | undefined;
            /**
                * <p>The version of the database engine to use for the new DB cluster.</p>
                *         <p>To list all of the available engine versions for MySQL 5.6-compatible Aurora, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>To list all of the available engine versions for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>To list all of the available engine versions for Aurora PostgreSQL, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>To list all of the available engine versions for RDS for MySQL, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine mysql --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>To list all of the available engine versions for RDS for PostgreSQL, use the following command:</p>
                *         <p>
                *             <code>aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion"</code>
                *          </p>
                *         <p>
                *             <b>Aurora MySQL</b>
                *          </p>
                *         <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html">MySQL on Amazon RDS Versions</a> in the
                *           <i>Amazon Aurora User Guide</i>.</p>
                *         <p>
                *             <b>Aurora PostgreSQL</b>
                *          </p>
                *         <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.20180305.html">Amazon Aurora PostgreSQL releases and engine versions</a> in the
                *           <i>Amazon Aurora User Guide</i>.</p>
                *         <p>
                *             <b>MySQL</b>
                *          </p>
                *         <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the
                *           <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *         <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon RDS for PostgreSQL versions and extensions</a> in the
                *           <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            EngineVersion?: string;
            /**
                * <p>The port number on which the new DB cluster accepts connections.</p>
                *         <p>Constraints: This value must be <code>1150-65535</code>
                *          </p>
                *         <p>Default: The same port as the original DB cluster.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            Port?: number;
            /**
                * <p>The name of the DB subnet group to use for the new DB cluster.</p>
                *         <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p>
                *         <p>Example: <code>mydbsubnetgroup</code>
                *          </p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>The database name for the restored DB cluster.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DatabaseName?: string;
            /**
                * <p>The name of the option group to use for the restored DB cluster.</p>
                *         <p>DB clusters are associated with a default option group that can't be modified.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>A list of VPC security groups that the new DB cluster will belong to.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>The tags to be assigned to the restored DB cluster.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            Tags?: Tag[];
            /**
                * <p>The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from a DB
                *             snapshot or DB cluster snapshot.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
                *           To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
                *         <p>When you don't specify a value for the <code>KmsKeyId</code> parameter, then the
                *             following occurs:</p>
                *         <ul>
                *             <li>
                *                 <p>If the DB snapshot or DB cluster snapshot in
                *                     <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster
                *                     is encrypted using the KMS key that was used to encrypt the DB snapshot or DB
                *                     cluster snapshot.</p>
                *             </li>
                *             <li>
                *                 <p>If the DB snapshot or DB cluster snapshot in
                *                     <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster
                *                     isn't encrypted.</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            KmsKeyId?: string;
            /**
                * <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access
                *             Management (IAM) accounts to database accounts. By default, mapping isn't
                *             enabled.</p>
                *         <p>For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
                *                 IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            EnableIAMDatabaseAuthentication?: boolean;
            /**
                * <p>The target backtrack window, in seconds. To disable backtracking, set this value to
                *             0.</p>
                *         <note>
                *             <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
                *         </note>
                *         <p>Default: 0</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            BacktrackWindow?: number;
            /**
                * <p>The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
                *             The values in the list depend on the DB engine being used.</p>
                *         <p>
                *             <b>RDS for MySQL</b>
                *          </p>
                *         <p>Possible values are <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
                *         <p>
                *             <b>RDS for PostgreSQL</b>
                *          </p>
                *         <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.</p>
                *         <p>
                *             <b>Aurora MySQL</b>
                *          </p>
                *         <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
                *         <p>
                *             <b>Aurora PostgreSQL</b>
                *          </p>
                *         <p>Possible value is <code>postgresql</code>.</p>
                *         <p>For more information about exporting CloudWatch Logs for Amazon RDS, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide.</i>.</p>
                *         <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            EnableCloudwatchLogsExports?: string[];
            /**
                * <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>,
                *             <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html">
                *             CreateDBCluster</a>.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            EngineMode?: string;
            /**
                * <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            ScalingConfiguration?: ScalingConfiguration;
            /**
                * <p>The name of the DB cluster parameter group to associate with this DB cluster. If this
                *             argument is omitted, the default DB cluster parameter group for the specified engine is
                *             used.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the name of an existing default DB cluster parameter group.</p>
                *             </li>
                *             <li>
                *                 <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DBClusterParameterGroupName?: string;
            /**
                * <p>A value that indicates whether the DB cluster has deletion protection enabled.
                *             The database can't be deleted when deletion protection is enabled. By default,
                *             deletion protection isn't enabled.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>Specify the Active Directory directory ID to restore the DB cluster in.
                *            The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL
                *            Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
                *             Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            Domain?: string;
            /**
                * <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            DomainIAMRoleName?: string;
            /**
                * <p>The compute and memory capacity of the each DB instance in the Multi-AZ DB cluster, for example db.m6g.xlarge.
                *             Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.</p>
                *         <p>For the full list of DB instance classes, and availability for your engine, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            DBClusterInstanceClass?: string;
            /**
                * <p>Specifies the storage type to be associated with the each DB instance in the Multi-AZ DB cluster.</p>
                *         <p>Valid values: <code>io1</code>
                *          </p>
                *         <p>When specified, a value for the <code>Iops</code> parameter is required.</p>
                *         <p>Default: <code>io1</code>
                *          </p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            StorageType?: string;
            /**
                * <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for
                *             each DB instance in the Multi-AZ DB cluster.</p>
                *         <p>For information about valid Iops values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB instance.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            Iops?: number;
            /**
                * <p>A value that indicates whether the DB cluster is publicly accessible.</p>
                *         <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address
                *             from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC.
                *             Access to the DB cluster is ultimately controlled by the security group it uses.
                *             That public access is not permitted if the security group assigned to the DB cluster doesn't permit it.</p>
                *         <p>When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address.</p>
                *         <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
                *         <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
                *         <ul>
                *             <li>
                *                 <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.</p>
                *             </li>
                *             <li>
                *                 <p>If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.</p>
                *             </li>
                *          </ul>
                *         <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
                *         <ul>
                *             <li>
                *                 <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.</p>
                *             </li>
                *             <li>
                *                 <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the
                *             <i>Amazon Aurora User Guide</i>.</p>
                */
            ServerlessV2ScalingConfiguration?: ServerlessV2ScalingConfiguration;
    }
    export namespace RestoreDBClusterFromSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBClusterFromSnapshotMessage) => any;
    }
    export interface RestoreDBClusterFromSnapshotResult {
            /**
                * <p>Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
                *         <p>For an Amazon Aurora DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>PromoteReadReplicaDBCluster</code>,
                *           <code>RestoreDBClusterFromS3</code>, <code>RestoreDBClusterFromSnapshot</code>,
                *           <code>RestoreDBClusterToPointInTime</code>, <code>StartDBCluster</code>, and <code>StopDBCluster</code>.</p>
                *         <p>For a Multi-AZ DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>RebootDBCluster</code>,
                *           <code>RestoreDBClusterFromSnapshot</code>, and <code>RestoreDBClusterToPointInTime</code>.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
                *          </p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace RestoreDBClusterFromSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBClusterFromSnapshotResult) => any;
    }
    /**
        * <p></p>
        */
    export interface RestoreDBClusterToPointInTimeMessage {
            /**
                * <p>The name of the new DB cluster to be created.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DBClusterIdentifier: string | undefined;
            /**
                * <p>The type of restore to be performed. You can specify one of the following values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>full-copy</code> - The new DB cluster is restored as a full copy of the
                *                 source DB cluster.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>copy-on-write</code> - The new DB cluster is restored as a clone of the
                *                 source DB cluster.</p>
                *             </li>
                *          </ul>
                *         <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p>
                *         <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is
                *             restored as a full copy of the source DB cluster.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            RestoreType?: string;
            /**
                * <p>The identifier of the source DB cluster from which to restore.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing DBCluster.</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            SourceDBClusterIdentifier: string | undefined;
            /**
                * <p>The date and time to restore the DB cluster to.</p>
                *         <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be before the latest restorable time for the DB instance</p>
                *             </li>
                *             <li>
                *                 <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p>
                *             </li>
                *             <li>
                *                 <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p>
                *             </li>
                *             <li>
                *                 <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>2015-03-07T23:45:00Z</code>
                *          </p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            RestoreToTime?: Date;
            /**
                * <p>A value that indicates whether to restore the DB cluster to the latest
                *             restorable backup time. By default, the DB cluster isn't restored to the latest
                *             restorable backup time.</p>
                *         <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            UseLatestRestorableTime?: boolean;
            /**
                * <p>The port number on which the new DB cluster accepts connections.</p>
                *         <p>Constraints: A value from <code>1150-65535</code>.</p>
                *         <p>Default: The default port for the engine.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            Port?: number;
            /**
                * <p>The DB subnet group name to use for the new DB cluster.</p>
                *         <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
                *         <p>Example: <code>mydbsubnetgroup</code>
                *          </p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>The name of the option group for the new DB cluster.</p>
                *         <p>DB clusters are associated with a default option group that can't be modified.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>A list of VPC security groups that the new DB cluster belongs to.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
            /**
                * <p>The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
                *           To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
                *         <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different from the
                *           KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key
                *           identified by the <code>KmsKeyId</code> parameter.</p>
                *         <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p>
                *         <ul>
                *             <li>
                *                 <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p>
                *             </li>
                *             <li>
                *                 <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p>
                *             </li>
                *          </ul>
                *         <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request
                *       is rejected.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            KmsKeyId?: string;
            /**
                * <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access
                *             Management (IAM) accounts to database accounts. By default, mapping isn't
                *             enabled.</p>
                *         <p>For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
                *                 IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            EnableIAMDatabaseAuthentication?: boolean;
            /**
                * <p>The target backtrack window, in seconds. To disable backtracking, set this value to
                *             0.</p>
                *         <p>Default: 0</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora MySQL DB clusters only</p>
                */
            BacktrackWindow?: number;
            /**
                * <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values
                *             in the list depend on the DB engine being used.</p>
                *         <p>
                *             <b>RDS for MySQL</b>
                *          </p>
                *         <p>Possible values are <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
                *         <p>
                *             <b>RDS for PostgreSQL</b>
                *          </p>
                *         <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.</p>
                *         <p>
                *             <b>Aurora MySQL</b>
                *          </p>
                *         <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
                *         <p>
                *             <b>Aurora PostgreSQL</b>
                *          </p>
                *         <p>Possible value is <code>postgresql</code>.</p>
                *         <p>For more information about exporting CloudWatch Logs for Amazon RDS, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide.</i>.</p>
                *         <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            EnableCloudwatchLogsExports?: string[];
            /**
                * <p>The name of the DB cluster parameter group to associate with this DB cluster.
                *             If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the name of an existing DB cluster parameter group.</p>
                *             </li>
                *             <li>
                *                 <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DBClusterParameterGroupName?: string;
            /**
                * <p>A value that indicates whether the DB cluster has deletion protection enabled.
                *             The database can't be deleted when deletion protection is enabled. By default,
                *             deletion protection isn't enabled.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
                *         <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>Specify the Active Directory directory ID to restore the DB cluster in.
                *           The domain must be created prior to this operation.</p>
                *         <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster.
                *         For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a>
                *         in the <i>Amazon Aurora User Guide</i>.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            Domain?: string;
            /**
                * <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            DomainIAMRoleName?: string;
            /**
                * <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            ScalingConfiguration?: ScalingConfiguration;
            /**
                * <p>The engine mode of the new cluster. Specify <code>provisioned</code> or <code>serverless</code>,
                *       depending on the type of the cluster you are creating. You can create an Aurora Serverless v1 clone
                *       from a provisioned cluster, or a provisioned clone from an Aurora Serverless v1 cluster. To create a clone
                *       that is an Aurora Serverless v1 cluster, the original cluster must be an Aurora Serverless v1 cluster or
                *       an encrypted provisioned cluster.</p>
                *         <p>Valid for: Aurora DB clusters only</p>
                */
            EngineMode?: string;
            /**
                * <p>The compute and memory capacity of the each DB instance in the Multi-AZ DB cluster,
                *             for example db.m6g.xlarge. Not all DB instance classes are available in all Amazon Web Services
                *             Regions, or for all database engines.</p>
                *         <p>For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB instance class</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            DBClusterInstanceClass?: string;
            /**
                * <p>Specifies the storage type to be associated with the each DB instance in the Multi-AZ DB cluster.</p>
                *         <p>Valid values: <code>io1</code>
                *          </p>
                *         <p>When specified, a value for the <code>Iops</code> parameter is required.</p>
                *         <p>Default: <code>io1</code>
                *          </p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            StorageType?: string;
            /**
                * <p>A value that indicates whether the DB cluster is publicly accessible.</p>
                *         <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address
                *             from within the DB cluster's virtual private cloud (VPC). It resolves
                *             to the public IP address from outside of the DB cluster's VPC.
                *             Access to the DB cluster is ultimately controlled by the security group it uses.
                *             That public access is not permitted if the security group assigned to the DB cluster doesn't permit it.</p>
                *         <p>When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address.</p>
                *         <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
                *         <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
                *         <ul>
                *             <li>
                *                 <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.</p>
                *             </li>
                *             <li>
                *                 <p>If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.</p>
                *             </li>
                *          </ul>
                *         <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
                *         <ul>
                *             <li>
                *                 <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.</p>
                *             </li>
                *             <li>
                *                 <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.</p>
                *             </li>
                *          </ul>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for
                *             each DB instance in the Multi-AZ DB cluster.</p>
                *         <p>For information about valid <code>Iops</code> values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage to improve performance</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB instance.</p>
                *         <p>Valid for: Multi-AZ DB clusters only</p>
                */
            Iops?: number;
            /**
                * <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the
                *             <i>Amazon Aurora User Guide</i>.</p>
                */
            ServerlessV2ScalingConfiguration?: ServerlessV2ScalingConfiguration;
    }
    export namespace RestoreDBClusterToPointInTimeMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBClusterToPointInTimeMessage) => any;
    }
    export interface RestoreDBClusterToPointInTimeResult {
            /**
                * <p>Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
                *         <p>For an Amazon Aurora DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>PromoteReadReplicaDBCluster</code>,
                *           <code>RestoreDBClusterFromS3</code>, <code>RestoreDBClusterFromSnapshot</code>,
                *           <code>RestoreDBClusterToPointInTime</code>, <code>StartDBCluster</code>, and <code>StopDBCluster</code>.</p>
                *         <p>For a Multi-AZ DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>RebootDBCluster</code>,
                *           <code>RestoreDBClusterFromSnapshot</code>, and <code>RestoreDBClusterToPointInTime</code>.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
                *          </p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace RestoreDBClusterToPointInTimeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBClusterToPointInTimeResult) => any;
    }
    /**
        * <p></p>
        */
    export interface RestoreDBInstanceFromDBSnapshotMessage {
            /**
                * <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 numbers, letters, or hyphens</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>my-snapshot-id</code>
                *          </p>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>The identifier for the DB snapshot to restore from.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing DBSnapshot.</p>
                *             </li>
                *             <li>
                *                 <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code>
                *               must be the ARN of the shared DB snapshot.</p>
                *             </li>
                *          </ul>
                */
            DBSnapshotIdentifier: string | undefined;
            /**
                * <p>The compute and memory capacity of the Amazon RDS DB instance, for example db.m4.large.
                *           Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.
                *           For the full list of DB instance classes,
                *           and availability for your engine, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>Default: The same DBInstanceClass as the original DB instance.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>The port number on which the database accepts connections.</p>
                *         <p>Default: The same port as the original DB instance</p>
                *         <p>Constraints: Value must be <code>1150-65535</code>
                *          </p>
                */
            Port?: number;
            /**
                * <p>The Availability Zone (AZ) where the DB instance will be created.</p>
                *         <p>Default: A random, system-chosen Availability Zone.</p>
                *         <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
                *         <p>Example: <code>us-east-1a</code>
                *          </p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The DB subnet group name to use for the new instance.</p>
                *         <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
                *         <p>Example: <code>mydbsubnetgroup</code>
                *          </p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>A value that indicates whether the DB instance is publicly accessible.</p>
                *         <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address
                *           from within the DB instance's virtual private cloud (VPC).
                *           It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled
                *           by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
                *         <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
                *         <p>For more information, see <a>CreateDBInstance</a>.</p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>A value that indicates whether minor version upgrades are applied automatically to the DB instance
                *           during the maintenance window.</p>
                *         <p>If you restore an RDS Custom DB instance, you must disable this parameter.</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>License model information for the restored DB instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Default: Same as source.</p>
                *         <p>Valid values:  <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code>
                *          </p>
                */
            LicenseModel?: string;
            /**
                * <p>The database name for the restored DB instance.</p>
                *         <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines. It also doesn't apply to RDS
                *           Custom DB instances.</p>
                */
            DBName?: string;
            /**
                * <p>The database engine to use for the new instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Default: The same as source</p>
                *         <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p>
                *         <p>Valid Values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>mariadb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mysql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-se</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ex</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-web</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Engine?: string;
            /**
                * <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second.
                *           If this parameter isn't specified, the IOPS value is taken from the backup.
                *           If this parameter is set to 0, the new instance is converted to a non-PIOPS instance.
                *           The conversion takes additional time, though your DB instance is available for connections before the conversion starts.</p>
                *         <p>The provisioned IOPS value must follow the requirements for your database engine.
                *           For more information, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a>
                *           in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>Constraints: Must be an integer greater than 1000.</p>
                */
            Iops?: number;
            /**
                * <p>The name of the option group to be used for the restored DB instance.</p>
                *
                *
                *         <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option
                *         group, and that option group can't be removed from a DB instance after it is associated with a DB instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
            /**
                * <p>Specifies the storage type to be associated with the DB instance.</p>
                *         <p>Valid values: <code>standard | gp2 | io1</code>
                *          </p>
                *         <p>If you specify <code>io1</code>, you must also include a value for the
                *             <code>Iops</code> parameter.</p>
                *         <p>Default: <code>io1</code> if the <code>Iops</code> parameter
                *             is specified, otherwise <code>gp2</code>
                *          </p>
                */
            StorageType?: string;
            /**
                * <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            TdeCredentialArn?: string;
            /**
                * <p>The password for the given ARN from the key store in order to access the device.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            TdeCredentialPassword?: string;
            /**
                * <p>A list of EC2 VPC security groups to associate with this DB instance.</p>
                *         <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>Specify the Active Directory directory ID to restore the DB instance in.
                *            The domain/ must be created prior to this operation. Currently, you can create only MySQL, Microsoft SQL
                *            Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
                *            Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            Domain?: string;
            /**
                * <p>A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance.</p>
                *         <p>In most cases, tags aren't copied by default. However, when you restore a DB instance from a DB snapshot, RDS checks whether you
                *           specify new tags. If yes, the new tags are added to the restored DB instance. If there are no new tags, RDS looks for the tags from
                *           the source DB instance for the DB snapshot, and then adds those tags to the restored DB instance.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html#USER_Tagging.CopyTags">
                *           Copying tags to DB instance snapshots</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            DomainIAMRoleName?: string;
            /**
                * <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access
                *           Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
                *         <p>For more information about IAM database authentication, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
                *               IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            EnableIAMDatabaseAuthentication?: boolean;
            /**
                * <p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values
                *             in the list depend on the DB engine being used. For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            EnableCloudwatchLogsExports?: string[];
            /**
                * <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            ProcessorFeatures?: ProcessorFeature[];
            /**
                * <p>A value that indicates whether the DB instance class of the DB instance uses its default
                *             processor features.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            UseDefaultProcessorFeatures?: boolean;
            /**
                * <p>The name of the DB parameter group to associate with this DB instance.</p>
                *         <p>If you don't specify a value for <code>DBParameterGroupName</code>, then RDS uses the default <code>DBParameterGroup</code>
                *             for the specified DB engine.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the name of an existing DBParameterGroup.</p>
                *             </li>
                *             <li>
                *                 <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                */
            DBParameterGroupName?: string;
            /**
                * <p>A value that indicates whether the DB instance has deletion protection enabled.
                *             The database can't be deleted when deletion protection is enabled. By default,
                *             deletion protection isn't enabled. For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
                *                 Deleting a DB Instance</a>.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
                *         <p>A <i>CoIP</i> provides local or external connectivity to resources in
                *             your Outpost subnets through your on-premises network. For some use cases, a CoIP can
                *             provide lower latency for connections to the DB instance from outside of its virtual
                *             private cloud (VPC) on your local network.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a>
                *             in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a>
                *             in the <i>Amazon Web Services Outposts User Guide</i>.</p>
                */
            EnableCustomerOwnedIp?: boolean;
            /**
                * <p>The instance profile associated with the underlying Amazon EC2 instance of an
                *             RDS Custom DB instance. The instance profile must meet the following requirements:</p>
                *         <ul>
                *             <li>
                *                 <p>The profile must exist in your account.</p>
                *             </li>
                *             <li>
                *                 <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p>
                *             </li>
                *             <li>
                *                 <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p>
                *             </li>
                *          </ul>
                *         <p>For the list of permissions required for the IAM role, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc">
                *                 Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting is required for RDS Custom.</p>
                */
            CustomIamInstanceProfile?: string;
            /**
                * <p>Specifies where automated backups and manual snapshots are stored for the restored DB instance.</p>
                *         <p>Possible values are <code>outposts</code> (Amazon Web Services Outposts) and <code>region</code> (Amazon Web Services Region). The default is <code>region</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working
                *             with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            BackupTarget?: string;
            /**
                * <p>The network type of the DB instance.</p>
                *         <p>Valid values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>IPV4</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DUAL</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance.
                *             A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6
                *             protocols (<code>DUAL</code>).</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
                *             Working with a DB instance in a VPC</a> in the
                *             <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            NetworkType?: string;
    }
    export namespace RestoreDBInstanceFromDBSnapshotMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBInstanceFromDBSnapshotMessage) => any;
    }
    export interface RestoreDBInstanceFromDBSnapshotResult {
            /**
                * <p>Contains the details of an Amazon RDS DB instance.</p>
                *         <p>This data type is used as a response element in the operations <code>CreateDBInstance</code>,
                *           <code>CreateDBInstanceReadReplica</code>, <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>,
                *           <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>, <code>RebootDBInstance</code>,
                *           <code>RestoreDBInstanceFromDBSnapshot</code>, <code>RestoreDBInstanceFromS3</code>, <code>RestoreDBInstanceToPointInTime</code>,
                *           <code>StartDBInstance</code>, and <code>StopDBInstance</code>.</p>
                */
            DBInstance?: DBInstance;
    }
    export namespace RestoreDBInstanceFromDBSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBInstanceFromDBSnapshotResult) => any;
    }
    export interface RestoreDBInstanceFromS3Message {
            /**
                * <p>The name of the database to create when the DB instance is created.
                *             Follow the naming rules specified in <code>CreateDBInstance</code>.</p>
                */
            DBName?: string;
            /**
                * <p>The DB instance identifier. This parameter is stored as a lowercase string.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>mydbinstance</code>
                *          </p>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>The amount of storage (in gigabytes) to allocate initially for the DB instance.
                *             Follow the allocation rules specified in <code>CreateDBInstance</code>.</p>
                *         <note>
                *             <p>Be sure to allocate enough memory for your new DB instance
                *                 so that the restore operation can succeed.
                *                 You can also allocate additional memory for future growth.</p>
                *         </note>
                */
            AllocatedStorage?: number;
            /**
                * <p>The compute and memory capacity of the DB instance,
                *             for example db.m4.large.
                *             Not all DB instance classes are available in all Amazon Web Services Regions,
                *             or for all database engines.
                *             For the full list of DB instance classes,
                *             and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class.</p>
                */
            DBInstanceClass: string | undefined;
            /**
                * <p>The name of the database engine to be used for this instance.</p>
                *         <p>Valid Values:
                *             <code>mysql</code>
                *          </p>
                */
            Engine: string | undefined;
            /**
                * <p>The name for the master user.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be 1 to 16 letters or numbers.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't be a reserved word for the chosen database engine.</p>
                *             </li>
                *          </ul>
                */
            MasterUsername?: string;
            /**
                * <p>The password for the master user.
                *             The password can include any printable ASCII character except "/", """, or "@".</p>
                *         <p>Constraints: Must contain from 8 to 41 characters.</p>
                */
            MasterUserPassword?: string;
            /**
                * <p>A list of DB security groups to associate with this DB instance.</p>
                *         <p>Default: The default DB security group for the database engine.</p>
                */
            DBSecurityGroups?: string[];
            /**
                * <p>A list of VPC security groups to associate with this DB instance.</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>The Availability Zone that the DB instance is created in.
                *             For information about Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region.</p>
                *         <p>Example: <code>us-east-1d</code>
                *          </p>
                *         <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment.
                *             The specified Availability Zone must be in the same Amazon Web Services Region as the current endpoint.</p>
                */
            AvailabilityZone?: string;
            /**
                * <p>A DB subnet group to associate with this DB instance.</p>
                *         <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
                *         <p>Example: <code>mydbsubnetgroup</code>
                *          </p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>The time range each week during which system maintenance can occur,
                *             in Universal Coordinated Time (UTC).
                *             For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
                *             </li>
                *             <li>
                *                 <p>Must be in Universal Coordinated Time (UTC).</p>
                *             </li>
                *             <li>
                *                 <p>Must not conflict with the preferred backup window.</p>
                *             </li>
                *             <li>
                *                 <p>Must be at least 30 minutes.</p>
                *             </li>
                *          </ul>
                */
            PreferredMaintenanceWindow?: string;
            /**
                * <p>The name of the DB parameter group to associate with this DB instance.</p>
                *         <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code>
                *             for the specified DB engine is used.</p>
                */
            DBParameterGroupName?: string;
            /**
                * <p>The number of days for which automated backups are retained.
                *             Setting this parameter to a positive number enables backups.
                *             For more information, see <code>CreateDBInstance</code>.</p>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>The time range each day
                *             during which automated backups are created
                *             if automated backups are enabled.
                *             For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
                *             </li>
                *             <li>
                *                 <p>Must be in Universal Coordinated Time (UTC).</p>
                *             </li>
                *             <li>
                *                 <p>Must not conflict with the preferred maintenance window.</p>
                *             </li>
                *             <li>
                *                 <p>Must be at least 30 minutes.</p>
                *             </li>
                *          </ul>
                */
            PreferredBackupWindow?: string;
            /**
                * <p>The port number on which the database accepts connections.</p>
                *         <p>Type: Integer</p>
                *         <p>Valid Values: <code>1150</code>-<code>65535</code>
                *          </p>
                *         <p>Default: <code>3306</code>
                *          </p>
                */
            Port?: number;
            /**
                * <p>A value that indicates whether the DB instance is a Multi-AZ deployment.
                *             If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>The version number of the database engine to use.
                *             Choose the latest minor version of your database engine.
                *             For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.</p>
                */
            EngineVersion?: string;
            /**
                * <p>A value that indicates whether minor engine upgrades are applied automatically
                *             to the DB instance during the maintenance window. By default, minor engine upgrades
                *             are not applied automatically.</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>The license model for this DB instance.
                *             Use <code>general-public-license</code>.</p>
                */
            LicenseModel?: string;
            /**
                * <p>The amount of Provisioned IOPS (input/output operations per second)
                *             to allocate initially for the DB instance.
                *             For information about valid Iops values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a>
                *             in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Iops?: number;
            /**
                * <p>The name of the option group to associate with this DB instance.
                *             If this argument is omitted, the default option group for the specified engine is used.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>A value that indicates whether the DB instance is publicly accessible.</p>
                *         <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address
                *             from within the DB instance's virtual private cloud (VPC).
                *             It resolves to the public IP address from outside of the DB instance's VPC.
                *             Access to the DB instance is ultimately controlled by the security group it uses.
                *             That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
                *         <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
                *         <p>For more information, see <a>CreateDBInstance</a>.</p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>A list of tags to associate with this DB instance.
                *             For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
            /**
                * <p>Specifies the storage type to be associated with the DB instance.</p>
                *         <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code>
                *          </p>
                *         <p>If you specify <code>io1</code>,
                *             you must also include a value for the <code>Iops</code> parameter.</p>
                *         <p>Default: <code>io1</code>
                *             if the <code>Iops</code> parameter is specified;
                *             otherwise <code>gp2</code>
                *          </p>
                */
            StorageType?: string;
            /**
                * <p>A value that indicates whether the new DB instance is encrypted or not.</p>
                */
            StorageEncrypted?: boolean;
            /**
                * <p>The Amazon Web Services KMS key identifier for an encrypted DB instance.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
                *             To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
                *         <p>If the <code>StorageEncrypted</code> parameter is enabled,
                *             and you do not specify a value for the <code>KmsKeyId</code> parameter,
                *             then Amazon RDS will use your default KMS key.
                *             There is a default KMS key for your Amazon Web Services account.
                *             Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>The interval, in seconds,
                *             between points when Enhanced Monitoring metrics are collected for the DB instance.
                *             To disable collecting Enhanced Monitoring metrics, specify 0.</p>
                *         <p>If <code>MonitoringRoleArn</code> is specified,
                *             then you must also set <code>MonitoringInterval</code> to a value other than 0.</p>
                *         <p>Valid Values: 0, 1, 5, 10, 15, 30, 60</p>
                *         <p>Default: <code>0</code>
                *          </p>
                */
            MonitoringInterval?: number;
            /**
                * <p>The ARN for the IAM role that permits RDS
                *             to send enhanced monitoring metrics to Amazon CloudWatch Logs.
                *             For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.
                *             For information on creating a monitoring role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a>
                *             in the <i>Amazon RDS User Guide.</i>
                *          </p>
                *         <p>If <code>MonitoringInterval</code> is set to a value other than 0,
                *             then you must supply a <code>MonitoringRoleArn</code> value.</p>
                */
            MonitoringRoleArn?: string;
            /**
                * <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management
                *             (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
                *         <p>For more information about IAM database authentication, see
                *          <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
                *              IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            EnableIAMDatabaseAuthentication?: boolean;
            /**
                * <p>The name of the engine of your source database.</p>
                *         <p>Valid Values:
                *             <code>mysql</code>
                *          </p>
                */
            SourceEngine: string | undefined;
            /**
                * <p>The version of the database that the backup files were created from.</p>
                *         <p>MySQL versions 5.6 and 5.7 are supported.</p>
                *         <p>Example: <code>5.6.40</code>
                *          </p>
                */
            SourceEngineVersion: string | undefined;
            /**
                * <p>The name of your Amazon S3 bucket
                *             that contains your database backup file.</p>
                */
            S3BucketName: string | undefined;
            /**
                * <p>The prefix of your Amazon S3 bucket.</p>
                */
            S3Prefix?: string;
            /**
                * <p>An Amazon Web Services Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket.</p>
                */
            S3IngestionRoleArn: string | undefined;
            /**
                * <p>A value that indicates whether to enable Performance Insights for the DB instance.</p>
                *         <p>For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide.</i>.</p>
                */
            EnablePerformanceInsights?: boolean;
            /**
                * <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                *         <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS
                *             uses your default KMS key. There is a default KMS key for your Amazon Web Services account.
                *             Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
                */
            PerformanceInsightsKMSKeyId?: string;
            /**
                * <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).</p>
                */
            PerformanceInsightsRetentionPeriod?: number;
            /**
                * <p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values
                *             in the list depend on the DB engine being used. For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            EnableCloudwatchLogsExports?: string[];
            /**
                * <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
                */
            ProcessorFeatures?: ProcessorFeature[];
            /**
                * <p>A value that indicates whether the DB instance class of the DB instance uses its default
                *             processor features.</p>
                */
            UseDefaultProcessorFeatures?: boolean;
            /**
                * <p>A value that indicates whether the DB instance has deletion protection enabled.
                *             The database can't be deleted when deletion protection is enabled. By default,
                *             deletion protection isn't enabled. For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
                *                 Deleting a DB Instance</a>.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
                *         <p>For more information about this setting, including limitations that apply to it, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
                *                 Managing capacity automatically with Amazon RDS storage autoscaling</a>
                *             in the <i>Amazon RDS User Guide</i>.</p>
                */
            MaxAllocatedStorage?: number;
            /**
                * <p>The network type of the DB instance.</p>
                *         <p>Valid values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>IPV4</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DUAL</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance.
                *             A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6
                *             protocols (<code>DUAL</code>).</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
                *             Working with a DB instance in a VPC</a> in the
                *             <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            NetworkType?: string;
    }
    export namespace RestoreDBInstanceFromS3Message {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBInstanceFromS3Message) => any;
    }
    export interface RestoreDBInstanceFromS3Result {
            /**
                * <p>Contains the details of an Amazon RDS DB instance.</p>
                *         <p>This data type is used as a response element in the operations <code>CreateDBInstance</code>,
                *           <code>CreateDBInstanceReadReplica</code>, <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>,
                *           <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>, <code>RebootDBInstance</code>,
                *           <code>RestoreDBInstanceFromDBSnapshot</code>, <code>RestoreDBInstanceFromS3</code>, <code>RestoreDBInstanceToPointInTime</code>,
                *           <code>StartDBInstance</code>, and <code>StopDBInstance</code>.</p>
                */
            DBInstance?: DBInstance;
    }
    export namespace RestoreDBInstanceFromS3Result {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBInstanceFromS3Result) => any;
    }
    /**
        * <p>
        *             <code>SourceDBInstanceIdentifier</code>
        *         refers to a DB instance with
        *         <code>BackupRetentionPeriod</code> equal to 0.</p>
        */
    export class PointInTimeRestoreNotEnabledFault extends __BaseException {
            readonly name: "PointInTimeRestoreNotEnabledFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PointInTimeRestoreNotEnabledFault, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface RestoreDBInstanceToPointInTimeMessage {
            /**
                * <p>The identifier of the source DB instance from which to restore.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must match the identifier of an existing DB instance.</p>
                *             </li>
                *          </ul>
                */
            SourceDBInstanceIdentifier?: string;
            /**
                * <p>The name of the new DB instance to be created.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens</p>
                *             </li>
                *          </ul>
                */
            TargetDBInstanceIdentifier: string | undefined;
            /**
                * <p>The date and time to restore from.</p>
                *         <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>Must be before the latest restorable time for the DB instance</p>
                *             </li>
                *             <li>
                *                 <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p>
                *             </li>
                *          </ul>
                *         <p>Example: <code>2009-09-07T23:45:00Z</code>
                *          </p>
                */
            RestoreTime?: Date;
            /**
                * <p>A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance
                *           isn't restored from the latest backup time.</p>
                *         <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
                */
            UseLatestRestorableTime?: boolean;
            /**
                * <p>The compute and memory capacity of the Amazon RDS DB instance, for example
                *                 db.m4.large. Not all DB instance classes are available in all Amazon Web Services
                *             Regions, or for all database engines. For the full list of DB instance classes, and
                *             availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance
                *                 Class</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>Default: The same DBInstanceClass as the original DB instance.</p>
                */
            DBInstanceClass?: string;
            /**
                * <p>The port number on which the database accepts connections.</p>
                *         <p>Constraints: Value must be <code>1150-65535</code>
                *          </p>
                *         <p>Default: The same port as the original DB instance.</p>
                */
            Port?: number;
            /**
                * <p>The Availability Zone (AZ) where the DB instance will be created.</p>
                *         <p>Default: A random, system-chosen Availability Zone.</p>
                *         <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
                *         <p>Example: <code>us-east-1a</code>
                *          </p>
                */
            AvailabilityZone?: string;
            /**
                * <p>The DB subnet group name to use for the new instance.</p>
                *         <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
                *         <p>Example: <code>mydbsubnetgroup</code>
                *          </p>
                */
            DBSubnetGroupName?: string;
            /**
                * <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a
                *           Multi-AZ deployment.</p>
                */
            MultiAZ?: boolean;
            /**
                * <p>A value that indicates whether the DB instance is publicly accessible.</p>
                *         <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint
                *           resolves to the private IP address from within the DB cluster's virtual private cloud
                *           (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access
                *           to the DB cluster is ultimately controlled by the security group it uses. That public
                *           access isn't permitted if the security group assigned to the DB cluster doesn't permit
                *           it.</p>
                *         <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
                *         <p>For more information, see <a>CreateDBInstance</a>.</p>
                */
            PubliclyAccessible?: boolean;
            /**
                * <p>A value that indicates whether minor version upgrades are applied automatically to the
                *           DB instance during the maintenance window.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            AutoMinorVersionUpgrade?: boolean;
            /**
                * <p>License model information for the restored DB instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Default: Same as source.</p>
                *         <p>Valid values:  <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code>
                *          </p>
                */
            LicenseModel?: string;
            /**
                * <p>The database name for the restored DB instance.</p>
                *         <note>
                *             <p>This parameter isn't supported for the MySQL or MariaDB engines. It also doesn't apply to RDS Custom.</p>
                *         </note>
                */
            DBName?: string;
            /**
                * <p>The database engine to use for the new instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Default: The same as source</p>
                *         <p>Constraint: Must be compatible with the engine of the source</p>
                *         <p>Valid Values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>mariadb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>mysql</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-ee-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>oracle-se2-cdb</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>postgres</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ee</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-se</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-ex</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>sqlserver-web</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Engine?: string;
            /**
                * <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p>
                *         <p>Constraints: Must be an integer greater than 1000.</p>
                *         <p>
                *             <b>SQL Server</b>
                *          </p>
                *         <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
                */
            Iops?: number;
            /**
                * <p>The name of the option group to be used for the restored DB instance.</p>
                *
                *
                *         <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an
                *         option group, and that option group can't be removed from a DB instance after it is associated with a DB instance</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            OptionGroupName?: string;
            /**
                * <p>A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
                */
            CopyTagsToSnapshot?: boolean;
            /**
                * <p>A list of tags.
                *           For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            Tags?: Tag[];
            /**
                * <p>Specifies the storage type to be associated with the DB instance.</p>
                *         <p>Valid values: <code>standard | gp2 | io1</code>
                *          </p>
                *         <p>If you specify <code>io1</code>, you must also include a value for the
                *             <code>Iops</code> parameter.</p>
                *         <p>Default: <code>io1</code> if the <code>Iops</code> parameter
                *             is specified, otherwise <code>gp2</code>
                *          </p>
                */
            StorageType?: string;
            /**
                * <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            TdeCredentialArn?: string;
            /**
                * <p>The password for the given ARN from the key store in order to access the device.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            TdeCredentialPassword?: string;
            /**
                * <p>A list of EC2 VPC security groups to associate with this DB instance.</p>
                *         <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
                */
            VpcSecurityGroupIds?: string[];
            /**
                * <p>Specify the Active Directory directory ID to restore the DB instance in.
                *           Create the domain before running this command. Currently, you can create only the MySQL, Microsoft SQL
                *           Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
                *           Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            Domain?: string;
            /**
                * <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            DomainIAMRoleName?: string;
            /**
                * <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management
                *             (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>For more information about IAM database authentication, see
                *         <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
                *             IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            EnableIAMDatabaseAuthentication?: boolean;
            /**
                * <p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values
                *             in the list depend on the DB engine being used. For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            EnableCloudwatchLogsExports?: string[];
            /**
                * <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            ProcessorFeatures?: ProcessorFeature[];
            /**
                * <p>A value that indicates whether the DB instance class of the DB instance uses its default processor features.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            UseDefaultProcessorFeatures?: boolean;
            /**
                * <p>The name of the DB parameter group to associate with this DB instance.</p>
                *         <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code>
                *                 for the specified DB engine is used.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>Constraints:</p>
                *         <ul>
                *             <li>
                *                 <p>If supplied, must match the name of an existing DBParameterGroup.</p>
                *             </li>
                *             <li>
                *                 <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
                *             </li>
                *             <li>
                *                 <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                 <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
                *             </li>
                *          </ul>
                */
            DBParameterGroupName?: string;
            /**
                * <p>A value that indicates whether the DB instance has deletion protection enabled.
                *             The database can't be deleted when deletion protection is enabled. By default,
                *             deletion protection isn't enabled. For more information, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
                *                 Deleting a DB Instance</a>.</p>
                */
            DeletionProtection?: boolean;
            /**
                * <p>The resource ID of the source DB instance from which to restore.</p>
                */
            SourceDbiResourceId?: string;
            /**
                * <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
                *         <p>For more information about this setting, including limitations that apply to it, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
                *               Managing capacity automatically with Amazon RDS storage autoscaling</a>
                *           in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            MaxAllocatedStorage?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the replicated automated backups from which to restore, for example,
                *             <code>arn:aws:rds:useast-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                */
            SourceDBInstanceAutomatedBackupsArn?: string;
            /**
                * <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
                *         <p>A <i>CoIP</i> provides local or external connectivity to resources in
                *             your Outpost subnets through your on-premises network. For some use cases, a CoIP can
                *             provide lower latency for connections to the DB instance from outside of its virtual
                *             private cloud (VPC) on your local network.</p>
                *         <p>This setting doesn't apply to RDS Custom.</p>
                *         <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a>
                *             in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a>
                *             in the <i>Amazon Web Services Outposts User Guide</i>.</p>
                */
            EnableCustomerOwnedIp?: boolean;
            /**
                * <p>The instance profile associated with the underlying Amazon EC2 instance of an
                *             RDS Custom DB instance. The instance profile must meet the following requirements:</p>
                *         <ul>
                *             <li>
                *                 <p>The profile must exist in your account.</p>
                *             </li>
                *             <li>
                *                 <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p>
                *             </li>
                *             <li>
                *                 <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p>
                *             </li>
                *          </ul>
                *         <p>For the list of permissions required for the IAM role, see
                *             <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc">
                *                 Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
                *         <p>This setting is required for RDS Custom.</p>
                */
            CustomIamInstanceProfile?: string;
            /**
                * <p>Specifies where automated backups and manual snapshots are stored for the restored DB instance.</p>
                *         <p>Possible values are <code>outposts</code> (Amazon Web Services Outposts) and <code>region</code> (Amazon Web Services Region). The default is <code>region</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working
                *             with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
                */
            BackupTarget?: string;
            /**
                * <p>The network type of the DB instance.</p>
                *         <p>Valid values:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>IPV4</code>
                *                </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>DUAL</code>
                *                </p>
                *             </li>
                *          </ul>
                *         <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance.
                *             A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6
                *             protocols (<code>DUAL</code>).</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html">
                *             Working with a DB instance in a VPC</a> in the
                *             <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            NetworkType?: string;
    }
    export namespace RestoreDBInstanceToPointInTimeMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBInstanceToPointInTimeMessage) => any;
    }
    export interface RestoreDBInstanceToPointInTimeResult {
            /**
                * <p>Contains the details of an Amazon RDS DB instance.</p>
                *         <p>This data type is used as a response element in the operations <code>CreateDBInstance</code>,
                *           <code>CreateDBInstanceReadReplica</code>, <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>,
                *           <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>, <code>RebootDBInstance</code>,
                *           <code>RestoreDBInstanceFromDBSnapshot</code>, <code>RestoreDBInstanceFromS3</code>, <code>RestoreDBInstanceToPointInTime</code>,
                *           <code>StartDBInstance</code>, and <code>StopDBInstance</code>.</p>
                */
            DBInstance?: DBInstance;
    }
    export namespace RestoreDBInstanceToPointInTimeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RestoreDBInstanceToPointInTimeResult) => any;
    }
    /**
        * <p></p>
        */
    export interface RevokeDBSecurityGroupIngressMessage {
            /**
                * <p>The name of the DB security group to revoke ingress from.</p>
                */
            DBSecurityGroupName: string | undefined;
            /**
                * <p>The IP range to revoke access from.
                *         Must be a valid CIDR range. If <code>CIDRIP</code> is specified,
                *         <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code>
                *         can't be provided.</p>
                */
            CIDRIP?: string;
            /**
                * <p>The name of the EC2 security group to revoke access from.
                *         For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
                *         Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
                */
            EC2SecurityGroupName?: string;
            /**
                * <p>The id of the EC2 security group to revoke access from.
                *         For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
                *         Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
                */
            EC2SecurityGroupId?: string;
            /**
                * <p>The Amazon Web Services account number of the owner of the EC2 security group
                *         specified in the <code>EC2SecurityGroupName</code> parameter.
                *         The Amazon Web Services access key ID isn't an acceptable value.
                *         For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
                *         Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
                */
            EC2SecurityGroupOwnerId?: string;
    }
    export namespace RevokeDBSecurityGroupIngressMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RevokeDBSecurityGroupIngressMessage) => any;
    }
    export interface RevokeDBSecurityGroupIngressResult {
            /**
                * <p>Contains the details for an Amazon RDS DB security group.</p>
                *         <p>This data type is used as a response element
                *           in the <code>DescribeDBSecurityGroups</code> action.</p>
                */
            DBSecurityGroup?: DBSecurityGroup;
    }
    export namespace RevokeDBSecurityGroupIngressResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RevokeDBSecurityGroupIngressResult) => any;
    }
    export interface StartActivityStreamRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the DB cluster,
                *             for example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Specifies the mode of the database activity stream.
                *             Database events such as a change or access generate an activity stream event.
                *             The database session can handle these events either synchronously or asynchronously.</p>
                */
            Mode: ActivityStreamMode | string | undefined;
            /**
                * <p>The Amazon Web Services KMS key identifier for encrypting messages in the database activity stream.
                *             The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                */
            KmsKeyId: string | undefined;
            /**
                * <p>Specifies whether or not the database activity stream is to start as soon as possible,
                *             regardless of the maintenance window for the database.</p>
                */
            ApplyImmediately?: boolean;
            /**
                * <p>Specifies whether the database activity stream includes engine-native audit fields. This option only applies
                *         to an Oracle DB instance. By default, no engine-native audit fields are included.</p>
                */
            EngineNativeAuditFieldsIncluded?: boolean;
    }
    export namespace StartActivityStreamRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartActivityStreamRequest) => any;
    }
    export interface StartActivityStreamResponse {
            /**
                * <p>The Amazon Web Services KMS key identifier for encryption of messages in the database activity stream.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The name of the Amazon Kinesis data stream to be used for the database activity stream.</p>
                */
            KinesisStreamName?: string;
            /**
                * <p>The status of the database activity stream.</p>
                */
            Status?: ActivityStreamStatus | string;
            /**
                * <p>The mode of the database activity stream.</p>
                */
            Mode?: ActivityStreamMode | string;
            /**
                * <p>Indicates whether or not the database activity stream will start as soon as possible,
                *             regardless of the maintenance window for the database.</p>
                */
            ApplyImmediately?: boolean;
            /**
                * <p>Indicates whether engine-native audit fields are included in the database activity stream.</p>
                */
            EngineNativeAuditFieldsIncluded?: boolean;
    }
    export namespace StartActivityStreamResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartActivityStreamResponse) => any;
    }
    export interface StartDBClusterMessage {
            /**
                * <p>The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as
                *         a lowercase string.</p>
                */
            DBClusterIdentifier: string | undefined;
    }
    export namespace StartDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDBClusterMessage) => any;
    }
    export interface StartDBClusterResult {
            /**
                * <p>Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
                *         <p>For an Amazon Aurora DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>PromoteReadReplicaDBCluster</code>,
                *           <code>RestoreDBClusterFromS3</code>, <code>RestoreDBClusterFromSnapshot</code>,
                *           <code>RestoreDBClusterToPointInTime</code>, <code>StartDBCluster</code>, and <code>StopDBCluster</code>.</p>
                *         <p>For a Multi-AZ DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>RebootDBCluster</code>,
                *           <code>RestoreDBClusterFromSnapshot</code>, and <code>RestoreDBClusterToPointInTime</code>.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
                *          </p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace StartDBClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDBClusterResult) => any;
    }
    export interface StartDBInstanceMessage {
            /**
                * <p>The user-supplied instance identifier.</p>
                */
            DBInstanceIdentifier: string | undefined;
    }
    export namespace StartDBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDBInstanceMessage) => any;
    }
    export interface StartDBInstanceResult {
            /**
                * <p>Contains the details of an Amazon RDS DB instance.</p>
                *         <p>This data type is used as a response element in the operations <code>CreateDBInstance</code>,
                *           <code>CreateDBInstanceReadReplica</code>, <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>,
                *           <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>, <code>RebootDBInstance</code>,
                *           <code>RestoreDBInstanceFromDBSnapshot</code>, <code>RestoreDBInstanceFromS3</code>, <code>RestoreDBInstanceToPointInTime</code>,
                *           <code>StartDBInstance</code>, and <code>StopDBInstance</code>.</p>
                */
            DBInstance?: DBInstance;
    }
    export namespace StartDBInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDBInstanceResult) => any;
    }
    export interface StartDBInstanceAutomatedBackupsReplicationMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the source DB instance for the replicated automated backups, for example,
                *             <code>arn:aws:rds:us-west-2:123456789012:db:mydatabase</code>.</p>
                */
            SourceDBInstanceArn: string | undefined;
            /**
                * <p>The retention period for the replicated automated backups.</p>
                */
            BackupRetentionPeriod?: number;
            /**
                * <p>The Amazon Web Services KMS key identifier for encryption of the replicated automated backups. The KMS key ID is the
                *             Amazon Resource Name (ARN) for the KMS encryption key in the destination Amazon Web Services Region, for example,
                *             <code>arn:aws:kms:us-east-1:123456789012:key/AKIAIOSFODNN7EXAMPLE</code>.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>A URL that contains a Signature Version 4 signed request for the StartDBInstanceAutomatedBackupsReplication action to be
                *             called in the Amazon Web Services Region of the source DB instance. The presigned URL must be a valid request for the
                *             StartDBInstanceAutomatedBackupsReplication API action that can be executed in the Amazon Web Services Region that contains
                *             the source DB instance.</p>
                */
            PreSignedUrl?: string;
    }
    export namespace StartDBInstanceAutomatedBackupsReplicationMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDBInstanceAutomatedBackupsReplicationMessage) => any;
    }
    export interface StartDBInstanceAutomatedBackupsReplicationResult {
            /**
                * <p>An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that
                *             existed at the time you deleted the source instance.</p>
                */
            DBInstanceAutomatedBackup?: DBInstanceAutomatedBackup;
    }
    export namespace StartDBInstanceAutomatedBackupsReplicationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartDBInstanceAutomatedBackupsReplicationResult) => any;
    }
    /**
        * <p>You can't start an export task that's already running.</p>
        */
    export class ExportTaskAlreadyExistsFault extends __BaseException {
            readonly name: "ExportTaskAlreadyExistsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ExportTaskAlreadyExistsFault, __BaseException>);
    }
    /**
        * <p>The IAM role requires additional permissions to export to an Amazon S3 bucket.</p>
        */
    export class IamRoleMissingPermissionsFault extends __BaseException {
            readonly name: "IamRoleMissingPermissionsFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IamRoleMissingPermissionsFault, __BaseException>);
    }
    /**
        * <p>The IAM role is missing for exporting to an Amazon S3 bucket.</p>
        */
    export class IamRoleNotFoundFault extends __BaseException {
            readonly name: "IamRoleNotFoundFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IamRoleNotFoundFault, __BaseException>);
    }
    /**
        * <p>The export is invalid for exporting to an Amazon S3 bucket.</p>
        */
    export class InvalidExportOnlyFault extends __BaseException {
            readonly name: "InvalidExportOnlyFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidExportOnlyFault, __BaseException>);
    }
    /**
        * <p>The state of the export snapshot is invalid for exporting to an Amazon S3 bucket.</p>
        */
    export class InvalidExportSourceStateFault extends __BaseException {
            readonly name: "InvalidExportSourceStateFault";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidExportSourceStateFault, __BaseException>);
    }
    export interface StartExportTaskMessage {
            /**
                * <p>A unique identifier for the snapshot export task. This ID isn't an identifier for
                *             the Amazon S3 bucket where the snapshot is to be exported to.</p>
                */
            ExportTaskIdentifier: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.</p>
                */
            SourceArn: string | undefined;
            /**
                * <p>The name of the Amazon S3 bucket to export the snapshot to.</p>
                */
            S3BucketName: string | undefined;
            /**
                * <p>The name of the IAM role to use for writing to the Amazon S3 bucket
                *             when exporting a snapshot.</p>
                */
            IamRoleArn: string | undefined;
            /**
                * <p>The ID of the Amazon Web Services KMS key to use to encrypt the snapshot exported to Amazon S3. The Amazon Web Services KMS
                *             key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.
                *             The caller of this operation must be authorized to execute the following operations.
                *             These can be set in the Amazon Web Services KMS key policy:</p>
                *         <ul>
                *             <li>
                *                 <p>GrantOperation.Encrypt</p>
                *             </li>
                *             <li>
                *                 <p>GrantOperation.Decrypt</p>
                *             </li>
                *             <li>
                *                 <p>GrantOperation.GenerateDataKey</p>
                *             </li>
                *             <li>
                *                 <p>GrantOperation.GenerateDataKeyWithoutPlaintext</p>
                *             </li>
                *             <li>
                *                 <p>GrantOperation.ReEncryptFrom</p>
                *             </li>
                *             <li>
                *                 <p>GrantOperation.ReEncryptTo</p>
                *             </li>
                *             <li>
                *                 <p>GrantOperation.CreateGrant</p>
                *             </li>
                *             <li>
                *                 <p>GrantOperation.DescribeKey</p>
                *             </li>
                *             <li>
                *                 <p>GrantOperation.RetireGrant</p>
                *             </li>
                *          </ul>
                */
            KmsKeyId: string | undefined;
            /**
                * <p>The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.</p>
                */
            S3Prefix?: string;
            /**
                * <p>The data to be exported from the snapshot.
                *             If this parameter is not provided, all the snapshot data is exported.
                *             Valid values are the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>database</code> - Export all the data from a specified database.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>database.table</code>
                *                     <i>table-name</i> -
                *                 Export a table of the snapshot. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>database.schema</code>
                *                     <i>schema-name</i> - Export a database schema of the snapshot.
                *                 This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>database.schema.table</code>
                *                     <i>table-name</i> - Export a table of the database schema.
                *                 This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p>
                *             </li>
                *          </ul>
                */
            ExportOnly?: string[];
    }
    export namespace StartExportTaskMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartExportTaskMessage) => any;
    }
    export interface StopActivityStreamRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the DB cluster for the database activity stream.
                *             For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Specifies whether or not the database activity stream is to stop as soon as possible,
                *             regardless of the maintenance window for the database.</p>
                */
            ApplyImmediately?: boolean;
    }
    export namespace StopActivityStreamRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopActivityStreamRequest) => any;
    }
    export interface StopActivityStreamResponse {
            /**
                * <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream.</p>
                *         <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
                */
            KmsKeyId?: string;
            /**
                * <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
                */
            KinesisStreamName?: string;
            /**
                * <p>The status of the database activity stream.</p>
                */
            Status?: ActivityStreamStatus | string;
    }
    export namespace StopActivityStreamResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopActivityStreamResponse) => any;
    }
    export interface StopDBClusterMessage {
            /**
                * <p>The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as
                *         a lowercase string.</p>
                */
            DBClusterIdentifier: string | undefined;
    }
    export namespace StopDBClusterMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopDBClusterMessage) => any;
    }
    export interface StopDBClusterResult {
            /**
                * <p>Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
                *         <p>For an Amazon Aurora DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>PromoteReadReplicaDBCluster</code>,
                *           <code>RestoreDBClusterFromS3</code>, <code>RestoreDBClusterFromSnapshot</code>,
                *           <code>RestoreDBClusterToPointInTime</code>, <code>StartDBCluster</code>, and <code>StopDBCluster</code>.</p>
                *         <p>For a Multi-AZ DB cluster, this data type is used as a response element in the operations
                *           <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>,
                *           <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>RebootDBCluster</code>,
                *           <code>RestoreDBClusterFromSnapshot</code>, and <code>RestoreDBClusterToPointInTime</code>.</p>
                *         <p>For more information on Amazon Aurora DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html">
                *               What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i>
                *          </p>
                *         <p>For more information on Multi-AZ DB clusters, see
                *           <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html">
                *               Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i>
                *          </p>
                */
            DBCluster?: DBCluster;
    }
    export namespace StopDBClusterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopDBClusterResult) => any;
    }
    export interface StopDBInstanceMessage {
            /**
                * <p>The user-supplied instance identifier.</p>
                */
            DBInstanceIdentifier: string | undefined;
            /**
                * <p>The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped.</p>
                */
            DBSnapshotIdentifier?: string;
    }
    export namespace StopDBInstanceMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopDBInstanceMessage) => any;
    }
    export interface StopDBInstanceResult {
            /**
                * <p>Contains the details of an Amazon RDS DB instance.</p>
                *         <p>This data type is used as a response element in the operations <code>CreateDBInstance</code>,
                *           <code>CreateDBInstanceReadReplica</code>, <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>,
                *           <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>, <code>RebootDBInstance</code>,
                *           <code>RestoreDBInstanceFromDBSnapshot</code>, <code>RestoreDBInstanceFromS3</code>, <code>RestoreDBInstanceToPointInTime</code>,
                *           <code>StartDBInstance</code>, and <code>StopDBInstance</code>.</p>
                */
            DBInstance?: DBInstance;
    }
    export namespace StopDBInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopDBInstanceResult) => any;
    }
    export interface StopDBInstanceAutomatedBackupsReplicationMessage {
            /**
                * <p>The Amazon Resource Name (ARN) of the source DB instance for which to stop replicating automated backups, for example,
                *             <code>arn:aws:rds:us-west-2:123456789012:db:mydatabase</code>.</p>
                */
            SourceDBInstanceArn: string | undefined;
    }
    export namespace StopDBInstanceAutomatedBackupsReplicationMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopDBInstanceAutomatedBackupsReplicationMessage) => any;
    }
    export interface StopDBInstanceAutomatedBackupsReplicationResult {
            /**
                * <p>An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that
                *             existed at the time you deleted the source instance.</p>
                */
            DBInstanceAutomatedBackup?: DBInstanceAutomatedBackup;
    }
    export namespace StopDBInstanceAutomatedBackupsReplicationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopDBInstanceAutomatedBackupsReplicationResult) => any;
    }
}

declare module '@aws-sdk/client-rds/node_modules/@aws-sdk/client-rds/dist-types/models/RDSServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from RDS service.
        */
    export class RDSServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

