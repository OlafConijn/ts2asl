// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-lightsail' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AllocateStaticIpCommandInput, AllocateStaticIpCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AllocateStaticIpCommand";
    import { AttachCertificateToDistributionCommandInput, AttachCertificateToDistributionCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachCertificateToDistributionCommand";
    import { AttachDiskCommandInput, AttachDiskCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachDiskCommand";
    import { AttachInstancesToLoadBalancerCommandInput, AttachInstancesToLoadBalancerCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachInstancesToLoadBalancerCommand";
    import { AttachLoadBalancerTlsCertificateCommandInput, AttachLoadBalancerTlsCertificateCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachLoadBalancerTlsCertificateCommand";
    import { AttachStaticIpCommandInput, AttachStaticIpCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachStaticIpCommand";
    import { CloseInstancePublicPortsCommandInput, CloseInstancePublicPortsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CloseInstancePublicPortsCommand";
    import { CopySnapshotCommandInput, CopySnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CopySnapshotCommand";
    import { CreateBucketAccessKeyCommandInput, CreateBucketAccessKeyCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateBucketAccessKeyCommand";
    import { CreateBucketCommandInput, CreateBucketCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateBucketCommand";
    import { CreateCertificateCommandInput, CreateCertificateCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateCertificateCommand";
    import { CreateCloudFormationStackCommandInput, CreateCloudFormationStackCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateCloudFormationStackCommand";
    import { CreateContactMethodCommandInput, CreateContactMethodCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateContactMethodCommand";
    import { CreateContainerServiceCommandInput, CreateContainerServiceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateContainerServiceCommand";
    import { CreateContainerServiceDeploymentCommandInput, CreateContainerServiceDeploymentCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateContainerServiceDeploymentCommand";
    import { CreateContainerServiceRegistryLoginCommandInput, CreateContainerServiceRegistryLoginCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateContainerServiceRegistryLoginCommand";
    import { CreateDiskCommandInput, CreateDiskCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDiskCommand";
    import { CreateDiskFromSnapshotCommandInput, CreateDiskFromSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDiskFromSnapshotCommand";
    import { CreateDiskSnapshotCommandInput, CreateDiskSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDiskSnapshotCommand";
    import { CreateDistributionCommandInput, CreateDistributionCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDistributionCommand";
    import { CreateDomainCommandInput, CreateDomainCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDomainCommand";
    import { CreateDomainEntryCommandInput, CreateDomainEntryCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDomainEntryCommand";
    import { CreateInstancesCommandInput, CreateInstancesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateInstancesCommand";
    import { CreateInstancesFromSnapshotCommandInput, CreateInstancesFromSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateInstancesFromSnapshotCommand";
    import { CreateInstanceSnapshotCommandInput, CreateInstanceSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateInstanceSnapshotCommand";
    import { CreateKeyPairCommandInput, CreateKeyPairCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateKeyPairCommand";
    import { CreateLoadBalancerCommandInput, CreateLoadBalancerCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateLoadBalancerCommand";
    import { CreateLoadBalancerTlsCertificateCommandInput, CreateLoadBalancerTlsCertificateCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateLoadBalancerTlsCertificateCommand";
    import { CreateRelationalDatabaseCommandInput, CreateRelationalDatabaseCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateRelationalDatabaseCommand";
    import { CreateRelationalDatabaseFromSnapshotCommandInput, CreateRelationalDatabaseFromSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateRelationalDatabaseFromSnapshotCommand";
    import { CreateRelationalDatabaseSnapshotCommandInput, CreateRelationalDatabaseSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateRelationalDatabaseSnapshotCommand";
    import { DeleteAlarmCommandInput, DeleteAlarmCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteAlarmCommand";
    import { DeleteAutoSnapshotCommandInput, DeleteAutoSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteAutoSnapshotCommand";
    import { DeleteBucketAccessKeyCommandInput, DeleteBucketAccessKeyCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteBucketAccessKeyCommand";
    import { DeleteBucketCommandInput, DeleteBucketCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteBucketCommand";
    import { DeleteCertificateCommandInput, DeleteCertificateCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteCertificateCommand";
    import { DeleteContactMethodCommandInput, DeleteContactMethodCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteContactMethodCommand";
    import { DeleteContainerImageCommandInput, DeleteContainerImageCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteContainerImageCommand";
    import { DeleteContainerServiceCommandInput, DeleteContainerServiceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteContainerServiceCommand";
    import { DeleteDiskCommandInput, DeleteDiskCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDiskCommand";
    import { DeleteDiskSnapshotCommandInput, DeleteDiskSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDiskSnapshotCommand";
    import { DeleteDistributionCommandInput, DeleteDistributionCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDistributionCommand";
    import { DeleteDomainCommandInput, DeleteDomainCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDomainCommand";
    import { DeleteDomainEntryCommandInput, DeleteDomainEntryCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDomainEntryCommand";
    import { DeleteInstanceCommandInput, DeleteInstanceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteInstanceCommand";
    import { DeleteInstanceSnapshotCommandInput, DeleteInstanceSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteInstanceSnapshotCommand";
    import { DeleteKeyPairCommandInput, DeleteKeyPairCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteKeyPairCommand";
    import { DeleteKnownHostKeysCommandInput, DeleteKnownHostKeysCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteKnownHostKeysCommand";
    import { DeleteLoadBalancerCommandInput, DeleteLoadBalancerCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteLoadBalancerCommand";
    import { DeleteLoadBalancerTlsCertificateCommandInput, DeleteLoadBalancerTlsCertificateCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteLoadBalancerTlsCertificateCommand";
    import { DeleteRelationalDatabaseCommandInput, DeleteRelationalDatabaseCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteRelationalDatabaseCommand";
    import { DeleteRelationalDatabaseSnapshotCommandInput, DeleteRelationalDatabaseSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteRelationalDatabaseSnapshotCommand";
    import { DetachCertificateFromDistributionCommandInput, DetachCertificateFromDistributionCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DetachCertificateFromDistributionCommand";
    import { DetachDiskCommandInput, DetachDiskCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DetachDiskCommand";
    import { DetachInstancesFromLoadBalancerCommandInput, DetachInstancesFromLoadBalancerCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DetachInstancesFromLoadBalancerCommand";
    import { DetachStaticIpCommandInput, DetachStaticIpCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DetachStaticIpCommand";
    import { DisableAddOnCommandInput, DisableAddOnCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DisableAddOnCommand";
    import { DownloadDefaultKeyPairCommandInput, DownloadDefaultKeyPairCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DownloadDefaultKeyPairCommand";
    import { EnableAddOnCommandInput, EnableAddOnCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/EnableAddOnCommand";
    import { ExportSnapshotCommandInput, ExportSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/ExportSnapshotCommand";
    import { GetActiveNamesCommandInput, GetActiveNamesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetActiveNamesCommand";
    import { GetAlarmsCommandInput, GetAlarmsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetAlarmsCommand";
    import { GetAutoSnapshotsCommandInput, GetAutoSnapshotsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetAutoSnapshotsCommand";
    import { GetBlueprintsCommandInput, GetBlueprintsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBlueprintsCommand";
    import { GetBucketAccessKeysCommandInput, GetBucketAccessKeysCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBucketAccessKeysCommand";
    import { GetBucketBundlesCommandInput, GetBucketBundlesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBucketBundlesCommand";
    import { GetBucketMetricDataCommandInput, GetBucketMetricDataCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBucketMetricDataCommand";
    import { GetBucketsCommandInput, GetBucketsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBucketsCommand";
    import { GetBundlesCommandInput, GetBundlesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBundlesCommand";
    import { GetCertificatesCommandInput, GetCertificatesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetCertificatesCommand";
    import { GetCloudFormationStackRecordsCommandInput, GetCloudFormationStackRecordsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetCloudFormationStackRecordsCommand";
    import { GetContactMethodsCommandInput, GetContactMethodsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContactMethodsCommand";
    import { GetContainerAPIMetadataCommandInput, GetContainerAPIMetadataCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerAPIMetadataCommand";
    import { GetContainerImagesCommandInput, GetContainerImagesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerImagesCommand";
    import { GetContainerLogCommandInput, GetContainerLogCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerLogCommand";
    import { GetContainerServiceDeploymentsCommandInput, GetContainerServiceDeploymentsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerServiceDeploymentsCommand";
    import { GetContainerServiceMetricDataCommandInput, GetContainerServiceMetricDataCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerServiceMetricDataCommand";
    import { GetContainerServicePowersCommandInput, GetContainerServicePowersCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerServicePowersCommand";
    import { GetContainerServicesCommandInput, GetContainerServicesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerServicesCommand";
    import { GetDiskCommandInput, GetDiskCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDiskCommand";
    import { GetDisksCommandInput, GetDisksCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDisksCommand";
    import { GetDiskSnapshotCommandInput, GetDiskSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDiskSnapshotCommand";
    import { GetDiskSnapshotsCommandInput, GetDiskSnapshotsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDiskSnapshotsCommand";
    import { GetDistributionBundlesCommandInput, GetDistributionBundlesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDistributionBundlesCommand";
    import { GetDistributionLatestCacheResetCommandInput, GetDistributionLatestCacheResetCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDistributionLatestCacheResetCommand";
    import { GetDistributionMetricDataCommandInput, GetDistributionMetricDataCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDistributionMetricDataCommand";
    import { GetDistributionsCommandInput, GetDistributionsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDistributionsCommand";
    import { GetDomainCommandInput, GetDomainCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDomainCommand";
    import { GetDomainsCommandInput, GetDomainsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDomainsCommand";
    import { GetExportSnapshotRecordsCommandInput, GetExportSnapshotRecordsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetExportSnapshotRecordsCommand";
    import { GetInstanceAccessDetailsCommandInput, GetInstanceAccessDetailsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceAccessDetailsCommand";
    import { GetInstanceCommandInput, GetInstanceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceCommand";
    import { GetInstanceMetricDataCommandInput, GetInstanceMetricDataCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceMetricDataCommand";
    import { GetInstancePortStatesCommandInput, GetInstancePortStatesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstancePortStatesCommand";
    import { GetInstancesCommandInput, GetInstancesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstancesCommand";
    import { GetInstanceSnapshotCommandInput, GetInstanceSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceSnapshotCommand";
    import { GetInstanceSnapshotsCommandInput, GetInstanceSnapshotsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceSnapshotsCommand";
    import { GetInstanceStateCommandInput, GetInstanceStateCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceStateCommand";
    import { GetKeyPairCommandInput, GetKeyPairCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetKeyPairCommand";
    import { GetKeyPairsCommandInput, GetKeyPairsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetKeyPairsCommand";
    import { GetLoadBalancerCommandInput, GetLoadBalancerCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancerCommand";
    import { GetLoadBalancerMetricDataCommandInput, GetLoadBalancerMetricDataCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancerMetricDataCommand";
    import { GetLoadBalancersCommandInput, GetLoadBalancersCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancersCommand";
    import { GetLoadBalancerTlsCertificatesCommandInput, GetLoadBalancerTlsCertificatesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancerTlsCertificatesCommand";
    import { GetLoadBalancerTlsPoliciesCommandInput, GetLoadBalancerTlsPoliciesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancerTlsPoliciesCommand";
    import { GetOperationCommandInput, GetOperationCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetOperationCommand";
    import { GetOperationsCommandInput, GetOperationsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetOperationsCommand";
    import { GetOperationsForResourceCommandInput, GetOperationsForResourceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetOperationsForResourceCommand";
    import { GetRegionsCommandInput, GetRegionsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRegionsCommand";
    import { GetRelationalDatabaseBlueprintsCommandInput, GetRelationalDatabaseBlueprintsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseBlueprintsCommand";
    import { GetRelationalDatabaseBundlesCommandInput, GetRelationalDatabaseBundlesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseBundlesCommand";
    import { GetRelationalDatabaseCommandInput, GetRelationalDatabaseCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseCommand";
    import { GetRelationalDatabaseEventsCommandInput, GetRelationalDatabaseEventsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseEventsCommand";
    import { GetRelationalDatabaseLogEventsCommandInput, GetRelationalDatabaseLogEventsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseLogEventsCommand";
    import { GetRelationalDatabaseLogStreamsCommandInput, GetRelationalDatabaseLogStreamsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseLogStreamsCommand";
    import { GetRelationalDatabaseMasterUserPasswordCommandInput, GetRelationalDatabaseMasterUserPasswordCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseMasterUserPasswordCommand";
    import { GetRelationalDatabaseMetricDataCommandInput, GetRelationalDatabaseMetricDataCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseMetricDataCommand";
    import { GetRelationalDatabaseParametersCommandInput, GetRelationalDatabaseParametersCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseParametersCommand";
    import { GetRelationalDatabasesCommandInput, GetRelationalDatabasesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabasesCommand";
    import { GetRelationalDatabaseSnapshotCommandInput, GetRelationalDatabaseSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseSnapshotCommand";
    import { GetRelationalDatabaseSnapshotsCommandInput, GetRelationalDatabaseSnapshotsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseSnapshotsCommand";
    import { GetStaticIpCommandInput, GetStaticIpCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetStaticIpCommand";
    import { GetStaticIpsCommandInput, GetStaticIpsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetStaticIpsCommand";
    import { ImportKeyPairCommandInput, ImportKeyPairCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/ImportKeyPairCommand";
    import { IsVpcPeeredCommandInput, IsVpcPeeredCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/IsVpcPeeredCommand";
    import { OpenInstancePublicPortsCommandInput, OpenInstancePublicPortsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/OpenInstancePublicPortsCommand";
    import { PeerVpcCommandInput, PeerVpcCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/PeerVpcCommand";
    import { PutAlarmCommandInput, PutAlarmCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/PutAlarmCommand";
    import { PutInstancePublicPortsCommandInput, PutInstancePublicPortsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/PutInstancePublicPortsCommand";
    import { RebootInstanceCommandInput, RebootInstanceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/RebootInstanceCommand";
    import { RebootRelationalDatabaseCommandInput, RebootRelationalDatabaseCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/RebootRelationalDatabaseCommand";
    import { RegisterContainerImageCommandInput, RegisterContainerImageCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/RegisterContainerImageCommand";
    import { ReleaseStaticIpCommandInput, ReleaseStaticIpCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/ReleaseStaticIpCommand";
    import { ResetDistributionCacheCommandInput, ResetDistributionCacheCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/ResetDistributionCacheCommand";
    import { SendContactMethodVerificationCommandInput, SendContactMethodVerificationCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/SendContactMethodVerificationCommand";
    import { SetIpAddressTypeCommandInput, SetIpAddressTypeCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/SetIpAddressTypeCommand";
    import { SetResourceAccessForBucketCommandInput, SetResourceAccessForBucketCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/SetResourceAccessForBucketCommand";
    import { StartInstanceCommandInput, StartInstanceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/StartInstanceCommand";
    import { StartRelationalDatabaseCommandInput, StartRelationalDatabaseCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/StartRelationalDatabaseCommand";
    import { StopInstanceCommandInput, StopInstanceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/StopInstanceCommand";
    import { StopRelationalDatabaseCommandInput, StopRelationalDatabaseCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/StopRelationalDatabaseCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/TagResourceCommand";
    import { TestAlarmCommandInput, TestAlarmCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/TestAlarmCommand";
    import { UnpeerVpcCommandInput, UnpeerVpcCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UnpeerVpcCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UntagResourceCommand";
    import { UpdateBucketBundleCommandInput, UpdateBucketBundleCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateBucketBundleCommand";
    import { UpdateBucketCommandInput, UpdateBucketCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateBucketCommand";
    import { UpdateContainerServiceCommandInput, UpdateContainerServiceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateContainerServiceCommand";
    import { UpdateDistributionBundleCommandInput, UpdateDistributionBundleCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateDistributionBundleCommand";
    import { UpdateDistributionCommandInput, UpdateDistributionCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateDistributionCommand";
    import { UpdateDomainEntryCommandInput, UpdateDomainEntryCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateDomainEntryCommand";
    import { UpdateLoadBalancerAttributeCommandInput, UpdateLoadBalancerAttributeCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateLoadBalancerAttributeCommand";
    import { UpdateRelationalDatabaseCommandInput, UpdateRelationalDatabaseCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateRelationalDatabaseCommand";
    import { UpdateRelationalDatabaseParametersCommandInput, UpdateRelationalDatabaseParametersCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateRelationalDatabaseParametersCommand";
    import { LightsailClient } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    /**
        * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes
        *       everything you need to launch your project quickly - instances (virtual private servers),
        *       container services, storage buckets, managed databases, SSD-based block storage, static IP
        *       addresses, load balancers, content delivery network (CDN) distributions, DNS management of
        *       registered domains, and resource snapshots (backups) - for a low, predictable monthly
        *       price.</p>
        *
        *          <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API,
        *       AWS Command Line Interface (AWS CLI), or SDKs. For more information about Lightsail concepts
        *       and tasks, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli">Amazon Lightsail Developer Guide</a>.</p>
        *
        *          <p>This API Reference provides detailed information about the actions, data types,
        *       parameters, and errors of the Lightsail service. For more information about the supported
        *         Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see
        *         <a href="https://docs.aws.amazon.com/general/latest/gr/lightsail.html">Amazon Lightsail Endpoints
        *         and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
        */
    export class Lightsail extends LightsailClient {
            /**
                * <p>Allocates a static IP address.</p>
                */
            allocateStaticIp(args: AllocateStaticIpCommandInput, options?: __HttpHandlerOptions): Promise<AllocateStaticIpCommandOutput>;
            allocateStaticIp(args: AllocateStaticIpCommandInput, cb: (err: any, data?: AllocateStaticIpCommandOutput) => void): void;
            allocateStaticIp(args: AllocateStaticIpCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AllocateStaticIpCommandOutput) => void): void;
            /**
                * <p>Attaches an SSL/TLS certificate to your Amazon Lightsail content delivery network (CDN)
                *       distribution.</p>
                *          <p>After the certificate is attached, your distribution accepts HTTPS traffic for all of the
                *       domains that are associated with the certificate.</p>
                *          <p>Use the <code>CreateCertificate</code> action to create a certificate that you can attach
                *       to your distribution.</p>
                *          <important>
                *             <p>Only certificates created in the <code>us-east-1</code>
                *         Amazon Web Services Region can be attached to Lightsail distributions. Lightsail
                *         distributions are global resources that can reference an origin in any Amazon Web Services
                *         Region, and distribute its content globally. However, all distributions are located in the
                *           <code>us-east-1</code> Region.</p>
                *          </important>
                */
            attachCertificateToDistribution(args: AttachCertificateToDistributionCommandInput, options?: __HttpHandlerOptions): Promise<AttachCertificateToDistributionCommandOutput>;
            attachCertificateToDistribution(args: AttachCertificateToDistributionCommandInput, cb: (err: any, data?: AttachCertificateToDistributionCommandOutput) => void): void;
            attachCertificateToDistribution(args: AttachCertificateToDistributionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AttachCertificateToDistributionCommandOutput) => void): void;
            /**
                * <p>Attaches a block storage disk to a running or stopped Lightsail instance and exposes it
                *       to the instance with the specified disk name.</p>
                *          <p>The <code>attach disk</code> operation supports tag-based access control via resource tags
                *       applied to the resource identified by <code>disk name</code>. For more information, see the
                *         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            attachDisk(args: AttachDiskCommandInput, options?: __HttpHandlerOptions): Promise<AttachDiskCommandOutput>;
            attachDisk(args: AttachDiskCommandInput, cb: (err: any, data?: AttachDiskCommandOutput) => void): void;
            attachDisk(args: AttachDiskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AttachDiskCommandOutput) => void): void;
            /**
                * <p>Attaches one or more Lightsail instances to a load balancer.</p>
                *          <p>After some time, the instances are attached to the load balancer and the health check
                *       status is available.</p>
                *          <p>The <code>attach instances to load balancer</code> operation supports tag-based access
                *       control via resource tags applied to the resource identified by <code>load balancer
                *         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Developer Guide</a>.</p>
                */
            attachInstancesToLoadBalancer(args: AttachInstancesToLoadBalancerCommandInput, options?: __HttpHandlerOptions): Promise<AttachInstancesToLoadBalancerCommandOutput>;
            attachInstancesToLoadBalancer(args: AttachInstancesToLoadBalancerCommandInput, cb: (err: any, data?: AttachInstancesToLoadBalancerCommandOutput) => void): void;
            attachInstancesToLoadBalancer(args: AttachInstancesToLoadBalancerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AttachInstancesToLoadBalancerCommandOutput) => void): void;
            /**
                * <p>Attaches a Transport Layer Security (TLS) certificate to your load balancer. TLS is just
                *       an updated, more secure version of Secure Socket Layer (SSL).</p>
                *          <p>Once you create and validate your certificate, you can attach it to your load balancer.
                *       You can also use this API to rotate the certificates on your account. Use the
                *         <code>AttachLoadBalancerTlsCertificate</code> action with the non-attached certificate, and
                *       it will replace the existing one and become the attached certificate.</p>
                *          <p>The <code>AttachLoadBalancerTlsCertificate</code> operation supports tag-based access
                *       control via resource tags applied to the resource identified by <code>load balancer
                *         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            attachLoadBalancerTlsCertificate(args: AttachLoadBalancerTlsCertificateCommandInput, options?: __HttpHandlerOptions): Promise<AttachLoadBalancerTlsCertificateCommandOutput>;
            attachLoadBalancerTlsCertificate(args: AttachLoadBalancerTlsCertificateCommandInput, cb: (err: any, data?: AttachLoadBalancerTlsCertificateCommandOutput) => void): void;
            attachLoadBalancerTlsCertificate(args: AttachLoadBalancerTlsCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AttachLoadBalancerTlsCertificateCommandOutput) => void): void;
            /**
                * <p>Attaches a static IP address to a specific Amazon Lightsail instance.</p>
                */
            attachStaticIp(args: AttachStaticIpCommandInput, options?: __HttpHandlerOptions): Promise<AttachStaticIpCommandOutput>;
            attachStaticIp(args: AttachStaticIpCommandInput, cb: (err: any, data?: AttachStaticIpCommandOutput) => void): void;
            attachStaticIp(args: AttachStaticIpCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AttachStaticIpCommandOutput) => void): void;
            /**
                * <p>Closes ports for a specific Amazon Lightsail instance.</p>
                *          <p>The <code>CloseInstancePublicPorts</code> action supports tag-based access control via
                *       resource tags applied to the resource identified by <code>instanceName</code>. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            closeInstancePublicPorts(args: CloseInstancePublicPortsCommandInput, options?: __HttpHandlerOptions): Promise<CloseInstancePublicPortsCommandOutput>;
            closeInstancePublicPorts(args: CloseInstancePublicPortsCommandInput, cb: (err: any, data?: CloseInstancePublicPortsCommandOutput) => void): void;
            closeInstancePublicPorts(args: CloseInstancePublicPortsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CloseInstancePublicPortsCommandOutput) => void): void;
            /**
                * <p>Copies a manual snapshot of an instance or disk as another manual snapshot, or copies an
                *       automatic snapshot of an instance or disk as a manual snapshot. This operation can also be
                *       used to copy a manual or automatic snapshot of an instance or a disk from one Amazon Web Services Region to another in Amazon Lightsail.</p>
                *          <p>When copying a <i>manual snapshot</i>, be sure to define the <code>source
                *         region</code>, <code>source snapshot name</code>, and <code>target snapshot name</code>
                *       parameters.</p>
                *          <p>When copying an <i>automatic snapshot</i>, be sure to define the
                *         <code>source region</code>, <code>source resource name</code>, <code>target snapshot
                *         name</code>, and either the <code>restore date</code> or the <code>use latest restorable
                *         auto snapshot</code> parameters.</p>
                */
            copySnapshot(args: CopySnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CopySnapshotCommandOutput>;
            copySnapshot(args: CopySnapshotCommandInput, cb: (err: any, data?: CopySnapshotCommandOutput) => void): void;
            copySnapshot(args: CopySnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CopySnapshotCommandOutput) => void): void;
            /**
                * <p>Creates an Amazon Lightsail bucket.</p>
                *
                *          <p>A bucket is a cloud storage resource available in the Lightsail object storage service.
                *       Use buckets to store objects such as data and its descriptive metadata. For more information
                *       about buckets, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/buckets-in-amazon-lightsail">Buckets in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer
                *         Guide</i>.</p>
                */
            createBucket(args: CreateBucketCommandInput, options?: __HttpHandlerOptions): Promise<CreateBucketCommandOutput>;
            createBucket(args: CreateBucketCommandInput, cb: (err: any, data?: CreateBucketCommandOutput) => void): void;
            createBucket(args: CreateBucketCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateBucketCommandOutput) => void): void;
            /**
                * <p>Creates a new access key for the specified Amazon Lightsail bucket. Access keys consist of
                *       an access key ID and corresponding secret access key.</p>
                *
                *          <p>Access keys grant full programmatic access to the specified bucket and its objects. You
                *       can have a maximum of two access keys per bucket. Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketAccessKeys.html">GetBucketAccessKeys</a> action to get a list of current access keys for a specific bucket. For more
                *       information about access keys, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys">Creating access keys for a bucket in Amazon Lightsail</a> in the
                *         <i>Amazon Lightsail Developer Guide</i>.</p>
                *
                *          <important>
                *             <p>The <code>secretAccessKey</code> value is returned only in response to the
                *           <code>CreateBucketAccessKey</code> action. You can get a secret access key only when you
                *         first create an access key; you cannot get the secret access key later. If you lose the
                *         secret access key, you must create a new access key.</p>
                *          </important>
                */
            createBucketAccessKey(args: CreateBucketAccessKeyCommandInput, options?: __HttpHandlerOptions): Promise<CreateBucketAccessKeyCommandOutput>;
            createBucketAccessKey(args: CreateBucketAccessKeyCommandInput, cb: (err: any, data?: CreateBucketAccessKeyCommandOutput) => void): void;
            createBucketAccessKey(args: CreateBucketAccessKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateBucketAccessKeyCommandOutput) => void): void;
            /**
                * <p>Creates an SSL/TLS certificate for an Amazon Lightsail content delivery network (CDN)
                *       distribution and a container service.</p>
                *          <p>After the certificate is valid, use the <code>AttachCertificateToDistribution</code>
                *       action to use the certificate and its domains with your distribution. Or use the
                *         <code>UpdateContainerService</code> action to use the certificate and its domains with your
                *       container service.</p>
                *          <important>
                *             <p>Only certificates created in the <code>us-east-1</code>
                *         Amazon Web Services Region can be attached to Lightsail distributions. Lightsail
                *         distributions are global resources that can reference an origin in any Amazon Web Services
                *         Region, and distribute its content globally. However, all distributions are located in the
                *           <code>us-east-1</code> Region.</p>
                *          </important>
                */
            createCertificate(args: CreateCertificateCommandInput, options?: __HttpHandlerOptions): Promise<CreateCertificateCommandOutput>;
            createCertificate(args: CreateCertificateCommandInput, cb: (err: any, data?: CreateCertificateCommandOutput) => void): void;
            createCertificate(args: CreateCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCertificateCommandOutput) => void): void;
            /**
                * <p>Creates an AWS CloudFormation stack, which creates a new Amazon EC2 instance from an exported
                *       Amazon Lightsail snapshot. This operation results in a CloudFormation stack record that can be
                *       used to track the AWS CloudFormation stack created. Use the <code>get cloud formation stack
                *         records</code> operation to get a list of the CloudFormation stacks created.</p>
                *          <important>
                *             <p>Wait until after your new Amazon EC2 instance is created before running the <code>create
                *           cloud formation stack</code> operation again with the same export snapshot record.</p>
                *          </important>
                */
            createCloudFormationStack(args: CreateCloudFormationStackCommandInput, options?: __HttpHandlerOptions): Promise<CreateCloudFormationStackCommandOutput>;
            createCloudFormationStack(args: CreateCloudFormationStackCommandInput, cb: (err: any, data?: CreateCloudFormationStackCommandOutput) => void): void;
            createCloudFormationStack(args: CreateCloudFormationStackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateCloudFormationStackCommandOutput) => void): void;
            /**
                * <p>Creates an email or SMS text message contact method.</p>
                *          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
                *       You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services
                *       Regions, and SMS text messages cannot be sent to some countries/regions. For more information,
                *       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
                */
            createContactMethod(args: CreateContactMethodCommandInput, options?: __HttpHandlerOptions): Promise<CreateContactMethodCommandOutput>;
            createContactMethod(args: CreateContactMethodCommandInput, cb: (err: any, data?: CreateContactMethodCommandOutput) => void): void;
            createContactMethod(args: CreateContactMethodCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateContactMethodCommandOutput) => void): void;
            /**
                * <p>Creates an Amazon Lightsail container service.</p>
                *
                *          <p>A Lightsail container service is a compute resource to which you can deploy containers.
                *       For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-services">Container services in Amazon Lightsail</a> in the <i>Lightsail Dev
                *         Guide</i>.</p>
                */
            createContainerService(args: CreateContainerServiceCommandInput, options?: __HttpHandlerOptions): Promise<CreateContainerServiceCommandOutput>;
            createContainerService(args: CreateContainerServiceCommandInput, cb: (err: any, data?: CreateContainerServiceCommandOutput) => void): void;
            createContainerService(args: CreateContainerServiceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateContainerServiceCommandOutput) => void): void;
            /**
                * <p>Creates a deployment for your Amazon Lightsail container service.</p>
                *
                *          <p>A deployment specifies the containers that will be launched on the container service and
                *       their settings, such as the ports to open, the environment variables to apply, and the launch
                *       command to run. It also specifies the container that will serve as the public endpoint of the
                *       deployment and its settings, such as the HTTP or HTTPS port to use, and the health check
                *       configuration.</p>
                *
                *          <p>You can deploy containers to your container service using container images from a public
                *       registry such as Amazon ECR Public, or from your local machine. For more information, see
                *         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-container-images">Creating container images for your Amazon Lightsail container services</a> in the
                *         <i>Amazon Lightsail Developer Guide</i>.</p>
                */
            createContainerServiceDeployment(args: CreateContainerServiceDeploymentCommandInput, options?: __HttpHandlerOptions): Promise<CreateContainerServiceDeploymentCommandOutput>;
            createContainerServiceDeployment(args: CreateContainerServiceDeploymentCommandInput, cb: (err: any, data?: CreateContainerServiceDeploymentCommandOutput) => void): void;
            createContainerServiceDeployment(args: CreateContainerServiceDeploymentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateContainerServiceDeploymentCommandOutput) => void): void;
            /**
                * <p>Creates a temporary set of log in credentials that you can use to log in to the Docker
                *       process on your local machine. After you're logged in, you can use the native Docker commands
                *       to push your local container images to the container image registry of your Amazon Lightsail
                *       account so that you can use them with your Lightsail container service. The log in
                *       credentials expire 12 hours after they are created, at which point you will need to create a
                *       new set of log in credentials.</p>
                *
                *          <note>
                *             <p>You can only push container images to the container service registry of your Lightsail
                *         account. You cannot pull container images or perform any other container image management
                *         actions on the container service registry.</p>
                *          </note>
                *
                *          <p>After you push your container images to the container image registry of your Lightsail
                *       account, use the <code>RegisterContainerImage</code> action to register the pushed images to a
                *       specific Lightsail container service.</p>
                *
                *          <note>
                *             <p>This action is not required if you install and use the Lightsail Control
                *         (lightsailctl) plugin to push container images to your Lightsail container service. For
                *         more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-pushing-container-images">Pushing and managing container images on your Amazon Lightsail container services</a>
                *         in the <i>Amazon Lightsail Developer Guide</i>.</p>
                *          </note>
                */
            createContainerServiceRegistryLogin(args: CreateContainerServiceRegistryLoginCommandInput, options?: __HttpHandlerOptions): Promise<CreateContainerServiceRegistryLoginCommandOutput>;
            createContainerServiceRegistryLogin(args: CreateContainerServiceRegistryLoginCommandInput, cb: (err: any, data?: CreateContainerServiceRegistryLoginCommandOutput) => void): void;
            createContainerServiceRegistryLogin(args: CreateContainerServiceRegistryLoginCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateContainerServiceRegistryLoginCommandOutput) => void): void;
            /**
                * <p>Creates a block storage disk that can be attached to an Amazon Lightsail instance in the
                *       same Availability Zone (e.g., <code>us-east-2a</code>).</p>
                *          <p>The <code>create disk</code> operation supports tag-based access control via request tags.
                *       For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            createDisk(args: CreateDiskCommandInput, options?: __HttpHandlerOptions): Promise<CreateDiskCommandOutput>;
            createDisk(args: CreateDiskCommandInput, cb: (err: any, data?: CreateDiskCommandOutput) => void): void;
            createDisk(args: CreateDiskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDiskCommandOutput) => void): void;
            /**
                * <p>Creates a block storage disk from a manual or automatic snapshot of a disk. The resulting
                *       disk can be attached to an Amazon Lightsail instance in the same Availability Zone (e.g.,
                *         <code>us-east-2a</code>).</p>
                *          <p>The <code>create disk from snapshot</code> operation supports tag-based access control via
                *       request tags and resource tags applied to the resource identified by <code>disk snapshot
                *         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            createDiskFromSnapshot(args: CreateDiskFromSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CreateDiskFromSnapshotCommandOutput>;
            createDiskFromSnapshot(args: CreateDiskFromSnapshotCommandInput, cb: (err: any, data?: CreateDiskFromSnapshotCommandOutput) => void): void;
            createDiskFromSnapshot(args: CreateDiskFromSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDiskFromSnapshotCommandOutput) => void): void;
            /**
                * <p>Creates a snapshot of a block storage disk. You can use snapshots for backups, to make
                *       copies of disks, and to save data before shutting down a Lightsail instance.</p>
                *          <p>You can take a snapshot of an attached disk that is in use; however, snapshots only
                *       capture data that has been written to your disk at the time the snapshot command is issued.
                *       This may exclude any data that has been cached by any applications or the operating system. If
                *       you can pause any file systems on the disk long enough to take a snapshot, your snapshot
                *       should be complete. Nevertheless, if you cannot pause all file writes to the disk, you should
                *       unmount the disk from within the Lightsail instance, issue the create disk snapshot command,
                *       and then remount the disk to ensure a consistent and complete snapshot. You may remount and
                *       use your disk while the snapshot status is pending.</p>
                *          <p>You can also use this operation to create a snapshot of an instance's system volume. You
                *       might want to do this, for example, to recover data from the system volume of a botched
                *       instance or to create a backup of the system volume like you would for a block storage disk.
                *       To create a snapshot of a system volume, just define the <code>instance name</code> parameter
                *       when issuing the snapshot command, and a snapshot of the defined instance's system volume will
                *       be created. After the snapshot is available, you can create a block storage disk from the
                *       snapshot and attach it to a running instance to access the data on the disk.</p>
                *
                *          <p>The <code>create disk snapshot</code> operation supports tag-based access control via
                *       request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            createDiskSnapshot(args: CreateDiskSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CreateDiskSnapshotCommandOutput>;
            createDiskSnapshot(args: CreateDiskSnapshotCommandInput, cb: (err: any, data?: CreateDiskSnapshotCommandOutput) => void): void;
            createDiskSnapshot(args: CreateDiskSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDiskSnapshotCommandOutput) => void): void;
            /**
                * <p>Creates an Amazon Lightsail content delivery network (CDN) distribution.</p>
                *          <p>A distribution is a globally distributed network of caching servers that improve the
                *       performance of your website or web application hosted on a Lightsail instance. For more
                *       information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-content-delivery-network-distributions">Content delivery networks in Amazon Lightsail</a>.</p>
                */
            createDistribution(args: CreateDistributionCommandInput, options?: __HttpHandlerOptions): Promise<CreateDistributionCommandOutput>;
            createDistribution(args: CreateDistributionCommandInput, cb: (err: any, data?: CreateDistributionCommandOutput) => void): void;
            createDistribution(args: CreateDistributionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDistributionCommandOutput) => void): void;
            /**
                * <p>Creates a domain resource for the specified domain (e.g., example.com).</p>
                *          <p>The <code>create domain</code> operation supports tag-based access control via request
                *       tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            createDomain(args: CreateDomainCommandInput, options?: __HttpHandlerOptions): Promise<CreateDomainCommandOutput>;
            createDomain(args: CreateDomainCommandInput, cb: (err: any, data?: CreateDomainCommandOutput) => void): void;
            createDomain(args: CreateDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDomainCommandOutput) => void): void;
            /**
                * <p>Creates one of the following domain name system (DNS) records in a domain DNS zone:
                *       Address (A), canonical name (CNAME), mail exchanger (MX), name server (NS), start of authority
                *       (SOA), service locator (SRV), or text (TXT).</p>
                *
                *
                *
                *          <p>The <code>create domain entry</code> operation supports tag-based access control via
                *       resource tags applied to the resource identified by <code>domain name</code>. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            createDomainEntry(args: CreateDomainEntryCommandInput, options?: __HttpHandlerOptions): Promise<CreateDomainEntryCommandOutput>;
            createDomainEntry(args: CreateDomainEntryCommandInput, cb: (err: any, data?: CreateDomainEntryCommandOutput) => void): void;
            createDomainEntry(args: CreateDomainEntryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDomainEntryCommandOutput) => void): void;
            /**
                * <p>Creates one or more Amazon Lightsail instances.</p>
                *          <p>The <code>create instances</code> operation supports tag-based access control via request
                *       tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Developer Guide</a>.</p>
                */
            createInstances(args: CreateInstancesCommandInput, options?: __HttpHandlerOptions): Promise<CreateInstancesCommandOutput>;
            createInstances(args: CreateInstancesCommandInput, cb: (err: any, data?: CreateInstancesCommandOutput) => void): void;
            createInstances(args: CreateInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateInstancesCommandOutput) => void): void;
            /**
                * <p>Creates one or more new instances from a manual or automatic snapshot of an
                *       instance.</p>
                *          <p>The <code>create instances from snapshot</code> operation supports tag-based access
                *       control via request tags and resource tags applied to the resource identified by
                *         <code>instance snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            createInstancesFromSnapshot(args: CreateInstancesFromSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CreateInstancesFromSnapshotCommandOutput>;
            createInstancesFromSnapshot(args: CreateInstancesFromSnapshotCommandInput, cb: (err: any, data?: CreateInstancesFromSnapshotCommandOutput) => void): void;
            createInstancesFromSnapshot(args: CreateInstancesFromSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateInstancesFromSnapshotCommandOutput) => void): void;
            /**
                * <p>Creates a snapshot of a specific virtual private server, or <i>instance</i>.
                *       You can use a snapshot to create a new instance that is based on that snapshot.</p>
                *          <p>The <code>create instance snapshot</code> operation supports tag-based access control via
                *       request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            createInstanceSnapshot(args: CreateInstanceSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CreateInstanceSnapshotCommandOutput>;
            createInstanceSnapshot(args: CreateInstanceSnapshotCommandInput, cb: (err: any, data?: CreateInstanceSnapshotCommandOutput) => void): void;
            createInstanceSnapshot(args: CreateInstanceSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateInstanceSnapshotCommandOutput) => void): void;
            /**
                * <p>Creates a custom SSH key pair that you can use with an Amazon Lightsail
                *       instance.</p>
                *          <note>
                *             <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_DownloadDefaultKeyPair.html">DownloadDefaultKeyPair</a> action to create a Lightsail default key
                *         pair in an Amazon Web Services Region where a default key pair does not currently
                *         exist.</p>
                *          </note>
                *          <p>The <code>create key pair</code> operation supports tag-based access control via request
                *       tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            createKeyPair(args: CreateKeyPairCommandInput, options?: __HttpHandlerOptions): Promise<CreateKeyPairCommandOutput>;
            createKeyPair(args: CreateKeyPairCommandInput, cb: (err: any, data?: CreateKeyPairCommandOutput) => void): void;
            createKeyPair(args: CreateKeyPairCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateKeyPairCommandOutput) => void): void;
            /**
                * <p>Creates a Lightsail load balancer. To learn more about deciding whether to load balance
                *       your application, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/configure-lightsail-instances-for-load-balancing">Configure your Lightsail instances for load balancing</a>. You can create up to 5
                *       load balancers per AWS Region in your account.</p>
                *          <p>When you create a load balancer, you can specify a unique name and port settings. To
                *       change additional load balancer settings, use the <code>UpdateLoadBalancerAttribute</code>
                *       operation.</p>
                *          <p>The <code>create load balancer</code> operation supports tag-based access control via
                *       request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            createLoadBalancer(args: CreateLoadBalancerCommandInput, options?: __HttpHandlerOptions): Promise<CreateLoadBalancerCommandOutput>;
            createLoadBalancer(args: CreateLoadBalancerCommandInput, cb: (err: any, data?: CreateLoadBalancerCommandOutput) => void): void;
            createLoadBalancer(args: CreateLoadBalancerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLoadBalancerCommandOutput) => void): void;
            /**
                * <p>Creates an SSL/TLS certificate for an Amazon Lightsail load balancer.</p>
                *          <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p>
                *          <p>The <code>CreateLoadBalancerTlsCertificate</code> operation supports tag-based access
                *       control via resource tags applied to the resource identified by <code>load balancer
                *         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            createLoadBalancerTlsCertificate(args: CreateLoadBalancerTlsCertificateCommandInput, options?: __HttpHandlerOptions): Promise<CreateLoadBalancerTlsCertificateCommandOutput>;
            createLoadBalancerTlsCertificate(args: CreateLoadBalancerTlsCertificateCommandInput, cb: (err: any, data?: CreateLoadBalancerTlsCertificateCommandOutput) => void): void;
            createLoadBalancerTlsCertificate(args: CreateLoadBalancerTlsCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLoadBalancerTlsCertificateCommandOutput) => void): void;
            /**
                * <p>Creates a new database in Amazon Lightsail.</p>
                *          <p>The <code>create relational database</code> operation supports tag-based access control
                *       via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            createRelationalDatabase(args: CreateRelationalDatabaseCommandInput, options?: __HttpHandlerOptions): Promise<CreateRelationalDatabaseCommandOutput>;
            createRelationalDatabase(args: CreateRelationalDatabaseCommandInput, cb: (err: any, data?: CreateRelationalDatabaseCommandOutput) => void): void;
            createRelationalDatabase(args: CreateRelationalDatabaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRelationalDatabaseCommandOutput) => void): void;
            /**
                * <p>Creates a new database from an existing database snapshot in Amazon Lightsail.</p>
                *          <p>You can create a new database from a snapshot in if something goes wrong with your
                *       original database, or to change it to a different plan, such as a high availability or
                *       standard plan.</p>
                *          <p>The <code>create relational database from snapshot</code> operation supports tag-based
                *       access control via request tags and resource tags applied to the resource identified by
                *       relationalDatabaseSnapshotName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            createRelationalDatabaseFromSnapshot(args: CreateRelationalDatabaseFromSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CreateRelationalDatabaseFromSnapshotCommandOutput>;
            createRelationalDatabaseFromSnapshot(args: CreateRelationalDatabaseFromSnapshotCommandInput, cb: (err: any, data?: CreateRelationalDatabaseFromSnapshotCommandOutput) => void): void;
            createRelationalDatabaseFromSnapshot(args: CreateRelationalDatabaseFromSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRelationalDatabaseFromSnapshotCommandOutput) => void): void;
            /**
                * <p>Creates a snapshot of your database in Amazon Lightsail. You can use snapshots for backups,
                *       to make copies of a database, and to save data before deleting a database.</p>
                *          <p>The <code>create relational database snapshot</code> operation supports tag-based access
                *       control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            createRelationalDatabaseSnapshot(args: CreateRelationalDatabaseSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<CreateRelationalDatabaseSnapshotCommandOutput>;
            createRelationalDatabaseSnapshot(args: CreateRelationalDatabaseSnapshotCommandInput, cb: (err: any, data?: CreateRelationalDatabaseSnapshotCommandOutput) => void): void;
            createRelationalDatabaseSnapshot(args: CreateRelationalDatabaseSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRelationalDatabaseSnapshotCommandOutput) => void): void;
            /**
                * <p>Deletes an alarm.</p>
                *          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
                *       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
                *       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
                *         in Amazon Lightsail</a>.</p>
                */
            deleteAlarm(args: DeleteAlarmCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAlarmCommandOutput>;
            deleteAlarm(args: DeleteAlarmCommandInput, cb: (err: any, data?: DeleteAlarmCommandOutput) => void): void;
            deleteAlarm(args: DeleteAlarmCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAlarmCommandOutput) => void): void;
            /**
                * <p>Deletes an automatic snapshot of an instance or disk. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
                */
            deleteAutoSnapshot(args: DeleteAutoSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAutoSnapshotCommandOutput>;
            deleteAutoSnapshot(args: DeleteAutoSnapshotCommandInput, cb: (err: any, data?: DeleteAutoSnapshotCommandOutput) => void): void;
            deleteAutoSnapshot(args: DeleteAutoSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAutoSnapshotCommandOutput) => void): void;
            /**
                * <p>Deletes a Amazon Lightsail bucket.</p>
                *
                *          <note>
                *             <p>When you delete your bucket, the bucket name is released and can be reused for a new
                *         bucket in your account or another Amazon Web Services account.</p>
                *          </note>
                */
            deleteBucket(args: DeleteBucketCommandInput, options?: __HttpHandlerOptions): Promise<DeleteBucketCommandOutput>;
            deleteBucket(args: DeleteBucketCommandInput, cb: (err: any, data?: DeleteBucketCommandOutput) => void): void;
            deleteBucket(args: DeleteBucketCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteBucketCommandOutput) => void): void;
            /**
                * <p>Deletes an access key for the specified Amazon Lightsail bucket.</p>
                *
                *          <p>We recommend that you delete an access key if the secret access key is compromised.</p>
                *
                *          <p>For more information about access keys, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys">Creating access keys for a bucket in Amazon Lightsail</a> in the
                *         <i>Amazon Lightsail Developer Guide</i>.</p>
                */
            deleteBucketAccessKey(args: DeleteBucketAccessKeyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteBucketAccessKeyCommandOutput>;
            deleteBucketAccessKey(args: DeleteBucketAccessKeyCommandInput, cb: (err: any, data?: DeleteBucketAccessKeyCommandOutput) => void): void;
            deleteBucketAccessKey(args: DeleteBucketAccessKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteBucketAccessKeyCommandOutput) => void): void;
            /**
                * <p>Deletes an SSL/TLS certificate for your Amazon Lightsail content delivery network (CDN)
                *       distribution.</p>
                *          <p>Certificates that are currently attached to a distribution cannot be deleted. Use the
                *         <code>DetachCertificateFromDistribution</code> action to detach a certificate from a
                *       distribution.</p>
                */
            deleteCertificate(args: DeleteCertificateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteCertificateCommandOutput>;
            deleteCertificate(args: DeleteCertificateCommandInput, cb: (err: any, data?: DeleteCertificateCommandOutput) => void): void;
            deleteCertificate(args: DeleteCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteCertificateCommandOutput) => void): void;
            /**
                * <p>Deletes a contact method.</p>
                *          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
                *       You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services
                *       Regions, and SMS text messages cannot be sent to some countries/regions. For more information,
                *       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
                */
            deleteContactMethod(args: DeleteContactMethodCommandInput, options?: __HttpHandlerOptions): Promise<DeleteContactMethodCommandOutput>;
            deleteContactMethod(args: DeleteContactMethodCommandInput, cb: (err: any, data?: DeleteContactMethodCommandOutput) => void): void;
            deleteContactMethod(args: DeleteContactMethodCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteContactMethodCommandOutput) => void): void;
            /**
                * <p>Deletes a container image that is registered to your Amazon Lightsail container
                *       service.</p>
                */
            deleteContainerImage(args: DeleteContainerImageCommandInput, options?: __HttpHandlerOptions): Promise<DeleteContainerImageCommandOutput>;
            deleteContainerImage(args: DeleteContainerImageCommandInput, cb: (err: any, data?: DeleteContainerImageCommandOutput) => void): void;
            deleteContainerImage(args: DeleteContainerImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteContainerImageCommandOutput) => void): void;
            /**
                * <p>Deletes your Amazon Lightsail container service.</p>
                */
            deleteContainerService(args: DeleteContainerServiceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteContainerServiceCommandOutput>;
            deleteContainerService(args: DeleteContainerServiceCommandInput, cb: (err: any, data?: DeleteContainerServiceCommandOutput) => void): void;
            deleteContainerService(args: DeleteContainerServiceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteContainerServiceCommandOutput) => void): void;
            /**
                * <p>Deletes the specified block storage disk. The disk must be in the <code>available</code>
                *       state (not attached to a Lightsail instance).</p>
                *          <note>
                *             <p>The disk may remain in the <code>deleting</code> state for several minutes.</p>
                *          </note>
                *          <p>The <code>delete disk</code> operation supports tag-based access control via resource tags
                *       applied to the resource identified by <code>disk name</code>. For more information, see the
                *         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            deleteDisk(args: DeleteDiskCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDiskCommandOutput>;
            deleteDisk(args: DeleteDiskCommandInput, cb: (err: any, data?: DeleteDiskCommandOutput) => void): void;
            deleteDisk(args: DeleteDiskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDiskCommandOutput) => void): void;
            /**
                * <p>Deletes the specified disk snapshot.</p>
                *          <p>When you make periodic snapshots of a disk, the snapshots are incremental, and only the
                *       blocks on the device that have changed since your last snapshot are saved in the new snapshot.
                *       When you delete a snapshot, only the data not needed for any other snapshot is removed. So
                *       regardless of which prior snapshots have been deleted, all active snapshots will have access
                *       to all the information needed to restore the disk.</p>
                *          <p>The <code>delete disk snapshot</code> operation supports tag-based access control via
                *       resource tags applied to the resource identified by <code>disk snapshot name</code>. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            deleteDiskSnapshot(args: DeleteDiskSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDiskSnapshotCommandOutput>;
            deleteDiskSnapshot(args: DeleteDiskSnapshotCommandInput, cb: (err: any, data?: DeleteDiskSnapshotCommandOutput) => void): void;
            deleteDiskSnapshot(args: DeleteDiskSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDiskSnapshotCommandOutput) => void): void;
            /**
                * <p>Deletes your Amazon Lightsail content delivery network (CDN) distribution.</p>
                */
            deleteDistribution(args: DeleteDistributionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDistributionCommandOutput>;
            deleteDistribution(args: DeleteDistributionCommandInput, cb: (err: any, data?: DeleteDistributionCommandOutput) => void): void;
            deleteDistribution(args: DeleteDistributionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDistributionCommandOutput) => void): void;
            /**
                * <p>Deletes the specified domain recordset and all of its domain records.</p>
                *          <p>The <code>delete domain</code> operation supports tag-based access control via resource
                *       tags applied to the resource identified by <code>domain name</code>. For more information, see
                *       the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            deleteDomain(args: DeleteDomainCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDomainCommandOutput>;
            deleteDomain(args: DeleteDomainCommandInput, cb: (err: any, data?: DeleteDomainCommandOutput) => void): void;
            deleteDomain(args: DeleteDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDomainCommandOutput) => void): void;
            /**
                * <p>Deletes a specific domain entry.</p>
                *          <p>The <code>delete domain entry</code> operation supports tag-based access control via
                *       resource tags applied to the resource identified by <code>domain name</code>. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            deleteDomainEntry(args: DeleteDomainEntryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDomainEntryCommandOutput>;
            deleteDomainEntry(args: DeleteDomainEntryCommandInput, cb: (err: any, data?: DeleteDomainEntryCommandOutput) => void): void;
            deleteDomainEntry(args: DeleteDomainEntryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDomainEntryCommandOutput) => void): void;
            /**
                * <p>Deletes an Amazon Lightsail instance.</p>
                *          <p>The <code>delete instance</code> operation supports tag-based access control via resource
                *       tags applied to the resource identified by <code>instance name</code>. For more information,
                *       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            deleteInstance(args: DeleteInstanceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteInstanceCommandOutput>;
            deleteInstance(args: DeleteInstanceCommandInput, cb: (err: any, data?: DeleteInstanceCommandOutput) => void): void;
            deleteInstance(args: DeleteInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteInstanceCommandOutput) => void): void;
            /**
                * <p>Deletes a specific snapshot of a virtual private server (or
                *       <i>instance</i>).</p>
                *          <p>The <code>delete instance snapshot</code> operation supports tag-based access control via
                *       resource tags applied to the resource identified by <code>instance snapshot name</code>. For
                *       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            deleteInstanceSnapshot(args: DeleteInstanceSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<DeleteInstanceSnapshotCommandOutput>;
            deleteInstanceSnapshot(args: DeleteInstanceSnapshotCommandInput, cb: (err: any, data?: DeleteInstanceSnapshotCommandOutput) => void): void;
            deleteInstanceSnapshot(args: DeleteInstanceSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteInstanceSnapshotCommandOutput) => void): void;
            /**
                * <p>Deletes the specified key pair by removing the public key from Amazon Lightsail.</p>
                *          <p>You can delete key pairs that were created using the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_ImportKeyPair.html">ImportKeyPair</a> and
                *         <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateKeyPair.html">CreateKeyPair</a> actions, as well as the Lightsail default key pair. A new default
                *       key pair will not be created unless you launch an instance without specifying a custom key
                *       pair, or you call the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_DownloadDefaultKeyPair.html">DownloadDefaultKeyPair</a> API. </p>
                *
                *          <p>The <code>delete key pair</code> operation supports tag-based access control via resource
                *       tags applied to the resource identified by <code>key pair name</code>. For more information,
                *       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            deleteKeyPair(args: DeleteKeyPairCommandInput, options?: __HttpHandlerOptions): Promise<DeleteKeyPairCommandOutput>;
            deleteKeyPair(args: DeleteKeyPairCommandInput, cb: (err: any, data?: DeleteKeyPairCommandOutput) => void): void;
            deleteKeyPair(args: DeleteKeyPairCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteKeyPairCommandOutput) => void): void;
            /**
                * <p>Deletes the known host key or certificate used by the Amazon Lightsail browser-based SSH or
                *       RDP clients to authenticate an instance. This operation enables the Lightsail browser-based
                *       SSH or RDP clients to connect to the instance after a host key mismatch.</p>
                *          <important>
                *             <p>Perform this operation only if you were expecting the host key or certificate mismatch
                *         or if you are familiar with the new host key or certificate on the instance. For more
                *         information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-troubleshooting-browser-based-ssh-rdp-client-connection">Troubleshooting connection issues when using the Amazon Lightsail browser-based SSH or RDP
                *           client</a>.</p>
                *          </important>
                */
            deleteKnownHostKeys(args: DeleteKnownHostKeysCommandInput, options?: __HttpHandlerOptions): Promise<DeleteKnownHostKeysCommandOutput>;
            deleteKnownHostKeys(args: DeleteKnownHostKeysCommandInput, cb: (err: any, data?: DeleteKnownHostKeysCommandOutput) => void): void;
            deleteKnownHostKeys(args: DeleteKnownHostKeysCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteKnownHostKeysCommandOutput) => void): void;
            /**
                * <p>Deletes a Lightsail load balancer and all its associated SSL/TLS certificates. Once the
                *       load balancer is deleted, you will need to create a new load balancer, create a new
                *       certificate, and verify domain ownership again.</p>
                *          <p>The <code>delete load balancer</code> operation supports tag-based access control via
                *       resource tags applied to the resource identified by <code>load balancer name</code>. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            deleteLoadBalancer(args: DeleteLoadBalancerCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLoadBalancerCommandOutput>;
            deleteLoadBalancer(args: DeleteLoadBalancerCommandInput, cb: (err: any, data?: DeleteLoadBalancerCommandOutput) => void): void;
            deleteLoadBalancer(args: DeleteLoadBalancerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLoadBalancerCommandOutput) => void): void;
            /**
                * <p>Deletes an SSL/TLS certificate associated with a Lightsail load balancer.</p>
                *          <p>The <code>DeleteLoadBalancerTlsCertificate</code> operation supports tag-based access
                *       control via resource tags applied to the resource identified by <code>load balancer
                *         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            deleteLoadBalancerTlsCertificate(args: DeleteLoadBalancerTlsCertificateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLoadBalancerTlsCertificateCommandOutput>;
            deleteLoadBalancerTlsCertificate(args: DeleteLoadBalancerTlsCertificateCommandInput, cb: (err: any, data?: DeleteLoadBalancerTlsCertificateCommandOutput) => void): void;
            deleteLoadBalancerTlsCertificate(args: DeleteLoadBalancerTlsCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLoadBalancerTlsCertificateCommandOutput) => void): void;
            /**
                * <p>Deletes a database in Amazon Lightsail.</p>
                *          <p>The <code>delete relational database</code> operation supports tag-based access control
                *       via resource tags applied to the resource identified by relationalDatabaseName. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            deleteRelationalDatabase(args: DeleteRelationalDatabaseCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRelationalDatabaseCommandOutput>;
            deleteRelationalDatabase(args: DeleteRelationalDatabaseCommandInput, cb: (err: any, data?: DeleteRelationalDatabaseCommandOutput) => void): void;
            deleteRelationalDatabase(args: DeleteRelationalDatabaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRelationalDatabaseCommandOutput) => void): void;
            /**
                * <p>Deletes a database snapshot in Amazon Lightsail.</p>
                *          <p>The <code>delete relational database snapshot</code> operation supports tag-based access
                *       control via resource tags applied to the resource identified by relationalDatabaseName. For
                *       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            deleteRelationalDatabaseSnapshot(args: DeleteRelationalDatabaseSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRelationalDatabaseSnapshotCommandOutput>;
            deleteRelationalDatabaseSnapshot(args: DeleteRelationalDatabaseSnapshotCommandInput, cb: (err: any, data?: DeleteRelationalDatabaseSnapshotCommandOutput) => void): void;
            deleteRelationalDatabaseSnapshot(args: DeleteRelationalDatabaseSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRelationalDatabaseSnapshotCommandOutput) => void): void;
            /**
                * <p>Detaches an SSL/TLS certificate from your Amazon Lightsail content delivery network (CDN)
                *       distribution.</p>
                *          <p>After the certificate is detached, your distribution stops accepting traffic for all of
                *       the domains that are associated with the certificate.</p>
                */
            detachCertificateFromDistribution(args: DetachCertificateFromDistributionCommandInput, options?: __HttpHandlerOptions): Promise<DetachCertificateFromDistributionCommandOutput>;
            detachCertificateFromDistribution(args: DetachCertificateFromDistributionCommandInput, cb: (err: any, data?: DetachCertificateFromDistributionCommandOutput) => void): void;
            detachCertificateFromDistribution(args: DetachCertificateFromDistributionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetachCertificateFromDistributionCommandOutput) => void): void;
            /**
                * <p>Detaches a stopped block storage disk from a Lightsail instance. Make sure to unmount
                *       any file systems on the device within your operating system before stopping the instance and
                *       detaching the disk.</p>
                *          <p>The <code>detach disk</code> operation supports tag-based access control via resource tags
                *       applied to the resource identified by <code>disk name</code>. For more information, see the
                *         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            detachDisk(args: DetachDiskCommandInput, options?: __HttpHandlerOptions): Promise<DetachDiskCommandOutput>;
            detachDisk(args: DetachDiskCommandInput, cb: (err: any, data?: DetachDiskCommandOutput) => void): void;
            detachDisk(args: DetachDiskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetachDiskCommandOutput) => void): void;
            /**
                * <p>Detaches the specified instances from a Lightsail load balancer.</p>
                *          <p>This operation waits until the instances are no longer needed before they are detached
                *       from the load balancer.</p>
                *          <p>The <code>detach instances from load balancer</code> operation supports tag-based access
                *       control via resource tags applied to the resource identified by <code>load balancer
                *         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            detachInstancesFromLoadBalancer(args: DetachInstancesFromLoadBalancerCommandInput, options?: __HttpHandlerOptions): Promise<DetachInstancesFromLoadBalancerCommandOutput>;
            detachInstancesFromLoadBalancer(args: DetachInstancesFromLoadBalancerCommandInput, cb: (err: any, data?: DetachInstancesFromLoadBalancerCommandOutput) => void): void;
            detachInstancesFromLoadBalancer(args: DetachInstancesFromLoadBalancerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetachInstancesFromLoadBalancerCommandOutput) => void): void;
            /**
                * <p>Detaches a static IP from the Amazon Lightsail instance to which it is attached.</p>
                */
            detachStaticIp(args: DetachStaticIpCommandInput, options?: __HttpHandlerOptions): Promise<DetachStaticIpCommandOutput>;
            detachStaticIp(args: DetachStaticIpCommandInput, cb: (err: any, data?: DetachStaticIpCommandOutput) => void): void;
            detachStaticIp(args: DetachStaticIpCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetachStaticIpCommandOutput) => void): void;
            /**
                * <p>Disables an add-on for an Amazon Lightsail resource. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
                */
            disableAddOn(args: DisableAddOnCommandInput, options?: __HttpHandlerOptions): Promise<DisableAddOnCommandOutput>;
            disableAddOn(args: DisableAddOnCommandInput, cb: (err: any, data?: DisableAddOnCommandOutput) => void): void;
            disableAddOn(args: DisableAddOnCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisableAddOnCommandOutput) => void): void;
            /**
                * <p>Downloads the regional Amazon Lightsail default key pair.</p>
                *          <p>This action also creates a Lightsail default key pair if a default key pair
                *       does not currently exist in the Amazon Web Services Region.</p>
                */
            downloadDefaultKeyPair(args: DownloadDefaultKeyPairCommandInput, options?: __HttpHandlerOptions): Promise<DownloadDefaultKeyPairCommandOutput>;
            downloadDefaultKeyPair(args: DownloadDefaultKeyPairCommandInput, cb: (err: any, data?: DownloadDefaultKeyPairCommandOutput) => void): void;
            downloadDefaultKeyPair(args: DownloadDefaultKeyPairCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DownloadDefaultKeyPairCommandOutput) => void): void;
            /**
                * <p>Enables or modifies an add-on for an Amazon Lightsail resource. For more information, see
                *       the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
                */
            enableAddOn(args: EnableAddOnCommandInput, options?: __HttpHandlerOptions): Promise<EnableAddOnCommandOutput>;
            enableAddOn(args: EnableAddOnCommandInput, cb: (err: any, data?: EnableAddOnCommandOutput) => void): void;
            enableAddOn(args: EnableAddOnCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableAddOnCommandOutput) => void): void;
            /**
                * <p>Exports an Amazon Lightsail instance or block storage disk snapshot to Amazon Elastic Compute Cloud (Amazon EC2).
                *       This operation results in an export snapshot record that can be used with the <code>create
                *         cloud formation stack</code> operation to create new Amazon EC2 instances.</p>
                *          <p>Exported instance snapshots appear in Amazon EC2 as Amazon Machine Images (AMIs), and the
                *       instance system disk appears as an Amazon Elastic Block Store (Amazon EBS) volume. Exported disk snapshots appear in
                *       Amazon EC2 as Amazon EBS volumes. Snapshots are exported to the same Amazon Web Services Region in
                *       Amazon EC2 as the source Lightsail snapshot.</p>
                *          <p></p>
                *          <p>The <code>export snapshot</code> operation supports tag-based access control via resource
                *       tags applied to the resource identified by <code>source snapshot name</code>. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                *          <note>
                *             <p>Use the <code>get instance snapshots</code> or <code>get disk snapshots</code>
                *         operations to get a list of snapshots that you can export to Amazon EC2.</p>
                *          </note>
                */
            exportSnapshot(args: ExportSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<ExportSnapshotCommandOutput>;
            exportSnapshot(args: ExportSnapshotCommandInput, cb: (err: any, data?: ExportSnapshotCommandOutput) => void): void;
            exportSnapshot(args: ExportSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ExportSnapshotCommandOutput) => void): void;
            /**
                * <p>Returns the names of all active (not deleted) resources.</p>
                */
            getActiveNames(args: GetActiveNamesCommandInput, options?: __HttpHandlerOptions): Promise<GetActiveNamesCommandOutput>;
            getActiveNames(args: GetActiveNamesCommandInput, cb: (err: any, data?: GetActiveNamesCommandOutput) => void): void;
            getActiveNames(args: GetActiveNamesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetActiveNamesCommandOutput) => void): void;
            /**
                * <p>Returns information about the configured alarms. Specify an alarm name in your request to
                *       return information about a specific alarm, or specify a monitored resource name to return
                *       information about all alarms for a specific resource.</p>
                *          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
                *       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
                *       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
                *         in Amazon Lightsail</a>.</p>
                */
            getAlarms(args: GetAlarmsCommandInput, options?: __HttpHandlerOptions): Promise<GetAlarmsCommandOutput>;
            getAlarms(args: GetAlarmsCommandInput, cb: (err: any, data?: GetAlarmsCommandOutput) => void): void;
            getAlarms(args: GetAlarmsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAlarmsCommandOutput) => void): void;
            /**
                * <p>Returns the available automatic snapshots for an instance or disk. For more information,
                *       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
                */
            getAutoSnapshots(args: GetAutoSnapshotsCommandInput, options?: __HttpHandlerOptions): Promise<GetAutoSnapshotsCommandOutput>;
            getAutoSnapshots(args: GetAutoSnapshotsCommandInput, cb: (err: any, data?: GetAutoSnapshotsCommandOutput) => void): void;
            getAutoSnapshots(args: GetAutoSnapshotsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAutoSnapshotsCommandOutput) => void): void;
            /**
                * <p>Returns the list of available instance images, or <i>blueprints</i>. You can
                *       use a blueprint to create a new instance already running a specific operating system, as well
                *       as a preinstalled app or development stack. The software each instance is running depends on
                *       the blueprint image you choose.</p>
                *          <note>
                *             <p>Use active blueprints when creating new instances. Inactive blueprints are listed to
                *         support customers with existing instances and are not necessarily available to create new
                *         instances. Blueprints are marked inactive when they become outdated due to operating system
                *         updates or new application releases.</p>
                *          </note>
                */
            getBlueprints(args: GetBlueprintsCommandInput, options?: __HttpHandlerOptions): Promise<GetBlueprintsCommandOutput>;
            getBlueprints(args: GetBlueprintsCommandInput, cb: (err: any, data?: GetBlueprintsCommandOutput) => void): void;
            getBlueprints(args: GetBlueprintsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBlueprintsCommandOutput) => void): void;
            /**
                * <p>Returns the existing access key IDs for the specified Amazon Lightsail bucket.</p>
                *
                *          <important>
                *             <p>This action does not return the secret access key value of an access key. You can get a
                *         secret access key only when you create it from the response of the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html">CreateBucketAccessKey</a> action. If you lose the secret access key, you must create
                *         a new access key.</p>
                *          </important>
                */
            getBucketAccessKeys(args: GetBucketAccessKeysCommandInput, options?: __HttpHandlerOptions): Promise<GetBucketAccessKeysCommandOutput>;
            getBucketAccessKeys(args: GetBucketAccessKeysCommandInput, cb: (err: any, data?: GetBucketAccessKeysCommandOutput) => void): void;
            getBucketAccessKeys(args: GetBucketAccessKeysCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBucketAccessKeysCommandOutput) => void): void;
            /**
                * <p>Returns the bundles that you can apply to a Amazon Lightsail bucket.</p>
                *
                *          <p>The bucket bundle specifies the monthly cost, storage quota, and data transfer quota for a
                *       bucket.</p>
                *
                *          <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to update the
                *       bundle for a bucket.</p>
                */
            getBucketBundles(args: GetBucketBundlesCommandInput, options?: __HttpHandlerOptions): Promise<GetBucketBundlesCommandOutput>;
            getBucketBundles(args: GetBucketBundlesCommandInput, cb: (err: any, data?: GetBucketBundlesCommandOutput) => void): void;
            getBucketBundles(args: GetBucketBundlesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBucketBundlesCommandOutput) => void): void;
            /**
                * <p>Returns the data points of a specific metric for an Amazon Lightsail bucket.</p>
                *
                *          <p>Metrics report the utilization of a bucket. View and collect metric data regularly to
                *       monitor the number of objects stored in a bucket (including object versions) and the storage
                *       space used by those objects.</p>
                */
            getBucketMetricData(args: GetBucketMetricDataCommandInput, options?: __HttpHandlerOptions): Promise<GetBucketMetricDataCommandOutput>;
            getBucketMetricData(args: GetBucketMetricDataCommandInput, cb: (err: any, data?: GetBucketMetricDataCommandOutput) => void): void;
            getBucketMetricData(args: GetBucketMetricDataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBucketMetricDataCommandOutput) => void): void;
            /**
                * <p>Returns information about one or more Amazon Lightsail buckets. The information returned
                *       includes the synchronization status of the Amazon Simple Storage Service (Amazon S3)
                *       account-level block public access feature for your Lightsail buckets.</p>
                *
                *          <p>For more information about buckets, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/buckets-in-amazon-lightsail">Buckets in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer
                *         Guide</i>.</p>
                */
            getBuckets(args: GetBucketsCommandInput, options?: __HttpHandlerOptions): Promise<GetBucketsCommandOutput>;
            getBuckets(args: GetBucketsCommandInput, cb: (err: any, data?: GetBucketsCommandOutput) => void): void;
            getBuckets(args: GetBucketsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBucketsCommandOutput) => void): void;
            /**
                * <p>Returns the bundles that you can apply to an Amazon Lightsail instance when you create
                *       it.</p>
                *
                *          <p>A bundle describes the specifications of an instance, such as the monthly cost, amount of
                *       memory, the number of vCPUs, amount of storage space, and monthly network data transfer
                *       quota.</p>
                *
                *          <note>
                *             <p>Bundles are referred to as <i>instance plans</i> in the Lightsail
                *         console.</p>
                *          </note>
                */
            getBundles(args: GetBundlesCommandInput, options?: __HttpHandlerOptions): Promise<GetBundlesCommandOutput>;
            getBundles(args: GetBundlesCommandInput, cb: (err: any, data?: GetBundlesCommandOutput) => void): void;
            getBundles(args: GetBundlesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBundlesCommandOutput) => void): void;
            /**
                * <p>Returns information about one or more Amazon Lightsail SSL/TLS certificates.</p>
                *          <note>
                *             <p>To get a summary of a certificate, ommit <code>includeCertificateDetails</code> from
                *         your request. The response will include only the certificate Amazon Resource Name (ARN),
                *         certificate name, domain name, and tags.</p>
                *          </note>
                */
            getCertificates(args: GetCertificatesCommandInput, options?: __HttpHandlerOptions): Promise<GetCertificatesCommandOutput>;
            getCertificates(args: GetCertificatesCommandInput, cb: (err: any, data?: GetCertificatesCommandOutput) => void): void;
            getCertificates(args: GetCertificatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCertificatesCommandOutput) => void): void;
            /**
                * <p>Returns the CloudFormation stack record created as a result of the <code>create cloud
                *         formation stack</code> operation.</p>
                *          <p>An AWS CloudFormation stack is used to create a new Amazon EC2 instance from an exported Lightsail
                *       snapshot.</p>
                */
            getCloudFormationStackRecords(args: GetCloudFormationStackRecordsCommandInput, options?: __HttpHandlerOptions): Promise<GetCloudFormationStackRecordsCommandOutput>;
            getCloudFormationStackRecords(args: GetCloudFormationStackRecordsCommandInput, cb: (err: any, data?: GetCloudFormationStackRecordsCommandOutput) => void): void;
            getCloudFormationStackRecords(args: GetCloudFormationStackRecordsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCloudFormationStackRecordsCommandOutput) => void): void;
            /**
                * <p>Returns information about the configured contact methods. Specify a protocol in your
                *       request to return information about a specific contact method.</p>
                *          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
                *       You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services
                *       Regions, and SMS text messages cannot be sent to some countries/regions. For more information,
                *       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
                */
            getContactMethods(args: GetContactMethodsCommandInput, options?: __HttpHandlerOptions): Promise<GetContactMethodsCommandOutput>;
            getContactMethods(args: GetContactMethodsCommandInput, cb: (err: any, data?: GetContactMethodsCommandOutput) => void): void;
            getContactMethods(args: GetContactMethodsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContactMethodsCommandOutput) => void): void;
            /**
                * <p>Returns information about Amazon Lightsail containers, such as the current version of the
                *       Lightsail Control (lightsailctl) plugin.</p>
                */
            getContainerAPIMetadata(args: GetContainerAPIMetadataCommandInput, options?: __HttpHandlerOptions): Promise<GetContainerAPIMetadataCommandOutput>;
            getContainerAPIMetadata(args: GetContainerAPIMetadataCommandInput, cb: (err: any, data?: GetContainerAPIMetadataCommandOutput) => void): void;
            getContainerAPIMetadata(args: GetContainerAPIMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContainerAPIMetadataCommandOutput) => void): void;
            /**
                * <p>Returns the container images that are registered to your Amazon Lightsail container
                *       service.</p>
                *
                *          <note>
                *             <p>If you created a deployment on your Lightsail container service that uses container
                *         images from a public registry like Docker Hub, those images are not returned as part of this
                *         action. Those images are not registered to your Lightsail container service.</p>
                *          </note>
                */
            getContainerImages(args: GetContainerImagesCommandInput, options?: __HttpHandlerOptions): Promise<GetContainerImagesCommandOutput>;
            getContainerImages(args: GetContainerImagesCommandInput, cb: (err: any, data?: GetContainerImagesCommandOutput) => void): void;
            getContainerImages(args: GetContainerImagesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContainerImagesCommandOutput) => void): void;
            /**
                * <p>Returns the log events of a container of your Amazon Lightsail container service.</p>
                *
                *          <p>If your container service has more than one node (i.e., a scale greater than 1), then the
                *       log events that are returned for the specified container are merged from all nodes on your
                *       container service.</p>
                *
                *          <note>
                *             <p>Container logs are retained for a certain amount of time. For more information, see
                *           <a href="https://docs.aws.amazon.com/general/latest/gr/lightsail.html">Amazon Lightsail
                *           endpoints and quotas</a> in the <i>AWS General Reference</i>.</p>
                *          </note>
                */
            getContainerLog(args: GetContainerLogCommandInput, options?: __HttpHandlerOptions): Promise<GetContainerLogCommandOutput>;
            getContainerLog(args: GetContainerLogCommandInput, cb: (err: any, data?: GetContainerLogCommandOutput) => void): void;
            getContainerLog(args: GetContainerLogCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContainerLogCommandOutput) => void): void;
            /**
                * <p>Returns the deployments for your Amazon Lightsail container service</p>
                *
                *          <p>A deployment specifies the settings, such as the ports and launch command, of containers
                *       that are deployed to your container service.</p>
                *
                *          <p>The deployments are ordered by version in ascending order. The newest version is listed at
                *       the top of the response.</p>
                *
                *          <note>
                *             <p>A set number of deployments are kept before the oldest one is replaced with the newest
                *         one. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/lightsail.html">Amazon Lightsail
                *           endpoints and quotas</a> in the <i>AWS General Reference</i>.</p>
                *          </note>
                */
            getContainerServiceDeployments(args: GetContainerServiceDeploymentsCommandInput, options?: __HttpHandlerOptions): Promise<GetContainerServiceDeploymentsCommandOutput>;
            getContainerServiceDeployments(args: GetContainerServiceDeploymentsCommandInput, cb: (err: any, data?: GetContainerServiceDeploymentsCommandOutput) => void): void;
            getContainerServiceDeployments(args: GetContainerServiceDeploymentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContainerServiceDeploymentsCommandOutput) => void): void;
            /**
                * <p>Returns the data points of a specific metric of your Amazon Lightsail container
                *       service.</p>
                *
                *          <p>Metrics report the utilization of your resources. Monitor and collect metric data
                *       regularly to maintain the reliability, availability, and performance of your resources.</p>
                */
            getContainerServiceMetricData(args: GetContainerServiceMetricDataCommandInput, options?: __HttpHandlerOptions): Promise<GetContainerServiceMetricDataCommandOutput>;
            getContainerServiceMetricData(args: GetContainerServiceMetricDataCommandInput, cb: (err: any, data?: GetContainerServiceMetricDataCommandOutput) => void): void;
            getContainerServiceMetricData(args: GetContainerServiceMetricDataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContainerServiceMetricDataCommandOutput) => void): void;
            /**
                * <p>Returns the list of powers that can be specified for your Amazon Lightsail container
                *       services.</p>
                *
                *          <p>The power specifies the amount of memory, the number of vCPUs, and the base price of the
                *       container service.</p>
                */
            getContainerServicePowers(args: GetContainerServicePowersCommandInput, options?: __HttpHandlerOptions): Promise<GetContainerServicePowersCommandOutput>;
            getContainerServicePowers(args: GetContainerServicePowersCommandInput, cb: (err: any, data?: GetContainerServicePowersCommandOutput) => void): void;
            getContainerServicePowers(args: GetContainerServicePowersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContainerServicePowersCommandOutput) => void): void;
            /**
                * <p>Returns information about one or more of your Amazon Lightsail container services.</p>
                */
            getContainerServices(args: GetContainerServicesCommandInput, options?: __HttpHandlerOptions): Promise<GetContainerServicesCommandOutput>;
            getContainerServices(args: GetContainerServicesCommandInput, cb: (err: any, data?: GetContainerServicesCommandOutput) => void): void;
            getContainerServices(args: GetContainerServicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContainerServicesCommandOutput) => void): void;
            /**
                * <p>Returns information about a specific block storage disk.</p>
                */
            getDisk(args: GetDiskCommandInput, options?: __HttpHandlerOptions): Promise<GetDiskCommandOutput>;
            getDisk(args: GetDiskCommandInput, cb: (err: any, data?: GetDiskCommandOutput) => void): void;
            getDisk(args: GetDiskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDiskCommandOutput) => void): void;
            /**
                * <p>Returns information about all block storage disks in your AWS account and region.</p>
                */
            getDisks(args: GetDisksCommandInput, options?: __HttpHandlerOptions): Promise<GetDisksCommandOutput>;
            getDisks(args: GetDisksCommandInput, cb: (err: any, data?: GetDisksCommandOutput) => void): void;
            getDisks(args: GetDisksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDisksCommandOutput) => void): void;
            /**
                * <p>Returns information about a specific block storage disk snapshot.</p>
                */
            getDiskSnapshot(args: GetDiskSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<GetDiskSnapshotCommandOutput>;
            getDiskSnapshot(args: GetDiskSnapshotCommandInput, cb: (err: any, data?: GetDiskSnapshotCommandOutput) => void): void;
            getDiskSnapshot(args: GetDiskSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDiskSnapshotCommandOutput) => void): void;
            /**
                * <p>Returns information about all block storage disk snapshots in your AWS account and
                *       region.</p>
                */
            getDiskSnapshots(args: GetDiskSnapshotsCommandInput, options?: __HttpHandlerOptions): Promise<GetDiskSnapshotsCommandOutput>;
            getDiskSnapshots(args: GetDiskSnapshotsCommandInput, cb: (err: any, data?: GetDiskSnapshotsCommandOutput) => void): void;
            getDiskSnapshots(args: GetDiskSnapshotsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDiskSnapshotsCommandOutput) => void): void;
            /**
                * <p>Returns the bundles that can be applied to your Amazon Lightsail content delivery network
                *       (CDN) distributions.</p>
                *          <p>A distribution bundle specifies the monthly network transfer quota and monthly cost of
                *       your distribution.</p>
                */
            getDistributionBundles(args: GetDistributionBundlesCommandInput, options?: __HttpHandlerOptions): Promise<GetDistributionBundlesCommandOutput>;
            getDistributionBundles(args: GetDistributionBundlesCommandInput, cb: (err: any, data?: GetDistributionBundlesCommandOutput) => void): void;
            getDistributionBundles(args: GetDistributionBundlesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDistributionBundlesCommandOutput) => void): void;
            /**
                * <p>Returns the timestamp and status of the last cache reset of a specific Amazon Lightsail
                *       content delivery network (CDN) distribution.</p>
                */
            getDistributionLatestCacheReset(args: GetDistributionLatestCacheResetCommandInput, options?: __HttpHandlerOptions): Promise<GetDistributionLatestCacheResetCommandOutput>;
            getDistributionLatestCacheReset(args: GetDistributionLatestCacheResetCommandInput, cb: (err: any, data?: GetDistributionLatestCacheResetCommandOutput) => void): void;
            getDistributionLatestCacheReset(args: GetDistributionLatestCacheResetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDistributionLatestCacheResetCommandOutput) => void): void;
            /**
                * <p>Returns the data points of a specific metric for an Amazon Lightsail content delivery
                *       network (CDN) distribution.</p>
                *          <p>Metrics report the utilization of your resources, and the error counts generated by them.
                *       Monitor and collect metric data regularly to maintain the reliability, availability, and
                *       performance of your resources.</p>
                */
            getDistributionMetricData(args: GetDistributionMetricDataCommandInput, options?: __HttpHandlerOptions): Promise<GetDistributionMetricDataCommandOutput>;
            getDistributionMetricData(args: GetDistributionMetricDataCommandInput, cb: (err: any, data?: GetDistributionMetricDataCommandOutput) => void): void;
            getDistributionMetricData(args: GetDistributionMetricDataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDistributionMetricDataCommandOutput) => void): void;
            /**
                * <p>Returns information about one or more of your Amazon Lightsail content delivery network
                *       (CDN) distributions.</p>
                */
            getDistributions(args: GetDistributionsCommandInput, options?: __HttpHandlerOptions): Promise<GetDistributionsCommandOutput>;
            getDistributions(args: GetDistributionsCommandInput, cb: (err: any, data?: GetDistributionsCommandOutput) => void): void;
            getDistributions(args: GetDistributionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDistributionsCommandOutput) => void): void;
            /**
                * <p>Returns information about a specific domain recordset.</p>
                */
            getDomain(args: GetDomainCommandInput, options?: __HttpHandlerOptions): Promise<GetDomainCommandOutput>;
            getDomain(args: GetDomainCommandInput, cb: (err: any, data?: GetDomainCommandOutput) => void): void;
            getDomain(args: GetDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDomainCommandOutput) => void): void;
            /**
                * <p>Returns a list of all domains in the user's account.</p>
                */
            getDomains(args: GetDomainsCommandInput, options?: __HttpHandlerOptions): Promise<GetDomainsCommandOutput>;
            getDomains(args: GetDomainsCommandInput, cb: (err: any, data?: GetDomainsCommandOutput) => void): void;
            getDomains(args: GetDomainsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDomainsCommandOutput) => void): void;
            /**
                * <p>Returns all export snapshot records created as a result of the <code>export
                *         snapshot</code> operation.</p>
                *          <p>An export snapshot record can be used to create a new Amazon EC2 instance and its related
                *       resources with the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateCloudFormationStack.html">CreateCloudFormationStack</a>
                *       action.</p>
                */
            getExportSnapshotRecords(args: GetExportSnapshotRecordsCommandInput, options?: __HttpHandlerOptions): Promise<GetExportSnapshotRecordsCommandOutput>;
            getExportSnapshotRecords(args: GetExportSnapshotRecordsCommandInput, cb: (err: any, data?: GetExportSnapshotRecordsCommandOutput) => void): void;
            getExportSnapshotRecords(args: GetExportSnapshotRecordsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetExportSnapshotRecordsCommandOutput) => void): void;
            /**
                * <p>Returns information about a specific Amazon Lightsail instance, which is a virtual private
                *       server.</p>
                */
            getInstance(args: GetInstanceCommandInput, options?: __HttpHandlerOptions): Promise<GetInstanceCommandOutput>;
            getInstance(args: GetInstanceCommandInput, cb: (err: any, data?: GetInstanceCommandOutput) => void): void;
            getInstance(args: GetInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInstanceCommandOutput) => void): void;
            /**
                * <p>Returns temporary SSH keys you can use to connect to a specific virtual private server, or
                *         <i>instance</i>.</p>
                *          <p>The <code>get instance access details</code> operation supports tag-based access control
                *       via resource tags applied to the resource identified by <code>instance name</code>. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            getInstanceAccessDetails(args: GetInstanceAccessDetailsCommandInput, options?: __HttpHandlerOptions): Promise<GetInstanceAccessDetailsCommandOutput>;
            getInstanceAccessDetails(args: GetInstanceAccessDetailsCommandInput, cb: (err: any, data?: GetInstanceAccessDetailsCommandOutput) => void): void;
            getInstanceAccessDetails(args: GetInstanceAccessDetailsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInstanceAccessDetailsCommandOutput) => void): void;
            /**
                * <p>Returns the data points for the specified Amazon Lightsail instance metric, given an
                *       instance name.</p>
                *          <p>Metrics report the utilization of your resources, and the error counts generated by them.
                *       Monitor and collect metric data regularly to maintain the reliability, availability, and
                *       performance of your resources.</p>
                */
            getInstanceMetricData(args: GetInstanceMetricDataCommandInput, options?: __HttpHandlerOptions): Promise<GetInstanceMetricDataCommandOutput>;
            getInstanceMetricData(args: GetInstanceMetricDataCommandInput, cb: (err: any, data?: GetInstanceMetricDataCommandOutput) => void): void;
            getInstanceMetricData(args: GetInstanceMetricDataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInstanceMetricDataCommandOutput) => void): void;
            /**
                * <p>Returns the firewall port states for a specific Amazon Lightsail instance, the IP addresses
                *       allowed to connect to the instance through the ports, and the protocol.</p>
                */
            getInstancePortStates(args: GetInstancePortStatesCommandInput, options?: __HttpHandlerOptions): Promise<GetInstancePortStatesCommandOutput>;
            getInstancePortStates(args: GetInstancePortStatesCommandInput, cb: (err: any, data?: GetInstancePortStatesCommandOutput) => void): void;
            getInstancePortStates(args: GetInstancePortStatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInstancePortStatesCommandOutput) => void): void;
            /**
                * <p>Returns information about all Amazon Lightsail virtual private servers, or
                *         <i>instances</i>.</p>
                */
            getInstances(args: GetInstancesCommandInput, options?: __HttpHandlerOptions): Promise<GetInstancesCommandOutput>;
            getInstances(args: GetInstancesCommandInput, cb: (err: any, data?: GetInstancesCommandOutput) => void): void;
            getInstances(args: GetInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInstancesCommandOutput) => void): void;
            /**
                * <p>Returns information about a specific instance snapshot.</p>
                */
            getInstanceSnapshot(args: GetInstanceSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<GetInstanceSnapshotCommandOutput>;
            getInstanceSnapshot(args: GetInstanceSnapshotCommandInput, cb: (err: any, data?: GetInstanceSnapshotCommandOutput) => void): void;
            getInstanceSnapshot(args: GetInstanceSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInstanceSnapshotCommandOutput) => void): void;
            /**
                * <p>Returns all instance snapshots for the user's account.</p>
                */
            getInstanceSnapshots(args: GetInstanceSnapshotsCommandInput, options?: __HttpHandlerOptions): Promise<GetInstanceSnapshotsCommandOutput>;
            getInstanceSnapshots(args: GetInstanceSnapshotsCommandInput, cb: (err: any, data?: GetInstanceSnapshotsCommandOutput) => void): void;
            getInstanceSnapshots(args: GetInstanceSnapshotsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInstanceSnapshotsCommandOutput) => void): void;
            /**
                * <p>Returns the state of a specific instance. Works on one instance at a time.</p>
                */
            getInstanceState(args: GetInstanceStateCommandInput, options?: __HttpHandlerOptions): Promise<GetInstanceStateCommandOutput>;
            getInstanceState(args: GetInstanceStateCommandInput, cb: (err: any, data?: GetInstanceStateCommandOutput) => void): void;
            getInstanceState(args: GetInstanceStateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInstanceStateCommandOutput) => void): void;
            /**
                * <p>Returns information about a specific key pair.</p>
                */
            getKeyPair(args: GetKeyPairCommandInput, options?: __HttpHandlerOptions): Promise<GetKeyPairCommandOutput>;
            getKeyPair(args: GetKeyPairCommandInput, cb: (err: any, data?: GetKeyPairCommandOutput) => void): void;
            getKeyPair(args: GetKeyPairCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetKeyPairCommandOutput) => void): void;
            /**
                * <p>Returns information about all key pairs in the user's account.</p>
                */
            getKeyPairs(args: GetKeyPairsCommandInput, options?: __HttpHandlerOptions): Promise<GetKeyPairsCommandOutput>;
            getKeyPairs(args: GetKeyPairsCommandInput, cb: (err: any, data?: GetKeyPairsCommandOutput) => void): void;
            getKeyPairs(args: GetKeyPairsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetKeyPairsCommandOutput) => void): void;
            /**
                * <p>Returns information about the specified Lightsail load balancer.</p>
                */
            getLoadBalancer(args: GetLoadBalancerCommandInput, options?: __HttpHandlerOptions): Promise<GetLoadBalancerCommandOutput>;
            getLoadBalancer(args: GetLoadBalancerCommandInput, cb: (err: any, data?: GetLoadBalancerCommandOutput) => void): void;
            getLoadBalancer(args: GetLoadBalancerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLoadBalancerCommandOutput) => void): void;
            /**
                * <p>Returns information about health metrics for your Lightsail load balancer.</p>
                *          <p>Metrics report the utilization of your resources, and the error counts generated by them.
                *       Monitor and collect metric data regularly to maintain the reliability, availability, and
                *       performance of your resources.</p>
                */
            getLoadBalancerMetricData(args: GetLoadBalancerMetricDataCommandInput, options?: __HttpHandlerOptions): Promise<GetLoadBalancerMetricDataCommandOutput>;
            getLoadBalancerMetricData(args: GetLoadBalancerMetricDataCommandInput, cb: (err: any, data?: GetLoadBalancerMetricDataCommandOutput) => void): void;
            getLoadBalancerMetricData(args: GetLoadBalancerMetricDataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLoadBalancerMetricDataCommandOutput) => void): void;
            /**
                * <p>Returns information about all load balancers in an account.</p>
                */
            getLoadBalancers(args: GetLoadBalancersCommandInput, options?: __HttpHandlerOptions): Promise<GetLoadBalancersCommandOutput>;
            getLoadBalancers(args: GetLoadBalancersCommandInput, cb: (err: any, data?: GetLoadBalancersCommandOutput) => void): void;
            getLoadBalancers(args: GetLoadBalancersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLoadBalancersCommandOutput) => void): void;
            /**
                * <p>Returns information about the TLS certificates that are associated with the specified
                *       Lightsail load balancer.</p>
                *          <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p>
                *          <p>You can have a maximum of 2 certificates associated with a Lightsail load balancer. One
                *       is active and the other is inactive.</p>
                */
            getLoadBalancerTlsCertificates(args: GetLoadBalancerTlsCertificatesCommandInput, options?: __HttpHandlerOptions): Promise<GetLoadBalancerTlsCertificatesCommandOutput>;
            getLoadBalancerTlsCertificates(args: GetLoadBalancerTlsCertificatesCommandInput, cb: (err: any, data?: GetLoadBalancerTlsCertificatesCommandOutput) => void): void;
            getLoadBalancerTlsCertificates(args: GetLoadBalancerTlsCertificatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLoadBalancerTlsCertificatesCommandOutput) => void): void;
            /**
                * <p>Returns a list of TLS security policies that you can apply to Lightsail load
                *       balancers.</p>
                *
                *          <p>For more information about load balancer TLS security policies, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy">Configuring TLS security policies on your Amazon Lightsail load
                *         balancers</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
                */
            getLoadBalancerTlsPolicies(args: GetLoadBalancerTlsPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<GetLoadBalancerTlsPoliciesCommandOutput>;
            getLoadBalancerTlsPolicies(args: GetLoadBalancerTlsPoliciesCommandInput, cb: (err: any, data?: GetLoadBalancerTlsPoliciesCommandOutput) => void): void;
            getLoadBalancerTlsPolicies(args: GetLoadBalancerTlsPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLoadBalancerTlsPoliciesCommandOutput) => void): void;
            /**
                * <p>Returns information about a specific operation. Operations include events such as when you
                *       create an instance, allocate a static IP, attach a static IP, and so on.</p>
                */
            getOperation(args: GetOperationCommandInput, options?: __HttpHandlerOptions): Promise<GetOperationCommandOutput>;
            getOperation(args: GetOperationCommandInput, cb: (err: any, data?: GetOperationCommandOutput) => void): void;
            getOperation(args: GetOperationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOperationCommandOutput) => void): void;
            /**
                * <p>Returns information about all operations.</p>
                *          <p>Results are returned from oldest to newest, up to a maximum of 200. Results can be paged
                *       by making each subsequent call to <code>GetOperations</code> use the maximum (last)
                *         <code>statusChangedAt</code> value from the previous request.</p>
                */
            getOperations(args: GetOperationsCommandInput, options?: __HttpHandlerOptions): Promise<GetOperationsCommandOutput>;
            getOperations(args: GetOperationsCommandInput, cb: (err: any, data?: GetOperationsCommandOutput) => void): void;
            getOperations(args: GetOperationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOperationsCommandOutput) => void): void;
            /**
                * <p>Gets operations for a specific resource (e.g., an instance or a static IP).</p>
                */
            getOperationsForResource(args: GetOperationsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<GetOperationsForResourceCommandOutput>;
            getOperationsForResource(args: GetOperationsForResourceCommandInput, cb: (err: any, data?: GetOperationsForResourceCommandOutput) => void): void;
            getOperationsForResource(args: GetOperationsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOperationsForResourceCommandOutput) => void): void;
            /**
                * <p>Returns a list of all valid regions for Amazon Lightsail. Use the <code>include
                *         availability zones</code> parameter to also return the Availability Zones in a
                *       region.</p>
                */
            getRegions(args: GetRegionsCommandInput, options?: __HttpHandlerOptions): Promise<GetRegionsCommandOutput>;
            getRegions(args: GetRegionsCommandInput, cb: (err: any, data?: GetRegionsCommandOutput) => void): void;
            getRegions(args: GetRegionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRegionsCommandOutput) => void): void;
            /**
                * <p>Returns information about a specific database in Amazon Lightsail.</p>
                */
            getRelationalDatabase(args: GetRelationalDatabaseCommandInput, options?: __HttpHandlerOptions): Promise<GetRelationalDatabaseCommandOutput>;
            getRelationalDatabase(args: GetRelationalDatabaseCommandInput, cb: (err: any, data?: GetRelationalDatabaseCommandOutput) => void): void;
            getRelationalDatabase(args: GetRelationalDatabaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRelationalDatabaseCommandOutput) => void): void;
            /**
                * <p>Returns a list of available database blueprints in Amazon Lightsail. A blueprint describes
                *       the major engine version of a database.</p>
                *          <p>You can use a blueprint ID to create a new database that runs a specific database
                *       engine.</p>
                */
            getRelationalDatabaseBlueprints(args: GetRelationalDatabaseBlueprintsCommandInput, options?: __HttpHandlerOptions): Promise<GetRelationalDatabaseBlueprintsCommandOutput>;
            getRelationalDatabaseBlueprints(args: GetRelationalDatabaseBlueprintsCommandInput, cb: (err: any, data?: GetRelationalDatabaseBlueprintsCommandOutput) => void): void;
            getRelationalDatabaseBlueprints(args: GetRelationalDatabaseBlueprintsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRelationalDatabaseBlueprintsCommandOutput) => void): void;
            /**
                * <p>Returns the list of bundles that are available in Amazon Lightsail. A bundle describes the
                *       performance specifications for a database.</p>
                *          <p>You can use a bundle ID to create a new database with explicit performance
                *       specifications.</p>
                */
            getRelationalDatabaseBundles(args: GetRelationalDatabaseBundlesCommandInput, options?: __HttpHandlerOptions): Promise<GetRelationalDatabaseBundlesCommandOutput>;
            getRelationalDatabaseBundles(args: GetRelationalDatabaseBundlesCommandInput, cb: (err: any, data?: GetRelationalDatabaseBundlesCommandOutput) => void): void;
            getRelationalDatabaseBundles(args: GetRelationalDatabaseBundlesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRelationalDatabaseBundlesCommandOutput) => void): void;
            /**
                * <p>Returns a list of events for a specific database in Amazon Lightsail.</p>
                */
            getRelationalDatabaseEvents(args: GetRelationalDatabaseEventsCommandInput, options?: __HttpHandlerOptions): Promise<GetRelationalDatabaseEventsCommandOutput>;
            getRelationalDatabaseEvents(args: GetRelationalDatabaseEventsCommandInput, cb: (err: any, data?: GetRelationalDatabaseEventsCommandOutput) => void): void;
            getRelationalDatabaseEvents(args: GetRelationalDatabaseEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRelationalDatabaseEventsCommandOutput) => void): void;
            /**
                * <p>Returns a list of log events for a database in Amazon Lightsail.</p>
                */
            getRelationalDatabaseLogEvents(args: GetRelationalDatabaseLogEventsCommandInput, options?: __HttpHandlerOptions): Promise<GetRelationalDatabaseLogEventsCommandOutput>;
            getRelationalDatabaseLogEvents(args: GetRelationalDatabaseLogEventsCommandInput, cb: (err: any, data?: GetRelationalDatabaseLogEventsCommandOutput) => void): void;
            getRelationalDatabaseLogEvents(args: GetRelationalDatabaseLogEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRelationalDatabaseLogEventsCommandOutput) => void): void;
            /**
                * <p>Returns a list of available log streams for a specific database in Amazon Lightsail.</p>
                */
            getRelationalDatabaseLogStreams(args: GetRelationalDatabaseLogStreamsCommandInput, options?: __HttpHandlerOptions): Promise<GetRelationalDatabaseLogStreamsCommandOutput>;
            getRelationalDatabaseLogStreams(args: GetRelationalDatabaseLogStreamsCommandInput, cb: (err: any, data?: GetRelationalDatabaseLogStreamsCommandOutput) => void): void;
            getRelationalDatabaseLogStreams(args: GetRelationalDatabaseLogStreamsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRelationalDatabaseLogStreamsCommandOutput) => void): void;
            /**
                * <p>Returns the current, previous, or pending versions of the master user password for a
                *       Lightsail database.</p>
                *          <p>The <code>GetRelationalDatabaseMasterUserPassword</code> operation supports tag-based
                *       access control via resource tags applied to the resource identified by
                *       relationalDatabaseName.</p>
                */
            getRelationalDatabaseMasterUserPassword(args: GetRelationalDatabaseMasterUserPasswordCommandInput, options?: __HttpHandlerOptions): Promise<GetRelationalDatabaseMasterUserPasswordCommandOutput>;
            getRelationalDatabaseMasterUserPassword(args: GetRelationalDatabaseMasterUserPasswordCommandInput, cb: (err: any, data?: GetRelationalDatabaseMasterUserPasswordCommandOutput) => void): void;
            getRelationalDatabaseMasterUserPassword(args: GetRelationalDatabaseMasterUserPasswordCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRelationalDatabaseMasterUserPasswordCommandOutput) => void): void;
            /**
                * <p>Returns the data points of the specified metric for a database in Amazon Lightsail.</p>
                *          <p>Metrics report the utilization of your resources, and the error counts generated by them.
                *       Monitor and collect metric data regularly to maintain the reliability, availability, and
                *       performance of your resources.</p>
                */
            getRelationalDatabaseMetricData(args: GetRelationalDatabaseMetricDataCommandInput, options?: __HttpHandlerOptions): Promise<GetRelationalDatabaseMetricDataCommandOutput>;
            getRelationalDatabaseMetricData(args: GetRelationalDatabaseMetricDataCommandInput, cb: (err: any, data?: GetRelationalDatabaseMetricDataCommandOutput) => void): void;
            getRelationalDatabaseMetricData(args: GetRelationalDatabaseMetricDataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRelationalDatabaseMetricDataCommandOutput) => void): void;
            /**
                * <p>Returns all of the runtime parameters offered by the underlying database software, or
                *       engine, for a specific database in Amazon Lightsail.</p>
                *          <p>In addition to the parameter names and values, this operation returns other information
                *       about each parameter. This information includes whether changes require a reboot, whether the
                *       parameter is modifiable, the allowed values, and the data types.</p>
                */
            getRelationalDatabaseParameters(args: GetRelationalDatabaseParametersCommandInput, options?: __HttpHandlerOptions): Promise<GetRelationalDatabaseParametersCommandOutput>;
            getRelationalDatabaseParameters(args: GetRelationalDatabaseParametersCommandInput, cb: (err: any, data?: GetRelationalDatabaseParametersCommandOutput) => void): void;
            getRelationalDatabaseParameters(args: GetRelationalDatabaseParametersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRelationalDatabaseParametersCommandOutput) => void): void;
            /**
                * <p>Returns information about all of your databases in Amazon Lightsail.</p>
                */
            getRelationalDatabases(args: GetRelationalDatabasesCommandInput, options?: __HttpHandlerOptions): Promise<GetRelationalDatabasesCommandOutput>;
            getRelationalDatabases(args: GetRelationalDatabasesCommandInput, cb: (err: any, data?: GetRelationalDatabasesCommandOutput) => void): void;
            getRelationalDatabases(args: GetRelationalDatabasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRelationalDatabasesCommandOutput) => void): void;
            /**
                * <p>Returns information about a specific database snapshot in Amazon Lightsail.</p>
                */
            getRelationalDatabaseSnapshot(args: GetRelationalDatabaseSnapshotCommandInput, options?: __HttpHandlerOptions): Promise<GetRelationalDatabaseSnapshotCommandOutput>;
            getRelationalDatabaseSnapshot(args: GetRelationalDatabaseSnapshotCommandInput, cb: (err: any, data?: GetRelationalDatabaseSnapshotCommandOutput) => void): void;
            getRelationalDatabaseSnapshot(args: GetRelationalDatabaseSnapshotCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRelationalDatabaseSnapshotCommandOutput) => void): void;
            /**
                * <p>Returns information about all of your database snapshots in Amazon Lightsail.</p>
                */
            getRelationalDatabaseSnapshots(args: GetRelationalDatabaseSnapshotsCommandInput, options?: __HttpHandlerOptions): Promise<GetRelationalDatabaseSnapshotsCommandOutput>;
            getRelationalDatabaseSnapshots(args: GetRelationalDatabaseSnapshotsCommandInput, cb: (err: any, data?: GetRelationalDatabaseSnapshotsCommandOutput) => void): void;
            getRelationalDatabaseSnapshots(args: GetRelationalDatabaseSnapshotsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRelationalDatabaseSnapshotsCommandOutput) => void): void;
            /**
                * <p>Returns information about an Amazon Lightsail static IP.</p>
                */
            getStaticIp(args: GetStaticIpCommandInput, options?: __HttpHandlerOptions): Promise<GetStaticIpCommandOutput>;
            getStaticIp(args: GetStaticIpCommandInput, cb: (err: any, data?: GetStaticIpCommandOutput) => void): void;
            getStaticIp(args: GetStaticIpCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStaticIpCommandOutput) => void): void;
            /**
                * <p>Returns information about all static IPs in the user's account.</p>
                */
            getStaticIps(args: GetStaticIpsCommandInput, options?: __HttpHandlerOptions): Promise<GetStaticIpsCommandOutput>;
            getStaticIps(args: GetStaticIpsCommandInput, cb: (err: any, data?: GetStaticIpsCommandOutput) => void): void;
            getStaticIps(args: GetStaticIpsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetStaticIpsCommandOutput) => void): void;
            /**
                * <p>Imports a public SSH key from a specific key pair.</p>
                */
            importKeyPair(args: ImportKeyPairCommandInput, options?: __HttpHandlerOptions): Promise<ImportKeyPairCommandOutput>;
            importKeyPair(args: ImportKeyPairCommandInput, cb: (err: any, data?: ImportKeyPairCommandOutput) => void): void;
            importKeyPair(args: ImportKeyPairCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ImportKeyPairCommandOutput) => void): void;
            /**
                * <p>Returns a Boolean value indicating whether your Lightsail VPC is peered.</p>
                */
            isVpcPeered(args: IsVpcPeeredCommandInput, options?: __HttpHandlerOptions): Promise<IsVpcPeeredCommandOutput>;
            isVpcPeered(args: IsVpcPeeredCommandInput, cb: (err: any, data?: IsVpcPeeredCommandOutput) => void): void;
            isVpcPeered(args: IsVpcPeeredCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: IsVpcPeeredCommandOutput) => void): void;
            /**
                * <p>Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses
                *       allowed to connect to the instance through the ports, and the protocol.</p>
                *          <p>The <code>OpenInstancePublicPorts</code> action supports tag-based access control via
                *       resource tags applied to the resource identified by <code>instanceName</code>. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            openInstancePublicPorts(args: OpenInstancePublicPortsCommandInput, options?: __HttpHandlerOptions): Promise<OpenInstancePublicPortsCommandOutput>;
            openInstancePublicPorts(args: OpenInstancePublicPortsCommandInput, cb: (err: any, data?: OpenInstancePublicPortsCommandOutput) => void): void;
            openInstancePublicPorts(args: OpenInstancePublicPortsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: OpenInstancePublicPortsCommandOutput) => void): void;
            /**
                * <p>Peers the Lightsail VPC with the user's default VPC.</p>
                */
            peerVpc(args: PeerVpcCommandInput, options?: __HttpHandlerOptions): Promise<PeerVpcCommandOutput>;
            peerVpc(args: PeerVpcCommandInput, cb: (err: any, data?: PeerVpcCommandOutput) => void): void;
            peerVpc(args: PeerVpcCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PeerVpcCommandOutput) => void): void;
            /**
                * <p>Creates or updates an alarm, and associates it with the specified metric.</p>
                *          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
                *       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
                *       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
                *         in Amazon Lightsail</a>.</p>
                *          <p>When this action creates an alarm, the alarm state is immediately set to
                *         <code>INSUFFICIENT_DATA</code>. The alarm is then evaluated and its state is set
                *       appropriately. Any actions associated with the new state are then executed.</p>
                *          <p>When you update an existing alarm, its state is left unchanged, but the update completely
                *       overwrites the previous configuration of the alarm. The alarm is then evaluated with the
                *       updated configuration.</p>
                */
            putAlarm(args: PutAlarmCommandInput, options?: __HttpHandlerOptions): Promise<PutAlarmCommandOutput>;
            putAlarm(args: PutAlarmCommandInput, cb: (err: any, data?: PutAlarmCommandOutput) => void): void;
            putAlarm(args: PutAlarmCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutAlarmCommandOutput) => void): void;
            /**
                * <p>Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses
                *       allowed to connect to the instance through the ports, and the protocol. This action also
                *       closes all currently open ports that are not included in the request. Include all of the ports
                *       and the protocols you want to open in your <code>PutInstancePublicPorts</code>request. Or use
                *       the <code>OpenInstancePublicPorts</code> action to open ports without closing currently open
                *       ports.</p>
                *          <p>The <code>PutInstancePublicPorts</code> action supports tag-based access control via
                *       resource tags applied to the resource identified by <code>instanceName</code>. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            putInstancePublicPorts(args: PutInstancePublicPortsCommandInput, options?: __HttpHandlerOptions): Promise<PutInstancePublicPortsCommandOutput>;
            putInstancePublicPorts(args: PutInstancePublicPortsCommandInput, cb: (err: any, data?: PutInstancePublicPortsCommandOutput) => void): void;
            putInstancePublicPorts(args: PutInstancePublicPortsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutInstancePublicPortsCommandOutput) => void): void;
            /**
                * <p>Restarts a specific instance.</p>
                *          <p>The <code>reboot instance</code> operation supports tag-based access control via resource
                *       tags applied to the resource identified by <code>instance name</code>. For more information,
                *       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            rebootInstance(args: RebootInstanceCommandInput, options?: __HttpHandlerOptions): Promise<RebootInstanceCommandOutput>;
            rebootInstance(args: RebootInstanceCommandInput, cb: (err: any, data?: RebootInstanceCommandOutput) => void): void;
            rebootInstance(args: RebootInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RebootInstanceCommandOutput) => void): void;
            /**
                * <p>Restarts a specific database in Amazon Lightsail.</p>
                *          <p>The <code>reboot relational database</code> operation supports tag-based access control
                *       via resource tags applied to the resource identified by relationalDatabaseName. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            rebootRelationalDatabase(args: RebootRelationalDatabaseCommandInput, options?: __HttpHandlerOptions): Promise<RebootRelationalDatabaseCommandOutput>;
            rebootRelationalDatabase(args: RebootRelationalDatabaseCommandInput, cb: (err: any, data?: RebootRelationalDatabaseCommandOutput) => void): void;
            rebootRelationalDatabase(args: RebootRelationalDatabaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RebootRelationalDatabaseCommandOutput) => void): void;
            /**
                * <p>Registers a container image to your Amazon Lightsail container service.</p>
                *
                *          <note>
                *             <p>This action is not required if you install and use the Lightsail Control
                *         (lightsailctl) plugin to push container images to your Lightsail container service. For
                *         more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-pushing-container-images">Pushing and managing container images on your Amazon Lightsail container services</a>
                *         in the <i>Amazon Lightsail Developer Guide</i>.</p>
                *          </note>
                */
            registerContainerImage(args: RegisterContainerImageCommandInput, options?: __HttpHandlerOptions): Promise<RegisterContainerImageCommandOutput>;
            registerContainerImage(args: RegisterContainerImageCommandInput, cb: (err: any, data?: RegisterContainerImageCommandOutput) => void): void;
            registerContainerImage(args: RegisterContainerImageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterContainerImageCommandOutput) => void): void;
            /**
                * <p>Deletes a specific static IP from your account.</p>
                */
            releaseStaticIp(args: ReleaseStaticIpCommandInput, options?: __HttpHandlerOptions): Promise<ReleaseStaticIpCommandOutput>;
            releaseStaticIp(args: ReleaseStaticIpCommandInput, cb: (err: any, data?: ReleaseStaticIpCommandOutput) => void): void;
            releaseStaticIp(args: ReleaseStaticIpCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ReleaseStaticIpCommandOutput) => void): void;
            /**
                * <p>Deletes currently cached content from your Amazon Lightsail content delivery network (CDN)
                *       distribution.</p>
                *          <p>After resetting the cache, the next time a content request is made, your distribution
                *       pulls, serves, and caches it from the origin.</p>
                */
            resetDistributionCache(args: ResetDistributionCacheCommandInput, options?: __HttpHandlerOptions): Promise<ResetDistributionCacheCommandOutput>;
            resetDistributionCache(args: ResetDistributionCacheCommandInput, cb: (err: any, data?: ResetDistributionCacheCommandOutput) => void): void;
            resetDistributionCache(args: ResetDistributionCacheCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResetDistributionCacheCommandOutput) => void): void;
            /**
                * <p>Sends a verification request to an email contact method to ensure it's owned by the
                *       requester. SMS contact methods don't need to be verified.</p>
                *          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
                *       You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services
                *       Regions, and SMS text messages cannot be sent to some countries/regions. For more information,
                *       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
                *          <p>A verification request is sent to the contact method when you initially create it. Use
                *       this action to send another verification request if a previous verification request was
                *       deleted, or has expired.</p>
                *          <important>
                *             <p>Notifications are not sent to an email contact method until after it is verified, and
                *         confirmed as valid.</p>
                *          </important>
                */
            sendContactMethodVerification(args: SendContactMethodVerificationCommandInput, options?: __HttpHandlerOptions): Promise<SendContactMethodVerificationCommandOutput>;
            sendContactMethodVerification(args: SendContactMethodVerificationCommandInput, cb: (err: any, data?: SendContactMethodVerificationCommandOutput) => void): void;
            sendContactMethodVerification(args: SendContactMethodVerificationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendContactMethodVerificationCommandOutput) => void): void;
            /**
                * <p>Sets the IP address type for an Amazon Lightsail resource.</p>
                *
                *          <p>Use this action to enable dual-stack for a resource, which enables IPv4 and IPv6 for the
                *       specified resource. Alternately, you can use this action to disable dual-stack, and enable
                *       IPv4 only.</p>
                */
            setIpAddressType(args: SetIpAddressTypeCommandInput, options?: __HttpHandlerOptions): Promise<SetIpAddressTypeCommandOutput>;
            setIpAddressType(args: SetIpAddressTypeCommandInput, cb: (err: any, data?: SetIpAddressTypeCommandOutput) => void): void;
            setIpAddressType(args: SetIpAddressTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetIpAddressTypeCommandOutput) => void): void;
            /**
                * <p>Sets the Amazon Lightsail resources that can access the specified Lightsail
                *       bucket.</p>
                *
                *          <p>Lightsail buckets currently support setting access for Lightsail instances in the same
                *         Amazon Web Services Region.</p>
                */
            setResourceAccessForBucket(args: SetResourceAccessForBucketCommandInput, options?: __HttpHandlerOptions): Promise<SetResourceAccessForBucketCommandOutput>;
            setResourceAccessForBucket(args: SetResourceAccessForBucketCommandInput, cb: (err: any, data?: SetResourceAccessForBucketCommandOutput) => void): void;
            setResourceAccessForBucket(args: SetResourceAccessForBucketCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetResourceAccessForBucketCommandOutput) => void): void;
            /**
                * <p>Starts a specific Amazon Lightsail instance from a stopped state. To restart an instance,
                *       use the <code>reboot instance</code> operation.</p>
                *          <note>
                *             <p>When you start a stopped instance, Lightsail assigns a new public IP address to the
                *         instance. To use the same IP address after stopping and starting an instance, create a
                *         static IP address and attach it to the instance. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-create-static-ip">Amazon Lightsail Developer Guide</a>.</p>
                *          </note>
                *          <p>The <code>start instance</code> operation supports tag-based access control via resource
                *       tags applied to the resource identified by <code>instance name</code>. For more information,
                *       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            startInstance(args: StartInstanceCommandInput, options?: __HttpHandlerOptions): Promise<StartInstanceCommandOutput>;
            startInstance(args: StartInstanceCommandInput, cb: (err: any, data?: StartInstanceCommandOutput) => void): void;
            startInstance(args: StartInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartInstanceCommandOutput) => void): void;
            /**
                * <p>Starts a specific database from a stopped state in Amazon Lightsail. To restart a database,
                *       use the <code>reboot relational database</code> operation.</p>
                *          <p>The <code>start relational database</code> operation supports tag-based access control via
                *       resource tags applied to the resource identified by relationalDatabaseName. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            startRelationalDatabase(args: StartRelationalDatabaseCommandInput, options?: __HttpHandlerOptions): Promise<StartRelationalDatabaseCommandOutput>;
            startRelationalDatabase(args: StartRelationalDatabaseCommandInput, cb: (err: any, data?: StartRelationalDatabaseCommandOutput) => void): void;
            startRelationalDatabase(args: StartRelationalDatabaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartRelationalDatabaseCommandOutput) => void): void;
            /**
                * <p>Stops a specific Amazon Lightsail instance that is currently running.</p>
                *          <note>
                *             <p>When you start a stopped instance, Lightsail assigns a new public IP address to the
                *         instance. To use the same IP address after stopping and starting an instance, create a
                *         static IP address and attach it to the instance. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-create-static-ip">Amazon Lightsail Developer Guide</a>.</p>
                *          </note>
                *          <p>The <code>stop instance</code> operation supports tag-based access control via resource
                *       tags applied to the resource identified by <code>instance name</code>. For more information,
                *       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            stopInstance(args: StopInstanceCommandInput, options?: __HttpHandlerOptions): Promise<StopInstanceCommandOutput>;
            stopInstance(args: StopInstanceCommandInput, cb: (err: any, data?: StopInstanceCommandOutput) => void): void;
            stopInstance(args: StopInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopInstanceCommandOutput) => void): void;
            /**
                * <p>Stops a specific database that is currently running in Amazon Lightsail.</p>
                *          <p>The <code>stop relational database</code> operation supports tag-based access control via
                *       resource tags applied to the resource identified by relationalDatabaseName. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            stopRelationalDatabase(args: StopRelationalDatabaseCommandInput, options?: __HttpHandlerOptions): Promise<StopRelationalDatabaseCommandOutput>;
            stopRelationalDatabase(args: StopRelationalDatabaseCommandInput, cb: (err: any, data?: StopRelationalDatabaseCommandOutput) => void): void;
            stopRelationalDatabase(args: StopRelationalDatabaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopRelationalDatabaseCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to the specified Amazon Lightsail resource. Each resource can have a
                *       maximum of 50 tags. Each tag consists of a key and an optional value. Tag keys must be unique
                *       per resource. For more information about tags, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                *          <p>The <code>tag resource</code> operation supports tag-based access control via request tags
                *       and resource tags applied to the resource identified by <code>resource name</code>. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Tests an alarm by displaying a banner on the Amazon Lightsail console. If a notification
                *       trigger is configured for the specified alarm, the test also sends a notification to the
                *       notification protocol (<code>Email</code> and/or <code>SMS</code>) configured for the
                *       alarm.</p>
                *          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
                *       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
                *       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
                *         in Amazon Lightsail</a>.</p>
                */
            testAlarm(args: TestAlarmCommandInput, options?: __HttpHandlerOptions): Promise<TestAlarmCommandOutput>;
            testAlarm(args: TestAlarmCommandInput, cb: (err: any, data?: TestAlarmCommandOutput) => void): void;
            testAlarm(args: TestAlarmCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TestAlarmCommandOutput) => void): void;
            /**
                * <p>Unpeers the Lightsail VPC from the user's default VPC.</p>
                */
            unpeerVpc(args: UnpeerVpcCommandInput, options?: __HttpHandlerOptions): Promise<UnpeerVpcCommandOutput>;
            unpeerVpc(args: UnpeerVpcCommandInput, cb: (err: any, data?: UnpeerVpcCommandOutput) => void): void;
            unpeerVpc(args: UnpeerVpcCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UnpeerVpcCommandOutput) => void): void;
            /**
                * <p>Deletes the specified set of tag keys and their values from the specified Amazon Lightsail
                *       resource.</p>
                *          <p>The <code>untag resource</code> operation supports tag-based access control via request
                *       tags and resource tags applied to the resource identified by <code>resource name</code>. For
                *       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates an existing Amazon Lightsail bucket.</p>
                *
                *          <p>Use this action to update the configuration of an existing bucket, such as versioning,
                *       public accessibility, and the Amazon Web Services accounts that can access the bucket.</p>
                */
            updateBucket(args: UpdateBucketCommandInput, options?: __HttpHandlerOptions): Promise<UpdateBucketCommandOutput>;
            updateBucket(args: UpdateBucketCommandInput, cb: (err: any, data?: UpdateBucketCommandOutput) => void): void;
            updateBucket(args: UpdateBucketCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateBucketCommandOutput) => void): void;
            /**
                * <p>Updates the bundle, or storage plan, of an existing Amazon Lightsail bucket.</p>
                *
                *          <p>A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a
                *       bucket. You can update a bucket's bundle only one time within a monthly AWS billing cycle. To
                *       determine if you can update a bucket's bundle, use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBuckets.html">GetBuckets</a> action. The
                *         <code>ableToUpdateBundle</code> parameter in the response will indicate whether you can
                *       currently update a bucket's bundle.</p>
                *
                *          <p>Update a bucket's bundle if it's consistently going over its storage space or data
                *       transfer quota, or if a bucket's usage is consistently in the lower range of its storage space
                *       or data transfer quota. Due to the unpredictable usage fluctuations that a bucket might
                *       experience, we strongly recommend that you update a bucket's bundle only as a long-term
                *       strategy, instead of as a short-term, monthly cost-cutting measure. Choose a bucket bundle
                *       that will provide the bucket with ample storage space and data transfer for a long time to
                *       come.</p>
                */
            updateBucketBundle(args: UpdateBucketBundleCommandInput, options?: __HttpHandlerOptions): Promise<UpdateBucketBundleCommandOutput>;
            updateBucketBundle(args: UpdateBucketBundleCommandInput, cb: (err: any, data?: UpdateBucketBundleCommandOutput) => void): void;
            updateBucketBundle(args: UpdateBucketBundleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateBucketBundleCommandOutput) => void): void;
            /**
                * <p>Updates the configuration of your Amazon Lightsail container service, such as its power,
                *       scale, and public domain names.</p>
                */
            updateContainerService(args: UpdateContainerServiceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateContainerServiceCommandOutput>;
            updateContainerService(args: UpdateContainerServiceCommandInput, cb: (err: any, data?: UpdateContainerServiceCommandOutput) => void): void;
            updateContainerService(args: UpdateContainerServiceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateContainerServiceCommandOutput) => void): void;
            /**
                * <p>Updates an existing Amazon Lightsail content delivery network (CDN) distribution.</p>
                *          <p>Use this action to update the configuration of your existing distribution.</p>
                */
            updateDistribution(args: UpdateDistributionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDistributionCommandOutput>;
            updateDistribution(args: UpdateDistributionCommandInput, cb: (err: any, data?: UpdateDistributionCommandOutput) => void): void;
            updateDistribution(args: UpdateDistributionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDistributionCommandOutput) => void): void;
            /**
                * <p>Updates the bundle of your Amazon Lightsail content delivery network (CDN)
                *       distribution.</p>
                *          <p>A distribution bundle specifies the monthly network transfer quota and monthly cost of
                *       your distribution.</p>
                *          <p>Update your distribution's bundle if your distribution is going over its monthly network
                *       transfer quota and is incurring an overage fee.</p>
                *          <p>You can update your distribution's bundle only one time within your monthly AWS billing
                *       cycle. To determine if you can update your distribution's bundle, use the
                *         <code>GetDistributions</code> action. The <code>ableToUpdateBundle</code> parameter in the
                *       result will indicate whether you can currently update your distribution's bundle.</p>
                */
            updateDistributionBundle(args: UpdateDistributionBundleCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDistributionBundleCommandOutput>;
            updateDistributionBundle(args: UpdateDistributionBundleCommandInput, cb: (err: any, data?: UpdateDistributionBundleCommandOutput) => void): void;
            updateDistributionBundle(args: UpdateDistributionBundleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDistributionBundleCommandOutput) => void): void;
            /**
                * <p>Updates a domain recordset after it is created.</p>
                *          <p>The <code>update domain entry</code> operation supports tag-based access control via
                *       resource tags applied to the resource identified by <code>domain name</code>. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            updateDomainEntry(args: UpdateDomainEntryCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDomainEntryCommandOutput>;
            updateDomainEntry(args: UpdateDomainEntryCommandInput, cb: (err: any, data?: UpdateDomainEntryCommandOutput) => void): void;
            updateDomainEntry(args: UpdateDomainEntryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDomainEntryCommandOutput) => void): void;
            /**
                * <p>Updates the specified attribute for a load balancer. You can only update one attribute at
                *       a time.</p>
                *          <p>The <code>update load balancer attribute</code> operation supports tag-based access
                *       control via resource tags applied to the resource identified by <code>load balancer
                *         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            updateLoadBalancerAttribute(args: UpdateLoadBalancerAttributeCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLoadBalancerAttributeCommandOutput>;
            updateLoadBalancerAttribute(args: UpdateLoadBalancerAttributeCommandInput, cb: (err: any, data?: UpdateLoadBalancerAttributeCommandOutput) => void): void;
            updateLoadBalancerAttribute(args: UpdateLoadBalancerAttributeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLoadBalancerAttributeCommandOutput) => void): void;
            /**
                * <p>Allows the update of one or more attributes of a database in Amazon Lightsail.</p>
                *          <p>Updates are applied immediately, or in cases where the updates could result in an outage,
                *       are applied during the database's predefined maintenance window.</p>
                *          <p>The <code>update relational database</code> operation supports tag-based access control
                *       via resource tags applied to the resource identified by relationalDatabaseName. For more
                *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            updateRelationalDatabase(args: UpdateRelationalDatabaseCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRelationalDatabaseCommandOutput>;
            updateRelationalDatabase(args: UpdateRelationalDatabaseCommandInput, cb: (err: any, data?: UpdateRelationalDatabaseCommandOutput) => void): void;
            updateRelationalDatabase(args: UpdateRelationalDatabaseCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRelationalDatabaseCommandOutput) => void): void;
            /**
                * <p>Allows the update of one or more parameters of a database in Amazon Lightsail.</p>
                *          <p>Parameter updates don't cause outages; therefore, their application is not subject to the
                *       preferred maintenance window. However, there are two ways in which parameter updates are
                *       applied: <code>dynamic</code> or <code>pending-reboot</code>. Parameters marked with a
                *         <code>dynamic</code> apply type are applied immediately. Parameters marked with a
                *         <code>pending-reboot</code> apply type are applied only after the database is rebooted using
                *       the <code>reboot relational database</code> operation.</p>
                *          <p>The <code>update relational database parameters</code> operation supports tag-based access
                *       control via resource tags applied to the resource identified by relationalDatabaseName. For
                *       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            updateRelationalDatabaseParameters(args: UpdateRelationalDatabaseParametersCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRelationalDatabaseParametersCommandOutput>;
            updateRelationalDatabaseParameters(args: UpdateRelationalDatabaseParametersCommandInput, cb: (err: any, data?: UpdateRelationalDatabaseParametersCommandOutput) => void): void;
            updateRelationalDatabaseParameters(args: UpdateRelationalDatabaseParametersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRelationalDatabaseParametersCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AllocateStaticIpCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { AllocateStaticIpRequest, AllocateStaticIpResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface AllocateStaticIpCommandInput extends AllocateStaticIpRequest {
    }
    export interface AllocateStaticIpCommandOutput extends AllocateStaticIpResult, __MetadataBearer {
    }
    /**
        * <p>Allocates a static IP address.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, AllocateStaticIpCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, AllocateStaticIpCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new AllocateStaticIpCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AllocateStaticIpCommandInput} for command's `input` shape.
        * @see {@link AllocateStaticIpCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class AllocateStaticIpCommand extends $Command<AllocateStaticIpCommandInput, AllocateStaticIpCommandOutput, LightsailClientResolvedConfig> {
            readonly input: AllocateStaticIpCommandInput;
            constructor(input: AllocateStaticIpCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AllocateStaticIpCommandInput, AllocateStaticIpCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachCertificateToDistributionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { AttachCertificateToDistributionRequest, AttachCertificateToDistributionResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface AttachCertificateToDistributionCommandInput extends AttachCertificateToDistributionRequest {
    }
    export interface AttachCertificateToDistributionCommandOutput extends AttachCertificateToDistributionResult, __MetadataBearer {
    }
    /**
        * <p>Attaches an SSL/TLS certificate to your Amazon Lightsail content delivery network (CDN)
        *       distribution.</p>
        *          <p>After the certificate is attached, your distribution accepts HTTPS traffic for all of the
        *       domains that are associated with the certificate.</p>
        *          <p>Use the <code>CreateCertificate</code> action to create a certificate that you can attach
        *       to your distribution.</p>
        *          <important>
        *             <p>Only certificates created in the <code>us-east-1</code>
        *         Amazon Web Services Region can be attached to Lightsail distributions. Lightsail
        *         distributions are global resources that can reference an origin in any Amazon Web Services
        *         Region, and distribute its content globally. However, all distributions are located in the
        *           <code>us-east-1</code> Region.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, AttachCertificateToDistributionCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, AttachCertificateToDistributionCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new AttachCertificateToDistributionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AttachCertificateToDistributionCommandInput} for command's `input` shape.
        * @see {@link AttachCertificateToDistributionCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class AttachCertificateToDistributionCommand extends $Command<AttachCertificateToDistributionCommandInput, AttachCertificateToDistributionCommandOutput, LightsailClientResolvedConfig> {
            readonly input: AttachCertificateToDistributionCommandInput;
            constructor(input: AttachCertificateToDistributionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AttachCertificateToDistributionCommandInput, AttachCertificateToDistributionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachDiskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { AttachDiskRequest, AttachDiskResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface AttachDiskCommandInput extends AttachDiskRequest {
    }
    export interface AttachDiskCommandOutput extends AttachDiskResult, __MetadataBearer {
    }
    /**
        * <p>Attaches a block storage disk to a running or stopped Lightsail instance and exposes it
        *       to the instance with the specified disk name.</p>
        *          <p>The <code>attach disk</code> operation supports tag-based access control via resource tags
        *       applied to the resource identified by <code>disk name</code>. For more information, see the
        *         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, AttachDiskCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, AttachDiskCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new AttachDiskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AttachDiskCommandInput} for command's `input` shape.
        * @see {@link AttachDiskCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class AttachDiskCommand extends $Command<AttachDiskCommandInput, AttachDiskCommandOutput, LightsailClientResolvedConfig> {
            readonly input: AttachDiskCommandInput;
            constructor(input: AttachDiskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AttachDiskCommandInput, AttachDiskCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachInstancesToLoadBalancerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { AttachInstancesToLoadBalancerRequest, AttachInstancesToLoadBalancerResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface AttachInstancesToLoadBalancerCommandInput extends AttachInstancesToLoadBalancerRequest {
    }
    export interface AttachInstancesToLoadBalancerCommandOutput extends AttachInstancesToLoadBalancerResult, __MetadataBearer {
    }
    /**
        * <p>Attaches one or more Lightsail instances to a load balancer.</p>
        *          <p>After some time, the instances are attached to the load balancer and the health check
        *       status is available.</p>
        *          <p>The <code>attach instances to load balancer</code> operation supports tag-based access
        *       control via resource tags applied to the resource identified by <code>load balancer
        *         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, AttachInstancesToLoadBalancerCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, AttachInstancesToLoadBalancerCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new AttachInstancesToLoadBalancerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AttachInstancesToLoadBalancerCommandInput} for command's `input` shape.
        * @see {@link AttachInstancesToLoadBalancerCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class AttachInstancesToLoadBalancerCommand extends $Command<AttachInstancesToLoadBalancerCommandInput, AttachInstancesToLoadBalancerCommandOutput, LightsailClientResolvedConfig> {
            readonly input: AttachInstancesToLoadBalancerCommandInput;
            constructor(input: AttachInstancesToLoadBalancerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AttachInstancesToLoadBalancerCommandInput, AttachInstancesToLoadBalancerCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachLoadBalancerTlsCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { AttachLoadBalancerTlsCertificateRequest, AttachLoadBalancerTlsCertificateResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface AttachLoadBalancerTlsCertificateCommandInput extends AttachLoadBalancerTlsCertificateRequest {
    }
    export interface AttachLoadBalancerTlsCertificateCommandOutput extends AttachLoadBalancerTlsCertificateResult, __MetadataBearer {
    }
    /**
        * <p>Attaches a Transport Layer Security (TLS) certificate to your load balancer. TLS is just
        *       an updated, more secure version of Secure Socket Layer (SSL).</p>
        *          <p>Once you create and validate your certificate, you can attach it to your load balancer.
        *       You can also use this API to rotate the certificates on your account. Use the
        *         <code>AttachLoadBalancerTlsCertificate</code> action with the non-attached certificate, and
        *       it will replace the existing one and become the attached certificate.</p>
        *          <p>The <code>AttachLoadBalancerTlsCertificate</code> operation supports tag-based access
        *       control via resource tags applied to the resource identified by <code>load balancer
        *         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, AttachLoadBalancerTlsCertificateCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, AttachLoadBalancerTlsCertificateCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new AttachLoadBalancerTlsCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AttachLoadBalancerTlsCertificateCommandInput} for command's `input` shape.
        * @see {@link AttachLoadBalancerTlsCertificateCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class AttachLoadBalancerTlsCertificateCommand extends $Command<AttachLoadBalancerTlsCertificateCommandInput, AttachLoadBalancerTlsCertificateCommandOutput, LightsailClientResolvedConfig> {
            readonly input: AttachLoadBalancerTlsCertificateCommandInput;
            constructor(input: AttachLoadBalancerTlsCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AttachLoadBalancerTlsCertificateCommandInput, AttachLoadBalancerTlsCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachStaticIpCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { AttachStaticIpRequest, AttachStaticIpResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface AttachStaticIpCommandInput extends AttachStaticIpRequest {
    }
    export interface AttachStaticIpCommandOutput extends AttachStaticIpResult, __MetadataBearer {
    }
    /**
        * <p>Attaches a static IP address to a specific Amazon Lightsail instance.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, AttachStaticIpCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, AttachStaticIpCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new AttachStaticIpCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AttachStaticIpCommandInput} for command's `input` shape.
        * @see {@link AttachStaticIpCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class AttachStaticIpCommand extends $Command<AttachStaticIpCommandInput, AttachStaticIpCommandOutput, LightsailClientResolvedConfig> {
            readonly input: AttachStaticIpCommandInput;
            constructor(input: AttachStaticIpCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AttachStaticIpCommandInput, AttachStaticIpCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CloseInstancePublicPortsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CloseInstancePublicPortsRequest, CloseInstancePublicPortsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CloseInstancePublicPortsCommandInput extends CloseInstancePublicPortsRequest {
    }
    export interface CloseInstancePublicPortsCommandOutput extends CloseInstancePublicPortsResult, __MetadataBearer {
    }
    /**
        * <p>Closes ports for a specific Amazon Lightsail instance.</p>
        *          <p>The <code>CloseInstancePublicPorts</code> action supports tag-based access control via
        *       resource tags applied to the resource identified by <code>instanceName</code>. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CloseInstancePublicPortsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CloseInstancePublicPortsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CloseInstancePublicPortsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CloseInstancePublicPortsCommandInput} for command's `input` shape.
        * @see {@link CloseInstancePublicPortsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CloseInstancePublicPortsCommand extends $Command<CloseInstancePublicPortsCommandInput, CloseInstancePublicPortsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CloseInstancePublicPortsCommandInput;
            constructor(input: CloseInstancePublicPortsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CloseInstancePublicPortsCommandInput, CloseInstancePublicPortsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CopySnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CopySnapshotRequest, CopySnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CopySnapshotCommandInput extends CopySnapshotRequest {
    }
    export interface CopySnapshotCommandOutput extends CopySnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Copies a manual snapshot of an instance or disk as another manual snapshot, or copies an
        *       automatic snapshot of an instance or disk as a manual snapshot. This operation can also be
        *       used to copy a manual or automatic snapshot of an instance or a disk from one Amazon Web Services Region to another in Amazon Lightsail.</p>
        *          <p>When copying a <i>manual snapshot</i>, be sure to define the <code>source
        *         region</code>, <code>source snapshot name</code>, and <code>target snapshot name</code>
        *       parameters.</p>
        *          <p>When copying an <i>automatic snapshot</i>, be sure to define the
        *         <code>source region</code>, <code>source resource name</code>, <code>target snapshot
        *         name</code>, and either the <code>restore date</code> or the <code>use latest restorable
        *         auto snapshot</code> parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CopySnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CopySnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CopySnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CopySnapshotCommandInput} for command's `input` shape.
        * @see {@link CopySnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CopySnapshotCommand extends $Command<CopySnapshotCommandInput, CopySnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CopySnapshotCommandInput;
            constructor(input: CopySnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CopySnapshotCommandInput, CopySnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateBucketAccessKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateBucketAccessKeyRequest, CreateBucketAccessKeyResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateBucketAccessKeyCommandInput extends CreateBucketAccessKeyRequest {
    }
    export interface CreateBucketAccessKeyCommandOutput extends CreateBucketAccessKeyResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new access key for the specified Amazon Lightsail bucket. Access keys consist of
        *       an access key ID and corresponding secret access key.</p>
        *
        *          <p>Access keys grant full programmatic access to the specified bucket and its objects. You
        *       can have a maximum of two access keys per bucket. Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketAccessKeys.html">GetBucketAccessKeys</a> action to get a list of current access keys for a specific bucket. For more
        *       information about access keys, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys">Creating access keys for a bucket in Amazon Lightsail</a> in the
        *         <i>Amazon Lightsail Developer Guide</i>.</p>
        *
        *          <important>
        *             <p>The <code>secretAccessKey</code> value is returned only in response to the
        *           <code>CreateBucketAccessKey</code> action. You can get a secret access key only when you
        *         first create an access key; you cannot get the secret access key later. If you lose the
        *         secret access key, you must create a new access key.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateBucketAccessKeyCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateBucketAccessKeyCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateBucketAccessKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateBucketAccessKeyCommandInput} for command's `input` shape.
        * @see {@link CreateBucketAccessKeyCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateBucketAccessKeyCommand extends $Command<CreateBucketAccessKeyCommandInput, CreateBucketAccessKeyCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateBucketAccessKeyCommandInput;
            constructor(input: CreateBucketAccessKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateBucketAccessKeyCommandInput, CreateBucketAccessKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateBucketCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateBucketRequest, CreateBucketResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateBucketCommandInput extends CreateBucketRequest {
    }
    export interface CreateBucketCommandOutput extends CreateBucketResult, __MetadataBearer {
    }
    /**
        * <p>Creates an Amazon Lightsail bucket.</p>
        *
        *          <p>A bucket is a cloud storage resource available in the Lightsail object storage service.
        *       Use buckets to store objects such as data and its descriptive metadata. For more information
        *       about buckets, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/buckets-in-amazon-lightsail">Buckets in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer
        *         Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateBucketCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateBucketCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateBucketCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateBucketCommandInput} for command's `input` shape.
        * @see {@link CreateBucketCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateBucketCommand extends $Command<CreateBucketCommandInput, CreateBucketCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateBucketCommandInput;
            constructor(input: CreateBucketCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateBucketCommandInput, CreateBucketCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateCertificateRequest, CreateCertificateResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateCertificateCommandInput extends CreateCertificateRequest {
    }
    export interface CreateCertificateCommandOutput extends CreateCertificateResult, __MetadataBearer {
    }
    /**
        * <p>Creates an SSL/TLS certificate for an Amazon Lightsail content delivery network (CDN)
        *       distribution and a container service.</p>
        *          <p>After the certificate is valid, use the <code>AttachCertificateToDistribution</code>
        *       action to use the certificate and its domains with your distribution. Or use the
        *         <code>UpdateContainerService</code> action to use the certificate and its domains with your
        *       container service.</p>
        *          <important>
        *             <p>Only certificates created in the <code>us-east-1</code>
        *         Amazon Web Services Region can be attached to Lightsail distributions. Lightsail
        *         distributions are global resources that can reference an origin in any Amazon Web Services
        *         Region, and distribute its content globally. However, all distributions are located in the
        *           <code>us-east-1</code> Region.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateCertificateCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateCertificateCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCertificateCommandInput} for command's `input` shape.
        * @see {@link CreateCertificateCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateCertificateCommand extends $Command<CreateCertificateCommandInput, CreateCertificateCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateCertificateCommandInput;
            constructor(input: CreateCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCertificateCommandInput, CreateCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateCloudFormationStackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateCloudFormationStackRequest, CreateCloudFormationStackResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateCloudFormationStackCommandInput extends CreateCloudFormationStackRequest {
    }
    export interface CreateCloudFormationStackCommandOutput extends CreateCloudFormationStackResult, __MetadataBearer {
    }
    /**
        * <p>Creates an AWS CloudFormation stack, which creates a new Amazon EC2 instance from an exported
        *       Amazon Lightsail snapshot. This operation results in a CloudFormation stack record that can be
        *       used to track the AWS CloudFormation stack created. Use the <code>get cloud formation stack
        *         records</code> operation to get a list of the CloudFormation stacks created.</p>
        *          <important>
        *             <p>Wait until after your new Amazon EC2 instance is created before running the <code>create
        *           cloud formation stack</code> operation again with the same export snapshot record.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateCloudFormationStackCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateCloudFormationStackCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateCloudFormationStackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateCloudFormationStackCommandInput} for command's `input` shape.
        * @see {@link CreateCloudFormationStackCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateCloudFormationStackCommand extends $Command<CreateCloudFormationStackCommandInput, CreateCloudFormationStackCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateCloudFormationStackCommandInput;
            constructor(input: CreateCloudFormationStackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateCloudFormationStackCommandInput, CreateCloudFormationStackCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateContactMethodCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateContactMethodRequest, CreateContactMethodResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateContactMethodCommandInput extends CreateContactMethodRequest {
    }
    export interface CreateContactMethodCommandOutput extends CreateContactMethodResult, __MetadataBearer {
    }
    /**
        * <p>Creates an email or SMS text message contact method.</p>
        *          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
        *       You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services
        *       Regions, and SMS text messages cannot be sent to some countries/regions. For more information,
        *       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateContactMethodCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateContactMethodCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateContactMethodCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateContactMethodCommandInput} for command's `input` shape.
        * @see {@link CreateContactMethodCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateContactMethodCommand extends $Command<CreateContactMethodCommandInput, CreateContactMethodCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateContactMethodCommandInput;
            constructor(input: CreateContactMethodCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateContactMethodCommandInput, CreateContactMethodCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateContainerServiceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateContainerServiceRequest, CreateContainerServiceResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateContainerServiceCommandInput extends CreateContainerServiceRequest {
    }
    export interface CreateContainerServiceCommandOutput extends CreateContainerServiceResult, __MetadataBearer {
    }
    /**
        * <p>Creates an Amazon Lightsail container service.</p>
        *
        *          <p>A Lightsail container service is a compute resource to which you can deploy containers.
        *       For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-services">Container services in Amazon Lightsail</a> in the <i>Lightsail Dev
        *         Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateContainerServiceCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateContainerServiceCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateContainerServiceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateContainerServiceCommandInput} for command's `input` shape.
        * @see {@link CreateContainerServiceCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateContainerServiceCommand extends $Command<CreateContainerServiceCommandInput, CreateContainerServiceCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateContainerServiceCommandInput;
            constructor(input: CreateContainerServiceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateContainerServiceCommandInput, CreateContainerServiceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateContainerServiceDeploymentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateContainerServiceDeploymentRequest, CreateContainerServiceDeploymentResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateContainerServiceDeploymentCommandInput extends CreateContainerServiceDeploymentRequest {
    }
    export interface CreateContainerServiceDeploymentCommandOutput extends CreateContainerServiceDeploymentResult, __MetadataBearer {
    }
    /**
        * <p>Creates a deployment for your Amazon Lightsail container service.</p>
        *
        *          <p>A deployment specifies the containers that will be launched on the container service and
        *       their settings, such as the ports to open, the environment variables to apply, and the launch
        *       command to run. It also specifies the container that will serve as the public endpoint of the
        *       deployment and its settings, such as the HTTP or HTTPS port to use, and the health check
        *       configuration.</p>
        *
        *          <p>You can deploy containers to your container service using container images from a public
        *       registry such as Amazon ECR Public, or from your local machine. For more information, see
        *         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-container-images">Creating container images for your Amazon Lightsail container services</a> in the
        *         <i>Amazon Lightsail Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateContainerServiceDeploymentCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateContainerServiceDeploymentCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateContainerServiceDeploymentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateContainerServiceDeploymentCommandInput} for command's `input` shape.
        * @see {@link CreateContainerServiceDeploymentCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateContainerServiceDeploymentCommand extends $Command<CreateContainerServiceDeploymentCommandInput, CreateContainerServiceDeploymentCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateContainerServiceDeploymentCommandInput;
            constructor(input: CreateContainerServiceDeploymentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateContainerServiceDeploymentCommandInput, CreateContainerServiceDeploymentCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateContainerServiceRegistryLoginCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateContainerServiceRegistryLoginRequest, CreateContainerServiceRegistryLoginResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateContainerServiceRegistryLoginCommandInput extends CreateContainerServiceRegistryLoginRequest {
    }
    export interface CreateContainerServiceRegistryLoginCommandOutput extends CreateContainerServiceRegistryLoginResult, __MetadataBearer {
    }
    /**
        * <p>Creates a temporary set of log in credentials that you can use to log in to the Docker
        *       process on your local machine. After you're logged in, you can use the native Docker commands
        *       to push your local container images to the container image registry of your Amazon Lightsail
        *       account so that you can use them with your Lightsail container service. The log in
        *       credentials expire 12 hours after they are created, at which point you will need to create a
        *       new set of log in credentials.</p>
        *
        *          <note>
        *             <p>You can only push container images to the container service registry of your Lightsail
        *         account. You cannot pull container images or perform any other container image management
        *         actions on the container service registry.</p>
        *          </note>
        *
        *          <p>After you push your container images to the container image registry of your Lightsail
        *       account, use the <code>RegisterContainerImage</code> action to register the pushed images to a
        *       specific Lightsail container service.</p>
        *
        *          <note>
        *             <p>This action is not required if you install and use the Lightsail Control
        *         (lightsailctl) plugin to push container images to your Lightsail container service. For
        *         more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-pushing-container-images">Pushing and managing container images on your Amazon Lightsail container services</a>
        *         in the <i>Amazon Lightsail Developer Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateContainerServiceRegistryLoginCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateContainerServiceRegistryLoginCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateContainerServiceRegistryLoginCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateContainerServiceRegistryLoginCommandInput} for command's `input` shape.
        * @see {@link CreateContainerServiceRegistryLoginCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateContainerServiceRegistryLoginCommand extends $Command<CreateContainerServiceRegistryLoginCommandInput, CreateContainerServiceRegistryLoginCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateContainerServiceRegistryLoginCommandInput;
            constructor(input: CreateContainerServiceRegistryLoginCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateContainerServiceRegistryLoginCommandInput, CreateContainerServiceRegistryLoginCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDiskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateDiskRequest, CreateDiskResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateDiskCommandInput extends CreateDiskRequest {
    }
    export interface CreateDiskCommandOutput extends CreateDiskResult, __MetadataBearer {
    }
    /**
        * <p>Creates a block storage disk that can be attached to an Amazon Lightsail instance in the
        *       same Availability Zone (e.g., <code>us-east-2a</code>).</p>
        *          <p>The <code>create disk</code> operation supports tag-based access control via request tags.
        *       For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateDiskCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateDiskCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateDiskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDiskCommandInput} for command's `input` shape.
        * @see {@link CreateDiskCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateDiskCommand extends $Command<CreateDiskCommandInput, CreateDiskCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateDiskCommandInput;
            constructor(input: CreateDiskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDiskCommandInput, CreateDiskCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDiskFromSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateDiskFromSnapshotRequest, CreateDiskFromSnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateDiskFromSnapshotCommandInput extends CreateDiskFromSnapshotRequest {
    }
    export interface CreateDiskFromSnapshotCommandOutput extends CreateDiskFromSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Creates a block storage disk from a manual or automatic snapshot of a disk. The resulting
        *       disk can be attached to an Amazon Lightsail instance in the same Availability Zone (e.g.,
        *         <code>us-east-2a</code>).</p>
        *          <p>The <code>create disk from snapshot</code> operation supports tag-based access control via
        *       request tags and resource tags applied to the resource identified by <code>disk snapshot
        *         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateDiskFromSnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateDiskFromSnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateDiskFromSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDiskFromSnapshotCommandInput} for command's `input` shape.
        * @see {@link CreateDiskFromSnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateDiskFromSnapshotCommand extends $Command<CreateDiskFromSnapshotCommandInput, CreateDiskFromSnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateDiskFromSnapshotCommandInput;
            constructor(input: CreateDiskFromSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDiskFromSnapshotCommandInput, CreateDiskFromSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDiskSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateDiskSnapshotRequest, CreateDiskSnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateDiskSnapshotCommandInput extends CreateDiskSnapshotRequest {
    }
    export interface CreateDiskSnapshotCommandOutput extends CreateDiskSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Creates a snapshot of a block storage disk. You can use snapshots for backups, to make
        *       copies of disks, and to save data before shutting down a Lightsail instance.</p>
        *          <p>You can take a snapshot of an attached disk that is in use; however, snapshots only
        *       capture data that has been written to your disk at the time the snapshot command is issued.
        *       This may exclude any data that has been cached by any applications or the operating system. If
        *       you can pause any file systems on the disk long enough to take a snapshot, your snapshot
        *       should be complete. Nevertheless, if you cannot pause all file writes to the disk, you should
        *       unmount the disk from within the Lightsail instance, issue the create disk snapshot command,
        *       and then remount the disk to ensure a consistent and complete snapshot. You may remount and
        *       use your disk while the snapshot status is pending.</p>
        *          <p>You can also use this operation to create a snapshot of an instance's system volume. You
        *       might want to do this, for example, to recover data from the system volume of a botched
        *       instance or to create a backup of the system volume like you would for a block storage disk.
        *       To create a snapshot of a system volume, just define the <code>instance name</code> parameter
        *       when issuing the snapshot command, and a snapshot of the defined instance's system volume will
        *       be created. After the snapshot is available, you can create a block storage disk from the
        *       snapshot and attach it to a running instance to access the data on the disk.</p>
        *
        *          <p>The <code>create disk snapshot</code> operation supports tag-based access control via
        *       request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateDiskSnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateDiskSnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateDiskSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDiskSnapshotCommandInput} for command's `input` shape.
        * @see {@link CreateDiskSnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateDiskSnapshotCommand extends $Command<CreateDiskSnapshotCommandInput, CreateDiskSnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateDiskSnapshotCommandInput;
            constructor(input: CreateDiskSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDiskSnapshotCommandInput, CreateDiskSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDistributionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateDistributionRequest, CreateDistributionResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateDistributionCommandInput extends CreateDistributionRequest {
    }
    export interface CreateDistributionCommandOutput extends CreateDistributionResult, __MetadataBearer {
    }
    /**
        * <p>Creates an Amazon Lightsail content delivery network (CDN) distribution.</p>
        *          <p>A distribution is a globally distributed network of caching servers that improve the
        *       performance of your website or web application hosted on a Lightsail instance. For more
        *       information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-content-delivery-network-distributions">Content delivery networks in Amazon Lightsail</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateDistributionCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateDistributionCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateDistributionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDistributionCommandInput} for command's `input` shape.
        * @see {@link CreateDistributionCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateDistributionCommand extends $Command<CreateDistributionCommandInput, CreateDistributionCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateDistributionCommandInput;
            constructor(input: CreateDistributionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDistributionCommandInput, CreateDistributionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateDomainRequest, CreateDomainResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateDomainCommandInput extends CreateDomainRequest {
    }
    export interface CreateDomainCommandOutput extends CreateDomainResult, __MetadataBearer {
    }
    /**
        * <p>Creates a domain resource for the specified domain (e.g., example.com).</p>
        *          <p>The <code>create domain</code> operation supports tag-based access control via request
        *       tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateDomainCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateDomainCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDomainCommandInput} for command's `input` shape.
        * @see {@link CreateDomainCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateDomainCommand extends $Command<CreateDomainCommandInput, CreateDomainCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateDomainCommandInput;
            constructor(input: CreateDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDomainCommandInput, CreateDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDomainEntryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateDomainEntryRequest, CreateDomainEntryResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateDomainEntryCommandInput extends CreateDomainEntryRequest {
    }
    export interface CreateDomainEntryCommandOutput extends CreateDomainEntryResult, __MetadataBearer {
    }
    /**
        * <p>Creates one of the following domain name system (DNS) records in a domain DNS zone:
        *       Address (A), canonical name (CNAME), mail exchanger (MX), name server (NS), start of authority
        *       (SOA), service locator (SRV), or text (TXT).</p>
        *
        *
        *
        *          <p>The <code>create domain entry</code> operation supports tag-based access control via
        *       resource tags applied to the resource identified by <code>domain name</code>. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateDomainEntryCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateDomainEntryCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateDomainEntryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDomainEntryCommandInput} for command's `input` shape.
        * @see {@link CreateDomainEntryCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateDomainEntryCommand extends $Command<CreateDomainEntryCommandInput, CreateDomainEntryCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateDomainEntryCommandInput;
            constructor(input: CreateDomainEntryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDomainEntryCommandInput, CreateDomainEntryCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateInstancesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateInstancesRequest, CreateInstancesResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateInstancesCommandInput extends CreateInstancesRequest {
    }
    export interface CreateInstancesCommandOutput extends CreateInstancesResult, __MetadataBearer {
    }
    /**
        * <p>Creates one or more Amazon Lightsail instances.</p>
        *          <p>The <code>create instances</code> operation supports tag-based access control via request
        *       tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateInstancesCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateInstancesCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateInstancesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateInstancesCommandInput} for command's `input` shape.
        * @see {@link CreateInstancesCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateInstancesCommand extends $Command<CreateInstancesCommandInput, CreateInstancesCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateInstancesCommandInput;
            constructor(input: CreateInstancesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateInstancesCommandInput, CreateInstancesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateInstancesFromSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateInstancesFromSnapshotRequest, CreateInstancesFromSnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateInstancesFromSnapshotCommandInput extends CreateInstancesFromSnapshotRequest {
    }
    export interface CreateInstancesFromSnapshotCommandOutput extends CreateInstancesFromSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Creates one or more new instances from a manual or automatic snapshot of an
        *       instance.</p>
        *          <p>The <code>create instances from snapshot</code> operation supports tag-based access
        *       control via request tags and resource tags applied to the resource identified by
        *         <code>instance snapshot name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateInstancesFromSnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateInstancesFromSnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateInstancesFromSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateInstancesFromSnapshotCommandInput} for command's `input` shape.
        * @see {@link CreateInstancesFromSnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateInstancesFromSnapshotCommand extends $Command<CreateInstancesFromSnapshotCommandInput, CreateInstancesFromSnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateInstancesFromSnapshotCommandInput;
            constructor(input: CreateInstancesFromSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateInstancesFromSnapshotCommandInput, CreateInstancesFromSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateInstanceSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateInstanceSnapshotRequest, CreateInstanceSnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateInstanceSnapshotCommandInput extends CreateInstanceSnapshotRequest {
    }
    export interface CreateInstanceSnapshotCommandOutput extends CreateInstanceSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Creates a snapshot of a specific virtual private server, or <i>instance</i>.
        *       You can use a snapshot to create a new instance that is based on that snapshot.</p>
        *          <p>The <code>create instance snapshot</code> operation supports tag-based access control via
        *       request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateInstanceSnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateInstanceSnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateInstanceSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateInstanceSnapshotCommandInput} for command's `input` shape.
        * @see {@link CreateInstanceSnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateInstanceSnapshotCommand extends $Command<CreateInstanceSnapshotCommandInput, CreateInstanceSnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateInstanceSnapshotCommandInput;
            constructor(input: CreateInstanceSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateInstanceSnapshotCommandInput, CreateInstanceSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateKeyPairCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateKeyPairRequest, CreateKeyPairResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateKeyPairCommandInput extends CreateKeyPairRequest {
    }
    export interface CreateKeyPairCommandOutput extends CreateKeyPairResult, __MetadataBearer {
    }
    /**
        * <p>Creates a custom SSH key pair that you can use with an Amazon Lightsail
        *       instance.</p>
        *          <note>
        *             <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_DownloadDefaultKeyPair.html">DownloadDefaultKeyPair</a> action to create a Lightsail default key
        *         pair in an Amazon Web Services Region where a default key pair does not currently
        *         exist.</p>
        *          </note>
        *          <p>The <code>create key pair</code> operation supports tag-based access control via request
        *       tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateKeyPairCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateKeyPairCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateKeyPairCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateKeyPairCommandInput} for command's `input` shape.
        * @see {@link CreateKeyPairCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateKeyPairCommand extends $Command<CreateKeyPairCommandInput, CreateKeyPairCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateKeyPairCommandInput;
            constructor(input: CreateKeyPairCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateKeyPairCommandInput, CreateKeyPairCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateLoadBalancerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateLoadBalancerRequest, CreateLoadBalancerResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateLoadBalancerCommandInput extends CreateLoadBalancerRequest {
    }
    export interface CreateLoadBalancerCommandOutput extends CreateLoadBalancerResult, __MetadataBearer {
    }
    /**
        * <p>Creates a Lightsail load balancer. To learn more about deciding whether to load balance
        *       your application, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/configure-lightsail-instances-for-load-balancing">Configure your Lightsail instances for load balancing</a>. You can create up to 5
        *       load balancers per AWS Region in your account.</p>
        *          <p>When you create a load balancer, you can specify a unique name and port settings. To
        *       change additional load balancer settings, use the <code>UpdateLoadBalancerAttribute</code>
        *       operation.</p>
        *          <p>The <code>create load balancer</code> operation supports tag-based access control via
        *       request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateLoadBalancerCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateLoadBalancerCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateLoadBalancerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLoadBalancerCommandInput} for command's `input` shape.
        * @see {@link CreateLoadBalancerCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateLoadBalancerCommand extends $Command<CreateLoadBalancerCommandInput, CreateLoadBalancerCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateLoadBalancerCommandInput;
            constructor(input: CreateLoadBalancerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLoadBalancerCommandInput, CreateLoadBalancerCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateLoadBalancerTlsCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateLoadBalancerTlsCertificateRequest, CreateLoadBalancerTlsCertificateResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateLoadBalancerTlsCertificateCommandInput extends CreateLoadBalancerTlsCertificateRequest {
    }
    export interface CreateLoadBalancerTlsCertificateCommandOutput extends CreateLoadBalancerTlsCertificateResult, __MetadataBearer {
    }
    /**
        * <p>Creates an SSL/TLS certificate for an Amazon Lightsail load balancer.</p>
        *          <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p>
        *          <p>The <code>CreateLoadBalancerTlsCertificate</code> operation supports tag-based access
        *       control via resource tags applied to the resource identified by <code>load balancer
        *         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateLoadBalancerTlsCertificateCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateLoadBalancerTlsCertificateCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateLoadBalancerTlsCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLoadBalancerTlsCertificateCommandInput} for command's `input` shape.
        * @see {@link CreateLoadBalancerTlsCertificateCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateLoadBalancerTlsCertificateCommand extends $Command<CreateLoadBalancerTlsCertificateCommandInput, CreateLoadBalancerTlsCertificateCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateLoadBalancerTlsCertificateCommandInput;
            constructor(input: CreateLoadBalancerTlsCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLoadBalancerTlsCertificateCommandInput, CreateLoadBalancerTlsCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateRelationalDatabaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateRelationalDatabaseRequest, CreateRelationalDatabaseResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateRelationalDatabaseCommandInput extends CreateRelationalDatabaseRequest {
    }
    export interface CreateRelationalDatabaseCommandOutput extends CreateRelationalDatabaseResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new database in Amazon Lightsail.</p>
        *          <p>The <code>create relational database</code> operation supports tag-based access control
        *       via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateRelationalDatabaseCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateRelationalDatabaseCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateRelationalDatabaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRelationalDatabaseCommandInput} for command's `input` shape.
        * @see {@link CreateRelationalDatabaseCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateRelationalDatabaseCommand extends $Command<CreateRelationalDatabaseCommandInput, CreateRelationalDatabaseCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateRelationalDatabaseCommandInput;
            constructor(input: CreateRelationalDatabaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRelationalDatabaseCommandInput, CreateRelationalDatabaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateRelationalDatabaseFromSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateRelationalDatabaseFromSnapshotRequest, CreateRelationalDatabaseFromSnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateRelationalDatabaseFromSnapshotCommandInput extends CreateRelationalDatabaseFromSnapshotRequest {
    }
    export interface CreateRelationalDatabaseFromSnapshotCommandOutput extends CreateRelationalDatabaseFromSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new database from an existing database snapshot in Amazon Lightsail.</p>
        *          <p>You can create a new database from a snapshot in if something goes wrong with your
        *       original database, or to change it to a different plan, such as a high availability or
        *       standard plan.</p>
        *          <p>The <code>create relational database from snapshot</code> operation supports tag-based
        *       access control via request tags and resource tags applied to the resource identified by
        *       relationalDatabaseSnapshotName. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateRelationalDatabaseFromSnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateRelationalDatabaseFromSnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateRelationalDatabaseFromSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRelationalDatabaseFromSnapshotCommandInput} for command's `input` shape.
        * @see {@link CreateRelationalDatabaseFromSnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateRelationalDatabaseFromSnapshotCommand extends $Command<CreateRelationalDatabaseFromSnapshotCommandInput, CreateRelationalDatabaseFromSnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateRelationalDatabaseFromSnapshotCommandInput;
            constructor(input: CreateRelationalDatabaseFromSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRelationalDatabaseFromSnapshotCommandInput, CreateRelationalDatabaseFromSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateRelationalDatabaseSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { CreateRelationalDatabaseSnapshotRequest, CreateRelationalDatabaseSnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface CreateRelationalDatabaseSnapshotCommandInput extends CreateRelationalDatabaseSnapshotRequest {
    }
    export interface CreateRelationalDatabaseSnapshotCommandOutput extends CreateRelationalDatabaseSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Creates a snapshot of your database in Amazon Lightsail. You can use snapshots for backups,
        *       to make copies of a database, and to save data before deleting a database.</p>
        *          <p>The <code>create relational database snapshot</code> operation supports tag-based access
        *       control via request tags. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, CreateRelationalDatabaseSnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, CreateRelationalDatabaseSnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new CreateRelationalDatabaseSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRelationalDatabaseSnapshotCommandInput} for command's `input` shape.
        * @see {@link CreateRelationalDatabaseSnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class CreateRelationalDatabaseSnapshotCommand extends $Command<CreateRelationalDatabaseSnapshotCommandInput, CreateRelationalDatabaseSnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: CreateRelationalDatabaseSnapshotCommandInput;
            constructor(input: CreateRelationalDatabaseSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRelationalDatabaseSnapshotCommandInput, CreateRelationalDatabaseSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteAlarmCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteAlarmRequest, DeleteAlarmResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteAlarmCommandInput extends DeleteAlarmRequest {
    }
    export interface DeleteAlarmCommandOutput extends DeleteAlarmResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an alarm.</p>
        *          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
        *       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
        *       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
        *         in Amazon Lightsail</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteAlarmCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteAlarmCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteAlarmCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAlarmCommandInput} for command's `input` shape.
        * @see {@link DeleteAlarmCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteAlarmCommand extends $Command<DeleteAlarmCommandInput, DeleteAlarmCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteAlarmCommandInput;
            constructor(input: DeleteAlarmCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAlarmCommandInput, DeleteAlarmCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteAutoSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteAutoSnapshotRequest, DeleteAutoSnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteAutoSnapshotCommandInput extends DeleteAutoSnapshotRequest {
    }
    export interface DeleteAutoSnapshotCommandOutput extends DeleteAutoSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an automatic snapshot of an instance or disk. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteAutoSnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteAutoSnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteAutoSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAutoSnapshotCommandInput} for command's `input` shape.
        * @see {@link DeleteAutoSnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteAutoSnapshotCommand extends $Command<DeleteAutoSnapshotCommandInput, DeleteAutoSnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteAutoSnapshotCommandInput;
            constructor(input: DeleteAutoSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAutoSnapshotCommandInput, DeleteAutoSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteBucketAccessKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteBucketAccessKeyRequest, DeleteBucketAccessKeyResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteBucketAccessKeyCommandInput extends DeleteBucketAccessKeyRequest {
    }
    export interface DeleteBucketAccessKeyCommandOutput extends DeleteBucketAccessKeyResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an access key for the specified Amazon Lightsail bucket.</p>
        *
        *          <p>We recommend that you delete an access key if the secret access key is compromised.</p>
        *
        *          <p>For more information about access keys, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys">Creating access keys for a bucket in Amazon Lightsail</a> in the
        *         <i>Amazon Lightsail Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteBucketAccessKeyCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteBucketAccessKeyCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteBucketAccessKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteBucketAccessKeyCommandInput} for command's `input` shape.
        * @see {@link DeleteBucketAccessKeyCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteBucketAccessKeyCommand extends $Command<DeleteBucketAccessKeyCommandInput, DeleteBucketAccessKeyCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteBucketAccessKeyCommandInput;
            constructor(input: DeleteBucketAccessKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteBucketAccessKeyCommandInput, DeleteBucketAccessKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteBucketCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteBucketRequest, DeleteBucketResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteBucketCommandInput extends DeleteBucketRequest {
    }
    export interface DeleteBucketCommandOutput extends DeleteBucketResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a Amazon Lightsail bucket.</p>
        *
        *          <note>
        *             <p>When you delete your bucket, the bucket name is released and can be reused for a new
        *         bucket in your account or another Amazon Web Services account.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteBucketCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteBucketCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteBucketCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteBucketCommandInput} for command's `input` shape.
        * @see {@link DeleteBucketCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteBucketCommand extends $Command<DeleteBucketCommandInput, DeleteBucketCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteBucketCommandInput;
            constructor(input: DeleteBucketCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteBucketCommandInput, DeleteBucketCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteCertificateRequest, DeleteCertificateResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteCertificateCommandInput extends DeleteCertificateRequest {
    }
    export interface DeleteCertificateCommandOutput extends DeleteCertificateResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an SSL/TLS certificate for your Amazon Lightsail content delivery network (CDN)
        *       distribution.</p>
        *          <p>Certificates that are currently attached to a distribution cannot be deleted. Use the
        *         <code>DetachCertificateFromDistribution</code> action to detach a certificate from a
        *       distribution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteCertificateCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteCertificateCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteCertificateCommandInput} for command's `input` shape.
        * @see {@link DeleteCertificateCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteCertificateCommand extends $Command<DeleteCertificateCommandInput, DeleteCertificateCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteCertificateCommandInput;
            constructor(input: DeleteCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteCertificateCommandInput, DeleteCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteContactMethodCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteContactMethodRequest, DeleteContactMethodResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteContactMethodCommandInput extends DeleteContactMethodRequest {
    }
    export interface DeleteContactMethodCommandOutput extends DeleteContactMethodResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a contact method.</p>
        *          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
        *       You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services
        *       Regions, and SMS text messages cannot be sent to some countries/regions. For more information,
        *       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteContactMethodCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteContactMethodCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteContactMethodCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteContactMethodCommandInput} for command's `input` shape.
        * @see {@link DeleteContactMethodCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteContactMethodCommand extends $Command<DeleteContactMethodCommandInput, DeleteContactMethodCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteContactMethodCommandInput;
            constructor(input: DeleteContactMethodCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteContactMethodCommandInput, DeleteContactMethodCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteContainerImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteContainerImageRequest, DeleteContainerImageResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteContainerImageCommandInput extends DeleteContainerImageRequest {
    }
    export interface DeleteContainerImageCommandOutput extends DeleteContainerImageResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a container image that is registered to your Amazon Lightsail container
        *       service.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteContainerImageCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteContainerImageCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteContainerImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteContainerImageCommandInput} for command's `input` shape.
        * @see {@link DeleteContainerImageCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteContainerImageCommand extends $Command<DeleteContainerImageCommandInput, DeleteContainerImageCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteContainerImageCommandInput;
            constructor(input: DeleteContainerImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteContainerImageCommandInput, DeleteContainerImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteContainerServiceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteContainerServiceRequest, DeleteContainerServiceResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteContainerServiceCommandInput extends DeleteContainerServiceRequest {
    }
    export interface DeleteContainerServiceCommandOutput extends DeleteContainerServiceResult, __MetadataBearer {
    }
    /**
        * <p>Deletes your Amazon Lightsail container service.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteContainerServiceCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteContainerServiceCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteContainerServiceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteContainerServiceCommandInput} for command's `input` shape.
        * @see {@link DeleteContainerServiceCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteContainerServiceCommand extends $Command<DeleteContainerServiceCommandInput, DeleteContainerServiceCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteContainerServiceCommandInput;
            constructor(input: DeleteContainerServiceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteContainerServiceCommandInput, DeleteContainerServiceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDiskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteDiskRequest, DeleteDiskResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteDiskCommandInput extends DeleteDiskRequest {
    }
    export interface DeleteDiskCommandOutput extends DeleteDiskResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified block storage disk. The disk must be in the <code>available</code>
        *       state (not attached to a Lightsail instance).</p>
        *          <note>
        *             <p>The disk may remain in the <code>deleting</code> state for several minutes.</p>
        *          </note>
        *          <p>The <code>delete disk</code> operation supports tag-based access control via resource tags
        *       applied to the resource identified by <code>disk name</code>. For more information, see the
        *         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteDiskCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteDiskCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteDiskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDiskCommandInput} for command's `input` shape.
        * @see {@link DeleteDiskCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteDiskCommand extends $Command<DeleteDiskCommandInput, DeleteDiskCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteDiskCommandInput;
            constructor(input: DeleteDiskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDiskCommandInput, DeleteDiskCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDiskSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteDiskSnapshotRequest, DeleteDiskSnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteDiskSnapshotCommandInput extends DeleteDiskSnapshotRequest {
    }
    export interface DeleteDiskSnapshotCommandOutput extends DeleteDiskSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified disk snapshot.</p>
        *          <p>When you make periodic snapshots of a disk, the snapshots are incremental, and only the
        *       blocks on the device that have changed since your last snapshot are saved in the new snapshot.
        *       When you delete a snapshot, only the data not needed for any other snapshot is removed. So
        *       regardless of which prior snapshots have been deleted, all active snapshots will have access
        *       to all the information needed to restore the disk.</p>
        *          <p>The <code>delete disk snapshot</code> operation supports tag-based access control via
        *       resource tags applied to the resource identified by <code>disk snapshot name</code>. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteDiskSnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteDiskSnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteDiskSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDiskSnapshotCommandInput} for command's `input` shape.
        * @see {@link DeleteDiskSnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteDiskSnapshotCommand extends $Command<DeleteDiskSnapshotCommandInput, DeleteDiskSnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteDiskSnapshotCommandInput;
            constructor(input: DeleteDiskSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDiskSnapshotCommandInput, DeleteDiskSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDistributionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteDistributionRequest, DeleteDistributionResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteDistributionCommandInput extends DeleteDistributionRequest {
    }
    export interface DeleteDistributionCommandOutput extends DeleteDistributionResult, __MetadataBearer {
    }
    /**
        * <p>Deletes your Amazon Lightsail content delivery network (CDN) distribution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteDistributionCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteDistributionCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteDistributionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDistributionCommandInput} for command's `input` shape.
        * @see {@link DeleteDistributionCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteDistributionCommand extends $Command<DeleteDistributionCommandInput, DeleteDistributionCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteDistributionCommandInput;
            constructor(input: DeleteDistributionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDistributionCommandInput, DeleteDistributionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteDomainRequest, DeleteDomainResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteDomainCommandInput extends DeleteDomainRequest {
    }
    export interface DeleteDomainCommandOutput extends DeleteDomainResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified domain recordset and all of its domain records.</p>
        *          <p>The <code>delete domain</code> operation supports tag-based access control via resource
        *       tags applied to the resource identified by <code>domain name</code>. For more information, see
        *       the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteDomainCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteDomainCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDomainCommandInput} for command's `input` shape.
        * @see {@link DeleteDomainCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteDomainCommand extends $Command<DeleteDomainCommandInput, DeleteDomainCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteDomainCommandInput;
            constructor(input: DeleteDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDomainCommandInput, DeleteDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDomainEntryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteDomainEntryRequest, DeleteDomainEntryResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteDomainEntryCommandInput extends DeleteDomainEntryRequest {
    }
    export interface DeleteDomainEntryCommandOutput extends DeleteDomainEntryResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a specific domain entry.</p>
        *          <p>The <code>delete domain entry</code> operation supports tag-based access control via
        *       resource tags applied to the resource identified by <code>domain name</code>. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteDomainEntryCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteDomainEntryCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteDomainEntryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDomainEntryCommandInput} for command's `input` shape.
        * @see {@link DeleteDomainEntryCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteDomainEntryCommand extends $Command<DeleteDomainEntryCommandInput, DeleteDomainEntryCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteDomainEntryCommandInput;
            constructor(input: DeleteDomainEntryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDomainEntryCommandInput, DeleteDomainEntryCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteInstanceRequest, DeleteInstanceResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteInstanceCommandInput extends DeleteInstanceRequest {
    }
    export interface DeleteInstanceCommandOutput extends DeleteInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an Amazon Lightsail instance.</p>
        *          <p>The <code>delete instance</code> operation supports tag-based access control via resource
        *       tags applied to the resource identified by <code>instance name</code>. For more information,
        *       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteInstanceCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteInstanceCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteInstanceCommandInput} for command's `input` shape.
        * @see {@link DeleteInstanceCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteInstanceCommand extends $Command<DeleteInstanceCommandInput, DeleteInstanceCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteInstanceCommandInput;
            constructor(input: DeleteInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteInstanceCommandInput, DeleteInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteInstanceSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteInstanceSnapshotRequest, DeleteInstanceSnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteInstanceSnapshotCommandInput extends DeleteInstanceSnapshotRequest {
    }
    export interface DeleteInstanceSnapshotCommandOutput extends DeleteInstanceSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a specific snapshot of a virtual private server (or
        *       <i>instance</i>).</p>
        *          <p>The <code>delete instance snapshot</code> operation supports tag-based access control via
        *       resource tags applied to the resource identified by <code>instance snapshot name</code>. For
        *       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteInstanceSnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteInstanceSnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteInstanceSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteInstanceSnapshotCommandInput} for command's `input` shape.
        * @see {@link DeleteInstanceSnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteInstanceSnapshotCommand extends $Command<DeleteInstanceSnapshotCommandInput, DeleteInstanceSnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteInstanceSnapshotCommandInput;
            constructor(input: DeleteInstanceSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteInstanceSnapshotCommandInput, DeleteInstanceSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteKeyPairCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteKeyPairRequest, DeleteKeyPairResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteKeyPairCommandInput extends DeleteKeyPairRequest {
    }
    export interface DeleteKeyPairCommandOutput extends DeleteKeyPairResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified key pair by removing the public key from Amazon Lightsail.</p>
        *          <p>You can delete key pairs that were created using the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_ImportKeyPair.html">ImportKeyPair</a> and
        *         <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateKeyPair.html">CreateKeyPair</a> actions, as well as the Lightsail default key pair. A new default
        *       key pair will not be created unless you launch an instance without specifying a custom key
        *       pair, or you call the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_DownloadDefaultKeyPair.html">DownloadDefaultKeyPair</a> API. </p>
        *
        *          <p>The <code>delete key pair</code> operation supports tag-based access control via resource
        *       tags applied to the resource identified by <code>key pair name</code>. For more information,
        *       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteKeyPairCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteKeyPairCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteKeyPairCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteKeyPairCommandInput} for command's `input` shape.
        * @see {@link DeleteKeyPairCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteKeyPairCommand extends $Command<DeleteKeyPairCommandInput, DeleteKeyPairCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteKeyPairCommandInput;
            constructor(input: DeleteKeyPairCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteKeyPairCommandInput, DeleteKeyPairCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteKnownHostKeysCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteKnownHostKeysRequest, DeleteKnownHostKeysResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteKnownHostKeysCommandInput extends DeleteKnownHostKeysRequest {
    }
    export interface DeleteKnownHostKeysCommandOutput extends DeleteKnownHostKeysResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the known host key or certificate used by the Amazon Lightsail browser-based SSH or
        *       RDP clients to authenticate an instance. This operation enables the Lightsail browser-based
        *       SSH or RDP clients to connect to the instance after a host key mismatch.</p>
        *          <important>
        *             <p>Perform this operation only if you were expecting the host key or certificate mismatch
        *         or if you are familiar with the new host key or certificate on the instance. For more
        *         information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-troubleshooting-browser-based-ssh-rdp-client-connection">Troubleshooting connection issues when using the Amazon Lightsail browser-based SSH or RDP
        *           client</a>.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteKnownHostKeysCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteKnownHostKeysCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteKnownHostKeysCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteKnownHostKeysCommandInput} for command's `input` shape.
        * @see {@link DeleteKnownHostKeysCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteKnownHostKeysCommand extends $Command<DeleteKnownHostKeysCommandInput, DeleteKnownHostKeysCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteKnownHostKeysCommandInput;
            constructor(input: DeleteKnownHostKeysCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteKnownHostKeysCommandInput, DeleteKnownHostKeysCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteLoadBalancerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteLoadBalancerRequest, DeleteLoadBalancerResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteLoadBalancerCommandInput extends DeleteLoadBalancerRequest {
    }
    export interface DeleteLoadBalancerCommandOutput extends DeleteLoadBalancerResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a Lightsail load balancer and all its associated SSL/TLS certificates. Once the
        *       load balancer is deleted, you will need to create a new load balancer, create a new
        *       certificate, and verify domain ownership again.</p>
        *          <p>The <code>delete load balancer</code> operation supports tag-based access control via
        *       resource tags applied to the resource identified by <code>load balancer name</code>. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteLoadBalancerCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteLoadBalancerCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteLoadBalancerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLoadBalancerCommandInput} for command's `input` shape.
        * @see {@link DeleteLoadBalancerCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteLoadBalancerCommand extends $Command<DeleteLoadBalancerCommandInput, DeleteLoadBalancerCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteLoadBalancerCommandInput;
            constructor(input: DeleteLoadBalancerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLoadBalancerCommandInput, DeleteLoadBalancerCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteLoadBalancerTlsCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteLoadBalancerTlsCertificateRequest, DeleteLoadBalancerTlsCertificateResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteLoadBalancerTlsCertificateCommandInput extends DeleteLoadBalancerTlsCertificateRequest {
    }
    export interface DeleteLoadBalancerTlsCertificateCommandOutput extends DeleteLoadBalancerTlsCertificateResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an SSL/TLS certificate associated with a Lightsail load balancer.</p>
        *          <p>The <code>DeleteLoadBalancerTlsCertificate</code> operation supports tag-based access
        *       control via resource tags applied to the resource identified by <code>load balancer
        *         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteLoadBalancerTlsCertificateCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteLoadBalancerTlsCertificateCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteLoadBalancerTlsCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLoadBalancerTlsCertificateCommandInput} for command's `input` shape.
        * @see {@link DeleteLoadBalancerTlsCertificateCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteLoadBalancerTlsCertificateCommand extends $Command<DeleteLoadBalancerTlsCertificateCommandInput, DeleteLoadBalancerTlsCertificateCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteLoadBalancerTlsCertificateCommandInput;
            constructor(input: DeleteLoadBalancerTlsCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLoadBalancerTlsCertificateCommandInput, DeleteLoadBalancerTlsCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteRelationalDatabaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteRelationalDatabaseRequest, DeleteRelationalDatabaseResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteRelationalDatabaseCommandInput extends DeleteRelationalDatabaseRequest {
    }
    export interface DeleteRelationalDatabaseCommandOutput extends DeleteRelationalDatabaseResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a database in Amazon Lightsail.</p>
        *          <p>The <code>delete relational database</code> operation supports tag-based access control
        *       via resource tags applied to the resource identified by relationalDatabaseName. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteRelationalDatabaseCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteRelationalDatabaseCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteRelationalDatabaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRelationalDatabaseCommandInput} for command's `input` shape.
        * @see {@link DeleteRelationalDatabaseCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteRelationalDatabaseCommand extends $Command<DeleteRelationalDatabaseCommandInput, DeleteRelationalDatabaseCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteRelationalDatabaseCommandInput;
            constructor(input: DeleteRelationalDatabaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRelationalDatabaseCommandInput, DeleteRelationalDatabaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteRelationalDatabaseSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DeleteRelationalDatabaseSnapshotRequest, DeleteRelationalDatabaseSnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DeleteRelationalDatabaseSnapshotCommandInput extends DeleteRelationalDatabaseSnapshotRequest {
    }
    export interface DeleteRelationalDatabaseSnapshotCommandOutput extends DeleteRelationalDatabaseSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a database snapshot in Amazon Lightsail.</p>
        *          <p>The <code>delete relational database snapshot</code> operation supports tag-based access
        *       control via resource tags applied to the resource identified by relationalDatabaseName. For
        *       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DeleteRelationalDatabaseSnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DeleteRelationalDatabaseSnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DeleteRelationalDatabaseSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRelationalDatabaseSnapshotCommandInput} for command's `input` shape.
        * @see {@link DeleteRelationalDatabaseSnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DeleteRelationalDatabaseSnapshotCommand extends $Command<DeleteRelationalDatabaseSnapshotCommandInput, DeleteRelationalDatabaseSnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DeleteRelationalDatabaseSnapshotCommandInput;
            constructor(input: DeleteRelationalDatabaseSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRelationalDatabaseSnapshotCommandInput, DeleteRelationalDatabaseSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DetachCertificateFromDistributionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DetachCertificateFromDistributionRequest, DetachCertificateFromDistributionResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DetachCertificateFromDistributionCommandInput extends DetachCertificateFromDistributionRequest {
    }
    export interface DetachCertificateFromDistributionCommandOutput extends DetachCertificateFromDistributionResult, __MetadataBearer {
    }
    /**
        * <p>Detaches an SSL/TLS certificate from your Amazon Lightsail content delivery network (CDN)
        *       distribution.</p>
        *          <p>After the certificate is detached, your distribution stops accepting traffic for all of
        *       the domains that are associated with the certificate.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DetachCertificateFromDistributionCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DetachCertificateFromDistributionCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DetachCertificateFromDistributionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetachCertificateFromDistributionCommandInput} for command's `input` shape.
        * @see {@link DetachCertificateFromDistributionCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DetachCertificateFromDistributionCommand extends $Command<DetachCertificateFromDistributionCommandInput, DetachCertificateFromDistributionCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DetachCertificateFromDistributionCommandInput;
            constructor(input: DetachCertificateFromDistributionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetachCertificateFromDistributionCommandInput, DetachCertificateFromDistributionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DetachDiskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DetachDiskRequest, DetachDiskResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DetachDiskCommandInput extends DetachDiskRequest {
    }
    export interface DetachDiskCommandOutput extends DetachDiskResult, __MetadataBearer {
    }
    /**
        * <p>Detaches a stopped block storage disk from a Lightsail instance. Make sure to unmount
        *       any file systems on the device within your operating system before stopping the instance and
        *       detaching the disk.</p>
        *          <p>The <code>detach disk</code> operation supports tag-based access control via resource tags
        *       applied to the resource identified by <code>disk name</code>. For more information, see the
        *         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DetachDiskCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DetachDiskCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DetachDiskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetachDiskCommandInput} for command's `input` shape.
        * @see {@link DetachDiskCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DetachDiskCommand extends $Command<DetachDiskCommandInput, DetachDiskCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DetachDiskCommandInput;
            constructor(input: DetachDiskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetachDiskCommandInput, DetachDiskCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DetachInstancesFromLoadBalancerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DetachInstancesFromLoadBalancerRequest, DetachInstancesFromLoadBalancerResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DetachInstancesFromLoadBalancerCommandInput extends DetachInstancesFromLoadBalancerRequest {
    }
    export interface DetachInstancesFromLoadBalancerCommandOutput extends DetachInstancesFromLoadBalancerResult, __MetadataBearer {
    }
    /**
        * <p>Detaches the specified instances from a Lightsail load balancer.</p>
        *          <p>This operation waits until the instances are no longer needed before they are detached
        *       from the load balancer.</p>
        *          <p>The <code>detach instances from load balancer</code> operation supports tag-based access
        *       control via resource tags applied to the resource identified by <code>load balancer
        *         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DetachInstancesFromLoadBalancerCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DetachInstancesFromLoadBalancerCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DetachInstancesFromLoadBalancerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetachInstancesFromLoadBalancerCommandInput} for command's `input` shape.
        * @see {@link DetachInstancesFromLoadBalancerCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DetachInstancesFromLoadBalancerCommand extends $Command<DetachInstancesFromLoadBalancerCommandInput, DetachInstancesFromLoadBalancerCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DetachInstancesFromLoadBalancerCommandInput;
            constructor(input: DetachInstancesFromLoadBalancerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetachInstancesFromLoadBalancerCommandInput, DetachInstancesFromLoadBalancerCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DetachStaticIpCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DetachStaticIpRequest, DetachStaticIpResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DetachStaticIpCommandInput extends DetachStaticIpRequest {
    }
    export interface DetachStaticIpCommandOutput extends DetachStaticIpResult, __MetadataBearer {
    }
    /**
        * <p>Detaches a static IP from the Amazon Lightsail instance to which it is attached.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DetachStaticIpCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DetachStaticIpCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DetachStaticIpCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetachStaticIpCommandInput} for command's `input` shape.
        * @see {@link DetachStaticIpCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DetachStaticIpCommand extends $Command<DetachStaticIpCommandInput, DetachStaticIpCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DetachStaticIpCommandInput;
            constructor(input: DetachStaticIpCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetachStaticIpCommandInput, DetachStaticIpCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DisableAddOnCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DisableAddOnRequest, DisableAddOnResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DisableAddOnCommandInput extends DisableAddOnRequest {
    }
    export interface DisableAddOnCommandOutput extends DisableAddOnResult, __MetadataBearer {
    }
    /**
        * <p>Disables an add-on for an Amazon Lightsail resource. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DisableAddOnCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DisableAddOnCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DisableAddOnCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisableAddOnCommandInput} for command's `input` shape.
        * @see {@link DisableAddOnCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DisableAddOnCommand extends $Command<DisableAddOnCommandInput, DisableAddOnCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DisableAddOnCommandInput;
            constructor(input: DisableAddOnCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisableAddOnCommandInput, DisableAddOnCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DownloadDefaultKeyPairCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { DownloadDefaultKeyPairRequest, DownloadDefaultKeyPairResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface DownloadDefaultKeyPairCommandInput extends DownloadDefaultKeyPairRequest {
    }
    export interface DownloadDefaultKeyPairCommandOutput extends DownloadDefaultKeyPairResult, __MetadataBearer {
    }
    /**
        * <p>Downloads the regional Amazon Lightsail default key pair.</p>
        *          <p>This action also creates a Lightsail default key pair if a default key pair
        *       does not currently exist in the Amazon Web Services Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, DownloadDefaultKeyPairCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, DownloadDefaultKeyPairCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new DownloadDefaultKeyPairCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DownloadDefaultKeyPairCommandInput} for command's `input` shape.
        * @see {@link DownloadDefaultKeyPairCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class DownloadDefaultKeyPairCommand extends $Command<DownloadDefaultKeyPairCommandInput, DownloadDefaultKeyPairCommandOutput, LightsailClientResolvedConfig> {
            readonly input: DownloadDefaultKeyPairCommandInput;
            constructor(input: DownloadDefaultKeyPairCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DownloadDefaultKeyPairCommandInput, DownloadDefaultKeyPairCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/EnableAddOnCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { EnableAddOnRequest, EnableAddOnResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface EnableAddOnCommandInput extends EnableAddOnRequest {
    }
    export interface EnableAddOnCommandOutput extends EnableAddOnResult, __MetadataBearer {
    }
    /**
        * <p>Enables or modifies an add-on for an Amazon Lightsail resource. For more information, see
        *       the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, EnableAddOnCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, EnableAddOnCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new EnableAddOnCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableAddOnCommandInput} for command's `input` shape.
        * @see {@link EnableAddOnCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class EnableAddOnCommand extends $Command<EnableAddOnCommandInput, EnableAddOnCommandOutput, LightsailClientResolvedConfig> {
            readonly input: EnableAddOnCommandInput;
            constructor(input: EnableAddOnCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableAddOnCommandInput, EnableAddOnCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/ExportSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { ExportSnapshotRequest, ExportSnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface ExportSnapshotCommandInput extends ExportSnapshotRequest {
    }
    export interface ExportSnapshotCommandOutput extends ExportSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Exports an Amazon Lightsail instance or block storage disk snapshot to Amazon Elastic Compute Cloud (Amazon EC2).
        *       This operation results in an export snapshot record that can be used with the <code>create
        *         cloud formation stack</code> operation to create new Amazon EC2 instances.</p>
        *          <p>Exported instance snapshots appear in Amazon EC2 as Amazon Machine Images (AMIs), and the
        *       instance system disk appears as an Amazon Elastic Block Store (Amazon EBS) volume. Exported disk snapshots appear in
        *       Amazon EC2 as Amazon EBS volumes. Snapshots are exported to the same Amazon Web Services Region in
        *       Amazon EC2 as the source Lightsail snapshot.</p>
        *          <p></p>
        *          <p>The <code>export snapshot</code> operation supports tag-based access control via resource
        *       tags applied to the resource identified by <code>source snapshot name</code>. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        *          <note>
        *             <p>Use the <code>get instance snapshots</code> or <code>get disk snapshots</code>
        *         operations to get a list of snapshots that you can export to Amazon EC2.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, ExportSnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, ExportSnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new ExportSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ExportSnapshotCommandInput} for command's `input` shape.
        * @see {@link ExportSnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class ExportSnapshotCommand extends $Command<ExportSnapshotCommandInput, ExportSnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: ExportSnapshotCommandInput;
            constructor(input: ExportSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ExportSnapshotCommandInput, ExportSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetActiveNamesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetActiveNamesRequest, GetActiveNamesResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetActiveNamesCommandInput extends GetActiveNamesRequest {
    }
    export interface GetActiveNamesCommandOutput extends GetActiveNamesResult, __MetadataBearer {
    }
    /**
        * <p>Returns the names of all active (not deleted) resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetActiveNamesCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetActiveNamesCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetActiveNamesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetActiveNamesCommandInput} for command's `input` shape.
        * @see {@link GetActiveNamesCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetActiveNamesCommand extends $Command<GetActiveNamesCommandInput, GetActiveNamesCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetActiveNamesCommandInput;
            constructor(input: GetActiveNamesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetActiveNamesCommandInput, GetActiveNamesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetAlarmsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetAlarmsRequest, GetAlarmsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetAlarmsCommandInput extends GetAlarmsRequest {
    }
    export interface GetAlarmsCommandOutput extends GetAlarmsResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about the configured alarms. Specify an alarm name in your request to
        *       return information about a specific alarm, or specify a monitored resource name to return
        *       information about all alarms for a specific resource.</p>
        *          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
        *       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
        *       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
        *         in Amazon Lightsail</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetAlarmsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetAlarmsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetAlarmsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAlarmsCommandInput} for command's `input` shape.
        * @see {@link GetAlarmsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetAlarmsCommand extends $Command<GetAlarmsCommandInput, GetAlarmsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetAlarmsCommandInput;
            constructor(input: GetAlarmsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAlarmsCommandInput, GetAlarmsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetAutoSnapshotsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetAutoSnapshotsRequest, GetAutoSnapshotsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetAutoSnapshotsCommandInput extends GetAutoSnapshotsRequest {
    }
    export interface GetAutoSnapshotsCommandOutput extends GetAutoSnapshotsResult, __MetadataBearer {
    }
    /**
        * <p>Returns the available automatic snapshots for an instance or disk. For more information,
        *       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetAutoSnapshotsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetAutoSnapshotsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetAutoSnapshotsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAutoSnapshotsCommandInput} for command's `input` shape.
        * @see {@link GetAutoSnapshotsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetAutoSnapshotsCommand extends $Command<GetAutoSnapshotsCommandInput, GetAutoSnapshotsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetAutoSnapshotsCommandInput;
            constructor(input: GetAutoSnapshotsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAutoSnapshotsCommandInput, GetAutoSnapshotsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBlueprintsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetBlueprintsRequest, GetBlueprintsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetBlueprintsCommandInput extends GetBlueprintsRequest {
    }
    export interface GetBlueprintsCommandOutput extends GetBlueprintsResult, __MetadataBearer {
    }
    /**
        * <p>Returns the list of available instance images, or <i>blueprints</i>. You can
        *       use a blueprint to create a new instance already running a specific operating system, as well
        *       as a preinstalled app or development stack. The software each instance is running depends on
        *       the blueprint image you choose.</p>
        *          <note>
        *             <p>Use active blueprints when creating new instances. Inactive blueprints are listed to
        *         support customers with existing instances and are not necessarily available to create new
        *         instances. Blueprints are marked inactive when they become outdated due to operating system
        *         updates or new application releases.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetBlueprintsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetBlueprintsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetBlueprintsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBlueprintsCommandInput} for command's `input` shape.
        * @see {@link GetBlueprintsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetBlueprintsCommand extends $Command<GetBlueprintsCommandInput, GetBlueprintsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetBlueprintsCommandInput;
            constructor(input: GetBlueprintsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBlueprintsCommandInput, GetBlueprintsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBucketAccessKeysCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetBucketAccessKeysRequest, GetBucketAccessKeysResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetBucketAccessKeysCommandInput extends GetBucketAccessKeysRequest {
    }
    export interface GetBucketAccessKeysCommandOutput extends GetBucketAccessKeysResult, __MetadataBearer {
    }
    /**
        * <p>Returns the existing access key IDs for the specified Amazon Lightsail bucket.</p>
        *
        *          <important>
        *             <p>This action does not return the secret access key value of an access key. You can get a
        *         secret access key only when you create it from the response of the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html">CreateBucketAccessKey</a> action. If you lose the secret access key, you must create
        *         a new access key.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetBucketAccessKeysCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetBucketAccessKeysCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetBucketAccessKeysCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBucketAccessKeysCommandInput} for command's `input` shape.
        * @see {@link GetBucketAccessKeysCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetBucketAccessKeysCommand extends $Command<GetBucketAccessKeysCommandInput, GetBucketAccessKeysCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetBucketAccessKeysCommandInput;
            constructor(input: GetBucketAccessKeysCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBucketAccessKeysCommandInput, GetBucketAccessKeysCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBucketBundlesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetBucketBundlesRequest, GetBucketBundlesResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetBucketBundlesCommandInput extends GetBucketBundlesRequest {
    }
    export interface GetBucketBundlesCommandOutput extends GetBucketBundlesResult, __MetadataBearer {
    }
    /**
        * <p>Returns the bundles that you can apply to a Amazon Lightsail bucket.</p>
        *
        *          <p>The bucket bundle specifies the monthly cost, storage quota, and data transfer quota for a
        *       bucket.</p>
        *
        *          <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to update the
        *       bundle for a bucket.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetBucketBundlesCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetBucketBundlesCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetBucketBundlesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBucketBundlesCommandInput} for command's `input` shape.
        * @see {@link GetBucketBundlesCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetBucketBundlesCommand extends $Command<GetBucketBundlesCommandInput, GetBucketBundlesCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetBucketBundlesCommandInput;
            constructor(input: GetBucketBundlesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBucketBundlesCommandInput, GetBucketBundlesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBucketMetricDataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetBucketMetricDataRequest, GetBucketMetricDataResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetBucketMetricDataCommandInput extends GetBucketMetricDataRequest {
    }
    export interface GetBucketMetricDataCommandOutput extends GetBucketMetricDataResult, __MetadataBearer {
    }
    /**
        * <p>Returns the data points of a specific metric for an Amazon Lightsail bucket.</p>
        *
        *          <p>Metrics report the utilization of a bucket. View and collect metric data regularly to
        *       monitor the number of objects stored in a bucket (including object versions) and the storage
        *       space used by those objects.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetBucketMetricDataCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetBucketMetricDataCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetBucketMetricDataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBucketMetricDataCommandInput} for command's `input` shape.
        * @see {@link GetBucketMetricDataCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetBucketMetricDataCommand extends $Command<GetBucketMetricDataCommandInput, GetBucketMetricDataCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetBucketMetricDataCommandInput;
            constructor(input: GetBucketMetricDataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBucketMetricDataCommandInput, GetBucketMetricDataCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBucketsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetBucketsRequest, GetBucketsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetBucketsCommandInput extends GetBucketsRequest {
    }
    export interface GetBucketsCommandOutput extends GetBucketsResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about one or more Amazon Lightsail buckets. The information returned
        *       includes the synchronization status of the Amazon Simple Storage Service (Amazon S3)
        *       account-level block public access feature for your Lightsail buckets.</p>
        *
        *          <p>For more information about buckets, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/buckets-in-amazon-lightsail">Buckets in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer
        *         Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetBucketsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetBucketsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetBucketsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBucketsCommandInput} for command's `input` shape.
        * @see {@link GetBucketsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetBucketsCommand extends $Command<GetBucketsCommandInput, GetBucketsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetBucketsCommandInput;
            constructor(input: GetBucketsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBucketsCommandInput, GetBucketsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBundlesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetBundlesRequest, GetBundlesResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetBundlesCommandInput extends GetBundlesRequest {
    }
    export interface GetBundlesCommandOutput extends GetBundlesResult, __MetadataBearer {
    }
    /**
        * <p>Returns the bundles that you can apply to an Amazon Lightsail instance when you create
        *       it.</p>
        *
        *          <p>A bundle describes the specifications of an instance, such as the monthly cost, amount of
        *       memory, the number of vCPUs, amount of storage space, and monthly network data transfer
        *       quota.</p>
        *
        *          <note>
        *             <p>Bundles are referred to as <i>instance plans</i> in the Lightsail
        *         console.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetBundlesCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetBundlesCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetBundlesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBundlesCommandInput} for command's `input` shape.
        * @see {@link GetBundlesCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetBundlesCommand extends $Command<GetBundlesCommandInput, GetBundlesCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetBundlesCommandInput;
            constructor(input: GetBundlesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBundlesCommandInput, GetBundlesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetCertificatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetCertificatesRequest, GetCertificatesResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetCertificatesCommandInput extends GetCertificatesRequest {
    }
    export interface GetCertificatesCommandOutput extends GetCertificatesResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about one or more Amazon Lightsail SSL/TLS certificates.</p>
        *          <note>
        *             <p>To get a summary of a certificate, ommit <code>includeCertificateDetails</code> from
        *         your request. The response will include only the certificate Amazon Resource Name (ARN),
        *         certificate name, domain name, and tags.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetCertificatesCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetCertificatesCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetCertificatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCertificatesCommandInput} for command's `input` shape.
        * @see {@link GetCertificatesCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetCertificatesCommand extends $Command<GetCertificatesCommandInput, GetCertificatesCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetCertificatesCommandInput;
            constructor(input: GetCertificatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCertificatesCommandInput, GetCertificatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetCloudFormationStackRecordsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetCloudFormationStackRecordsRequest, GetCloudFormationStackRecordsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetCloudFormationStackRecordsCommandInput extends GetCloudFormationStackRecordsRequest {
    }
    export interface GetCloudFormationStackRecordsCommandOutput extends GetCloudFormationStackRecordsResult, __MetadataBearer {
    }
    /**
        * <p>Returns the CloudFormation stack record created as a result of the <code>create cloud
        *         formation stack</code> operation.</p>
        *          <p>An AWS CloudFormation stack is used to create a new Amazon EC2 instance from an exported Lightsail
        *       snapshot.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetCloudFormationStackRecordsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetCloudFormationStackRecordsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetCloudFormationStackRecordsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCloudFormationStackRecordsCommandInput} for command's `input` shape.
        * @see {@link GetCloudFormationStackRecordsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetCloudFormationStackRecordsCommand extends $Command<GetCloudFormationStackRecordsCommandInput, GetCloudFormationStackRecordsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetCloudFormationStackRecordsCommandInput;
            constructor(input: GetCloudFormationStackRecordsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCloudFormationStackRecordsCommandInput, GetCloudFormationStackRecordsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContactMethodsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetContactMethodsRequest, GetContactMethodsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetContactMethodsCommandInput extends GetContactMethodsRequest {
    }
    export interface GetContactMethodsCommandOutput extends GetContactMethodsResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about the configured contact methods. Specify a protocol in your
        *       request to return information about a specific contact method.</p>
        *          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
        *       You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services
        *       Regions, and SMS text messages cannot be sent to some countries/regions. For more information,
        *       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetContactMethodsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetContactMethodsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetContactMethodsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetContactMethodsCommandInput} for command's `input` shape.
        * @see {@link GetContactMethodsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetContactMethodsCommand extends $Command<GetContactMethodsCommandInput, GetContactMethodsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetContactMethodsCommandInput;
            constructor(input: GetContactMethodsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetContactMethodsCommandInput, GetContactMethodsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerAPIMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetContainerAPIMetadataRequest, GetContainerAPIMetadataResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetContainerAPIMetadataCommandInput extends GetContainerAPIMetadataRequest {
    }
    export interface GetContainerAPIMetadataCommandOutput extends GetContainerAPIMetadataResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about Amazon Lightsail containers, such as the current version of the
        *       Lightsail Control (lightsailctl) plugin.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetContainerAPIMetadataCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetContainerAPIMetadataCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetContainerAPIMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetContainerAPIMetadataCommandInput} for command's `input` shape.
        * @see {@link GetContainerAPIMetadataCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetContainerAPIMetadataCommand extends $Command<GetContainerAPIMetadataCommandInput, GetContainerAPIMetadataCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetContainerAPIMetadataCommandInput;
            constructor(input: GetContainerAPIMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetContainerAPIMetadataCommandInput, GetContainerAPIMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerImagesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetContainerImagesRequest, GetContainerImagesResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetContainerImagesCommandInput extends GetContainerImagesRequest {
    }
    export interface GetContainerImagesCommandOutput extends GetContainerImagesResult, __MetadataBearer {
    }
    /**
        * <p>Returns the container images that are registered to your Amazon Lightsail container
        *       service.</p>
        *
        *          <note>
        *             <p>If you created a deployment on your Lightsail container service that uses container
        *         images from a public registry like Docker Hub, those images are not returned as part of this
        *         action. Those images are not registered to your Lightsail container service.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetContainerImagesCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetContainerImagesCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetContainerImagesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetContainerImagesCommandInput} for command's `input` shape.
        * @see {@link GetContainerImagesCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetContainerImagesCommand extends $Command<GetContainerImagesCommandInput, GetContainerImagesCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetContainerImagesCommandInput;
            constructor(input: GetContainerImagesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetContainerImagesCommandInput, GetContainerImagesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerLogCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetContainerLogRequest, GetContainerLogResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetContainerLogCommandInput extends GetContainerLogRequest {
    }
    export interface GetContainerLogCommandOutput extends GetContainerLogResult, __MetadataBearer {
    }
    /**
        * <p>Returns the log events of a container of your Amazon Lightsail container service.</p>
        *
        *          <p>If your container service has more than one node (i.e., a scale greater than 1), then the
        *       log events that are returned for the specified container are merged from all nodes on your
        *       container service.</p>
        *
        *          <note>
        *             <p>Container logs are retained for a certain amount of time. For more information, see
        *           <a href="https://docs.aws.amazon.com/general/latest/gr/lightsail.html">Amazon Lightsail
        *           endpoints and quotas</a> in the <i>AWS General Reference</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetContainerLogCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetContainerLogCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetContainerLogCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetContainerLogCommandInput} for command's `input` shape.
        * @see {@link GetContainerLogCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetContainerLogCommand extends $Command<GetContainerLogCommandInput, GetContainerLogCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetContainerLogCommandInput;
            constructor(input: GetContainerLogCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetContainerLogCommandInput, GetContainerLogCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerServiceDeploymentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetContainerServiceDeploymentsRequest, GetContainerServiceDeploymentsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetContainerServiceDeploymentsCommandInput extends GetContainerServiceDeploymentsRequest {
    }
    export interface GetContainerServiceDeploymentsCommandOutput extends GetContainerServiceDeploymentsResult, __MetadataBearer {
    }
    /**
        * <p>Returns the deployments for your Amazon Lightsail container service</p>
        *
        *          <p>A deployment specifies the settings, such as the ports and launch command, of containers
        *       that are deployed to your container service.</p>
        *
        *          <p>The deployments are ordered by version in ascending order. The newest version is listed at
        *       the top of the response.</p>
        *
        *          <note>
        *             <p>A set number of deployments are kept before the oldest one is replaced with the newest
        *         one. For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/lightsail.html">Amazon Lightsail
        *           endpoints and quotas</a> in the <i>AWS General Reference</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetContainerServiceDeploymentsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetContainerServiceDeploymentsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetContainerServiceDeploymentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetContainerServiceDeploymentsCommandInput} for command's `input` shape.
        * @see {@link GetContainerServiceDeploymentsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetContainerServiceDeploymentsCommand extends $Command<GetContainerServiceDeploymentsCommandInput, GetContainerServiceDeploymentsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetContainerServiceDeploymentsCommandInput;
            constructor(input: GetContainerServiceDeploymentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetContainerServiceDeploymentsCommandInput, GetContainerServiceDeploymentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerServiceMetricDataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetContainerServiceMetricDataRequest, GetContainerServiceMetricDataResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetContainerServiceMetricDataCommandInput extends GetContainerServiceMetricDataRequest {
    }
    export interface GetContainerServiceMetricDataCommandOutput extends GetContainerServiceMetricDataResult, __MetadataBearer {
    }
    /**
        * <p>Returns the data points of a specific metric of your Amazon Lightsail container
        *       service.</p>
        *
        *          <p>Metrics report the utilization of your resources. Monitor and collect metric data
        *       regularly to maintain the reliability, availability, and performance of your resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetContainerServiceMetricDataCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetContainerServiceMetricDataCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetContainerServiceMetricDataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetContainerServiceMetricDataCommandInput} for command's `input` shape.
        * @see {@link GetContainerServiceMetricDataCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetContainerServiceMetricDataCommand extends $Command<GetContainerServiceMetricDataCommandInput, GetContainerServiceMetricDataCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetContainerServiceMetricDataCommandInput;
            constructor(input: GetContainerServiceMetricDataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetContainerServiceMetricDataCommandInput, GetContainerServiceMetricDataCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerServicePowersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetContainerServicePowersRequest, GetContainerServicePowersResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetContainerServicePowersCommandInput extends GetContainerServicePowersRequest {
    }
    export interface GetContainerServicePowersCommandOutput extends GetContainerServicePowersResult, __MetadataBearer {
    }
    /**
        * <p>Returns the list of powers that can be specified for your Amazon Lightsail container
        *       services.</p>
        *
        *          <p>The power specifies the amount of memory, the number of vCPUs, and the base price of the
        *       container service.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetContainerServicePowersCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetContainerServicePowersCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetContainerServicePowersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetContainerServicePowersCommandInput} for command's `input` shape.
        * @see {@link GetContainerServicePowersCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetContainerServicePowersCommand extends $Command<GetContainerServicePowersCommandInput, GetContainerServicePowersCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetContainerServicePowersCommandInput;
            constructor(input: GetContainerServicePowersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetContainerServicePowersCommandInput, GetContainerServicePowersCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerServicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { ContainerServicesListResult, GetContainerServicesRequest } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetContainerServicesCommandInput extends GetContainerServicesRequest {
    }
    export interface GetContainerServicesCommandOutput extends ContainerServicesListResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about one or more of your Amazon Lightsail container services.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetContainerServicesCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetContainerServicesCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetContainerServicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetContainerServicesCommandInput} for command's `input` shape.
        * @see {@link GetContainerServicesCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetContainerServicesCommand extends $Command<GetContainerServicesCommandInput, GetContainerServicesCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetContainerServicesCommandInput;
            constructor(input: GetContainerServicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetContainerServicesCommandInput, GetContainerServicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDiskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetDiskRequest, GetDiskResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetDiskCommandInput extends GetDiskRequest {
    }
    export interface GetDiskCommandOutput extends GetDiskResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specific block storage disk.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetDiskCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetDiskCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetDiskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDiskCommandInput} for command's `input` shape.
        * @see {@link GetDiskCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetDiskCommand extends $Command<GetDiskCommandInput, GetDiskCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetDiskCommandInput;
            constructor(input: GetDiskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDiskCommandInput, GetDiskCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDisksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetDisksRequest, GetDisksResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetDisksCommandInput extends GetDisksRequest {
    }
    export interface GetDisksCommandOutput extends GetDisksResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about all block storage disks in your AWS account and region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetDisksCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetDisksCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetDisksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDisksCommandInput} for command's `input` shape.
        * @see {@link GetDisksCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetDisksCommand extends $Command<GetDisksCommandInput, GetDisksCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetDisksCommandInput;
            constructor(input: GetDisksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDisksCommandInput, GetDisksCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDiskSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetDiskSnapshotRequest, GetDiskSnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetDiskSnapshotCommandInput extends GetDiskSnapshotRequest {
    }
    export interface GetDiskSnapshotCommandOutput extends GetDiskSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specific block storage disk snapshot.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetDiskSnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetDiskSnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetDiskSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDiskSnapshotCommandInput} for command's `input` shape.
        * @see {@link GetDiskSnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetDiskSnapshotCommand extends $Command<GetDiskSnapshotCommandInput, GetDiskSnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetDiskSnapshotCommandInput;
            constructor(input: GetDiskSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDiskSnapshotCommandInput, GetDiskSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDiskSnapshotsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetDiskSnapshotsRequest, GetDiskSnapshotsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetDiskSnapshotsCommandInput extends GetDiskSnapshotsRequest {
    }
    export interface GetDiskSnapshotsCommandOutput extends GetDiskSnapshotsResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about all block storage disk snapshots in your AWS account and
        *       region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetDiskSnapshotsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetDiskSnapshotsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetDiskSnapshotsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDiskSnapshotsCommandInput} for command's `input` shape.
        * @see {@link GetDiskSnapshotsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetDiskSnapshotsCommand extends $Command<GetDiskSnapshotsCommandInput, GetDiskSnapshotsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetDiskSnapshotsCommandInput;
            constructor(input: GetDiskSnapshotsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDiskSnapshotsCommandInput, GetDiskSnapshotsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDistributionBundlesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetDistributionBundlesRequest, GetDistributionBundlesResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetDistributionBundlesCommandInput extends GetDistributionBundlesRequest {
    }
    export interface GetDistributionBundlesCommandOutput extends GetDistributionBundlesResult, __MetadataBearer {
    }
    /**
        * <p>Returns the bundles that can be applied to your Amazon Lightsail content delivery network
        *       (CDN) distributions.</p>
        *          <p>A distribution bundle specifies the monthly network transfer quota and monthly cost of
        *       your distribution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetDistributionBundlesCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetDistributionBundlesCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetDistributionBundlesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDistributionBundlesCommandInput} for command's `input` shape.
        * @see {@link GetDistributionBundlesCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetDistributionBundlesCommand extends $Command<GetDistributionBundlesCommandInput, GetDistributionBundlesCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetDistributionBundlesCommandInput;
            constructor(input: GetDistributionBundlesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDistributionBundlesCommandInput, GetDistributionBundlesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDistributionLatestCacheResetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetDistributionLatestCacheResetRequest, GetDistributionLatestCacheResetResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetDistributionLatestCacheResetCommandInput extends GetDistributionLatestCacheResetRequest {
    }
    export interface GetDistributionLatestCacheResetCommandOutput extends GetDistributionLatestCacheResetResult, __MetadataBearer {
    }
    /**
        * <p>Returns the timestamp and status of the last cache reset of a specific Amazon Lightsail
        *       content delivery network (CDN) distribution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetDistributionLatestCacheResetCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetDistributionLatestCacheResetCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetDistributionLatestCacheResetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDistributionLatestCacheResetCommandInput} for command's `input` shape.
        * @see {@link GetDistributionLatestCacheResetCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetDistributionLatestCacheResetCommand extends $Command<GetDistributionLatestCacheResetCommandInput, GetDistributionLatestCacheResetCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetDistributionLatestCacheResetCommandInput;
            constructor(input: GetDistributionLatestCacheResetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDistributionLatestCacheResetCommandInput, GetDistributionLatestCacheResetCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDistributionMetricDataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetDistributionMetricDataRequest, GetDistributionMetricDataResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetDistributionMetricDataCommandInput extends GetDistributionMetricDataRequest {
    }
    export interface GetDistributionMetricDataCommandOutput extends GetDistributionMetricDataResult, __MetadataBearer {
    }
    /**
        * <p>Returns the data points of a specific metric for an Amazon Lightsail content delivery
        *       network (CDN) distribution.</p>
        *          <p>Metrics report the utilization of your resources, and the error counts generated by them.
        *       Monitor and collect metric data regularly to maintain the reliability, availability, and
        *       performance of your resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetDistributionMetricDataCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetDistributionMetricDataCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetDistributionMetricDataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDistributionMetricDataCommandInput} for command's `input` shape.
        * @see {@link GetDistributionMetricDataCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetDistributionMetricDataCommand extends $Command<GetDistributionMetricDataCommandInput, GetDistributionMetricDataCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetDistributionMetricDataCommandInput;
            constructor(input: GetDistributionMetricDataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDistributionMetricDataCommandInput, GetDistributionMetricDataCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDistributionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetDistributionsRequest, GetDistributionsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetDistributionsCommandInput extends GetDistributionsRequest {
    }
    export interface GetDistributionsCommandOutput extends GetDistributionsResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about one or more of your Amazon Lightsail content delivery network
        *       (CDN) distributions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetDistributionsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetDistributionsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetDistributionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDistributionsCommandInput} for command's `input` shape.
        * @see {@link GetDistributionsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetDistributionsCommand extends $Command<GetDistributionsCommandInput, GetDistributionsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetDistributionsCommandInput;
            constructor(input: GetDistributionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDistributionsCommandInput, GetDistributionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetDomainRequest, GetDomainResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetDomainCommandInput extends GetDomainRequest {
    }
    export interface GetDomainCommandOutput extends GetDomainResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specific domain recordset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetDomainCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetDomainCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDomainCommandInput} for command's `input` shape.
        * @see {@link GetDomainCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetDomainCommand extends $Command<GetDomainCommandInput, GetDomainCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetDomainCommandInput;
            constructor(input: GetDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDomainCommandInput, GetDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDomainsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetDomainsRequest, GetDomainsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetDomainsCommandInput extends GetDomainsRequest {
    }
    export interface GetDomainsCommandOutput extends GetDomainsResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all domains in the user's account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetDomainsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetDomainsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetDomainsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDomainsCommandInput} for command's `input` shape.
        * @see {@link GetDomainsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetDomainsCommand extends $Command<GetDomainsCommandInput, GetDomainsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetDomainsCommandInput;
            constructor(input: GetDomainsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDomainsCommandInput, GetDomainsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetExportSnapshotRecordsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetExportSnapshotRecordsRequest, GetExportSnapshotRecordsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetExportSnapshotRecordsCommandInput extends GetExportSnapshotRecordsRequest {
    }
    export interface GetExportSnapshotRecordsCommandOutput extends GetExportSnapshotRecordsResult, __MetadataBearer {
    }
    /**
        * <p>Returns all export snapshot records created as a result of the <code>export
        *         snapshot</code> operation.</p>
        *          <p>An export snapshot record can be used to create a new Amazon EC2 instance and its related
        *       resources with the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateCloudFormationStack.html">CreateCloudFormationStack</a>
        *       action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetExportSnapshotRecordsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetExportSnapshotRecordsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetExportSnapshotRecordsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetExportSnapshotRecordsCommandInput} for command's `input` shape.
        * @see {@link GetExportSnapshotRecordsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetExportSnapshotRecordsCommand extends $Command<GetExportSnapshotRecordsCommandInput, GetExportSnapshotRecordsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetExportSnapshotRecordsCommandInput;
            constructor(input: GetExportSnapshotRecordsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetExportSnapshotRecordsCommandInput, GetExportSnapshotRecordsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceAccessDetailsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetInstanceAccessDetailsRequest, GetInstanceAccessDetailsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetInstanceAccessDetailsCommandInput extends GetInstanceAccessDetailsRequest {
    }
    export interface GetInstanceAccessDetailsCommandOutput extends GetInstanceAccessDetailsResult, __MetadataBearer {
    }
    /**
        * <p>Returns temporary SSH keys you can use to connect to a specific virtual private server, or
        *         <i>instance</i>.</p>
        *          <p>The <code>get instance access details</code> operation supports tag-based access control
        *       via resource tags applied to the resource identified by <code>instance name</code>. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetInstanceAccessDetailsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetInstanceAccessDetailsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetInstanceAccessDetailsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInstanceAccessDetailsCommandInput} for command's `input` shape.
        * @see {@link GetInstanceAccessDetailsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetInstanceAccessDetailsCommand extends $Command<GetInstanceAccessDetailsCommandInput, GetInstanceAccessDetailsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetInstanceAccessDetailsCommandInput;
            constructor(input: GetInstanceAccessDetailsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInstanceAccessDetailsCommandInput, GetInstanceAccessDetailsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetInstanceRequest, GetInstanceResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetInstanceCommandInput extends GetInstanceRequest {
    }
    export interface GetInstanceCommandOutput extends GetInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specific Amazon Lightsail instance, which is a virtual private
        *       server.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetInstanceCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetInstanceCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInstanceCommandInput} for command's `input` shape.
        * @see {@link GetInstanceCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetInstanceCommand extends $Command<GetInstanceCommandInput, GetInstanceCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetInstanceCommandInput;
            constructor(input: GetInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInstanceCommandInput, GetInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceMetricDataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetInstanceMetricDataRequest, GetInstanceMetricDataResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetInstanceMetricDataCommandInput extends GetInstanceMetricDataRequest {
    }
    export interface GetInstanceMetricDataCommandOutput extends GetInstanceMetricDataResult, __MetadataBearer {
    }
    /**
        * <p>Returns the data points for the specified Amazon Lightsail instance metric, given an
        *       instance name.</p>
        *          <p>Metrics report the utilization of your resources, and the error counts generated by them.
        *       Monitor and collect metric data regularly to maintain the reliability, availability, and
        *       performance of your resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetInstanceMetricDataCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetInstanceMetricDataCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetInstanceMetricDataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInstanceMetricDataCommandInput} for command's `input` shape.
        * @see {@link GetInstanceMetricDataCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetInstanceMetricDataCommand extends $Command<GetInstanceMetricDataCommandInput, GetInstanceMetricDataCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetInstanceMetricDataCommandInput;
            constructor(input: GetInstanceMetricDataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInstanceMetricDataCommandInput, GetInstanceMetricDataCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstancePortStatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetInstancePortStatesRequest, GetInstancePortStatesResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetInstancePortStatesCommandInput extends GetInstancePortStatesRequest {
    }
    export interface GetInstancePortStatesCommandOutput extends GetInstancePortStatesResult, __MetadataBearer {
    }
    /**
        * <p>Returns the firewall port states for a specific Amazon Lightsail instance, the IP addresses
        *       allowed to connect to the instance through the ports, and the protocol.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetInstancePortStatesCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetInstancePortStatesCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetInstancePortStatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInstancePortStatesCommandInput} for command's `input` shape.
        * @see {@link GetInstancePortStatesCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetInstancePortStatesCommand extends $Command<GetInstancePortStatesCommandInput, GetInstancePortStatesCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetInstancePortStatesCommandInput;
            constructor(input: GetInstancePortStatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInstancePortStatesCommandInput, GetInstancePortStatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstancesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetInstancesRequest, GetInstancesResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetInstancesCommandInput extends GetInstancesRequest {
    }
    export interface GetInstancesCommandOutput extends GetInstancesResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about all Amazon Lightsail virtual private servers, or
        *         <i>instances</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetInstancesCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetInstancesCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetInstancesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInstancesCommandInput} for command's `input` shape.
        * @see {@link GetInstancesCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetInstancesCommand extends $Command<GetInstancesCommandInput, GetInstancesCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetInstancesCommandInput;
            constructor(input: GetInstancesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInstancesCommandInput, GetInstancesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetInstanceSnapshotRequest, GetInstanceSnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetInstanceSnapshotCommandInput extends GetInstanceSnapshotRequest {
    }
    export interface GetInstanceSnapshotCommandOutput extends GetInstanceSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specific instance snapshot.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetInstanceSnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetInstanceSnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetInstanceSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInstanceSnapshotCommandInput} for command's `input` shape.
        * @see {@link GetInstanceSnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetInstanceSnapshotCommand extends $Command<GetInstanceSnapshotCommandInput, GetInstanceSnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetInstanceSnapshotCommandInput;
            constructor(input: GetInstanceSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInstanceSnapshotCommandInput, GetInstanceSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceSnapshotsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetInstanceSnapshotsRequest, GetInstanceSnapshotsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetInstanceSnapshotsCommandInput extends GetInstanceSnapshotsRequest {
    }
    export interface GetInstanceSnapshotsCommandOutput extends GetInstanceSnapshotsResult, __MetadataBearer {
    }
    /**
        * <p>Returns all instance snapshots for the user's account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetInstanceSnapshotsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetInstanceSnapshotsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetInstanceSnapshotsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInstanceSnapshotsCommandInput} for command's `input` shape.
        * @see {@link GetInstanceSnapshotsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetInstanceSnapshotsCommand extends $Command<GetInstanceSnapshotsCommandInput, GetInstanceSnapshotsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetInstanceSnapshotsCommandInput;
            constructor(input: GetInstanceSnapshotsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInstanceSnapshotsCommandInput, GetInstanceSnapshotsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceStateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetInstanceStateRequest, GetInstanceStateResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetInstanceStateCommandInput extends GetInstanceStateRequest {
    }
    export interface GetInstanceStateCommandOutput extends GetInstanceStateResult, __MetadataBearer {
    }
    /**
        * <p>Returns the state of a specific instance. Works on one instance at a time.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetInstanceStateCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetInstanceStateCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetInstanceStateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInstanceStateCommandInput} for command's `input` shape.
        * @see {@link GetInstanceStateCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetInstanceStateCommand extends $Command<GetInstanceStateCommandInput, GetInstanceStateCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetInstanceStateCommandInput;
            constructor(input: GetInstanceStateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInstanceStateCommandInput, GetInstanceStateCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetKeyPairCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetKeyPairRequest, GetKeyPairResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetKeyPairCommandInput extends GetKeyPairRequest {
    }
    export interface GetKeyPairCommandOutput extends GetKeyPairResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specific key pair.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetKeyPairCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetKeyPairCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetKeyPairCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetKeyPairCommandInput} for command's `input` shape.
        * @see {@link GetKeyPairCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetKeyPairCommand extends $Command<GetKeyPairCommandInput, GetKeyPairCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetKeyPairCommandInput;
            constructor(input: GetKeyPairCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetKeyPairCommandInput, GetKeyPairCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetKeyPairsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetKeyPairsRequest, GetKeyPairsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetKeyPairsCommandInput extends GetKeyPairsRequest {
    }
    export interface GetKeyPairsCommandOutput extends GetKeyPairsResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about all key pairs in the user's account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetKeyPairsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetKeyPairsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetKeyPairsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetKeyPairsCommandInput} for command's `input` shape.
        * @see {@link GetKeyPairsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetKeyPairsCommand extends $Command<GetKeyPairsCommandInput, GetKeyPairsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetKeyPairsCommandInput;
            constructor(input: GetKeyPairsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetKeyPairsCommandInput, GetKeyPairsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetLoadBalancerRequest, GetLoadBalancerResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetLoadBalancerCommandInput extends GetLoadBalancerRequest {
    }
    export interface GetLoadBalancerCommandOutput extends GetLoadBalancerResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about the specified Lightsail load balancer.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetLoadBalancerCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetLoadBalancerCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetLoadBalancerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLoadBalancerCommandInput} for command's `input` shape.
        * @see {@link GetLoadBalancerCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetLoadBalancerCommand extends $Command<GetLoadBalancerCommandInput, GetLoadBalancerCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetLoadBalancerCommandInput;
            constructor(input: GetLoadBalancerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLoadBalancerCommandInput, GetLoadBalancerCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancerMetricDataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetLoadBalancerMetricDataRequest, GetLoadBalancerMetricDataResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetLoadBalancerMetricDataCommandInput extends GetLoadBalancerMetricDataRequest {
    }
    export interface GetLoadBalancerMetricDataCommandOutput extends GetLoadBalancerMetricDataResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about health metrics for your Lightsail load balancer.</p>
        *          <p>Metrics report the utilization of your resources, and the error counts generated by them.
        *       Monitor and collect metric data regularly to maintain the reliability, availability, and
        *       performance of your resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetLoadBalancerMetricDataCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetLoadBalancerMetricDataCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetLoadBalancerMetricDataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLoadBalancerMetricDataCommandInput} for command's `input` shape.
        * @see {@link GetLoadBalancerMetricDataCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetLoadBalancerMetricDataCommand extends $Command<GetLoadBalancerMetricDataCommandInput, GetLoadBalancerMetricDataCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetLoadBalancerMetricDataCommandInput;
            constructor(input: GetLoadBalancerMetricDataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLoadBalancerMetricDataCommandInput, GetLoadBalancerMetricDataCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetLoadBalancersRequest, GetLoadBalancersResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetLoadBalancersCommandInput extends GetLoadBalancersRequest {
    }
    export interface GetLoadBalancersCommandOutput extends GetLoadBalancersResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about all load balancers in an account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetLoadBalancersCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetLoadBalancersCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetLoadBalancersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLoadBalancersCommandInput} for command's `input` shape.
        * @see {@link GetLoadBalancersCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetLoadBalancersCommand extends $Command<GetLoadBalancersCommandInput, GetLoadBalancersCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetLoadBalancersCommandInput;
            constructor(input: GetLoadBalancersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLoadBalancersCommandInput, GetLoadBalancersCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancerTlsCertificatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetLoadBalancerTlsCertificatesRequest, GetLoadBalancerTlsCertificatesResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetLoadBalancerTlsCertificatesCommandInput extends GetLoadBalancerTlsCertificatesRequest {
    }
    export interface GetLoadBalancerTlsCertificatesCommandOutput extends GetLoadBalancerTlsCertificatesResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about the TLS certificates that are associated with the specified
        *       Lightsail load balancer.</p>
        *          <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p>
        *          <p>You can have a maximum of 2 certificates associated with a Lightsail load balancer. One
        *       is active and the other is inactive.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetLoadBalancerTlsCertificatesCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetLoadBalancerTlsCertificatesCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetLoadBalancerTlsCertificatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLoadBalancerTlsCertificatesCommandInput} for command's `input` shape.
        * @see {@link GetLoadBalancerTlsCertificatesCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetLoadBalancerTlsCertificatesCommand extends $Command<GetLoadBalancerTlsCertificatesCommandInput, GetLoadBalancerTlsCertificatesCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetLoadBalancerTlsCertificatesCommandInput;
            constructor(input: GetLoadBalancerTlsCertificatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLoadBalancerTlsCertificatesCommandInput, GetLoadBalancerTlsCertificatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancerTlsPoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetLoadBalancerTlsPoliciesRequest, GetLoadBalancerTlsPoliciesResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetLoadBalancerTlsPoliciesCommandInput extends GetLoadBalancerTlsPoliciesRequest {
    }
    export interface GetLoadBalancerTlsPoliciesCommandOutput extends GetLoadBalancerTlsPoliciesResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of TLS security policies that you can apply to Lightsail load
        *       balancers.</p>
        *
        *          <p>For more information about load balancer TLS security policies, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy">Configuring TLS security policies on your Amazon Lightsail load
        *         balancers</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetLoadBalancerTlsPoliciesCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetLoadBalancerTlsPoliciesCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetLoadBalancerTlsPoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLoadBalancerTlsPoliciesCommandInput} for command's `input` shape.
        * @see {@link GetLoadBalancerTlsPoliciesCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetLoadBalancerTlsPoliciesCommand extends $Command<GetLoadBalancerTlsPoliciesCommandInput, GetLoadBalancerTlsPoliciesCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetLoadBalancerTlsPoliciesCommandInput;
            constructor(input: GetLoadBalancerTlsPoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLoadBalancerTlsPoliciesCommandInput, GetLoadBalancerTlsPoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetOperationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetOperationRequest, GetOperationResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetOperationCommandInput extends GetOperationRequest {
    }
    export interface GetOperationCommandOutput extends GetOperationResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specific operation. Operations include events such as when you
        *       create an instance, allocate a static IP, attach a static IP, and so on.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetOperationCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetOperationCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetOperationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOperationCommandInput} for command's `input` shape.
        * @see {@link GetOperationCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetOperationCommand extends $Command<GetOperationCommandInput, GetOperationCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetOperationCommandInput;
            constructor(input: GetOperationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOperationCommandInput, GetOperationCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetOperationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetOperationsRequest, GetOperationsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetOperationsCommandInput extends GetOperationsRequest {
    }
    export interface GetOperationsCommandOutput extends GetOperationsResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about all operations.</p>
        *          <p>Results are returned from oldest to newest, up to a maximum of 200. Results can be paged
        *       by making each subsequent call to <code>GetOperations</code> use the maximum (last)
        *         <code>statusChangedAt</code> value from the previous request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetOperationsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetOperationsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetOperationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOperationsCommandInput} for command's `input` shape.
        * @see {@link GetOperationsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetOperationsCommand extends $Command<GetOperationsCommandInput, GetOperationsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetOperationsCommandInput;
            constructor(input: GetOperationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOperationsCommandInput, GetOperationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetOperationsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetOperationsForResourceRequest, GetOperationsForResourceResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetOperationsForResourceCommandInput extends GetOperationsForResourceRequest {
    }
    export interface GetOperationsForResourceCommandOutput extends GetOperationsForResourceResult, __MetadataBearer {
    }
    /**
        * <p>Gets operations for a specific resource (e.g., an instance or a static IP).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetOperationsForResourceCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetOperationsForResourceCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetOperationsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOperationsForResourceCommandInput} for command's `input` shape.
        * @see {@link GetOperationsForResourceCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetOperationsForResourceCommand extends $Command<GetOperationsForResourceCommandInput, GetOperationsForResourceCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetOperationsForResourceCommandInput;
            constructor(input: GetOperationsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOperationsForResourceCommandInput, GetOperationsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRegionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetRegionsRequest, GetRegionsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetRegionsCommandInput extends GetRegionsRequest {
    }
    export interface GetRegionsCommandOutput extends GetRegionsResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all valid regions for Amazon Lightsail. Use the <code>include
        *         availability zones</code> parameter to also return the Availability Zones in a
        *       region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetRegionsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetRegionsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetRegionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRegionsCommandInput} for command's `input` shape.
        * @see {@link GetRegionsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetRegionsCommand extends $Command<GetRegionsCommandInput, GetRegionsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetRegionsCommandInput;
            constructor(input: GetRegionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRegionsCommandInput, GetRegionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseBlueprintsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetRelationalDatabaseBlueprintsRequest, GetRelationalDatabaseBlueprintsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetRelationalDatabaseBlueprintsCommandInput extends GetRelationalDatabaseBlueprintsRequest {
    }
    export interface GetRelationalDatabaseBlueprintsCommandOutput extends GetRelationalDatabaseBlueprintsResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of available database blueprints in Amazon Lightsail. A blueprint describes
        *       the major engine version of a database.</p>
        *          <p>You can use a blueprint ID to create a new database that runs a specific database
        *       engine.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetRelationalDatabaseBlueprintsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetRelationalDatabaseBlueprintsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetRelationalDatabaseBlueprintsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRelationalDatabaseBlueprintsCommandInput} for command's `input` shape.
        * @see {@link GetRelationalDatabaseBlueprintsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetRelationalDatabaseBlueprintsCommand extends $Command<GetRelationalDatabaseBlueprintsCommandInput, GetRelationalDatabaseBlueprintsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetRelationalDatabaseBlueprintsCommandInput;
            constructor(input: GetRelationalDatabaseBlueprintsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRelationalDatabaseBlueprintsCommandInput, GetRelationalDatabaseBlueprintsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseBundlesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetRelationalDatabaseBundlesRequest, GetRelationalDatabaseBundlesResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetRelationalDatabaseBundlesCommandInput extends GetRelationalDatabaseBundlesRequest {
    }
    export interface GetRelationalDatabaseBundlesCommandOutput extends GetRelationalDatabaseBundlesResult, __MetadataBearer {
    }
    /**
        * <p>Returns the list of bundles that are available in Amazon Lightsail. A bundle describes the
        *       performance specifications for a database.</p>
        *          <p>You can use a bundle ID to create a new database with explicit performance
        *       specifications.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetRelationalDatabaseBundlesCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetRelationalDatabaseBundlesCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetRelationalDatabaseBundlesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRelationalDatabaseBundlesCommandInput} for command's `input` shape.
        * @see {@link GetRelationalDatabaseBundlesCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetRelationalDatabaseBundlesCommand extends $Command<GetRelationalDatabaseBundlesCommandInput, GetRelationalDatabaseBundlesCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetRelationalDatabaseBundlesCommandInput;
            constructor(input: GetRelationalDatabaseBundlesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRelationalDatabaseBundlesCommandInput, GetRelationalDatabaseBundlesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetRelationalDatabaseRequest, GetRelationalDatabaseResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetRelationalDatabaseCommandInput extends GetRelationalDatabaseRequest {
    }
    export interface GetRelationalDatabaseCommandOutput extends GetRelationalDatabaseResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specific database in Amazon Lightsail.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetRelationalDatabaseCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetRelationalDatabaseCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetRelationalDatabaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRelationalDatabaseCommandInput} for command's `input` shape.
        * @see {@link GetRelationalDatabaseCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetRelationalDatabaseCommand extends $Command<GetRelationalDatabaseCommandInput, GetRelationalDatabaseCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetRelationalDatabaseCommandInput;
            constructor(input: GetRelationalDatabaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRelationalDatabaseCommandInput, GetRelationalDatabaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetRelationalDatabaseEventsRequest, GetRelationalDatabaseEventsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetRelationalDatabaseEventsCommandInput extends GetRelationalDatabaseEventsRequest {
    }
    export interface GetRelationalDatabaseEventsCommandOutput extends GetRelationalDatabaseEventsResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of events for a specific database in Amazon Lightsail.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetRelationalDatabaseEventsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetRelationalDatabaseEventsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetRelationalDatabaseEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRelationalDatabaseEventsCommandInput} for command's `input` shape.
        * @see {@link GetRelationalDatabaseEventsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetRelationalDatabaseEventsCommand extends $Command<GetRelationalDatabaseEventsCommandInput, GetRelationalDatabaseEventsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetRelationalDatabaseEventsCommandInput;
            constructor(input: GetRelationalDatabaseEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRelationalDatabaseEventsCommandInput, GetRelationalDatabaseEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseLogEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetRelationalDatabaseLogEventsRequest, GetRelationalDatabaseLogEventsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetRelationalDatabaseLogEventsCommandInput extends GetRelationalDatabaseLogEventsRequest {
    }
    export interface GetRelationalDatabaseLogEventsCommandOutput extends GetRelationalDatabaseLogEventsResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of log events for a database in Amazon Lightsail.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetRelationalDatabaseLogEventsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetRelationalDatabaseLogEventsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetRelationalDatabaseLogEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRelationalDatabaseLogEventsCommandInput} for command's `input` shape.
        * @see {@link GetRelationalDatabaseLogEventsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetRelationalDatabaseLogEventsCommand extends $Command<GetRelationalDatabaseLogEventsCommandInput, GetRelationalDatabaseLogEventsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetRelationalDatabaseLogEventsCommandInput;
            constructor(input: GetRelationalDatabaseLogEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRelationalDatabaseLogEventsCommandInput, GetRelationalDatabaseLogEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseLogStreamsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetRelationalDatabaseLogStreamsRequest, GetRelationalDatabaseLogStreamsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetRelationalDatabaseLogStreamsCommandInput extends GetRelationalDatabaseLogStreamsRequest {
    }
    export interface GetRelationalDatabaseLogStreamsCommandOutput extends GetRelationalDatabaseLogStreamsResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of available log streams for a specific database in Amazon Lightsail.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetRelationalDatabaseLogStreamsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetRelationalDatabaseLogStreamsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetRelationalDatabaseLogStreamsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRelationalDatabaseLogStreamsCommandInput} for command's `input` shape.
        * @see {@link GetRelationalDatabaseLogStreamsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetRelationalDatabaseLogStreamsCommand extends $Command<GetRelationalDatabaseLogStreamsCommandInput, GetRelationalDatabaseLogStreamsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetRelationalDatabaseLogStreamsCommandInput;
            constructor(input: GetRelationalDatabaseLogStreamsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRelationalDatabaseLogStreamsCommandInput, GetRelationalDatabaseLogStreamsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseMasterUserPasswordCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetRelationalDatabaseMasterUserPasswordRequest, GetRelationalDatabaseMasterUserPasswordResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetRelationalDatabaseMasterUserPasswordCommandInput extends GetRelationalDatabaseMasterUserPasswordRequest {
    }
    export interface GetRelationalDatabaseMasterUserPasswordCommandOutput extends GetRelationalDatabaseMasterUserPasswordResult, __MetadataBearer {
    }
    /**
        * <p>Returns the current, previous, or pending versions of the master user password for a
        *       Lightsail database.</p>
        *          <p>The <code>GetRelationalDatabaseMasterUserPassword</code> operation supports tag-based
        *       access control via resource tags applied to the resource identified by
        *       relationalDatabaseName.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetRelationalDatabaseMasterUserPasswordCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetRelationalDatabaseMasterUserPasswordCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetRelationalDatabaseMasterUserPasswordCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRelationalDatabaseMasterUserPasswordCommandInput} for command's `input` shape.
        * @see {@link GetRelationalDatabaseMasterUserPasswordCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetRelationalDatabaseMasterUserPasswordCommand extends $Command<GetRelationalDatabaseMasterUserPasswordCommandInput, GetRelationalDatabaseMasterUserPasswordCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetRelationalDatabaseMasterUserPasswordCommandInput;
            constructor(input: GetRelationalDatabaseMasterUserPasswordCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRelationalDatabaseMasterUserPasswordCommandInput, GetRelationalDatabaseMasterUserPasswordCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseMetricDataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetRelationalDatabaseMetricDataRequest, GetRelationalDatabaseMetricDataResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetRelationalDatabaseMetricDataCommandInput extends GetRelationalDatabaseMetricDataRequest {
    }
    export interface GetRelationalDatabaseMetricDataCommandOutput extends GetRelationalDatabaseMetricDataResult, __MetadataBearer {
    }
    /**
        * <p>Returns the data points of the specified metric for a database in Amazon Lightsail.</p>
        *          <p>Metrics report the utilization of your resources, and the error counts generated by them.
        *       Monitor and collect metric data regularly to maintain the reliability, availability, and
        *       performance of your resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetRelationalDatabaseMetricDataCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetRelationalDatabaseMetricDataCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetRelationalDatabaseMetricDataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRelationalDatabaseMetricDataCommandInput} for command's `input` shape.
        * @see {@link GetRelationalDatabaseMetricDataCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetRelationalDatabaseMetricDataCommand extends $Command<GetRelationalDatabaseMetricDataCommandInput, GetRelationalDatabaseMetricDataCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetRelationalDatabaseMetricDataCommandInput;
            constructor(input: GetRelationalDatabaseMetricDataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRelationalDatabaseMetricDataCommandInput, GetRelationalDatabaseMetricDataCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseParametersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetRelationalDatabaseParametersRequest, GetRelationalDatabaseParametersResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetRelationalDatabaseParametersCommandInput extends GetRelationalDatabaseParametersRequest {
    }
    export interface GetRelationalDatabaseParametersCommandOutput extends GetRelationalDatabaseParametersResult, __MetadataBearer {
    }
    /**
        * <p>Returns all of the runtime parameters offered by the underlying database software, or
        *       engine, for a specific database in Amazon Lightsail.</p>
        *          <p>In addition to the parameter names and values, this operation returns other information
        *       about each parameter. This information includes whether changes require a reboot, whether the
        *       parameter is modifiable, the allowed values, and the data types.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetRelationalDatabaseParametersCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetRelationalDatabaseParametersCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetRelationalDatabaseParametersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRelationalDatabaseParametersCommandInput} for command's `input` shape.
        * @see {@link GetRelationalDatabaseParametersCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetRelationalDatabaseParametersCommand extends $Command<GetRelationalDatabaseParametersCommandInput, GetRelationalDatabaseParametersCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetRelationalDatabaseParametersCommandInput;
            constructor(input: GetRelationalDatabaseParametersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRelationalDatabaseParametersCommandInput, GetRelationalDatabaseParametersCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetRelationalDatabasesRequest, GetRelationalDatabasesResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetRelationalDatabasesCommandInput extends GetRelationalDatabasesRequest {
    }
    export interface GetRelationalDatabasesCommandOutput extends GetRelationalDatabasesResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about all of your databases in Amazon Lightsail.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetRelationalDatabasesCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetRelationalDatabasesCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetRelationalDatabasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRelationalDatabasesCommandInput} for command's `input` shape.
        * @see {@link GetRelationalDatabasesCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetRelationalDatabasesCommand extends $Command<GetRelationalDatabasesCommandInput, GetRelationalDatabasesCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetRelationalDatabasesCommandInput;
            constructor(input: GetRelationalDatabasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRelationalDatabasesCommandInput, GetRelationalDatabasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseSnapshotCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetRelationalDatabaseSnapshotRequest, GetRelationalDatabaseSnapshotResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetRelationalDatabaseSnapshotCommandInput extends GetRelationalDatabaseSnapshotRequest {
    }
    export interface GetRelationalDatabaseSnapshotCommandOutput extends GetRelationalDatabaseSnapshotResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about a specific database snapshot in Amazon Lightsail.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetRelationalDatabaseSnapshotCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetRelationalDatabaseSnapshotCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetRelationalDatabaseSnapshotCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRelationalDatabaseSnapshotCommandInput} for command's `input` shape.
        * @see {@link GetRelationalDatabaseSnapshotCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetRelationalDatabaseSnapshotCommand extends $Command<GetRelationalDatabaseSnapshotCommandInput, GetRelationalDatabaseSnapshotCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetRelationalDatabaseSnapshotCommandInput;
            constructor(input: GetRelationalDatabaseSnapshotCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRelationalDatabaseSnapshotCommandInput, GetRelationalDatabaseSnapshotCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseSnapshotsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetRelationalDatabaseSnapshotsRequest, GetRelationalDatabaseSnapshotsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetRelationalDatabaseSnapshotsCommandInput extends GetRelationalDatabaseSnapshotsRequest {
    }
    export interface GetRelationalDatabaseSnapshotsCommandOutput extends GetRelationalDatabaseSnapshotsResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about all of your database snapshots in Amazon Lightsail.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetRelationalDatabaseSnapshotsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetRelationalDatabaseSnapshotsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetRelationalDatabaseSnapshotsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRelationalDatabaseSnapshotsCommandInput} for command's `input` shape.
        * @see {@link GetRelationalDatabaseSnapshotsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetRelationalDatabaseSnapshotsCommand extends $Command<GetRelationalDatabaseSnapshotsCommandInput, GetRelationalDatabaseSnapshotsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetRelationalDatabaseSnapshotsCommandInput;
            constructor(input: GetRelationalDatabaseSnapshotsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRelationalDatabaseSnapshotsCommandInput, GetRelationalDatabaseSnapshotsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetStaticIpCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetStaticIpRequest, GetStaticIpResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetStaticIpCommandInput extends GetStaticIpRequest {
    }
    export interface GetStaticIpCommandOutput extends GetStaticIpResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about an Amazon Lightsail static IP.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetStaticIpCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetStaticIpCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetStaticIpCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStaticIpCommandInput} for command's `input` shape.
        * @see {@link GetStaticIpCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetStaticIpCommand extends $Command<GetStaticIpCommandInput, GetStaticIpCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetStaticIpCommandInput;
            constructor(input: GetStaticIpCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStaticIpCommandInput, GetStaticIpCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetStaticIpsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { GetStaticIpsRequest, GetStaticIpsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface GetStaticIpsCommandInput extends GetStaticIpsRequest {
    }
    export interface GetStaticIpsCommandOutput extends GetStaticIpsResult, __MetadataBearer {
    }
    /**
        * <p>Returns information about all static IPs in the user's account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, GetStaticIpsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, GetStaticIpsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new GetStaticIpsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetStaticIpsCommandInput} for command's `input` shape.
        * @see {@link GetStaticIpsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class GetStaticIpsCommand extends $Command<GetStaticIpsCommandInput, GetStaticIpsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: GetStaticIpsCommandInput;
            constructor(input: GetStaticIpsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetStaticIpsCommandInput, GetStaticIpsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/ImportKeyPairCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { ImportKeyPairRequest, ImportKeyPairResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface ImportKeyPairCommandInput extends ImportKeyPairRequest {
    }
    export interface ImportKeyPairCommandOutput extends ImportKeyPairResult, __MetadataBearer {
    }
    /**
        * <p>Imports a public SSH key from a specific key pair.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, ImportKeyPairCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, ImportKeyPairCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new ImportKeyPairCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ImportKeyPairCommandInput} for command's `input` shape.
        * @see {@link ImportKeyPairCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class ImportKeyPairCommand extends $Command<ImportKeyPairCommandInput, ImportKeyPairCommandOutput, LightsailClientResolvedConfig> {
            readonly input: ImportKeyPairCommandInput;
            constructor(input: ImportKeyPairCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ImportKeyPairCommandInput, ImportKeyPairCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/IsVpcPeeredCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { IsVpcPeeredRequest, IsVpcPeeredResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface IsVpcPeeredCommandInput extends IsVpcPeeredRequest {
    }
    export interface IsVpcPeeredCommandOutput extends IsVpcPeeredResult, __MetadataBearer {
    }
    /**
        * <p>Returns a Boolean value indicating whether your Lightsail VPC is peered.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, IsVpcPeeredCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, IsVpcPeeredCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new IsVpcPeeredCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link IsVpcPeeredCommandInput} for command's `input` shape.
        * @see {@link IsVpcPeeredCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class IsVpcPeeredCommand extends $Command<IsVpcPeeredCommandInput, IsVpcPeeredCommandOutput, LightsailClientResolvedConfig> {
            readonly input: IsVpcPeeredCommandInput;
            constructor(input: IsVpcPeeredCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<IsVpcPeeredCommandInput, IsVpcPeeredCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/OpenInstancePublicPortsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { OpenInstancePublicPortsRequest, OpenInstancePublicPortsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface OpenInstancePublicPortsCommandInput extends OpenInstancePublicPortsRequest {
    }
    export interface OpenInstancePublicPortsCommandOutput extends OpenInstancePublicPortsResult, __MetadataBearer {
    }
    /**
        * <p>Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses
        *       allowed to connect to the instance through the ports, and the protocol.</p>
        *          <p>The <code>OpenInstancePublicPorts</code> action supports tag-based access control via
        *       resource tags applied to the resource identified by <code>instanceName</code>. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, OpenInstancePublicPortsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, OpenInstancePublicPortsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new OpenInstancePublicPortsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link OpenInstancePublicPortsCommandInput} for command's `input` shape.
        * @see {@link OpenInstancePublicPortsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class OpenInstancePublicPortsCommand extends $Command<OpenInstancePublicPortsCommandInput, OpenInstancePublicPortsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: OpenInstancePublicPortsCommandInput;
            constructor(input: OpenInstancePublicPortsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<OpenInstancePublicPortsCommandInput, OpenInstancePublicPortsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/PeerVpcCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { PeerVpcRequest, PeerVpcResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface PeerVpcCommandInput extends PeerVpcRequest {
    }
    export interface PeerVpcCommandOutput extends PeerVpcResult, __MetadataBearer {
    }
    /**
        * <p>Peers the Lightsail VPC with the user's default VPC.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, PeerVpcCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, PeerVpcCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new PeerVpcCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PeerVpcCommandInput} for command's `input` shape.
        * @see {@link PeerVpcCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class PeerVpcCommand extends $Command<PeerVpcCommandInput, PeerVpcCommandOutput, LightsailClientResolvedConfig> {
            readonly input: PeerVpcCommandInput;
            constructor(input: PeerVpcCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PeerVpcCommandInput, PeerVpcCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/PutAlarmCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { PutAlarmRequest, PutAlarmResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface PutAlarmCommandInput extends PutAlarmRequest {
    }
    export interface PutAlarmCommandOutput extends PutAlarmResult, __MetadataBearer {
    }
    /**
        * <p>Creates or updates an alarm, and associates it with the specified metric.</p>
        *          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
        *       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
        *       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
        *         in Amazon Lightsail</a>.</p>
        *          <p>When this action creates an alarm, the alarm state is immediately set to
        *         <code>INSUFFICIENT_DATA</code>. The alarm is then evaluated and its state is set
        *       appropriately. Any actions associated with the new state are then executed.</p>
        *          <p>When you update an existing alarm, its state is left unchanged, but the update completely
        *       overwrites the previous configuration of the alarm. The alarm is then evaluated with the
        *       updated configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, PutAlarmCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, PutAlarmCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new PutAlarmCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutAlarmCommandInput} for command's `input` shape.
        * @see {@link PutAlarmCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class PutAlarmCommand extends $Command<PutAlarmCommandInput, PutAlarmCommandOutput, LightsailClientResolvedConfig> {
            readonly input: PutAlarmCommandInput;
            constructor(input: PutAlarmCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutAlarmCommandInput, PutAlarmCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/PutInstancePublicPortsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { PutInstancePublicPortsRequest, PutInstancePublicPortsResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface PutInstancePublicPortsCommandInput extends PutInstancePublicPortsRequest {
    }
    export interface PutInstancePublicPortsCommandOutput extends PutInstancePublicPortsResult, __MetadataBearer {
    }
    /**
        * <p>Opens ports for a specific Amazon Lightsail instance, and specifies the IP addresses
        *       allowed to connect to the instance through the ports, and the protocol. This action also
        *       closes all currently open ports that are not included in the request. Include all of the ports
        *       and the protocols you want to open in your <code>PutInstancePublicPorts</code>request. Or use
        *       the <code>OpenInstancePublicPorts</code> action to open ports without closing currently open
        *       ports.</p>
        *          <p>The <code>PutInstancePublicPorts</code> action supports tag-based access control via
        *       resource tags applied to the resource identified by <code>instanceName</code>. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, PutInstancePublicPortsCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, PutInstancePublicPortsCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new PutInstancePublicPortsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutInstancePublicPortsCommandInput} for command's `input` shape.
        * @see {@link PutInstancePublicPortsCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class PutInstancePublicPortsCommand extends $Command<PutInstancePublicPortsCommandInput, PutInstancePublicPortsCommandOutput, LightsailClientResolvedConfig> {
            readonly input: PutInstancePublicPortsCommandInput;
            constructor(input: PutInstancePublicPortsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutInstancePublicPortsCommandInput, PutInstancePublicPortsCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/RebootInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { RebootInstanceRequest, RebootInstanceResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface RebootInstanceCommandInput extends RebootInstanceRequest {
    }
    export interface RebootInstanceCommandOutput extends RebootInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Restarts a specific instance.</p>
        *          <p>The <code>reboot instance</code> operation supports tag-based access control via resource
        *       tags applied to the resource identified by <code>instance name</code>. For more information,
        *       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, RebootInstanceCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, RebootInstanceCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new RebootInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RebootInstanceCommandInput} for command's `input` shape.
        * @see {@link RebootInstanceCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class RebootInstanceCommand extends $Command<RebootInstanceCommandInput, RebootInstanceCommandOutput, LightsailClientResolvedConfig> {
            readonly input: RebootInstanceCommandInput;
            constructor(input: RebootInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RebootInstanceCommandInput, RebootInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/RebootRelationalDatabaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { RebootRelationalDatabaseRequest, RebootRelationalDatabaseResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface RebootRelationalDatabaseCommandInput extends RebootRelationalDatabaseRequest {
    }
    export interface RebootRelationalDatabaseCommandOutput extends RebootRelationalDatabaseResult, __MetadataBearer {
    }
    /**
        * <p>Restarts a specific database in Amazon Lightsail.</p>
        *          <p>The <code>reboot relational database</code> operation supports tag-based access control
        *       via resource tags applied to the resource identified by relationalDatabaseName. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, RebootRelationalDatabaseCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, RebootRelationalDatabaseCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new RebootRelationalDatabaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RebootRelationalDatabaseCommandInput} for command's `input` shape.
        * @see {@link RebootRelationalDatabaseCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class RebootRelationalDatabaseCommand extends $Command<RebootRelationalDatabaseCommandInput, RebootRelationalDatabaseCommandOutput, LightsailClientResolvedConfig> {
            readonly input: RebootRelationalDatabaseCommandInput;
            constructor(input: RebootRelationalDatabaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RebootRelationalDatabaseCommandInput, RebootRelationalDatabaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/RegisterContainerImageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { RegisterContainerImageRequest, RegisterContainerImageResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface RegisterContainerImageCommandInput extends RegisterContainerImageRequest {
    }
    export interface RegisterContainerImageCommandOutput extends RegisterContainerImageResult, __MetadataBearer {
    }
    /**
        * <p>Registers a container image to your Amazon Lightsail container service.</p>
        *
        *          <note>
        *             <p>This action is not required if you install and use the Lightsail Control
        *         (lightsailctl) plugin to push container images to your Lightsail container service. For
        *         more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-pushing-container-images">Pushing and managing container images on your Amazon Lightsail container services</a>
        *         in the <i>Amazon Lightsail Developer Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, RegisterContainerImageCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, RegisterContainerImageCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new RegisterContainerImageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterContainerImageCommandInput} for command's `input` shape.
        * @see {@link RegisterContainerImageCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class RegisterContainerImageCommand extends $Command<RegisterContainerImageCommandInput, RegisterContainerImageCommandOutput, LightsailClientResolvedConfig> {
            readonly input: RegisterContainerImageCommandInput;
            constructor(input: RegisterContainerImageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterContainerImageCommandInput, RegisterContainerImageCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/ReleaseStaticIpCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { ReleaseStaticIpRequest, ReleaseStaticIpResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface ReleaseStaticIpCommandInput extends ReleaseStaticIpRequest {
    }
    export interface ReleaseStaticIpCommandOutput extends ReleaseStaticIpResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a specific static IP from your account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, ReleaseStaticIpCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, ReleaseStaticIpCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new ReleaseStaticIpCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ReleaseStaticIpCommandInput} for command's `input` shape.
        * @see {@link ReleaseStaticIpCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class ReleaseStaticIpCommand extends $Command<ReleaseStaticIpCommandInput, ReleaseStaticIpCommandOutput, LightsailClientResolvedConfig> {
            readonly input: ReleaseStaticIpCommandInput;
            constructor(input: ReleaseStaticIpCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ReleaseStaticIpCommandInput, ReleaseStaticIpCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/ResetDistributionCacheCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { ResetDistributionCacheRequest, ResetDistributionCacheResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface ResetDistributionCacheCommandInput extends ResetDistributionCacheRequest {
    }
    export interface ResetDistributionCacheCommandOutput extends ResetDistributionCacheResult, __MetadataBearer {
    }
    /**
        * <p>Deletes currently cached content from your Amazon Lightsail content delivery network (CDN)
        *       distribution.</p>
        *          <p>After resetting the cache, the next time a content request is made, your distribution
        *       pulls, serves, and caches it from the origin.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, ResetDistributionCacheCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, ResetDistributionCacheCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new ResetDistributionCacheCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResetDistributionCacheCommandInput} for command's `input` shape.
        * @see {@link ResetDistributionCacheCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class ResetDistributionCacheCommand extends $Command<ResetDistributionCacheCommandInput, ResetDistributionCacheCommandOutput, LightsailClientResolvedConfig> {
            readonly input: ResetDistributionCacheCommandInput;
            constructor(input: ResetDistributionCacheCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResetDistributionCacheCommandInput, ResetDistributionCacheCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/SendContactMethodVerificationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { SendContactMethodVerificationRequest, SendContactMethodVerificationResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface SendContactMethodVerificationCommandInput extends SendContactMethodVerificationRequest {
    }
    export interface SendContactMethodVerificationCommandOutput extends SendContactMethodVerificationResult, __MetadataBearer {
    }
    /**
        * <p>Sends a verification request to an email contact method to ensure it's owned by the
        *       requester. SMS contact methods don't need to be verified.</p>
        *          <p>A contact method is used to send you notifications about your Amazon Lightsail resources.
        *       You can add one email address and one mobile phone number contact method in each Amazon Web Services Region. However, SMS text messaging is not supported in some Amazon Web Services
        *       Regions, and SMS text messages cannot be sent to some countries/regions. For more information,
        *       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
        *          <p>A verification request is sent to the contact method when you initially create it. Use
        *       this action to send another verification request if a previous verification request was
        *       deleted, or has expired.</p>
        *          <important>
        *             <p>Notifications are not sent to an email contact method until after it is verified, and
        *         confirmed as valid.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, SendContactMethodVerificationCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, SendContactMethodVerificationCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new SendContactMethodVerificationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendContactMethodVerificationCommandInput} for command's `input` shape.
        * @see {@link SendContactMethodVerificationCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class SendContactMethodVerificationCommand extends $Command<SendContactMethodVerificationCommandInput, SendContactMethodVerificationCommandOutput, LightsailClientResolvedConfig> {
            readonly input: SendContactMethodVerificationCommandInput;
            constructor(input: SendContactMethodVerificationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendContactMethodVerificationCommandInput, SendContactMethodVerificationCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/SetIpAddressTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { SetIpAddressTypeRequest, SetIpAddressTypeResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface SetIpAddressTypeCommandInput extends SetIpAddressTypeRequest {
    }
    export interface SetIpAddressTypeCommandOutput extends SetIpAddressTypeResult, __MetadataBearer {
    }
    /**
        * <p>Sets the IP address type for an Amazon Lightsail resource.</p>
        *
        *          <p>Use this action to enable dual-stack for a resource, which enables IPv4 and IPv6 for the
        *       specified resource. Alternately, you can use this action to disable dual-stack, and enable
        *       IPv4 only.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, SetIpAddressTypeCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, SetIpAddressTypeCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new SetIpAddressTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetIpAddressTypeCommandInput} for command's `input` shape.
        * @see {@link SetIpAddressTypeCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class SetIpAddressTypeCommand extends $Command<SetIpAddressTypeCommandInput, SetIpAddressTypeCommandOutput, LightsailClientResolvedConfig> {
            readonly input: SetIpAddressTypeCommandInput;
            constructor(input: SetIpAddressTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetIpAddressTypeCommandInput, SetIpAddressTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/SetResourceAccessForBucketCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { SetResourceAccessForBucketRequest, SetResourceAccessForBucketResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface SetResourceAccessForBucketCommandInput extends SetResourceAccessForBucketRequest {
    }
    export interface SetResourceAccessForBucketCommandOutput extends SetResourceAccessForBucketResult, __MetadataBearer {
    }
    /**
        * <p>Sets the Amazon Lightsail resources that can access the specified Lightsail
        *       bucket.</p>
        *
        *          <p>Lightsail buckets currently support setting access for Lightsail instances in the same
        *         Amazon Web Services Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, SetResourceAccessForBucketCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, SetResourceAccessForBucketCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new SetResourceAccessForBucketCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetResourceAccessForBucketCommandInput} for command's `input` shape.
        * @see {@link SetResourceAccessForBucketCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class SetResourceAccessForBucketCommand extends $Command<SetResourceAccessForBucketCommandInput, SetResourceAccessForBucketCommandOutput, LightsailClientResolvedConfig> {
            readonly input: SetResourceAccessForBucketCommandInput;
            constructor(input: SetResourceAccessForBucketCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetResourceAccessForBucketCommandInput, SetResourceAccessForBucketCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/StartInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { StartInstanceRequest, StartInstanceResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface StartInstanceCommandInput extends StartInstanceRequest {
    }
    export interface StartInstanceCommandOutput extends StartInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Starts a specific Amazon Lightsail instance from a stopped state. To restart an instance,
        *       use the <code>reboot instance</code> operation.</p>
        *          <note>
        *             <p>When you start a stopped instance, Lightsail assigns a new public IP address to the
        *         instance. To use the same IP address after stopping and starting an instance, create a
        *         static IP address and attach it to the instance. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-create-static-ip">Amazon Lightsail Developer Guide</a>.</p>
        *          </note>
        *          <p>The <code>start instance</code> operation supports tag-based access control via resource
        *       tags applied to the resource identified by <code>instance name</code>. For more information,
        *       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, StartInstanceCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, StartInstanceCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new StartInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartInstanceCommandInput} for command's `input` shape.
        * @see {@link StartInstanceCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class StartInstanceCommand extends $Command<StartInstanceCommandInput, StartInstanceCommandOutput, LightsailClientResolvedConfig> {
            readonly input: StartInstanceCommandInput;
            constructor(input: StartInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartInstanceCommandInput, StartInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/StartRelationalDatabaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { StartRelationalDatabaseRequest, StartRelationalDatabaseResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface StartRelationalDatabaseCommandInput extends StartRelationalDatabaseRequest {
    }
    export interface StartRelationalDatabaseCommandOutput extends StartRelationalDatabaseResult, __MetadataBearer {
    }
    /**
        * <p>Starts a specific database from a stopped state in Amazon Lightsail. To restart a database,
        *       use the <code>reboot relational database</code> operation.</p>
        *          <p>The <code>start relational database</code> operation supports tag-based access control via
        *       resource tags applied to the resource identified by relationalDatabaseName. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, StartRelationalDatabaseCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, StartRelationalDatabaseCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new StartRelationalDatabaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartRelationalDatabaseCommandInput} for command's `input` shape.
        * @see {@link StartRelationalDatabaseCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class StartRelationalDatabaseCommand extends $Command<StartRelationalDatabaseCommandInput, StartRelationalDatabaseCommandOutput, LightsailClientResolvedConfig> {
            readonly input: StartRelationalDatabaseCommandInput;
            constructor(input: StartRelationalDatabaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartRelationalDatabaseCommandInput, StartRelationalDatabaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/StopInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { StopInstanceRequest, StopInstanceResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface StopInstanceCommandInput extends StopInstanceRequest {
    }
    export interface StopInstanceCommandOutput extends StopInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Stops a specific Amazon Lightsail instance that is currently running.</p>
        *          <note>
        *             <p>When you start a stopped instance, Lightsail assigns a new public IP address to the
        *         instance. To use the same IP address after stopping and starting an instance, create a
        *         static IP address and attach it to the instance. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-create-static-ip">Amazon Lightsail Developer Guide</a>.</p>
        *          </note>
        *          <p>The <code>stop instance</code> operation supports tag-based access control via resource
        *       tags applied to the resource identified by <code>instance name</code>. For more information,
        *       see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, StopInstanceCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, StopInstanceCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new StopInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopInstanceCommandInput} for command's `input` shape.
        * @see {@link StopInstanceCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class StopInstanceCommand extends $Command<StopInstanceCommandInput, StopInstanceCommandOutput, LightsailClientResolvedConfig> {
            readonly input: StopInstanceCommandInput;
            constructor(input: StopInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopInstanceCommandInput, StopInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/StopRelationalDatabaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { StopRelationalDatabaseRequest, StopRelationalDatabaseResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface StopRelationalDatabaseCommandInput extends StopRelationalDatabaseRequest {
    }
    export interface StopRelationalDatabaseCommandOutput extends StopRelationalDatabaseResult, __MetadataBearer {
    }
    /**
        * <p>Stops a specific database that is currently running in Amazon Lightsail.</p>
        *          <p>The <code>stop relational database</code> operation supports tag-based access control via
        *       resource tags applied to the resource identified by relationalDatabaseName. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, StopRelationalDatabaseCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, StopRelationalDatabaseCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new StopRelationalDatabaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopRelationalDatabaseCommandInput} for command's `input` shape.
        * @see {@link StopRelationalDatabaseCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class StopRelationalDatabaseCommand extends $Command<StopRelationalDatabaseCommandInput, StopRelationalDatabaseCommandOutput, LightsailClientResolvedConfig> {
            readonly input: StopRelationalDatabaseCommandInput;
            constructor(input: StopRelationalDatabaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopRelationalDatabaseCommandInput, StopRelationalDatabaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { TagResourceRequest, TagResourceResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResult, __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to the specified Amazon Lightsail resource. Each resource can have a
        *       maximum of 50 tags. Each tag consists of a key and an optional value. Tag keys must be unique
        *       per resource. For more information about tags, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
        *          <p>The <code>tag resource</code> operation supports tag-based access control via request tags
        *       and resource tags applied to the resource identified by <code>resource name</code>. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, TagResourceCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, TagResourceCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, LightsailClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/TestAlarmCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { TestAlarmRequest, TestAlarmResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface TestAlarmCommandInput extends TestAlarmRequest {
    }
    export interface TestAlarmCommandOutput extends TestAlarmResult, __MetadataBearer {
    }
    /**
        * <p>Tests an alarm by displaying a banner on the Amazon Lightsail console. If a notification
        *       trigger is configured for the specified alarm, the test also sends a notification to the
        *       notification protocol (<code>Email</code> and/or <code>SMS</code>) configured for the
        *       alarm.</p>
        *          <p>An alarm is used to monitor a single metric for one of your resources. When a metric
        *       condition is met, the alarm can notify you by email, SMS text message, and a banner displayed
        *       on the Amazon Lightsail console. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
        *         in Amazon Lightsail</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, TestAlarmCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, TestAlarmCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new TestAlarmCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TestAlarmCommandInput} for command's `input` shape.
        * @see {@link TestAlarmCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class TestAlarmCommand extends $Command<TestAlarmCommandInput, TestAlarmCommandOutput, LightsailClientResolvedConfig> {
            readonly input: TestAlarmCommandInput;
            constructor(input: TestAlarmCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TestAlarmCommandInput, TestAlarmCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UnpeerVpcCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { UnpeerVpcRequest, UnpeerVpcResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface UnpeerVpcCommandInput extends UnpeerVpcRequest {
    }
    export interface UnpeerVpcCommandOutput extends UnpeerVpcResult, __MetadataBearer {
    }
    /**
        * <p>Unpeers the Lightsail VPC from the user's default VPC.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, UnpeerVpcCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, UnpeerVpcCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new UnpeerVpcCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UnpeerVpcCommandInput} for command's `input` shape.
        * @see {@link UnpeerVpcCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class UnpeerVpcCommand extends $Command<UnpeerVpcCommandInput, UnpeerVpcCommandOutput, LightsailClientResolvedConfig> {
            readonly input: UnpeerVpcCommandInput;
            constructor(input: UnpeerVpcCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UnpeerVpcCommandInput, UnpeerVpcCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { UntagResourceRequest, UntagResourceResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified set of tag keys and their values from the specified Amazon Lightsail
        *       resource.</p>
        *          <p>The <code>untag resource</code> operation supports tag-based access control via request
        *       tags and resource tags applied to the resource identified by <code>resource name</code>. For
        *       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, UntagResourceCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, UntagResourceCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, LightsailClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateBucketBundleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { UpdateBucketBundleRequest, UpdateBucketBundleResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface UpdateBucketBundleCommandInput extends UpdateBucketBundleRequest {
    }
    export interface UpdateBucketBundleCommandOutput extends UpdateBucketBundleResult, __MetadataBearer {
    }
    /**
        * <p>Updates the bundle, or storage plan, of an existing Amazon Lightsail bucket.</p>
        *
        *          <p>A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a
        *       bucket. You can update a bucket's bundle only one time within a monthly AWS billing cycle. To
        *       determine if you can update a bucket's bundle, use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBuckets.html">GetBuckets</a> action. The
        *         <code>ableToUpdateBundle</code> parameter in the response will indicate whether you can
        *       currently update a bucket's bundle.</p>
        *
        *          <p>Update a bucket's bundle if it's consistently going over its storage space or data
        *       transfer quota, or if a bucket's usage is consistently in the lower range of its storage space
        *       or data transfer quota. Due to the unpredictable usage fluctuations that a bucket might
        *       experience, we strongly recommend that you update a bucket's bundle only as a long-term
        *       strategy, instead of as a short-term, monthly cost-cutting measure. Choose a bucket bundle
        *       that will provide the bucket with ample storage space and data transfer for a long time to
        *       come.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, UpdateBucketBundleCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, UpdateBucketBundleCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new UpdateBucketBundleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateBucketBundleCommandInput} for command's `input` shape.
        * @see {@link UpdateBucketBundleCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class UpdateBucketBundleCommand extends $Command<UpdateBucketBundleCommandInput, UpdateBucketBundleCommandOutput, LightsailClientResolvedConfig> {
            readonly input: UpdateBucketBundleCommandInput;
            constructor(input: UpdateBucketBundleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateBucketBundleCommandInput, UpdateBucketBundleCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateBucketCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { UpdateBucketRequest, UpdateBucketResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface UpdateBucketCommandInput extends UpdateBucketRequest {
    }
    export interface UpdateBucketCommandOutput extends UpdateBucketResult, __MetadataBearer {
    }
    /**
        * <p>Updates an existing Amazon Lightsail bucket.</p>
        *
        *          <p>Use this action to update the configuration of an existing bucket, such as versioning,
        *       public accessibility, and the Amazon Web Services accounts that can access the bucket.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, UpdateBucketCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, UpdateBucketCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new UpdateBucketCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateBucketCommandInput} for command's `input` shape.
        * @see {@link UpdateBucketCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class UpdateBucketCommand extends $Command<UpdateBucketCommandInput, UpdateBucketCommandOutput, LightsailClientResolvedConfig> {
            readonly input: UpdateBucketCommandInput;
            constructor(input: UpdateBucketCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateBucketCommandInput, UpdateBucketCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateContainerServiceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { UpdateContainerServiceRequest, UpdateContainerServiceResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface UpdateContainerServiceCommandInput extends UpdateContainerServiceRequest {
    }
    export interface UpdateContainerServiceCommandOutput extends UpdateContainerServiceResult, __MetadataBearer {
    }
    /**
        * <p>Updates the configuration of your Amazon Lightsail container service, such as its power,
        *       scale, and public domain names.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, UpdateContainerServiceCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, UpdateContainerServiceCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new UpdateContainerServiceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateContainerServiceCommandInput} for command's `input` shape.
        * @see {@link UpdateContainerServiceCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class UpdateContainerServiceCommand extends $Command<UpdateContainerServiceCommandInput, UpdateContainerServiceCommandOutput, LightsailClientResolvedConfig> {
            readonly input: UpdateContainerServiceCommandInput;
            constructor(input: UpdateContainerServiceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateContainerServiceCommandInput, UpdateContainerServiceCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateDistributionBundleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { UpdateDistributionBundleRequest, UpdateDistributionBundleResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface UpdateDistributionBundleCommandInput extends UpdateDistributionBundleRequest {
    }
    export interface UpdateDistributionBundleCommandOutput extends UpdateDistributionBundleResult, __MetadataBearer {
    }
    /**
        * <p>Updates the bundle of your Amazon Lightsail content delivery network (CDN)
        *       distribution.</p>
        *          <p>A distribution bundle specifies the monthly network transfer quota and monthly cost of
        *       your distribution.</p>
        *          <p>Update your distribution's bundle if your distribution is going over its monthly network
        *       transfer quota and is incurring an overage fee.</p>
        *          <p>You can update your distribution's bundle only one time within your monthly AWS billing
        *       cycle. To determine if you can update your distribution's bundle, use the
        *         <code>GetDistributions</code> action. The <code>ableToUpdateBundle</code> parameter in the
        *       result will indicate whether you can currently update your distribution's bundle.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, UpdateDistributionBundleCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, UpdateDistributionBundleCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new UpdateDistributionBundleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDistributionBundleCommandInput} for command's `input` shape.
        * @see {@link UpdateDistributionBundleCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class UpdateDistributionBundleCommand extends $Command<UpdateDistributionBundleCommandInput, UpdateDistributionBundleCommandOutput, LightsailClientResolvedConfig> {
            readonly input: UpdateDistributionBundleCommandInput;
            constructor(input: UpdateDistributionBundleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDistributionBundleCommandInput, UpdateDistributionBundleCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateDistributionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { UpdateDistributionRequest, UpdateDistributionResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface UpdateDistributionCommandInput extends UpdateDistributionRequest {
    }
    export interface UpdateDistributionCommandOutput extends UpdateDistributionResult, __MetadataBearer {
    }
    /**
        * <p>Updates an existing Amazon Lightsail content delivery network (CDN) distribution.</p>
        *          <p>Use this action to update the configuration of your existing distribution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, UpdateDistributionCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, UpdateDistributionCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new UpdateDistributionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDistributionCommandInput} for command's `input` shape.
        * @see {@link UpdateDistributionCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class UpdateDistributionCommand extends $Command<UpdateDistributionCommandInput, UpdateDistributionCommandOutput, LightsailClientResolvedConfig> {
            readonly input: UpdateDistributionCommandInput;
            constructor(input: UpdateDistributionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDistributionCommandInput, UpdateDistributionCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateDomainEntryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { UpdateDomainEntryRequest, UpdateDomainEntryResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface UpdateDomainEntryCommandInput extends UpdateDomainEntryRequest {
    }
    export interface UpdateDomainEntryCommandOutput extends UpdateDomainEntryResult, __MetadataBearer {
    }
    /**
        * <p>Updates a domain recordset after it is created.</p>
        *          <p>The <code>update domain entry</code> operation supports tag-based access control via
        *       resource tags applied to the resource identified by <code>domain name</code>. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, UpdateDomainEntryCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, UpdateDomainEntryCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new UpdateDomainEntryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDomainEntryCommandInput} for command's `input` shape.
        * @see {@link UpdateDomainEntryCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class UpdateDomainEntryCommand extends $Command<UpdateDomainEntryCommandInput, UpdateDomainEntryCommandOutput, LightsailClientResolvedConfig> {
            readonly input: UpdateDomainEntryCommandInput;
            constructor(input: UpdateDomainEntryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDomainEntryCommandInput, UpdateDomainEntryCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateLoadBalancerAttributeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { UpdateLoadBalancerAttributeRequest, UpdateLoadBalancerAttributeResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface UpdateLoadBalancerAttributeCommandInput extends UpdateLoadBalancerAttributeRequest {
    }
    export interface UpdateLoadBalancerAttributeCommandOutput extends UpdateLoadBalancerAttributeResult, __MetadataBearer {
    }
    /**
        * <p>Updates the specified attribute for a load balancer. You can only update one attribute at
        *       a time.</p>
        *          <p>The <code>update load balancer attribute</code> operation supports tag-based access
        *       control via resource tags applied to the resource identified by <code>load balancer
        *         name</code>. For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, UpdateLoadBalancerAttributeCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, UpdateLoadBalancerAttributeCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new UpdateLoadBalancerAttributeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLoadBalancerAttributeCommandInput} for command's `input` shape.
        * @see {@link UpdateLoadBalancerAttributeCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class UpdateLoadBalancerAttributeCommand extends $Command<UpdateLoadBalancerAttributeCommandInput, UpdateLoadBalancerAttributeCommandOutput, LightsailClientResolvedConfig> {
            readonly input: UpdateLoadBalancerAttributeCommandInput;
            constructor(input: UpdateLoadBalancerAttributeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLoadBalancerAttributeCommandInput, UpdateLoadBalancerAttributeCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateRelationalDatabaseCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { UpdateRelationalDatabaseRequest, UpdateRelationalDatabaseResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface UpdateRelationalDatabaseCommandInput extends UpdateRelationalDatabaseRequest {
    }
    export interface UpdateRelationalDatabaseCommandOutput extends UpdateRelationalDatabaseResult, __MetadataBearer {
    }
    /**
        * <p>Allows the update of one or more attributes of a database in Amazon Lightsail.</p>
        *          <p>Updates are applied immediately, or in cases where the updates could result in an outage,
        *       are applied during the database's predefined maintenance window.</p>
        *          <p>The <code>update relational database</code> operation supports tag-based access control
        *       via resource tags applied to the resource identified by relationalDatabaseName. For more
        *       information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, UpdateRelationalDatabaseCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, UpdateRelationalDatabaseCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new UpdateRelationalDatabaseCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRelationalDatabaseCommandInput} for command's `input` shape.
        * @see {@link UpdateRelationalDatabaseCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class UpdateRelationalDatabaseCommand extends $Command<UpdateRelationalDatabaseCommandInput, UpdateRelationalDatabaseCommandOutput, LightsailClientResolvedConfig> {
            readonly input: UpdateRelationalDatabaseCommandInput;
            constructor(input: UpdateRelationalDatabaseCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRelationalDatabaseCommandInput, UpdateRelationalDatabaseCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateRelationalDatabaseParametersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LightsailClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient";
    import { UpdateRelationalDatabaseParametersRequest, UpdateRelationalDatabaseParametersResult } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1";
    export interface UpdateRelationalDatabaseParametersCommandInput extends UpdateRelationalDatabaseParametersRequest {
    }
    export interface UpdateRelationalDatabaseParametersCommandOutput extends UpdateRelationalDatabaseParametersResult, __MetadataBearer {
    }
    /**
        * <p>Allows the update of one or more parameters of a database in Amazon Lightsail.</p>
        *          <p>Parameter updates don't cause outages; therefore, their application is not subject to the
        *       preferred maintenance window. However, there are two ways in which parameter updates are
        *       applied: <code>dynamic</code> or <code>pending-reboot</code>. Parameters marked with a
        *         <code>dynamic</code> apply type are applied immediately. Parameters marked with a
        *         <code>pending-reboot</code> apply type are applied only after the database is rebooted using
        *       the <code>reboot relational database</code> operation.</p>
        *          <p>The <code>update relational database parameters</code> operation supports tag-based access
        *       control via resource tags applied to the resource identified by relationalDatabaseName. For
        *       more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-controlling-access-using-tags">Amazon Lightsail Developer Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { LightsailClient, UpdateRelationalDatabaseParametersCommand } from "@aws-sdk/client-lightsail"; // ES Modules import
        * // const { LightsailClient, UpdateRelationalDatabaseParametersCommand } = require("@aws-sdk/client-lightsail"); // CommonJS import
        * const client = new LightsailClient(config);
        * const command = new UpdateRelationalDatabaseParametersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRelationalDatabaseParametersCommandInput} for command's `input` shape.
        * @see {@link UpdateRelationalDatabaseParametersCommandOutput} for command's `response` shape.
        * @see {@link LightsailClientResolvedConfig | config} for LightsailClient's `config` shape.
        *
        */
    export class UpdateRelationalDatabaseParametersCommand extends $Command<UpdateRelationalDatabaseParametersCommandInput, UpdateRelationalDatabaseParametersCommandOutput, LightsailClientResolvedConfig> {
            readonly input: UpdateRelationalDatabaseParametersCommandInput;
            constructor(input: UpdateRelationalDatabaseParametersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: LightsailClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRelationalDatabaseParametersCommandInput, UpdateRelationalDatabaseParametersCommandOutput>;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/LightsailClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AllocateStaticIpCommandInput, AllocateStaticIpCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AllocateStaticIpCommand";
    import { AttachCertificateToDistributionCommandInput, AttachCertificateToDistributionCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachCertificateToDistributionCommand";
    import { AttachDiskCommandInput, AttachDiskCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachDiskCommand";
    import { AttachInstancesToLoadBalancerCommandInput, AttachInstancesToLoadBalancerCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachInstancesToLoadBalancerCommand";
    import { AttachLoadBalancerTlsCertificateCommandInput, AttachLoadBalancerTlsCertificateCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachLoadBalancerTlsCertificateCommand";
    import { AttachStaticIpCommandInput, AttachStaticIpCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/AttachStaticIpCommand";
    import { CloseInstancePublicPortsCommandInput, CloseInstancePublicPortsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CloseInstancePublicPortsCommand";
    import { CopySnapshotCommandInput, CopySnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CopySnapshotCommand";
    import { CreateBucketAccessKeyCommandInput, CreateBucketAccessKeyCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateBucketAccessKeyCommand";
    import { CreateBucketCommandInput, CreateBucketCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateBucketCommand";
    import { CreateCertificateCommandInput, CreateCertificateCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateCertificateCommand";
    import { CreateCloudFormationStackCommandInput, CreateCloudFormationStackCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateCloudFormationStackCommand";
    import { CreateContactMethodCommandInput, CreateContactMethodCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateContactMethodCommand";
    import { CreateContainerServiceCommandInput, CreateContainerServiceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateContainerServiceCommand";
    import { CreateContainerServiceDeploymentCommandInput, CreateContainerServiceDeploymentCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateContainerServiceDeploymentCommand";
    import { CreateContainerServiceRegistryLoginCommandInput, CreateContainerServiceRegistryLoginCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateContainerServiceRegistryLoginCommand";
    import { CreateDiskCommandInput, CreateDiskCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDiskCommand";
    import { CreateDiskFromSnapshotCommandInput, CreateDiskFromSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDiskFromSnapshotCommand";
    import { CreateDiskSnapshotCommandInput, CreateDiskSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDiskSnapshotCommand";
    import { CreateDistributionCommandInput, CreateDistributionCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDistributionCommand";
    import { CreateDomainCommandInput, CreateDomainCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDomainCommand";
    import { CreateDomainEntryCommandInput, CreateDomainEntryCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateDomainEntryCommand";
    import { CreateInstancesCommandInput, CreateInstancesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateInstancesCommand";
    import { CreateInstancesFromSnapshotCommandInput, CreateInstancesFromSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateInstancesFromSnapshotCommand";
    import { CreateInstanceSnapshotCommandInput, CreateInstanceSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateInstanceSnapshotCommand";
    import { CreateKeyPairCommandInput, CreateKeyPairCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateKeyPairCommand";
    import { CreateLoadBalancerCommandInput, CreateLoadBalancerCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateLoadBalancerCommand";
    import { CreateLoadBalancerTlsCertificateCommandInput, CreateLoadBalancerTlsCertificateCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateLoadBalancerTlsCertificateCommand";
    import { CreateRelationalDatabaseCommandInput, CreateRelationalDatabaseCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateRelationalDatabaseCommand";
    import { CreateRelationalDatabaseFromSnapshotCommandInput, CreateRelationalDatabaseFromSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateRelationalDatabaseFromSnapshotCommand";
    import { CreateRelationalDatabaseSnapshotCommandInput, CreateRelationalDatabaseSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/CreateRelationalDatabaseSnapshotCommand";
    import { DeleteAlarmCommandInput, DeleteAlarmCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteAlarmCommand";
    import { DeleteAutoSnapshotCommandInput, DeleteAutoSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteAutoSnapshotCommand";
    import { DeleteBucketAccessKeyCommandInput, DeleteBucketAccessKeyCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteBucketAccessKeyCommand";
    import { DeleteBucketCommandInput, DeleteBucketCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteBucketCommand";
    import { DeleteCertificateCommandInput, DeleteCertificateCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteCertificateCommand";
    import { DeleteContactMethodCommandInput, DeleteContactMethodCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteContactMethodCommand";
    import { DeleteContainerImageCommandInput, DeleteContainerImageCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteContainerImageCommand";
    import { DeleteContainerServiceCommandInput, DeleteContainerServiceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteContainerServiceCommand";
    import { DeleteDiskCommandInput, DeleteDiskCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDiskCommand";
    import { DeleteDiskSnapshotCommandInput, DeleteDiskSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDiskSnapshotCommand";
    import { DeleteDistributionCommandInput, DeleteDistributionCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDistributionCommand";
    import { DeleteDomainCommandInput, DeleteDomainCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDomainCommand";
    import { DeleteDomainEntryCommandInput, DeleteDomainEntryCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteDomainEntryCommand";
    import { DeleteInstanceCommandInput, DeleteInstanceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteInstanceCommand";
    import { DeleteInstanceSnapshotCommandInput, DeleteInstanceSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteInstanceSnapshotCommand";
    import { DeleteKeyPairCommandInput, DeleteKeyPairCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteKeyPairCommand";
    import { DeleteKnownHostKeysCommandInput, DeleteKnownHostKeysCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteKnownHostKeysCommand";
    import { DeleteLoadBalancerCommandInput, DeleteLoadBalancerCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteLoadBalancerCommand";
    import { DeleteLoadBalancerTlsCertificateCommandInput, DeleteLoadBalancerTlsCertificateCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteLoadBalancerTlsCertificateCommand";
    import { DeleteRelationalDatabaseCommandInput, DeleteRelationalDatabaseCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteRelationalDatabaseCommand";
    import { DeleteRelationalDatabaseSnapshotCommandInput, DeleteRelationalDatabaseSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DeleteRelationalDatabaseSnapshotCommand";
    import { DetachCertificateFromDistributionCommandInput, DetachCertificateFromDistributionCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DetachCertificateFromDistributionCommand";
    import { DetachDiskCommandInput, DetachDiskCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DetachDiskCommand";
    import { DetachInstancesFromLoadBalancerCommandInput, DetachInstancesFromLoadBalancerCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DetachInstancesFromLoadBalancerCommand";
    import { DetachStaticIpCommandInput, DetachStaticIpCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DetachStaticIpCommand";
    import { DisableAddOnCommandInput, DisableAddOnCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DisableAddOnCommand";
    import { DownloadDefaultKeyPairCommandInput, DownloadDefaultKeyPairCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/DownloadDefaultKeyPairCommand";
    import { EnableAddOnCommandInput, EnableAddOnCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/EnableAddOnCommand";
    import { ExportSnapshotCommandInput, ExportSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/ExportSnapshotCommand";
    import { GetActiveNamesCommandInput, GetActiveNamesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetActiveNamesCommand";
    import { GetAlarmsCommandInput, GetAlarmsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetAlarmsCommand";
    import { GetAutoSnapshotsCommandInput, GetAutoSnapshotsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetAutoSnapshotsCommand";
    import { GetBlueprintsCommandInput, GetBlueprintsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBlueprintsCommand";
    import { GetBucketAccessKeysCommandInput, GetBucketAccessKeysCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBucketAccessKeysCommand";
    import { GetBucketBundlesCommandInput, GetBucketBundlesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBucketBundlesCommand";
    import { GetBucketMetricDataCommandInput, GetBucketMetricDataCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBucketMetricDataCommand";
    import { GetBucketsCommandInput, GetBucketsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBucketsCommand";
    import { GetBundlesCommandInput, GetBundlesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetBundlesCommand";
    import { GetCertificatesCommandInput, GetCertificatesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetCertificatesCommand";
    import { GetCloudFormationStackRecordsCommandInput, GetCloudFormationStackRecordsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetCloudFormationStackRecordsCommand";
    import { GetContactMethodsCommandInput, GetContactMethodsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContactMethodsCommand";
    import { GetContainerAPIMetadataCommandInput, GetContainerAPIMetadataCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerAPIMetadataCommand";
    import { GetContainerImagesCommandInput, GetContainerImagesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerImagesCommand";
    import { GetContainerLogCommandInput, GetContainerLogCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerLogCommand";
    import { GetContainerServiceDeploymentsCommandInput, GetContainerServiceDeploymentsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerServiceDeploymentsCommand";
    import { GetContainerServiceMetricDataCommandInput, GetContainerServiceMetricDataCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerServiceMetricDataCommand";
    import { GetContainerServicePowersCommandInput, GetContainerServicePowersCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerServicePowersCommand";
    import { GetContainerServicesCommandInput, GetContainerServicesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetContainerServicesCommand";
    import { GetDiskCommandInput, GetDiskCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDiskCommand";
    import { GetDisksCommandInput, GetDisksCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDisksCommand";
    import { GetDiskSnapshotCommandInput, GetDiskSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDiskSnapshotCommand";
    import { GetDiskSnapshotsCommandInput, GetDiskSnapshotsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDiskSnapshotsCommand";
    import { GetDistributionBundlesCommandInput, GetDistributionBundlesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDistributionBundlesCommand";
    import { GetDistributionLatestCacheResetCommandInput, GetDistributionLatestCacheResetCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDistributionLatestCacheResetCommand";
    import { GetDistributionMetricDataCommandInput, GetDistributionMetricDataCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDistributionMetricDataCommand";
    import { GetDistributionsCommandInput, GetDistributionsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDistributionsCommand";
    import { GetDomainCommandInput, GetDomainCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDomainCommand";
    import { GetDomainsCommandInput, GetDomainsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetDomainsCommand";
    import { GetExportSnapshotRecordsCommandInput, GetExportSnapshotRecordsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetExportSnapshotRecordsCommand";
    import { GetInstanceAccessDetailsCommandInput, GetInstanceAccessDetailsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceAccessDetailsCommand";
    import { GetInstanceCommandInput, GetInstanceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceCommand";
    import { GetInstanceMetricDataCommandInput, GetInstanceMetricDataCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceMetricDataCommand";
    import { GetInstancePortStatesCommandInput, GetInstancePortStatesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstancePortStatesCommand";
    import { GetInstancesCommandInput, GetInstancesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstancesCommand";
    import { GetInstanceSnapshotCommandInput, GetInstanceSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceSnapshotCommand";
    import { GetInstanceSnapshotsCommandInput, GetInstanceSnapshotsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceSnapshotsCommand";
    import { GetInstanceStateCommandInput, GetInstanceStateCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetInstanceStateCommand";
    import { GetKeyPairCommandInput, GetKeyPairCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetKeyPairCommand";
    import { GetKeyPairsCommandInput, GetKeyPairsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetKeyPairsCommand";
    import { GetLoadBalancerCommandInput, GetLoadBalancerCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancerCommand";
    import { GetLoadBalancerMetricDataCommandInput, GetLoadBalancerMetricDataCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancerMetricDataCommand";
    import { GetLoadBalancersCommandInput, GetLoadBalancersCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancersCommand";
    import { GetLoadBalancerTlsCertificatesCommandInput, GetLoadBalancerTlsCertificatesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancerTlsCertificatesCommand";
    import { GetLoadBalancerTlsPoliciesCommandInput, GetLoadBalancerTlsPoliciesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetLoadBalancerTlsPoliciesCommand";
    import { GetOperationCommandInput, GetOperationCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetOperationCommand";
    import { GetOperationsCommandInput, GetOperationsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetOperationsCommand";
    import { GetOperationsForResourceCommandInput, GetOperationsForResourceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetOperationsForResourceCommand";
    import { GetRegionsCommandInput, GetRegionsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRegionsCommand";
    import { GetRelationalDatabaseBlueprintsCommandInput, GetRelationalDatabaseBlueprintsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseBlueprintsCommand";
    import { GetRelationalDatabaseBundlesCommandInput, GetRelationalDatabaseBundlesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseBundlesCommand";
    import { GetRelationalDatabaseCommandInput, GetRelationalDatabaseCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseCommand";
    import { GetRelationalDatabaseEventsCommandInput, GetRelationalDatabaseEventsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseEventsCommand";
    import { GetRelationalDatabaseLogEventsCommandInput, GetRelationalDatabaseLogEventsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseLogEventsCommand";
    import { GetRelationalDatabaseLogStreamsCommandInput, GetRelationalDatabaseLogStreamsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseLogStreamsCommand";
    import { GetRelationalDatabaseMasterUserPasswordCommandInput, GetRelationalDatabaseMasterUserPasswordCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseMasterUserPasswordCommand";
    import { GetRelationalDatabaseMetricDataCommandInput, GetRelationalDatabaseMetricDataCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseMetricDataCommand";
    import { GetRelationalDatabaseParametersCommandInput, GetRelationalDatabaseParametersCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseParametersCommand";
    import { GetRelationalDatabasesCommandInput, GetRelationalDatabasesCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabasesCommand";
    import { GetRelationalDatabaseSnapshotCommandInput, GetRelationalDatabaseSnapshotCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseSnapshotCommand";
    import { GetRelationalDatabaseSnapshotsCommandInput, GetRelationalDatabaseSnapshotsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetRelationalDatabaseSnapshotsCommand";
    import { GetStaticIpCommandInput, GetStaticIpCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetStaticIpCommand";
    import { GetStaticIpsCommandInput, GetStaticIpsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/GetStaticIpsCommand";
    import { ImportKeyPairCommandInput, ImportKeyPairCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/ImportKeyPairCommand";
    import { IsVpcPeeredCommandInput, IsVpcPeeredCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/IsVpcPeeredCommand";
    import { OpenInstancePublicPortsCommandInput, OpenInstancePublicPortsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/OpenInstancePublicPortsCommand";
    import { PeerVpcCommandInput, PeerVpcCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/PeerVpcCommand";
    import { PutAlarmCommandInput, PutAlarmCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/PutAlarmCommand";
    import { PutInstancePublicPortsCommandInput, PutInstancePublicPortsCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/PutInstancePublicPortsCommand";
    import { RebootInstanceCommandInput, RebootInstanceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/RebootInstanceCommand";
    import { RebootRelationalDatabaseCommandInput, RebootRelationalDatabaseCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/RebootRelationalDatabaseCommand";
    import { RegisterContainerImageCommandInput, RegisterContainerImageCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/RegisterContainerImageCommand";
    import { ReleaseStaticIpCommandInput, ReleaseStaticIpCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/ReleaseStaticIpCommand";
    import { ResetDistributionCacheCommandInput, ResetDistributionCacheCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/ResetDistributionCacheCommand";
    import { SendContactMethodVerificationCommandInput, SendContactMethodVerificationCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/SendContactMethodVerificationCommand";
    import { SetIpAddressTypeCommandInput, SetIpAddressTypeCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/SetIpAddressTypeCommand";
    import { SetResourceAccessForBucketCommandInput, SetResourceAccessForBucketCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/SetResourceAccessForBucketCommand";
    import { StartInstanceCommandInput, StartInstanceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/StartInstanceCommand";
    import { StartRelationalDatabaseCommandInput, StartRelationalDatabaseCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/StartRelationalDatabaseCommand";
    import { StopInstanceCommandInput, StopInstanceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/StopInstanceCommand";
    import { StopRelationalDatabaseCommandInput, StopRelationalDatabaseCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/StopRelationalDatabaseCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/TagResourceCommand";
    import { TestAlarmCommandInput, TestAlarmCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/TestAlarmCommand";
    import { UnpeerVpcCommandInput, UnpeerVpcCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UnpeerVpcCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UntagResourceCommand";
    import { UpdateBucketBundleCommandInput, UpdateBucketBundleCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateBucketBundleCommand";
    import { UpdateBucketCommandInput, UpdateBucketCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateBucketCommand";
    import { UpdateContainerServiceCommandInput, UpdateContainerServiceCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateContainerServiceCommand";
    import { UpdateDistributionBundleCommandInput, UpdateDistributionBundleCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateDistributionBundleCommand";
    import { UpdateDistributionCommandInput, UpdateDistributionCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateDistributionCommand";
    import { UpdateDomainEntryCommandInput, UpdateDomainEntryCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateDomainEntryCommand";
    import { UpdateLoadBalancerAttributeCommandInput, UpdateLoadBalancerAttributeCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateLoadBalancerAttributeCommand";
    import { UpdateRelationalDatabaseCommandInput, UpdateRelationalDatabaseCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateRelationalDatabaseCommand";
    import { UpdateRelationalDatabaseParametersCommandInput, UpdateRelationalDatabaseParametersCommandOutput } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/commands/UpdateRelationalDatabaseParametersCommand";
    export type ServiceInputTypes = AllocateStaticIpCommandInput | AttachCertificateToDistributionCommandInput | AttachDiskCommandInput | AttachInstancesToLoadBalancerCommandInput | AttachLoadBalancerTlsCertificateCommandInput | AttachStaticIpCommandInput | CloseInstancePublicPortsCommandInput | CopySnapshotCommandInput | CreateBucketAccessKeyCommandInput | CreateBucketCommandInput | CreateCertificateCommandInput | CreateCloudFormationStackCommandInput | CreateContactMethodCommandInput | CreateContainerServiceCommandInput | CreateContainerServiceDeploymentCommandInput | CreateContainerServiceRegistryLoginCommandInput | CreateDiskCommandInput | CreateDiskFromSnapshotCommandInput | CreateDiskSnapshotCommandInput | CreateDistributionCommandInput | CreateDomainCommandInput | CreateDomainEntryCommandInput | CreateInstanceSnapshotCommandInput | CreateInstancesCommandInput | CreateInstancesFromSnapshotCommandInput | CreateKeyPairCommandInput | CreateLoadBalancerCommandInput | CreateLoadBalancerTlsCertificateCommandInput | CreateRelationalDatabaseCommandInput | CreateRelationalDatabaseFromSnapshotCommandInput | CreateRelationalDatabaseSnapshotCommandInput | DeleteAlarmCommandInput | DeleteAutoSnapshotCommandInput | DeleteBucketAccessKeyCommandInput | DeleteBucketCommandInput | DeleteCertificateCommandInput | DeleteContactMethodCommandInput | DeleteContainerImageCommandInput | DeleteContainerServiceCommandInput | DeleteDiskCommandInput | DeleteDiskSnapshotCommandInput | DeleteDistributionCommandInput | DeleteDomainCommandInput | DeleteDomainEntryCommandInput | DeleteInstanceCommandInput | DeleteInstanceSnapshotCommandInput | DeleteKeyPairCommandInput | DeleteKnownHostKeysCommandInput | DeleteLoadBalancerCommandInput | DeleteLoadBalancerTlsCertificateCommandInput | DeleteRelationalDatabaseCommandInput | DeleteRelationalDatabaseSnapshotCommandInput | DetachCertificateFromDistributionCommandInput | DetachDiskCommandInput | DetachInstancesFromLoadBalancerCommandInput | DetachStaticIpCommandInput | DisableAddOnCommandInput | DownloadDefaultKeyPairCommandInput | EnableAddOnCommandInput | ExportSnapshotCommandInput | GetActiveNamesCommandInput | GetAlarmsCommandInput | GetAutoSnapshotsCommandInput | GetBlueprintsCommandInput | GetBucketAccessKeysCommandInput | GetBucketBundlesCommandInput | GetBucketMetricDataCommandInput | GetBucketsCommandInput | GetBundlesCommandInput | GetCertificatesCommandInput | GetCloudFormationStackRecordsCommandInput | GetContactMethodsCommandInput | GetContainerAPIMetadataCommandInput | GetContainerImagesCommandInput | GetContainerLogCommandInput | GetContainerServiceDeploymentsCommandInput | GetContainerServiceMetricDataCommandInput | GetContainerServicePowersCommandInput | GetContainerServicesCommandInput | GetDiskCommandInput | GetDiskSnapshotCommandInput | GetDiskSnapshotsCommandInput | GetDisksCommandInput | GetDistributionBundlesCommandInput | GetDistributionLatestCacheResetCommandInput | GetDistributionMetricDataCommandInput | GetDistributionsCommandInput | GetDomainCommandInput | GetDomainsCommandInput | GetExportSnapshotRecordsCommandInput | GetInstanceAccessDetailsCommandInput | GetInstanceCommandInput | GetInstanceMetricDataCommandInput | GetInstancePortStatesCommandInput | GetInstanceSnapshotCommandInput | GetInstanceSnapshotsCommandInput | GetInstanceStateCommandInput | GetInstancesCommandInput | GetKeyPairCommandInput | GetKeyPairsCommandInput | GetLoadBalancerCommandInput | GetLoadBalancerMetricDataCommandInput | GetLoadBalancerTlsCertificatesCommandInput | GetLoadBalancerTlsPoliciesCommandInput | GetLoadBalancersCommandInput | GetOperationCommandInput | GetOperationsCommandInput | GetOperationsForResourceCommandInput | GetRegionsCommandInput | GetRelationalDatabaseBlueprintsCommandInput | GetRelationalDatabaseBundlesCommandInput | GetRelationalDatabaseCommandInput | GetRelationalDatabaseEventsCommandInput | GetRelationalDatabaseLogEventsCommandInput | GetRelationalDatabaseLogStreamsCommandInput | GetRelationalDatabaseMasterUserPasswordCommandInput | GetRelationalDatabaseMetricDataCommandInput | GetRelationalDatabaseParametersCommandInput | GetRelationalDatabaseSnapshotCommandInput | GetRelationalDatabaseSnapshotsCommandInput | GetRelationalDatabasesCommandInput | GetStaticIpCommandInput | GetStaticIpsCommandInput | ImportKeyPairCommandInput | IsVpcPeeredCommandInput | OpenInstancePublicPortsCommandInput | PeerVpcCommandInput | PutAlarmCommandInput | PutInstancePublicPortsCommandInput | RebootInstanceCommandInput | RebootRelationalDatabaseCommandInput | RegisterContainerImageCommandInput | ReleaseStaticIpCommandInput | ResetDistributionCacheCommandInput | SendContactMethodVerificationCommandInput | SetIpAddressTypeCommandInput | SetResourceAccessForBucketCommandInput | StartInstanceCommandInput | StartRelationalDatabaseCommandInput | StopInstanceCommandInput | StopRelationalDatabaseCommandInput | TagResourceCommandInput | TestAlarmCommandInput | UnpeerVpcCommandInput | UntagResourceCommandInput | UpdateBucketBundleCommandInput | UpdateBucketCommandInput | UpdateContainerServiceCommandInput | UpdateDistributionBundleCommandInput | UpdateDistributionCommandInput | UpdateDomainEntryCommandInput | UpdateLoadBalancerAttributeCommandInput | UpdateRelationalDatabaseCommandInput | UpdateRelationalDatabaseParametersCommandInput;
    export type ServiceOutputTypes = AllocateStaticIpCommandOutput | AttachCertificateToDistributionCommandOutput | AttachDiskCommandOutput | AttachInstancesToLoadBalancerCommandOutput | AttachLoadBalancerTlsCertificateCommandOutput | AttachStaticIpCommandOutput | CloseInstancePublicPortsCommandOutput | CopySnapshotCommandOutput | CreateBucketAccessKeyCommandOutput | CreateBucketCommandOutput | CreateCertificateCommandOutput | CreateCloudFormationStackCommandOutput | CreateContactMethodCommandOutput | CreateContainerServiceCommandOutput | CreateContainerServiceDeploymentCommandOutput | CreateContainerServiceRegistryLoginCommandOutput | CreateDiskCommandOutput | CreateDiskFromSnapshotCommandOutput | CreateDiskSnapshotCommandOutput | CreateDistributionCommandOutput | CreateDomainCommandOutput | CreateDomainEntryCommandOutput | CreateInstanceSnapshotCommandOutput | CreateInstancesCommandOutput | CreateInstancesFromSnapshotCommandOutput | CreateKeyPairCommandOutput | CreateLoadBalancerCommandOutput | CreateLoadBalancerTlsCertificateCommandOutput | CreateRelationalDatabaseCommandOutput | CreateRelationalDatabaseFromSnapshotCommandOutput | CreateRelationalDatabaseSnapshotCommandOutput | DeleteAlarmCommandOutput | DeleteAutoSnapshotCommandOutput | DeleteBucketAccessKeyCommandOutput | DeleteBucketCommandOutput | DeleteCertificateCommandOutput | DeleteContactMethodCommandOutput | DeleteContainerImageCommandOutput | DeleteContainerServiceCommandOutput | DeleteDiskCommandOutput | DeleteDiskSnapshotCommandOutput | DeleteDistributionCommandOutput | DeleteDomainCommandOutput | DeleteDomainEntryCommandOutput | DeleteInstanceCommandOutput | DeleteInstanceSnapshotCommandOutput | DeleteKeyPairCommandOutput | DeleteKnownHostKeysCommandOutput | DeleteLoadBalancerCommandOutput | DeleteLoadBalancerTlsCertificateCommandOutput | DeleteRelationalDatabaseCommandOutput | DeleteRelationalDatabaseSnapshotCommandOutput | DetachCertificateFromDistributionCommandOutput | DetachDiskCommandOutput | DetachInstancesFromLoadBalancerCommandOutput | DetachStaticIpCommandOutput | DisableAddOnCommandOutput | DownloadDefaultKeyPairCommandOutput | EnableAddOnCommandOutput | ExportSnapshotCommandOutput | GetActiveNamesCommandOutput | GetAlarmsCommandOutput | GetAutoSnapshotsCommandOutput | GetBlueprintsCommandOutput | GetBucketAccessKeysCommandOutput | GetBucketBundlesCommandOutput | GetBucketMetricDataCommandOutput | GetBucketsCommandOutput | GetBundlesCommandOutput | GetCertificatesCommandOutput | GetCloudFormationStackRecordsCommandOutput | GetContactMethodsCommandOutput | GetContainerAPIMetadataCommandOutput | GetContainerImagesCommandOutput | GetContainerLogCommandOutput | GetContainerServiceDeploymentsCommandOutput | GetContainerServiceMetricDataCommandOutput | GetContainerServicePowersCommandOutput | GetContainerServicesCommandOutput | GetDiskCommandOutput | GetDiskSnapshotCommandOutput | GetDiskSnapshotsCommandOutput | GetDisksCommandOutput | GetDistributionBundlesCommandOutput | GetDistributionLatestCacheResetCommandOutput | GetDistributionMetricDataCommandOutput | GetDistributionsCommandOutput | GetDomainCommandOutput | GetDomainsCommandOutput | GetExportSnapshotRecordsCommandOutput | GetInstanceAccessDetailsCommandOutput | GetInstanceCommandOutput | GetInstanceMetricDataCommandOutput | GetInstancePortStatesCommandOutput | GetInstanceSnapshotCommandOutput | GetInstanceSnapshotsCommandOutput | GetInstanceStateCommandOutput | GetInstancesCommandOutput | GetKeyPairCommandOutput | GetKeyPairsCommandOutput | GetLoadBalancerCommandOutput | GetLoadBalancerMetricDataCommandOutput | GetLoadBalancerTlsCertificatesCommandOutput | GetLoadBalancerTlsPoliciesCommandOutput | GetLoadBalancersCommandOutput | GetOperationCommandOutput | GetOperationsCommandOutput | GetOperationsForResourceCommandOutput | GetRegionsCommandOutput | GetRelationalDatabaseBlueprintsCommandOutput | GetRelationalDatabaseBundlesCommandOutput | GetRelationalDatabaseCommandOutput | GetRelationalDatabaseEventsCommandOutput | GetRelationalDatabaseLogEventsCommandOutput | GetRelationalDatabaseLogStreamsCommandOutput | GetRelationalDatabaseMasterUserPasswordCommandOutput | GetRelationalDatabaseMetricDataCommandOutput | GetRelationalDatabaseParametersCommandOutput | GetRelationalDatabaseSnapshotCommandOutput | GetRelationalDatabaseSnapshotsCommandOutput | GetRelationalDatabasesCommandOutput | GetStaticIpCommandOutput | GetStaticIpsCommandOutput | ImportKeyPairCommandOutput | IsVpcPeeredCommandOutput | OpenInstancePublicPortsCommandOutput | PeerVpcCommandOutput | PutAlarmCommandOutput | PutInstancePublicPortsCommandOutput | RebootInstanceCommandOutput | RebootRelationalDatabaseCommandOutput | RegisterContainerImageCommandOutput | ReleaseStaticIpCommandOutput | ResetDistributionCacheCommandOutput | SendContactMethodVerificationCommandOutput | SetIpAddressTypeCommandOutput | SetResourceAccessForBucketCommandOutput | StartInstanceCommandOutput | StartRelationalDatabaseCommandOutput | StopInstanceCommandOutput | StopRelationalDatabaseCommandOutput | TagResourceCommandOutput | TestAlarmCommandOutput | UnpeerVpcCommandOutput | UntagResourceCommandOutput | UpdateBucketBundleCommandOutput | UpdateBucketCommandOutput | UpdateContainerServiceCommandOutput | UpdateDistributionBundleCommandOutput | UpdateDistributionCommandOutput | UpdateDomainEntryCommandOutput | UpdateLoadBalancerAttributeCommandOutput | UpdateRelationalDatabaseCommandOutput | UpdateRelationalDatabaseParametersCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type LightsailClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of LightsailClient class constructor that set the region, credentials and other options.
        */
    export interface LightsailClientConfig extends LightsailClientConfigType {
    }
    type LightsailClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of LightsailClient class. This is resolved and normalized from the {@link LightsailClientConfig | constructor configuration interface}.
        */
    export interface LightsailClientResolvedConfig extends LightsailClientResolvedConfigType {
    }
    /**
        * <p>Amazon Lightsail is the easiest way to get started with Amazon Web Services (Amazon Web Services) for developers who need to build websites or web applications. It includes
        *       everything you need to launch your project quickly - instances (virtual private servers),
        *       container services, storage buckets, managed databases, SSD-based block storage, static IP
        *       addresses, load balancers, content delivery network (CDN) distributions, DNS management of
        *       registered domains, and resource snapshots (backups) - for a low, predictable monthly
        *       price.</p>
        *
        *          <p>You can manage your Lightsail resources using the Lightsail console, Lightsail API,
        *       AWS Command Line Interface (AWS CLI), or SDKs. For more information about Lightsail concepts
        *       and tasks, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/lightsail-how-to-set-up-access-keys-to-use-sdk-api-cli">Amazon Lightsail Developer Guide</a>.</p>
        *
        *          <p>This API Reference provides detailed information about the actions, data types,
        *       parameters, and errors of the Lightsail service. For more information about the supported
        *         Amazon Web Services Regions, endpoints, and service quotas of the Lightsail service, see
        *         <a href="https://docs.aws.amazon.com/general/latest/gr/lightsail.html">Amazon Lightsail Endpoints
        *         and Quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
        */
    export class LightsailClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, LightsailClientResolvedConfig> {
            /**
                * The resolved configuration of LightsailClient class. This is resolved and normalized from the {@link LightsailClientConfig | constructor configuration interface}.
                */
            readonly config: LightsailClientResolvedConfig;
            constructor(configuration: LightsailClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { LightsailServiceException as __BaseException } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/LightsailServiceException";
    /**
        * <p>Lightsail throws this exception when the user cannot be authenticated or uses invalid
        *       credentials to access a resource.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            code?: string;
            docs?: string;
            tip?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export enum AccessDirection {
            inbound = "inbound",
            outbound = "outbound"
    }
    /**
        * <p>Describes the last time an access key was used.</p>
        *
        *          <note>
        *             <p>This object does not include data in the response of a <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html">CreateBucketAccessKey</a> action.</p>
        *          </note>
        */
    export interface AccessKeyLastUsed {
            /**
                * <p>The date and time when the access key was most recently used.</p>
                *          <p>This value is null if the access key has not been used.</p>
                */
            lastUsedDate?: Date;
            /**
                * <p>The AWS Region where this access key was most recently used.</p>
                *          <p>This value is <code>N/A</code> if the access key has not been used.</p>
                */
            region?: string;
            /**
                * <p>The name of the AWS service with which this access key was most recently used.</p>
                *          <p>This value is <code>N/A</code> if the access key has not been used.</p>
                */
            serviceName?: string;
    }
    export namespace AccessKeyLastUsed {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessKeyLastUsed) => any;
    }
    export enum StatusType {
            Active = "Active",
            Inactive = "Inactive"
    }
    /**
        * <p>Describes an access key for an Amazon Lightsail bucket.</p>
        *
        *          <p>Access keys grant full programmatic access to the specified bucket and its objects. You
        *       can have a maximum of two access keys per bucket. Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html">CreateBucketAccessKey</a> action to create an access key for a specific bucket. For
        *       more information about access keys, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-bucket-access-keys">Creating access keys for a bucket in Amazon Lightsail</a> in the
        *         <i>Amazon Lightsail Developer Guide</i>.</p>
        *
        *          <important>
        *             <p>The <code>secretAccessKey</code> value is returned only in response to the
        *           <code>CreateBucketAccessKey</code> action. You can get a secret access key only when you
        *         first create an access key; you cannot get the secret access key later. If you lose the
        *         secret access key, you must create a new access key.</p>
        *          </important>
        */
    export interface AccessKey {
            /**
                * <p>The ID of the access key.</p>
                */
            accessKeyId?: string;
            /**
                * <p>The secret access key used to sign requests.</p>
                *
                *          <p>You should store the secret access key in a safe location. We recommend that you delete
                *       the access key if the secret access key is compromised.</p>
                */
            secretAccessKey?: string;
            /**
                * <p>The status of the access key.</p>
                *
                *          <p>A status of <code>Active</code> means that the key is valid, while <code>Inactive</code>
                *       means it is not.</p>
                */
            status?: StatusType | string;
            /**
                * <p>The timestamp when the access key was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>An object that describes the last time the access key was used.</p>
                *
                *          <note>
                *             <p>This object does not include data in the response of a <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_CreateBucketAccessKey.html">CreateBucketAccessKey</a> action. If the access key has not been used, the
                *           <code>region</code> and <code>serviceName</code> values are <code>N/A</code>, and the
                *           <code>lastUsedDate</code> value is null.</p>
                *          </note>
                */
            lastUsed?: AccessKeyLastUsed;
    }
    export namespace AccessKey {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessKey) => any;
    }
    /**
        * <p>Describes an Amazon Lightsail instance that has access to a Lightsail bucket.</p>
        */
    export interface ResourceReceivingAccess {
            /**
                * <p>The name of the Lightsail instance.</p>
                */
            name?: string;
            /**
                * <p>The Lightsail resource type (for example, <code>Instance</code>).</p>
                */
            resourceType?: string;
    }
    export namespace ResourceReceivingAccess {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceReceivingAccess) => any;
    }
    export enum AccessType {
            Private = "private",
            Public = "public"
    }
    /**
        * <p>Describes the anonymous access permissions for an Amazon Lightsail bucket and its
        *       objects.</p>
        *          <p>For more information about bucket access permissions, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-understanding-bucket-permissions">Understanding bucket permissions in Amazon Lightsail</a> in the </p>
        *          <p>
        *             <i>Amazon Lightsail Developer Guide</i>.</p>
        */
    export interface AccessRules {
            /**
                * <p>Specifies the anonymous access to all objects in a bucket.</p>
                *
                *          <p>The following options can be specified:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>public</code> - Sets all objects in the bucket to public (read-only), making
                *           them readable by anyone in the world.</p>
                *
                *
                *                <p>If the <code>getObject</code> value is set to <code>public</code>, then all objects in
                *           the bucket default to public regardless of the <code>allowPublicOverrides</code>
                *           value.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>private</code> - Sets all objects in the bucket to private, making them readable
                *           only by you or anyone you give access to.</p>
                *
                *
                *                <p>If the <code>getObject</code> value is set to <code>private</code>, and the
                *             <code>allowPublicOverrides</code> value is set to <code>true</code>, then all objects in
                *           the bucket default to private unless they are configured with a <code>public-read</code>
                *           ACL. Individual objects with a <code>public-read</code> ACL are readable by anyone in the
                *           world.</p>
                *             </li>
                *          </ul>
                */
            getObject?: AccessType | string;
            /**
                * <p>A Boolean value that indicates whether the access control list (ACL) permissions that are
                *       applied to individual objects override the <code>getObject</code> option that is currently
                *       specified.</p>
                *
                *          <p>When this is true, you can use the <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObjectAcl.html">PutObjectAcl</a> Amazon S3 API action to set
                *       individual objects to public (read-only) using the <code>public-read</code> ACL, or to private
                *       using the <code>private</code> ACL.</p>
                */
            allowPublicOverrides?: boolean;
    }
    export namespace AccessRules {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessRules) => any;
    }
    export enum BPAStatusMessage {
            DEFAULTED_FOR_SLR_MISSING = "DEFAULTED_FOR_SLR_MISSING",
            DEFAULTED_FOR_SLR_MISSING_ON_HOLD = "DEFAULTED_FOR_SLR_MISSING_ON_HOLD",
            SYNC_ON_HOLD = "SYNC_ON_HOLD",
            Unknown = "Unknown"
    }
    export enum AccountLevelBpaSyncStatus {
            Defaulted = "Defaulted",
            Failed = "Failed",
            InSync = "InSync",
            NeverSynced = "NeverSynced"
    }
    /**
        * <p>Describes the synchronization status of the Amazon Simple Storage Service (Amazon S3)
        *       account-level block public access (BPA) feature for your Lightsail buckets.</p>
        *
        *          <p>The account-level BPA feature of Amazon S3 provides centralized controls to limit
        *       public access to all Amazon S3 buckets in an account. BPA can make all Amazon S3 buckets in an Amazon Web Services account private regardless of the individual bucket and
        *       object permissions that are configured. Lightsail buckets take into account the
        *         Amazon S3 account-level BPA configuration when allowing or denying public access. To
        *       do this, Lightsail periodically fetches the account-level BPA configuration
        *       from Amazon S3. When the account-level BPA status is <code>InSync</code>, the Amazon S3 account-level BPA configuration is synchronized and it applies to your Lightsail
        *       buckets. For more information about Amazon Simple Storage Service account-level BPA and how it affects
        *         Lightsail buckets, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-block-public-access-for-buckets">Block public access for buckets in Amazon Lightsail</a> in the
        *           <i>Amazon Lightsail Developer Guide</i>.</p>
        */
    export interface AccountLevelBpaSync {
            /**
                * <p>The status of the account-level BPA synchronization.</p>
                *
                *          <p>The following statuses are possible:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>InSync</code> - Account-level BPA is synchronized. The Amazon S3
                *           account-level BPA configuration applies to your Lightsail buckets.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NeverSynced</code> - Synchronization has not yet happened. The Amazon S3
                *           account-level BPA configuration does not apply to your Lightsail buckets.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Failed</code> - Synchronization failed. The Amazon S3 account-level BPA
                *           configuration does not apply to your Lightsail buckets.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Defaulted</code> - Synchronization failed and account-level BPA for your
                *           Lightsail buckets is defaulted to <i>active</i>.</p>
                *             </li>
                *          </ul>
                *          <note>
                *             <p>You might need to complete further actions if the status is <code>Failed</code> or
                *           <code>Defaulted</code>. The <code>message</code> parameter provides more information for
                *         those statuses.</p>
                *          </note>
                */
            status?: AccountLevelBpaSyncStatus | string;
            /**
                * <p>The timestamp of when the account-level BPA configuration was last synchronized. This
                *       value is null when the account-level BPA configuration has not been synchronized.</p>
                */
            lastSyncedAt?: Date;
            /**
                * <p>A message that provides a reason for a <code>Failed</code> or <code>Defaulted</code>
                *       synchronization status.</p>
                *
                *          <p>The following messages are possible:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>SYNC_ON_HOLD</code> - The synchronization has not yet happened. This status
                *           message occurs immediately after you create your first Lightsail bucket. This status
                *           message should change after the first synchronization happens, approximately 1 hour after
                *           the first bucket is created.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DEFAULTED_FOR_SLR_MISSING</code> - The synchronization failed because the
                *           required service-linked role is missing from your Amazon Web Services account. The
                *           account-level BPA configuration for your Lightsail buckets is defaulted to
                *             <i>active</i> until the synchronization can occur. This means that all
                *           your buckets are private and not publicly accessible. For more information about how to
                *           create the required service-linked role to allow synchronization, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-using-service-linked-roles">Using Service-Linked Roles for Amazon Lightsail</a> in the
                *               <i>Amazon Lightsail Developer Guide</i>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DEFAULTED_FOR_SLR_MISSING_ON_HOLD</code> - The synchronization failed because
                *           the required service-linked role is missing from your Amazon Web Services account.
                *           Account-level BPA is not yet configured for your Lightsail buckets. Therefore, only the
                *           bucket access permissions and individual object access permissions apply to your
                *           Lightsail buckets. For more information about how to create the required service-linked
                *           role to allow synchronization, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-using-service-linked-roles">Using Service-Linked Roles for Amazon Lightsail</a> in the
                *               <i>Amazon Lightsail Developer Guide</i>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Unknown</code> - The reason that synchronization failed is unknown. Contact
                *             Amazon Web Services Support for more information.</p>
                *             </li>
                *          </ul>
                */
            message?: BPAStatusMessage | string;
            /**
                * <p>A Boolean value that indicates whether account-level block public access is affecting your
                *         Lightsail buckets.</p>
                */
            bpaImpactsLightsail?: boolean;
    }
    export namespace AccountLevelBpaSync {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountLevelBpaSync) => any;
    }
    /**
        * <p>Lightsail throws this exception when an account is still in the setup in progress
        *       state.</p>
        */
    export class AccountSetupInProgressException extends __BaseException {
            readonly name: "AccountSetupInProgressException";
            readonly $fault: "client";
            code?: string;
            docs?: string;
            tip?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccountSetupInProgressException, __BaseException>);
    }
    /**
        * <p>Describes an add-on that is enabled for an Amazon Lightsail resource.</p>
        */
    export interface AddOn {
            /**
                * <p>The name of the add-on.</p>
                */
            name?: string;
            /**
                * <p>The status of the add-on.</p>
                */
            status?: string;
            /**
                * <p>The daily time when an automatic snapshot is created.</p>
                *          <p>The time shown is in <code>HH:00</code> format, and in Coordinated Universal Time
                *       (UTC).</p>
                *          <p>The snapshot is automatically created between the time shown and up to 45 minutes
                *       after.</p>
                */
            snapshotTimeOfDay?: string;
            /**
                * <p>The next daily time an automatic snapshot will be created.</p>
                *          <p>The time shown is in <code>HH:00</code> format, and in Coordinated Universal Time
                *       (UTC).</p>
                *          <p>The snapshot is automatically created between the time shown and up to 45 minutes
                *       after.</p>
                */
            nextSnapshotTimeOfDay?: string;
    }
    export namespace AddOn {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddOn) => any;
    }
    export enum AddOnType {
            AutoSnapshot = "AutoSnapshot"
    }
    /**
        * <p>Describes a request to enable or modify the automatic snapshot add-on for an
        *       Amazon Lightsail instance or disk.</p>
        *          <p>When you modify the automatic snapshot time for a resource, it is typically effective
        *       immediately except under the following conditions:</p>
        *          <ul>
        *             <li>
        *                <p>If an automatic snapshot has been created for the current day, and you change the
        *           snapshot time to a later time of day, then the new snapshot time will be effective the
        *           following day. This ensures that two snapshots are not created for the current day.</p>
        *             </li>
        *             <li>
        *                <p>If an automatic snapshot has not yet been created for the current day, and you change
        *           the snapshot time to an earlier time of day, then the new snapshot time will be effective
        *           the following day and a snapshot is automatically created at the previously set time for
        *           the current day. This ensures that a snapshot is created for the current day.</p>
        *             </li>
        *             <li>
        *                <p>If an automatic snapshot has not yet been created for the current day, and you change
        *           the snapshot time to a time that is within 30 minutes from your current time, then the new
        *           snapshot time will be effective the following day and a snapshot is automatically created
        *           at the previously set time for the current day. This ensures that a snapshot is created
        *           for the current day, because 30 minutes is required between your current time and the new
        *           snapshot time that you specify.</p>
        *             </li>
        *             <li>
        *                <p>If an automatic snapshot is scheduled to be created within 30 minutes from your
        *           current time and you change the snapshot time, then the new snapshot time will be
        *           effective the following day and a snapshot is automatically created at the previously set
        *           time for the current day. This ensures that a snapshot is created for the current day,
        *           because 30 minutes is required between your current time and the new snapshot time that
        *           you specify.</p>
        *             </li>
        *          </ul>
        */
    export interface AutoSnapshotAddOnRequest {
            /**
                * <p>The daily time when an automatic snapshot will be created.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must be in <code>HH:00</code> format, and in an hourly increment.</p>
                *             </li>
                *             <li>
                *                <p>Specified in Coordinated Universal Time (UTC).</p>
                *             </li>
                *             <li>
                *                <p>The snapshot will be automatically created between the time specified and up to 45
                *           minutes after.</p>
                *             </li>
                *          </ul>
                */
            snapshotTimeOfDay?: string;
    }
    export namespace AutoSnapshotAddOnRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoSnapshotAddOnRequest) => any;
    }
    /**
        * <p>Describes a request to enable, modify, or disable an add-on for an Amazon Lightsail
        *       resource.</p>
        *          <note>
        *             <p>An additional cost may be associated with enabling add-ons. For more information, see
        *         the <a href="https://aws.amazon.com/lightsail/pricing/">Lightsail pricing
        *         page</a>.</p>
        *          </note>
        */
    export interface AddOnRequest {
            /**
                * <p>The add-on type.</p>
                */
            addOnType: AddOnType | string | undefined;
            /**
                * <p>An object that represents additional parameters when enabling or modifying the automatic
                *       snapshot add-on.</p>
                */
            autoSnapshotAddOnRequest?: AutoSnapshotAddOnRequest;
    }
    export namespace AddOnRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddOnRequest) => any;
    }
    export enum ComparisonOperator {
            GreaterThanOrEqualToThreshold = "GreaterThanOrEqualToThreshold",
            GreaterThanThreshold = "GreaterThanThreshold",
            LessThanOrEqualToThreshold = "LessThanOrEqualToThreshold",
            LessThanThreshold = "LessThanThreshold"
    }
    export enum ContactProtocol {
            Email = "Email",
            SMS = "SMS"
    }
    export enum RegionName {
            AP_NORTHEAST_1 = "ap-northeast-1",
            AP_NORTHEAST_2 = "ap-northeast-2",
            AP_SOUTHEAST_1 = "ap-southeast-1",
            AP_SOUTHEAST_2 = "ap-southeast-2",
            AP_SOUTH_1 = "ap-south-1",
            CA_CENTRAL_1 = "ca-central-1",
            EU_CENTRAL_1 = "eu-central-1",
            EU_NORTH_1 = "eu-north-1",
            EU_WEST_1 = "eu-west-1",
            EU_WEST_2 = "eu-west-2",
            EU_WEST_3 = "eu-west-3",
            US_EAST_1 = "us-east-1",
            US_EAST_2 = "us-east-2",
            US_WEST_1 = "us-west-1",
            US_WEST_2 = "us-west-2"
    }
    /**
        * <p>Describes the resource location.</p>
        */
    export interface ResourceLocation {
            /**
                * <p>The Availability Zone. Follows the format <code>us-east-2a</code> (case-sensitive).</p>
                */
            availabilityZone?: string;
            /**
                * <p>The AWS Region name.</p>
                */
            regionName?: RegionName | string;
    }
    export namespace ResourceLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceLocation) => any;
    }
    export enum MetricName {
            BurstCapacityPercentage = "BurstCapacityPercentage",
            BurstCapacityTime = "BurstCapacityTime",
            CPUUtilization = "CPUUtilization",
            ClientTLSNegotiationErrorCount = "ClientTLSNegotiationErrorCount",
            DatabaseConnections = "DatabaseConnections",
            DiskQueueDepth = "DiskQueueDepth",
            FreeStorageSpace = "FreeStorageSpace",
            HTTPCode_Instance_2XX_Count = "HTTPCode_Instance_2XX_Count",
            HTTPCode_Instance_3XX_Count = "HTTPCode_Instance_3XX_Count",
            HTTPCode_Instance_4XX_Count = "HTTPCode_Instance_4XX_Count",
            HTTPCode_Instance_5XX_Count = "HTTPCode_Instance_5XX_Count",
            HTTPCode_LB_4XX_Count = "HTTPCode_LB_4XX_Count",
            HTTPCode_LB_5XX_Count = "HTTPCode_LB_5XX_Count",
            HealthyHostCount = "HealthyHostCount",
            InstanceResponseTime = "InstanceResponseTime",
            NetworkIn = "NetworkIn",
            NetworkOut = "NetworkOut",
            NetworkReceiveThroughput = "NetworkReceiveThroughput",
            NetworkTransmitThroughput = "NetworkTransmitThroughput",
            RejectedConnectionCount = "RejectedConnectionCount",
            RequestCount = "RequestCount",
            StatusCheckFailed = "StatusCheckFailed",
            StatusCheckFailed_Instance = "StatusCheckFailed_Instance",
            StatusCheckFailed_System = "StatusCheckFailed_System",
            UnhealthyHostCount = "UnhealthyHostCount"
    }
    export enum ResourceType {
            Alarm = "Alarm",
            Bucket = "Bucket",
            Certificate = "Certificate",
            CloudFormationStackRecord = "CloudFormationStackRecord",
            ContactMethod = "ContactMethod",
            ContainerService = "ContainerService",
            Disk = "Disk",
            DiskSnapshot = "DiskSnapshot",
            Distribution = "Distribution",
            Domain = "Domain",
            ExportSnapshotRecord = "ExportSnapshotRecord",
            Instance = "Instance",
            InstanceSnapshot = "InstanceSnapshot",
            KeyPair = "KeyPair",
            LoadBalancer = "LoadBalancer",
            LoadBalancerTlsCertificate = "LoadBalancerTlsCertificate",
            PeeredVpc = "PeeredVpc",
            RelationalDatabase = "RelationalDatabase",
            RelationalDatabaseSnapshot = "RelationalDatabaseSnapshot",
            StaticIp = "StaticIp"
    }
    /**
        * <p>Describes resource being monitored by an alarm.</p>
        *          <p>An alarm is a way to monitor your Amazon Lightsail resource metrics. For more information,
        *       see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms
        *         in Amazon Lightsail</a>.</p>
        */
    export interface MonitoredResourceInfo {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource being monitored.</p>
                */
            arn?: string;
            /**
                * <p>The name of the Lightsail resource being monitored.</p>
                */
            name?: string;
            /**
                * <p>The Lightsail resource type of the resource being monitored.</p>
                *          <p>Instances, load balancers, and relational databases are the only Lightsail resources
                *       that can currently be monitored by alarms.</p>
                */
            resourceType?: ResourceType | string;
    }
    export namespace MonitoredResourceInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonitoredResourceInfo) => any;
    }
    export enum AlarmState {
            ALARM = "ALARM",
            INSUFFICIENT_DATA = "INSUFFICIENT_DATA",
            OK = "OK"
    }
    export enum MetricStatistic {
            Average = "Average",
            Maximum = "Maximum",
            Minimum = "Minimum",
            SampleCount = "SampleCount",
            Sum = "Sum"
    }
    export enum TreatMissingData {
            Breaching = "breaching",
            Ignore = "ignore",
            Missing = "missing",
            NotBreaching = "notBreaching"
    }
    export enum MetricUnit {
            Bits = "Bits",
            BitsSecond = "Bits/Second",
            Bytes = "Bytes",
            BytesSecond = "Bytes/Second",
            Count = "Count",
            CountSecond = "Count/Second",
            Gigabits = "Gigabits",
            GigabitsSecond = "Gigabits/Second",
            Gigabytes = "Gigabytes",
            GigabytesSecond = "Gigabytes/Second",
            Kilobits = "Kilobits",
            KilobitsSecond = "Kilobits/Second",
            Kilobytes = "Kilobytes",
            KilobytesSecond = "Kilobytes/Second",
            Megabits = "Megabits",
            MegabitsSecond = "Megabits/Second",
            Megabytes = "Megabytes",
            MegabytesSecond = "Megabytes/Second",
            Microseconds = "Microseconds",
            Milliseconds = "Milliseconds",
            None = "None",
            Percent = "Percent",
            Seconds = "Seconds",
            Terabits = "Terabits",
            TerabitsSecond = "Terabits/Second",
            Terabytes = "Terabytes",
            TerabytesSecond = "Terabytes/Second"
    }
    /**
        * <p>Describes an alarm.</p>
        *          <p>An alarm is a way to monitor your Lightsail resource metrics. For more information, see
        *         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-alarms">Alarms in Amazon Lightsail</a>.</p>
        */
    export interface Alarm {
            /**
                * <p>The name of the alarm.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the alarm.</p>
                */
            arn?: string;
            /**
                * <p>The timestamp when the alarm was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>An object that lists information about the location of the alarm.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The Lightsail resource type (e.g., <code>Alarm</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The support code. Include this code in your email to support when you have questions about
                *       your Lightsail alarm. This code enables our support team to look up your Lightsail
                *       information more easily.</p>
                */
            supportCode?: string;
            /**
                * <p>An object that lists information about the resource monitored by the alarm.</p>
                */
            monitoredResourceInfo?: MonitoredResourceInfo;
            /**
                * <p>The arithmetic operation used when comparing the specified statistic and threshold.</p>
                */
            comparisonOperator?: ComparisonOperator | string;
            /**
                * <p>The number of periods over which data is compared to the specified threshold.</p>
                */
            evaluationPeriods?: number;
            /**
                * <p>The period, in seconds, over which the statistic is applied.</p>
                */
            period?: number;
            /**
                * <p>The value against which the specified statistic is compared.</p>
                */
            threshold?: number;
            /**
                * <p>The number of data points that must not within the specified threshold to trigger the
                *       alarm.</p>
                */
            datapointsToAlarm?: number;
            /**
                * <p>Specifies how the alarm handles missing data points.</p>
                *          <p>An alarm can treat missing data in the following ways:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>breaching</code> - Assume the missing data is not within the threshold. Missing
                *           data counts towards the number of times the metric is not within the threshold.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>notBreaching</code> - Assume the missing data is within the threshold. Missing
                *           data does not count towards the number of times the metric is not within the
                *           threshold.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ignore</code> - Ignore the missing data. Maintains the current alarm
                *           state.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>missing</code> - Missing data is treated as missing.</p>
                *             </li>
                *          </ul>
                */
            treatMissingData?: TreatMissingData | string;
            /**
                * <p>The statistic for the metric associated with the alarm.</p>
                *          <p>The following statistics are available:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Minimum</code> - The lowest value observed during the specified period. Use this
                *           value to determine low volumes of activity for your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Maximum</code> - The highest value observed during the specified period. Use
                *           this value to determine high volumes of activity for your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Sum</code> - All values submitted for the matching metric added together. You
                *           can use this statistic to determine the total volume of a metric.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Average</code> - The value of Sum / SampleCount during the specified period. By
                *           comparing this statistic with the Minimum and Maximum values, you can determine the full
                *           scope of a metric and how close the average use is to the Minimum and Maximum values. This
                *           comparison helps you to know when to increase or decrease your resources.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SampleCount</code> - The count, or number, of data points used for the
                *           statistical calculation.</p>
                *             </li>
                *          </ul>
                */
            statistic?: MetricStatistic | string;
            /**
                * <p>The name of the metric associated with the alarm.</p>
                */
            metricName?: MetricName | string;
            /**
                * <p>The current state of the alarm.</p>
                *          <p>An alarm has the following possible states:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ALARM</code> - The metric is outside of the defined threshold.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>INSUFFICIENT_DATA</code> - The alarm has just started, the metric is not
                *           available, or not enough data is available for the metric to determine the alarm
                *           state.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OK</code> - The metric is within the defined threshold.</p>
                *             </li>
                *          </ul>
                */
            state?: AlarmState | string;
            /**
                * <p>The unit of the metric associated with the alarm.</p>
                */
            unit?: MetricUnit | string;
            /**
                * <p>The contact protocols for the alarm, such as <code>Email</code>, <code>SMS</code> (text
                *       messaging), or both.</p>
                */
            contactProtocols?: (ContactProtocol | string)[];
            /**
                * <p>The alarm states that trigger a notification.</p>
                */
            notificationTriggers?: (AlarmState | string)[];
            /**
                * <p>Indicates whether the alarm is enabled.</p>
                */
            notificationEnabled?: boolean;
    }
    export namespace Alarm {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Alarm) => any;
    }
    export interface AllocateStaticIpRequest {
            /**
                * <p>The name of the static IP address.</p>
                */
            staticIpName: string | undefined;
    }
    export namespace AllocateStaticIpRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AllocateStaticIpRequest) => any;
    }
    export enum OperationType {
            AllocateStaticIp = "AllocateStaticIp",
            AttachCertificateToDistribution = "AttachCertificateToDistribution",
            AttachDisk = "AttachDisk",
            AttachInstancesToLoadBalancer = "AttachInstancesToLoadBalancer",
            AttachLoadBalancerTlsCertificate = "AttachLoadBalancerTlsCertificate",
            AttachStaticIp = "AttachStaticIp",
            CloseInstancePublicPorts = "CloseInstancePublicPorts",
            CreateBucket = "CreateBucket",
            CreateBucketAccessKey = "CreateBucketAccessKey",
            CreateCertificate = "CreateCertificate",
            CreateContactMethod = "CreateContactMethod",
            CreateContainerService = "CreateContainerService",
            CreateContainerServiceDeployment = "CreateContainerServiceDeployment",
            CreateContainerServiceRegistryLogin = "CreateContainerServiceRegistryLogin",
            CreateDisk = "CreateDisk",
            CreateDiskFromSnapshot = "CreateDiskFromSnapshot",
            CreateDiskSnapshot = "CreateDiskSnapshot",
            CreateDistribution = "CreateDistribution",
            CreateDomain = "CreateDomain",
            CreateInstance = "CreateInstance",
            CreateInstanceSnapshot = "CreateInstanceSnapshot",
            CreateInstancesFromSnapshot = "CreateInstancesFromSnapshot",
            CreateLoadBalancer = "CreateLoadBalancer",
            CreateLoadBalancerTlsCertificate = "CreateLoadBalancerTlsCertificate",
            CreateRelationalDatabase = "CreateRelationalDatabase",
            CreateRelationalDatabaseFromSnapshot = "CreateRelationalDatabaseFromSnapshot",
            CreateRelationalDatabaseSnapshot = "CreateRelationalDatabaseSnapshot",
            DeleteAlarm = "DeleteAlarm",
            DeleteBucket = "DeleteBucket",
            DeleteBucketAccessKey = "DeleteBucketAccessKey",
            DeleteCertificate = "DeleteCertificate",
            DeleteContactMethod = "DeleteContactMethod",
            DeleteContainerImage = "DeleteContainerImage",
            DeleteContainerService = "DeleteContainerService",
            DeleteDisk = "DeleteDisk",
            DeleteDiskSnapshot = "DeleteDiskSnapshot",
            DeleteDistribution = "DeleteDistribution",
            DeleteDomain = "DeleteDomain",
            DeleteDomainEntry = "DeleteDomainEntry",
            DeleteInstance = "DeleteInstance",
            DeleteInstanceSnapshot = "DeleteInstanceSnapshot",
            DeleteKnownHostKeys = "DeleteKnownHostKeys",
            DeleteLoadBalancer = "DeleteLoadBalancer",
            DeleteLoadBalancerTlsCertificate = "DeleteLoadBalancerTlsCertificate",
            DeleteRelationalDatabase = "DeleteRelationalDatabase",
            DeleteRelationalDatabaseSnapshot = "DeleteRelationalDatabaseSnapshot",
            DetachCertificateFromDistribution = "DetachCertificateFromDistribution",
            DetachDisk = "DetachDisk",
            DetachInstancesFromLoadBalancer = "DetachInstancesFromLoadBalancer",
            DetachStaticIp = "DetachStaticIp",
            DisableAddOn = "DisableAddOn",
            EnableAddOn = "EnableAddOn",
            GetAlarms = "GetAlarms",
            GetContactMethods = "GetContactMethods",
            OpenInstancePublicPorts = "OpenInstancePublicPorts",
            PutAlarm = "PutAlarm",
            PutInstancePublicPorts = "PutInstancePublicPorts",
            RebootInstance = "RebootInstance",
            RebootRelationalDatabase = "RebootRelationalDatabase",
            RegisterContainerImage = "RegisterContainerImage",
            ReleaseStaticIp = "ReleaseStaticIp",
            ResetDistributionCache = "ResetDistributionCache",
            SendContactMethodVerification = "SendContactMethodVerification",
            SetIpAddressType = "SetIpAddressType",
            SetResourceAccessForBucket = "SetResourceAccessForBucket",
            StartInstance = "StartInstance",
            StartRelationalDatabase = "StartRelationalDatabase",
            StopInstance = "StopInstance",
            StopRelationalDatabase = "StopRelationalDatabase",
            TestAlarm = "TestAlarm",
            UpdateBucket = "UpdateBucket",
            UpdateBucketBundle = "UpdateBucketBundle",
            UpdateContainerService = "UpdateContainerService",
            UpdateDistribution = "UpdateDistribution",
            UpdateDistributionBundle = "UpdateDistributionBundle",
            UpdateDomainEntry = "UpdateDomainEntry",
            UpdateLoadBalancerAttribute = "UpdateLoadBalancerAttribute",
            UpdateRelationalDatabase = "UpdateRelationalDatabase",
            UpdateRelationalDatabaseParameters = "UpdateRelationalDatabaseParameters"
    }
    export enum OperationStatus {
            Completed = "Completed",
            Failed = "Failed",
            NotStarted = "NotStarted",
            Started = "Started",
            Succeeded = "Succeeded"
    }
    /**
        * <p>Describes the API operation.</p>
        */
    export interface Operation {
            /**
                * <p>The ID of the operation.</p>
                */
            id?: string;
            /**
                * <p>The resource name.</p>
                */
            resourceName?: string;
            /**
                * <p>The resource type. </p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The timestamp when the operation was initialized (e.g.,
                *       <code>1479816991.349</code>).</p>
                */
            createdAt?: Date;
            /**
                * <p>The Amazon Web Services Region and Availability Zone.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>A Boolean value indicating whether the operation is terminal.</p>
                */
            isTerminal?: boolean;
            /**
                * <p>Details about the operation (e.g., <code>Debian-1GB-Ohio-1</code>).</p>
                */
            operationDetails?: string;
            /**
                * <p>The type of operation. </p>
                */
            operationType?: OperationType | string;
            /**
                * <p>The status of the operation. </p>
                */
            status?: OperationStatus | string;
            /**
                * <p>The timestamp when the status was changed (e.g., <code>1479816991.349</code>).</p>
                */
            statusChangedAt?: Date;
            /**
                * <p>The error code.</p>
                */
            errorCode?: string;
            /**
                * <p>The error details.</p>
                */
            errorDetails?: string;
    }
    export namespace Operation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Operation) => any;
    }
    export interface AllocateStaticIpResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace AllocateStaticIpResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AllocateStaticIpResult) => any;
    }
    /**
        * <p>Lightsail throws this exception when user input does not conform to the validation rules
        *       of an input field.</p>
        *          <note>
        *             <p>Domain and distribution APIs are only available in the N. Virginia
        *           (<code>us-east-1</code>) Amazon Web Services Region. Please set your Amazon Web Services
        *         Region configuration to <code>us-east-1</code> to create, view, or edit these
        *         resources.</p>
        *          </note>
        */
    export class InvalidInputException extends __BaseException {
            readonly name: "InvalidInputException";
            readonly $fault: "client";
            code?: string;
            docs?: string;
            tip?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInputException, __BaseException>);
    }
    /**
        * <p>Lightsail throws this exception when it cannot find a resource.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            code?: string;
            docs?: string;
            tip?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * <p>Lightsail throws this exception when an operation fails to execute.</p>
        */
    export class OperationFailureException extends __BaseException {
            readonly name: "OperationFailureException";
            readonly $fault: "client";
            code?: string;
            docs?: string;
            tip?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OperationFailureException, __BaseException>);
    }
    /**
        * <p>A general service exception.</p>
        */
    export class ServiceException extends __BaseException {
            readonly name: "ServiceException";
            readonly $fault: "server";
            code?: string;
            docs?: string;
            tip?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceException, __BaseException>);
    }
    /**
        * <p>Lightsail throws this exception when the user has not been authenticated.</p>
        */
    export class UnauthenticatedException extends __BaseException {
            readonly name: "UnauthenticatedException";
            readonly $fault: "client";
            code?: string;
            docs?: string;
            tip?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnauthenticatedException, __BaseException>);
    }
    export interface AttachCertificateToDistributionRequest {
            /**
                * <p>The name of the distribution that the certificate will be attached to.</p>
                *          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
                *       can specify.</p>
                */
            distributionName: string | undefined;
            /**
                * <p>The name of the certificate to attach to a distribution.</p>
                *          <p>Only certificates with a status of <code>ISSUED</code> can be attached to a
                *       distribution.</p>
                *          <p>Use the <code>GetCertificates</code> action to get a list of certificate names that you
                *       can specify.</p>
                *          <note>
                *             <p>This is the name of the certificate resource type and is used only to reference the
                *         certificate in other API actions. It can be different than the domain name of the
                *         certificate. For example, your certificate name might be
                *           <code>WordPress-Blog-Certificate</code> and the domain name of the certificate might be
                *           <code>example.com</code>.</p>
                *          </note>
                */
            certificateName: string | undefined;
    }
    export namespace AttachCertificateToDistributionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachCertificateToDistributionRequest) => any;
    }
    export interface AttachCertificateToDistributionResult {
            /**
                * <p>An object that describes the result of the action, such as the status of the request, the
                *       timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace AttachCertificateToDistributionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachCertificateToDistributionResult) => any;
    }
    export interface AttachDiskRequest {
            /**
                * <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
                */
            diskName: string | undefined;
            /**
                * <p>The name of the Lightsail instance where you want to utilize the storage disk.</p>
                */
            instanceName: string | undefined;
            /**
                * <p>The disk path to expose to the instance (e.g., <code>/dev/xvdf</code>).</p>
                */
            diskPath: string | undefined;
    }
    export namespace AttachDiskRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachDiskRequest) => any;
    }
    export interface AttachDiskResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace AttachDiskResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachDiskResult) => any;
    }
    /**
        * <p>Describes a block storage disk that is attached to an instance, and is included in an
        *       automatic snapshot.</p>
        */
    export interface AttachedDisk {
            /**
                * <p>The path of the disk (e.g., <code>/dev/xvdf</code>).</p>
                */
            path?: string;
            /**
                * <p>The size of the disk in GB.</p>
                */
            sizeInGb?: number;
    }
    export namespace AttachedDisk {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachedDisk) => any;
    }
    /**
        * <p>Describes a block storage disk mapping.</p>
        */
    export interface DiskMap {
            /**
                * <p>The original disk path exposed to the instance (for example,
                *       <code>/dev/sdh</code>).</p>
                */
            originalDiskPath?: string;
            /**
                * <p>The new disk name (e.g., <code>my-new-disk</code>).</p>
                */
            newDiskName?: string;
    }
    export namespace DiskMap {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DiskMap) => any;
    }
    export interface AttachInstancesToLoadBalancerRequest {
            /**
                * <p>The name of the load balancer.</p>
                */
            loadBalancerName: string | undefined;
            /**
                * <p>An array of strings representing the instance name(s) you want to attach to your load
                *       balancer.</p>
                *          <p>An instance must be <code>running</code> before you can attach it to your load
                *       balancer.</p>
                *          <p>There are no additional limits on the number of instances you can attach to your load
                *       balancer, aside from the limit of Lightsail instances you can create in your account
                *       (20).</p>
                */
            instanceNames: string[] | undefined;
    }
    export namespace AttachInstancesToLoadBalancerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachInstancesToLoadBalancerRequest) => any;
    }
    export interface AttachInstancesToLoadBalancerResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace AttachInstancesToLoadBalancerResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachInstancesToLoadBalancerResult) => any;
    }
    export interface AttachLoadBalancerTlsCertificateRequest {
            /**
                * <p>The name of the load balancer to which you want to associate the SSL/TLS
                *       certificate.</p>
                */
            loadBalancerName: string | undefined;
            /**
                * <p>The name of your SSL/TLS certificate.</p>
                */
            certificateName: string | undefined;
    }
    export namespace AttachLoadBalancerTlsCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachLoadBalancerTlsCertificateRequest) => any;
    }
    export interface AttachLoadBalancerTlsCertificateResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                *          <p>These SSL/TLS certificates are only usable by Lightsail load balancers. You can't get
                *       the certificate and use it for another purpose.</p>
                */
            operations?: Operation[];
    }
    export namespace AttachLoadBalancerTlsCertificateResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachLoadBalancerTlsCertificateResult) => any;
    }
    export interface AttachStaticIpRequest {
            /**
                * <p>The name of the static IP.</p>
                */
            staticIpName: string | undefined;
            /**
                * <p>The instance name to which you want to attach the static IP address.</p>
                */
            instanceName: string | undefined;
    }
    export namespace AttachStaticIpRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachStaticIpRequest) => any;
    }
    export interface AttachStaticIpResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace AttachStaticIpResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachStaticIpResult) => any;
    }
    export enum AutoSnapshotStatus {
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            NOT_FOUND = "NotFound",
            SUCCESS = "Success"
    }
    /**
        * <p>Describes an automatic snapshot.</p>
        */
    export interface AutoSnapshotDetails {
            /**
                * <p>The date of the automatic snapshot in <code>YYYY-MM-DD</code> format.</p>
                */
            date?: string;
            /**
                * <p>The timestamp when the automatic snapshot was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The status of the automatic snapshot.</p>
                */
            status?: AutoSnapshotStatus | string;
            /**
                * <p>An array of objects that describe the block storage disks attached to the instance when
                *       the automatic snapshot was created.</p>
                */
            fromAttachedDisks?: AttachedDisk[];
    }
    export namespace AutoSnapshotDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutoSnapshotDetails) => any;
    }
    /**
        * <p>Describes an Availability Zone.</p>
        */
    export interface AvailabilityZone {
            /**
                * <p>The name of the Availability Zone. The format is <code>us-east-2a</code>
                *       (case-sensitive).</p>
                */
            zoneName?: string;
            /**
                * <p>The state of the Availability Zone.</p>
                */
            state?: string;
    }
    export namespace AvailabilityZone {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AvailabilityZone) => any;
    }
    export enum BehaviorEnum {
            CacheSetting = "cache",
            DontCacheSetting = "dont-cache"
    }
    export enum InstancePlatform {
            LinuxUnix = "LINUX_UNIX",
            Windows = "WINDOWS"
    }
    export enum BlueprintType {
            app = "app",
            os = "os"
    }
    /**
        * <p>Describes a blueprint (a virtual private server image).</p>
        */
    export interface Blueprint {
            /**
                * <p>The ID for the virtual private server image (e.g., <code>app_wordpress_4_4</code> or
                *         <code>app_lamp_7_0</code>).</p>
                */
            blueprintId?: string;
            /**
                * <p>The friendly name of the blueprint (e.g., <code>Amazon Linux</code>).</p>
                */
            name?: string;
            /**
                * <p>The group name of the blueprint (e.g., <code>amazon-linux</code>).</p>
                */
            group?: string;
            /**
                * <p>The type of the blueprint (e.g., <code>os</code> or <code>app</code>).</p>
                */
            type?: BlueprintType | string;
            /**
                * <p>The description of the blueprint.</p>
                */
            description?: string;
            /**
                * <p>A Boolean value indicating whether the blueprint is active. Inactive blueprints are listed
                *       to support customers with existing instances but are not necessarily available for launch of
                *       new instances. Blueprints are marked inactive when they become outdated due to operating
                *       system updates or new application releases.</p>
                */
            isActive?: boolean;
            /**
                * <p>The minimum bundle power required to run this blueprint. For example, you need a bundle
                *       with a power value of 500 or more to create an instance that uses a blueprint with a minimum
                *       power value of 500. <code>0</code> indicates that the blueprint runs on all instance sizes.
                *     </p>
                */
            minPower?: number;
            /**
                * <p>The version number of the operating system, application, or stack (e.g.,
                *         <code>2016.03.0</code>).</p>
                */
            version?: string;
            /**
                * <p>The version code.</p>
                */
            versionCode?: string;
            /**
                * <p>The product URL to learn more about the image or blueprint.</p>
                */
            productUrl?: string;
            /**
                * <p>The end-user license agreement URL for the image or blueprint.</p>
                */
            licenseUrl?: string;
            /**
                * <p>The operating system platform (either Linux/Unix-based or Windows Server-based) of the
                *       blueprint.</p>
                */
            platform?: InstancePlatform | string;
    }
    export namespace Blueprint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Blueprint) => any;
    }
    /**
        * <p>Describes the access log configuration for a bucket in the Amazon Lightsail object storage
        *       service.</p>
        *          <p>For more information about bucket access logs, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-bucket-access-logs">Logging bucket requests using access logging in Amazon Lightsail</a> in the
        *         <i>Amazon Lightsail Developer Guide</i>.</p>
        */
    export interface BucketAccessLogConfig {
            /**
                * <p>A Boolean value that indicates whether bucket access logging is enabled for the
                *       bucket.</p>
                */
            enabled: boolean | undefined;
            /**
                * <p>The name of the bucket where the access logs are saved. The destination can be a
                *       Lightsail bucket in the same account, and in the same Amazon Web Services Region as the
                *       source bucket.</p>
                *          <note>
                *             <p>This parameter is required when enabling the access log for a bucket, and should be
                *         omitted when disabling the access log.</p>
                *          </note>
                */
            destination?: string;
            /**
                * <p>The optional object prefix for the bucket access log.</p>
                *          <p>The prefix is an optional addition to the object key that organizes your access log files
                *       in the destination bucket. For example, if you specify a <code>logs/</code> prefix, then each
                *       log object will begin with the <code>logs/</code> prefix in its key (for example,
                *         <code>logs/2021-11-01-21-32-16-E568B2907131C0C0</code>).</p>
                *          <note>
                *             <p>This parameter can be optionally specified when enabling the access log for a bucket,
                *         and should be omitted when disabling the access log.</p>
                *          </note>
                */
            prefix?: string;
    }
    export namespace BucketAccessLogConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BucketAccessLogConfig) => any;
    }
    /**
        * <p>Describes the state of an Amazon Lightsail bucket.</p>
        */
    export interface BucketState {
            /**
                * <p>The state code of the bucket.</p>
                *
                *          <p>The following codes are possible:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>OK</code> - The bucket is in a running state.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Unknown</code> - Creation of the bucket might have timed-out. You might want to
                *           delete the bucket and create a new one.</p>
                *             </li>
                *          </ul>
                */
            code?: string;
            /**
                * <p>A message that describes the state of the bucket.</p>
                */
            message?: string;
    }
    export namespace BucketState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BucketState) => any;
    }
    /**
        * <p>Describes a tag key and optional value assigned to an Amazon Lightsail resource.</p>
        *          <p>For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
        */
    export interface Tag {
            /**
                * <p>The key of the tag.</p>
                *          <p>Constraints: Tag keys accept a maximum of 128 letters, numbers, spaces in UTF-8, or the
                *       following characters: + - = . _ : / @</p>
                */
            key?: string;
            /**
                * <p>The value of the tag.</p>
                *          <p>Constraints: Tag values accept a maximum of 256 letters, numbers, spaces in UTF-8, or the
                *       following characters: + - = . _ : / @</p>
                */
            value?: string;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>Describes an Amazon Lightsail bucket.</p>
        */
    export interface Bucket {
            /**
                * <p>The Lightsail resource type of the bucket (for example, <code>Bucket</code>).</p>
                */
            resourceType?: string;
            /**
                * <p>An object that describes the access rules of the bucket.</p>
                */
            accessRules?: AccessRules;
            /**
                * <p>The Amazon Resource Name (ARN) of the bucket.</p>
                */
            arn?: string;
            /**
                * <p>The ID of the bundle currently applied to the bucket.</p>
                *
                *          <p>A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a
                *       bucket.</p>
                *
                *          <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to change the
                *       bundle of a bucket.</p>
                */
            bundleId?: string;
            /**
                * <p>The timestamp when the distribution was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The URL of the bucket.</p>
                */
            url?: string;
            /**
                * <p>An object that describes the location of the bucket, such as the Amazon Web Services Region
                *       and Availability Zone.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The name of the bucket.</p>
                */
            name?: string;
            /**
                * <p>The support code for a bucket. Include this code in your email to support when you have
                *       questions about a Lightsail bucket. This code enables our support team to look up your
                *       Lightsail information more easily.</p>
                */
            supportCode?: string;
            /**
                * <p>The tag keys and optional values for the bucket. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en/articles/amazon-lightsail-tags">Tags in
                *         Amazon Lightsail</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
                */
            tags?: Tag[];
            /**
                * <p>Indicates whether object versioning is enabled for the bucket.</p>
                *
                *          <p>The following options can be configured:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Enabled</code> - Object versioning is enabled.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Suspended</code> - Object versioning was previously enabled but is currently
                *           suspended. Existing object versions are retained.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NeverEnabled</code> - Object versioning has never been enabled.</p>
                *             </li>
                *          </ul>
                */
            objectVersioning?: string;
            /**
                * <p>Indicates whether the bundle that is currently applied to a bucket can be changed to
                *       another bundle.</p>
                *
                *          <p>You can update a bucket's bundle only one time within a monthly Amazon Web Services billing
                *       cycle.</p>
                *
                *          <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to change a
                *       bucket's bundle.</p>
                */
            ableToUpdateBundle?: boolean;
            /**
                * <p>An array of strings that specify the Amazon Web Services account IDs that have read-only
                *       access to the bucket.</p>
                */
            readonlyAccessAccounts?: string[];
            /**
                * <p>An array of objects that describe Lightsail instances that have access to the
                *       bucket.</p>
                *
                *          <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html">SetResourceAccessForBucket</a>
                *       action to update the instances that have access to a bucket.</p>
                */
            resourcesReceivingAccess?: ResourceReceivingAccess[];
            /**
                * <p>An object that describes the state of the bucket.</p>
                */
            state?: BucketState;
            /**
                * <p>An object that describes the access log configuration for the bucket.</p>
                */
            accessLogConfig?: BucketAccessLogConfig;
    }
    export namespace Bucket {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Bucket) => any;
    }
    /**
        * <p>Describes the specifications of a bundle that can be applied to an Amazon Lightsail
        *       bucket.</p>
        *
        *          <p>A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a
        *       bucket.</p>
        */
    export interface BucketBundle {
            /**
                * <p>The ID of the bundle.</p>
                */
            bundleId?: string;
            /**
                * <p>The name of the bundle.</p>
                */
            name?: string;
            /**
                * <p>The monthly price of the bundle, in US dollars.</p>
                */
            price?: number;
            /**
                * <p>The storage size of the bundle, in GB.</p>
                */
            storagePerMonthInGb?: number;
            /**
                * <p>The monthly network transfer quota of the bundle.</p>
                */
            transferPerMonthInGb?: number;
            /**
                * <p>Indicates whether the bundle is active. Use for a new or existing bucket.</p>
                */
            isActive?: boolean;
    }
    export namespace BucketBundle {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BucketBundle) => any;
    }
    export enum BucketMetricName {
            BucketSizeBytes = "BucketSizeBytes",
            NumberOfObjects = "NumberOfObjects"
    }
    /**
        * <p>Describes a bundle, which is a set of specs describing your virtual private server (or
        *         <i>instance</i>).</p>
        */
    export interface Bundle {
            /**
                * <p>The price in US dollars (e.g., <code>5.0</code>) of the bundle.</p>
                */
            price?: number;
            /**
                * <p>The number of vCPUs included in the bundle (e.g., <code>2</code>).</p>
                */
            cpuCount?: number;
            /**
                * <p>The size of the SSD (e.g., <code>30</code>).</p>
                */
            diskSizeInGb?: number;
            /**
                * <p>The bundle ID (e.g., <code>micro_1_0</code>).</p>
                */
            bundleId?: string;
            /**
                * <p>The Amazon EC2 instance type (e.g., <code>t2.micro</code>).</p>
                */
            instanceType?: string;
            /**
                * <p>A Boolean value indicating whether the bundle is active.</p>
                */
            isActive?: boolean;
            /**
                * <p>A friendly name for the bundle (e.g., <code>Micro</code>).</p>
                */
            name?: string;
            /**
                * <p>A numeric value that represents the power of the bundle (e.g., <code>500</code>). You can
                *       use the bundle's power value in conjunction with a blueprint's minimum power value to
                *       determine whether the blueprint will run on the bundle. For example, you need a bundle with a
                *       power value of 500 or more to create an instance that uses a blueprint with a minimum power
                *       value of 500.</p>
                */
            power?: number;
            /**
                * <p>The amount of RAM in GB (e.g., <code>2.0</code>).</p>
                */
            ramSizeInGb?: number;
            /**
                * <p>The data transfer rate per month in GB (e.g., <code>2000</code>).</p>
                */
            transferPerMonthInGb?: number;
            /**
                * <p>The operating system platform (Linux/Unix-based or Windows Server-based) that the bundle
                *       supports. You can only launch a <code>WINDOWS</code> bundle on a blueprint that supports the
                *         <code>WINDOWS</code> platform. <code>LINUX_UNIX</code> blueprints require a
                *         <code>LINUX_UNIX</code> bundle.</p>
                */
            supportedPlatforms?: (InstancePlatform | string)[];
    }
    export namespace Bundle {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Bundle) => any;
    }
    /**
        * <p>Describes the default cache behavior of an Amazon Lightsail content delivery network (CDN)
        *       distribution.</p>
        */
    export interface CacheBehavior {
            /**
                * <p>The cache behavior of the distribution.</p>
                *          <p>The following cache behaviors can be specified:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>cache</code>
                *                   </b> - This option is best for static
                *           sites. When specified, your distribution caches and serves your entire website as static
                *           content. This behavior is ideal for websites with static content that doesn't change
                *           depending on who views it, or for websites that don't use cookies, headers, or query
                *           strings to personalize content.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>dont-cache</code>
                *                   </b> - This option is best for
                *           sites that serve a mix of static and dynamic content. When specified, your distribution
                *           caches and serve only the content that is specified in the distribution's
                *             <code>CacheBehaviorPerPath</code> parameter. This behavior is ideal for websites or web
                *           applications that use cookies, headers, and query strings to personalize content for
                *           individual users.</p>
                *             </li>
                *          </ul>
                */
            behavior?: BehaviorEnum | string;
    }
    export namespace CacheBehavior {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CacheBehavior) => any;
    }
    /**
        * <p>Describes the per-path cache behavior of an Amazon Lightsail content delivery network (CDN)
        *       distribution.</p>
        *          <p>A per-path cache behavior is used to override, or add an exception to, the default cache
        *       behavior of a distribution. For example, if the <code>cacheBehavior</code> is set to
        *         <code>cache</code>, then a per-path cache behavior can be used to specify a directory, file,
        *       or file type that your distribution will cache. Alternately, if the distribution's
        *         <code>cacheBehavior</code> is <code>dont-cache</code>, then a per-path cache behavior can be
        *       used to specify a directory, file, or file type that your distribution will not cache.</p>
        */
    export interface CacheBehaviorPerPath {
            /**
                * <p>The path to a directory or file to cached, or not cache. Use an asterisk symbol to specify
                *       wildcard directories (<code>path/to/assets/*</code>), and file types (<code>*.html, *jpg,
                *         *js</code>). Directories and file paths are case-sensitive.</p>
                *          <p>Examples:</p>
                *          <ul>
                *             <li>
                *                <p>Specify the following to cache all files in the document root of an Apache web server
                *           running on a Lightsail instance.</p>
                *                <p>
                *                   <code>var/www/html/</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Specify the following file to cache only the index page in the document root of an
                *           Apache web server.</p>
                *                <p>
                *                   <code>var/www/html/index.html</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Specify the following to cache only the .html files in the document root of an Apache
                *           web server.</p>
                *                <p>
                *                   <code>var/www/html/*.html</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Specify the following to cache only the .jpg, .png, and .gif files in the images
                *           sub-directory of the document root of an Apache web server.</p>
                *                <p>
                *                   <code>var/www/html/images/*.jpg</code>
                *                </p>
                *                <p>
                *                   <code>var/www/html/images/*.png</code>
                *                </p>
                *                <p>
                *                   <code>var/www/html/images/*.gif</code>
                *                </p>
                *                <p>Specify the following to cache all files in the images sub-directory of the document
                *           root of an Apache web server.</p>
                *                <p>
                *                   <code>var/www/html/images/</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            path?: string;
            /**
                * <p>The cache behavior for the specified path.</p>
                *          <p>You can specify one of the following per-path cache behaviors:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>cache</code>
                *                   </b> - This behavior caches the
                *           specified path. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>dont-cache</code>
                *                   </b> - This behavior doesn't cache
                *           the specified path. </p>
                *             </li>
                *          </ul>
                */
            behavior?: BehaviorEnum | string;
    }
    export namespace CacheBehaviorPerPath {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CacheBehaviorPerPath) => any;
    }
    export enum ForwardValues {
            all = "all",
            allowList = "allow-list",
            none = "none"
    }
    /**
        * <p>Describes whether an Amazon Lightsail content delivery network (CDN) distribution forwards
        *       cookies to the origin and, if so, which ones.</p>
        *          <p>For the cookies that you specify, your distribution caches separate versions of the
        *       specified content based on the cookie values in viewer
        *       requests.</p>
        */
    export interface CookieObject {
            /**
                * <p>Specifies which cookies to forward to the distribution's origin for a cache behavior:
                *         <code>all</code>, <code>none</code>, or <code>allow-list</code> to forward only the cookies
                *       specified in the <code>cookiesAllowList</code> parameter.</p>
                */
            option?: ForwardValues | string;
            /**
                * <p>The specific cookies to forward to your distribution's origin.</p>
                */
            cookiesAllowList?: string[];
    }
    export namespace CookieObject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CookieObject) => any;
    }
    export enum HeaderEnum {
            accept = "Accept",
            acceptCharset = "Accept-Charset",
            acceptDatetime = "Accept-Datetime",
            acceptEncoding = "Accept-Encoding",
            acceptLanguage = "Accept-Language",
            authorization = "Authorization",
            cloudFrontForwardedProto = "CloudFront-Forwarded-Proto",
            cloudFrontIsDesktopViewer = "CloudFront-Is-Desktop-Viewer",
            cloudFrontIsMobileViewer = "CloudFront-Is-Mobile-Viewer",
            cloudFrontIsSmartTVViewer = "CloudFront-Is-SmartTV-Viewer",
            cloudFrontIsTabletViewer = "CloudFront-Is-Tablet-Viewer",
            cloudFrontViewerCountry = "CloudFront-Viewer-Country",
            host = "Host",
            origin = "Origin",
            referer = "Referer"
    }
    /**
        * <p>Describes the request headers that a Lightsail distribution bases caching on.</p>
        *          <p>For the headers that you specify, your distribution caches separate versions of the
        *       specified content based on the header values in viewer requests. For example, suppose viewer
        *       requests for <code>logo.jpg</code> contain a custom <code>product</code> header that has a
        *       value of either <code>acme</code> or <code>apex</code>, and you configure your distribution to
        *       cache your content based on values in the <code>product</code> header. Your distribution
        *       forwards the <code>product</code> header to the origin and caches the response from the origin
        *       once for each header value.
        *       </p>
        */
    export interface HeaderObject {
            /**
                * <p>The headers that you want your distribution to forward to your origin and base caching
                *       on.</p>
                *          <p>You can configure your distribution to do one of the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>all</code>
                *                   </b> - Forward all headers to your
                *           origin.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>none</code>
                *                   </b> - Forward only the default
                *           headers.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>allow-list</code>
                *                   </b> - Forward only the headers
                *           you specify using the <code>headersAllowList</code> parameter.</p>
                *             </li>
                *          </ul>
                */
            option?: ForwardValues | string;
            /**
                * <p>The specific headers to forward to your distribution's origin.</p>
                */
            headersAllowList?: (HeaderEnum | string)[];
    }
    export namespace HeaderObject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HeaderObject) => any;
    }
    /**
        * <p>Describes the query string parameters that an Amazon Lightsail content delivery network
        *       (CDN) distribution to bases caching on.</p>
        *          <p>For the query strings that you specify, your distribution caches separate versions of the
        *       specified content based on the query string values in viewer
        *       requests.</p>
        */
    export interface QueryStringObject {
            /**
                * <p>Indicates whether the distribution forwards and caches based on query strings.</p>
                */
            option?: boolean;
            /**
                * <p>The specific query strings that the distribution forwards to the origin.</p>
                *          <p>Your distribution will cache content based on the specified query strings.</p>
                *          <p>If the <code>option</code> parameter is true, then your distribution forwards all query
                *       strings, regardless of what you specify using the <code>queryStringsAllowList</code>
                *       parameter.</p>
                */
            queryStringsAllowList?: string[];
    }
    export namespace QueryStringObject {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryStringObject) => any;
    }
    /**
        * <p>Describes the cache settings of an Amazon Lightsail content delivery network (CDN)
        *       distribution.</p>
        *          <p>These settings apply only to your distribution's <code>cacheBehaviors</code> (including
        *       the <code>defaultCacheBehavior</code>) that have a <code>behavior</code> of
        *       <code>cache</code>.</p>
        */
    export interface CacheSettings {
            /**
                * <p>The default amount of time that objects stay in the distribution's cache before the
                *       distribution forwards another request to the origin to determine whether the content has been
                *       updated.</p>
                *          <note>
                *             <p>The value specified applies only when the origin does not add HTTP headers such as
                *           <code>Cache-Control max-age</code>, <code>Cache-Control s-maxage</code>, and
                *           <code>Expires</code> to objects.</p>
                *          </note>
                */
            defaultTTL?: number;
            /**
                * <p>The minimum amount of time that objects stay in the distribution's cache before the
                *       distribution forwards another request to the origin to determine whether the object has been
                *       updated.</p>
                *          <p>A value of <code>0</code> must be specified for <code>minimumTTL</code> if the
                *       distribution is configured to forward all headers to the origin.</p>
                */
            minimumTTL?: number;
            /**
                * <p>The maximum amount of time that objects stay in the distribution's cache before the
                *       distribution forwards another request to the origin to determine whether the object has been
                *       updated.</p>
                *          <p>The value specified applies only when the origin adds HTTP headers such as
                *         <code>Cache-Control max-age</code>, <code>Cache-Control s-maxage</code>, and
                *         <code>Expires</code> to objects.</p>
                */
            maximumTTL?: number;
            /**
                * <p>The HTTP methods that are processed and forwarded to the distribution's origin.</p>
                *          <p>You can specify the following options:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>GET,HEAD</code> - The distribution forwards the <code>GET</code> and
                *             <code>HEAD</code> methods.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>GET,HEAD,OPTIONS</code> - The distribution forwards the <code>GET</code>,
                *             <code>HEAD</code>, and <code>OPTIONS</code> methods.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>GET,HEAD,OPTIONS,PUT,PATCH,POST,DELETE</code> - The distribution forwards the
                *             <code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code>, <code>PUT</code>,
                *             <code>PATCH</code>, <code>POST</code>, and <code>DELETE</code> methods.</p>
                *             </li>
                *          </ul>
                *          <p>If you specify the third option, you might need to restrict access to your distribution's
                *       origin so users can't perform operations that you don't want them to. For example, you might
                *       not want users to have permission to delete objects from your origin.</p>
                */
            allowedHTTPMethods?: string;
            /**
                * <p>The HTTP method responses that are cached by your distribution.</p>
                *          <p>You can specify the following options:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>GET,HEAD</code> - The distribution caches responses to the <code>GET</code> and
                *             <code>HEAD</code> methods.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>GET,HEAD,OPTIONS</code> - The distribution caches responses to the
                *             <code>GET</code>, <code>HEAD</code>, and <code>OPTIONS</code> methods.</p>
                *             </li>
                *          </ul>
                */
            cachedHTTPMethods?: string;
            /**
                * <p>An object that describes the cookies that are forwarded to the origin. Your content is
                *       cached based on the cookies that are forwarded.</p>
                */
            forwardedCookies?: CookieObject;
            /**
                * <p>An object that describes the headers that are forwarded to the origin. Your content is
                *       cached based on the headers that are forwarded.</p>
                */
            forwardedHeaders?: HeaderObject;
            /**
                * <p>An object that describes the query strings that are forwarded to the origin. Your content
                *       is cached based on the query strings that are forwarded.</p>
                */
            forwardedQueryStrings?: QueryStringObject;
    }
    export namespace CacheSettings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CacheSettings) => any;
    }
    /**
        * <p>Describes the domain name system (DNS) records to add to your domain's DNS to validate it
        *       for an Amazon Lightsail certificate.</p>
        */
    export interface ResourceRecord {
            /**
                * <p>The name of the record.</p>
                */
            name?: string;
            /**
                * <p>The DNS record type.</p>
                */
            type?: string;
            /**
                * <p>The value for the DNS record.</p>
                */
            value?: string;
    }
    export namespace ResourceRecord {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceRecord) => any;
    }
    /**
        * <p>Describes the domain validation records of an Amazon Lightsail SSL/TLS certificate.</p>
        */
    export interface DomainValidationRecord {
            /**
                * <p>The domain name of the certificate validation record. For example,
                *         <code>example.com</code> or <code>www.example.com</code>.</p>
                */
            domainName?: string;
            /**
                * <p>An object that describes the DNS records to add to your domain's DNS to validate it for
                *       the certificate.</p>
                */
            resourceRecord?: ResourceRecord;
    }
    export namespace DomainValidationRecord {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainValidationRecord) => any;
    }
    export enum RenewalStatus {
            Failed = "Failed",
            PendingAutoRenewal = "PendingAutoRenewal",
            PendingValidation = "PendingValidation",
            Success = "Success"
    }
    /**
        * <p>Describes the status of a SSL/TLS certificate renewal managed by Amazon Lightsail.</p>
        */
    export interface RenewalSummary {
            /**
                * <p>An array of objects that describe the domain validation records of the certificate.</p>
                */
            domainValidationRecords?: DomainValidationRecord[];
            /**
                * <p>The renewal status of the certificate.</p>
                *          <p>The following renewal status are possible:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>PendingAutoRenewal</code>
                *                   </b> - Lightsail is
                *           attempting to automatically validate the domain names of the certificate. No further
                *           action is required. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>PendingValidation</code>
                *                   </b> - Lightsail couldn't
                *           automatically validate one or more domain names of the certificate. You must take action
                *           to validate these domain names or the certificate won't be renewed. Check to make sure
                *           your certificate's domain validation records exist in your domain's DNS, and that your
                *           certificate remains in use.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Success</code>
                *                   </b> - All domain names in the
                *           certificate are validated, and Lightsail renewed the certificate. No further action is
                *           required. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Failed</code>
                *                   </b> - One or more domain names were
                *           not validated before the certificate expired, and Lightsail did not renew the
                *           certificate. You can request a new certificate using the <code>CreateCertificate</code>
                *           action.</p>
                *             </li>
                *          </ul>
                */
            renewalStatus?: RenewalStatus | string;
            /**
                * <p>The reason for the renewal status of the certificate.</p>
                */
            renewalStatusReason?: string;
            /**
                * <p>The timestamp when the certificate was last updated.</p>
                */
            updatedAt?: Date;
    }
    export namespace RenewalSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RenewalSummary) => any;
    }
    export enum CertificateStatus {
            Expired = "EXPIRED",
            Failed = "FAILED",
            Inactive = "INACTIVE",
            Issued = "ISSUED",
            PendingValidation = "PENDING_VALIDATION",
            Revoked = "REVOKED",
            ValidationTimedOut = "VALIDATION_TIMED_OUT"
    }
    /**
        * <p>Describes the full details of an Amazon Lightsail SSL/TLS certificate.</p>
        *          <note>
        *             <p>To get a summary of a certificate, use the <code>GetCertificates</code> action and ommit
        *           <code>includeCertificateDetails</code> from your request. The response will include only
        *         the certificate Amazon Resource Name (ARN), certificate name, domain name, and tags.</p>
        *          </note>
        */
    export interface Certificate {
            /**
                * <p>The Amazon Resource Name (ARN) of the certificate.</p>
                */
            arn?: string;
            /**
                * <p>The name of the certificate (e.g., <code>my-certificate</code>).</p>
                */
            name?: string;
            /**
                * <p>The domain name of the certificate.</p>
                */
            domainName?: string;
            /**
                * <p>The validation status of the certificate.</p>
                */
            status?: CertificateStatus | string;
            /**
                * <p>The serial number of the certificate.</p>
                */
            serialNumber?: string;
            /**
                * <p>An array of strings that specify the alternate domains (e.g., <code>example2.com</code>)
                *       and subdomains (e.g., <code>blog.example.com</code>) of the certificate.</p>
                */
            subjectAlternativeNames?: string[];
            /**
                * <p>An array of objects that describe the domain validation records of the certificate.</p>
                */
            domainValidationRecords?: DomainValidationRecord[];
            /**
                * <p>The validation failure reason, if any, of the certificate.</p>
                *          <p>The following failure reasons are possible:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>NO_AVAILABLE_CONTACTS</code>
                *                   </b> - This failure
                *           applies to email validation, which is not available for Lightsail certificates.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>ADDITIONAL_VERIFICATION_REQUIRED</code>
                *                   </b> -
                *           Lightsail requires additional information to process this certificate request. This can
                *           happen as a fraud-protection measure, such as when the domain ranks within the Alexa top
                *           1000 websites. To provide the required information, use the <a href="https://console.aws.amazon.com/support/home">AWS Support Center</a> to contact
                *           AWS Support.</p>
                *                <note>
                *                   <p>You cannot request a certificate for Amazon-owned domain names such as those ending
                *             in amazonaws.com, cloudfront.net, or elasticbeanstalk.com.</p>
                *                </note>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>DOMAIN_NOT_ALLOWED</code>
                *                   </b> - One or more of the
                *           domain names in the certificate request was reported as an unsafe domain by <a href="https://www.virustotal.com/gui/home/url">VirusTotal</a>. To correct the
                *           problem, search for your domain name on the <a href="https://www.virustotal.com/gui/home/url">VirusTotal</a> website. If your domain
                *           is reported as suspicious, see <a href="https://developers.google.com/web/fundamentals/security/hacked">Google Help for
                *             Hacked Websites</a> to learn what you can do.</p>
                *                <p>If you believe that the result is a false positive, notify the organization that is
                *           reporting the domain. VirusTotal is an aggregate of several antivirus and URL scanners and
                *           cannot remove your domain from a block list itself. After you correct the problem and the
                *           VirusTotal registry has been updated, request a new certificate.</p>
                *                <p>If you see this error and your domain is not included in the VirusTotal list, visit
                *           the <a href="https://console.aws.amazon.com/support/home">AWS Support Center</a>
                *           and create a case.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>INVALID_PUBLIC_DOMAIN</code>
                *                   </b> - One or more of
                *           the domain names in the certificate request is not valid. Typically, this is because a
                *           domain name in the request is not a valid top-level domain. Try to request a certificate
                *           again, correcting any spelling errors or typos that were in the failed request, and ensure
                *           that all domain names in the request are for valid top-level domains. For example, you
                *           cannot request a certificate for <code>example.invalidpublicdomain</code> because
                *             <code>invalidpublicdomain</code> is not a valid top-level domain.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>OTHER</code>
                *                   </b> - Typically, this failure occurs
                *           when there is a typographical error in one or more of the domain names in the certificate
                *           request. Try to request a certificate again, correcting any spelling errors or typos that
                *           were in the failed request. </p>
                *             </li>
                *          </ul>
                */
            requestFailureReason?: string;
            /**
                * <p>The number of Lightsail resources that the certificate is attached to.</p>
                */
            inUseResourceCount?: number;
            /**
                * <p>The algorithm used to generate the key pair (the public and private key) of the
                *       certificate.</p>
                */
            keyAlgorithm?: string;
            /**
                * <p>The timestamp when the certificate was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The timestamp when the certificate was issued.</p>
                */
            issuedAt?: Date;
            /**
                * <p>The certificate authority that issued the certificate.</p>
                */
            issuerCA?: string;
            /**
                * <p>The timestamp when the certificate is first valid.</p>
                */
            notBefore?: Date;
            /**
                * <p>The timestamp when the certificate expires.</p>
                */
            notAfter?: Date;
            /**
                * <p>The renewal eligibility of the certificate.</p>
                */
            eligibleToRenew?: string;
            /**
                * <p>An object that describes the status of the certificate renewal managed by
                *       Lightsail.</p>
                */
            renewalSummary?: RenewalSummary;
            /**
                * <p>The timestamp when the certificate was revoked. This value is present only when the
                *       certificate status is <code>REVOKED</code>.</p>
                */
            revokedAt?: Date;
            /**
                * <p>The reason the certificate was revoked. This value is present only when the certificate
                *       status is <code>REVOKED</code>.</p>
                */
            revocationReason?: string;
            /**
                * <p>The tag keys and optional values for the resource. For more information about tags in
                *       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
            /**
                * <p>The support code. Include this code in your email to support when you have questions about
                *       your Lightsail certificate. This code enables our support team to look up your Lightsail
                *       information more easily.</p>
                */
            supportCode?: string;
    }
    export namespace Certificate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Certificate) => any;
    }
    /**
        * <p>Describes an Amazon Lightsail SSL/TLS certificate.</p>
        */
    export interface CertificateSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the certificate.</p>
                */
            certificateArn?: string;
            /**
                * <p>The name of the certificate.</p>
                */
            certificateName?: string;
            /**
                * <p>The domain name of the certificate.</p>
                */
            domainName?: string;
            /**
                * <p>An object that describes a certificate in detail.</p>
                */
            certificateDetail?: Certificate;
            /**
                * <p>The tag keys and optional values for the resource. For more information about tags in
                *       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
    }
    export namespace CertificateSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CertificateSummary) => any;
    }
    export enum NetworkProtocol {
            ALL = "all",
            ICMP = "icmp",
            TCP = "tcp",
            UDP = "udp"
    }
    /**
        * <p>Describes ports to open on an instance, the IP addresses allowed to connect to the
        *       instance through the ports, and the protocol.</p>
        */
    export interface PortInfo {
            /**
                * <p>The first port in a range of open ports on an instance.</p>
                *          <p>Allowed ports:</p>
                *          <ul>
                *             <li>
                *                <p>TCP and UDP - <code>0</code> to <code>65535</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>ICMP - The ICMP type for IPv4 addresses. For example, specify <code>8</code> as the
                *             <code>fromPort</code> (ICMP type), and <code>-1</code> as the <code>toPort</code> (ICMP
                *           code), to enable ICMP Ping. For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages">Control Messages</a> on <i>Wikipedia</i>.</p>
                *             </li>
                *             <li>
                *                <p>ICMPv6 - The ICMP type for IPv6 addresses. For example, specify <code>128</code> as
                *           the <code>fromPort</code> (ICMPv6 type), and <code>0</code> as <code>toPort</code> (ICMPv6
                *           code). For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6">Internet
                *             Control Message Protocol for IPv6</a>.</p>
                *             </li>
                *          </ul>
                */
            fromPort?: number;
            /**
                * <p>The last port in a range of open ports on an instance.</p>
                *          <p>Allowed ports:</p>
                *          <ul>
                *             <li>
                *                <p>TCP and UDP - <code>0</code> to <code>65535</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>ICMP - The ICMP code for IPv4 addresses. For example, specify <code>8</code> as the
                *             <code>fromPort</code> (ICMP type), and <code>-1</code> as the <code>toPort</code> (ICMP
                *           code), to enable ICMP Ping. For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages">Control Messages</a> on <i>Wikipedia</i>.</p>
                *             </li>
                *             <li>
                *                <p>ICMPv6 - The ICMP code for IPv6 addresses. For example, specify <code>128</code> as
                *           the <code>fromPort</code> (ICMPv6 type), and <code>0</code> as <code>toPort</code> (ICMPv6
                *           code). For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6">Internet
                *             Control Message Protocol for IPv6</a>.</p>
                *             </li>
                *          </ul>
                */
            toPort?: number;
            /**
                * <p>The IP protocol name.</p>
                *          <p>The name can be one of the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>tcp</code> - Transmission Control Protocol (TCP) provides reliable, ordered, and
                *           error-checked delivery of streamed data between applications running on hosts
                *           communicating by an IP network. If you have an application that doesn't require reliable
                *           data stream service, use UDP instead.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>all</code> - All transport layer protocol types. For more general information,
                *           see <a href="https://en.wikipedia.org/wiki/Transport_layer">Transport layer</a> on
                *             <i>Wikipedia</i>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>udp</code> - With User Datagram Protocol (UDP), computer applications can send
                *           messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior
                *           communications are not required to set up transmission channels or data paths.
                *           Applications that don't require reliable data stream service can use UDP, which provides a
                *           connectionless datagram service that emphasizes reduced latency over reliability. If you
                *           do require reliable data stream service, use TCP instead.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>icmp</code> - Internet Control Message Protocol (ICMP) is used to send error
                *           messages and operational information indicating success or failure when communicating with
                *           an instance. For example, an error is indicated when an instance could not be reached.
                *           When you specify <code>icmp</code> as the <code>protocol</code>, you must specify the ICMP
                *           type using the <code>fromPort</code> parameter, and ICMP code using the
                *             <code>toPort</code> parameter.</p>
                *             </li>
                *          </ul>
                */
            protocol?: NetworkProtocol | string;
            /**
                * <p>The IPv4 address, or range of IPv4 addresses (in CIDR notation) that are allowed to
                *       connect to an instance through the ports, and the protocol.</p>
                *          <note>
                *             <p>The <code>ipv6Cidrs</code> parameter lists the IPv6 addresses that are allowed to
                *         connect to an instance.</p>
                *          </note>
                *          <p>Examples:</p>
                *          <ul>
                *             <li>
                *                <p>To allow the IP address <code>192.0.2.44</code>, specify <code>192.0.2.44</code> or
                *             <code>192.0.2.44/32</code>. </p>
                *             </li>
                *             <li>
                *                <p>To allow the IP addresses <code>192.0.2.0</code> to <code>192.0.2.255</code>, specify
                *             <code>192.0.2.0/24</code>.</p>
                *             </li>
                *          </ul>
                *          <p>For more information about CIDR block notation, see <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation">Classless
                *         Inter-Domain Routing</a> on <i>Wikipedia</i>.</p>
                */
            cidrs?: string[];
            /**
                * <p>The IPv6 address, or range of IPv6 addresses (in CIDR notation) that are allowed to
                *       connect to an instance through the ports, and the protocol. Only devices with an IPv6 address
                *       can connect to an instance through IPv6; otherwise, IPv4 should be used.</p>
                *          <note>
                *             <p>The <code>cidrs</code> parameter lists the IPv4 addresses that are allowed to connect to
                *         an instance.</p>
                *          </note>
                *          <p>For more information about CIDR block notation, see <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation">Classless
                *         Inter-Domain Routing</a> on <i>Wikipedia</i>.</p>
                */
            ipv6Cidrs?: string[];
            /**
                * <p>An alias that defines access for a preconfigured range of IP addresses.</p>
                *          <p>The only alias currently supported is <code>lightsail-connect</code>, which allows IP
                *       addresses of the browser-based RDP/SSH client in the Lightsail console to connect to your
                *       instance.</p>
                */
            cidrListAliases?: string[];
    }
    export namespace PortInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PortInfo) => any;
    }
    export interface CloseInstancePublicPortsRequest {
            /**
                * <p>An object to describe the ports to close for the specified instance.</p>
                */
            portInfo: PortInfo | undefined;
            /**
                * <p>The name of the instance for which to close ports.</p>
                */
            instanceName: string | undefined;
    }
    export namespace CloseInstancePublicPortsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloseInstancePublicPortsRequest) => any;
    }
    export interface CloseInstancePublicPortsResult {
            /**
                * <p>An object that describes the result of the action, such as the status of the request, the
                *       timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace CloseInstancePublicPortsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloseInstancePublicPortsResult) => any;
    }
    /**
        * <p>Describes the destination of a record.</p>
        */
    export interface DestinationInfo {
            /**
                * <p>The ID of the resource created at the destination.</p>
                */
            id?: string;
            /**
                * <p>The destination service of the record.</p>
                */
            service?: string;
    }
    export namespace DestinationInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DestinationInfo) => any;
    }
    export enum CloudFormationStackRecordSourceType {
            ExportSnapshotRecord = "ExportSnapshotRecord"
    }
    /**
        * <p>Describes the source of a CloudFormation stack record (i.e., the export snapshot
        *       record).</p>
        */
    export interface CloudFormationStackRecordSourceInfo {
            /**
                * <p>The Lightsail resource type (e.g., <code>ExportSnapshotRecord</code>).</p>
                */
            resourceType?: CloudFormationStackRecordSourceType | string;
            /**
                * <p>The name of the record.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the export snapshot record.</p>
                */
            arn?: string;
    }
    export namespace CloudFormationStackRecordSourceInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudFormationStackRecordSourceInfo) => any;
    }
    export enum RecordState {
            Failed = "Failed",
            Started = "Started",
            Succeeded = "Succeeded"
    }
    /**
        * <p>Describes a CloudFormation stack record created as a result of the <code>create cloud
        *         formation stack</code> action.</p>
        *          <p>A CloudFormation stack record provides information about the AWS CloudFormation stack used to
        *       create a new Amazon Elastic Compute Cloud instance from an exported Lightsail instance snapshot.</p>
        */
    export interface CloudFormationStackRecord {
            /**
                * <p>The name of the CloudFormation stack record. It starts with
                *         <code>CloudFormationStackRecord</code> followed by a GUID.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the CloudFormation stack record.</p>
                */
            arn?: string;
            /**
                * <p>The date when the CloudFormation stack record was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>A list of objects describing the Availability Zone and Amazon Web Services Region of the
                *       CloudFormation stack record.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The Lightsail resource type (e.g., <code>CloudFormationStackRecord</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The current state of the CloudFormation stack record.</p>
                */
            state?: RecordState | string;
            /**
                * <p>A list of objects describing the source of the CloudFormation stack record.</p>
                */
            sourceInfo?: CloudFormationStackRecordSourceInfo[];
            /**
                * <p>A list of objects describing the destination service, which is AWS CloudFormation, and the Amazon
                *       Resource Name (ARN) of the AWS CloudFormation stack.</p>
                */
            destinationInfo?: DestinationInfo;
    }
    export namespace CloudFormationStackRecord {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudFormationStackRecord) => any;
    }
    export enum ContactMethodStatus {
            Invalid = "Invalid",
            PendingVerification = "PendingVerification",
            Valid = "Valid"
    }
    /**
        * <p>Describes a contact method.</p>
        *          <p>A contact method is a way to send you notifications. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
        */
    export interface ContactMethod {
            /**
                * <p>The destination of the contact method, such as an email address or a mobile phone
                *       number.</p>
                */
            contactEndpoint?: string;
            /**
                * <p>The current status of the contact method.</p>
                *          <p>A contact method has the following possible status:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PendingVerification</code> - The contact method has not yet been verified, and
                *           the verification has not yet expired.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Valid</code> - The contact method has been verified.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>InValid</code> - An attempt was made to verify the contact method, but the
                *           verification has expired.</p>
                *             </li>
                *          </ul>
                */
            status?: ContactMethodStatus | string;
            /**
                * <p>The protocol of the contact method, such as email or SMS (text messaging).</p>
                */
            protocol?: ContactProtocol | string;
            /**
                * <p>The name of the contact method.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the contact method.</p>
                */
            arn?: string;
            /**
                * <p>The timestamp when the contact method was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>An object that describes the location of the contact method, such as the Amazon Web Services Region and Availability Zone.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The Lightsail resource type (e.g., <code>ContactMethod</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The support code. Include this code in your email to support when you have questions about
                *       your Lightsail contact method. This code enables our support team to look up your
                *       Lightsail information more easily.</p>
                */
            supportCode?: string;
    }
    export namespace ContactMethod {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContactMethod) => any;
    }
    export enum ContactMethodVerificationProtocol {
            Email = "Email"
    }
    export enum ContainerServiceProtocol {
            HTTP = "HTTP",
            HTTPS = "HTTPS",
            TCP = "TCP",
            UDP = "UDP"
    }
    /**
        * <p>Describes the settings of a container that will be launched, or that is launched, to an
        *       Amazon Lightsail container service.</p>
        */
    export interface Container {
            /**
                * <p>The name of the image used for the container.</p>
                *
                *          <p>Container images sourced from your Lightsail container service, that are registered and
                *       stored on your service, start with a colon (<code>:</code>). For example, if your container
                *       service name is <code>container-service-1</code>, the container image label is
                *         <code>mystaticsite</code>, and you want to use the third (<code>3</code>) version of the
                *       registered container image, then you should specify
                *         <code>:container-service-1.mystaticsite.3</code>. To use the latest version of a container
                *       image, specify <code>latest</code> instead of a version number (for example,
                *         <code>:container-service-1.mystaticsite.latest</code>). Lightsail will automatically use
                *       the highest numbered version of the registered container image.</p>
                *
                *          <p>Container images sourced from a public registry like Docker Hub don't start with a colon.
                *       For example, <code>nginx:latest</code> or <code>nginx</code>.</p>
                */
            image?: string;
            /**
                * <p>The launch command for the container.</p>
                */
            command?: string[];
            /**
                * <p>The environment variables of the container.</p>
                */
            environment?: Record<string, string>;
            /**
                * <p>The open firewall ports of the container.</p>
                */
            ports?: Record<string, ContainerServiceProtocol | string>;
    }
    export namespace Container {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Container) => any;
    }
    /**
        * <p>Describes a container image that is registered to an Amazon Lightsail container
        *       service.</p>
        */
    export interface ContainerImage {
            /**
                * <p>The name of the container image.</p>
                */
            image?: string;
            /**
                * <p>The digest of the container image.</p>
                */
            digest?: string;
            /**
                * <p>The timestamp when the container image was created.</p>
                */
            createdAt?: Date;
    }
    export namespace ContainerImage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerImage) => any;
    }
    /**
        * <p>Describes the health check configuration of an Amazon Lightsail container service.</p>
        */
    export interface ContainerServiceHealthCheckConfig {
            /**
                * <p>The number of consecutive health checks successes required before moving the container to
                *       the <code>Healthy</code> state. The default value is <code>2</code>.</p>
                */
            healthyThreshold?: number;
            /**
                * <p>The number of consecutive health check failures required before moving the container to
                *       the <code>Unhealthy</code> state. The default value is <code>2</code>.</p>
                */
            unhealthyThreshold?: number;
            /**
                * <p>The amount of time, in seconds, during which no response means a failed health check. You
                *       can specify between 2 and 60 seconds. The default value is <code>2</code>.</p>
                */
            timeoutSeconds?: number;
            /**
                * <p>The approximate interval, in seconds, between health checks of an individual container.
                *       You can specify between 5 and 300 seconds. The default value is <code>5</code>.</p>
                */
            intervalSeconds?: number;
            /**
                * <p>The path on the container on which to perform the health check. The default value is
                *         <code>/</code>.</p>
                */
            path?: string;
            /**
                * <p>The HTTP codes to use when checking for a successful response from a container. You can
                *       specify values between <code>200</code> and <code>499</code>. You can specify multiple values
                *       (for example, <code>200,202</code>) or a range of values (for example,
                *       <code>200-299</code>).</p>
                */
            successCodes?: string;
    }
    export namespace ContainerServiceHealthCheckConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerServiceHealthCheckConfig) => any;
    }
    /**
        * <p>Describes the public endpoint configuration of a deployment of an Amazon Lightsail
        *       container service.</p>
        */
    export interface ContainerServiceEndpoint {
            /**
                * <p>The name of the container entry of the deployment that the endpoint configuration applies
                *       to.</p>
                */
            containerName?: string;
            /**
                * <p>The port of the specified container to which traffic is forwarded to.</p>
                */
            containerPort?: number;
            /**
                * <p>An object that describes the health check configuration of the container.</p>
                */
            healthCheck?: ContainerServiceHealthCheckConfig;
    }
    export namespace ContainerServiceEndpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerServiceEndpoint) => any;
    }
    export enum ContainerServiceDeploymentState {
            ACTIVATING = "ACTIVATING",
            ACTIVE = "ACTIVE",
            FAILED = "FAILED",
            INACTIVE = "INACTIVE"
    }
    /**
        * <p>Describes a container deployment configuration of an Amazon Lightsail container
        *       service.</p>
        *
        *          <p>A deployment specifies the settings, such as the ports and launch command, of containers
        *       that are deployed to your container service.</p>
        */
    export interface ContainerServiceDeployment {
            /**
                * <p>The version number of the deployment.</p>
                */
            version?: number;
            /**
                * <p>The state of the deployment.</p>
                *
                *          <p>A deployment can be in one of the following states:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Activating</code> - The deployment is being created.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Active</code> - The deployment was successfully created, and it's currently
                *           running on the container service. The container service can have only one deployment in an
                *           active state at a time.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Inactive</code> - The deployment was previously successfully created, but it is
                *           not currently running on the container service.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Failed</code> - The deployment failed. Use the <code>GetContainerLog</code>
                *           action to view the log events for the containers in the deployment to try to determine the
                *           reason for the failure.</p>
                *             </li>
                *          </ul>
                */
            state?: ContainerServiceDeploymentState | string;
            /**
                * <p>An object that describes the configuration for the containers of the deployment.</p>
                */
            containers?: Record<string, Container>;
            /**
                * <p>An object that describes the endpoint of the deployment.</p>
                */
            publicEndpoint?: ContainerServiceEndpoint;
            /**
                * <p>The timestamp when the deployment was created.</p>
                */
            createdAt?: Date;
    }
    export namespace ContainerServiceDeployment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerServiceDeployment) => any;
    }
    export enum ContainerServicePowerName {
            large = "large",
            medium = "medium",
            micro = "micro",
            nano = "nano",
            small = "small",
            xlarge = "xlarge"
    }
    /**
        * <p>Describes the activation status of the role that you can use to grant an Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR)
        *       private repositories.</p>
        *
        *          <p>When activated, Lightsail creates an Identity and Access Management (IAM) role
        *       for the specified Lightsail container service. You can use the ARN of the role to create a
        *       trust relationship between your Lightsail container service and an Amazon ECR private repository in your Amazon Web Services account. This allows your container
        *       service to pull images from Amazon ECR private repositories. For more information, see
        *         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
        */
    export interface ContainerServiceECRImagePullerRole {
            /**
                * <p>A Boolean value that indicates whether the role is activated.</p>
                */
            isActive?: boolean;
            /**
                * <p>The Amazon Resource Name (ARN) of the role, if it is activated.</p>
                */
            principalArn?: string;
    }
    export namespace ContainerServiceECRImagePullerRole {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerServiceECRImagePullerRole) => any;
    }
    /**
        * <p>Describes the configuration for an Amazon Lightsail container service to
        *       access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
        *
        *          <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
        */
    export interface PrivateRegistryAccess {
            /**
                * <p>An object that describes the activation status of the role that you can use to grant a
                *         Lightsail container service access to Amazon ECR private
                *       repositories. If the role is activated, the Amazon Resource Name (ARN) of the role is also
                *       listed.</p>
                */
            ecrImagePullerRole?: ContainerServiceECRImagePullerRole;
    }
    export namespace PrivateRegistryAccess {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PrivateRegistryAccess) => any;
    }
    export enum ContainerServiceState {
            DELETING = "DELETING",
            DEPLOYING = "DEPLOYING",
            DISABLED = "DISABLED",
            PENDING = "PENDING",
            READY = "READY",
            RUNNING = "RUNNING",
            UPDATING = "UPDATING"
    }
    export enum ContainerServiceStateDetailCode {
            ACTIVATING_DEPLOYMENT = "ACTIVATING_DEPLOYMENT",
            CERTIFICATE_LIMIT_EXCEEDED = "CERTIFICATE_LIMIT_EXCEEDED",
            CREATING_DEPLOYMENT = "CREATING_DEPLOYMENT",
            CREATING_NETWORK_INFRASTRUCTURE = "CREATING_NETWORK_INFRASTRUCTURE",
            CREATING_SYSTEM_RESOURCES = "CREATING_SYSTEM_RESOURCES",
            EVALUATING_HEALTH_CHECK = "EVALUATING_HEALTH_CHECK",
            PROVISIONING_CERTIFICATE = "PROVISIONING_CERTIFICATE",
            PROVISIONING_SERVICE = "PROVISIONING_SERVICE",
            UNKNOWN_ERROR = "UNKNOWN_ERROR"
    }
    /**
        * <p>Describes the current state of a container service.</p>
        */
    export interface ContainerServiceStateDetail {
            /**
                * <p>The state code of the container service.</p>
                *          <p>The following state codes are possible:</p>
                *          <ul>
                *             <li>
                *                <p>The following state codes are possible if your container service is in a
                *             <code>DEPLOYING</code> or <code>UPDATING</code> state:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>CREATING_SYSTEM_RESOURCES</code> - The system resources for your container
                *               service are being created.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>CREATING_NETWORK_INFRASTRUCTURE</code> - The network infrastructure for your
                *               container service are being created.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>PROVISIONING_CERTIFICATE</code> - The SSL/TLS certificate for your container
                *               service is being created.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>PROVISIONING_SERVICE</code> - Your container service is being
                *               provisioned.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>CREATING_DEPLOYMENT</code> - Your deployment is being created on your
                *               container service.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>EVALUATING_HEALTH_CHECK</code> - The health of your deployment is being
                *               evaluated.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>ACTIVATING_DEPLOYMENT</code> - Your deployment is being activated.</p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>The following state codes are possible if your container service is in a
                *             <code>PENDING</code> state:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>CERTIFICATE_LIMIT_EXCEEDED</code> - The SSL/TLS certificate required for
                *               your container service exceeds the maximum number of certificates allowed for your
                *               account.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>UNKNOWN_ERROR</code> - An error was experienced when your container service
                *               was being created.</p>
                *                   </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            code?: ContainerServiceStateDetailCode | string;
            /**
                * <p>A message that provides more information for the state code.</p>
                *          <note>
                *             <p>The state detail is populated only when a container service is in a
                *         <code>PENDING</code>, <code>DEPLOYING</code>, or <code>UPDATING</code> state.</p>
                *          </note>
                */
            message?: string;
    }
    export namespace ContainerServiceStateDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerServiceStateDetail) => any;
    }
    /**
        * <p>Describes an Amazon Lightsail container service.</p>
        */
    export interface ContainerService {
            /**
                * <p>The name of the container service.</p>
                */
            containerServiceName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the container service.</p>
                */
            arn?: string;
            /**
                * <p>The timestamp when the container service was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>An object that describes the location of the container service, such as the Amazon Web Services Region and Availability Zone.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The Lightsail resource type of the container service (i.e.,
                *         <code>ContainerService</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The tag keys and optional values for the resource. For more information about tags in
                *       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
            /**
                * <p>The power specification of the container service.</p>
                *
                *          <p>The power specifies the amount of RAM, the number of vCPUs, and the base price of the
                *       container service.</p>
                */
            power?: ContainerServicePowerName | string;
            /**
                * <p>The ID of the power of the container service.</p>
                */
            powerId?: string;
            /**
                * <p>The current state of the container service.</p>
                *          <p>The following container service states are possible:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PENDING</code> - The container service is being created.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>READY</code> - The container service is running but it does not have an active
                *           container deployment.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DEPLOYING</code> - The container service is launching a container
                *           deployment.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>RUNNING</code> - The container service is running and it has an active container
                *           deployment.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UPDATING</code> - The container service capacity or its custom domains are being
                *           updated.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DELETING</code> - The container service is being deleted.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>DISABLED</code> - The container service is disabled, and its active deployment
                *           and containers, if any, are shut down.</p>
                *             </li>
                *          </ul>
                */
            state?: ContainerServiceState | string;
            /**
                * <p>An object that describes the current state of the container service.</p>
                *          <note>
                *             <p>The state detail is populated only when a container service is in a
                *         <code>PENDING</code>, <code>DEPLOYING</code>, or <code>UPDATING</code> state.</p>
                *          </note>
                */
            stateDetail?: ContainerServiceStateDetail;
            /**
                * <p>The scale specification of the container service.</p>
                *
                *          <p>The scale specifies the allocated compute nodes of the container service.</p>
                */
            scale?: number;
            /**
                * <p>An object that describes the current container deployment of the container service.</p>
                */
            currentDeployment?: ContainerServiceDeployment;
            /**
                * <p>An object that describes the next deployment of the container service.</p>
                *
                *          <p>This value is <code>null</code> when there is no deployment in a <code>pending</code>
                *       state.</p>
                */
            nextDeployment?: ContainerServiceDeployment;
            /**
                * <p>A Boolean value indicating whether the container service is disabled.</p>
                */
            isDisabled?: boolean;
            /**
                * <p>The principal ARN of the container service.</p>
                *
                *          <p>The principal ARN can be used to create a trust relationship between your standard Amazon Web Services account and your Lightsail container service. This allows you to give your
                *       service permission to access resources in your standard Amazon Web Services account.</p>
                */
            principalArn?: string;
            /**
                * <p>The private domain name of the container service.</p>
                *
                *          <p>The private domain name is accessible only by other resources within the default virtual
                *       private cloud (VPC) of your Lightsail account.</p>
                */
            privateDomainName?: string;
            /**
                * <p>The public domain name of the container service, such as <code>example.com</code> and
                *         <code>www.example.com</code>.</p>
                *
                *          <p>You can specify up to four public domain names for a container service. The domain names
                *       that you specify are used when you create a deployment with a container configured as the
                *       public endpoint of your container service.</p>
                *
                *          <p>If you don't specify public domain names, then you can use the default domain of the
                *       container service.</p>
                *
                *          <important>
                *             <p>You must create and validate an SSL/TLS certificate before you can use public domain
                *         names with your container service. Use the <code>CreateCertificate</code> action to create a
                *         certificate for the public domain names you want to use with your container service.</p>
                *          </important>
                *
                *          <p>See <code>CreateContainerService</code> or <code>UpdateContainerService</code> for
                *       information about how to specify public domain names for your Lightsail container
                *       service.</p>
                */
            publicDomainNames?: Record<string, string[]>;
            /**
                * <p>The publicly accessible URL of the container service.</p>
                *
                *          <p>If no public endpoint is specified in the <code>currentDeployment</code>, this URL returns
                *       a 404 response.</p>
                */
            url?: string;
            /**
                * <p>An object that describes the configuration for the container service to access private
                *       container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private
                *       repositories.</p>
                *
                *          <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
                */
            privateRegistryAccess?: PrivateRegistryAccess;
    }
    export namespace ContainerService {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerService) => any;
    }
    /**
        * <p>Describes the settings of a public endpoint for an Amazon Lightsail container
        *       service.</p>
        */
    export interface EndpointRequest {
            /**
                * <p>The name of the container for the endpoint.</p>
                */
            containerName: string | undefined;
            /**
                * <p>The port of the container to which traffic is forwarded to.</p>
                */
            containerPort: number | undefined;
            /**
                * <p>An object that describes the health check configuration of the container.</p>
                */
            healthCheck?: ContainerServiceHealthCheckConfig;
    }
    export namespace EndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EndpointRequest) => any;
    }
    /**
        * <p>Describes a container deployment configuration of an Amazon Lightsail container
        *       service.</p>
        *
        *          <p>A deployment specifies the settings, such as the ports and launch command, of containers
        *       that are deployed to your container service.</p>
        */
    export interface ContainerServiceDeploymentRequest {
            /**
                * <p>An object that describes the configuration for the containers of the deployment.</p>
                */
            containers?: Record<string, Container>;
            /**
                * <p>An object that describes the endpoint of the deployment.</p>
                */
            publicEndpoint?: EndpointRequest;
    }
    export namespace ContainerServiceDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerServiceDeploymentRequest) => any;
    }
    /**
        * <p>Describes a request to activate or deactivate the role that you can use to grant an
        *         Amazon Lightsail container service access to Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
        *
        *          <p>When activated, Lightsail creates an Identity and Access Management (IAM) role
        *       for the specified Lightsail container service. You can use the ARN of the role to create a
        *       trust relationship between your Lightsail container service and an Amazon ECR private repository in your Amazon Web Services account. This allows your container
        *       service to pull images from Amazon ECR private repositories. For more information, see
        *         <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
        */
    export interface ContainerServiceECRImagePullerRoleRequest {
            /**
                * <p>A Boolean value that indicates whether to activate the role.</p>
                */
            isActive?: boolean;
    }
    export namespace ContainerServiceECRImagePullerRoleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerServiceECRImagePullerRoleRequest) => any;
    }
    /**
        * <p>Describes the log events of a container of an Amazon Lightsail container service.</p>
        */
    export interface ContainerServiceLogEvent {
            /**
                * <p>The timestamp when the container service log event was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The message of the container service log event.</p>
                */
            message?: string;
    }
    export namespace ContainerServiceLogEvent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerServiceLogEvent) => any;
    }
    export enum ContainerServiceMetricName {
            CPUUtilization = "CPUUtilization",
            MemoryUtilization = "MemoryUtilization"
    }
    /**
        * <p>Describes the powers that can be specified for an Amazon Lightsail container
        *       service.</p>
        *
        *          <p>The power specifies the amount of RAM, the number of vCPUs, and the base price of the
        *       container service.</p>
        */
    export interface ContainerServicePower {
            /**
                * <p>The ID of the power (e.g., <code>nano-1</code>).</p>
                */
            powerId?: string;
            /**
                * <p>The monthly price of the power in USD.</p>
                */
            price?: number;
            /**
                * <p>The number of vCPUs included in the power.</p>
                */
            cpuCount?: number;
            /**
                * <p>The amount of RAM (in GB) of the power.</p>
                */
            ramSizeInGb?: number;
            /**
                * <p>The friendly name of the power (e.g., <code>nano</code>).</p>
                */
            name?: string;
            /**
                * <p>A Boolean value indicating whether the power is active and can be specified for container
                *       services.</p>
                */
            isActive?: boolean;
    }
    export namespace ContainerServicePower {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerServicePower) => any;
    }
    /**
        * <p>Describes the login information for the container image registry of an Amazon Lightsail
        *       account.</p>
        */
    export interface ContainerServiceRegistryLogin {
            /**
                * <p>The container service registry username to use to push container images to the container
                *       image registry of a Lightsail account.</p>
                */
            username?: string;
            /**
                * <p>The container service registry password to use to push container images to the container
                *       image registry of a Lightsail account</p>
                */
            password?: string;
            /**
                * <p>The timestamp of when the container image registry username and password expire.</p>
                *
                *          <p>The log in credentials expire 12 hours after they are created, at which point you will
                *       need to create a new set of log in credentials using the
                *         <code>CreateContainerServiceRegistryLogin</code> action.</p>
                */
            expiresAt?: Date;
            /**
                * <p>The address to use to push container images to the container image registry of a
                *       Lightsail account.</p>
                */
            registry?: string;
    }
    export namespace ContainerServiceRegistryLogin {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerServiceRegistryLogin) => any;
    }
    export interface ContainerServicesListResult {
            /**
                * <p>An array of objects that describe one or more container services.</p>
                */
            containerServices?: ContainerService[];
    }
    export namespace ContainerServicesListResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContainerServicesListResult) => any;
    }
    export interface CopySnapshotRequest {
            /**
                * <p>The name of the source manual snapshot to copy.</p>
                *          <p>Constraint:</p>
                *          <ul>
                *             <li>
                *                <p>Define this parameter only when copying a manual snapshot as another manual
                *           snapshot.</p>
                *             </li>
                *          </ul>
                */
            sourceSnapshotName?: string;
            /**
                * <p>The name of the source instance or disk from which the source automatic snapshot was
                *       created.</p>
                *          <p>Constraint:</p>
                *          <ul>
                *             <li>
                *                <p>Define this parameter only when copying an automatic snapshot as a manual snapshot.
                *           For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
                *             </li>
                *          </ul>
                */
            sourceResourceName?: string;
            /**
                * <p>The date of the source automatic snapshot to copy. Use the <code>get auto snapshots</code>
                *       operation to identify the dates of the available automatic snapshots.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must be specified in <code>YYYY-MM-DD</code> format.</p>
                *             </li>
                *             <li>
                *                <p>This parameter cannot be defined together with the <code>use latest restorable auto
                *             snapshot</code> parameter. The <code>restore date</code> and <code>use latest restorable
                *             auto snapshot</code> parameters are mutually exclusive.</p>
                *             </li>
                *             <li>
                *                <p>Define this parameter only when copying an automatic snapshot as a manual snapshot.
                *           For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
                *             </li>
                *          </ul>
                */
            restoreDate?: string;
            /**
                * <p>A Boolean value to indicate whether to use the latest available automatic snapshot of the
                *       specified source instance or disk.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>This parameter cannot be defined together with the <code>restore date</code>
                *           parameter. The <code>use latest restorable auto snapshot</code> and <code>restore
                *             date</code> parameters are mutually exclusive.</p>
                *             </li>
                *             <li>
                *                <p>Define this parameter only when copying an automatic snapshot as a manual snapshot.
                *           For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-keeping-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
                *             </li>
                *          </ul>
                */
            useLatestRestorableAutoSnapshot?: boolean;
            /**
                * <p>The name of the new manual snapshot to be created as a copy.</p>
                */
            targetSnapshotName: string | undefined;
            /**
                * <p>The Amazon Web Services Region where the source manual or automatic snapshot is
                *       located.</p>
                */
            sourceRegion: RegionName | string | undefined;
    }
    export namespace CopySnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopySnapshotRequest) => any;
    }
    export interface CopySnapshotResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CopySnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CopySnapshotResult) => any;
    }
    export interface CreateBucketRequest {
            /**
                * <p>The name for the bucket.</p>
                *
                *          <p>For more information about bucket names, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/bucket-naming-rules-in-amazon-lightsail">Bucket naming rules in Amazon Lightsail</a> in the <i>Amazon Lightsail Developer
                *         Guide</i>.</p>
                */
            bucketName: string | undefined;
            /**
                * <p>The ID of the bundle to use for the bucket.</p>
                *
                *          <p>A bucket bundle specifies the monthly cost, storage space, and data transfer quota for a
                *       bucket.</p>
                *
                *          <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketBundles.html">GetBucketBundles</a> action to get a list of
                *       bundle IDs that you can specify.</p>
                *
                *          <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_UpdateBucketBundle.html">UpdateBucketBundle</a> action to change the
                *       bundle after the bucket is created.</p>
                */
            bundleId: string | undefined;
            /**
                * <p>The tag keys and optional values to add to the bucket during creation.</p>
                *
                *          <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_TagResource.html">TagResource</a> action to tag the bucket after it's
                *       created.</p>
                */
            tags?: Tag[];
            /**
                * <p>A Boolean value that indicates whether to enable versioning of objects in the
                *       bucket.</p>
                *
                *          <p>For more information about versioning, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-managing-bucket-object-versioning">Enabling and suspending object versioning in a bucket in Amazon Lightsail</a> in the
                *         <i>Amazon Lightsail Developer Guide</i>.</p>
                */
            enableObjectVersioning?: boolean;
    }
    export namespace CreateBucketRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBucketRequest) => any;
    }
    export interface CreateBucketResult {
            /**
                * <p>An object that describes the bucket that is created.</p>
                */
            bucket?: Bucket;
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateBucketResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBucketResult) => any;
    }
    export interface CreateBucketAccessKeyRequest {
            /**
                * <p>The name of the bucket that the new access key will belong to, and grant access to.</p>
                */
            bucketName: string | undefined;
    }
    export namespace CreateBucketAccessKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBucketAccessKeyRequest) => any;
    }
    export interface CreateBucketAccessKeyResult {
            /**
                * <p>An object that describes the access key that is created.</p>
                */
            accessKey?: AccessKey;
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateBucketAccessKeyResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateBucketAccessKeyResult) => any;
    }
    export interface CreateCertificateRequest {
            /**
                * <p>The name for the certificate.</p>
                */
            certificateName: string | undefined;
            /**
                * <p>The domain name (e.g., <code>example.com</code>) for the certificate.</p>
                */
            domainName: string | undefined;
            /**
                * <p>An array of strings that specify the alternate domains (e.g., <code>example2.com</code>)
                *       and subdomains (e.g., <code>blog.example.com</code>) for the certificate.</p>
                *          <p>You can specify a maximum of nine alternate domains (in addition to the primary domain
                *       name).</p>
                *          <p>Wildcard domain entries (e.g., <code>*.example.com</code>) are not supported.</p>
                */
            subjectAlternativeNames?: string[];
            /**
                * <p>The tag keys and optional values to add to the certificate during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCertificateRequest) => any;
    }
    export interface CreateCertificateResult {
            /**
                * <p>An object that describes the certificate created.</p>
                */
            certificate?: CertificateSummary;
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateCertificateResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCertificateResult) => any;
    }
    export enum PortInfoSourceType {
            Closed = "CLOSED",
            Default = "DEFAULT",
            Instance = "INSTANCE",
            None = "NONE"
    }
    /**
        * <p>Describes the Amazon Elastic Compute Cloud instance and related resources to be created using the
        *         <code>create cloud formation stack</code> operation.</p>
        */
    export interface InstanceEntry {
            /**
                * <p>The name of the export snapshot record, which contains the exported Lightsail instance
                *       snapshot that will be used as the source of the new Amazon EC2 instance.</p>
                *          <p>Use the <code>get export snapshot records</code> operation to get a list of export
                *       snapshot records that you can use to create a CloudFormation stack.</p>
                */
            sourceName: string | undefined;
            /**
                * <p>The instance type (e.g., <code>t2.micro</code>) to use for the new Amazon EC2 instance.</p>
                */
            instanceType: string | undefined;
            /**
                * <p>The port configuration to use for the new Amazon EC2 instance.</p>
                *
                *          <p>The following configuration options are available:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>DEFAULT</code> - Use the default firewall settings from the Lightsail instance
                *           blueprint. If this is specified, then IPv4 and IPv6 will be configured for the new
                *           instance that is created in Amazon EC2.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>INSTANCE</code> - Use the configured firewall settings from the source
                *           Lightsail instance. If this is specified, the new instance that is created in Amazon EC2 will
                *           be configured to match the configuration of the source Lightsail instance. For example,
                *           if the source instance is configured for dual-stack (IPv4 and IPv6), then IPv4 and IPv6
                *           will be configured for the new instance that is created in Amazon EC2. If the source instance
                *           is configured for IPv4 only, then only IPv4 will be configured for the new instance that
                *           is created in Amazon EC2.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NONE</code> - Use the default Amazon EC2 security group. If this is specified, then
                *           only IPv4 will be configured for the new instance that is created in Amazon EC2.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CLOSED</code> - All ports closed. If this is specified, then only IPv4 will be
                *           configured for the new instance that is created in Amazon EC2.</p>
                *             </li>
                *          </ul>
                *          <note>
                *             <p>If you configured <code>lightsail-connect</code> as a <code>cidrListAliases</code> on
                *         your instance, or if you chose to allow the Lightsail browser-based SSH or RDP clients to
                *         connect to your instance, that configuration is not carried over to your new Amazon EC2
                *         instance.</p>
                *          </note>
                */
            portInfoSource: PortInfoSourceType | string | undefined;
            /**
                * <p>A launch script you can create that configures a server with additional user data. For
                *       example, you might want to run <code>apt-get -y update</code>.</p>
                *          <note>
                *             <p>Depending on the machine image you choose, the command to get software on your instance
                *         varies. Amazon Linux and CentOS use <code>yum</code>, Debian and Ubuntu use
                *           <code>apt-get</code>, and FreeBSD uses <code>pkg</code>.</p>
                *          </note>
                */
            userData?: string;
            /**
                * <p>The Availability Zone for the new Amazon EC2 instance.</p>
                */
            availabilityZone: string | undefined;
    }
    export namespace InstanceEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceEntry) => any;
    }
    export interface CreateCloudFormationStackRequest {
            /**
                * <p>An array of parameters that will be used to create the new Amazon EC2 instance. You can only
                *       pass one instance entry at a time in this array. You will get an invalid parameter error if
                *       you pass more than one instance entry in this array.</p>
                */
            instances: InstanceEntry[] | undefined;
    }
    export namespace CreateCloudFormationStackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCloudFormationStackRequest) => any;
    }
    export interface CreateCloudFormationStackResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateCloudFormationStackResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateCloudFormationStackResult) => any;
    }
    export interface CreateContactMethodRequest {
            /**
                * <p>The protocol of the contact method, such as <code>Email</code> or <code>SMS</code> (text
                *       messaging).</p>
                *          <p>The <code>SMS</code> protocol is supported only in the following Amazon Web Services
                *       Regions.</p>
                *          <ul>
                *             <li>
                *                <p>US East (N. Virginia) (<code>us-east-1</code>)</p>
                *             </li>
                *             <li>
                *                <p>US West (Oregon) (<code>us-west-2</code>)</p>
                *             </li>
                *             <li>
                *                <p>Europe (Ireland) (<code>eu-west-1</code>)</p>
                *             </li>
                *             <li>
                *                <p>Asia Pacific (Tokyo) (<code>ap-northeast-1</code>)</p>
                *             </li>
                *             <li>
                *                <p>Asia Pacific (Singapore) (<code>ap-southeast-1</code>)</p>
                *             </li>
                *             <li>
                *                <p>Asia Pacific (Sydney) (<code>ap-southeast-2</code>)</p>
                *             </li>
                *          </ul>
                *          <p>For a list of countries/regions where SMS text messages can be sent, and the latest
                *         Amazon Web Services Regions where SMS text messaging is supported, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-supported-regions-countries.html">Supported Regions and Countries</a> in the <i>Amazon SNS Developer
                *         Guide</i>.</p>
                *          <p>For more information about notifications in Amazon Lightsail, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-notifications">Notifications in Amazon Lightsail</a>.</p>
                */
            protocol: ContactProtocol | string | undefined;
            /**
                * <p>The destination of the contact method, such as an email address or a mobile phone
                *       number.</p>
                *          <p>Use the E.164 format when specifying a mobile phone number. E.164 is a standard for the
                *       phone number structure used for international telecommunication. Phone numbers that follow
                *       this format can have a maximum of 15 digits, and they are prefixed with the plus character (+)
                *       and the country code. For example, a U.S. phone number in E.164 format would be specified as
                *       +1XXX5550100. For more information, see <a href="https://en.wikipedia.org/wiki/E.164">E.164</a> on <i>Wikipedia</i>.</p>
                */
            contactEndpoint: string | undefined;
    }
    export namespace CreateContactMethodRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateContactMethodRequest) => any;
    }
    export interface CreateContactMethodResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateContactMethodResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateContactMethodResult) => any;
    }
    /**
        * <p>Describes a request to configure an Amazon Lightsail container service to
        *       access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories.</p>
        *
        *          <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
        */
    export interface PrivateRegistryAccessRequest {
            /**
                * <p>An object to describe a request to activate or deactivate the role that you can use to
                *       grant an Amazon Lightsail container service access to Amazon Elastic Container Registry
                *         (Amazon ECR) private repositories.</p>
                */
            ecrImagePullerRole?: ContainerServiceECRImagePullerRoleRequest;
    }
    export namespace PrivateRegistryAccessRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PrivateRegistryAccessRequest) => any;
    }
    export interface CreateContainerServiceRequest {
            /**
                * <p>The name for the container service.</p>
                *
                *          <p>The name that you specify for your container service will make up part of its default
                *       domain. The default domain of a container service is typically
                *         <code>https://<ServiceName>.<RandomGUID>.<AWSRegion>.cs.amazonlightsail.com</code>.
                *       If the name of your container service is <code>container-service-1</code>, and it's located in
                *       the US East (Ohio) AWS region (<code>us-east-2</code>), then the domain for your container
                *       service will be like the following example:
                *         <code>https://container-service-1.ur4EXAMPLE2uq.us-east-2.cs.amazonlightsail.com</code>
                *          </p>
                *
                *          <p>The following are the requirements for container service names:</p>
                *
                *          <ul>
                *             <li>
                *                <p>Must be unique within each Amazon Web Services Region in your Lightsail
                *           account.</p>
                *             </li>
                *             <li>
                *                <p>Must contain 1 to 63 characters.</p>
                *             </li>
                *             <li>
                *                <p>Must contain only alphanumeric characters and hyphens.</p>
                *             </li>
                *             <li>
                *                <p>A hyphen (-) can separate words but cannot be at the start or end of the name.</p>
                *             </li>
                *          </ul>
                */
            serviceName: string | undefined;
            /**
                * <p>The power specification for the container service.</p>
                *
                *          <p>The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the
                *       container service. The <code>power</code> and <code>scale</code> of a container service makes
                *       up its configured capacity. To determine the monthly price of your container service, multiply
                *       the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of
                *       the service.</p>
                *
                *          <p>Use the <code>GetContainerServicePowers</code> action to get a list of power options that
                *       you can specify using this parameter, and their base monthly cost.</p>
                */
            power: ContainerServicePowerName | string | undefined;
            /**
                * <p>The scale specification for the container service.</p>
                *
                *          <p>The scale specifies the allocated compute nodes of the container service. The
                *         <code>power</code> and <code>scale</code> of a container service makes up its configured
                *       capacity. To determine the monthly price of your container service, multiply the base price of
                *       the <code>power</code> with the <code>scale</code> (the number of nodes) of the
                *       service.</p>
                */
            scale: number | undefined;
            /**
                * <p>The tag keys and optional values to add to the container service during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                *          <p>For more information about tags in Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
            /**
                * <p>The public domain names to use with the container service, such as
                *         <code>example.com</code> and <code>www.example.com</code>.</p>
                *
                *          <p>You can specify up to four public domain names for a container service. The domain names
                *       that you specify are used when you create a deployment with a container configured as the
                *       public endpoint of your container service.</p>
                *
                *          <p>If you don't specify public domain names, then you can use the default domain of the
                *       container service.</p>
                *
                *          <important>
                *             <p>You must create and validate an SSL/TLS certificate before you can use public domain
                *         names with your container service. Use the <code>CreateCertificate</code> action to create a
                *         certificate for the public domain names you want to use with your container service.</p>
                *          </important>
                *
                *          <p>You can specify public domain names using a string to array map as shown in the example
                *       later on this page.</p>
                */
            publicDomainNames?: Record<string, string[]>;
            /**
                * <p>An object that describes a deployment for the container service.</p>
                *
                *          <p>A deployment specifies the containers that will be launched on the container service and
                *       their settings, such as the ports to open, the environment variables to apply, and the launch
                *       command to run. It also specifies the container that will serve as the public endpoint of the
                *       deployment and its settings, such as the HTTP or HTTPS port to use, and the health check
                *       configuration.</p>
                */
            deployment?: ContainerServiceDeploymentRequest;
            /**
                * <p>An object to describe the configuration for the container service to access private
                *       container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private
                *       repositories.</p>
                *
                *          <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
                */
            privateRegistryAccess?: PrivateRegistryAccessRequest;
    }
    export namespace CreateContainerServiceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateContainerServiceRequest) => any;
    }
    export interface CreateContainerServiceResult {
            /**
                * <p>An object that describes a container service.</p>
                */
            containerService?: ContainerService;
    }
    export namespace CreateContainerServiceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateContainerServiceResult) => any;
    }
    export interface CreateContainerServiceDeploymentRequest {
            /**
                * <p>The name of the container service for which to create the deployment.</p>
                */
            serviceName: string | undefined;
            /**
                * <p>An object that describes the settings of the containers that will be launched on the
                *       container service.</p>
                */
            containers?: Record<string, Container>;
            /**
                * <p>An object that describes the settings of the public endpoint for the container
                *       service.</p>
                */
            publicEndpoint?: EndpointRequest;
    }
    export namespace CreateContainerServiceDeploymentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateContainerServiceDeploymentRequest) => any;
    }
    export interface CreateContainerServiceDeploymentResult {
            /**
                * <p>An object that describes a container service.</p>
                */
            containerService?: ContainerService;
    }
    export namespace CreateContainerServiceDeploymentResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateContainerServiceDeploymentResult) => any;
    }
    export interface CreateContainerServiceRegistryLoginRequest {
    }
    export namespace CreateContainerServiceRegistryLoginRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateContainerServiceRegistryLoginRequest) => any;
    }
    export interface CreateContainerServiceRegistryLoginResult {
            /**
                * <p>An object that describes the log in information for the container service registry of your
                *       Lightsail account.</p>
                */
            registryLogin?: ContainerServiceRegistryLogin;
    }
    export namespace CreateContainerServiceRegistryLoginResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateContainerServiceRegistryLoginResult) => any;
    }
    export interface CreateDiskRequest {
            /**
                * <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
                */
            diskName: string | undefined;
            /**
                * <p>The Availability Zone where you want to create the disk (e.g., <code>us-east-2a</code>).
                *       Use the same Availability Zone as the Lightsail instance to which you want to attach the
                *       disk.</p>
                *          <p>Use the <code>get regions</code> operation to list the Availability Zones where
                *       Lightsail is currently available.</p>
                */
            availabilityZone: string | undefined;
            /**
                * <p>The size of the disk in GB (e.g., <code>32</code>).</p>
                */
            sizeInGb: number | undefined;
            /**
                * <p>The tag keys and optional values to add to the resource during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
            /**
                * <p>An array of objects that represent the add-ons to enable for the new disk.</p>
                */
            addOns?: AddOnRequest[];
    }
    export namespace CreateDiskRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDiskRequest) => any;
    }
    export interface CreateDiskResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateDiskResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDiskResult) => any;
    }
    export interface CreateDiskFromSnapshotRequest {
            /**
                * <p>The unique Lightsail disk name (e.g., <code>my-disk</code>).</p>
                */
            diskName: string | undefined;
            /**
                * <p>The name of the disk snapshot (e.g., <code>my-snapshot</code>) from which to create the
                *       new storage disk.</p>
                *          <p>Constraint:</p>
                *          <ul>
                *             <li>
                *                <p>This parameter cannot be defined together with the <code>source disk name</code>
                *           parameter. The <code>disk snapshot name</code> and <code>source disk name</code>
                *           parameters are mutually exclusive.</p>
                *             </li>
                *          </ul>
                */
            diskSnapshotName?: string;
            /**
                * <p>The Availability Zone where you want to create the disk (e.g., <code>us-east-2a</code>).
                *       Choose the same Availability Zone as the Lightsail instance where you want to create the
                *       disk.</p>
                *          <p>Use the GetRegions operation to list the Availability Zones where Lightsail is currently
                *       available.</p>
                */
            availabilityZone: string | undefined;
            /**
                * <p>The size of the disk in GB (e.g., <code>32</code>).</p>
                */
            sizeInGb: number | undefined;
            /**
                * <p>The tag keys and optional values to add to the resource during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
            /**
                * <p>An array of objects that represent the add-ons to enable for the new disk.</p>
                */
            addOns?: AddOnRequest[];
            /**
                * <p>The name of the source disk from which the source automatic snapshot was created.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>This parameter cannot be defined together with the <code>disk snapshot name</code>
                *           parameter. The <code>source disk name</code> and <code>disk snapshot name</code>
                *           parameters are mutually exclusive.</p>
                *             </li>
                *             <li>
                *                <p>Define this parameter only when creating a new disk from an automatic snapshot. For
                *           more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
                *             </li>
                *          </ul>
                */
            sourceDiskName?: string;
            /**
                * <p>The date of the automatic snapshot to use for the new disk. Use the <code>get auto
                *         snapshots</code> operation to identify the dates of the available automatic
                *       snapshots.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must be specified in <code>YYYY-MM-DD</code> format.</p>
                *             </li>
                *             <li>
                *                <p>This parameter cannot be defined together with the <code>use latest restorable auto
                *             snapshot</code> parameter. The <code>restore date</code> and <code>use latest restorable
                *             auto snapshot</code> parameters are mutually exclusive.</p>
                *             </li>
                *             <li>
                *                <p>Define this parameter only when creating a new disk from an automatic snapshot. For
                *           more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
                *             </li>
                *          </ul>
                */
            restoreDate?: string;
            /**
                * <p>A Boolean value to indicate whether to use the latest available automatic snapshot.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>This parameter cannot be defined together with the <code>restore date</code>
                *           parameter. The <code>use latest restorable auto snapshot</code> and <code>restore
                *             date</code> parameters are mutually exclusive.</p>
                *             </li>
                *             <li>
                *                <p>Define this parameter only when creating a new disk from an automatic snapshot. For
                *           more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
                *             </li>
                *          </ul>
                */
            useLatestRestorableAutoSnapshot?: boolean;
    }
    export namespace CreateDiskFromSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDiskFromSnapshotRequest) => any;
    }
    export interface CreateDiskFromSnapshotResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateDiskFromSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDiskFromSnapshotResult) => any;
    }
    export interface CreateDiskSnapshotRequest {
            /**
                * <p>The unique name of the source disk (e.g., <code>Disk-Virginia-1</code>).</p>
                *          <note>
                *             <p>This parameter cannot be defined together with the <code>instance name</code> parameter.
                *         The <code>disk name</code> and <code>instance name</code> parameters are mutually
                *         exclusive.</p>
                *          </note>
                */
            diskName?: string;
            /**
                * <p>The name of the destination disk snapshot (e.g., <code>my-disk-snapshot</code>) based on
                *       the source disk.</p>
                */
            diskSnapshotName: string | undefined;
            /**
                * <p>The unique name of the source instance (e.g., <code>Amazon_Linux-512MB-Virginia-1</code>).
                *       When this is defined, a snapshot of the instance's system volume is created.</p>
                *          <note>
                *             <p>This parameter cannot be defined together with the <code>disk name</code> parameter. The
                *           <code>instance name</code> and <code>disk name</code> parameters are mutually
                *         exclusive.</p>
                *          </note>
                */
            instanceName?: string;
            /**
                * <p>The tag keys and optional values to add to the resource during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateDiskSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDiskSnapshotRequest) => any;
    }
    export interface CreateDiskSnapshotResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateDiskSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDiskSnapshotResult) => any;
    }
    export enum IpAddressType {
            DUALSTACK = "dualstack",
            IPV4 = "ipv4"
    }
    export enum OriginProtocolPolicyEnum {
            HTTPOnly = "http-only",
            HTTPSOnly = "https-only"
    }
    /**
        * <p>Describes the origin resource of an Amazon Lightsail content delivery network (CDN)
        *       distribution.</p>
        *          <p>An origin can be a Lightsail instance, bucket, or load balancer. A distribution pulls
        *       content from an origin, caches it, and serves it to viewers via a worldwide network of edge
        *       servers.</p>
        */
    export interface InputOrigin {
            /**
                * <p>The name of the origin resource.</p>
                */
            name?: string;
            /**
                * <p>The AWS Region name of the origin resource.</p>
                */
            regionName?: RegionName | string;
            /**
                * <p>The protocol that your Amazon Lightsail distribution uses when establishing a connection
                *       with your origin to pull content.</p>
                */
            protocolPolicy?: OriginProtocolPolicyEnum | string;
    }
    export namespace InputOrigin {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InputOrigin) => any;
    }
    export interface CreateDistributionRequest {
            /**
                * <p>The name for the distribution.</p>
                */
            distributionName: string | undefined;
            /**
                * <p>An object that describes the origin resource for the distribution, such as a Lightsail
                *       instance, bucket, or load balancer.</p>
                *          <p>The distribution pulls, caches, and serves content from the origin.</p>
                */
            origin: InputOrigin | undefined;
            /**
                * <p>An object that describes the default cache behavior for the distribution.</p>
                */
            defaultCacheBehavior: CacheBehavior | undefined;
            /**
                * <p>An object that describes the cache behavior settings for the distribution.</p>
                */
            cacheBehaviorSettings?: CacheSettings;
            /**
                * <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
                */
            cacheBehaviors?: CacheBehaviorPerPath[];
            /**
                * <p>The bundle ID to use for the distribution.</p>
                *          <p>A distribution bundle describes the specifications of your distribution, such as the
                *       monthly cost and monthly network transfer quota.</p>
                *          <p>Use the <code>GetDistributionBundles</code> action to get a list of distribution bundle
                *       IDs that you can specify.</p>
                */
            bundleId: string | undefined;
            /**
                * <p>The IP address type for the distribution.</p>
                *
                *          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
                *       IPv4 and IPv6.</p>
                *
                *          <p>The default value is <code>dualstack</code>.</p>
                */
            ipAddressType?: IpAddressType | string;
            /**
                * <p>The tag keys and optional values to add to the distribution during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateDistributionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDistributionRequest) => any;
    }
    /**
        * <p>Describes the origin resource of an Amazon Lightsail content delivery network (CDN)
        *       distribution.</p>
        *          <p>An origin can be a Lightsail instance, bucket, or load balancer. A distribution pulls
        *       content from an origin, caches it, and serves it to viewers via a worldwide network of edge
        *       servers.</p>
        */
    export interface Origin {
            /**
                * <p>The name of the origin resource.</p>
                */
            name?: string;
            /**
                * <p>The resource type of the origin resource (e.g., <i>Instance</i>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The AWS Region name of the origin resource.</p>
                */
            regionName?: RegionName | string;
            /**
                * <p>The protocol that your Amazon Lightsail distribution uses when establishing a connection
                *       with your origin to pull content.</p>
                */
            protocolPolicy?: OriginProtocolPolicyEnum | string;
    }
    export namespace Origin {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Origin) => any;
    }
    /**
        * <p>Describes an Amazon Lightsail content delivery network (CDN) distribution.</p>
        */
    export interface LightsailDistribution {
            /**
                * <p>The name of the distribution.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the distribution.</p>
                */
            arn?: string;
            /**
                * <p>The support code. Include this code in your email to support when you have questions about
                *       your Lightsail distribution. This code enables our support team to look up your Lightsail
                *       information more easily.</p>
                */
            supportCode?: string;
            /**
                * <p>The timestamp when the distribution was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>An object that describes the location of the distribution, such as the Amazon Web Services
                *       Region and Availability Zone.</p>
                *          <note>
                *             <p>Lightsail distributions are global resources that can reference an origin in any
                *           Amazon Web Services Region, and distribute its content globally. However, all distributions
                *         are located in the <code>us-east-1</code> Region.</p>
                *          </note>
                */
            location?: ResourceLocation;
            /**
                * <p>The Lightsail resource type (e.g., <code>Distribution</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The alternate domain names of the distribution.</p>
                */
            alternativeDomainNames?: string[];
            /**
                * <p>The status of the distribution.</p>
                */
            status?: string;
            /**
                * <p>Indicates whether the distribution is enabled.</p>
                */
            isEnabled?: boolean;
            /**
                * <p>The domain name of the distribution.</p>
                */
            domainName?: string;
            /**
                * <p>The ID of the bundle currently applied to the distribution.</p>
                */
            bundleId?: string;
            /**
                * <p>The name of the SSL/TLS certificate attached to the distribution, if any.</p>
                */
            certificateName?: string;
            /**
                * <p>An object that describes the origin resource of the distribution, such as a Lightsail
                *       instance, bucket, or load balancer.</p>
                *          <p>The distribution pulls, caches, and serves content from the origin.</p>
                */
            origin?: Origin;
            /**
                * <p>The public DNS of the origin.</p>
                */
            originPublicDNS?: string;
            /**
                * <p>An object that describes the default cache behavior of the distribution.</p>
                */
            defaultCacheBehavior?: CacheBehavior;
            /**
                * <p>An object that describes the cache behavior settings of the distribution.</p>
                */
            cacheBehaviorSettings?: CacheSettings;
            /**
                * <p>An array of objects that describe the per-path cache behavior of the distribution.</p>
                */
            cacheBehaviors?: CacheBehaviorPerPath[];
            /**
                * <p>Indicates whether the bundle that is currently applied to your distribution, specified
                *       using the <code>distributionName</code> parameter, can be changed to another bundle.</p>
                *          <p>Use the <code>UpdateDistributionBundle</code> action to change your distribution's
                *       bundle.</p>
                */
            ableToUpdateBundle?: boolean;
            /**
                * <p>The IP address type of the distribution.</p>
                *
                *          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
                *       IPv4 and IPv6.</p>
                */
            ipAddressType?: IpAddressType | string;
            /**
                * <p>The tag keys and optional values for the resource. For more information about tags in
                *       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
    }
    export namespace LightsailDistribution {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LightsailDistribution) => any;
    }
    export interface CreateDistributionResult {
            /**
                * <p>An object that describes the distribution created.</p>
                */
            distribution?: LightsailDistribution;
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace CreateDistributionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDistributionResult) => any;
    }
    export interface CreateDomainRequest {
            /**
                * <p>The domain name to manage (e.g., <code>example.com</code>).</p>
                *          <note>
                *             <p>You cannot register a new domain name using Lightsail. You must register a domain name
                *         using Amazon Route 53 or another domain name registrar. If you have already registered your
                *         domain, you can enter its name in this parameter to manage the DNS records for that domain
                *         using Lightsail.</p>
                *          </note>
                */
            domainName: string | undefined;
            /**
                * <p>The tag keys and optional values to add to the resource during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDomainRequest) => any;
    }
    export interface CreateDomainResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace CreateDomainResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDomainResult) => any;
    }
    /**
        * <p>Describes a domain recordset entry.</p>
        */
    export interface DomainEntry {
            /**
                * <p>The ID of the domain recordset entry.</p>
                */
            id?: string;
            /**
                * <p>The name of the domain.</p>
                */
            name?: string;
            /**
                * <p>The target IP address (e.g., <code>192.0.2.0</code>), or AWS name server (e.g.,
                *         <code>ns-111.awsdns-22.com.</code>).</p>
                *          <p>For Lightsail load balancers, the value looks like
                *         <code>ab1234c56789c6b86aba6fb203d443bc-123456789.us-east-2.elb.amazonaws.com</code>. For
                *       Lightsail distributions, the value looks like <code>exampled1182ne.cloudfront.net</code>.
                *       For Lightsail container services, the value looks like
                *         <code>container-service-1.example23scljs.us-west-2.cs.amazonlightsail.com</code>. Be sure to
                *       also set <code>isAlias</code> to <code>true</code> when setting up an A record for a
                *       Lightsail load balancer, distribution, or container service.</p>
                */
            target?: string;
            /**
                * <p>When <code>true</code>, specifies whether the domain entry is an alias used by the
                *       Lightsail load balancer. You can include an alias (A type) record in your request, which
                *       points to a load balancer DNS name and routes traffic to your load balancer.</p>
                */
            isAlias?: boolean;
            /**
                * <p>The type of domain entry, such as address for IPv4 (A), address for IPv6 (AAAA), canonical
                *       name (CNAME), mail exchanger (MX), name server (NS), start of authority (SOA), service locator
                *       (SRV), or text (TXT).</p>
                *          <p>The following domain entry types can be used:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>A</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>AAAA</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CNAME</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MX</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NS</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SOA</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SRV</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>TXT</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            type?: string;
            /**
                * @deprecated
                *
                * <p>(Deprecated) The options for the domain entry.</p>
                *          <note>
                *             <p>In releases prior to November 29, 2017, this parameter was not included in the API
                *         response. It is now deprecated.</p>
                *          </note>
                */
            options?: Record<string, string>;
    }
    export namespace DomainEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainEntry) => any;
    }
    export interface CreateDomainEntryRequest {
            /**
                * <p>The domain name (e.g., <code>example.com</code>) for which you want to create the domain
                *       entry.</p>
                */
            domainName: string | undefined;
            /**
                * <p>An array of key-value pairs containing information about the domain entry request.</p>
                */
            domainEntry: DomainEntry | undefined;
    }
    export namespace CreateDomainEntryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDomainEntryRequest) => any;
    }
    export interface CreateDomainEntryResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace CreateDomainEntryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDomainEntryResult) => any;
    }
    export interface CreateInstancesRequest {
            /**
                * <p>The names to use for your new Lightsail instances. Separate multiple values using
                *       quotation marks and commas, for example:
                *       <code>["MyFirstInstance","MySecondInstance"]</code>
                *          </p>
                */
            instanceNames: string[] | undefined;
            /**
                * <p>The Availability Zone in which to create your instance. Use the following format:
                *         <code>us-east-2a</code> (case sensitive). You can get a list of Availability Zones by using
                *       the <a href="http://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRegions.html">get
                *         regions</a> operation. Be sure to add the <code>include Availability Zones</code>
                *       parameter to your request.</p>
                */
            availabilityZone: string | undefined;
            /**
                * @deprecated
                *
                * <p>(Deprecated) The name for your custom image.</p>
                *          <note>
                *             <p>In releases prior to June 12, 2017, this parameter was ignored by the API. It is now
                *         deprecated.</p>
                *          </note>
                */
            customImageName?: string;
            /**
                * <p>The ID for a virtual private server image (e.g., <code>app_wordpress_4_4</code> or
                *         <code>app_lamp_7_0</code>). Use the <code>get blueprints</code> operation to return a list
                *       of available images (or <i>blueprints</i>).</p>
                *          <note>
                *             <p>Use active blueprints when creating new instances. Inactive blueprints are listed to
                *         support customers with existing instances and are not necessarily available to create new
                *         instances. Blueprints are marked inactive when they become outdated due to operating system
                *         updates or new application releases.</p>
                *          </note>
                */
            blueprintId: string | undefined;
            /**
                * <p>The bundle of specification information for your virtual private server (or
                *         <i>instance</i>), including the pricing plan (e.g.,
                *       <code>micro_1_0</code>).</p>
                */
            bundleId: string | undefined;
            /**
                * <p>A launch script you can create that configures a server with additional user data. For
                *       example, you might want to run <code>apt-get -y update</code>.</p>
                *          <note>
                *             <p>Depending on the machine image you choose, the command to get software on your instance
                *         varies. Amazon Linux and CentOS use <code>yum</code>, Debian and Ubuntu use
                *           <code>apt-get</code>, and FreeBSD uses <code>pkg</code>. For a complete list, see the
                *           <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/compare-options-choose-lightsail-instance-image">Amazon Lightsail Developer Guide</a>.</p>
                *          </note>
                */
            userData?: string;
            /**
                * <p>The name of your key pair.</p>
                */
            keyPairName?: string;
            /**
                * <p>The tag keys and optional values to add to the resource during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
            /**
                * <p>An array of objects representing the add-ons to enable for the new instance.</p>
                */
            addOns?: AddOnRequest[];
            /**
                * <p>The IP address type for the instance.</p>
                *
                *          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
                *       IPv4 and IPv6.</p>
                *
                *          <p>The default value is <code>dualstack</code>.</p>
                */
            ipAddressType?: IpAddressType | string;
    }
    export namespace CreateInstancesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateInstancesRequest) => any;
    }
    export interface CreateInstancesResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateInstancesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateInstancesResult) => any;
    }
    export interface CreateInstancesFromSnapshotRequest {
            /**
                * <p>The names for your new instances.</p>
                */
            instanceNames: string[] | undefined;
            /**
                * <p>An object containing information about one or more disk mappings.</p>
                */
            attachedDiskMapping?: Record<string, DiskMap[]>;
            /**
                * <p>The Availability Zone where you want to create your instances. Use the following
                *       formatting: <code>us-east-2a</code> (case sensitive). You can get a list of Availability Zones
                *       by using the <a href="http://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetRegions.html">get
                *         regions</a> operation. Be sure to add the <code>include Availability Zones</code>
                *       parameter to your request.</p>
                */
            availabilityZone: string | undefined;
            /**
                * <p>The name of the instance snapshot on which you are basing your new instances. Use the get
                *       instance snapshots operation to return information about your existing snapshots.</p>
                *          <p>Constraint:</p>
                *          <ul>
                *             <li>
                *                <p>This parameter cannot be defined together with the <code>source instance name</code>
                *           parameter. The <code>instance snapshot name</code> and <code>source instance name</code>
                *           parameters are mutually exclusive.</p>
                *             </li>
                *          </ul>
                */
            instanceSnapshotName?: string;
            /**
                * <p>The bundle of specification information for your virtual private server (or
                *         <i>instance</i>), including the pricing plan (e.g.,
                *       <code>micro_1_0</code>).</p>
                */
            bundleId: string | undefined;
            /**
                * <p>You can create a launch script that configures a server with additional user data. For
                *       example, <code>apt-get -y update</code>.</p>
                *          <note>
                *             <p>Depending on the machine image you choose, the command to get software on your instance
                *         varies. Amazon Linux and CentOS use <code>yum</code>, Debian and Ubuntu use
                *           <code>apt-get</code>, and FreeBSD uses <code>pkg</code>. For a complete list, see the
                *           <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/compare-options-choose-lightsail-instance-image">Amazon Lightsail Developer Guide</a>.</p>
                *          </note>
                */
            userData?: string;
            /**
                * <p>The name for your key pair.</p>
                */
            keyPairName?: string;
            /**
                * <p>The tag keys and optional values to add to the resource during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
            /**
                * <p>An array of objects representing the add-ons to enable for the new instance.</p>
                */
            addOns?: AddOnRequest[];
            /**
                * <p>The IP address type for the instance.</p>
                *
                *          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
                *       IPv4 and IPv6.</p>
                *
                *          <p>The default value is <code>dualstack</code>.</p>
                */
            ipAddressType?: IpAddressType | string;
            /**
                * <p>The name of the source instance from which the source automatic snapshot was
                *       created.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>This parameter cannot be defined together with the <code>instance snapshot name</code>
                *           parameter. The <code>source instance name</code> and <code>instance snapshot name</code>
                *           parameters are mutually exclusive.</p>
                *             </li>
                *             <li>
                *                <p>Define this parameter only when creating a new instance from an automatic snapshot.
                *           For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
                *             </li>
                *          </ul>
                */
            sourceInstanceName?: string;
            /**
                * <p>The date of the automatic snapshot to use for the new instance. Use the <code>get auto
                *         snapshots</code> operation to identify the dates of the available automatic
                *       snapshots.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must be specified in <code>YYYY-MM-DD</code> format.</p>
                *             </li>
                *             <li>
                *                <p>This parameter cannot be defined together with the <code>use latest restorable auto
                *             snapshot</code> parameter. The <code>restore date</code> and <code>use latest restorable
                *             auto snapshot</code> parameters are mutually exclusive.</p>
                *             </li>
                *             <li>
                *                <p>Define this parameter only when creating a new instance from an automatic snapshot.
                *           For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
                *             </li>
                *          </ul>
                */
            restoreDate?: string;
            /**
                * <p>A Boolean value to indicate whether to use the latest available automatic snapshot.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>This parameter cannot be defined together with the <code>restore date</code>
                *           parameter. The <code>use latest restorable auto snapshot</code> and <code>restore
                *             date</code> parameters are mutually exclusive.</p>
                *             </li>
                *             <li>
                *                <p>Define this parameter only when creating a new instance from an automatic snapshot.
                *           For more information, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configuring-automatic-snapshots">Amazon Lightsail Developer Guide</a>.</p>
                *             </li>
                *          </ul>
                */
            useLatestRestorableAutoSnapshot?: boolean;
    }
    export namespace CreateInstancesFromSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateInstancesFromSnapshotRequest) => any;
    }
    export interface CreateInstancesFromSnapshotResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateInstancesFromSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateInstancesFromSnapshotResult) => any;
    }
    export interface CreateInstanceSnapshotRequest {
            /**
                * <p>The name for your new snapshot.</p>
                */
            instanceSnapshotName: string | undefined;
            /**
                * <p>The Lightsail instance on which to base your snapshot.</p>
                */
            instanceName: string | undefined;
            /**
                * <p>The tag keys and optional values to add to the resource during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateInstanceSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateInstanceSnapshotRequest) => any;
    }
    export interface CreateInstanceSnapshotResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateInstanceSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateInstanceSnapshotResult) => any;
    }
    export interface CreateKeyPairRequest {
            /**
                * <p>The name for your new key pair.</p>
                */
            keyPairName: string | undefined;
            /**
                * <p>The tag keys and optional values to add to the resource during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateKeyPairRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateKeyPairRequest) => any;
    }
    /**
        * <p>Describes an SSH key pair.</p>
        */
    export interface KeyPair {
            /**
                * <p>The friendly name of the SSH key pair.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the key pair (e.g.,
                *         <code>arn:aws:lightsail:us-east-2:123456789101:KeyPair/05859e3d-331d-48ba-9034-12345EXAMPLE</code>).</p>
                */
            arn?: string;
            /**
                * <p>The support code. Include this code in your email to support when you have questions about
                *       an instance or another resource in Lightsail. This code enables our support team to look up
                *       your Lightsail information more easily.</p>
                */
            supportCode?: string;
            /**
                * <p>The timestamp when the key pair was created (e.g., <code>1479816991.349</code>).</p>
                */
            createdAt?: Date;
            /**
                * <p>The region name and Availability Zone where the key pair was created.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The resource type (usually <code>KeyPair</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The tag keys and optional values for the resource. For more information about tags in
                *       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
            /**
                * <p>The RSA fingerprint of the key pair.</p>
                */
            fingerprint?: string;
    }
    export namespace KeyPair {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KeyPair) => any;
    }
    export interface CreateKeyPairResult {
            /**
                * <p>An array of key-value pairs containing information about the new key pair you just
                *       created.</p>
                */
            keyPair?: KeyPair;
            /**
                * <p>A base64-encoded public key of the <code>ssh-rsa</code> type.</p>
                */
            publicKeyBase64?: string;
            /**
                * <p>A base64-encoded RSA private key.</p>
                */
            privateKeyBase64?: string;
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace CreateKeyPairResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateKeyPairResult) => any;
    }
    export interface CreateLoadBalancerRequest {
            /**
                * <p>The name of your load balancer.</p>
                */
            loadBalancerName: string | undefined;
            /**
                * <p>The instance port where you're creating your load balancer.</p>
                */
            instancePort: number | undefined;
            /**
                * <p>The path you provided to perform the load balancer health check. If you didn't specify a
                *       health check path, Lightsail uses the root path of your website (e.g.,
                *       <code>"/"</code>).</p>
                *          <p>You may want to specify a custom health check path other than the root of your application
                *       if your home page loads slowly or has a lot of media or scripting on it.</p>
                */
            healthCheckPath?: string;
            /**
                * <p>The name of the SSL/TLS certificate.</p>
                *          <p>If you specify <code>certificateName</code>, then <code>certificateDomainName</code> is
                *       required (and vice-versa).</p>
                */
            certificateName?: string;
            /**
                * <p>The domain name with which your certificate is associated (e.g.,
                *       <code>example.com</code>).</p>
                *          <p>If you specify <code>certificateDomainName</code>, then <code>certificateName</code> is
                *       required (and vice-versa).</p>
                */
            certificateDomainName?: string;
            /**
                * <p>The optional alternative domains and subdomains to use with your SSL/TLS certificate
                *       (e.g., <code>www.example.com</code>, <code>example.com</code>, <code>m.example.com</code>,
                *         <code>blog.example.com</code>).</p>
                */
            certificateAlternativeNames?: string[];
            /**
                * <p>The tag keys and optional values to add to the resource during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
            /**
                * <p>The IP address type for the load balancer.</p>
                *
                *          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
                *       IPv4 and IPv6.</p>
                *
                *          <p>The default value is <code>dualstack</code>.</p>
                */
            ipAddressType?: IpAddressType | string;
            /**
                * <p>The name of the TLS policy to apply to the load balancer.</p>
                *
                *          <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetLoadBalancerTlsPolicies.html">GetLoadBalancerTlsPolicies</a> action to get a list of TLS policy names that you can
                *       specify.</p>
                *
                *          <p>For more information about load balancer TLS policies, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy">Configuring TLS security policies on your Amazon Lightsail load
                *         balancers</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
                */
            tlsPolicyName?: string;
    }
    export namespace CreateLoadBalancerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoadBalancerRequest) => any;
    }
    export interface CreateLoadBalancerResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateLoadBalancerResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoadBalancerResult) => any;
    }
    export interface CreateLoadBalancerTlsCertificateRequest {
            /**
                * <p>The load balancer name where you want to create the SSL/TLS certificate.</p>
                */
            loadBalancerName: string | undefined;
            /**
                * <p>The SSL/TLS certificate name.</p>
                *          <p>You can have up to 10 certificates in your account at one time. Each Lightsail load
                *       balancer can have up to 2 certificates associated with it at one time. There is also an
                *       overall limit to the number of certificates that can be issue in a 365-day period. For more
                *       information, see <a href="http://docs.aws.amazon.com/acm/latest/userguide/acm-limits.html">Limits</a>.</p>
                */
            certificateName: string | undefined;
            /**
                * <p>The domain name (e.g., <code>example.com</code>) for your SSL/TLS certificate.</p>
                */
            certificateDomainName: string | undefined;
            /**
                * <p>An array of strings listing alternative domains and subdomains for your SSL/TLS
                *       certificate. Lightsail will de-dupe the names for you. You can have a maximum of 9
                *       alternative names (in addition to the 1 primary domain). We do not support wildcards (e.g.,
                *         <code>*.example.com</code>).</p>
                */
            certificateAlternativeNames?: string[];
            /**
                * <p>The tag keys and optional values to add to the resource during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateLoadBalancerTlsCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoadBalancerTlsCertificateRequest) => any;
    }
    export interface CreateLoadBalancerTlsCertificateResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateLoadBalancerTlsCertificateResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoadBalancerTlsCertificateResult) => any;
    }
    export interface CreateRelationalDatabaseRequest {
            /**
                * <p>The name to use for your new Lightsail database resource.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p>
                *             </li>
                *             <li>
                *                <p>The first and last character must be a letter or number.</p>
                *             </li>
                *          </ul>
                */
            relationalDatabaseName: string | undefined;
            /**
                * <p>The Availability Zone in which to create your new database. Use the
                *         <code>us-east-2a</code> case-sensitive format.</p>
                *          <p>You can get a list of Availability Zones by using the <code>get regions</code> operation.
                *       Be sure to add the <code>include relational database Availability Zones</code> parameter to
                *       your request.</p>
                */
            availabilityZone?: string;
            /**
                * <p>The blueprint ID for your new database. A blueprint describes the major engine version of
                *       a database.</p>
                *          <p>You can get a list of database blueprints IDs by using the <code>get relational database
                *         blueprints</code> operation.</p>
                */
            relationalDatabaseBlueprintId: string | undefined;
            /**
                * <p>The bundle ID for your new database. A bundle describes the performance specifications for
                *       your database.</p>
                *          <p>You can get a list of database bundle IDs by using the <code>get relational database
                *         bundles</code> operation.</p>
                */
            relationalDatabaseBundleId: string | undefined;
            /**
                * <p>The meaning of this parameter differs according to the database engine you use.</p>
                *          <p>
                *             <b>MySQL</b>
                *          </p>
                *          <p>The name of the database to create when the Lightsail database resource is created. If
                *       this parameter isn't specified, no database is created in the database resource.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must contain 1 to 64 letters or numbers.</p>
                *             </li>
                *             <li>
                *                <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits
                *           (0- 9).</p>
                *             </li>
                *             <li>
                *                <p>Can't be a word reserved by the specified database engine.</p>
                *                <p>For more information about reserved words in MySQL, see the Keywords and Reserved
                *           Words articles for <a href="https://dev.mysql.com/doc/refman/5.6/en/keywords.html">MySQL 5.6</a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/keywords.html">MySQL 5.7</a>, and <a href="https://dev.mysql.com/doc/refman/8.0/en/keywords.html">MySQL 8.0</a>.</p>
                *             </li>
                *          </ul>
                *          <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *          <p>The name of the database to create when the Lightsail database resource is created. If
                *       this parameter isn't specified, a database named <code>postgres</code> is created in the
                *       database resource.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must contain 1 to 63 letters or numbers.</p>
                *             </li>
                *             <li>
                *                <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits
                *           (0- 9).</p>
                *             </li>
                *             <li>
                *                <p>Can't be a word reserved by the specified database engine.</p>
                *                <p>For more information about reserved words in PostgreSQL, see the SQL Key Words
                *           articles for <a href="https://www.postgresql.org/docs/9.6/sql-keywords-appendix.html">PostgreSQL 9.6</a>, <a href="https://www.postgresql.org/docs/10/sql-keywords-appendix.html">PostgreSQL
                *             10</a>, <a href="https://www.postgresql.org/docs/11/sql-keywords-appendix.html">PostgreSQL 11</a>, and <a href="https://www.postgresql.org/docs/12/sql-keywords-appendix.html">PostgreSQL
                *             12</a>.</p>
                *             </li>
                *          </ul>
                */
            masterDatabaseName: string | undefined;
            /**
                * <p>The name for the master user.</p>
                *          <p>
                *             <b>MySQL</b>
                *          </p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Required for MySQL.</p>
                *             </li>
                *             <li>
                *                <p>Must be 1 to 16 letters or numbers. Can contain underscores.</p>
                *             </li>
                *             <li>
                *                <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                <p>Can't be a reserved word for the chosen database engine.</p>
                *                <p>For more information about reserved words in MySQL 5.6 or 5.7, see the Keywords and
                *           Reserved Words articles for <a href="https://dev.mysql.com/doc/refman/5.6/en/keywords.html">MySQL 5.6</a>, <a href="https://dev.mysql.com/doc/refman/5.7/en/keywords.html">MySQL 5.7</a>, or <a href="https://dev.mysql.com/doc/refman/8.0/en/keywords.html">MySQL 8.0</a>.</p>
                *             </li>
                *          </ul>
                *          <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Required for PostgreSQL.</p>
                *             </li>
                *             <li>
                *                <p>Must be 1 to 63 letters or numbers. Can contain underscores.</p>
                *             </li>
                *             <li>
                *                <p>First character must be a letter.</p>
                *             </li>
                *             <li>
                *                <p>Can't be a reserved word for the chosen database engine.</p>
                *                <p>For more information about reserved words in MySQL 5.6 or 5.7, see the Keywords and
                *           Reserved Words articles for <a href="https://www.postgresql.org/docs/9.6/sql-keywords-appendix.html">PostgreSQL
                *             9.6</a>, <a href="https://www.postgresql.org/docs/10/sql-keywords-appendix.html">PostgreSQL 10</a>, <a href="https://www.postgresql.org/docs/11/sql-keywords-appendix.html">PostgreSQL
                *             11</a>, and <a href="https://www.postgresql.org/docs/12/sql-keywords-appendix.html">PostgreSQL
                *             12</a>.</p>
                *             </li>
                *          </ul>
                */
            masterUsername: string | undefined;
            /**
                * <p>The password for the master user. The password can include any printable ASCII character
                *       except "/", """, or "@". It cannot contain spaces.</p>
                *          <p>
                *             <b>MySQL</b>
                *          </p>
                *          <p>Constraints: Must contain from 8 to 41 characters.</p>
                *          <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *          <p>Constraints: Must contain from 8 to 128 characters.</p>
                */
            masterUserPassword?: string;
            /**
                * <p>The daily time range during which automated backups are created for your new database if
                *       automated backups are enabled.</p>
                *          <p>The default is a 30-minute window selected at random from an 8-hour block of time for each
                *       AWS Region. For more information about the preferred backup window time blocks for each
                *       region, see the <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Working With Backups</a> guide in the Amazon Relational Database Service (Amazon RDS) documentation.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must be in the <code>hh24:mi-hh24:mi</code> format.</p>
                *                <p>Example: <code>16:00-16:30</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Specified in Coordinated Universal Time (UTC).</p>
                *             </li>
                *             <li>
                *                <p>Must not conflict with the preferred maintenance window.</p>
                *             </li>
                *             <li>
                *                <p>Must be at least 30 minutes.</p>
                *             </li>
                *          </ul>
                */
            preferredBackupWindow?: string;
            /**
                * <p>The weekly time range during which system maintenance can occur on your new
                *       database.</p>
                *          <p>The default is a 30-minute window selected at random from an 8-hour block of time for each
                *       AWS Region, occurring on a random day of the week.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.</p>
                *             </li>
                *             <li>
                *                <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
                *             </li>
                *             <li>
                *                <p>Must be at least 30 minutes.</p>
                *             </li>
                *             <li>
                *                <p>Specified in Coordinated Universal Time (UTC).</p>
                *             </li>
                *             <li>
                *                <p>Example: <code>Tue:17:00-Tue:17:30</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            preferredMaintenanceWindow?: string;
            /**
                * <p>Specifies the accessibility options for your new database. A value of <code>true</code>
                *       specifies a database that is available to resources outside of your Lightsail account. A
                *       value of <code>false</code> specifies a database that is available only to your Lightsail
                *       resources in the same region as your database.</p>
                */
            publiclyAccessible?: boolean;
            /**
                * <p>The tag keys and optional values to add to the resource during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateRelationalDatabaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRelationalDatabaseRequest) => any;
    }
    export interface CreateRelationalDatabaseResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateRelationalDatabaseResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRelationalDatabaseResult) => any;
    }
    export interface CreateRelationalDatabaseFromSnapshotRequest {
            /**
                * <p>The name to use for your new Lightsail database resource.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p>
                *             </li>
                *             <li>
                *                <p>The first and last character must be a letter or number.</p>
                *             </li>
                *          </ul>
                */
            relationalDatabaseName: string | undefined;
            /**
                * <p>The Availability Zone in which to create your new database. Use the
                *         <code>us-east-2a</code> case-sensitive format.</p>
                *          <p>You can get a list of Availability Zones by using the <code>get regions</code> operation.
                *       Be sure to add the <code>include relational database Availability Zones</code> parameter to
                *       your request.</p>
                */
            availabilityZone?: string;
            /**
                * <p>Specifies the accessibility options for your new database. A value of <code>true</code>
                *       specifies a database that is available to resources outside of your Lightsail account. A
                *       value of <code>false</code> specifies a database that is available only to your Lightsail
                *       resources in the same region as your database.</p>
                */
            publiclyAccessible?: boolean;
            /**
                * <p>The name of the database snapshot from which to create your new database.</p>
                */
            relationalDatabaseSnapshotName?: string;
            /**
                * <p>The bundle ID for your new database. A bundle describes the performance specifications for
                *       your database.</p>
                *          <p>You can get a list of database bundle IDs by using the <code>get relational database
                *         bundles</code> operation.</p>
                *          <p>When creating a new database from a snapshot, you cannot choose a bundle that is smaller
                *       than the bundle of the source database.</p>
                */
            relationalDatabaseBundleId?: string;
            /**
                * <p>The name of the source database.</p>
                */
            sourceRelationalDatabaseName?: string;
            /**
                * <p>The date and time to restore your database from.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must be before the latest restorable time for the database.</p>
                *             </li>
                *             <li>
                *                <p>Cannot be specified if the <code>use latest restorable time</code> parameter is
                *             <code>true</code>.</p>
                *             </li>
                *             <li>
                *                <p>Specified in Coordinated Universal Time (UTC).</p>
                *             </li>
                *             <li>
                *                <p>Specified in the Unix time format.</p>
                *                <p>For example, if you wish to use a restore time of October 1, 2018, at 8 PM UTC, then
                *           you input <code>1538424000</code> as the restore time.</p>
                *             </li>
                *          </ul>
                */
            restoreTime?: Date;
            /**
                * <p>Specifies whether your database is restored from the latest backup time. A value of
                *         <code>true</code> restores from the latest backup time. </p>
                *          <p>Default: <code>false</code>
                *          </p>
                *          <p>Constraints: Cannot be specified if the <code>restore time</code> parameter is
                *       provided.</p>
                */
            useLatestRestorableTime?: boolean;
            /**
                * <p>The tag keys and optional values to add to the resource during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateRelationalDatabaseFromSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRelationalDatabaseFromSnapshotRequest) => any;
    }
    export interface CreateRelationalDatabaseFromSnapshotResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateRelationalDatabaseFromSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRelationalDatabaseFromSnapshotResult) => any;
    }
    export interface CreateRelationalDatabaseSnapshotRequest {
            /**
                * <p>The name of the database on which to base your new snapshot.</p>
                */
            relationalDatabaseName: string | undefined;
            /**
                * <p>The name for your new database snapshot.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p>
                *             </li>
                *             <li>
                *                <p>The first and last character must be a letter or number.</p>
                *             </li>
                *          </ul>
                */
            relationalDatabaseSnapshotName: string | undefined;
            /**
                * <p>The tag keys and optional values to add to the resource during create.</p>
                *          <p>Use the <code>TagResource</code> action to tag a resource after it's created.</p>
                */
            tags?: Tag[];
    }
    export namespace CreateRelationalDatabaseSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRelationalDatabaseSnapshotRequest) => any;
    }
    export interface CreateRelationalDatabaseSnapshotResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace CreateRelationalDatabaseSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRelationalDatabaseSnapshotResult) => any;
    }
    export interface DeleteAlarmRequest {
            /**
                * <p>The name of the alarm to delete.</p>
                */
            alarmName: string | undefined;
    }
    export namespace DeleteAlarmRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAlarmRequest) => any;
    }
    export interface DeleteAlarmResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteAlarmResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAlarmResult) => any;
    }
    export interface DeleteAutoSnapshotRequest {
            /**
                * <p>The name of the source instance or disk from which to delete the automatic
                *       snapshot.</p>
                */
            resourceName: string | undefined;
            /**
                * <p>The date of the automatic snapshot to delete in <code>YYYY-MM-DD</code> format. Use the
                *         <code>get auto snapshots</code> operation to get the available automatic snapshots for a
                *       resource.</p>
                */
            date: string | undefined;
    }
    export namespace DeleteAutoSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAutoSnapshotRequest) => any;
    }
    export interface DeleteAutoSnapshotResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteAutoSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAutoSnapshotResult) => any;
    }
    export interface DeleteBucketRequest {
            /**
                * <p>The name of the bucket to delete.</p>
                *
                *          <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBuckets.html">GetBuckets</a> action to get a list of bucket names
                *       that you can specify.</p>
                */
            bucketName: string | undefined;
            /**
                * <p>A Boolean value that indicates whether to force delete the bucket.</p>
                *
                *          <p>You must force delete the bucket if it has one of the following conditions:</p>
                *          <ul>
                *             <li>
                *                <p>The bucket is the origin of a distribution.</p>
                *             </li>
                *             <li>
                *                <p>The bucket has instances that were granted access to it using the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html">SetResourceAccessForBucket</a> action.</p>
                *             </li>
                *             <li>
                *                <p>The bucket has objects.</p>
                *             </li>
                *             <li>
                *                <p>The bucket has access keys.</p>
                *             </li>
                *          </ul>
                *
                *          <important>
                *             <p>Force deleting a bucket might impact other resources that rely on the bucket, such as
                *         instances, distributions, or software that use the issued access keys.</p>
                *          </important>
                */
            forceDelete?: boolean;
    }
    export namespace DeleteBucketRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBucketRequest) => any;
    }
    export interface DeleteBucketResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteBucketResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBucketResult) => any;
    }
    export interface DeleteBucketAccessKeyRequest {
            /**
                * <p>The name of the bucket that the access key belongs to.</p>
                */
            bucketName: string | undefined;
            /**
                * <p>The ID of the access key to delete.</p>
                *
                *          <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketAccessKeys.html">GetBucketAccessKeys</a> action to get a
                *       list of access key IDs that you can specify.</p>
                */
            accessKeyId: string | undefined;
    }
    export namespace DeleteBucketAccessKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBucketAccessKeyRequest) => any;
    }
    export interface DeleteBucketAccessKeyResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteBucketAccessKeyResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteBucketAccessKeyResult) => any;
    }
    export interface DeleteCertificateRequest {
            /**
                * <p>The name of the certificate to delete.</p>
                *          <p>Use the <code>GetCertificates</code> action to get a list of certificate names that you
                *       can specify.</p>
                */
            certificateName: string | undefined;
    }
    export namespace DeleteCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCertificateRequest) => any;
    }
    export interface DeleteCertificateResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteCertificateResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteCertificateResult) => any;
    }
    export interface DeleteContactMethodRequest {
            /**
                * <p>The protocol that will be deleted, such as <code>Email</code> or <code>SMS</code> (text
                *       messaging).</p>
                *          <note>
                *             <p>To delete an <code>Email</code> and an <code>SMS</code> contact method if you added
                *         both, you must run separate <code>DeleteContactMethod</code> actions to delete each
                *         protocol.</p>
                *          </note>
                */
            protocol: ContactProtocol | string | undefined;
    }
    export namespace DeleteContactMethodRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteContactMethodRequest) => any;
    }
    export interface DeleteContactMethodResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteContactMethodResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteContactMethodResult) => any;
    }
    export interface DeleteContainerImageRequest {
            /**
                * <p>The name of the container service for which to delete a registered container image.</p>
                */
            serviceName: string | undefined;
            /**
                * <p>The name of the container image to delete from the container service.</p>
                *
                *          <p>Use the <code>GetContainerImages</code> action to get the name of the container images
                *       that are registered to a container service.</p>
                *
                *          <note>
                *             <p>Container images sourced from your Lightsail container service, that are registered
                *         and stored on your service, start with a colon (<code>:</code>). For example,
                *           <code>:container-service-1.mystaticwebsite.1</code>. Container images sourced from a
                *         public registry like Docker Hub don't start with a colon. For example,
                *           <code>nginx:latest</code> or <code>nginx</code>.</p>
                *          </note>
                */
            image: string | undefined;
    }
    export namespace DeleteContainerImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteContainerImageRequest) => any;
    }
    export interface DeleteContainerImageResult {
    }
    export namespace DeleteContainerImageResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteContainerImageResult) => any;
    }
    export interface DeleteContainerServiceRequest {
            /**
                * <p>The name of the container service to delete.</p>
                */
            serviceName: string | undefined;
    }
    export namespace DeleteContainerServiceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteContainerServiceRequest) => any;
    }
    export interface DeleteContainerServiceResult {
    }
    export namespace DeleteContainerServiceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteContainerServiceResult) => any;
    }
    export interface DeleteDiskRequest {
            /**
                * <p>The unique name of the disk you want to delete (e.g., <code>my-disk</code>).</p>
                */
            diskName: string | undefined;
            /**
                * <p>A Boolean value to indicate whether to delete the enabled add-ons for the disk.</p>
                */
            forceDeleteAddOns?: boolean;
    }
    export namespace DeleteDiskRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDiskRequest) => any;
    }
    export interface DeleteDiskResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteDiskResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDiskResult) => any;
    }
    export interface DeleteDiskSnapshotRequest {
            /**
                * <p>The name of the disk snapshot you want to delete (e.g.,
                *       <code>my-disk-snapshot</code>).</p>
                */
            diskSnapshotName: string | undefined;
    }
    export namespace DeleteDiskSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDiskSnapshotRequest) => any;
    }
    export interface DeleteDiskSnapshotResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteDiskSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDiskSnapshotResult) => any;
    }
    export interface DeleteDistributionRequest {
            /**
                * <p>The name of the distribution to delete.</p>
                *          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
                *       can specify.</p>
                */
            distributionName?: string;
    }
    export namespace DeleteDistributionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDistributionRequest) => any;
    }
    export interface DeleteDistributionResult {
            /**
                * <p>An object that describes the result of the action, such as the status of the request, the
                *       timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace DeleteDistributionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDistributionResult) => any;
    }
    export interface DeleteDomainRequest {
            /**
                * <p>The specific domain name to delete.</p>
                */
            domainName: string | undefined;
    }
    export namespace DeleteDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainRequest) => any;
    }
    export interface DeleteDomainResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace DeleteDomainResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainResult) => any;
    }
    export interface DeleteDomainEntryRequest {
            /**
                * <p>The name of the domain entry to delete.</p>
                */
            domainName: string | undefined;
            /**
                * <p>An array of key-value pairs containing information about your domain entries.</p>
                */
            domainEntry: DomainEntry | undefined;
    }
    export namespace DeleteDomainEntryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainEntryRequest) => any;
    }
    export interface DeleteDomainEntryResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace DeleteDomainEntryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainEntryResult) => any;
    }
    export interface DeleteInstanceRequest {
            /**
                * <p>The name of the instance to delete.</p>
                */
            instanceName: string | undefined;
            /**
                * <p>A Boolean value to indicate whether to delete the enabled add-ons for the disk.</p>
                */
            forceDeleteAddOns?: boolean;
    }
    export namespace DeleteInstanceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInstanceRequest) => any;
    }
    export interface DeleteInstanceResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInstanceResult) => any;
    }
    export interface DeleteInstanceSnapshotRequest {
            /**
                * <p>The name of the snapshot to delete.</p>
                */
            instanceSnapshotName: string | undefined;
    }
    export namespace DeleteInstanceSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInstanceSnapshotRequest) => any;
    }
    export interface DeleteInstanceSnapshotResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteInstanceSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInstanceSnapshotResult) => any;
    }
    export interface DeleteKeyPairRequest {
            /**
                * <p>The name of the key pair to delete.</p>
                */
            keyPairName: string | undefined;
            /**
                * <p>The RSA fingerprint of the Lightsail default key pair to delete.</p>
                *          <note>
                *             <p>The <code>expectedFingerprint</code> parameter is required only when specifying to
                *         delete a Lightsail default key pair.</p>
                *          </note>
                */
            expectedFingerprint?: string;
    }
    export namespace DeleteKeyPairRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteKeyPairRequest) => any;
    }
    export interface DeleteKeyPairResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace DeleteKeyPairResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteKeyPairResult) => any;
    }
    export interface DeleteKnownHostKeysRequest {
            /**
                * <p>The name of the instance for which you want to reset the host key or certificate.</p>
                */
            instanceName: string | undefined;
    }
    export namespace DeleteKnownHostKeysRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteKnownHostKeysRequest) => any;
    }
    export interface DeleteKnownHostKeysResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteKnownHostKeysResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteKnownHostKeysResult) => any;
    }
    export interface DeleteLoadBalancerRequest {
            /**
                * <p>The name of the load balancer you want to delete.</p>
                */
            loadBalancerName: string | undefined;
    }
    export namespace DeleteLoadBalancerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoadBalancerRequest) => any;
    }
    export interface DeleteLoadBalancerResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteLoadBalancerResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoadBalancerResult) => any;
    }
    export interface DeleteLoadBalancerTlsCertificateRequest {
            /**
                * <p>The load balancer name.</p>
                */
            loadBalancerName: string | undefined;
            /**
                * <p>The SSL/TLS certificate name.</p>
                */
            certificateName: string | undefined;
            /**
                * <p>When <code>true</code>, forces the deletion of an SSL/TLS certificate.</p>
                *          <p>There can be two certificates associated with a Lightsail load balancer: the primary and
                *       the backup. The <code>force</code> parameter is required when the primary SSL/TLS certificate
                *       is in use by an instance attached to the load balancer.</p>
                */
            force?: boolean;
    }
    export namespace DeleteLoadBalancerTlsCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoadBalancerTlsCertificateRequest) => any;
    }
    export interface DeleteLoadBalancerTlsCertificateResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteLoadBalancerTlsCertificateResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoadBalancerTlsCertificateResult) => any;
    }
    export interface DeleteRelationalDatabaseRequest {
            /**
                * <p>The name of the database that you are deleting.</p>
                */
            relationalDatabaseName: string | undefined;
            /**
                * <p>Determines whether a final database snapshot is created before your database is deleted.
                *       If <code>true</code> is specified, no database snapshot is created. If <code>false</code> is
                *       specified, a database snapshot is created before your database is deleted.</p>
                *          <p>You must specify the <code>final relational database snapshot name</code> parameter if the
                *         <code>skip final snapshot</code> parameter is <code>false</code>.</p>
                *          <p>Default: <code>false</code>
                *          </p>
                */
            skipFinalSnapshot?: boolean;
            /**
                * <p>The name of the database snapshot created if <code>skip final snapshot</code> is
                *         <code>false</code>, which is the default value for that parameter.</p>
                *          <note>
                *             <p>Specifying this parameter and also specifying the <code>skip final snapshot</code>
                *         parameter to <code>true</code> results in an error.</p>
                *          </note>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must contain from 2 to 255 alphanumeric characters, or hyphens.</p>
                *             </li>
                *             <li>
                *                <p>The first and last character must be a letter or number.</p>
                *             </li>
                *          </ul>
                */
            finalRelationalDatabaseSnapshotName?: string;
    }
    export namespace DeleteRelationalDatabaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRelationalDatabaseRequest) => any;
    }
    export interface DeleteRelationalDatabaseResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteRelationalDatabaseResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRelationalDatabaseResult) => any;
    }
    export interface DeleteRelationalDatabaseSnapshotRequest {
            /**
                * <p>The name of the database snapshot that you are deleting.</p>
                */
            relationalDatabaseSnapshotName: string | undefined;
    }
    export namespace DeleteRelationalDatabaseSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRelationalDatabaseSnapshotRequest) => any;
    }
    export interface DeleteRelationalDatabaseSnapshotResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DeleteRelationalDatabaseSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRelationalDatabaseSnapshotResult) => any;
    }
    export interface DetachCertificateFromDistributionRequest {
            /**
                * <p>The name of the distribution from which to detach the certificate.</p>
                *          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
                *       can specify.</p>
                */
            distributionName: string | undefined;
    }
    export namespace DetachCertificateFromDistributionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachCertificateFromDistributionRequest) => any;
    }
    export interface DetachCertificateFromDistributionResult {
            /**
                * <p>An object that describes the result of the action, such as the status of the request, the
                *       timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace DetachCertificateFromDistributionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachCertificateFromDistributionResult) => any;
    }
    export interface DetachDiskRequest {
            /**
                * <p>The unique name of the disk you want to detach from your instance (e.g.,
                *         <code>my-disk</code>).</p>
                */
            diskName: string | undefined;
    }
    export namespace DetachDiskRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachDiskRequest) => any;
    }
    export interface DetachDiskResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DetachDiskResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachDiskResult) => any;
    }
    export interface DetachInstancesFromLoadBalancerRequest {
            /**
                * <p>The name of the Lightsail load balancer.</p>
                */
            loadBalancerName: string | undefined;
            /**
                * <p>An array of strings containing the names of the instances you want to detach from the load
                *       balancer.</p>
                */
            instanceNames: string[] | undefined;
    }
    export namespace DetachInstancesFromLoadBalancerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachInstancesFromLoadBalancerRequest) => any;
    }
    export interface DetachInstancesFromLoadBalancerResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DetachInstancesFromLoadBalancerResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachInstancesFromLoadBalancerResult) => any;
    }
    export interface DetachStaticIpRequest {
            /**
                * <p>The name of the static IP to detach from the instance.</p>
                */
            staticIpName: string | undefined;
    }
    export namespace DetachStaticIpRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachStaticIpRequest) => any;
    }
    export interface DetachStaticIpResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DetachStaticIpResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachStaticIpResult) => any;
    }
    export interface DisableAddOnRequest {
            /**
                * <p>The add-on type to disable.</p>
                */
            addOnType: AddOnType | string | undefined;
            /**
                * <p>The name of the source resource for which to disable the add-on.</p>
                */
            resourceName: string | undefined;
    }
    export namespace DisableAddOnRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableAddOnRequest) => any;
    }
    export interface DisableAddOnResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace DisableAddOnResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisableAddOnResult) => any;
    }
    export enum DiskState {
            Available = "available",
            Error = "error",
            InUse = "in-use",
            Pending = "pending",
            Unknown = "unknown"
    }
    /**
        * <p>Describes a block storage disk.</p>
        */
    export interface Disk {
            /**
                * <p>The unique name of the disk.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the disk.</p>
                */
            arn?: string;
            /**
                * <p>The support code. Include this code in your email to support when you have questions about
                *       an instance or another resource in Lightsail. This code enables our support team to look up
                *       your Lightsail information more easily.</p>
                */
            supportCode?: string;
            /**
                * <p>The date when the disk was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The AWS Region and Availability Zone where the disk is located.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The Lightsail resource type (e.g., <code>Disk</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The tag keys and optional values for the resource. For more information about tags in
                *       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
            /**
                * <p>An array of objects representing the add-ons enabled on the disk.</p>
                */
            addOns?: AddOn[];
            /**
                * <p>The size of the disk in GB.</p>
                */
            sizeInGb?: number;
            /**
                * <p>A Boolean value indicating whether this disk is a system disk (has an operating system
                *       loaded on it).</p>
                */
            isSystemDisk?: boolean;
            /**
                * <p>The input/output operations per second (IOPS) of the disk.</p>
                */
            iops?: number;
            /**
                * <p>The disk path.</p>
                */
            path?: string;
            /**
                * <p>Describes the status of the disk.</p>
                */
            state?: DiskState | string;
            /**
                * <p>The resources to which the disk is attached.</p>
                */
            attachedTo?: string;
            /**
                * <p>A Boolean value indicating whether the disk is attached.</p>
                */
            isAttached?: boolean;
            /**
                * @deprecated
                *
                * <p>(Deprecated) The attachment state of the disk.</p>
                *          <note>
                *             <p>In releases prior to November 14, 2017, this parameter returned <code>attached</code>
                *         for system disks in the API response. It is now deprecated, but still included in the
                *         response. Use <code>isAttached</code> instead.</p>
                *          </note>
                */
            attachmentState?: string;
            /**
                * @deprecated
                *
                * <p>(Deprecated) The number of GB in use by the disk.</p>
                *          <note>
                *             <p>In releases prior to November 14, 2017, this parameter was not included in the API
                *         response. It is now deprecated.</p>
                *          </note>
                */
            gbInUse?: number;
    }
    export namespace Disk {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Disk) => any;
    }
    /**
        * <p>Describes a disk.</p>
        */
    export interface DiskInfo {
            /**
                * <p>The disk name.</p>
                */
            name?: string;
            /**
                * <p>The disk path.</p>
                */
            path?: string;
            /**
                * <p>The size of the disk in GB (e.g., <code>32</code>).</p>
                */
            sizeInGb?: number;
            /**
                * <p>A Boolean value indicating whether this disk is a system disk (has an operating system
                *       loaded on it).</p>
                */
            isSystemDisk?: boolean;
    }
    export namespace DiskInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DiskInfo) => any;
    }
    export enum DiskSnapshotState {
            Completed = "completed",
            Error = "error",
            Pending = "pending",
            Unknown = "unknown"
    }
    /**
        * <p>Describes a block storage disk snapshot.</p>
        */
    export interface DiskSnapshot {
            /**
                * <p>The name of the disk snapshot (e.g., <code>my-disk-snapshot</code>).</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the disk snapshot.</p>
                */
            arn?: string;
            /**
                * <p>The support code. Include this code in your email to support when you have questions about
                *       an instance or another resource in Lightsail. This code enables our support team to look up
                *       your Lightsail information more easily.</p>
                */
            supportCode?: string;
            /**
                * <p>The date when the disk snapshot was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The AWS Region and Availability Zone where the disk snapshot was created.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The Lightsail resource type (e.g., <code>DiskSnapshot</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The tag keys and optional values for the resource. For more information about tags in
                *       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
            /**
                * <p>The size of the disk in GB.</p>
                */
            sizeInGb?: number;
            /**
                * <p>The status of the disk snapshot operation.</p>
                */
            state?: DiskSnapshotState | string;
            /**
                * <p>The progress of the snapshot.</p>
                */
            progress?: string;
            /**
                * <p>The unique name of the source disk from which the disk snapshot was created.</p>
                */
            fromDiskName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the source disk from which the disk snapshot was
                *       created.</p>
                */
            fromDiskArn?: string;
            /**
                * <p>The unique name of the source instance from which the disk (system volume) snapshot was
                *       created.</p>
                */
            fromInstanceName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the source instance from which the disk (system volume)
                *       snapshot was created.</p>
                */
            fromInstanceArn?: string;
            /**
                * <p>A Boolean value indicating whether the snapshot was created from an automatic
                *       snapshot.</p>
                */
            isFromAutoSnapshot?: boolean;
    }
    export namespace DiskSnapshot {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DiskSnapshot) => any;
    }
    /**
        * <p>Describes a disk snapshot.</p>
        */
    export interface DiskSnapshotInfo {
            /**
                * <p>The size of the disk in GB (e.g., <code>32</code>).</p>
                */
            sizeInGb?: number;
    }
    export namespace DiskSnapshotInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DiskSnapshotInfo) => any;
    }
    /**
        * <p>Describes the specifications of a distribution bundle.</p>
        */
    export interface DistributionBundle {
            /**
                * <p>The ID of the bundle.</p>
                */
            bundleId?: string;
            /**
                * <p>The name of the distribution bundle.</p>
                */
            name?: string;
            /**
                * <p>The monthly price, in US dollars, of the bundle.</p>
                */
            price?: number;
            /**
                * <p>The monthly network transfer quota of the bundle.</p>
                */
            transferPerMonthInGb?: number;
            /**
                * <p>Indicates whether the bundle is active, and can be specified for a new or existing
                *       distribution.</p>
                */
            isActive?: boolean;
    }
    export namespace DistributionBundle {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DistributionBundle) => any;
    }
    export enum DistributionMetricName {
            BytesDownloaded = "BytesDownloaded",
            BytesUploaded = "BytesUploaded",
            Http4xxErrorRate = "Http4xxErrorRate",
            Http5xxErrorRate = "Http5xxErrorRate",
            Requests = "Requests",
            TotalErrorRate = "TotalErrorRate"
    }
    /**
        * <p>Describes a domain where you are storing recordsets.</p>
        */
    export interface Domain {
            /**
                * <p>The name of the domain.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the domain recordset (e.g.,
                *         <code>arn:aws:lightsail:global:123456789101:Domain/824cede0-abc7-4f84-8dbc-12345EXAMPLE</code>).</p>
                */
            arn?: string;
            /**
                * <p>The support code. Include this code in your email to support when you have questions about
                *       an instance or another resource in Lightsail. This code enables our support team to look up
                *       your Lightsail information more easily.</p>
                */
            supportCode?: string;
            /**
                * <p>The date when the domain recordset was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The AWS Region and Availability Zones where the domain recordset was created.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The resource type. </p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The tag keys and optional values for the resource. For more information about tags in
                *       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
            /**
                * <p>An array of key-value pairs containing information about the domain entries.</p>
                */
            domainEntries?: DomainEntry[];
    }
    export namespace Domain {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Domain) => any;
    }
    export interface DownloadDefaultKeyPairRequest {
    }
    export namespace DownloadDefaultKeyPairRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DownloadDefaultKeyPairRequest) => any;
    }
    export interface DownloadDefaultKeyPairResult {
            /**
                * <p>A base64-encoded public key of the <code>ssh-rsa</code> type.</p>
                */
            publicKeyBase64?: string;
            /**
                * <p>A base64-encoded RSA private key.</p>
                */
            privateKeyBase64?: string;
            /**
                * <p>The timestamp when the default key pair was created.</p>
                */
            createdAt?: Date;
    }
    export namespace DownloadDefaultKeyPairResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DownloadDefaultKeyPairResult) => any;
    }
    export interface EnableAddOnRequest {
            /**
                * <p>The name of the source resource for which to enable or modify the add-on.</p>
                */
            resourceName: string | undefined;
            /**
                * <p>An array of strings representing the add-on to enable or modify.</p>
                */
            addOnRequest: AddOnRequest | undefined;
    }
    export namespace EnableAddOnRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableAddOnRequest) => any;
    }
    export interface EnableAddOnResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace EnableAddOnResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableAddOnResult) => any;
    }
    export interface ExportSnapshotRequest {
            /**
                * <p>The name of the instance or disk snapshot to be exported to Amazon EC2.</p>
                */
            sourceSnapshotName: string | undefined;
    }
    export namespace ExportSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportSnapshotRequest) => any;
    }
    export interface ExportSnapshotResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace ExportSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportSnapshotResult) => any;
    }
    /**
        * <p>Describes an instance snapshot.</p>
        */
    export interface InstanceSnapshotInfo {
            /**
                * <p>The bundle ID from which the source instance was created (e.g.,
                *       <code>micro_1_0</code>).</p>
                */
            fromBundleId?: string;
            /**
                * <p>The blueprint ID from which the source instance (e.g., <code>os_debian_8_3</code>).</p>
                */
            fromBlueprintId?: string;
            /**
                * <p>A list of objects describing the disks that were attached to the source instance.</p>
                */
            fromDiskInfo?: DiskInfo[];
    }
    export namespace InstanceSnapshotInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceSnapshotInfo) => any;
    }
    export enum ExportSnapshotRecordSourceType {
            DiskSnapshot = "DiskSnapshot",
            InstanceSnapshot = "InstanceSnapshot"
    }
    /**
        * <p>Describes the source of an export snapshot record.</p>
        */
    export interface ExportSnapshotRecordSourceInfo {
            /**
                * <p>The Lightsail resource type (e.g., <code>InstanceSnapshot</code> or
                *         <code>DiskSnapshot</code>).</p>
                */
            resourceType?: ExportSnapshotRecordSourceType | string;
            /**
                * <p>The date when the source instance or disk snapshot was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The name of the source instance or disk snapshot.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the source instance or disk snapshot.</p>
                */
            arn?: string;
            /**
                * <p>The name of the snapshot's source instance or disk.</p>
                */
            fromResourceName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the snapshot's source instance or disk.</p>
                */
            fromResourceArn?: string;
            /**
                * <p>A list of objects describing an instance snapshot.</p>
                */
            instanceSnapshotInfo?: InstanceSnapshotInfo;
            /**
                * <p>A list of objects describing a disk snapshot.</p>
                */
            diskSnapshotInfo?: DiskSnapshotInfo;
    }
    export namespace ExportSnapshotRecordSourceInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportSnapshotRecordSourceInfo) => any;
    }
    /**
        * <p>Describes an export snapshot record.</p>
        */
    export interface ExportSnapshotRecord {
            /**
                * <p>The export snapshot record name.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the export snapshot record.</p>
                */
            arn?: string;
            /**
                * <p>The date when the export snapshot record was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The AWS Region and Availability Zone where the export snapshot record is located.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The Lightsail resource type (e.g., <code>ExportSnapshotRecord</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The state of the export snapshot record.</p>
                */
            state?: RecordState | string;
            /**
                * <p>A list of objects describing the source of the export snapshot record.</p>
                */
            sourceInfo?: ExportSnapshotRecordSourceInfo;
            /**
                * <p>A list of objects describing the destination of the export snapshot record.</p>
                */
            destinationInfo?: DestinationInfo;
    }
    export namespace ExportSnapshotRecord {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExportSnapshotRecord) => any;
    }
    export interface GetActiveNamesRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetActiveNames</code> request. If your
                *       results are paginated, the response will return a next page token that you can specify as the
                *       page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetActiveNamesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetActiveNamesRequest) => any;
    }
    export interface GetActiveNamesResult {
            /**
                * <p>The list of active names returned by the get active names request.</p>
                */
            activeNames?: string[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetActiveNames</code> request and
                *       specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetActiveNamesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetActiveNamesResult) => any;
    }
    export interface GetAlarmsRequest {
            /**
                * <p>The name of the alarm.</p>
                *          <p>Specify an alarm name to return information about a specific alarm.</p>
                */
            alarmName?: string;
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetAlarms</code> request. If your results
                *       are paginated, the response will return a next page token that you can specify as the page
                *       token in a subsequent request.</p>
                */
            pageToken?: string;
            /**
                * <p>The name of the Lightsail resource being monitored by the alarm.</p>
                *          <p>Specify a monitored resource name to return information about all alarms for a specific
                *       resource.</p>
                */
            monitoredResourceName?: string;
    }
    export namespace GetAlarmsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAlarmsRequest) => any;
    }
    export interface GetAlarmsResult {
            /**
                * <p>An array of objects that describe the alarms.</p>
                */
            alarms?: Alarm[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetAlarms</code> request and
                *       specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetAlarmsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAlarmsResult) => any;
    }
    export interface GetAutoSnapshotsRequest {
            /**
                * <p>The name of the source instance or disk from which to get automatic snapshot
                *       information.</p>
                */
            resourceName: string | undefined;
    }
    export namespace GetAutoSnapshotsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAutoSnapshotsRequest) => any;
    }
    export interface GetAutoSnapshotsResult {
            /**
                * <p>The name of the source instance or disk for the automatic snapshots.</p>
                */
            resourceName?: string;
            /**
                * <p>The resource type (e.g., <code>Instance</code> or <code>Disk</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>An array of objects that describe the automatic snapshots that are available for the
                *       specified source instance or disk.</p>
                */
            autoSnapshots?: AutoSnapshotDetails[];
    }
    export namespace GetAutoSnapshotsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAutoSnapshotsResult) => any;
    }
    export interface GetBlueprintsRequest {
            /**
                * <p>A Boolean value that indicates whether to include inactive (unavailable) blueprints in the
                *       response of your request.</p>
                */
            includeInactive?: boolean;
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetBlueprints</code> request. If your
                *       results are paginated, the response will return a next page token that you can specify as the
                *       page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetBlueprintsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBlueprintsRequest) => any;
    }
    export interface GetBlueprintsResult {
            /**
                * <p>An array of key-value pairs that contains information about the available
                *       blueprints.</p>
                */
            blueprints?: Blueprint[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetBlueprints</code> request and
                *       specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetBlueprintsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBlueprintsResult) => any;
    }
    export interface GetBucketAccessKeysRequest {
            /**
                * <p>The name of the bucket for which to return access keys.</p>
                */
            bucketName: string | undefined;
    }
    export namespace GetBucketAccessKeysRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBucketAccessKeysRequest) => any;
    }
    export interface GetBucketAccessKeysResult {
            /**
                * <p>An object that describes the access keys for the specified bucket.</p>
                */
            accessKeys?: AccessKey[];
    }
    export namespace GetBucketAccessKeysResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBucketAccessKeysResult) => any;
    }
    export interface GetBucketBundlesRequest {
            /**
                * <p>A Boolean value that indicates whether to include inactive (unavailable) bundles in the
                *       response of your request.</p>
                */
            includeInactive?: boolean;
    }
    export namespace GetBucketBundlesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBucketBundlesRequest) => any;
    }
    export interface GetBucketBundlesResult {
            /**
                * <p>An object that describes bucket bundles.</p>
                */
            bundles?: BucketBundle[];
    }
    export namespace GetBucketBundlesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBucketBundlesResult) => any;
    }
    export interface GetBucketMetricDataRequest {
            /**
                * <p>The name of the bucket for which to get metric data.</p>
                */
            bucketName: string | undefined;
            /**
                * <p>The metric for which you want to return information.</p>
                *
                *          <p>Valid bucket metric names are listed below, along with the most useful statistics to
                *       include in your request, and the published unit value.</p>
                *
                *          <note>
                *             <p>These bucket metrics are reported once per day.</p>
                *          </note>
                *
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>BucketSizeBytes</code>
                *                   </b> - The amount of data in
                *           bytes stored in a bucket. This value is calculated by summing the size of all objects in
                *           the bucket (including object versions), including the size of all parts for all incomplete
                *           multipart uploads to the bucket.</p>
                *                <p>Statistics: The most useful statistic is <code>Maximum</code>.</p>
                *                <p>Unit: The published unit is <code>Bytes</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>NumberOfObjects</code>
                *                   </b> - The total number of
                *           objects stored in a bucket. This value is calculated by counting all objects in the bucket
                *           (including object versions) and the total number of parts for all incomplete multipart
                *           uploads to the bucket.</p>
                *                <p>Statistics: The most useful statistic is <code>Average</code>.</p>
                *                <p>Unit: The published unit is <code>Count</code>.</p>
                *             </li>
                *          </ul>
                */
            metricName: BucketMetricName | string | undefined;
            /**
                * <p>The timestamp indicating the earliest data to be returned.</p>
                */
            startTime: Date | undefined;
            /**
                * <p>The timestamp indicating the latest data to be returned.</p>
                */
            endTime: Date | undefined;
            /**
                * <p>The granularity, in seconds, of the returned data points.</p>
                *          <note>
                *             <p>Bucket storage metrics are reported once per day. Therefore, you should specify a period
                *         of 86400 seconds, which is the number of seconds in a day.</p>
                *          </note>
                */
            period: number | undefined;
            /**
                * <p>The statistic for the metric.</p>
                *
                *          <p>The following statistics are available:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Minimum</code> - The lowest value observed during the specified period. Use this
                *           value to determine low volumes of activity for your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Maximum</code> - The highest value observed during the specified period. Use
                *           this value to determine high volumes of activity for your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Sum</code> - The sum of all values submitted for the matching metric. You can
                *           use this statistic to determine the total volume of a metric.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Average</code> - The value of <code>Sum</code> / <code>SampleCount</code> during
                *           the specified period. By comparing this statistic with the <code>Minimum</code> and
                *             <code>Maximum</code> values, you can determine the full scope of a metric and how close
                *           the average use is to the <code>Minimum</code> and <code>Maximum</code> values. This
                *           comparison helps you to know when to increase or decrease your resources.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SampleCount</code> - The count, or number, of data points used for the
                *           statistical calculation.</p>
                *             </li>
                *          </ul>
                */
            statistics: (MetricStatistic | string)[] | undefined;
            /**
                * <p>The unit for the metric data request.</p>
                *          <p>Valid units depend on the metric data being requested. For the valid units with each
                *       available metric, see the <code>metricName</code> parameter.</p>
                */
            unit: MetricUnit | string | undefined;
    }
    export namespace GetBucketMetricDataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBucketMetricDataRequest) => any;
    }
    /**
        * <p>Describes the metric data point.</p>
        */
    export interface MetricDatapoint {
            /**
                * <p>The average.</p>
                */
            average?: number;
            /**
                * <p>The maximum.</p>
                */
            maximum?: number;
            /**
                * <p>The minimum.</p>
                */
            minimum?: number;
            /**
                * <p>The sample count.</p>
                */
            sampleCount?: number;
            /**
                * <p>The sum.</p>
                */
            sum?: number;
            /**
                * <p>The timestamp (e.g., <code>1479816991.349</code>).</p>
                */
            timestamp?: Date;
            /**
                * <p>The unit. </p>
                */
            unit?: MetricUnit | string;
    }
    export namespace MetricDatapoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetricDatapoint) => any;
    }
    export interface GetBucketMetricDataResult {
            /**
                * <p>The name of the metric returned.</p>
                */
            metricName?: BucketMetricName | string;
            /**
                * <p>An array of objects that describe the metric data returned.</p>
                */
            metricData?: MetricDatapoint[];
    }
    export namespace GetBucketMetricDataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBucketMetricDataResult) => any;
    }
    export interface GetBucketsRequest {
            /**
                * <p>The name of the bucket for which to return information.</p>
                *
                *          <p>When omitted, the response includes all of your buckets in the Amazon Web Services Region
                *       where the request is made.</p>
                */
            bucketName?: string;
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *
                *          <p>To get a page token, perform an initial <code>GetBuckets</code> request. If your results
                *       are paginated, the response will return a next page token that you can specify as the page
                *       token in a subsequent request.</p>
                */
            pageToken?: string;
            /**
                * <p>A Boolean value that indicates whether to include Lightsail instances that were given
                *       access to the bucket using the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_SetResourceAccessForBucket.html">SetResourceAccessForBucket</a>
                *       action.</p>
                */
            includeConnectedResources?: boolean;
    }
    export namespace GetBucketsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBucketsRequest) => any;
    }
    export interface GetBucketsResult {
            /**
                * <p>An array of objects that describe buckets.</p>
                */
            buckets?: Bucket[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *
                *          <p>To get the next page of results, perform another <code>GetBuckets</code> request and
                *       specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
            /**
                * <p>An object that describes the synchronization status of the Amazon S3 account-level
                *       block public access feature for your Lightsail buckets.</p>
                *
                *          <p>For more information about this feature and how it affects Lightsail buckets, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-block-public-access-for-buckets">Block public access for buckets in Amazon Lightsail</a>.</p>
                */
            accountLevelBpaSync?: AccountLevelBpaSync;
    }
    export namespace GetBucketsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBucketsResult) => any;
    }
    export interface GetBundlesRequest {
            /**
                * <p>A Boolean value that indicates whether to include inactive (unavailable) bundles in the
                *       response of your request.</p>
                */
            includeInactive?: boolean;
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetBundles</code> request. If your results
                *       are paginated, the response will return a next page token that you can specify as the page
                *       token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetBundlesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBundlesRequest) => any;
    }
    export interface GetBundlesResult {
            /**
                * <p>An array of key-value pairs that contains information about the available bundles.</p>
                */
            bundles?: Bundle[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetBundles</code> request and
                *       specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetBundlesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBundlesResult) => any;
    }
    export interface GetCertificatesRequest {
            /**
                * <p>The status of the certificates for which to return information.</p>
                *          <p>For example, specify <code>ISSUED</code> to return only certificates with an
                *         <code>ISSUED</code> status.</p>
                *          <p>When omitted, the response includes all of your certificates in the Amazon Web Services
                *       Region where the request is made, regardless of their current status.</p>
                */
            certificateStatuses?: (CertificateStatus | string)[];
            /**
                * <p>Indicates whether to include detailed information about the certificates in the
                *       response.</p>
                *          <p>When omitted, the response includes only the certificate names, Amazon Resource Names
                *       (ARNs), domain names, and tags.</p>
                */
            includeCertificateDetails?: boolean;
            /**
                * <p>The name for the certificate for which to return information.</p>
                *          <p>When omitted, the response includes all of your certificates in the Amazon Web Services
                *       Region where the request is made.</p>
                */
            certificateName?: string;
    }
    export namespace GetCertificatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCertificatesRequest) => any;
    }
    export interface GetCertificatesResult {
            /**
                * <p>An object that describes certificates.</p>
                */
            certificates?: CertificateSummary[];
    }
    export namespace GetCertificatesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCertificatesResult) => any;
    }
    export interface GetCloudFormationStackRecordsRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetClouFormationStackRecords</code> request.
                *       If your results are paginated, the response will return a next page token that you can specify
                *       as the page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetCloudFormationStackRecordsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCloudFormationStackRecordsRequest) => any;
    }
    export interface GetCloudFormationStackRecordsResult {
            /**
                * <p>A list of objects describing the CloudFormation stack records.</p>
                */
            cloudFormationStackRecords?: CloudFormationStackRecord[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another
                *         <code>GetCloudFormationStackRecords</code> request and specify the next page token using the
                *         <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetCloudFormationStackRecordsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCloudFormationStackRecordsResult) => any;
    }
    export interface GetContactMethodsRequest {
            /**
                * <p>The protocols used to send notifications, such as <code>Email</code>, or <code>SMS</code>
                *       (text messaging).</p>
                *          <p>Specify a protocol in your request to return information about a specific contact method
                *       protocol.</p>
                */
            protocols?: (ContactProtocol | string)[];
    }
    export namespace GetContactMethodsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContactMethodsRequest) => any;
    }
    export interface GetContactMethodsResult {
            /**
                * <p>An array of objects that describe the contact methods.</p>
                */
            contactMethods?: ContactMethod[];
    }
    export namespace GetContactMethodsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContactMethodsResult) => any;
    }
    export interface GetContainerAPIMetadataRequest {
    }
    export namespace GetContainerAPIMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerAPIMetadataRequest) => any;
    }
    export interface GetContainerAPIMetadataResult {
            /**
                * <p>Metadata about Lightsail containers, such as the current version of the Lightsail
                *       Control (lightsailctl) plugin.</p>
                */
            metadata?: Record<string, string>[];
    }
    export namespace GetContainerAPIMetadataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerAPIMetadataResult) => any;
    }
    export interface GetContainerImagesRequest {
            /**
                * <p>The name of the container service for which to return registered container images.</p>
                */
            serviceName: string | undefined;
    }
    export namespace GetContainerImagesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerImagesRequest) => any;
    }
    export interface GetContainerImagesResult {
            /**
                * <p>An array of objects that describe container images that are registered to the container
                *       service.</p>
                */
            containerImages?: ContainerImage[];
    }
    export namespace GetContainerImagesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerImagesResult) => any;
    }
    export interface GetContainerLogRequest {
            /**
                * <p>The name of the container service for which to get a container log.</p>
                */
            serviceName: string | undefined;
            /**
                * <p>The name of the container that is either running or previously ran on the container
                *       service for which to return a log.</p>
                */
            containerName: string | undefined;
            /**
                * <p>The start of the time interval for which to get log data.</p>
                *
                *          <p>Constraints:</p>
                *
                *          <ul>
                *             <li>
                *                <p>Specified in Coordinated Universal Time (UTC).</p>
                *             </li>
                *             <li>
                *                <p>Specified in the Unix time format.</p>
                *
                *                <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, specify
                *             <code>1538424000</code> as the start time.</p>
                *             </li>
                *          </ul>
                *
                *          <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p>
                */
            startTime?: Date;
            /**
                * <p>The end of the time interval for which to get log data.</p>
                *
                *          <p>Constraints:</p>
                *
                *          <ul>
                *             <li>
                *                <p>Specified in Coordinated Universal Time (UTC).</p>
                *             </li>
                *             <li>
                *                <p>Specified in the Unix time format.</p>
                *
                *                <p>For example, if you wish to use an end time of October 1, 2018, at 9 PM UTC, specify
                *             <code>1538427600</code> as the end time.</p>
                *             </li>
                *          </ul>
                *
                *          <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p>
                */
            endTime?: Date;
            /**
                * <p>The pattern to use to filter the returned log events to a specific term.</p>
                *
                *          <p>The following are a few examples of filter patterns that you can specify:</p>
                *          <ul>
                *             <li>
                *                <p>To return all log events, specify a filter pattern of <code>""</code>.</p>
                *             </li>
                *             <li>
                *                <p>To exclude log events that contain the <code>ERROR</code> term, and return all other
                *           log events, specify a filter pattern of <code>"-ERROR"</code>.</p>
                *             </li>
                *             <li>
                *                <p>To return log events that contain the <code>ERROR</code> term, specify a filter
                *           pattern of <code>"ERROR"</code>.</p>
                *             </li>
                *             <li>
                *                <p>To return log events that contain both the <code>ERROR</code> and
                *             <code>Exception</code> terms, specify a filter pattern of <code>"ERROR
                *           Exception"</code>.</p>
                *             </li>
                *             <li>
                *                <p>To return log events that contain the <code>ERROR</code>
                *                   <i>or</i> the <code>Exception</code> term, specify a filter pattern of
                *             <code>"?ERROR ?Exception"</code>.</p>
                *             </li>
                *          </ul>
                */
            filterPattern?: string;
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *
                *          <p>To get a page token, perform an initial <code>GetContainerLog</code> request. If your
                *       results are paginated, the response will return a next page token that you can specify as the
                *       page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetContainerLogRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerLogRequest) => any;
    }
    export interface GetContainerLogResult {
            /**
                * <p>An array of objects that describe the log events of a container.</p>
                */
            logEvents?: ContainerServiceLogEvent[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *
                *          <p>To get the next page of results, perform another <code>GetContainerLog</code> request and
                *       specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetContainerLogResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerLogResult) => any;
    }
    export interface GetContainerServiceDeploymentsRequest {
            /**
                * <p>The name of the container service for which to return deployments.</p>
                */
            serviceName: string | undefined;
    }
    export namespace GetContainerServiceDeploymentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerServiceDeploymentsRequest) => any;
    }
    export interface GetContainerServiceDeploymentsResult {
            /**
                * <p>An array of objects that describe deployments for a container service.</p>
                */
            deployments?: ContainerServiceDeployment[];
    }
    export namespace GetContainerServiceDeploymentsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerServiceDeploymentsResult) => any;
    }
    export interface GetContainerServiceMetricDataRequest {
            /**
                * <p>The name of the container service for which to get metric data.</p>
                */
            serviceName: string | undefined;
            /**
                * <p>The metric for which you want to return information.</p>
                *
                *          <p>Valid container service metric names are listed below, along with the most useful
                *       statistics to include in your request, and the published unit value.</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>CPUUtilization</code> - The average percentage of compute units that are
                *           currently in use across all nodes of the container service. This metric identifies the
                *           processing power required to run containers on each node of the container service.</p>
                *                <p>Statistics: The most useful statistics are <code>Maximum</code> and
                *             <code>Average</code>.</p>
                *                <p>Unit: The published unit is <code>Percent</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MemoryUtilization</code> - The average percentage of available memory that is
                *           currently in use across all nodes of the container service. This metric identifies the
                *           memory required to run containers on each node of the container service.</p>
                *                <p>Statistics: The most useful statistics are <code>Maximum</code> and
                *             <code>Average</code>.</p>
                *                <p>Unit: The published unit is <code>Percent</code>.</p>
                *             </li>
                *          </ul>
                */
            metricName: ContainerServiceMetricName | string | undefined;
            /**
                * <p>The start time of the time period.</p>
                */
            startTime: Date | undefined;
            /**
                * <p>The end time of the time period.</p>
                */
            endTime: Date | undefined;
            /**
                * <p>The granularity, in seconds, of the returned data points.</p>
                *
                *          <p>All container service metric data is available in 5-minute (300 seconds)
                *       granularity.</p>
                */
            period: number | undefined;
            /**
                * <p>The statistic for the metric.</p>
                *
                *          <p>The following statistics are available:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Minimum</code> - The lowest value observed during the specified period. Use this
                *           value to determine low volumes of activity for your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Maximum</code> - The highest value observed during the specified period. Use
                *           this value to determine high volumes of activity for your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Sum</code> - All values submitted for the matching metric added together. You
                *           can use this statistic to determine the total volume of a metric.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Average</code> - The value of <code>Sum</code> / <code>SampleCount</code> during
                *           the specified period. By comparing this statistic with the <code>Minimum</code> and
                *             <code>Maximum</code> values, you can determine the full scope of a metric and how close
                *           the average use is to the <code>Minimum</code> and <code>Maximum</code> values. This
                *           comparison helps you to know when to increase or decrease your resources.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SampleCount</code> - The count, or number, of data points used for the
                *           statistical calculation.</p>
                *             </li>
                *          </ul>
                */
            statistics: (MetricStatistic | string)[] | undefined;
    }
    export namespace GetContainerServiceMetricDataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerServiceMetricDataRequest) => any;
    }
    export interface GetContainerServiceMetricDataResult {
            /**
                * <p>The name of the metric returned. </p>
                */
            metricName?: ContainerServiceMetricName | string;
            /**
                * <p>An array of objects that describe the metric data returned.</p>
                */
            metricData?: MetricDatapoint[];
    }
    export namespace GetContainerServiceMetricDataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerServiceMetricDataResult) => any;
    }
    export interface GetContainerServicePowersRequest {
    }
    export namespace GetContainerServicePowersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerServicePowersRequest) => any;
    }
    export interface GetContainerServicePowersResult {
            /**
                * <p>An array of objects that describe the powers that can be specified for a container
                *       service.</p>
                */
            powers?: ContainerServicePower[];
    }
    export namespace GetContainerServicePowersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerServicePowersResult) => any;
    }
    export interface GetContainerServicesRequest {
            /**
                * <p>The name of the container service for which to return information.</p>
                *
                *          <p>When omitted, the response includes all of your container services in the Amazon Web Services Region where the request is made.</p>
                */
            serviceName?: string;
    }
    export namespace GetContainerServicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContainerServicesRequest) => any;
    }
    export interface GetDiskRequest {
            /**
                * <p>The name of the disk (e.g., <code>my-disk</code>).</p>
                */
            diskName: string | undefined;
    }
    export namespace GetDiskRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDiskRequest) => any;
    }
    export interface GetDiskResult {
            /**
                * <p>An object containing information about the disk.</p>
                */
            disk?: Disk;
    }
    export namespace GetDiskResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDiskResult) => any;
    }
    export interface GetDisksRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetDisks</code> request. If your results are
                *       paginated, the response will return a next page token that you can specify as the page token
                *       in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetDisksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDisksRequest) => any;
    }
    export interface GetDisksResult {
            /**
                * <p>An array of objects containing information about all block storage disks.</p>
                */
            disks?: Disk[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetDisks</code> request and specify
                *       the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetDisksResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDisksResult) => any;
    }
    export interface GetDiskSnapshotRequest {
            /**
                * <p>The name of the disk snapshot (e.g., <code>my-disk-snapshot</code>).</p>
                */
            diskSnapshotName: string | undefined;
    }
    export namespace GetDiskSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDiskSnapshotRequest) => any;
    }
    export interface GetDiskSnapshotResult {
            /**
                * <p>An object containing information about the disk snapshot.</p>
                */
            diskSnapshot?: DiskSnapshot;
    }
    export namespace GetDiskSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDiskSnapshotResult) => any;
    }
    export interface GetDiskSnapshotsRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetDiskSnapshots</code> request. If your
                *       results are paginated, the response will return a next page token that you can specify as the
                *       page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetDiskSnapshotsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDiskSnapshotsRequest) => any;
    }
    export interface GetDiskSnapshotsResult {
            /**
                * <p>An array of objects containing information about all block storage disk snapshots.</p>
                */
            diskSnapshots?: DiskSnapshot[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetDiskSnapshots</code> request and
                *       specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetDiskSnapshotsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDiskSnapshotsResult) => any;
    }
    export interface GetDistributionBundlesRequest {
    }
    export namespace GetDistributionBundlesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDistributionBundlesRequest) => any;
    }
    export interface GetDistributionBundlesResult {
            /**
                * <p>An object that describes a distribution bundle.</p>
                */
            bundles?: DistributionBundle[];
    }
    export namespace GetDistributionBundlesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDistributionBundlesResult) => any;
    }
    export interface GetDistributionLatestCacheResetRequest {
            /**
                * <p>The name of the distribution for which to return the timestamp of the last cache
                *       reset.</p>
                *          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
                *       can specify.</p>
                *          <p>When omitted, the response includes the latest cache reset timestamp of all your
                *       distributions.</p>
                */
            distributionName?: string;
    }
    export namespace GetDistributionLatestCacheResetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDistributionLatestCacheResetRequest) => any;
    }
    export interface GetDistributionLatestCacheResetResult {
            /**
                * <p>The status of the last cache reset.</p>
                */
            status?: string;
            /**
                * <p>The timestamp of the last cache reset (e.g., <code>1479734909.17</code>) in Unix time
                *       format.</p>
                */
            createTime?: Date;
    }
    export namespace GetDistributionLatestCacheResetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDistributionLatestCacheResetResult) => any;
    }
    export interface GetDistributionMetricDataRequest {
            /**
                * <p>The name of the distribution for which to get metric data.</p>
                *          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
                *       can specify.</p>
                */
            distributionName: string | undefined;
            /**
                * <p>The metric for which you want to return information.</p>
                *          <p>Valid distribution metric names are listed below, along with the most useful
                *         <code>statistics</code> to include in your request, and the published <code>unit</code>
                *       value.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Requests</code>
                *                   </b> - The total number of viewer
                *           requests received by your Lightsail distribution, for all HTTP methods, and for both
                *           HTTP and HTTPS requests.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>None</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>BytesDownloaded</code>
                *                   </b> - The number of bytes
                *           downloaded by viewers for GET, HEAD, and OPTIONS requests.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>None</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>BytesUploaded </code>
                *                   </b> - The number of bytes
                *           uploaded to your origin by your Lightsail distribution, using POST and PUT
                *           requests.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>None</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>TotalErrorRate</code>
                *                   </b> - The percentage of all
                *           viewer requests for which the response's HTTP status code was 4xx or 5xx.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Percent</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>4xxErrorRate</code>
                *                   </b> - The percentage of all
                *           viewer requests for which the response's HTTP status cod was 4xx. In these cases, the
                *           client or client viewer may have made an error. For example, a status code of 404 (Not
                *           Found) means that the client requested an object that could not be found.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Percent</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>5xxErrorRate</code>
                *                   </b> - The percentage of all
                *           viewer requests for which the response's HTTP status code was 5xx. In these cases, the
                *           origin server did not satisfy the requests. For example, a status code of 503 (Service
                *           Unavailable) means that the origin server is currently unavailable.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Percent</code>.</p>
                *             </li>
                *          </ul>
                */
            metricName: DistributionMetricName | string | undefined;
            /**
                * <p>The start of the time interval for which to get metric data.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Specified in Coordinated Universal Time (UTC).</p>
                *             </li>
                *             <li>
                *                <p>Specified in the Unix time format.</p>
                *                <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, specify
                *             <code>1538424000</code> as the start time.</p>
                *             </li>
                *          </ul>
                *          <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p>
                */
            startTime: Date | undefined;
            /**
                * <p>The end of the time interval for which to get metric data.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Specified in Coordinated Universal Time (UTC).</p>
                *             </li>
                *             <li>
                *                <p>Specified in the Unix time format.</p>
                *                <p>For example, if you wish to use an end time of October 1, 2018, at 9 PM UTC, specify
                *             <code>1538427600</code> as the end time.</p>
                *             </li>
                *          </ul>
                *          <p>You can convert a human-friendly time to Unix time format using a converter like <a href="https://www.epochconverter.com/">Epoch converter</a>.</p>
                */
            endTime: Date | undefined;
            /**
                * <p>The granularity, in seconds, for the metric data points that will be returned.</p>
                */
            period: number | undefined;
            /**
                * <p>The unit for the metric data request.</p>
                *          <p>Valid units depend on the metric data being requested. For the valid units with each
                *       available metric, see the <code>metricName</code> parameter.</p>
                */
            unit: MetricUnit | string | undefined;
            /**
                * <p>The statistic for the metric.</p>
                *          <p>The following statistics are available:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Minimum</code> - The lowest value observed during the specified period. Use this
                *           value to determine low volumes of activity for your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Maximum</code> - The highest value observed during the specified period. Use
                *           this value to determine high volumes of activity for your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Sum</code> - All values submitted for the matching metric added together. You
                *           can use this statistic to determine the total volume of a metric.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Average</code> - The value of Sum / SampleCount during the specified period. By
                *           comparing this statistic with the Minimum and Maximum values, you can determine the full
                *           scope of a metric and how close the average use is to the Minimum and Maximum values. This
                *           comparison helps you to know when to increase or decrease your resources.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SampleCount</code> - The count, or number, of data points used for the
                *           statistical calculation.</p>
                *             </li>
                *          </ul>
                */
            statistics: (MetricStatistic | string)[] | undefined;
    }
    export namespace GetDistributionMetricDataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDistributionMetricDataRequest) => any;
    }
    export interface GetDistributionMetricDataResult {
            /**
                * <p>The name of the metric returned.</p>
                */
            metricName?: DistributionMetricName | string;
            /**
                * <p>An array of objects that describe the metric data returned.</p>
                */
            metricData?: MetricDatapoint[];
    }
    export namespace GetDistributionMetricDataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDistributionMetricDataResult) => any;
    }
    export interface GetDistributionsRequest {
            /**
                * <p>The name of the distribution for which to return information.</p>
                *
                *          <p>When omitted, the response includes all of your distributions in the Amazon Web Services
                *       Region where the request is made.</p>
                */
            distributionName?: string;
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetDistributions</code> request. If your
                *       results are paginated, the response will return a next page token that you can specify as the
                *       page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetDistributionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDistributionsRequest) => any;
    }
    export interface GetDistributionsResult {
            /**
                * <p>An array of objects that describe your distributions.</p>
                */
            distributions?: LightsailDistribution[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetDistributions</code> request and
                *       specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetDistributionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDistributionsResult) => any;
    }
    export interface GetDomainRequest {
            /**
                * <p>The domain name for which your want to return information about.</p>
                */
            domainName: string | undefined;
    }
    export namespace GetDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainRequest) => any;
    }
    export interface GetDomainResult {
            /**
                * <p>An array of key-value pairs containing information about your get domain request.</p>
                */
            domain?: Domain;
    }
    export namespace GetDomainResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainResult) => any;
    }
    export interface GetDomainsRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetDomains</code> request. If your results
                *       are paginated, the response will return a next page token that you can specify as the page
                *       token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetDomainsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainsRequest) => any;
    }
    export interface GetDomainsResult {
            /**
                * <p>An array of key-value pairs containing information about each of the domain entries in the
                *       user's account.</p>
                */
            domains?: Domain[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetDomains</code> request and
                *       specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetDomainsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainsResult) => any;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_1' {
    import { AccessDirection, AccessRules, AddOn, AlarmState, AvailabilityZone, Bucket, BucketAccessLogConfig, CacheBehavior, CacheBehaviorPerPath, CacheSettings, ComparisonOperator, ContactMethodVerificationProtocol, ContactProtocol, ContainerImage, ContainerService, ContainerServicePowerName, Disk, DomainEntry, ExportSnapshotRecord, InputOrigin, IpAddressType, KeyPair, MetricDatapoint, MetricName, MetricStatistic, MetricUnit, NetworkProtocol, Operation, PortInfo, PrivateRegistryAccessRequest, RegionName, ResourceLocation, ResourceType, Tag, TreatMissingData } from "@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/models_0";
    export interface GetExportSnapshotRecordsRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetExportSnapshotRecords</code> request. If
                *       your results are paginated, the response will return a next page token that you can specify as
                *       the page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetExportSnapshotRecordsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExportSnapshotRecordsRequest) => any;
    }
    export interface GetExportSnapshotRecordsResult {
            /**
                * <p>A list of objects describing the export snapshot records.</p>
                */
            exportSnapshotRecords?: ExportSnapshotRecord[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetExportSnapshotRecords</code>
                *       request and specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetExportSnapshotRecordsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExportSnapshotRecordsResult) => any;
    }
    export interface GetInstanceRequest {
            /**
                * <p>The name of the instance.</p>
                */
            instanceName: string | undefined;
    }
    export namespace GetInstanceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceRequest) => any;
    }
    /**
        * <p>Describes the hardware for the instance.</p>
        */
    export interface InstanceHardware {
            /**
                * <p>The number of vCPUs the instance has.</p>
                */
            cpuCount?: number;
            /**
                * <p>The disks attached to the instance.</p>
                */
            disks?: Disk[];
            /**
                * <p>The amount of RAM in GB on the instance (e.g., <code>1.0</code>).</p>
                */
            ramSizeInGb?: number;
    }
    export namespace InstanceHardware {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceHardware) => any;
    }
    /**
        * <p>Describes the monthly data transfer in and out of your virtual private server (or
        *         <i>instance</i>).</p>
        */
    export interface MonthlyTransfer {
            /**
                * <p>The amount allocated per month (in GB).</p>
                */
            gbPerMonthAllocated?: number;
    }
    export namespace MonthlyTransfer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MonthlyTransfer) => any;
    }
    export enum PortAccessType {
            Private = "Private",
            Public = "Public"
    }
    /**
        * <p>Describes information about ports for an Amazon Lightsail instance.</p>
        */
    export interface InstancePortInfo {
            /**
                * <p>The first port in a range of open ports on an instance.</p>
                *          <p>Allowed ports:</p>
                *          <ul>
                *             <li>
                *                <p>TCP and UDP - <code>0</code> to <code>65535</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>ICMP - The ICMP type for IPv4 addresses. For example, specify <code>8</code> as the
                *             <code>fromPort</code> (ICMP type), and <code>-1</code> as the <code>toPort</code> (ICMP
                *           code), to enable ICMP Ping. For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages">Control Messages</a> on <i>Wikipedia</i>.</p>
                *             </li>
                *             <li>
                *                <p>ICMPv6 - The ICMP type for IPv6 addresses. For example, specify <code>128</code> as
                *           the <code>fromPort</code> (ICMPv6 type), and <code>0</code> as <code>toPort</code> (ICMPv6
                *           code). For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6">Internet
                *             Control Message Protocol for IPv6</a>.</p>
                *             </li>
                *          </ul>
                */
            fromPort?: number;
            /**
                * <p>The last port in a range of open ports on an instance.</p>
                *          <p>Allowed ports:</p>
                *          <ul>
                *             <li>
                *                <p>TCP and UDP - <code>0</code> to <code>65535</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>ICMP - The ICMP code for IPv4 addresses. For example, specify <code>8</code> as the
                *             <code>fromPort</code> (ICMP type), and <code>-1</code> as the <code>toPort</code> (ICMP
                *           code), to enable ICMP Ping. For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages">Control Messages</a> on <i>Wikipedia</i>.</p>
                *             </li>
                *             <li>
                *                <p>ICMPv6 - The ICMP code for IPv6 addresses. For example, specify <code>128</code> as
                *           the <code>fromPort</code> (ICMPv6 type), and <code>0</code> as <code>toPort</code> (ICMPv6
                *           code). For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6">Internet
                *             Control Message Protocol for IPv6</a>.</p>
                *             </li>
                *          </ul>
                */
            toPort?: number;
            /**
                * <p>The IP protocol name.</p>
                *          <p>The name can be one of the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>tcp</code> - Transmission Control Protocol (TCP) provides reliable, ordered, and
                *           error-checked delivery of streamed data between applications running on hosts
                *           communicating by an IP network. If you have an application that doesn't require reliable
                *           data stream service, use UDP instead.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>all</code> - All transport layer protocol types. For more general information,
                *           see <a href="https://en.wikipedia.org/wiki/Transport_layer">Transport layer</a> on
                *             <i>Wikipedia</i>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>udp</code> - With User Datagram Protocol (UDP), computer applications can send
                *           messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior
                *           communications are not required to set up transmission channels or data paths.
                *           Applications that don't require reliable data stream service can use UDP, which provides a
                *           connectionless datagram service that emphasizes reduced latency over reliability. If you
                *           do require reliable data stream service, use TCP instead.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>icmp</code> - Internet Control Message Protocol (ICMP) is used to send error
                *           messages and operational information indicating success or failure when communicating with
                *           an instance. For example, an error is indicated when an instance could not be reached.
                *           When you specify <code>icmp</code> as the <code>protocol</code>, you must specify the ICMP
                *           type using the <code>fromPort</code> parameter, and ICMP code using the
                *             <code>toPort</code> parameter.</p>
                *             </li>
                *          </ul>
                */
            protocol?: NetworkProtocol | string;
            /**
                * <p>The location from which access is allowed. For example, <code>Anywhere (0.0.0.0/0)</code>,
                *       or <code>Custom</code> if a specific IP address or range of IP addresses is allowed.</p>
                */
            accessFrom?: string;
            /**
                * <p>The type of access (<code>Public</code> or <code>Private</code>).</p>
                */
            accessType?: PortAccessType | string;
            /**
                * <p>The common name of the port information.</p>
                */
            commonName?: string;
            /**
                * <p>The access direction (<code>inbound</code> or <code>outbound</code>).</p>
                *          <note>
                *             <p>Lightsail currently supports only <code>inbound</code> access direction.</p>
                *          </note>
                */
            accessDirection?: AccessDirection | string;
            /**
                * <p>The IPv4 address, or range of IPv4 addresses (in CIDR notation) that are allowed to
                *       connect to an instance through the ports, and the protocol.</p>
                *          <note>
                *             <p>The <code>ipv6Cidrs</code> parameter lists the IPv6 addresses that are allowed to
                *         connect to an instance.</p>
                *          </note>
                *          <p>For more information about CIDR block notation, see <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation">Classless
                *         Inter-Domain Routing</a> on <i>Wikipedia</i>.</p>
                */
            cidrs?: string[];
            /**
                * <p>The IPv6 address, or range of IPv6 addresses (in CIDR notation) that are allowed to
                *       connect to an instance through the ports, and the protocol. Only devices with an IPv6 address
                *       can connect to an instance through IPv6; otherwise, IPv4 should be used.</p>
                *          <note>
                *             <p>The <code>cidrs</code> parameter lists the IPv4 addresses that are allowed to connect to
                *         an instance.</p>
                *          </note>
                *          <p>For more information about CIDR block notation, see <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation">Classless
                *         Inter-Domain Routing</a> on <i>Wikipedia</i>.</p>
                */
            ipv6Cidrs?: string[];
            /**
                * <p>An alias that defines access for a preconfigured range of IP addresses.</p>
                *          <p>The only alias currently supported is <code>lightsail-connect</code>, which allows IP
                *       addresses of the browser-based RDP/SSH client in the Lightsail console to connect to your
                *       instance.</p>
                */
            cidrListAliases?: string[];
    }
    export namespace InstancePortInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstancePortInfo) => any;
    }
    /**
        * <p>Describes monthly data transfer rates and port information for an instance.</p>
        */
    export interface InstanceNetworking {
            /**
                * <p>The amount of data in GB allocated for monthly data transfers.</p>
                */
            monthlyTransfer?: MonthlyTransfer;
            /**
                * <p>An array of key-value pairs containing information about the ports on the instance.</p>
                */
            ports?: InstancePortInfo[];
    }
    export namespace InstanceNetworking {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceNetworking) => any;
    }
    /**
        * <p>Describes the virtual private server (or <i>instance</i>) status.</p>
        */
    export interface InstanceState {
            /**
                * <p>The status code for the instance.</p>
                */
            code?: number;
            /**
                * <p>The state of the instance (e.g., <code>running</code> or <code>pending</code>).</p>
                */
            name?: string;
    }
    export namespace InstanceState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceState) => any;
    }
    /**
        * <p>Describes an instance (a virtual private server).</p>
        */
    export interface Instance {
            /**
                * <p>The name the user gave the instance (e.g., <code>Amazon_Linux-1GB-Ohio-1</code>).</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the instance (e.g.,
                *         <code>arn:aws:lightsail:us-east-2:123456789101:Instance/244ad76f-8aad-4741-809f-12345EXAMPLE</code>).</p>
                */
            arn?: string;
            /**
                * <p>The support code. Include this code in your email to support when you have questions about
                *       an instance or another resource in Lightsail. This code enables our support team to look up
                *       your Lightsail information more easily.</p>
                */
            supportCode?: string;
            /**
                * <p>The timestamp when the instance was created (e.g., <code>1479734909.17</code>) in Unix
                *       time format.</p>
                */
            createdAt?: Date;
            /**
                * <p>The region name and Availability Zone where the instance is located.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The type of resource (usually <code>Instance</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The tag keys and optional values for the resource. For more information about tags in
                *       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
            /**
                * <p>The blueprint ID (e.g., <code>os_amlinux_2016_03</code>).</p>
                */
            blueprintId?: string;
            /**
                * <p>The friendly name of the blueprint (e.g., <code>Amazon Linux</code>).</p>
                */
            blueprintName?: string;
            /**
                * <p>The bundle for the instance (e.g., <code>micro_1_0</code>).</p>
                */
            bundleId?: string;
            /**
                * <p>An array of objects representing the add-ons enabled on the instance.</p>
                */
            addOns?: AddOn[];
            /**
                * <p>A Boolean value indicating whether this instance has a static IP assigned to it.</p>
                */
            isStaticIp?: boolean;
            /**
                * <p>The private IP address of the instance.</p>
                */
            privateIpAddress?: string;
            /**
                * <p>The public IP address of the instance.</p>
                */
            publicIpAddress?: string;
            /**
                * <p>The IPv6 addresses of the instance.</p>
                */
            ipv6Addresses?: string[];
            /**
                * <p>The IP address type of the instance.</p>
                *
                *          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
                *       IPv4 and IPv6.</p>
                */
            ipAddressType?: IpAddressType | string;
            /**
                * <p>The size of the vCPU and the amount of RAM for the instance.</p>
                */
            hardware?: InstanceHardware;
            /**
                * <p>Information about the public ports and monthly data transfer rates for the
                *       instance.</p>
                */
            networking?: InstanceNetworking;
            /**
                * <p>The status code and the state (e.g., <code>running</code>) for the instance.</p>
                */
            state?: InstanceState;
            /**
                * <p>The user name for connecting to the instance (e.g., <code>ec2-user</code>).</p>
                */
            username?: string;
            /**
                * <p>The name of the SSH key being used to connect to the instance (e.g.,
                *         <code>LightsailDefaultKeyPair</code>).</p>
                */
            sshKeyName?: string;
    }
    export namespace Instance {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Instance) => any;
    }
    export interface GetInstanceResult {
            /**
                * <p>An array of key-value pairs containing information about the specified instance.</p>
                */
            instance?: Instance;
    }
    export namespace GetInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceResult) => any;
    }
    export enum InstanceAccessProtocol {
            rdp = "rdp",
            ssh = "ssh"
    }
    export interface GetInstanceAccessDetailsRequest {
            /**
                * <p>The name of the instance to access.</p>
                */
            instanceName: string | undefined;
            /**
                * <p>The protocol to use to connect to your instance. Defaults to <code>ssh</code>.</p>
                */
            protocol?: InstanceAccessProtocol | string;
    }
    export namespace GetInstanceAccessDetailsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceAccessDetailsRequest) => any;
    }
    /**
        * <p>Describes the public SSH host keys or the RDP certificate.</p>
        */
    export interface HostKeyAttributes {
            /**
                * <p>The SSH host key algorithm or the RDP certificate format.</p>
                *          <p>For SSH host keys, the algorithm may be <code>ssh-rsa</code>,
                *         <code>ecdsa-sha2-nistp256</code>, <code>ssh-ed25519</code>, etc. For RDP certificates, the
                *       algorithm is always <code>x509-cert</code>.</p>
                */
            algorithm?: string;
            /**
                * <p>The public SSH host key or the RDP certificate.</p>
                */
            publicKey?: string;
            /**
                * <p>The time that the SSH host key or RDP certificate was recorded by Lightsail.</p>
                */
            witnessedAt?: Date;
            /**
                * <p>The SHA-1 fingerprint of the returned SSH host key or RDP certificate.</p>
                *          <ul>
                *             <li>
                *                <p>Example of an SHA-1 SSH fingerprint:</p>
                *                <p>
                *                   <code>SHA1:1CHH6FaAaXjtFOsR/t83vf91SR0</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Example of an SHA-1 RDP fingerprint:</p>
                *                <p>
                *                   <code>af:34:51:fe:09:f0:e0:da:b8:4e:56:ca:60:c2:10:ff:38:06:db:45</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            fingerprintSHA1?: string;
            /**
                * <p>The SHA-256 fingerprint of the returned SSH host key or RDP certificate.</p>
                *          <ul>
                *             <li>
                *                <p>Example of an SHA-256 SSH fingerprint:</p>
                *                <p>
                *                   <code>SHA256:KTsMnRBh1IhD17HpdfsbzeGA4jOijm5tyXsMjKVbB8o</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Example of an SHA-256 RDP fingerprint:</p>
                *                <p>
                *                   <code>03:9b:36:9f:4b:de:4e:61:70:fc:7c:c9:78:e7:d2:1a:1c:25:a8:0c:91:f6:7c:e4:d6:a0:85:c8:b4:53:99:68</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            fingerprintSHA256?: string;
            /**
                * <p>The returned RDP certificate is valid after this point in time.</p>
                *          <p>This value is listed only for RDP certificates.</p>
                */
            notValidBefore?: Date;
            /**
                * <p>The returned RDP certificate is not valid after this point in time.</p>
                *          <p>This value is listed only for RDP certificates.</p>
                */
            notValidAfter?: Date;
    }
    export namespace HostKeyAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HostKeyAttributes) => any;
    }
    /**
        * <p>The password data for the Windows Server-based instance, including the ciphertext and the
        *       key pair name.</p>
        */
    export interface PasswordData {
            /**
                * <p>The encrypted password. Ciphertext will be an empty string if access to your new instance
                *       is not ready yet. When you create an instance, it can take up to 15 minutes for the instance
                *       to be ready.</p>
                *          <note>
                *             <p>If you use the default key pair (<code>LightsailDefaultKeyPair</code>), the decrypted
                *         password will be available in the password field.</p>
                *             <p>If you are using a custom key pair, you need to use your own means of decryption.</p>
                *             <p>If you change the Administrator password on the instance, Lightsail will continue to
                *         return the original ciphertext value. When accessing the instance using RDP, you need to
                *         manually enter the Administrator password after changing it from the default.</p>
                *          </note>
                */
            ciphertext?: string;
            /**
                * <p>The name of the key pair that you used when creating your instance. If no key pair name
                *       was specified when creating the instance, Lightsail uses the default key pair
                *         (<code>LightsailDefaultKeyPair</code>).</p>
                *          <p>If you are using a custom key pair, you need to use your own means of decrypting your
                *       password using the <code>ciphertext</code>. Lightsail creates the ciphertext by encrypting
                *       your password with the public key part of this key pair.</p>
                */
            keyPairName?: string;
    }
    export namespace PasswordData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PasswordData) => any;
    }
    /**
        * <p>The parameters for gaining temporary access to one of your Amazon Lightsail
        *       instances.</p>
        */
    export interface InstanceAccessDetails {
            /**
                * <p>For SSH access, the public key to use when accessing your instance For OpenSSH clients
                *       (e.g., command line SSH), you should save this value to <code>tempkey-cert.pub</code>.</p>
                */
            certKey?: string;
            /**
                * <p>For SSH access, the date on which the temporary keys expire.</p>
                */
            expiresAt?: Date;
            /**
                * <p>The public IP address of the Amazon Lightsail instance.</p>
                */
            ipAddress?: string;
            /**
                * <p>For RDP access, the password for your Amazon Lightsail instance. Password will be an empty
                *       string if the password for your new instance is not ready yet. When you create an instance, it
                *       can take up to 15 minutes for the instance to be ready.</p>
                *          <note>
                *             <p>If you create an instance using any key pair other than the default
                *           (<code>LightsailDefaultKeyPair</code>), <code>password</code> will always be an empty
                *         string.</p>
                *             <p>If you change the Administrator password on the instance, Lightsail will continue to
                *         return the original password value. When accessing the instance using RDP, you need to
                *         manually enter the Administrator password after changing it from the default.</p>
                *          </note>
                */
            password?: string;
            /**
                * <p>For a Windows Server-based instance, an object with the data you can use to retrieve your
                *       password. This is only needed if <code>password</code> is empty and the instance is not new
                *       (and therefore the password is not ready yet). When you create an instance, it can take up to
                *       15 minutes for the instance to be ready.</p>
                */
            passwordData?: PasswordData;
            /**
                * <p>For SSH access, the temporary private key. For OpenSSH clients (e.g., command line SSH),
                *       you should save this value to <code>tempkey</code>).</p>
                */
            privateKey?: string;
            /**
                * <p>The protocol for these Amazon Lightsail instance access details.</p>
                */
            protocol?: InstanceAccessProtocol | string;
            /**
                * <p>The name of this Amazon Lightsail instance.</p>
                */
            instanceName?: string;
            /**
                * <p>The user name to use when logging in to the Amazon Lightsail instance.</p>
                */
            username?: string;
            /**
                * <p>Describes the public SSH host keys or the RDP certificate.</p>
                */
            hostKeys?: HostKeyAttributes[];
    }
    export namespace InstanceAccessDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceAccessDetails) => any;
    }
    export interface GetInstanceAccessDetailsResult {
            /**
                * <p>An array of key-value pairs containing information about a get instance access
                *       request.</p>
                */
            accessDetails?: InstanceAccessDetails;
    }
    export namespace GetInstanceAccessDetailsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceAccessDetailsResult) => any;
    }
    export enum InstanceMetricName {
            BurstCapacityPercentage = "BurstCapacityPercentage",
            BurstCapacityTime = "BurstCapacityTime",
            CPUUtilization = "CPUUtilization",
            NetworkIn = "NetworkIn",
            NetworkOut = "NetworkOut",
            StatusCheckFailed = "StatusCheckFailed",
            StatusCheckFailed_Instance = "StatusCheckFailed_Instance",
            StatusCheckFailed_System = "StatusCheckFailed_System"
    }
    export interface GetInstanceMetricDataRequest {
            /**
                * <p>The name of the instance for which you want to get metrics data.</p>
                */
            instanceName: string | undefined;
            /**
                * <p>The metric for which you want to return information.</p>
                *          <p>Valid instance metric names are listed below, along with the most useful
                *         <code>statistics</code> to include in your request, and the published <code>unit</code>
                *       value.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>BurstCapacityPercentage</code>
                *                   </b> - The percentage
                *           of CPU performance available for your instance to burst above its baseline. Your instance
                *           continuously accrues and consumes burst capacity. Burst capacity stops accruing when your
                *           instance's <code>BurstCapacityPercentage</code> reaches 100%. For more information, see
                *             <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-viewing-instance-burst-capacity">Viewing instance burst capacity in Amazon Lightsail</a>.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
                *             <code>Average</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Percent</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>BurstCapacityTime</code>
                *                   </b> - The available amount
                *           of time for your instance to burst at 100% CPU utilization. Your instance continuously
                *           accrues and consumes burst capacity. Burst capacity time stops accruing when your
                *           instance's <code>BurstCapacityPercentage</code> metric reaches 100%.</p>
                *                <p>Burst capacity time is consumed at the full rate only when your instance operates at
                *           100% CPU utilization. For example, if your instance operates at 50% CPU utilization in the
                *           burstable zone for a 5-minute period, then it consumes CPU burst capacity minutes at a 50%
                *           rate in that period. Your instance consumed 2 minutes and 30 seconds of CPU burst capacity
                *           minutes in the 5-minute period. For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-viewing-instance-burst-capacity">Viewing instance burst capacity in Amazon Lightsail</a>.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
                *             <code>Average</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Seconds</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>CPUUtilization</code>
                *                   </b> - The percentage of
                *           allocated compute units that are currently in use on the instance. This metric identifies
                *           the processing power to run the applications on the instance. Tools in your operating
                *           system can show a lower percentage than Lightsail when the instance is not allocated a
                *           full processor core.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
                *             <code>Average</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Percent</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>NetworkIn</code>
                *                   </b> - The number of bytes received
                *           on all network interfaces by the instance. This metric identifies the volume of incoming
                *           network traffic to the instance. The number reported is the number of bytes received
                *           during the period. Because this metric is reported in 5-minute intervals, divide the
                *           reported number by 300 to find Bytes/second.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Bytes</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>NetworkOut</code>
                *                   </b> - The number of bytes sent
                *           out on all network interfaces by the instance. This metric identifies the volume of
                *           outgoing network traffic from the instance. The number reported is the number of bytes
                *           sent during the period. Because this metric is reported in 5-minute intervals, divide the
                *           reported number by 300 to find Bytes/second.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Bytes</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>StatusCheckFailed</code>
                *                   </b> - Reports whether the
                *           instance passed or failed both the instance status check and the system status check. This
                *           metric can be either 0 (passed) or 1 (failed). This metric data is available in 1-minute
                *           (60 seconds) granularity.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>StatusCheckFailed_Instance</code>
                *                   </b> - Reports
                *           whether the instance passed or failed the instance status check. This metric can be either
                *           0 (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds)
                *           granularity.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>StatusCheckFailed_System</code>
                *                   </b> - Reports
                *           whether the instance passed or failed the system status check. This metric can be either 0
                *           (passed) or 1 (failed). This metric data is available in 1-minute (60 seconds)
                *           granularity.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *          </ul>
                */
            metricName: InstanceMetricName | string | undefined;
            /**
                * <p>The granularity, in seconds, of the returned data points.</p>
                *          <p>The <code>StatusCheckFailed</code>, <code>StatusCheckFailed_Instance</code>, and
                *         <code>StatusCheckFailed_System</code> instance metric data is available in 1-minute (60
                *       seconds) granularity. All other instance metric data is available in 5-minute (300 seconds)
                *       granularity.</p>
                */
            period: number | undefined;
            /**
                * <p>The start time of the time period.</p>
                */
            startTime: Date | undefined;
            /**
                * <p>The end time of the time period.</p>
                */
            endTime: Date | undefined;
            /**
                * <p>The unit for the metric data request. Valid units depend on the metric data being
                *       requested. For the valid units to specify with each available metric, see the
                *         <code>metricName</code> parameter.</p>
                */
            unit: MetricUnit | string | undefined;
            /**
                * <p>The statistic for the metric.</p>
                *          <p>The following statistics are available:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Minimum</code> - The lowest value observed during the specified period. Use this
                *           value to determine low volumes of activity for your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Maximum</code> - The highest value observed during the specified period. Use
                *           this value to determine high volumes of activity for your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Sum</code> - All values submitted for the matching metric added together. You
                *           can use this statistic to determine the total volume of a metric.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Average</code> - The value of Sum / SampleCount during the specified period. By
                *           comparing this statistic with the Minimum and Maximum values, you can determine the full
                *           scope of a metric and how close the average use is to the Minimum and Maximum values. This
                *           comparison helps you to know when to increase or decrease your resources.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SampleCount</code> - The count, or number, of data points used for the
                *           statistical calculation.</p>
                *             </li>
                *          </ul>
                */
            statistics: (MetricStatistic | string)[] | undefined;
    }
    export namespace GetInstanceMetricDataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceMetricDataRequest) => any;
    }
    export interface GetInstanceMetricDataResult {
            /**
                * <p>The name of the metric returned.</p>
                */
            metricName?: InstanceMetricName | string;
            /**
                * <p>An array of objects that describe the metric data returned.</p>
                */
            metricData?: MetricDatapoint[];
    }
    export namespace GetInstanceMetricDataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceMetricDataResult) => any;
    }
    export interface GetInstancePortStatesRequest {
            /**
                * <p>The name of the instance for which to return firewall port states.</p>
                */
            instanceName: string | undefined;
    }
    export namespace GetInstancePortStatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstancePortStatesRequest) => any;
    }
    export enum PortState {
            Closed = "closed",
            Open = "open"
    }
    /**
        * <p>Describes open ports on an instance, the IP addresses allowed to connect to the instance
        *       through the ports, and the protocol.</p>
        */
    export interface InstancePortState {
            /**
                * <p>The first port in a range of open ports on an instance.</p>
                *          <p>Allowed ports:</p>
                *          <ul>
                *             <li>
                *                <p>TCP and UDP - <code>0</code> to <code>65535</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>ICMP - The ICMP type for IPv4 addresses. For example, specify <code>8</code> as the
                *             <code>fromPort</code> (ICMP type), and <code>-1</code> as the <code>toPort</code> (ICMP
                *           code), to enable ICMP Ping. For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages">Control Messages</a> on <i>Wikipedia</i>.</p>
                *             </li>
                *             <li>
                *                <p>ICMPv6 - The ICMP type for IPv6 addresses. For example, specify <code>128</code> as
                *           the <code>fromPort</code> (ICMPv6 type), and <code>0</code> as <code>toPort</code> (ICMPv6
                *           code). For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6">Internet
                *             Control Message Protocol for IPv6</a>.</p>
                *             </li>
                *          </ul>
                */
            fromPort?: number;
            /**
                * <p>The last port in a range of open ports on an instance.</p>
                *          <p>Allowed ports:</p>
                *          <ul>
                *             <li>
                *                <p>TCP and UDP - <code>0</code> to <code>65535</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>ICMP - The ICMP code for IPv4 addresses. For example, specify <code>8</code> as the
                *             <code>fromPort</code> (ICMP type), and <code>-1</code> as the <code>toPort</code> (ICMP
                *           code), to enable ICMP Ping. For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol#Control_messages">Control Messages</a> on <i>Wikipedia</i>.</p>
                *             </li>
                *             <li>
                *                <p>ICMPv6 - The ICMP code for IPv6 addresses. For example, specify <code>128</code> as
                *           the <code>fromPort</code> (ICMPv6 type), and <code>0</code> as <code>toPort</code> (ICMPv6
                *           code). For more information, see <a href="https://en.wikipedia.org/wiki/Internet_Control_Message_Protocol_for_IPv6">Internet
                *             Control Message Protocol for IPv6</a>.</p>
                *             </li>
                *          </ul>
                */
            toPort?: number;
            /**
                * <p>The IP protocol name.</p>
                *          <p>The name can be one of the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>tcp</code> - Transmission Control Protocol (TCP) provides reliable, ordered, and
                *           error-checked delivery of streamed data between applications running on hosts
                *           communicating by an IP network. If you have an application that doesn't require reliable
                *           data stream service, use UDP instead.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>all</code> - All transport layer protocol types. For more general information,
                *           see <a href="https://en.wikipedia.org/wiki/Transport_layer">Transport layer</a> on
                *             <i>Wikipedia</i>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>udp</code> - With User Datagram Protocol (UDP), computer applications can send
                *           messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior
                *           communications are not required to set up transmission channels or data paths.
                *           Applications that don't require reliable data stream service can use UDP, which provides a
                *           connectionless datagram service that emphasizes reduced latency over reliability. If you
                *           do require reliable data stream service, use TCP instead.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>icmp</code> - Internet Control Message Protocol (ICMP) is used to send error
                *           messages and operational information indicating success or failure when communicating with
                *           an instance. For example, an error is indicated when an instance could not be reached.
                *           When you specify <code>icmp</code> as the <code>protocol</code>, you must specify the ICMP
                *           type using the <code>fromPort</code> parameter, and ICMP code using the
                *             <code>toPort</code> parameter.</p>
                *             </li>
                *          </ul>
                */
            protocol?: NetworkProtocol | string;
            /**
                * <p>Specifies whether the instance port is <code>open</code> or <code>closed</code>.</p>
                *          <note>
                *             <p>The port state for Lightsail instances is always <code>open</code>.</p>
                *          </note>
                */
            state?: PortState | string;
            /**
                * <p>The IPv4 address, or range of IPv4 addresses (in CIDR notation) that are allowed to
                *       connect to an instance through the ports, and the protocol.</p>
                *          <note>
                *             <p>The <code>ipv6Cidrs</code> parameter lists the IPv6 addresses that are allowed to
                *         connect to an instance.</p>
                *          </note>
                *          <p>For more information about CIDR block notation, see <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation">Classless
                *         Inter-Domain Routing</a> on <i>Wikipedia</i>.</p>
                */
            cidrs?: string[];
            /**
                * <p>The IPv6 address, or range of IPv6 addresses (in CIDR notation) that are allowed to
                *       connect to an instance through the ports, and the protocol. Only devices with an IPv6 address
                *       can connect to an instance through IPv6; otherwise, IPv4 should be used.</p>
                *          <note>
                *             <p>The <code>cidrs</code> parameter lists the IPv4 addresses that are allowed to connect to
                *         an instance.</p>
                *          </note>
                *          <p>For more information about CIDR block notation, see <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation">Classless
                *         Inter-Domain Routing</a> on <i>Wikipedia</i>.</p>
                */
            ipv6Cidrs?: string[];
            /**
                * <p>An alias that defines access for a preconfigured range of IP addresses.</p>
                *          <p>The only alias currently supported is <code>lightsail-connect</code>, which allows IP
                *       addresses of the browser-based RDP/SSH client in the Lightsail console to connect to your
                *       instance.</p>
                */
            cidrListAliases?: string[];
    }
    export namespace InstancePortState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstancePortState) => any;
    }
    export interface GetInstancePortStatesResult {
            /**
                * <p>An array of objects that describe the firewall port states for the specified
                *       instance.</p>
                */
            portStates?: InstancePortState[];
    }
    export namespace GetInstancePortStatesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstancePortStatesResult) => any;
    }
    export interface GetInstancesRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetInstances</code> request. If your results
                *       are paginated, the response will return a next page token that you can specify as the page
                *       token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetInstancesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstancesRequest) => any;
    }
    export interface GetInstancesResult {
            /**
                * <p>An array of key-value pairs containing information about your instances.</p>
                */
            instances?: Instance[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetInstances</code> request and
                *       specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetInstancesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstancesResult) => any;
    }
    export interface GetInstanceSnapshotRequest {
            /**
                * <p>The name of the snapshot for which you are requesting information.</p>
                */
            instanceSnapshotName: string | undefined;
    }
    export namespace GetInstanceSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceSnapshotRequest) => any;
    }
    export enum InstanceSnapshotState {
            Available = "available",
            Error = "error",
            Pending = "pending"
    }
    /**
        * <p>Describes an instance snapshot.</p>
        */
    export interface InstanceSnapshot {
            /**
                * <p>The name of the snapshot.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the snapshot (e.g.,
                *         <code>arn:aws:lightsail:us-east-2:123456789101:InstanceSnapshot/d23b5706-3322-4d83-81e5-12345EXAMPLE</code>).</p>
                */
            arn?: string;
            /**
                * <p>The support code. Include this code in your email to support when you have questions about
                *       an instance or another resource in Lightsail. This code enables our support team to look up
                *       your Lightsail information more easily.</p>
                */
            supportCode?: string;
            /**
                * <p>The timestamp when the snapshot was created (e.g., <code>1479907467.024</code>).</p>
                */
            createdAt?: Date;
            /**
                * <p>The region name and Availability Zone where you created the snapshot.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The type of resource (usually <code>InstanceSnapshot</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The tag keys and optional values for the resource. For more information about tags in
                *       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
            /**
                * <p>The state the snapshot is in.</p>
                */
            state?: InstanceSnapshotState | string;
            /**
                * <p>The progress of the snapshot.</p>
                *          <note>
                *             <p>This is populated only for disk snapshots, and is <code>null</code> for instance
                *         snapshots.</p>
                *          </note>
                */
            progress?: string;
            /**
                * <p>An array of disk objects containing information about all block storage disks.</p>
                */
            fromAttachedDisks?: Disk[];
            /**
                * <p>The instance from which the snapshot was created.</p>
                */
            fromInstanceName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the instance from which the snapshot was created (e.g.,
                *         <code>arn:aws:lightsail:us-east-2:123456789101:Instance/64b8404c-ccb1-430b-8daf-12345EXAMPLE</code>).</p>
                */
            fromInstanceArn?: string;
            /**
                * <p>The blueprint ID from which you created the snapshot (e.g., <code>os_debian_8_3</code>). A
                *       blueprint is a virtual private server (or <i>instance</i>) image used to create
                *       instances quickly.</p>
                */
            fromBlueprintId?: string;
            /**
                * <p>The bundle ID from which you created the snapshot (e.g., <code>micro_1_0</code>).</p>
                */
            fromBundleId?: string;
            /**
                * <p>A Boolean value indicating whether the snapshot was created from an automatic
                *       snapshot.</p>
                */
            isFromAutoSnapshot?: boolean;
            /**
                * <p>The size in GB of the SSD.</p>
                */
            sizeInGb?: number;
    }
    export namespace InstanceSnapshot {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceSnapshot) => any;
    }
    export interface GetInstanceSnapshotResult {
            /**
                * <p>An array of key-value pairs containing information about the results of your get instance
                *       snapshot request.</p>
                */
            instanceSnapshot?: InstanceSnapshot;
    }
    export namespace GetInstanceSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceSnapshotResult) => any;
    }
    export interface GetInstanceSnapshotsRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetInstanceSnapshots</code> request. If your
                *       results are paginated, the response will return a next page token that you can specify as the
                *       page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetInstanceSnapshotsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceSnapshotsRequest) => any;
    }
    export interface GetInstanceSnapshotsResult {
            /**
                * <p>An array of key-value pairs containing information about the results of your get instance
                *       snapshots request.</p>
                */
            instanceSnapshots?: InstanceSnapshot[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetInstanceSnapshots</code> request
                *       and specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetInstanceSnapshotsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceSnapshotsResult) => any;
    }
    export interface GetInstanceStateRequest {
            /**
                * <p>The name of the instance to get state information about.</p>
                */
            instanceName: string | undefined;
    }
    export namespace GetInstanceStateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceStateRequest) => any;
    }
    export interface GetInstanceStateResult {
            /**
                * <p>The state of the instance.</p>
                */
            state?: InstanceState;
    }
    export namespace GetInstanceStateResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceStateResult) => any;
    }
    export interface GetKeyPairRequest {
            /**
                * <p>The name of the key pair for which you are requesting information.</p>
                */
            keyPairName: string | undefined;
    }
    export namespace GetKeyPairRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetKeyPairRequest) => any;
    }
    export interface GetKeyPairResult {
            /**
                * <p>An array of key-value pairs containing information about the key pair.</p>
                */
            keyPair?: KeyPair;
    }
    export namespace GetKeyPairResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetKeyPairResult) => any;
    }
    export interface GetKeyPairsRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetKeyPairs</code> request. If your results
                *       are paginated, the response will return a next page token that you can specify as the page
                *       token in a subsequent request.</p>
                */
            pageToken?: string;
            /**
                * <p>A Boolean value that indicates whether to include the default key pair in the response of
                *       your request.</p>
                */
            includeDefaultKeyPair?: boolean;
    }
    export namespace GetKeyPairsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetKeyPairsRequest) => any;
    }
    export interface GetKeyPairsResult {
            /**
                * <p>An array of key-value pairs containing information about the key pairs.</p>
                */
            keyPairs?: KeyPair[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetKeyPairs</code> request and
                *       specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetKeyPairsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetKeyPairsResult) => any;
    }
    export interface GetLoadBalancerRequest {
            /**
                * <p>The name of the load balancer.</p>
                */
            loadBalancerName: string | undefined;
    }
    export namespace GetLoadBalancerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoadBalancerRequest) => any;
    }
    export enum LoadBalancerAttributeName {
            HealthCheckPath = "HealthCheckPath",
            HttpsRedirectionEnabled = "HttpsRedirectionEnabled",
            SessionStickinessEnabled = "SessionStickinessEnabled",
            SessionStickiness_LB_CookieDurationSeconds = "SessionStickiness_LB_CookieDurationSeconds",
            TlsPolicyName = "TlsPolicyName"
    }
    export enum InstanceHealthState {
            Draining = "draining",
            Healthy = "healthy",
            Initial = "initial",
            Unavailable = "unavailable",
            Unhealthy = "unhealthy",
            Unused = "unused"
    }
    export enum InstanceHealthReason {
            InstanceDeregistrationInProgress = "Instance.DeregistrationInProgress",
            InstanceFailedHealthChecks = "Instance.FailedHealthChecks",
            InstanceInvalidState = "Instance.InvalidState",
            InstanceIpUnusable = "Instance.IpUnusable",
            InstanceNotInUse = "Instance.NotInUse",
            InstanceNotRegistered = "Instance.NotRegistered",
            InstanceResponseCodeMismatch = "Instance.ResponseCodeMismatch",
            InstanceTimeout = "Instance.Timeout",
            LbInitialHealthChecking = "Lb.InitialHealthChecking",
            LbInternalError = "Lb.InternalError",
            LbRegistrationInProgress = "Lb.RegistrationInProgress"
    }
    /**
        * <p>Describes information about the health of the instance.</p>
        */
    export interface InstanceHealthSummary {
            /**
                * <p>The name of the Lightsail instance for which you are requesting health check
                *       data.</p>
                */
            instanceName?: string;
            /**
                * <p>Describes the overall instance health. Valid values are below.</p>
                */
            instanceHealth?: InstanceHealthState | string;
            /**
                * <p>More information about the instance health. If the <code>instanceHealth</code> is
                *         <code>healthy</code>, then an <code>instanceHealthReason</code> value is not
                *       provided.</p>
                *          <p>If <b>
                *                <code>instanceHealth</code>
                *             </b> is <code>initial</code>,
                *       the <b>
                *                <code>instanceHealthReason</code>
                *             </b> value can be one of the
                *       following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Lb.RegistrationInProgress</code>
                *                   </b> - The target
                *           instance is in the process of being registered with the load balancer.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Lb.InitialHealthChecking</code>
                *                   </b> - The
                *           Lightsail load balancer is still sending the target instance the minimum number of
                *           health checks required to determine its health status.</p>
                *             </li>
                *          </ul>
                *          <p>If <b>
                *                <code>instanceHealth</code>
                *             </b> is <code>unhealthy</code>,
                *       the <b>
                *                <code>instanceHealthReason</code>
                *             </b> value can be one of the
                *       following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Instance.ResponseCodeMismatch</code>
                *                   </b> - The
                *           health checks did not return an expected HTTP code.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Instance.Timeout</code>
                *                   </b> - The health check
                *           requests timed out.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Instance.FailedHealthChecks</code>
                *                   </b> - The health
                *           checks failed because the connection to the target instance timed out, the target instance
                *           response was malformed, or the target instance failed the health check for an unknown
                *           reason.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Lb.InternalError</code>
                *                   </b> - The health checks
                *           failed due to an internal error.</p>
                *             </li>
                *          </ul>
                *          <p>If <b>
                *                <code>instanceHealth</code>
                *             </b> is <code>unused</code>,
                *       the <b>
                *                <code>instanceHealthReason</code>
                *             </b> value can be one of the
                *       following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Instance.NotRegistered</code>
                *                   </b> - The target
                *           instance is not registered with the target group.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Instance.NotInUse</code>
                *                   </b> - The target group is
                *           not used by any load balancer, or the target instance is in an Availability Zone that is
                *           not enabled for its load balancer.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Instance.IpUnusable</code>
                *                   </b> - The target IP
                *           address is reserved for use by a Lightsail load balancer.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Instance.InvalidState</code>
                *                   </b> - The target is in
                *           the stopped or terminated state.</p>
                *             </li>
                *          </ul>
                *          <p>If <b>
                *                <code>instanceHealth</code>
                *             </b> is <code>draining</code>,
                *       the <b>
                *                <code>instanceHealthReason</code>
                *             </b> value can be one of the
                *       following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Instance.DeregistrationInProgress</code>
                *                   </b> - The
                *           target instance is in the process of being deregistered and the deregistration delay
                *           period has not expired.</p>
                *             </li>
                *          </ul>
                */
            instanceHealthReason?: InstanceHealthReason | string;
    }
    export namespace InstanceHealthSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceHealthSummary) => any;
    }
    export enum LoadBalancerProtocol {
            HTTP = "HTTP",
            HTTP_HTTPS = "HTTP_HTTPS"
    }
    export enum LoadBalancerState {
            Active = "active",
            ActiveImpaired = "active_impaired",
            Failed = "failed",
            Provisioning = "provisioning",
            Unknown = "unknown"
    }
    /**
        * <p>Provides a summary of SSL/TLS certificate metadata.</p>
        */
    export interface LoadBalancerTlsCertificateSummary {
            /**
                * <p>The name of the SSL/TLS certificate.</p>
                */
            name?: string;
            /**
                * <p>When <code>true</code>, the SSL/TLS certificate is attached to the Lightsail load
                *       balancer.</p>
                */
            isAttached?: boolean;
    }
    export namespace LoadBalancerTlsCertificateSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancerTlsCertificateSummary) => any;
    }
    /**
        * <p>Describes a load balancer.</p>
        */
    export interface LoadBalancer {
            /**
                * <p>The name of the load balancer (e.g., <code>my-load-balancer</code>).</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the load balancer.</p>
                */
            arn?: string;
            /**
                * <p>The support code. Include this code in your email to support when you have questions about
                *       your Lightsail load balancer. This code enables our support team to look up your Lightsail
                *       information more easily.</p>
                */
            supportCode?: string;
            /**
                * <p>The date when your load balancer was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The AWS Region where your load balancer was created (e.g., <code>us-east-2a</code>).
                *       Lightsail automatically creates your load balancer across Availability Zones.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The resource type (e.g., <code>LoadBalancer</code>.</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The tag keys and optional values for the resource. For more information about tags in
                *       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
            /**
                * <p>The DNS name of your Lightsail load balancer.</p>
                */
            dnsName?: string;
            /**
                * <p>The status of your load balancer. Valid values are below.</p>
                */
            state?: LoadBalancerState | string;
            /**
                * <p>The protocol you have enabled for your load balancer. Valid values are below.</p>
                *          <p>You can't just have <code>HTTP_HTTPS</code>, but you can have just
                *       <code>HTTP</code>.</p>
                */
            protocol?: LoadBalancerProtocol | string;
            /**
                * <p>An array of public port settings for your load balancer. For HTTP, use port 80. For HTTPS,
                *       use port 443.</p>
                */
            publicPorts?: number[];
            /**
                * <p>The path you specified to perform your health checks. If no path is specified, the load
                *       balancer tries to make a request to the default (root) page.</p>
                */
            healthCheckPath?: string;
            /**
                * <p>The port where the load balancer will direct traffic to your Lightsail instances. For
                *       HTTP traffic, it's port 80. For HTTPS traffic, it's port 443.</p>
                */
            instancePort?: number;
            /**
                * <p>An array of InstanceHealthSummary objects describing the health of the load
                *       balancer.</p>
                */
            instanceHealthSummary?: InstanceHealthSummary[];
            /**
                * <p>An array of LoadBalancerTlsCertificateSummary objects that provide additional information
                *       about the SSL/TLS certificates. For example, if <code>true</code>, the certificate is attached
                *       to the load balancer.</p>
                */
            tlsCertificateSummaries?: LoadBalancerTlsCertificateSummary[];
            /**
                * <p>A string to string map of the configuration options for your load balancer. Valid values
                *       are listed below.</p>
                */
            configurationOptions?: Record<string, string>;
            /**
                * <p>The IP address type of the load balancer.</p>
                *
                *          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
                *       IPv4 and IPv6.</p>
                */
            ipAddressType?: IpAddressType | string;
            /**
                * <p>A Boolean value that indicates whether HTTPS redirection is enabled for the load
                *       balancer.</p>
                */
            httpsRedirectionEnabled?: boolean;
            /**
                * <p>The name of the TLS security policy for the load balancer.</p>
                */
            tlsPolicyName?: string;
    }
    export namespace LoadBalancer {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancer) => any;
    }
    export interface GetLoadBalancerResult {
            /**
                * <p>An object containing information about your load balancer.</p>
                */
            loadBalancer?: LoadBalancer;
    }
    export namespace GetLoadBalancerResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoadBalancerResult) => any;
    }
    export enum LoadBalancerMetricName {
            ClientTLSNegotiationErrorCount = "ClientTLSNegotiationErrorCount",
            HTTPCode_Instance_2XX_Count = "HTTPCode_Instance_2XX_Count",
            HTTPCode_Instance_3XX_Count = "HTTPCode_Instance_3XX_Count",
            HTTPCode_Instance_4XX_Count = "HTTPCode_Instance_4XX_Count",
            HTTPCode_Instance_5XX_Count = "HTTPCode_Instance_5XX_Count",
            HTTPCode_LB_4XX_Count = "HTTPCode_LB_4XX_Count",
            HTTPCode_LB_5XX_Count = "HTTPCode_LB_5XX_Count",
            HealthyHostCount = "HealthyHostCount",
            InstanceResponseTime = "InstanceResponseTime",
            RejectedConnectionCount = "RejectedConnectionCount",
            RequestCount = "RequestCount",
            UnhealthyHostCount = "UnhealthyHostCount"
    }
    export interface GetLoadBalancerMetricDataRequest {
            /**
                * <p>The name of the load balancer.</p>
                */
            loadBalancerName: string | undefined;
            /**
                * <p>The metric for which you want to return information.</p>
                *          <p>Valid load balancer metric names are listed below, along with the most useful
                *         <code>statistics</code> to include in your request, and the published <code>unit</code>
                *       value.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>ClientTLSNegotiationErrorCount</code>
                *                   </b> - The
                *           number of TLS connections initiated by the client that did not establish a session with
                *           the load balancer due to a TLS error generated by the load balancer. Possible causes
                *           include a mismatch of ciphers or protocols.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>HealthyHostCount</code>
                *                   </b> - The number of target
                *           instances that are considered healthy.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic are <code>Average</code>,
                *             <code>Minimum</code>, and <code>Maximum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>HTTPCode_Instance_2XX_Count</code>
                *                   </b> - The number
                *           of HTTP 2XX response codes generated by the target instances. This does not include any
                *           response codes generated by the load balancer.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
                *             <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
                *             <code>1</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>HTTPCode_Instance_3XX_Count</code>
                *                   </b> - The number
                *           of HTTP 3XX response codes generated by the target instances. This does not include any
                *           response codes generated by the load balancer.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
                *             <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
                *             <code>1</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>HTTPCode_Instance_4XX_Count</code>
                *                   </b> - The number
                *           of HTTP 4XX response codes generated by the target instances. This does not include any
                *           response codes generated by the load balancer.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
                *             <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
                *             <code>1</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>HTTPCode_Instance_5XX_Count</code>
                *                   </b> - The number
                *           of HTTP 5XX response codes generated by the target instances. This does not include any
                *           response codes generated by the load balancer.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
                *             <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
                *             <code>1</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>HTTPCode_LB_4XX_Count</code>
                *                   </b> - The number of
                *           HTTP 4XX client error codes that originated from the load balancer. Client errors are
                *           generated when requests are malformed or incomplete. These requests were not received by
                *           the target instance. This count does not include response codes generated by the target
                *           instances.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
                *             <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
                *             <code>1</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>HTTPCode_LB_5XX_Count</code>
                *                   </b> - The number of
                *           HTTP 5XX server error codes that originated from the load balancer. This does not include
                *           any response codes generated by the target instance. This metric is reported if there are
                *           no healthy instances attached to the load balancer, or if the request rate exceeds the
                *           capacity of the instances (spillover) or the load balancer.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
                *             <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
                *             <code>1</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>InstanceResponseTime</code>
                *                   </b> - The time elapsed,
                *           in seconds, after the request leaves the load balancer until a response from the target
                *           instance is received.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Seconds</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>RejectedConnectionCount</code>
                *                   </b> - The number of
                *           connections that were rejected because the load balancer had reached its maximum number of
                *           connections.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>RequestCount</code>
                *                   </b> - The number of requests
                *           processed over IPv4. This count includes only the requests with a response generated by a
                *           target instance of the load balancer.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>. Note that
                *             <code>Minimum</code>, <code>Maximum</code>, and <code>Average</code> all return
                *             <code>1</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>UnhealthyHostCount</code>
                *                   </b> - The number of
                *           target instances that are considered unhealthy.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic are <code>Average</code>,
                *             <code>Minimum</code>, and <code>Maximum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *          </ul>
                */
            metricName: LoadBalancerMetricName | string | undefined;
            /**
                * <p>The granularity, in seconds, of the returned data points.</p>
                */
            period: number | undefined;
            /**
                * <p>The start time of the period.</p>
                */
            startTime: Date | undefined;
            /**
                * <p>The end time of the period.</p>
                */
            endTime: Date | undefined;
            /**
                * <p>The unit for the metric data request. Valid units depend on the metric data being
                *       requested. For the valid units with each available metric, see the <code>metricName</code>
                *       parameter.</p>
                */
            unit: MetricUnit | string | undefined;
            /**
                * <p>The statistic for the metric.</p>
                *          <p>The following statistics are available:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Minimum</code> - The lowest value observed during the specified period. Use this
                *           value to determine low volumes of activity for your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Maximum</code> - The highest value observed during the specified period. Use
                *           this value to determine high volumes of activity for your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Sum</code> - All values submitted for the matching metric added together. You
                *           can use this statistic to determine the total volume of a metric.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Average</code> - The value of Sum / SampleCount during the specified period. By
                *           comparing this statistic with the Minimum and Maximum values, you can determine the full
                *           scope of a metric and how close the average use is to the Minimum and Maximum values. This
                *           comparison helps you to know when to increase or decrease your resources.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SampleCount</code> - The count, or number, of data points used for the
                *           statistical calculation.</p>
                *             </li>
                *          </ul>
                */
            statistics: (MetricStatistic | string)[] | undefined;
    }
    export namespace GetLoadBalancerMetricDataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoadBalancerMetricDataRequest) => any;
    }
    export interface GetLoadBalancerMetricDataResult {
            /**
                * <p>The name of the metric returned.</p>
                */
            metricName?: LoadBalancerMetricName | string;
            /**
                * <p>An array of objects that describe the metric data returned.</p>
                */
            metricData?: MetricDatapoint[];
    }
    export namespace GetLoadBalancerMetricDataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoadBalancerMetricDataResult) => any;
    }
    export interface GetLoadBalancersRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetLoadBalancers</code> request. If your
                *       results are paginated, the response will return a next page token that you can specify as the
                *       page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetLoadBalancersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoadBalancersRequest) => any;
    }
    export interface GetLoadBalancersResult {
            /**
                * <p>An array of LoadBalancer objects describing your load balancers.</p>
                */
            loadBalancers?: LoadBalancer[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetLoadBalancers</code> request and
                *       specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetLoadBalancersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoadBalancersResult) => any;
    }
    export interface GetLoadBalancerTlsCertificatesRequest {
            /**
                * <p>The name of the load balancer you associated with your SSL/TLS certificate.</p>
                */
            loadBalancerName: string | undefined;
    }
    export namespace GetLoadBalancerTlsCertificatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoadBalancerTlsCertificatesRequest) => any;
    }
    export enum LoadBalancerTlsCertificateDomainStatus {
            Failed = "FAILED",
            PendingValidation = "PENDING_VALIDATION",
            Success = "SUCCESS"
    }
    /**
        * <p>Describes the validation record of each domain name in the SSL/TLS certificate.</p>
        */
    export interface LoadBalancerTlsCertificateDomainValidationRecord {
            /**
                * <p>A fully qualified domain name in the certificate. For example,
                *       <code>example.com</code>.</p>
                */
            name?: string;
            /**
                * <p>The type of validation record. For example, <code>CNAME</code> for domain
                *       validation.</p>
                */
            type?: string;
            /**
                * <p>The value for that type.</p>
                */
            value?: string;
            /**
                * <p>The validation status. Valid values are listed below.</p>
                */
            validationStatus?: LoadBalancerTlsCertificateDomainStatus | string;
            /**
                * <p>The domain name against which your SSL/TLS certificate was validated.</p>
                */
            domainName?: string;
    }
    export namespace LoadBalancerTlsCertificateDomainValidationRecord {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancerTlsCertificateDomainValidationRecord) => any;
    }
    export enum LoadBalancerTlsCertificateFailureReason {
            AdditionalVerificationRequired = "ADDITIONAL_VERIFICATION_REQUIRED",
            DomainNotAllowed = "DOMAIN_NOT_ALLOWED",
            InvalidPublicDomain = "INVALID_PUBLIC_DOMAIN",
            NoAvailableContacts = "NO_AVAILABLE_CONTACTS",
            Other = "OTHER"
    }
    /**
        * <p>Contains information about the domain names on an SSL/TLS certificate that you will use to
        *       validate domain ownership.</p>
        */
    export interface LoadBalancerTlsCertificateDomainValidationOption {
            /**
                * <p>The fully qualified domain name in the certificate request.</p>
                */
            domainName?: string;
            /**
                * <p>The status of the domain validation. Valid values are listed below.</p>
                */
            validationStatus?: LoadBalancerTlsCertificateDomainStatus | string;
    }
    export namespace LoadBalancerTlsCertificateDomainValidationOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancerTlsCertificateDomainValidationOption) => any;
    }
    export enum LoadBalancerTlsCertificateRenewalStatus {
            Failed = "FAILED",
            PendingAutoRenewal = "PENDING_AUTO_RENEWAL",
            PendingValidation = "PENDING_VALIDATION",
            Success = "SUCCESS"
    }
    /**
        * <p>Contains information about the status of Lightsail's managed renewal for the
        *       certificate.</p>
        *          <p>The renewal status of the certificate.</p>
        *          <p>The following renewal status are possible:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>
        *                      <code>PendingAutoRenewal</code>
        *                   </b> - Lightsail is
        *           attempting to automatically validate the domain names in the certificate. No further
        *           action is required. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>
        *                      <code>PendingValidation</code>
        *                   </b> - Lightsail couldn't
        *           automatically validate one or more domain names in the certificate. You must take action
        *           to validate these domain names or the certificate won't be renewed. If you used DNS
        *           validation, check to make sure your certificate's domain validation records exist in your
        *           domain's DNS, and that your certificate remains in use.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>
        *                      <code>Success</code>
        *                   </b> - All domain names in the
        *           certificate are validated, and Lightsail renewed the certificate. No further action is
        *           required. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>
        *                      <code>Failed</code>
        *                   </b> - One or more domain names were
        *           not validated before the certificate expired, and Lightsail did not renew the
        *           certificate. You can request a new certificate using the <code>CreateCertificate</code>
        *           action.</p>
        *             </li>
        *          </ul>
        */
    export interface LoadBalancerTlsCertificateRenewalSummary {
            /**
                * <p>The renewal status of the certificate.</p>
                *          <p>The following renewal status are possible:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>PendingAutoRenewal</code>
                *                   </b> - Lightsail is
                *           attempting to automatically validate the domain names of the certificate. No further
                *           action is required. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>PendingValidation</code>
                *                   </b> - Lightsail couldn't
                *           automatically validate one or more domain names of the certificate. You must take action
                *           to validate these domain names or the certificate won't be renewed. Check to make sure
                *           your certificate's domain validation records exist in your domain's DNS, and that your
                *           certificate remains in use.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Success</code>
                *                   </b> - All domain names in the
                *           certificate are validated, and Lightsail renewed the certificate. No further action is
                *           required. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Failed</code>
                *                   </b> - One or more domain names were
                *           not validated before the certificate expired, and Lightsail did not renew the
                *           certificate. You can request a new certificate using the <code>CreateCertificate</code>
                *           action.</p>
                *             </li>
                *          </ul>
                */
            renewalStatus?: LoadBalancerTlsCertificateRenewalStatus | string;
            /**
                * <p>Contains information about the validation of each domain name in the certificate, as it
                *       pertains to Lightsail's managed renewal. This is different from the initial validation that
                *       occurs as a result of the RequestCertificate request.</p>
                */
            domainValidationOptions?: LoadBalancerTlsCertificateDomainValidationOption[];
    }
    export namespace LoadBalancerTlsCertificateRenewalSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancerTlsCertificateRenewalSummary) => any;
    }
    export enum LoadBalancerTlsCertificateRevocationReason {
            AACompromise = "A_A_COMPROMISE",
            AffiliationChanged = "AFFILIATION_CHANGED",
            CaCompromise = "CA_COMPROMISE",
            CertificateHold = "CERTIFICATE_HOLD",
            CessationOfOperation = "CESSATION_OF_OPERATION",
            KeyCompromise = "KEY_COMPROMISE",
            PrivilegeWithdrawn = "PRIVILEGE_WITHDRAWN",
            RemoveFromCrl = "REMOVE_FROM_CRL",
            Superceded = "SUPERCEDED",
            Unspecified = "UNSPECIFIED"
    }
    export enum LoadBalancerTlsCertificateStatus {
            Expired = "EXPIRED",
            Failed = "FAILED",
            Inactive = "INACTIVE",
            Issued = "ISSUED",
            PendingValidation = "PENDING_VALIDATION",
            Revoked = "REVOKED",
            Unknown = "UNKNOWN",
            ValidationTimedOut = "VALIDATION_TIMED_OUT"
    }
    /**
        * <p>Describes a load balancer SSL/TLS certificate.</p>
        *          <p>TLS is just an updated, more secure version of Secure Socket Layer (SSL).</p>
        */
    export interface LoadBalancerTlsCertificate {
            /**
                * <p>The name of the SSL/TLS certificate (e.g., <code>my-certificate</code>).</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the SSL/TLS certificate.</p>
                */
            arn?: string;
            /**
                * <p>The support code. Include this code in your email to support when you have questions about
                *       your Lightsail load balancer or SSL/TLS certificate. This code enables our support team to
                *       look up your Lightsail information more easily.</p>
                */
            supportCode?: string;
            /**
                * <p>The time when you created your SSL/TLS certificate.</p>
                */
            createdAt?: Date;
            /**
                * <p>The AWS Region and Availability Zone where you created your certificate.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The resource type (e.g., <code>LoadBalancerTlsCertificate</code>).</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Instance</code>
                *                   </b> - A Lightsail instance (a
                *           virtual private server)</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>StaticIp</code>
                *                   </b> - A static IP address</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>KeyPair</code>
                *                   </b> - The key pair used to connect
                *           to a Lightsail instance</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>InstanceSnapshot</code>
                *                   </b> - A Lightsail
                *           instance snapshot</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Domain</code>
                *                   </b> - A DNS zone</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>PeeredVpc</code>
                *                   </b> - A peered VPC</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>LoadBalancer</code>
                *                   </b> - A Lightsail load
                *           balancer</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>LoadBalancerTlsCertificate</code>
                *                   </b> - An SSL/TLS
                *           certificate associated with a Lightsail load balancer</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Disk</code>
                *                   </b> - A Lightsail block storage
                *           disk</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>DiskSnapshot</code>
                *                   </b> - A block storage disk
                *           snapshot</p>
                *             </li>
                *          </ul>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The tag keys and optional values for the resource. For more information about tags in
                *       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
            /**
                * <p>The load balancer name where your SSL/TLS certificate is attached.</p>
                */
            loadBalancerName?: string;
            /**
                * <p>When <code>true</code>, the SSL/TLS certificate is attached to the Lightsail load
                *       balancer.</p>
                */
            isAttached?: boolean;
            /**
                * <p>The validation status of the SSL/TLS certificate. Valid values are below.</p>
                */
            status?: LoadBalancerTlsCertificateStatus | string;
            /**
                * <p>The domain name for your SSL/TLS certificate.</p>
                */
            domainName?: string;
            /**
                * <p>An array of LoadBalancerTlsCertificateDomainValidationRecord objects describing the
                *       records.</p>
                */
            domainValidationRecords?: LoadBalancerTlsCertificateDomainValidationRecord[];
            /**
                * <p>The validation failure reason, if any, of the certificate.</p>
                *
                *          <p>The following failure reasons are possible:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>NO_AVAILABLE_CONTACTS</code>
                *                   </b> - This failure
                *           applies to email validation, which is not available for Lightsail certificates.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>ADDITIONAL_VERIFICATION_REQUIRED</code>
                *                   </b> -
                *           Lightsail requires additional information to process this certificate request. This can
                *           happen as a fraud-protection measure, such as when the domain ranks within the Alexa top
                *           1000 websites. To provide the required information, use the <a href="https://console.aws.amazon.com/support/home">AWS Support Center</a> to contact
                *           AWS Support.</p>
                *                <note>
                *                   <p>You cannot request a certificate for Amazon-owned domain names such as those ending
                *             in amazonaws.com, cloudfront.net, or elasticbeanstalk.com.</p>
                *                </note>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>DOMAIN_NOT_ALLOWED</code>
                *                   </b> - One or more of the
                *           domain names in the certificate request was reported as an unsafe domain by <a href="https://www.virustotal.com/gui/home/url">VirusTotal</a>. To correct the
                *           problem, search for your domain name on the <a href="https://www.virustotal.com/gui/home/url">VirusTotal</a> website. If your domain
                *           is reported as suspicious, see <a href="https://developers.google.com/web/fundamentals/security/hacked">Google Help for
                *             Hacked Websites</a> to learn what you can do.</p>
                *                <p>If you believe that the result is a false positive, notify the organization that is
                *           reporting the domain. VirusTotal is an aggregate of several antivirus and URL scanners and
                *           cannot remove your domain from a block list itself. After you correct the problem and the
                *           VirusTotal registry has been updated, request a new certificate.</p>
                *                <p>If you see this error and your domain is not included in the VirusTotal list, visit
                *           the <a href="https://console.aws.amazon.com/support/home">AWS Support Center</a>
                *           and create a case.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>INVALID_PUBLIC_DOMAIN</code>
                *                   </b> - One or more of
                *           the domain names in the certificate request is not valid. Typically, this is because a
                *           domain name in the request is not a valid top-level domain. Try to request a certificate
                *           again, correcting any spelling errors or typos that were in the failed request, and ensure
                *           that all domain names in the request are for valid top-level domains. For example, you
                *           cannot request a certificate for <code>example.invalidpublicdomain</code> because
                *             <code>invalidpublicdomain</code> is not a valid top-level domain.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>OTHER</code>
                *                   </b> - Typically, this failure occurs
                *           when there is a typographical error in one or more of the domain names in the certificate
                *           request. Try to request a certificate again, correcting any spelling errors or typos that
                *           were in the failed request. </p>
                *             </li>
                *          </ul>
                */
            failureReason?: LoadBalancerTlsCertificateFailureReason | string;
            /**
                * <p>The time when the SSL/TLS certificate was issued.</p>
                */
            issuedAt?: Date;
            /**
                * <p>The issuer of the certificate.</p>
                */
            issuer?: string;
            /**
                * <p>The algorithm used to generate the key pair (the public and private key).</p>
                */
            keyAlgorithm?: string;
            /**
                * <p>The timestamp when the SSL/TLS certificate expires.</p>
                */
            notAfter?: Date;
            /**
                * <p>The timestamp when the SSL/TLS certificate is first valid.</p>
                */
            notBefore?: Date;
            /**
                * <p>An object that describes the status of the certificate renewal managed by
                *       Lightsail.</p>
                */
            renewalSummary?: LoadBalancerTlsCertificateRenewalSummary;
            /**
                * <p>The reason the certificate was revoked. This value is present only when the certificate
                *       status is <code>REVOKED</code>.</p>
                */
            revocationReason?: LoadBalancerTlsCertificateRevocationReason | string;
            /**
                * <p>The timestamp when the certificate was revoked. This value is present only when the
                *       certificate status is <code>REVOKED</code>.</p>
                */
            revokedAt?: Date;
            /**
                * <p>The serial number of the certificate.</p>
                */
            serial?: string;
            /**
                * <p>The algorithm that was used to sign the certificate.</p>
                */
            signatureAlgorithm?: string;
            /**
                * <p>The name of the entity that is associated with the public key contained in the
                *       certificate.</p>
                */
            subject?: string;
            /**
                * <p>An array of strings that specify the alternate domains (e.g., <code>example2.com</code>)
                *       and subdomains (e.g., <code>blog.example.com</code>) for the certificate.</p>
                */
            subjectAlternativeNames?: string[];
    }
    export namespace LoadBalancerTlsCertificate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancerTlsCertificate) => any;
    }
    export interface GetLoadBalancerTlsCertificatesResult {
            /**
                * <p>An array of LoadBalancerTlsCertificate objects describing your SSL/TLS
                *       certificates.</p>
                */
            tlsCertificates?: LoadBalancerTlsCertificate[];
    }
    export namespace GetLoadBalancerTlsCertificatesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoadBalancerTlsCertificatesResult) => any;
    }
    export interface GetLoadBalancerTlsPoliciesRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *
                *          <p>To get a page token, perform an initial <code>GetLoadBalancerTlsPolicies</code> request.
                *       If your results are paginated, the response will return a next page token that you can specify
                *       as the page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetLoadBalancerTlsPoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoadBalancerTlsPoliciesRequest) => any;
    }
    /**
        * <p>Describes the TLS security policies that are available for Lightsail load
        *       balancers.</p>
        *
        *          <p>For more information about load balancer TLS security policies, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-configure-load-balancer-tls-security-policy">Configuring TLS security policies on your Amazon Lightsail load
        *         balancers</a> in the <i>Amazon Lightsail Developer
        *       Guide</i>.</p>
        */
    export interface LoadBalancerTlsPolicy {
            /**
                * <p>The name of the TLS security policy.</p>
                */
            name?: string;
            /**
                * <p>A Boolean value that indicates whether the TLS security policy is the default.</p>
                */
            isDefault?: boolean;
            /**
                * <p>The description of the TLS security policy.</p>
                */
            description?: string;
            /**
                * <p>The protocols used in a given TLS security policy.</p>
                */
            protocols?: string[];
            /**
                * <p>The ciphers used by the TLS security policy.</p>
                *          <p>The ciphers are listed in order of preference.</p>
                */
            ciphers?: string[];
    }
    export namespace LoadBalancerTlsPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoadBalancerTlsPolicy) => any;
    }
    export interface GetLoadBalancerTlsPoliciesResult {
            /**
                * <p>An array of objects that describe the TLS security policies that are available.</p>
                */
            tlsPolicies?: LoadBalancerTlsPolicy[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *
                *          <p>To get the next page of results, perform another <code>GetLoadBalancerTlsPolicies</code>
                *       request and specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetLoadBalancerTlsPoliciesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoadBalancerTlsPoliciesResult) => any;
    }
    export interface GetOperationRequest {
            /**
                * <p>A GUID used to identify the operation.</p>
                */
            operationId: string | undefined;
    }
    export namespace GetOperationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOperationRequest) => any;
    }
    export interface GetOperationResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace GetOperationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOperationResult) => any;
    }
    export interface GetOperationsRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetOperations</code> request. If your
                *       results are paginated, the response will return a next page token that you can specify as the
                *       page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetOperationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOperationsRequest) => any;
    }
    export interface GetOperationsResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetOperations</code> request and
                *       specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetOperationsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOperationsResult) => any;
    }
    export interface GetOperationsForResourceRequest {
            /**
                * <p>The name of the resource for which you are requesting information.</p>
                */
            resourceName: string | undefined;
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetOperationsForResource</code> request. If
                *       your results are paginated, the response will return a next page token that you can specify as
                *       the page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetOperationsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOperationsForResourceRequest) => any;
    }
    export interface GetOperationsForResourceResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
            /**
                * @deprecated
                *
                * <p>(Deprecated) Returns the number of pages of results that remain.</p>
                *          <note>
                *             <p>In releases prior to June 12, 2017, this parameter returned <code>null</code> by the
                *         API. It is now deprecated, and the API returns the <code>next page token</code> parameter
                *         instead.</p>
                *          </note>
                */
            nextPageCount?: string;
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetOperationsForResource</code>
                *       request and specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetOperationsForResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOperationsForResourceResult) => any;
    }
    export interface GetRegionsRequest {
            /**
                * <p>A Boolean value indicating whether to also include Availability Zones in your get regions
                *       request. Availability Zones are indicated with a letter: e.g., <code>us-east-2a</code>.</p>
                */
            includeAvailabilityZones?: boolean;
            /**
                * <p>A Boolean value indicating whether to also include Availability Zones for databases in
                *       your get regions request. Availability Zones are indicated with a letter (e.g.,
                *         <code>us-east-2a</code>).</p>
                */
            includeRelationalDatabaseAvailabilityZones?: boolean;
    }
    export namespace GetRegionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRegionsRequest) => any;
    }
    /**
        * <p>Describes the AWS Region.</p>
        */
    export interface Region {
            /**
                * <p>The continent code (e.g., <code>NA</code>, meaning North America).</p>
                */
            continentCode?: string;
            /**
                * <p>The description of the AWS Region (e.g., <code>This region is recommended to serve users
                *         in the eastern United States and eastern Canada</code>).</p>
                */
            description?: string;
            /**
                * <p>The display name (e.g., <code>Ohio</code>).</p>
                */
            displayName?: string;
            /**
                * <p>The region name (e.g., <code>us-east-2</code>).</p>
                */
            name?: RegionName | string;
            /**
                * <p>The Availability Zones. Follows the format <code>us-east-2a</code>
                *       (case-sensitive).</p>
                */
            availabilityZones?: AvailabilityZone[];
            /**
                * <p>The Availability Zones for databases. Follows the format <code>us-east-2a</code>
                *       (case-sensitive).</p>
                */
            relationalDatabaseAvailabilityZones?: AvailabilityZone[];
    }
    export namespace Region {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Region) => any;
    }
    export interface GetRegionsResult {
            /**
                * <p>An array of key-value pairs containing information about your get regions request.</p>
                */
            regions?: Region[];
    }
    export namespace GetRegionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRegionsResult) => any;
    }
    export interface GetRelationalDatabaseRequest {
            /**
                * <p>The name of the database that you are looking up.</p>
                */
            relationalDatabaseName: string | undefined;
    }
    export namespace GetRelationalDatabaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseRequest) => any;
    }
    /**
        * <p>Describes the hardware of a database.</p>
        */
    export interface RelationalDatabaseHardware {
            /**
                * <p>The number of vCPUs for the database.</p>
                */
            cpuCount?: number;
            /**
                * <p>The size of the disk for the database.</p>
                */
            diskSizeInGb?: number;
            /**
                * <p>The amount of RAM in GB for the database.</p>
                */
            ramSizeInGb?: number;
    }
    export namespace RelationalDatabaseHardware {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelationalDatabaseHardware) => any;
    }
    /**
        * <p>Describes an endpoint for a database.</p>
        */
    export interface RelationalDatabaseEndpoint {
            /**
                * <p>Specifies the port that the database is listening on.</p>
                */
            port?: number;
            /**
                * <p>Specifies the DNS address of the database.</p>
                */
            address?: string;
    }
    export namespace RelationalDatabaseEndpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelationalDatabaseEndpoint) => any;
    }
    /**
        * <p>Describes a pending database maintenance action.</p>
        */
    export interface PendingMaintenanceAction {
            /**
                * <p>The type of pending database maintenance action.</p>
                */
            action?: string;
            /**
                * <p>Additional detail about the pending database maintenance action.</p>
                */
            description?: string;
            /**
                * <p>The effective date of the pending database maintenance action.</p>
                */
            currentApplyDate?: Date;
    }
    export namespace PendingMaintenanceAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingMaintenanceAction) => any;
    }
    /**
        * <p>Describes a pending database value modification.</p>
        */
    export interface PendingModifiedRelationalDatabaseValues {
            /**
                * <p>The password for the master user of the database.</p>
                */
            masterUserPassword?: string;
            /**
                * <p>The database engine version.</p>
                */
            engineVersion?: string;
            /**
                * <p>A Boolean value indicating whether automated backup retention is enabled.</p>
                */
            backupRetentionEnabled?: boolean;
    }
    export namespace PendingModifiedRelationalDatabaseValues {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PendingModifiedRelationalDatabaseValues) => any;
    }
    /**
        * <p>Describes a database.</p>
        */
    export interface RelationalDatabase {
            /**
                * <p>The unique name of the database resource in Lightsail.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the database.</p>
                */
            arn?: string;
            /**
                * <p>The support code for the database. Include this code in your email to support when you
                *       have questions about a database in Lightsail. This code enables our support team to look up
                *       your Lightsail information more easily.</p>
                */
            supportCode?: string;
            /**
                * <p>The timestamp when the database was created. Formatted in Unix time.</p>
                */
            createdAt?: Date;
            /**
                * <p>The Region name and Availability Zone where the database is located.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The Lightsail resource type for the database (for example,
                *         <code>RelationalDatabase</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The tag keys and optional values for the resource. For more information about tags in
                *       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
            /**
                * <p>The blueprint ID for the database. A blueprint describes the major engine version of a
                *       database.</p>
                */
            relationalDatabaseBlueprintId?: string;
            /**
                * <p>The bundle ID for the database. A bundle describes the performance specifications for your
                *       database.</p>
                */
            relationalDatabaseBundleId?: string;
            /**
                * <p>The name of the master database created when the Lightsail database resource is
                *       created.</p>
                */
            masterDatabaseName?: string;
            /**
                * <p>Describes the hardware of the database.</p>
                */
            hardware?: RelationalDatabaseHardware;
            /**
                * <p>Describes the current state of the database.</p>
                */
            state?: string;
            /**
                * <p>Describes the secondary Availability Zone of a high availability database.</p>
                *          <p>The secondary database is used for failover support of a high availability
                *       database.</p>
                */
            secondaryAvailabilityZone?: string;
            /**
                * <p>A Boolean value indicating whether automated backup retention is enabled for the
                *       database.</p>
                */
            backupRetentionEnabled?: boolean;
            /**
                * <p>Describes pending database value modifications.</p>
                */
            pendingModifiedValues?: PendingModifiedRelationalDatabaseValues;
            /**
                * <p>The database software (for example, <code>MySQL</code>).</p>
                */
            engine?: string;
            /**
                * <p>The database engine version (for example, <code>5.7.23</code>).</p>
                */
            engineVersion?: string;
            /**
                * <p>The latest point in time to which the database can be restored. Formatted in Unix
                *       time.</p>
                */
            latestRestorableTime?: Date;
            /**
                * <p>The master user name of the database.</p>
                */
            masterUsername?: string;
            /**
                * <p>The status of parameter updates for the database.</p>
                */
            parameterApplyStatus?: string;
            /**
                * <p>The daily time range during which automated backups are created for the database (for
                *       example, <code>16:00-16:30</code>).</p>
                */
            preferredBackupWindow?: string;
            /**
                * <p>The weekly time range during which system maintenance can occur on the database.</p>
                *          <p>In the format <code>ddd:hh24:mi-ddd:hh24:mi</code>. For example,
                *         <code>Tue:17:00-Tue:17:30</code>.</p>
                */
            preferredMaintenanceWindow?: string;
            /**
                * <p>A Boolean value indicating whether the database is publicly accessible.</p>
                */
            publiclyAccessible?: boolean;
            /**
                * <p>The master endpoint for the database.</p>
                */
            masterEndpoint?: RelationalDatabaseEndpoint;
            /**
                * <p>Describes the pending maintenance actions for the database.</p>
                */
            pendingMaintenanceActions?: PendingMaintenanceAction[];
            /**
                * <p>The certificate associated with the database.</p>
                */
            caCertificateIdentifier?: string;
    }
    export namespace RelationalDatabase {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelationalDatabase) => any;
    }
    export interface GetRelationalDatabaseResult {
            /**
                * <p>An object describing the specified database.</p>
                */
            relationalDatabase?: RelationalDatabase;
    }
    export namespace GetRelationalDatabaseResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseResult) => any;
    }
    export interface GetRelationalDatabaseBlueprintsRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetRelationalDatabaseBlueprints</code>
                *       request. If your results are paginated, the response will return a next page token that you
                *       can specify as the page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetRelationalDatabaseBlueprintsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseBlueprintsRequest) => any;
    }
    export enum RelationalDatabaseEngine {
            MYSQL = "mysql"
    }
    /**
        * <p>Describes a database image, or blueprint. A blueprint describes the major engine version
        *       of a database.</p>
        */
    export interface RelationalDatabaseBlueprint {
            /**
                * <p>The ID for the database blueprint.</p>
                */
            blueprintId?: string;
            /**
                * <p>The database software of the database blueprint (for example, <code>MySQL</code>).</p>
                */
            engine?: RelationalDatabaseEngine | string;
            /**
                * <p>The database engine version for the database blueprint (for example,
                *       <code>5.7.23</code>).</p>
                */
            engineVersion?: string;
            /**
                * <p>The description of the database engine for the database blueprint.</p>
                */
            engineDescription?: string;
            /**
                * <p>The description of the database engine version for the database blueprint.</p>
                */
            engineVersionDescription?: string;
            /**
                * <p>A Boolean value indicating whether the engine version is the default for the database
                *       blueprint.</p>
                */
            isEngineDefault?: boolean;
    }
    export namespace RelationalDatabaseBlueprint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelationalDatabaseBlueprint) => any;
    }
    export interface GetRelationalDatabaseBlueprintsResult {
            /**
                * <p>An object describing the result of your get relational database blueprints request.</p>
                */
            blueprints?: RelationalDatabaseBlueprint[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another
                *         <code>GetRelationalDatabaseBlueprints</code> request and specify the next page token using
                *       the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetRelationalDatabaseBlueprintsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseBlueprintsResult) => any;
    }
    export interface GetRelationalDatabaseBundlesRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetRelationalDatabaseBundles</code> request.
                *       If your results are paginated, the response will return a next page token that you can specify
                *       as the page token in a subsequent request.</p>
                */
            pageToken?: string;
            /**
                * <p>A Boolean value that indicates whether to include inactive (unavailable) bundles in the
                *       response of your request.</p>
                */
            includeInactive?: boolean;
    }
    export namespace GetRelationalDatabaseBundlesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseBundlesRequest) => any;
    }
    /**
        * <p>Describes a database bundle. A bundle describes the performance specifications of the
        *       database.</p>
        */
    export interface RelationalDatabaseBundle {
            /**
                * <p>The ID for the database bundle.</p>
                */
            bundleId?: string;
            /**
                * <p>The name for the database bundle.</p>
                */
            name?: string;
            /**
                * <p>The cost of the database bundle in US currency.</p>
                */
            price?: number;
            /**
                * <p>The amount of RAM in GB (for example, <code>2.0</code>) for the database bundle.</p>
                */
            ramSizeInGb?: number;
            /**
                * <p>The size of the disk for the database bundle.</p>
                */
            diskSizeInGb?: number;
            /**
                * <p>The data transfer rate per month in GB for the database bundle.</p>
                */
            transferPerMonthInGb?: number;
            /**
                * <p>The number of virtual CPUs (vCPUs) for the database bundle.</p>
                */
            cpuCount?: number;
            /**
                * <p>A Boolean value indicating whether the database bundle is encrypted.</p>
                */
            isEncrypted?: boolean;
            /**
                * <p>A Boolean value indicating whether the database bundle is active.</p>
                */
            isActive?: boolean;
    }
    export namespace RelationalDatabaseBundle {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelationalDatabaseBundle) => any;
    }
    export interface GetRelationalDatabaseBundlesResult {
            /**
                * <p>An object describing the result of your get relational database bundles request.</p>
                */
            bundles?: RelationalDatabaseBundle[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetRelationalDatabaseBundles</code>
                *       request and specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetRelationalDatabaseBundlesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseBundlesResult) => any;
    }
    export interface GetRelationalDatabaseEventsRequest {
            /**
                * <p>The name of the database from which to get events.</p>
                */
            relationalDatabaseName: string | undefined;
            /**
                * <p>The number of minutes in the past from which to retrieve events. For example, to get all
                *       events from the past 2 hours, enter 120.</p>
                *          <p>Default: <code>60</code>
                *          </p>
                *          <p>The minimum is 1 and the maximum is 14 days (20160 minutes).</p>
                */
            durationInMinutes?: number;
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetRelationalDatabaseEvents</code> request.
                *       If your results are paginated, the response will return a next page token that you can specify
                *       as the page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetRelationalDatabaseEventsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseEventsRequest) => any;
    }
    /**
        * <p>Describes an event for a database.</p>
        */
    export interface RelationalDatabaseEvent {
            /**
                * <p>The database that the database event relates to.</p>
                */
            resource?: string;
            /**
                * <p>The timestamp when the database event was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The message of the database event.</p>
                */
            message?: string;
            /**
                * <p>The category that the database event belongs to.</p>
                */
            eventCategories?: string[];
    }
    export namespace RelationalDatabaseEvent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelationalDatabaseEvent) => any;
    }
    export interface GetRelationalDatabaseEventsResult {
            /**
                * <p>An object describing the result of your get relational database events request.</p>
                */
            relationalDatabaseEvents?: RelationalDatabaseEvent[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetRelationalDatabaseEvents</code>
                *       request and specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetRelationalDatabaseEventsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseEventsResult) => any;
    }
    export interface GetRelationalDatabaseLogEventsRequest {
            /**
                * <p>The name of your database for which to get log events.</p>
                */
            relationalDatabaseName: string | undefined;
            /**
                * <p>The name of the log stream.</p>
                *          <p>Use the <code>get relational database log streams</code> operation to get a list of
                *       available log streams.</p>
                */
            logStreamName: string | undefined;
            /**
                * <p>The start of the time interval from which to get log events.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Specified in Coordinated Universal Time (UTC).</p>
                *             </li>
                *             <li>
                *                <p>Specified in the Unix time format.</p>
                *                <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you
                *           input <code>1538424000</code> as the start time.</p>
                *             </li>
                *          </ul>
                */
            startTime?: Date;
            /**
                * <p>The end of the time interval from which to get log events.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Specified in Coordinated Universal Time (UTC).</p>
                *             </li>
                *             <li>
                *                <p>Specified in the Unix time format.</p>
                *                <p>For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you
                *           input <code>1538424000</code> as the end time.</p>
                *
                *             </li>
                *          </ul>
                */
            endTime?: Date;
            /**
                * <p>Parameter to specify if the log should start from head or tail. If <code>true</code> is
                *       specified, the log event starts from the head of the log. If <code>false</code> is specified,
                *       the log event starts from the tail of the log.</p>
                *          <note>
                *             <p>For PostgreSQL, the default value of <code>false</code> is the only option
                *         available.</p>
                *          </note>
                */
            startFromHead?: boolean;
            /**
                * <p>The token to advance to the next or previous page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetRelationalDatabaseLogEvents</code>
                *       request. If your results are paginated, the response will return a next forward token and/or
                *       next backward token that you can specify as the page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetRelationalDatabaseLogEventsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseLogEventsRequest) => any;
    }
    /**
        * <p>Describes a database log event.</p>
        */
    export interface LogEvent {
            /**
                * <p>The timestamp when the database log event was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The message of the database log event.</p>
                */
            message?: string;
    }
    export namespace LogEvent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LogEvent) => any;
    }
    export interface GetRelationalDatabaseLogEventsResult {
            /**
                * <p>An object describing the result of your get relational database log events request.</p>
                */
            resourceLogEvents?: LogEvent[];
            /**
                * <p>A token used for advancing to the previous page of results from your get relational
                *       database log events request.</p>
                */
            nextBackwardToken?: string;
            /**
                * <p>A token used for advancing to the next page of results from your get relational database
                *       log events request.</p>
                */
            nextForwardToken?: string;
    }
    export namespace GetRelationalDatabaseLogEventsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseLogEventsResult) => any;
    }
    export interface GetRelationalDatabaseLogStreamsRequest {
            /**
                * <p>The name of your database for which to get log streams.</p>
                */
            relationalDatabaseName: string | undefined;
    }
    export namespace GetRelationalDatabaseLogStreamsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseLogStreamsRequest) => any;
    }
    export interface GetRelationalDatabaseLogStreamsResult {
            /**
                * <p>An object describing the result of your get relational database log streams
                *       request.</p>
                */
            logStreams?: string[];
    }
    export namespace GetRelationalDatabaseLogStreamsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseLogStreamsResult) => any;
    }
    export enum RelationalDatabasePasswordVersion {
            CURRENT = "CURRENT",
            PENDING = "PENDING",
            PREVIOUS = "PREVIOUS"
    }
    export interface GetRelationalDatabaseMasterUserPasswordRequest {
            /**
                * <p>The name of your database for which to get the master user password.</p>
                */
            relationalDatabaseName: string | undefined;
            /**
                * <p>The password version to return.</p>
                *          <p>Specifying <code>CURRENT</code> or <code>PREVIOUS</code> returns the current or previous
                *       passwords respectively. Specifying <code>PENDING</code> returns the newest version of the
                *       password that will rotate to <code>CURRENT</code>. After the <code>PENDING</code> password
                *       rotates to <code>CURRENT</code>, the <code>PENDING</code> password is no longer
                *       available.</p>
                *          <p>Default: <code>CURRENT</code>
                *          </p>
                */
            passwordVersion?: RelationalDatabasePasswordVersion | string;
    }
    export namespace GetRelationalDatabaseMasterUserPasswordRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseMasterUserPasswordRequest) => any;
    }
    export interface GetRelationalDatabaseMasterUserPasswordResult {
            /**
                * <p>The master user password for the <code>password version</code> specified.</p>
                */
            masterUserPassword?: string;
            /**
                * <p>The timestamp when the specified version of the master user password was created.</p>
                */
            createdAt?: Date;
    }
    export namespace GetRelationalDatabaseMasterUserPasswordResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseMasterUserPasswordResult) => any;
    }
    export enum RelationalDatabaseMetricName {
            CPUUtilization = "CPUUtilization",
            DatabaseConnections = "DatabaseConnections",
            DiskQueueDepth = "DiskQueueDepth",
            FreeStorageSpace = "FreeStorageSpace",
            NetworkReceiveThroughput = "NetworkReceiveThroughput",
            NetworkTransmitThroughput = "NetworkTransmitThroughput"
    }
    export interface GetRelationalDatabaseMetricDataRequest {
            /**
                * <p>The name of your database from which to get metric data.</p>
                */
            relationalDatabaseName: string | undefined;
            /**
                * <p>The metric for which you want to return information.</p>
                *          <p>Valid relational database metric names are listed below, along with the most useful
                *         <code>statistics</code> to include in your request, and the published <code>unit</code>
                *       value. All relational database metric data is available in 1-minute (60 seconds)
                *       granularity.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>CPUUtilization</code>
                *                   </b> - The percentage of CPU
                *           utilization currently in use on the database.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
                *             <code>Average</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Percent</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>DatabaseConnections</code>
                *                   </b> - The number of
                *           database connections in use.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistics are <code>Maximum</code> and
                *             <code>Sum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>DiskQueueDepth</code>
                *                   </b> - The number of
                *           outstanding IOs (read/write requests) that are waiting to access the disk.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Count</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>FreeStorageSpace</code>
                *                   </b> - The amount of
                *           available storage space.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Sum</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Bytes</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>NetworkReceiveThroughput</code>
                *                   </b> - The incoming
                *           (Receive) network traffic on the database, including both customer database traffic and
                *           AWS traffic used for monitoring and replication.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Bytes/Second</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>NetworkTransmitThroughput</code>
                *                   </b> - The outgoing
                *           (Transmit) network traffic on the database, including both customer database traffic and
                *           AWS traffic used for monitoring and replication.</p>
                *                <p>
                *                   <code>Statistics</code>: The most useful statistic is <code>Average</code>.</p>
                *                <p>
                *                   <code>Unit</code>: The published unit is <code>Bytes/Second</code>.</p>
                *             </li>
                *          </ul>
                */
            metricName: RelationalDatabaseMetricName | string | undefined;
            /**
                * <p>The granularity, in seconds, of the returned data points.</p>
                *          <p>All relational database metric data is available in 1-minute (60 seconds)
                *       granularity.</p>
                */
            period: number | undefined;
            /**
                * <p>The start of the time interval from which to get metric data.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Specified in Coordinated Universal Time (UTC).</p>
                *             </li>
                *             <li>
                *                <p>Specified in the Unix time format.</p>
                *                <p>For example, if you wish to use a start time of October 1, 2018, at 8 PM UTC, then you
                *           input <code>1538424000</code> as the start time.</p>
                *
                *             </li>
                *          </ul>
                */
            startTime: Date | undefined;
            /**
                * <p>The end of the time interval from which to get metric data.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Specified in Coordinated Universal Time (UTC).</p>
                *             </li>
                *             <li>
                *                <p>Specified in the Unix time format.</p>
                *                <p>For example, if you wish to use an end time of October 1, 2018, at 8 PM UTC, then you
                *           input <code>1538424000</code> as the end time.</p>
                *
                *             </li>
                *          </ul>
                */
            endTime: Date | undefined;
            /**
                * <p>The unit for the metric data request. Valid units depend on the metric data being
                *       requested. For the valid units with each available metric, see the <code>metricName</code>
                *       parameter.</p>
                */
            unit: MetricUnit | string | undefined;
            /**
                * <p>The statistic for the metric.</p>
                *          <p>The following statistics are available:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Minimum</code> - The lowest value observed during the specified period. Use this
                *           value to determine low volumes of activity for your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Maximum</code> - The highest value observed during the specified period. Use
                *           this value to determine high volumes of activity for your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Sum</code> - All values submitted for the matching metric added together. You
                *           can use this statistic to determine the total volume of a metric.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Average</code> - The value of Sum / SampleCount during the specified period. By
                *           comparing this statistic with the Minimum and Maximum values, you can determine the full
                *           scope of a metric and how close the average use is to the Minimum and Maximum values. This
                *           comparison helps you to know when to increase or decrease your resources.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>SampleCount</code> - The count, or number, of data points used for the
                *           statistical calculation.</p>
                *             </li>
                *          </ul>
                */
            statistics: (MetricStatistic | string)[] | undefined;
    }
    export namespace GetRelationalDatabaseMetricDataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseMetricDataRequest) => any;
    }
    export interface GetRelationalDatabaseMetricDataResult {
            /**
                * <p>The name of the metric returned.</p>
                */
            metricName?: RelationalDatabaseMetricName | string;
            /**
                * <p>An array of objects that describe the metric data returned.</p>
                */
            metricData?: MetricDatapoint[];
    }
    export namespace GetRelationalDatabaseMetricDataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseMetricDataResult) => any;
    }
    export interface GetRelationalDatabaseParametersRequest {
            /**
                * <p>The name of your database for which to get parameters.</p>
                */
            relationalDatabaseName: string | undefined;
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetRelationalDatabaseParameters</code>
                *       request. If your results are paginated, the response will return a next page token that you
                *       can specify as the page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetRelationalDatabaseParametersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseParametersRequest) => any;
    }
    /**
        * <p>Describes the parameters of a database.</p>
        */
    export interface RelationalDatabaseParameter {
            /**
                * <p>Specifies the valid range of values for the parameter.</p>
                */
            allowedValues?: string;
            /**
                * <p>Indicates when parameter updates are applied.</p>
                *          <p>Can be <code>immediate</code> or <code>pending-reboot</code>.</p>
                */
            applyMethod?: string;
            /**
                * <p>Specifies the engine-specific parameter type.</p>
                */
            applyType?: string;
            /**
                * <p>Specifies the valid data type for the parameter.</p>
                */
            dataType?: string;
            /**
                * <p>Provides a description of the parameter.</p>
                */
            description?: string;
            /**
                * <p>A Boolean value indicating whether the parameter can be modified.</p>
                */
            isModifiable?: boolean;
            /**
                * <p>Specifies the name of the parameter.</p>
                */
            parameterName?: string;
            /**
                * <p>Specifies the value of the parameter.</p>
                */
            parameterValue?: string;
    }
    export namespace RelationalDatabaseParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelationalDatabaseParameter) => any;
    }
    export interface GetRelationalDatabaseParametersResult {
            /**
                * <p>An object describing the result of your get relational database parameters request.</p>
                */
            parameters?: RelationalDatabaseParameter[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another
                *         <code>GetRelationalDatabaseParameters</code> request and specify the next page token using
                *       the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetRelationalDatabaseParametersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseParametersResult) => any;
    }
    export interface GetRelationalDatabasesRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetRelationalDatabases</code> request. If
                *       your results are paginated, the response will return a next page token that you can specify as
                *       the page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetRelationalDatabasesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabasesRequest) => any;
    }
    export interface GetRelationalDatabasesResult {
            /**
                * <p>An object describing the result of your get relational databases request.</p>
                */
            relationalDatabases?: RelationalDatabase[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetRelationalDatabases</code>
                *       request and specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetRelationalDatabasesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabasesResult) => any;
    }
    export interface GetRelationalDatabaseSnapshotRequest {
            /**
                * <p>The name of the database snapshot for which to get information.</p>
                */
            relationalDatabaseSnapshotName: string | undefined;
    }
    export namespace GetRelationalDatabaseSnapshotRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseSnapshotRequest) => any;
    }
    /**
        * <p>Describes a database snapshot.</p>
        */
    export interface RelationalDatabaseSnapshot {
            /**
                * <p>The name of the database snapshot.</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the database snapshot.</p>
                */
            arn?: string;
            /**
                * <p>The support code for the database snapshot. Include this code in your email to support
                *       when you have questions about a database snapshot in Lightsail. This code enables our
                *       support team to look up your Lightsail information more easily.</p>
                */
            supportCode?: string;
            /**
                * <p>The timestamp when the database snapshot was created.</p>
                */
            createdAt?: Date;
            /**
                * <p>The Region name and Availability Zone where the database snapshot is located.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The Lightsail resource type.</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The tag keys and optional values for the resource. For more information about tags in
                *       Lightsail, see the <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-tags">Amazon Lightsail Developer Guide</a>.</p>
                */
            tags?: Tag[];
            /**
                * <p>The software of the database snapshot (for example, <code>MySQL</code>)</p>
                */
            engine?: string;
            /**
                * <p>The database engine version for the database snapshot (for example,
                *       <code>5.7.23</code>).</p>
                */
            engineVersion?: string;
            /**
                * <p>The size of the disk in GB (for example, <code>32</code>) for the database
                *       snapshot.</p>
                */
            sizeInGb?: number;
            /**
                * <p>The state of the database snapshot.</p>
                */
            state?: string;
            /**
                * <p>The name of the source database from which the database snapshot was created.</p>
                */
            fromRelationalDatabaseName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the database from which the database snapshot was
                *       created.</p>
                */
            fromRelationalDatabaseArn?: string;
            /**
                * <p>The bundle ID of the database from which the database snapshot was created.</p>
                */
            fromRelationalDatabaseBundleId?: string;
            /**
                * <p>The blueprint ID of the database from which the database snapshot was created. A blueprint
                *       describes the major engine version of a database.</p>
                */
            fromRelationalDatabaseBlueprintId?: string;
    }
    export namespace RelationalDatabaseSnapshot {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelationalDatabaseSnapshot) => any;
    }
    export interface GetRelationalDatabaseSnapshotResult {
            /**
                * <p>An object describing the specified database snapshot.</p>
                */
            relationalDatabaseSnapshot?: RelationalDatabaseSnapshot;
    }
    export namespace GetRelationalDatabaseSnapshotResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseSnapshotResult) => any;
    }
    export interface GetRelationalDatabaseSnapshotsRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetRelationalDatabaseSnapshots</code>
                *       request. If your results are paginated, the response will return a next page token that you
                *       can specify as the page token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetRelationalDatabaseSnapshotsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseSnapshotsRequest) => any;
    }
    export interface GetRelationalDatabaseSnapshotsResult {
            /**
                * <p>An object describing the result of your get relational database snapshots request.</p>
                */
            relationalDatabaseSnapshots?: RelationalDatabaseSnapshot[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another
                *         <code>GetRelationalDatabaseSnapshots</code> request and specify the next page token using
                *       the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetRelationalDatabaseSnapshotsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRelationalDatabaseSnapshotsResult) => any;
    }
    export interface GetStaticIpRequest {
            /**
                * <p>The name of the static IP in Lightsail.</p>
                */
            staticIpName: string | undefined;
    }
    export namespace GetStaticIpRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStaticIpRequest) => any;
    }
    /**
        * <p>Describes a static IP.</p>
        */
    export interface StaticIp {
            /**
                * <p>The name of the static IP (e.g., <code>StaticIP-Ohio-EXAMPLE</code>).</p>
                */
            name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the static IP (e.g.,
                *         <code>arn:aws:lightsail:us-east-2:123456789101:StaticIp/9cbb4a9e-f8e3-4dfe-b57e-12345EXAMPLE</code>).</p>
                */
            arn?: string;
            /**
                * <p>The support code. Include this code in your email to support when you have questions about
                *       an instance or another resource in Lightsail. This code enables our support team to look up
                *       your Lightsail information more easily.</p>
                */
            supportCode?: string;
            /**
                * <p>The timestamp when the static IP was created (e.g., <code>1479735304.222</code>).</p>
                */
            createdAt?: Date;
            /**
                * <p>The region and Availability Zone where the static IP was created.</p>
                */
            location?: ResourceLocation;
            /**
                * <p>The resource type (usually <code>StaticIp</code>).</p>
                */
            resourceType?: ResourceType | string;
            /**
                * <p>The static IP address.</p>
                */
            ipAddress?: string;
            /**
                * <p>The instance where the static IP is attached (e.g.,
                *       <code>Amazon_Linux-1GB-Ohio-1</code>).</p>
                */
            attachedTo?: string;
            /**
                * <p>A Boolean value indicating whether the static IP is attached.</p>
                */
            isAttached?: boolean;
    }
    export namespace StaticIp {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StaticIp) => any;
    }
    export interface GetStaticIpResult {
            /**
                * <p>An array of key-value pairs containing information about the requested static IP.</p>
                */
            staticIp?: StaticIp;
    }
    export namespace GetStaticIpResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStaticIpResult) => any;
    }
    export interface GetStaticIpsRequest {
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>To get a page token, perform an initial <code>GetStaticIps</code> request. If your results
                *       are paginated, the response will return a next page token that you can specify as the page
                *       token in a subsequent request.</p>
                */
            pageToken?: string;
    }
    export namespace GetStaticIpsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStaticIpsRequest) => any;
    }
    export interface GetStaticIpsResult {
            /**
                * <p>An array of key-value pairs containing information about your get static IPs
                *       request.</p>
                */
            staticIps?: StaticIp[];
            /**
                * <p>The token to advance to the next page of results from your request.</p>
                *          <p>A next page token is not returned if there are no more results to display.</p>
                *          <p>To get the next page of results, perform another <code>GetStaticIps</code> request and
                *       specify the next page token using the <code>pageToken</code> parameter.</p>
                */
            nextPageToken?: string;
    }
    export namespace GetStaticIpsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetStaticIpsResult) => any;
    }
    export interface ImportKeyPairRequest {
            /**
                * <p>The name of the key pair for which you want to import the public key.</p>
                */
            keyPairName: string | undefined;
            /**
                * <p>A base64-encoded public key of the <code>ssh-rsa</code> type.</p>
                */
            publicKeyBase64: string | undefined;
    }
    export namespace ImportKeyPairRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportKeyPairRequest) => any;
    }
    export interface ImportKeyPairResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace ImportKeyPairResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ImportKeyPairResult) => any;
    }
    export interface IsVpcPeeredRequest {
    }
    export namespace IsVpcPeeredRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IsVpcPeeredRequest) => any;
    }
    export interface IsVpcPeeredResult {
            /**
                * <p>Returns <code>true</code> if the Lightsail VPC is peered; otherwise,
                *       <code>false</code>.</p>
                */
            isPeered?: boolean;
    }
    export namespace IsVpcPeeredResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IsVpcPeeredResult) => any;
    }
    export interface OpenInstancePublicPortsRequest {
            /**
                * <p>An object to describe the ports to open for the specified instance.</p>
                */
            portInfo: PortInfo | undefined;
            /**
                * <p>The name of the instance for which to open ports.</p>
                */
            instanceName: string | undefined;
    }
    export namespace OpenInstancePublicPortsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpenInstancePublicPortsRequest) => any;
    }
    export interface OpenInstancePublicPortsResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace OpenInstancePublicPortsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpenInstancePublicPortsResult) => any;
    }
    export interface PeerVpcRequest {
    }
    export namespace PeerVpcRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PeerVpcRequest) => any;
    }
    export interface PeerVpcResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace PeerVpcResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PeerVpcResult) => any;
    }
    export interface PutAlarmRequest {
            /**
                * <p>The name for the alarm. Specify the name of an existing alarm to update, and overwrite the
                *       previous configuration of the alarm.</p>
                */
            alarmName: string | undefined;
            /**
                * <p>The name of the metric to associate with the alarm.</p>
                *          <p>You can configure up to two alarms per metric.</p>
                *          <p>The following metrics are available for each resource type:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Instances</b>: <code>BurstCapacityPercentage</code>,
                *             <code>BurstCapacityTime</code>, <code>CPUUtilization</code>, <code>NetworkIn</code>,
                *             <code>NetworkOut</code>, <code>StatusCheckFailed</code>,
                *             <code>StatusCheckFailed_Instance</code>, and
                *           <code>StatusCheckFailed_System</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Load balancers</b>:
                *             <code>ClientTLSNegotiationErrorCount</code>, <code>HealthyHostCount</code>,
                *             <code>UnhealthyHostCount</code>, <code>HTTPCode_LB_4XX_Count</code>,
                *             <code>HTTPCode_LB_5XX_Count</code>, <code>HTTPCode_Instance_2XX_Count</code>,
                *             <code>HTTPCode_Instance_3XX_Count</code>, <code>HTTPCode_Instance_4XX_Count</code>,
                *             <code>HTTPCode_Instance_5XX_Count</code>, <code>InstanceResponseTime</code>,
                *             <code>RejectedConnectionCount</code>, and <code>RequestCount</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Relational databases</b>: <code>CPUUtilization</code>,
                *             <code>DatabaseConnections</code>, <code>DiskQueueDepth</code>,
                *             <code>FreeStorageSpace</code>, <code>NetworkReceiveThroughput</code>, and
                *             <code>NetworkTransmitThroughput</code>.</p>
                *             </li>
                *          </ul>
                *          <p>For more information about these metrics, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-resource-health-metrics#available-metrics">Metrics available in Lightsail</a>.</p>
                */
            metricName: MetricName | string | undefined;
            /**
                * <p>The name of the Lightsail resource that will be monitored.</p>
                *          <p>Instances, load balancers, and relational databases are the only Lightsail resources
                *       that can currently be monitored by alarms.</p>
                */
            monitoredResourceName: string | undefined;
            /**
                * <p>The arithmetic operation to use when comparing the specified statistic to the threshold.
                *       The specified statistic value is used as the first operand.</p>
                */
            comparisonOperator: ComparisonOperator | string | undefined;
            /**
                * <p>The value against which the specified statistic is compared.</p>
                */
            threshold: number | undefined;
            /**
                * <p>The number of most recent periods over which data is compared to the specified threshold.
                *       If you are setting an "M out of N" alarm, this value (<code>evaluationPeriods</code>) is the
                *       N.</p>
                *          <p>If you are setting an alarm that requires that a number of consecutive data points be
                *       breaching to trigger the alarm, this value specifies the rolling period of time in which data
                *       points are evaluated.</p>
                *          <p>Each evaluation period is five minutes long. For example, specify an evaluation period of
                *       24 to evaluate a metric over a rolling period of two hours.</p>
                *          <p>You can specify a minimum valuation period of 1 (5 minutes), and a maximum evaluation
                *       period of 288 (24 hours).</p>
                */
            evaluationPeriods: number | undefined;
            /**
                * <p>The number of data points that must be not within the specified threshold to trigger the
                *       alarm. If you are setting an "M out of N" alarm, this value (<code>datapointsToAlarm</code>)
                *       is the M.</p>
                */
            datapointsToAlarm?: number;
            /**
                * <p>Sets how this alarm will handle missing data points.</p>
                *          <p>An alarm can treat missing data in the following ways:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>breaching</code> - Assume the missing data is not within the threshold. Missing
                *           data counts towards the number of times the metric is not within the threshold.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>notBreaching</code> - Assume the missing data is within the threshold. Missing
                *           data does not count towards the number of times the metric is not within the
                *           threshold.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ignore</code> - Ignore the missing data. Maintains the current alarm
                *           state.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>missing</code> - Missing data is treated as missing.</p>
                *             </li>
                *          </ul>
                *          <p>If <code>treatMissingData</code> is not specified, the default behavior of
                *         <code>missing</code> is used.</p>
                */
            treatMissingData?: TreatMissingData | string;
            /**
                * <p>The contact protocols to use for the alarm, such as <code>Email</code>, <code>SMS</code>
                *       (text messaging), or both.</p>
                *          <p>A notification is sent via the specified contact protocol if notifications are enabled for
                *       the alarm, and when the alarm is triggered.</p>
                *          <p>A notification is not sent if a contact protocol is not specified, if the specified
                *       contact protocol is not configured in the Amazon Web Services Region, or if notifications are
                *       not enabled for the alarm using the <code>notificationEnabled</code> paramater.</p>
                *          <p>Use the <code>CreateContactMethod</code> action to configure a contact protocol in an
                *         Amazon Web Services Region.</p>
                */
            contactProtocols?: (ContactProtocol | string)[];
            /**
                * <p>The alarm states that trigger a notification.</p>
                *          <p>An alarm has the following possible states:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ALARM</code> - The metric is outside of the defined threshold.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>INSUFFICIENT_DATA</code> - The alarm has just started, the metric is not
                *           available, or not enough data is available for the metric to determine the alarm
                *           state.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OK</code> - The metric is within the defined threshold.</p>
                *             </li>
                *          </ul>
                *          <p>When you specify a notification trigger, the <code>ALARM</code> state must be specified.
                *       The <code>INSUFFICIENT_DATA</code> and <code>OK</code> states can be specified in addition to
                *       the <code>ALARM</code> state.</p>
                *          <ul>
                *             <li>
                *                <p>If you specify <code>OK</code> as an alarm trigger, a notification is sent when the
                *           alarm switches from an <code>ALARM</code> or <code>INSUFFICIENT_DATA</code> alarm state to
                *           an <code>OK</code> state. This can be thought of as an <i>all clear</i>
                *           alarm notification.</p>
                *             </li>
                *             <li>
                *                <p>If you specify <code>INSUFFICIENT_DATA</code> as the alarm trigger, a notification is
                *           sent when the alarm switches from an <code>OK</code> or <code>ALARM</code> alarm state to
                *           an <code>INSUFFICIENT_DATA</code> state.</p>
                *             </li>
                *          </ul>
                *          <p>The notification trigger defaults to <code>ALARM</code> if you don't specify this
                *       parameter.</p>
                */
            notificationTriggers?: (AlarmState | string)[];
            /**
                * <p>Indicates whether the alarm is enabled.</p>
                *          <p>Notifications are enabled by default if you don't specify this parameter.</p>
                */
            notificationEnabled?: boolean;
    }
    export namespace PutAlarmRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAlarmRequest) => any;
    }
    export interface PutAlarmResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace PutAlarmResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutAlarmResult) => any;
    }
    export interface PutInstancePublicPortsRequest {
            /**
                * <p>An array of objects to describe the ports to open for the specified instance.</p>
                */
            portInfos: PortInfo[] | undefined;
            /**
                * <p>The name of the instance for which to open ports.</p>
                */
            instanceName: string | undefined;
    }
    export namespace PutInstancePublicPortsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutInstancePublicPortsRequest) => any;
    }
    export interface PutInstancePublicPortsResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace PutInstancePublicPortsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutInstancePublicPortsResult) => any;
    }
    export interface RebootInstanceRequest {
            /**
                * <p>The name of the instance to reboot.</p>
                */
            instanceName: string | undefined;
    }
    export namespace RebootInstanceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootInstanceRequest) => any;
    }
    export interface RebootInstanceResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace RebootInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootInstanceResult) => any;
    }
    export interface RebootRelationalDatabaseRequest {
            /**
                * <p>The name of your database to reboot.</p>
                */
            relationalDatabaseName: string | undefined;
    }
    export namespace RebootRelationalDatabaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootRelationalDatabaseRequest) => any;
    }
    export interface RebootRelationalDatabaseResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace RebootRelationalDatabaseResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootRelationalDatabaseResult) => any;
    }
    export interface RegisterContainerImageRequest {
            /**
                * <p>The name of the container service for which to register a container image.</p>
                */
            serviceName: string | undefined;
            /**
                * <p>The label for the container image when it's registered to the container service.</p>
                *
                *          <p>Use a descriptive label that you can use to track the different versions of your
                *       registered container images.</p>
                *
                *          <p>Use the <code>GetContainerImages</code> action to return the container images registered
                *       to a Lightsail container service. The label is the <code><imagelabel></code> portion
                *       of the following image name example:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>:container-service-1.<imagelabel>.1</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <p>If the name of your container service is <code>mycontainerservice</code>, and the label
                *       that you specify is <code>mystaticwebsite</code>, then the name of the registered container
                *       image will be <code>:mycontainerservice.mystaticwebsite.1</code>.</p>
                *
                *          <p>The number at the end of these image name examples represents the version of the
                *       registered container image. If you push and register another container image to the same
                *       Lightsail container service, with the same label, then the version number for the new
                *       registered container image will be <code>2</code>. If you push and register another container
                *       image, the version number will be <code>3</code>, and so on.</p>
                */
            label: string | undefined;
            /**
                * <p>The digest of the container image to be registered.</p>
                */
            digest: string | undefined;
    }
    export namespace RegisterContainerImageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterContainerImageRequest) => any;
    }
    export interface RegisterContainerImageResult {
            /**
                * <p>An object that describes a container image that is registered to a Lightsail container
                *       service</p>
                */
            containerImage?: ContainerImage;
    }
    export namespace RegisterContainerImageResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterContainerImageResult) => any;
    }
    export interface ReleaseStaticIpRequest {
            /**
                * <p>The name of the static IP to delete.</p>
                */
            staticIpName: string | undefined;
    }
    export namespace ReleaseStaticIpRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReleaseStaticIpRequest) => any;
    }
    export interface ReleaseStaticIpResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace ReleaseStaticIpResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReleaseStaticIpResult) => any;
    }
    export interface ResetDistributionCacheRequest {
            /**
                * <p>The name of the distribution for which to reset cache.</p>
                *          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
                *       can specify.</p>
                */
            distributionName?: string;
    }
    export namespace ResetDistributionCacheRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResetDistributionCacheRequest) => any;
    }
    export interface ResetDistributionCacheResult {
            /**
                * <p>The status of the reset cache request.</p>
                */
            status?: string;
            /**
                * <p>The timestamp of the reset cache request (e.g., <code>1479734909.17</code>) in Unix time
                *       format.</p>
                */
            createTime?: Date;
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace ResetDistributionCacheResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResetDistributionCacheResult) => any;
    }
    export interface SendContactMethodVerificationRequest {
            /**
                * <p>The protocol to verify, such as <code>Email</code> or <code>SMS</code> (text
                *       messaging).</p>
                */
            protocol: ContactMethodVerificationProtocol | string | undefined;
    }
    export namespace SendContactMethodVerificationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendContactMethodVerificationRequest) => any;
    }
    export interface SendContactMethodVerificationResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace SendContactMethodVerificationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendContactMethodVerificationResult) => any;
    }
    export interface SetIpAddressTypeRequest {
            /**
                * <p>The resource type.</p>
                *          <p>The possible values are <code>Distribution</code>, <code>Instance</code>, and
                *         <code>LoadBalancer</code>.</p>
                *          <note>
                *             <p>Distribution-related APIs are available only in the N. Virginia (<code>us-east-1</code>)
                *           Amazon Web Services Region. Set your Amazon Web Services Region configuration to
                *           <code>us-east-1</code> to create, view, or edit distributions.</p>
                *          </note>
                */
            resourceType: ResourceType | string | undefined;
            /**
                * <p>The name of the resource for which to set the IP address type.</p>
                */
            resourceName: string | undefined;
            /**
                * <p>The IP address type to set for the specified resource.</p>
                *
                *          <p>The possible values are <code>ipv4</code> for IPv4 only, and <code>dualstack</code> for
                *       IPv4 and IPv6.</p>
                */
            ipAddressType: IpAddressType | string | undefined;
    }
    export namespace SetIpAddressTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIpAddressTypeRequest) => any;
    }
    export interface SetIpAddressTypeResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace SetIpAddressTypeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetIpAddressTypeResult) => any;
    }
    export enum ResourceBucketAccess {
            Allow = "allow",
            Deny = "deny"
    }
    export interface SetResourceAccessForBucketRequest {
            /**
                * <p>The name of the Lightsail instance for which to set bucket access. The instance must be
                *       in a running or stopped state.</p>
                */
            resourceName: string | undefined;
            /**
                * <p>The name of the bucket for which to set access to another Lightsail resource.</p>
                */
            bucketName: string | undefined;
            /**
                * <p>The access setting.</p>
                *
                *          <p>The following access settings are available:</p>
                *
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>allow</code> - Allows access to the bucket and its objects.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>deny</code> - Denies access to the bucket and its objects. Use this setting to
                *           remove access for a resource previously set to <code>allow</code>.</p>
                *             </li>
                *          </ul>
                */
            access: ResourceBucketAccess | string | undefined;
    }
    export namespace SetResourceAccessForBucketRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetResourceAccessForBucketRequest) => any;
    }
    export interface SetResourceAccessForBucketResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace SetResourceAccessForBucketResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetResourceAccessForBucketResult) => any;
    }
    export interface StartInstanceRequest {
            /**
                * <p>The name of the instance (a virtual private server) to start.</p>
                */
            instanceName: string | undefined;
    }
    export namespace StartInstanceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartInstanceRequest) => any;
    }
    export interface StartInstanceResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace StartInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartInstanceResult) => any;
    }
    export interface StartRelationalDatabaseRequest {
            /**
                * <p>The name of your database to start.</p>
                */
            relationalDatabaseName: string | undefined;
    }
    export namespace StartRelationalDatabaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartRelationalDatabaseRequest) => any;
    }
    export interface StartRelationalDatabaseResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace StartRelationalDatabaseResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartRelationalDatabaseResult) => any;
    }
    export interface StopInstanceRequest {
            /**
                * <p>The name of the instance (a virtual private server) to stop.</p>
                */
            instanceName: string | undefined;
            /**
                * <p>When set to <code>True</code>, forces a Lightsail instance that is stuck in a
                *         <code>stopping</code> state to stop.</p>
                *          <important>
                *             <p>Only use the <code>force</code> parameter if your instance is stuck in the
                *           <code>stopping</code> state. In any other state, your instance should stop normally
                *         without adding this parameter to your API request.</p>
                *          </important>
                */
            force?: boolean;
    }
    export namespace StopInstanceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopInstanceRequest) => any;
    }
    export interface StopInstanceResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace StopInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopInstanceResult) => any;
    }
    export interface StopRelationalDatabaseRequest {
            /**
                * <p>The name of your database to stop.</p>
                */
            relationalDatabaseName: string | undefined;
            /**
                * <p>The name of your new database snapshot to be created before stopping your database.</p>
                */
            relationalDatabaseSnapshotName?: string;
    }
    export namespace StopRelationalDatabaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopRelationalDatabaseRequest) => any;
    }
    export interface StopRelationalDatabaseResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace StopRelationalDatabaseResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopRelationalDatabaseResult) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The name of the resource to which you are adding tags.</p>
                */
            resourceName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource to which you want to add a tag.</p>
                */
            resourceArn?: string;
            /**
                * <p>The tag key and optional value.</p>
                */
            tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace TagResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResult) => any;
    }
    export interface TestAlarmRequest {
            /**
                * <p>The name of the alarm to test.</p>
                */
            alarmName: string | undefined;
            /**
                * <p>The alarm state to test.</p>
                *          <p>An alarm has the following possible states that can be tested:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>ALARM</code> - The metric is outside of the defined threshold.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>INSUFFICIENT_DATA</code> - The alarm has just started, the metric is not
                *           available, or not enough data is available for the metric to determine the alarm
                *           state.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>OK</code> - The metric is within the defined threshold.</p>
                *             </li>
                *          </ul>
                */
            state: AlarmState | string | undefined;
    }
    export namespace TestAlarmRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestAlarmRequest) => any;
    }
    export interface TestAlarmResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace TestAlarmResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TestAlarmResult) => any;
    }
    export interface UnpeerVpcRequest {
    }
    export namespace UnpeerVpcRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnpeerVpcRequest) => any;
    }
    export interface UnpeerVpcResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace UnpeerVpcResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnpeerVpcResult) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The name of the resource from which you are removing a tag.</p>
                */
            resourceName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource from which you want to remove a tag.</p>
                */
            resourceArn?: string;
            /**
                * <p>The tag keys to delete from the specified resource.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace UntagResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResult) => any;
    }
    export interface UpdateBucketRequest {
            /**
                * <p>The name of the bucket to update.</p>
                */
            bucketName: string | undefined;
            /**
                * <p>An object that sets the public accessibility of objects in the specified bucket.</p>
                */
            accessRules?: AccessRules;
            /**
                * <p>Specifies whether to enable or suspend versioning of objects in the bucket.</p>
                *
                *          <p>The following options can be specified:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Enabled</code> - Enables versioning of objects in the specified bucket.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Suspended</code> - Suspends versioning of objects in the specified bucket.
                *           Existing object versions are retained.</p>
                *             </li>
                *          </ul>
                */
            versioning?: string;
            /**
                * <p>An array of strings to specify the Amazon Web Services account IDs that can access the
                *       bucket.</p>
                *
                *          <p>You can give a maximum of 10 Amazon Web Services accounts access to a bucket.</p>
                */
            readonlyAccessAccounts?: string[];
            /**
                * <p>An object that describes the access log configuration for the bucket.</p>
                */
            accessLogConfig?: BucketAccessLogConfig;
    }
    export namespace UpdateBucketRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBucketRequest) => any;
    }
    export interface UpdateBucketResult {
            /**
                * <p>An object that describes the bucket that is updated.</p>
                */
            bucket?: Bucket;
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace UpdateBucketResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBucketResult) => any;
    }
    export interface UpdateBucketBundleRequest {
            /**
                * <p>The name of the bucket for which to update the bundle.</p>
                */
            bucketName: string | undefined;
            /**
                * <p>The ID of the new bundle to apply to the bucket.</p>
                *
                *          <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetBucketBundles.html">GetBucketBundles</a> action to get a list of
                *       bundle IDs that you can specify.</p>
                */
            bundleId: string | undefined;
    }
    export namespace UpdateBucketBundleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBucketBundleRequest) => any;
    }
    export interface UpdateBucketBundleResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace UpdateBucketBundleResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBucketBundleResult) => any;
    }
    export interface UpdateContainerServiceRequest {
            /**
                * <p>The name of the container service to update.</p>
                */
            serviceName: string | undefined;
            /**
                * <p>The power for the container service.</p>
                *
                *          <p>The power specifies the amount of memory, vCPUs, and base monthly cost of each node of the
                *       container service. The <code>power</code> and <code>scale</code> of a container service makes
                *       up its configured capacity. To determine the monthly price of your container service, multiply
                *       the base price of the <code>power</code> with the <code>scale</code> (the number of nodes) of
                *       the service.</p>
                *
                *          <p>Use the <code>GetContainerServicePowers</code> action to view the specifications of each
                *       power option.</p>
                */
            power?: ContainerServicePowerName | string;
            /**
                * <p>The scale for the container service.</p>
                *
                *          <p>The scale specifies the allocated compute nodes of the container service. The
                *         <code>power</code> and <code>scale</code> of a container service makes up its configured
                *       capacity. To determine the monthly price of your container service, multiply the base price of
                *       the <code>power</code> with the <code>scale</code> (the number of nodes) of the
                *       service.</p>
                */
            scale?: number;
            /**
                * <p>A Boolean value to indicate whether the container service is disabled.</p>
                */
            isDisabled?: boolean;
            /**
                * <p>The public domain names to use with the container service, such as
                *         <code>example.com</code> and <code>www.example.com</code>.</p>
                *
                *          <p>You can specify up to four public domain names for a container service. The domain names
                *       that you specify are used when you create a deployment with a container configured as the
                *       public endpoint of your container service.</p>
                *
                *          <p>If you don't specify public domain names, then you can use the default domain of the
                *       container service.</p>
                *
                *          <important>
                *             <p>You must create and validate an SSL/TLS certificate before you can use public domain
                *         names with your container service. Use the <code>CreateCertificate</code> action to create a
                *         certificate for the public domain names you want to use with your container service.</p>
                *          </important>
                *
                *          <p>You can specify public domain names using a string to array map as shown in the example
                *       later on this page.</p>
                */
            publicDomainNames?: Record<string, string[]>;
            /**
                * <p>An object to describe the configuration for the container service to access private
                *       container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private
                *       repositories.</p>
                *
                *          <p>For more information, see <a href="https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-container-service-ecr-private-repo-access">Configuring access to an Amazon ECR private repository for an Amazon Lightsail container service</a> in the <i>Amazon Lightsail Developer Guide</i>.</p>
                */
            privateRegistryAccess?: PrivateRegistryAccessRequest;
    }
    export namespace UpdateContainerServiceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateContainerServiceRequest) => any;
    }
    export interface UpdateContainerServiceResult {
            /**
                * <p>An object that describes a container service.</p>
                */
            containerService?: ContainerService;
    }
    export namespace UpdateContainerServiceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateContainerServiceResult) => any;
    }
    export interface UpdateDistributionRequest {
            /**
                * <p>The name of the distribution to update.</p>
                *          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
                *       can specify.</p>
                */
            distributionName: string | undefined;
            /**
                * <p>An object that describes the origin resource for the distribution, such as a Lightsail
                *       instance, bucket, or load balancer.</p>
                *          <p>The distribution pulls, caches, and serves content from the origin.</p>
                */
            origin?: InputOrigin;
            /**
                * <p>An object that describes the default cache behavior for the distribution.</p>
                */
            defaultCacheBehavior?: CacheBehavior;
            /**
                * <p>An object that describes the cache behavior settings for the distribution.</p>
                *          <note>
                *             <p>The <code>cacheBehaviorSettings</code> specified in your
                *           <code>UpdateDistributionRequest</code> will replace your distribution's existing
                *         settings.</p>
                *          </note>
                */
            cacheBehaviorSettings?: CacheSettings;
            /**
                * <p>An array of objects that describe the per-path cache behavior for the distribution.</p>
                */
            cacheBehaviors?: CacheBehaviorPerPath[];
            /**
                * <p>Indicates whether to enable the distribution.</p>
                */
            isEnabled?: boolean;
    }
    export namespace UpdateDistributionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDistributionRequest) => any;
    }
    export interface UpdateDistributionResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace UpdateDistributionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDistributionResult) => any;
    }
    export interface UpdateDistributionBundleRequest {
            /**
                * <p>The name of the distribution for which to update the bundle.</p>
                *          <p>Use the <code>GetDistributions</code> action to get a list of distribution names that you
                *       can specify.</p>
                */
            distributionName?: string;
            /**
                * <p>The bundle ID of the new bundle to apply to your distribution.</p>
                *          <p>Use the <code>GetDistributionBundles</code> action to get a list of distribution bundle
                *       IDs that you can specify.</p>
                */
            bundleId?: string;
    }
    export namespace UpdateDistributionBundleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDistributionBundleRequest) => any;
    }
    export interface UpdateDistributionBundleResult {
            /**
                * <p>An object that describes the result of the action, such as the status of the request, the
                *       timestamp of the request, and the resources affected by the request.</p>
                */
            operation?: Operation;
    }
    export namespace UpdateDistributionBundleResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDistributionBundleResult) => any;
    }
    export interface UpdateDomainEntryRequest {
            /**
                * <p>The name of the domain recordset to update.</p>
                */
            domainName: string | undefined;
            /**
                * <p>An array of key-value pairs containing information about the domain entry.</p>
                */
            domainEntry: DomainEntry | undefined;
    }
    export namespace UpdateDomainEntryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainEntryRequest) => any;
    }
    export interface UpdateDomainEntryResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace UpdateDomainEntryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainEntryResult) => any;
    }
    export interface UpdateLoadBalancerAttributeRequest {
            /**
                * <p>The name of the load balancer that you want to modify (e.g.,
                *       <code>my-load-balancer</code>.</p>
                */
            loadBalancerName: string | undefined;
            /**
                * <p>The name of the attribute you want to update.</p>
                */
            attributeName: LoadBalancerAttributeName | string | undefined;
            /**
                * <p>The value that you want to specify for the attribute name.</p>
                *          <p>The following values are supported depending on what you specify for the
                *         <code>attributeName</code> request parameter:</p>
                *          <ul>
                *             <li>
                *                <p>If you specify <code>HealthCheckPath</code> for the <code>attributeName</code> request
                *           parameter, then the <code>attributeValue</code> request parameter must be the path to ping
                *           on the target (for example, <code>/weather/us/wa/seattle</code>).</p>
                *             </li>
                *             <li>
                *                <p>If you specify <code>SessionStickinessEnabled</code> for the
                *             <code>attributeName</code> request parameter, then the <code>attributeValue</code>
                *           request parameter must be <code>true</code> to activate session stickiness or
                *             <code>false</code> to deactivate session stickiness.</p>
                *             </li>
                *             <li>
                *                <p>If you specify <code>SessionStickiness_LB_CookieDurationSeconds</code> for the
                *             <code>attributeName</code> request parameter, then the <code>attributeValue</code>
                *           request parameter must be an interger that represents the cookie duration in
                *           seconds.</p>
                *             </li>
                *             <li>
                *                <p>If you specify <code>HttpsRedirectionEnabled</code> for the <code>attributeName</code>
                *           request parameter, then the <code>attributeValue</code> request parameter must be
                *             <code>true</code> to activate HTTP to HTTPS redirection or <code>false</code> to
                *           deactivate HTTP to HTTPS redirection.</p>
                *             </li>
                *             <li>
                *                <p>If you specify <code>TlsPolicyName</code> for the <code>attributeName</code> request
                *           parameter, then the <code>attributeValue</code> request parameter must be the name of the
                *           TLS policy.</p>
                *                <p>Use the <a href="https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_GetLoadBalancerTlsPolicies.html">GetLoadBalancerTlsPolicies</a> action to get a list of TLS policy names that you
                *           can specify.</p>
                *             </li>
                *          </ul>
                */
            attributeValue: string | undefined;
    }
    export namespace UpdateLoadBalancerAttributeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLoadBalancerAttributeRequest) => any;
    }
    export interface UpdateLoadBalancerAttributeResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace UpdateLoadBalancerAttributeResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLoadBalancerAttributeResult) => any;
    }
    export interface UpdateRelationalDatabaseRequest {
            /**
                * <p>The name of your Lightsail database resource to update.</p>
                */
            relationalDatabaseName: string | undefined;
            /**
                * <p>The password for the master user. The password can include any printable ASCII character
                *       except "/", """, or "@".</p>
                *          <p>My<b>SQL</b>
                *          </p>
                *          <p>Constraints: Must contain from 8 to 41 characters.</p>
                *          <p>
                *             <b>PostgreSQL</b>
                *          </p>
                *          <p>Constraints: Must contain from 8 to 128 characters.</p>
                */
            masterUserPassword?: string;
            /**
                * <p>When <code>true</code>, the master user password is changed to a new strong password
                *       generated by Lightsail.</p>
                *          <p>Use the <code>get relational database master user password</code> operation to get the new
                *       password.</p>
                */
            rotateMasterUserPassword?: boolean;
            /**
                * <p>The daily time range during which automated backups are created for your database if
                *       automated backups are enabled.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must be in the <code>hh24:mi-hh24:mi</code> format.</p>
                *                <p>Example: <code>16:00-16:30</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>Specified in Coordinated Universal Time (UTC).</p>
                *             </li>
                *             <li>
                *                <p>Must not conflict with the preferred maintenance window.</p>
                *             </li>
                *             <li>
                *                <p>Must be at least 30 minutes.</p>
                *             </li>
                *          </ul>
                */
            preferredBackupWindow?: string;
            /**
                * <p>The weekly time range during which system maintenance can occur on your database.</p>
                *          <p>The default is a 30-minute window selected at random from an 8-hour block of time for each
                *       AWS Region, occurring on a random day of the week.</p>
                *          <p>Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Must be in the <code>ddd:hh24:mi-ddd:hh24:mi</code> format.</p>
                *             </li>
                *             <li>
                *                <p>Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
                *             </li>
                *             <li>
                *                <p>Must be at least 30 minutes.</p>
                *             </li>
                *             <li>
                *                <p>Specified in Coordinated Universal Time (UTC).</p>
                *             </li>
                *             <li>
                *                <p>Example: <code>Tue:17:00-Tue:17:30</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            preferredMaintenanceWindow?: string;
            /**
                * <p>When <code>true</code>, enables automated backup retention for your database.</p>
                *          <p>Updates are applied during the next maintenance window because this can result in an
                *       outage.</p>
                */
            enableBackupRetention?: boolean;
            /**
                * <p>When <code>true</code>, disables automated backup retention for your database.</p>
                *          <p>Disabling backup retention deletes all automated database backups. Before disabling this,
                *       you may want to create a snapshot of your database using the <code>create relational database
                *         snapshot</code> operation.</p>
                *          <p>Updates are applied during the next maintenance window because this can result in an
                *       outage.</p>
                */
            disableBackupRetention?: boolean;
            /**
                * <p>Specifies the accessibility options for your database. A value of <code>true</code>
                *       specifies a database that is available to resources outside of your Lightsail account. A
                *       value of <code>false</code> specifies a database that is available only to your Lightsail
                *       resources in the same region as your database.</p>
                */
            publiclyAccessible?: boolean;
            /**
                * <p>When <code>true</code>, applies changes immediately. When <code>false</code>, applies
                *       changes during the preferred maintenance window. Some changes may cause an outage.</p>
                *          <p>Default: <code>false</code>
                *          </p>
                */
            applyImmediately?: boolean;
            /**
                * <p>Indicates the certificate that needs to be associated with the database.</p>
                */
            caCertificateIdentifier?: string;
    }
    export namespace UpdateRelationalDatabaseRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRelationalDatabaseRequest) => any;
    }
    export interface UpdateRelationalDatabaseResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace UpdateRelationalDatabaseResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRelationalDatabaseResult) => any;
    }
    export interface UpdateRelationalDatabaseParametersRequest {
            /**
                * <p>The name of your database for which to update parameters.</p>
                */
            relationalDatabaseName: string | undefined;
            /**
                * <p>The database parameters to update.</p>
                */
            parameters: RelationalDatabaseParameter[] | undefined;
    }
    export namespace UpdateRelationalDatabaseParametersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRelationalDatabaseParametersRequest) => any;
    }
    export interface UpdateRelationalDatabaseParametersResult {
            /**
                * <p>An array of objects that describe the result of the action, such as the status of the
                *       request, the timestamp of the request, and the resources affected by the request.</p>
                */
            operations?: Operation[];
    }
    export namespace UpdateRelationalDatabaseParametersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRelationalDatabaseParametersResult) => any;
    }
}

declare module '@aws-sdk/client-lightsail/node_modules/@aws-sdk/client-lightsail/dist-types/models/LightsailServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Lightsail service.
        */
    export class LightsailServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

