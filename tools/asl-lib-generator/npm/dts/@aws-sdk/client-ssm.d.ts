// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-ssm' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/AddTagsToResourceCommand";
    import { AssociateOpsItemRelatedItemCommandInput, AssociateOpsItemRelatedItemCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/AssociateOpsItemRelatedItemCommand";
    import { CancelCommandCommandInput, CancelCommandCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CancelCommandCommand";
    import { CancelMaintenanceWindowExecutionCommandInput, CancelMaintenanceWindowExecutionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CancelMaintenanceWindowExecutionCommand";
    import { CreateActivationCommandInput, CreateActivationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateActivationCommand";
    import { CreateAssociationBatchCommandInput, CreateAssociationBatchCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateAssociationBatchCommand";
    import { CreateAssociationCommandInput, CreateAssociationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateAssociationCommand";
    import { CreateDocumentCommandInput, CreateDocumentCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateDocumentCommand";
    import { CreateMaintenanceWindowCommandInput, CreateMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateMaintenanceWindowCommand";
    import { CreateOpsItemCommandInput, CreateOpsItemCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateOpsItemCommand";
    import { CreateOpsMetadataCommandInput, CreateOpsMetadataCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateOpsMetadataCommand";
    import { CreatePatchBaselineCommandInput, CreatePatchBaselineCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreatePatchBaselineCommand";
    import { CreateResourceDataSyncCommandInput, CreateResourceDataSyncCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateResourceDataSyncCommand";
    import { DeleteActivationCommandInput, DeleteActivationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteActivationCommand";
    import { DeleteAssociationCommandInput, DeleteAssociationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteAssociationCommand";
    import { DeleteDocumentCommandInput, DeleteDocumentCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteDocumentCommand";
    import { DeleteInventoryCommandInput, DeleteInventoryCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteInventoryCommand";
    import { DeleteMaintenanceWindowCommandInput, DeleteMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteMaintenanceWindowCommand";
    import { DeleteOpsMetadataCommandInput, DeleteOpsMetadataCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteOpsMetadataCommand";
    import { DeleteParameterCommandInput, DeleteParameterCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteParameterCommand";
    import { DeleteParametersCommandInput, DeleteParametersCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteParametersCommand";
    import { DeletePatchBaselineCommandInput, DeletePatchBaselineCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeletePatchBaselineCommand";
    import { DeleteResourceDataSyncCommandInput, DeleteResourceDataSyncCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteResourceDataSyncCommand";
    import { DeregisterManagedInstanceCommandInput, DeregisterManagedInstanceCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeregisterManagedInstanceCommand";
    import { DeregisterPatchBaselineForPatchGroupCommandInput, DeregisterPatchBaselineForPatchGroupCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeregisterPatchBaselineForPatchGroupCommand";
    import { DeregisterTargetFromMaintenanceWindowCommandInput, DeregisterTargetFromMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeregisterTargetFromMaintenanceWindowCommand";
    import { DeregisterTaskFromMaintenanceWindowCommandInput, DeregisterTaskFromMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeregisterTaskFromMaintenanceWindowCommand";
    import { DescribeActivationsCommandInput, DescribeActivationsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeActivationsCommand";
    import { DescribeAssociationCommandInput, DescribeAssociationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAssociationCommand";
    import { DescribeAssociationExecutionsCommandInput, DescribeAssociationExecutionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAssociationExecutionsCommand";
    import { DescribeAssociationExecutionTargetsCommandInput, DescribeAssociationExecutionTargetsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAssociationExecutionTargetsCommand";
    import { DescribeAutomationExecutionsCommandInput, DescribeAutomationExecutionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAutomationExecutionsCommand";
    import { DescribeAutomationStepExecutionsCommandInput, DescribeAutomationStepExecutionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAutomationStepExecutionsCommand";
    import { DescribeAvailablePatchesCommandInput, DescribeAvailablePatchesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAvailablePatchesCommand";
    import { DescribeDocumentCommandInput, DescribeDocumentCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeDocumentCommand";
    import { DescribeDocumentPermissionCommandInput, DescribeDocumentPermissionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeDocumentPermissionCommand";
    import { DescribeEffectiveInstanceAssociationsCommandInput, DescribeEffectiveInstanceAssociationsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeEffectiveInstanceAssociationsCommand";
    import { DescribeEffectivePatchesForPatchBaselineCommandInput, DescribeEffectivePatchesForPatchBaselineCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeEffectivePatchesForPatchBaselineCommand";
    import { DescribeInstanceAssociationsStatusCommandInput, DescribeInstanceAssociationsStatusCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstanceAssociationsStatusCommand";
    import { DescribeInstanceInformationCommandInput, DescribeInstanceInformationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstanceInformationCommand";
    import { DescribeInstancePatchesCommandInput, DescribeInstancePatchesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstancePatchesCommand";
    import { DescribeInstancePatchStatesCommandInput, DescribeInstancePatchStatesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstancePatchStatesCommand";
    import { DescribeInstancePatchStatesForPatchGroupCommandInput, DescribeInstancePatchStatesForPatchGroupCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstancePatchStatesForPatchGroupCommand";
    import { DescribeInventoryDeletionsCommandInput, DescribeInventoryDeletionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInventoryDeletionsCommand";
    import { DescribeMaintenanceWindowExecutionsCommandInput, DescribeMaintenanceWindowExecutionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowExecutionsCommand";
    import { DescribeMaintenanceWindowExecutionTaskInvocationsCommandInput, DescribeMaintenanceWindowExecutionTaskInvocationsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowExecutionTaskInvocationsCommand";
    import { DescribeMaintenanceWindowExecutionTasksCommandInput, DescribeMaintenanceWindowExecutionTasksCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowExecutionTasksCommand";
    import { DescribeMaintenanceWindowScheduleCommandInput, DescribeMaintenanceWindowScheduleCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowScheduleCommand";
    import { DescribeMaintenanceWindowsCommandInput, DescribeMaintenanceWindowsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowsCommand";
    import { DescribeMaintenanceWindowsForTargetCommandInput, DescribeMaintenanceWindowsForTargetCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowsForTargetCommand";
    import { DescribeMaintenanceWindowTargetsCommandInput, DescribeMaintenanceWindowTargetsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowTargetsCommand";
    import { DescribeMaintenanceWindowTasksCommandInput, DescribeMaintenanceWindowTasksCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowTasksCommand";
    import { DescribeOpsItemsCommandInput, DescribeOpsItemsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeOpsItemsCommand";
    import { DescribeParametersCommandInput, DescribeParametersCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeParametersCommand";
    import { DescribePatchBaselinesCommandInput, DescribePatchBaselinesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribePatchBaselinesCommand";
    import { DescribePatchGroupsCommandInput, DescribePatchGroupsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribePatchGroupsCommand";
    import { DescribePatchGroupStateCommandInput, DescribePatchGroupStateCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribePatchGroupStateCommand";
    import { DescribePatchPropertiesCommandInput, DescribePatchPropertiesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribePatchPropertiesCommand";
    import { DescribeSessionsCommandInput, DescribeSessionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeSessionsCommand";
    import { DisassociateOpsItemRelatedItemCommandInput, DisassociateOpsItemRelatedItemCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DisassociateOpsItemRelatedItemCommand";
    import { GetAutomationExecutionCommandInput, GetAutomationExecutionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetAutomationExecutionCommand";
    import { GetCalendarStateCommandInput, GetCalendarStateCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetCalendarStateCommand";
    import { GetCommandInvocationCommandInput, GetCommandInvocationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetCommandInvocationCommand";
    import { GetConnectionStatusCommandInput, GetConnectionStatusCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetConnectionStatusCommand";
    import { GetDefaultPatchBaselineCommandInput, GetDefaultPatchBaselineCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetDefaultPatchBaselineCommand";
    import { GetDeployablePatchSnapshotForInstanceCommandInput, GetDeployablePatchSnapshotForInstanceCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetDeployablePatchSnapshotForInstanceCommand";
    import { GetDocumentCommandInput, GetDocumentCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetDocumentCommand";
    import { GetInventoryCommandInput, GetInventoryCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetInventoryCommand";
    import { GetInventorySchemaCommandInput, GetInventorySchemaCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetInventorySchemaCommand";
    import { GetMaintenanceWindowCommandInput, GetMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowCommand";
    import { GetMaintenanceWindowExecutionCommandInput, GetMaintenanceWindowExecutionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowExecutionCommand";
    import { GetMaintenanceWindowExecutionTaskCommandInput, GetMaintenanceWindowExecutionTaskCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowExecutionTaskCommand";
    import { GetMaintenanceWindowExecutionTaskInvocationCommandInput, GetMaintenanceWindowExecutionTaskInvocationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowExecutionTaskInvocationCommand";
    import { GetMaintenanceWindowTaskCommandInput, GetMaintenanceWindowTaskCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowTaskCommand";
    import { GetOpsItemCommandInput, GetOpsItemCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetOpsItemCommand";
    import { GetOpsMetadataCommandInput, GetOpsMetadataCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetOpsMetadataCommand";
    import { GetOpsSummaryCommandInput, GetOpsSummaryCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetOpsSummaryCommand";
    import { GetParameterCommandInput, GetParameterCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetParameterCommand";
    import { GetParameterHistoryCommandInput, GetParameterHistoryCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetParameterHistoryCommand";
    import { GetParametersByPathCommandInput, GetParametersByPathCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetParametersByPathCommand";
    import { GetParametersCommandInput, GetParametersCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetParametersCommand";
    import { GetPatchBaselineCommandInput, GetPatchBaselineCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetPatchBaselineCommand";
    import { GetPatchBaselineForPatchGroupCommandInput, GetPatchBaselineForPatchGroupCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetPatchBaselineForPatchGroupCommand";
    import { GetServiceSettingCommandInput, GetServiceSettingCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetServiceSettingCommand";
    import { LabelParameterVersionCommandInput, LabelParameterVersionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/LabelParameterVersionCommand";
    import { ListAssociationsCommandInput, ListAssociationsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListAssociationsCommand";
    import { ListAssociationVersionsCommandInput, ListAssociationVersionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListAssociationVersionsCommand";
    import { ListCommandInvocationsCommandInput, ListCommandInvocationsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListCommandInvocationsCommand";
    import { ListCommandsCommandInput, ListCommandsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListCommandsCommand";
    import { ListComplianceItemsCommandInput, ListComplianceItemsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListComplianceItemsCommand";
    import { ListComplianceSummariesCommandInput, ListComplianceSummariesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListComplianceSummariesCommand";
    import { ListDocumentMetadataHistoryCommandInput, ListDocumentMetadataHistoryCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListDocumentMetadataHistoryCommand";
    import { ListDocumentsCommandInput, ListDocumentsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListDocumentsCommand";
    import { ListDocumentVersionsCommandInput, ListDocumentVersionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListDocumentVersionsCommand";
    import { ListInventoryEntriesCommandInput, ListInventoryEntriesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListInventoryEntriesCommand";
    import { ListOpsItemEventsCommandInput, ListOpsItemEventsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListOpsItemEventsCommand";
    import { ListOpsItemRelatedItemsCommandInput, ListOpsItemRelatedItemsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListOpsItemRelatedItemsCommand";
    import { ListOpsMetadataCommandInput, ListOpsMetadataCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListOpsMetadataCommand";
    import { ListResourceComplianceSummariesCommandInput, ListResourceComplianceSummariesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListResourceComplianceSummariesCommand";
    import { ListResourceDataSyncCommandInput, ListResourceDataSyncCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListResourceDataSyncCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListTagsForResourceCommand";
    import { ModifyDocumentPermissionCommandInput, ModifyDocumentPermissionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ModifyDocumentPermissionCommand";
    import { PutComplianceItemsCommandInput, PutComplianceItemsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/PutComplianceItemsCommand";
    import { PutInventoryCommandInput, PutInventoryCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/PutInventoryCommand";
    import { PutParameterCommandInput, PutParameterCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/PutParameterCommand";
    import { RegisterDefaultPatchBaselineCommandInput, RegisterDefaultPatchBaselineCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RegisterDefaultPatchBaselineCommand";
    import { RegisterPatchBaselineForPatchGroupCommandInput, RegisterPatchBaselineForPatchGroupCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RegisterPatchBaselineForPatchGroupCommand";
    import { RegisterTargetWithMaintenanceWindowCommandInput, RegisterTargetWithMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RegisterTargetWithMaintenanceWindowCommand";
    import { RegisterTaskWithMaintenanceWindowCommandInput, RegisterTaskWithMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RegisterTaskWithMaintenanceWindowCommand";
    import { RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RemoveTagsFromResourceCommand";
    import { ResetServiceSettingCommandInput, ResetServiceSettingCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ResetServiceSettingCommand";
    import { ResumeSessionCommandInput, ResumeSessionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ResumeSessionCommand";
    import { SendAutomationSignalCommandInput, SendAutomationSignalCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/SendAutomationSignalCommand";
    import { SendCommandCommandInput, SendCommandCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/SendCommandCommand";
    import { StartAssociationsOnceCommandInput, StartAssociationsOnceCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StartAssociationsOnceCommand";
    import { StartAutomationExecutionCommandInput, StartAutomationExecutionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StartAutomationExecutionCommand";
    import { StartChangeRequestExecutionCommandInput, StartChangeRequestExecutionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StartChangeRequestExecutionCommand";
    import { StartSessionCommandInput, StartSessionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StartSessionCommand";
    import { StopAutomationExecutionCommandInput, StopAutomationExecutionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StopAutomationExecutionCommand";
    import { TerminateSessionCommandInput, TerminateSessionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/TerminateSessionCommand";
    import { UnlabelParameterVersionCommandInput, UnlabelParameterVersionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UnlabelParameterVersionCommand";
    import { UpdateAssociationCommandInput, UpdateAssociationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateAssociationCommand";
    import { UpdateAssociationStatusCommandInput, UpdateAssociationStatusCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateAssociationStatusCommand";
    import { UpdateDocumentCommandInput, UpdateDocumentCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateDocumentCommand";
    import { UpdateDocumentDefaultVersionCommandInput, UpdateDocumentDefaultVersionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateDocumentDefaultVersionCommand";
    import { UpdateDocumentMetadataCommandInput, UpdateDocumentMetadataCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateDocumentMetadataCommand";
    import { UpdateMaintenanceWindowCommandInput, UpdateMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateMaintenanceWindowCommand";
    import { UpdateMaintenanceWindowTargetCommandInput, UpdateMaintenanceWindowTargetCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateMaintenanceWindowTargetCommand";
    import { UpdateMaintenanceWindowTaskCommandInput, UpdateMaintenanceWindowTaskCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateMaintenanceWindowTaskCommand";
    import { UpdateManagedInstanceRoleCommandInput, UpdateManagedInstanceRoleCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateManagedInstanceRoleCommand";
    import { UpdateOpsItemCommandInput, UpdateOpsItemCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateOpsItemCommand";
    import { UpdateOpsMetadataCommandInput, UpdateOpsMetadataCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateOpsMetadataCommand";
    import { UpdatePatchBaselineCommandInput, UpdatePatchBaselineCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdatePatchBaselineCommand";
    import { UpdateResourceDataSyncCommandInput, UpdateResourceDataSyncCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateResourceDataSyncCommand";
    import { UpdateServiceSettingCommandInput, UpdateServiceSettingCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateServiceSettingCommand";
    import { SSMClient } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    /**
        * <p>Amazon Web Services Systems Manager is a collection of capabilities that helps you automate management tasks such as
        *    collecting system inventory, applying operating system (OS) patches, automating the creation of
        *    Amazon Machine Images (AMIs), and configuring operating systems (OSs) and applications at scale.
        *    Systems Manager lets you remotely and securely manage the configuration of your managed nodes. A
        *     <i>managed node</i> is any Amazon Elastic Compute Cloud (Amazon EC2) instance, edge device, or on-premises
        *    server or virtual machine (VM) that has been configured for Systems Manager. </p>
        *          <note>
        *             <p>With support for IoT Greengrass core devices, the phrase <i>managed
        *      instance</i> has been changed to <i>managed node</i> in most of the Systems Manager
        *     documentation. The Systems Manager console, API calls, error messages, and SSM documents still use the
        *     term <i>instance</i>.</p>
        *          </note>
        *          <p>This reference is intended to be used with the <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/">Amazon Web Services Systems Manager User Guide</a>.</p>
        *          <p>To get started, verify prerequisites and configure managed nodes. For more information, see
        *     <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html">Setting up
        *     Amazon Web Services Systems Manager</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        *          <p class="title">
        *             <b>Related resources</b>
        *          </p>
        *          <ul>
        *             <li>
        *                <p>For information about how to use a Query API, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/making-api-requests.html">Making API requests</a>. </p>
        *             </li>
        *             <li>
        *                <p>For information about other API operations you can perform on EC2 instances, see the
        *       <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/">Amazon EC2 API Reference</a>.</p>
        *             </li>
        *             <li>
        *                <p>For information about AppConfig, a capability of Systems Manager, see the <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/">AppConfig User Guide</a> and the <a href="https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/">AppConfig API
        *      Reference</a>.</p>
        *             </li>
        *             <li>
        *                <p>For information about Incident Manager, a capability of Systems Manager, see the <a href="https://docs.aws.amazon.com/incident-manager/latest/userguide/">Incident Manager User Guide</a>
        *      and the <a href="https://docs.aws.amazon.com/incident-manager/latest/APIReference/">Incident Manager API
        *       Reference</a>.</p>
        *             </li>
        *          </ul>
        */
    export class SSM extends SSMClient {
            /**
                * <p>Adds or overwrites one or more tags for the specified resource. Tags are metadata that you
                *    can assign to your automations, documents, managed nodes, maintenance windows, Parameter Store
                *    parameters, and patch baselines. Tags enable you to categorize your resources in different ways,
                *    for example, by purpose, owner, or environment. Each tag consists of a key and an optional value,
                *    both of which you define. For example, you could define a set of tags for your account's managed
                *    nodes that helps you track each node's owner and stack level. For example:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Key=Owner,Value=DbAdmin</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=Owner,Value=SysAdmin</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=Owner,Value=Dev</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=Stack,Value=Production</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=Stack,Value=Pre-Production</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=Stack,Value=Test</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>Most resources can have a maximum of 50 tags. Automations can have a maximum of 5
                *    tags.</p>
                *          <p>We recommend that you devise a set of tag keys that meets your needs for each resource type.
                *    Using a consistent set of tag keys makes it easier for you to manage your resources. You can
                *    search and filter the resources based on the tags you add. Tags don't have any semantic meaning
                *    to and are interpreted strictly as a string of characters.</p>
                *          <p>For more information about using tags with Amazon Elastic Compute Cloud (Amazon EC2) instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging your Amazon EC2
                *     resources</a> in the <i>Amazon EC2 User Guide</i>.</p>
                */
            addTagsToResource(args: AddTagsToResourceCommandInput, options?: __HttpHandlerOptions): Promise<AddTagsToResourceCommandOutput>;
            addTagsToResource(args: AddTagsToResourceCommandInput, cb: (err: any, data?: AddTagsToResourceCommandOutput) => void): void;
            addTagsToResource(args: AddTagsToResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddTagsToResourceCommandOutput) => void): void;
            /**
                * <p>Associates a related item to a Systems Manager OpsCenter OpsItem. For example, you can associate an
                *    Incident Manager incident or analysis with an OpsItem. Incident Manager and OpsCenter are capabilities of
                *    Amazon Web Services Systems Manager.</p>
                */
            associateOpsItemRelatedItem(args: AssociateOpsItemRelatedItemCommandInput, options?: __HttpHandlerOptions): Promise<AssociateOpsItemRelatedItemCommandOutput>;
            associateOpsItemRelatedItem(args: AssociateOpsItemRelatedItemCommandInput, cb: (err: any, data?: AssociateOpsItemRelatedItemCommandOutput) => void): void;
            associateOpsItemRelatedItem(args: AssociateOpsItemRelatedItemCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateOpsItemRelatedItemCommandOutput) => void): void;
            /**
                * <p>Attempts to cancel the command specified by the Command ID. There is no guarantee that the
                *    command will be terminated and the underlying process stopped.</p>
                */
            cancelCommand(args: CancelCommandCommandInput, options?: __HttpHandlerOptions): Promise<CancelCommandCommandOutput>;
            cancelCommand(args: CancelCommandCommandInput, cb: (err: any, data?: CancelCommandCommandOutput) => void): void;
            cancelCommand(args: CancelCommandCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelCommandCommandOutput) => void): void;
            /**
                * <p>Stops a maintenance window execution that is already in progress and cancels any tasks in
                *    the window that haven't already starting running. Tasks already in progress will continue to
                *    completion.</p>
                */
            cancelMaintenanceWindowExecution(args: CancelMaintenanceWindowExecutionCommandInput, options?: __HttpHandlerOptions): Promise<CancelMaintenanceWindowExecutionCommandOutput>;
            cancelMaintenanceWindowExecution(args: CancelMaintenanceWindowExecutionCommandInput, cb: (err: any, data?: CancelMaintenanceWindowExecutionCommandOutput) => void): void;
            cancelMaintenanceWindowExecution(args: CancelMaintenanceWindowExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelMaintenanceWindowExecutionCommandOutput) => void): void;
            /**
                * <p>Generates an activation code and activation ID you can use to register your on-premises
                *    servers, edge devices, or virtual machine (VM) with Amazon Web Services Systems Manager. Registering these machines with
                *    Systems Manager makes it possible to manage them using Systems Manager capabilities. You use the activation code and
                *    ID when installing SSM Agent on machines in your hybrid environment. For more information about
                *    requirements for managing on-premises machines using Systems Manager, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html">Setting up
                *     Amazon Web Services Systems Manager for hybrid environments</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
                *          <note>
                *             <p>Amazon Elastic Compute Cloud (Amazon EC2) instances, edge devices, and on-premises servers and VMs that are
                *     configured for Systems Manager are all called <i>managed nodes</i>.</p>
                *          </note>
                */
            createActivation(args: CreateActivationCommandInput, options?: __HttpHandlerOptions): Promise<CreateActivationCommandOutput>;
            createActivation(args: CreateActivationCommandInput, cb: (err: any, data?: CreateActivationCommandOutput) => void): void;
            createActivation(args: CreateActivationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateActivationCommandOutput) => void): void;
            /**
                * <p>A State Manager association defines the state that you want to maintain on your managed
                *    nodes. For example, an association can specify that anti-virus software must be installed and
                *    running on your managed nodes, or that certain ports must be closed. For static targets, the
                *    association specifies a schedule for when the configuration is reapplied. For dynamic targets,
                *    such as an Amazon Web Services resource group or an Amazon Web Services autoscaling group, State Manager, a capability of
                *    Amazon Web Services Systems Manager applies the configuration when new managed nodes are added to the group. The
                *    association also specifies actions to take when applying the configuration. For example, an
                *    association for anti-virus software might run once a day. If the software isn't installed, then
                *    State Manager installs it. If the software is installed, but the service isn't running, then the
                *    association might instruct State Manager to start the service. </p>
                */
            createAssociation(args: CreateAssociationCommandInput, options?: __HttpHandlerOptions): Promise<CreateAssociationCommandOutput>;
            createAssociation(args: CreateAssociationCommandInput, cb: (err: any, data?: CreateAssociationCommandOutput) => void): void;
            createAssociation(args: CreateAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAssociationCommandOutput) => void): void;
            /**
                * <p>Associates the specified Amazon Web Services Systems Manager document (SSM document) with the specified managed nodes
                *    or targets.</p>
                *          <p>When you associate a document with one or more managed nodes using IDs or tags, Amazon Web Services Systems Manager
                *    Agent (SSM Agent) running on the managed node processes the document and configures the node as
                *    specified.</p>
                *          <p>If you associate a document with a managed node that already has an associated document, the
                *    system returns the AssociationAlreadyExists exception.</p>
                */
            createAssociationBatch(args: CreateAssociationBatchCommandInput, options?: __HttpHandlerOptions): Promise<CreateAssociationBatchCommandOutput>;
            createAssociationBatch(args: CreateAssociationBatchCommandInput, cb: (err: any, data?: CreateAssociationBatchCommandOutput) => void): void;
            createAssociationBatch(args: CreateAssociationBatchCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAssociationBatchCommandOutput) => void): void;
            /**
                * <p>Creates a Amazon Web Services Systems Manager (SSM document). An SSM document defines the actions that Systems Manager performs
                *    on your managed nodes. For more information about SSM documents, including information about
                *    supported schemas, features, and syntax, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-ssm-docs.html">Amazon Web Services Systems Manager Documents</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            createDocument(args: CreateDocumentCommandInput, options?: __HttpHandlerOptions): Promise<CreateDocumentCommandOutput>;
            createDocument(args: CreateDocumentCommandInput, cb: (err: any, data?: CreateDocumentCommandOutput) => void): void;
            createDocument(args: CreateDocumentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDocumentCommandOutput) => void): void;
            /**
                * <p>Creates a new maintenance window.</p>
                *          <note>
                *             <p>The value you specify for <code>Duration</code> determines the specific end time for the
                *     maintenance window based on the time it begins. No maintenance window tasks are permitted to
                *     start after the resulting endtime minus the number of hours you specify for <code>Cutoff</code>.
                *     For example, if the maintenance window starts at 3 PM, the duration is three hours, and the
                *     value you specify for <code>Cutoff</code> is one hour, no maintenance window tasks can start
                *     after 5 PM.</p>
                *          </note>
                */
            createMaintenanceWindow(args: CreateMaintenanceWindowCommandInput, options?: __HttpHandlerOptions): Promise<CreateMaintenanceWindowCommandOutput>;
            createMaintenanceWindow(args: CreateMaintenanceWindowCommandInput, cb: (err: any, data?: CreateMaintenanceWindowCommandOutput) => void): void;
            createMaintenanceWindow(args: CreateMaintenanceWindowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateMaintenanceWindowCommandOutput) => void): void;
            /**
                * <p>Creates a new OpsItem. You must have permission in Identity and Access Management (IAM) to create a new OpsItem. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
                *     OpsCenter</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          <p>Operations engineers and IT professionals use Amazon Web Services Systems Manager OpsCenter to view, investigate, and
                *    remediate operational issues impacting the performance and health of their Amazon Web Services resources. For
                *    more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">Amazon Web Services Systems Manager OpsCenter</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>. </p>
                */
            createOpsItem(args: CreateOpsItemCommandInput, options?: __HttpHandlerOptions): Promise<CreateOpsItemCommandOutput>;
            createOpsItem(args: CreateOpsItemCommandInput, cb: (err: any, data?: CreateOpsItemCommandOutput) => void): void;
            createOpsItem(args: CreateOpsItemCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateOpsItemCommandOutput) => void): void;
            /**
                * <p>If you create a new application in Application Manager, Amazon Web Services Systems Manager calls this API operation to specify
                *    information about the new application, including the application type.</p>
                */
            createOpsMetadata(args: CreateOpsMetadataCommandInput, options?: __HttpHandlerOptions): Promise<CreateOpsMetadataCommandOutput>;
            createOpsMetadata(args: CreateOpsMetadataCommandInput, cb: (err: any, data?: CreateOpsMetadataCommandOutput) => void): void;
            createOpsMetadata(args: CreateOpsMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateOpsMetadataCommandOutput) => void): void;
            /**
                * <p>Creates a patch baseline.</p>
                *          <note>
                *             <p>For information about valid key-value pairs in <code>PatchFilters</code> for each supported
                *     operating system type, see <a>PatchFilter</a>.</p>
                *          </note>
                */
            createPatchBaseline(args: CreatePatchBaselineCommandInput, options?: __HttpHandlerOptions): Promise<CreatePatchBaselineCommandOutput>;
            createPatchBaseline(args: CreatePatchBaselineCommandInput, cb: (err: any, data?: CreatePatchBaselineCommandOutput) => void): void;
            createPatchBaseline(args: CreatePatchBaselineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePatchBaselineCommandOutput) => void): void;
            /**
                * <p>A resource data sync helps you view data from multiple sources in a single location.
                *    Amazon Web Services Systems Manager offers two types of resource data sync: <code>SyncToDestination</code> and
                *     <code>SyncFromSource</code>.</p>
                *          <p>You can configure Systems Manager Inventory to use the <code>SyncToDestination</code> type to
                *    synchronize Inventory data from multiple Amazon Web Services Regions to a single Amazon Simple Storage Service (Amazon S3) bucket. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-datasync.html">Configuring resource data
                *     sync for Inventory</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          <p>You can configure Systems Manager Explorer to use the <code>SyncFromSource</code> type to synchronize
                *    operational work items (OpsItems) and operational data (OpsData) from multiple Amazon Web Services Regions to a
                *    single Amazon S3 bucket. This type can synchronize OpsItems and OpsData from multiple
                *    Amazon Web Services accounts and Amazon Web Services Regions or <code>EntireOrganization</code> by using Organizations. For more
                *    information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resource-data-sync.html">Setting up Systems Manager
                *     Explorer to display data from multiple accounts and Regions</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          <p>A resource data sync is an asynchronous operation that returns immediately. After a
                *    successful initial sync is completed, the system continuously syncs data. To check the status of
                *    a sync, use the <a>ListResourceDataSync</a>.</p>
                *          <note>
                *             <p>By default, data isn't encrypted in Amazon S3. We strongly recommend that you
                *     enable encryption in Amazon S3 to ensure secure data storage. We also recommend that you
                *     secure access to the Amazon S3 bucket by creating a restrictive bucket policy. </p>
                *          </note>
                */
            createResourceDataSync(args: CreateResourceDataSyncCommandInput, options?: __HttpHandlerOptions): Promise<CreateResourceDataSyncCommandOutput>;
            createResourceDataSync(args: CreateResourceDataSyncCommandInput, cb: (err: any, data?: CreateResourceDataSyncCommandOutput) => void): void;
            createResourceDataSync(args: CreateResourceDataSyncCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateResourceDataSyncCommandOutput) => void): void;
            /**
                * <p>Deletes an activation. You aren't required to delete an activation. If you delete an
                *    activation, you can no longer use it to register additional managed nodes. Deleting an activation
                *    doesn't de-register managed nodes. You must manually de-register managed nodes.</p>
                */
            deleteActivation(args: DeleteActivationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteActivationCommandOutput>;
            deleteActivation(args: DeleteActivationCommandInput, cb: (err: any, data?: DeleteActivationCommandOutput) => void): void;
            deleteActivation(args: DeleteActivationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteActivationCommandOutput) => void): void;
            /**
                * <p>Disassociates the specified Amazon Web Services Systems Manager document (SSM document) from the specified managed
                *    node. If you created the association by using the <code>Targets</code> parameter, then you must
                *    delete the association by using the association ID.</p>
                *          <p>When you disassociate a document from a managed node, it doesn't change the configuration of
                *    the node. To change the configuration state of a managed node after you disassociate a document,
                *    you must create a new document with the desired configuration and associate it with the
                *    node.</p>
                */
            deleteAssociation(args: DeleteAssociationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAssociationCommandOutput>;
            deleteAssociation(args: DeleteAssociationCommandInput, cb: (err: any, data?: DeleteAssociationCommandOutput) => void): void;
            deleteAssociation(args: DeleteAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAssociationCommandOutput) => void): void;
            /**
                * <p>Deletes the Amazon Web Services Systems Manager document (SSM document) and all managed node associations to the
                *    document.</p>
                *          <p>Before you delete the document, we recommend that you use <a>DeleteAssociation</a> to disassociate all managed nodes that are associated with the document.</p>
                */
            deleteDocument(args: DeleteDocumentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDocumentCommandOutput>;
            deleteDocument(args: DeleteDocumentCommandInput, cb: (err: any, data?: DeleteDocumentCommandOutput) => void): void;
            deleteDocument(args: DeleteDocumentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDocumentCommandOutput) => void): void;
            /**
                * <p>Delete a custom inventory type or the data associated with a custom Inventory type. Deleting
                *    a custom inventory type is also referred to as deleting a custom inventory schema.</p>
                */
            deleteInventory(args: DeleteInventoryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteInventoryCommandOutput>;
            deleteInventory(args: DeleteInventoryCommandInput, cb: (err: any, data?: DeleteInventoryCommandOutput) => void): void;
            deleteInventory(args: DeleteInventoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteInventoryCommandOutput) => void): void;
            /**
                * <p>Deletes a maintenance window.</p>
                */
            deleteMaintenanceWindow(args: DeleteMaintenanceWindowCommandInput, options?: __HttpHandlerOptions): Promise<DeleteMaintenanceWindowCommandOutput>;
            deleteMaintenanceWindow(args: DeleteMaintenanceWindowCommandInput, cb: (err: any, data?: DeleteMaintenanceWindowCommandOutput) => void): void;
            deleteMaintenanceWindow(args: DeleteMaintenanceWindowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteMaintenanceWindowCommandOutput) => void): void;
            /**
                * <p>Delete OpsMetadata related to an application.</p>
                */
            deleteOpsMetadata(args: DeleteOpsMetadataCommandInput, options?: __HttpHandlerOptions): Promise<DeleteOpsMetadataCommandOutput>;
            deleteOpsMetadata(args: DeleteOpsMetadataCommandInput, cb: (err: any, data?: DeleteOpsMetadataCommandOutput) => void): void;
            deleteOpsMetadata(args: DeleteOpsMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteOpsMetadataCommandOutput) => void): void;
            /**
                * <p>Delete a parameter from the system. After deleting a parameter, wait for at least 30 seconds
                *    to create a parameter with the same name.</p>
                */
            deleteParameter(args: DeleteParameterCommandInput, options?: __HttpHandlerOptions): Promise<DeleteParameterCommandOutput>;
            deleteParameter(args: DeleteParameterCommandInput, cb: (err: any, data?: DeleteParameterCommandOutput) => void): void;
            deleteParameter(args: DeleteParameterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteParameterCommandOutput) => void): void;
            /**
                * <p>Delete a list of parameters. After deleting a parameter, wait for at least 30 seconds to
                *    create a parameter with the same name.</p>
                */
            deleteParameters(args: DeleteParametersCommandInput, options?: __HttpHandlerOptions): Promise<DeleteParametersCommandOutput>;
            deleteParameters(args: DeleteParametersCommandInput, cb: (err: any, data?: DeleteParametersCommandOutput) => void): void;
            deleteParameters(args: DeleteParametersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteParametersCommandOutput) => void): void;
            /**
                * <p>Deletes a patch baseline.</p>
                */
            deletePatchBaseline(args: DeletePatchBaselineCommandInput, options?: __HttpHandlerOptions): Promise<DeletePatchBaselineCommandOutput>;
            deletePatchBaseline(args: DeletePatchBaselineCommandInput, cb: (err: any, data?: DeletePatchBaselineCommandOutput) => void): void;
            deletePatchBaseline(args: DeletePatchBaselineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePatchBaselineCommandOutput) => void): void;
            /**
                * <p>Deletes a resource data sync configuration. After the configuration is deleted, changes to
                *    data on managed nodes are no longer synced to or from the target. Deleting a sync configuration
                *    doesn't delete data.</p>
                */
            deleteResourceDataSync(args: DeleteResourceDataSyncCommandInput, options?: __HttpHandlerOptions): Promise<DeleteResourceDataSyncCommandOutput>;
            deleteResourceDataSync(args: DeleteResourceDataSyncCommandInput, cb: (err: any, data?: DeleteResourceDataSyncCommandOutput) => void): void;
            deleteResourceDataSync(args: DeleteResourceDataSyncCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteResourceDataSyncCommandOutput) => void): void;
            /**
                * <p>Removes the server or virtual machine from the list of registered servers. You can
                *    reregister the node again at any time. If you don't plan to use Run Command on the server, we
                *    suggest uninstalling SSM Agent first.</p>
                */
            deregisterManagedInstance(args: DeregisterManagedInstanceCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterManagedInstanceCommandOutput>;
            deregisterManagedInstance(args: DeregisterManagedInstanceCommandInput, cb: (err: any, data?: DeregisterManagedInstanceCommandOutput) => void): void;
            deregisterManagedInstance(args: DeregisterManagedInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterManagedInstanceCommandOutput) => void): void;
            /**
                * <p>Removes a patch group from a patch baseline.</p>
                */
            deregisterPatchBaselineForPatchGroup(args: DeregisterPatchBaselineForPatchGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterPatchBaselineForPatchGroupCommandOutput>;
            deregisterPatchBaselineForPatchGroup(args: DeregisterPatchBaselineForPatchGroupCommandInput, cb: (err: any, data?: DeregisterPatchBaselineForPatchGroupCommandOutput) => void): void;
            deregisterPatchBaselineForPatchGroup(args: DeregisterPatchBaselineForPatchGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterPatchBaselineForPatchGroupCommandOutput) => void): void;
            /**
                * <p>Removes a target from a maintenance window.</p>
                */
            deregisterTargetFromMaintenanceWindow(args: DeregisterTargetFromMaintenanceWindowCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterTargetFromMaintenanceWindowCommandOutput>;
            deregisterTargetFromMaintenanceWindow(args: DeregisterTargetFromMaintenanceWindowCommandInput, cb: (err: any, data?: DeregisterTargetFromMaintenanceWindowCommandOutput) => void): void;
            deregisterTargetFromMaintenanceWindow(args: DeregisterTargetFromMaintenanceWindowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterTargetFromMaintenanceWindowCommandOutput) => void): void;
            /**
                * <p>Removes a task from a maintenance window.</p>
                */
            deregisterTaskFromMaintenanceWindow(args: DeregisterTaskFromMaintenanceWindowCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterTaskFromMaintenanceWindowCommandOutput>;
            deregisterTaskFromMaintenanceWindow(args: DeregisterTaskFromMaintenanceWindowCommandInput, cb: (err: any, data?: DeregisterTaskFromMaintenanceWindowCommandOutput) => void): void;
            deregisterTaskFromMaintenanceWindow(args: DeregisterTaskFromMaintenanceWindowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterTaskFromMaintenanceWindowCommandOutput) => void): void;
            /**
                * <p>Describes details about the activation, such as the date and time the activation was
                *    created, its expiration date, the Identity and Access Management (IAM) role assigned to
                *    the managed nodes in the activation, and the number of nodes registered by using this
                *    activation.</p>
                */
            describeActivations(args: DescribeActivationsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeActivationsCommandOutput>;
            describeActivations(args: DescribeActivationsCommandInput, cb: (err: any, data?: DescribeActivationsCommandOutput) => void): void;
            describeActivations(args: DescribeActivationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeActivationsCommandOutput) => void): void;
            /**
                * <p>Describes the association for the specified target or managed node. If you created the
                *    association by using the <code>Targets</code> parameter, then you must retrieve the association
                *    by using the association ID.</p>
                */
            describeAssociation(args: DescribeAssociationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAssociationCommandOutput>;
            describeAssociation(args: DescribeAssociationCommandInput, cb: (err: any, data?: DescribeAssociationCommandOutput) => void): void;
            describeAssociation(args: DescribeAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAssociationCommandOutput) => void): void;
            /**
                * <p>Views all executions for a specific association ID. </p>
                */
            describeAssociationExecutions(args: DescribeAssociationExecutionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAssociationExecutionsCommandOutput>;
            describeAssociationExecutions(args: DescribeAssociationExecutionsCommandInput, cb: (err: any, data?: DescribeAssociationExecutionsCommandOutput) => void): void;
            describeAssociationExecutions(args: DescribeAssociationExecutionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAssociationExecutionsCommandOutput) => void): void;
            /**
                * <p>Views information about a specific execution of a specific association.</p>
                */
            describeAssociationExecutionTargets(args: DescribeAssociationExecutionTargetsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAssociationExecutionTargetsCommandOutput>;
            describeAssociationExecutionTargets(args: DescribeAssociationExecutionTargetsCommandInput, cb: (err: any, data?: DescribeAssociationExecutionTargetsCommandOutput) => void): void;
            describeAssociationExecutionTargets(args: DescribeAssociationExecutionTargetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAssociationExecutionTargetsCommandOutput) => void): void;
            /**
                * <p>Provides details about all active and terminated Automation executions.</p>
                */
            describeAutomationExecutions(args: DescribeAutomationExecutionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAutomationExecutionsCommandOutput>;
            describeAutomationExecutions(args: DescribeAutomationExecutionsCommandInput, cb: (err: any, data?: DescribeAutomationExecutionsCommandOutput) => void): void;
            describeAutomationExecutions(args: DescribeAutomationExecutionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAutomationExecutionsCommandOutput) => void): void;
            /**
                * <p>Information about all active and terminated step executions in an Automation
                *    workflow.</p>
                */
            describeAutomationStepExecutions(args: DescribeAutomationStepExecutionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAutomationStepExecutionsCommandOutput>;
            describeAutomationStepExecutions(args: DescribeAutomationStepExecutionsCommandInput, cb: (err: any, data?: DescribeAutomationStepExecutionsCommandOutput) => void): void;
            describeAutomationStepExecutions(args: DescribeAutomationStepExecutionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAutomationStepExecutionsCommandOutput) => void): void;
            /**
                * <p>Lists all patches eligible to be included in a patch baseline.</p>
                */
            describeAvailablePatches(args: DescribeAvailablePatchesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeAvailablePatchesCommandOutput>;
            describeAvailablePatches(args: DescribeAvailablePatchesCommandInput, cb: (err: any, data?: DescribeAvailablePatchesCommandOutput) => void): void;
            describeAvailablePatches(args: DescribeAvailablePatchesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeAvailablePatchesCommandOutput) => void): void;
            /**
                * <p>Describes the specified Amazon Web Services Systems Manager document (SSM document).</p>
                */
            describeDocument(args: DescribeDocumentCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDocumentCommandOutput>;
            describeDocument(args: DescribeDocumentCommandInput, cb: (err: any, data?: DescribeDocumentCommandOutput) => void): void;
            describeDocument(args: DescribeDocumentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDocumentCommandOutput) => void): void;
            /**
                * <p>Describes the permissions for a Amazon Web Services Systems Manager document (SSM document). If you created the
                *    document, you are the owner. If a document is shared, it can either be shared privately (by
                *    specifying a user's Amazon Web Services account ID) or publicly (<i>All</i>). </p>
                */
            describeDocumentPermission(args: DescribeDocumentPermissionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDocumentPermissionCommandOutput>;
            describeDocumentPermission(args: DescribeDocumentPermissionCommandInput, cb: (err: any, data?: DescribeDocumentPermissionCommandOutput) => void): void;
            describeDocumentPermission(args: DescribeDocumentPermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDocumentPermissionCommandOutput) => void): void;
            /**
                * <p>All associations for the managed node(s).</p>
                */
            describeEffectiveInstanceAssociations(args: DescribeEffectiveInstanceAssociationsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEffectiveInstanceAssociationsCommandOutput>;
            describeEffectiveInstanceAssociations(args: DescribeEffectiveInstanceAssociationsCommandInput, cb: (err: any, data?: DescribeEffectiveInstanceAssociationsCommandOutput) => void): void;
            describeEffectiveInstanceAssociations(args: DescribeEffectiveInstanceAssociationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEffectiveInstanceAssociationsCommandOutput) => void): void;
            /**
                * <p>Retrieves the current effective patches (the patch and the approval state) for the specified
                *    patch baseline. Applies to patch baselines for Windows only.</p>
                */
            describeEffectivePatchesForPatchBaseline(args: DescribeEffectivePatchesForPatchBaselineCommandInput, options?: __HttpHandlerOptions): Promise<DescribeEffectivePatchesForPatchBaselineCommandOutput>;
            describeEffectivePatchesForPatchBaseline(args: DescribeEffectivePatchesForPatchBaselineCommandInput, cb: (err: any, data?: DescribeEffectivePatchesForPatchBaselineCommandOutput) => void): void;
            describeEffectivePatchesForPatchBaseline(args: DescribeEffectivePatchesForPatchBaselineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeEffectivePatchesForPatchBaselineCommandOutput) => void): void;
            /**
                * <p>The status of the associations for the managed node(s).</p>
                */
            describeInstanceAssociationsStatus(args: DescribeInstanceAssociationsStatusCommandInput, options?: __HttpHandlerOptions): Promise<DescribeInstanceAssociationsStatusCommandOutput>;
            describeInstanceAssociationsStatus(args: DescribeInstanceAssociationsStatusCommandInput, cb: (err: any, data?: DescribeInstanceAssociationsStatusCommandOutput) => void): void;
            describeInstanceAssociationsStatus(args: DescribeInstanceAssociationsStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeInstanceAssociationsStatusCommandOutput) => void): void;
            /**
                * <p>Describes one or more of your managed nodes, including information about the operating
                *    system platform, the version of SSM Agent installed on the managed node, node status, and so
                *    on.</p>
                *          <p>If you specify one or more managed node IDs, it returns information for those managed nodes.
                *    If you don't specify node IDs, it returns information for all your managed nodes. If you specify
                *    a node ID that isn't valid or a node that you don't own, you receive an error.</p>
                *          <note>
                *             <p>The <code>IamRole</code> field for this API operation is the Identity and Access Management
                *      (IAM) role assigned to on-premises managed nodes. This call doesn't return the
                *      IAM role for EC2 instances.</p>
                *          </note>
                */
            describeInstanceInformation(args: DescribeInstanceInformationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeInstanceInformationCommandOutput>;
            describeInstanceInformation(args: DescribeInstanceInformationCommandInput, cb: (err: any, data?: DescribeInstanceInformationCommandOutput) => void): void;
            describeInstanceInformation(args: DescribeInstanceInformationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeInstanceInformationCommandOutput) => void): void;
            /**
                * <p>Retrieves information about the patches on the specified managed node and their state
                *    relative to the patch baseline being used for the node.</p>
                */
            describeInstancePatches(args: DescribeInstancePatchesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeInstancePatchesCommandOutput>;
            describeInstancePatches(args: DescribeInstancePatchesCommandInput, cb: (err: any, data?: DescribeInstancePatchesCommandOutput) => void): void;
            describeInstancePatches(args: DescribeInstancePatchesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeInstancePatchesCommandOutput) => void): void;
            /**
                * <p>Retrieves the high-level patch state of one or more managed nodes.</p>
                */
            describeInstancePatchStates(args: DescribeInstancePatchStatesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeInstancePatchStatesCommandOutput>;
            describeInstancePatchStates(args: DescribeInstancePatchStatesCommandInput, cb: (err: any, data?: DescribeInstancePatchStatesCommandOutput) => void): void;
            describeInstancePatchStates(args: DescribeInstancePatchStatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeInstancePatchStatesCommandOutput) => void): void;
            /**
                * <p>Retrieves the high-level patch state for the managed nodes in the specified patch
                *    group.</p>
                */
            describeInstancePatchStatesForPatchGroup(args: DescribeInstancePatchStatesForPatchGroupCommandInput, options?: __HttpHandlerOptions): Promise<DescribeInstancePatchStatesForPatchGroupCommandOutput>;
            describeInstancePatchStatesForPatchGroup(args: DescribeInstancePatchStatesForPatchGroupCommandInput, cb: (err: any, data?: DescribeInstancePatchStatesForPatchGroupCommandOutput) => void): void;
            describeInstancePatchStatesForPatchGroup(args: DescribeInstancePatchStatesForPatchGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeInstancePatchStatesForPatchGroupCommandOutput) => void): void;
            /**
                * <p>Describes a specific delete inventory operation.</p>
                */
            describeInventoryDeletions(args: DescribeInventoryDeletionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeInventoryDeletionsCommandOutput>;
            describeInventoryDeletions(args: DescribeInventoryDeletionsCommandInput, cb: (err: any, data?: DescribeInventoryDeletionsCommandOutput) => void): void;
            describeInventoryDeletions(args: DescribeInventoryDeletionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeInventoryDeletionsCommandOutput) => void): void;
            /**
                * <p>Lists the executions of a maintenance window. This includes information about when the
                *    maintenance window was scheduled to be active, and information about tasks registered and run
                *    with the maintenance window.</p>
                */
            describeMaintenanceWindowExecutions(args: DescribeMaintenanceWindowExecutionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeMaintenanceWindowExecutionsCommandOutput>;
            describeMaintenanceWindowExecutions(args: DescribeMaintenanceWindowExecutionsCommandInput, cb: (err: any, data?: DescribeMaintenanceWindowExecutionsCommandOutput) => void): void;
            describeMaintenanceWindowExecutions(args: DescribeMaintenanceWindowExecutionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeMaintenanceWindowExecutionsCommandOutput) => void): void;
            /**
                * <p>Retrieves the individual task executions (one per target) for a particular task run as part
                *    of a maintenance window execution.</p>
                */
            describeMaintenanceWindowExecutionTaskInvocations(args: DescribeMaintenanceWindowExecutionTaskInvocationsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeMaintenanceWindowExecutionTaskInvocationsCommandOutput>;
            describeMaintenanceWindowExecutionTaskInvocations(args: DescribeMaintenanceWindowExecutionTaskInvocationsCommandInput, cb: (err: any, data?: DescribeMaintenanceWindowExecutionTaskInvocationsCommandOutput) => void): void;
            describeMaintenanceWindowExecutionTaskInvocations(args: DescribeMaintenanceWindowExecutionTaskInvocationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeMaintenanceWindowExecutionTaskInvocationsCommandOutput) => void): void;
            /**
                * <p>For a given maintenance window execution, lists the tasks that were run.</p>
                */
            describeMaintenanceWindowExecutionTasks(args: DescribeMaintenanceWindowExecutionTasksCommandInput, options?: __HttpHandlerOptions): Promise<DescribeMaintenanceWindowExecutionTasksCommandOutput>;
            describeMaintenanceWindowExecutionTasks(args: DescribeMaintenanceWindowExecutionTasksCommandInput, cb: (err: any, data?: DescribeMaintenanceWindowExecutionTasksCommandOutput) => void): void;
            describeMaintenanceWindowExecutionTasks(args: DescribeMaintenanceWindowExecutionTasksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeMaintenanceWindowExecutionTasksCommandOutput) => void): void;
            /**
                * <p>Retrieves the maintenance windows in an Amazon Web Services account.</p>
                */
            describeMaintenanceWindows(args: DescribeMaintenanceWindowsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeMaintenanceWindowsCommandOutput>;
            describeMaintenanceWindows(args: DescribeMaintenanceWindowsCommandInput, cb: (err: any, data?: DescribeMaintenanceWindowsCommandOutput) => void): void;
            describeMaintenanceWindows(args: DescribeMaintenanceWindowsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeMaintenanceWindowsCommandOutput) => void): void;
            /**
                * <p>Retrieves information about upcoming executions of a maintenance window.</p>
                */
            describeMaintenanceWindowSchedule(args: DescribeMaintenanceWindowScheduleCommandInput, options?: __HttpHandlerOptions): Promise<DescribeMaintenanceWindowScheduleCommandOutput>;
            describeMaintenanceWindowSchedule(args: DescribeMaintenanceWindowScheduleCommandInput, cb: (err: any, data?: DescribeMaintenanceWindowScheduleCommandOutput) => void): void;
            describeMaintenanceWindowSchedule(args: DescribeMaintenanceWindowScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeMaintenanceWindowScheduleCommandOutput) => void): void;
            /**
                * <p>Retrieves information about the maintenance window targets or tasks that a managed node is
                *    associated with.</p>
                */
            describeMaintenanceWindowsForTarget(args: DescribeMaintenanceWindowsForTargetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeMaintenanceWindowsForTargetCommandOutput>;
            describeMaintenanceWindowsForTarget(args: DescribeMaintenanceWindowsForTargetCommandInput, cb: (err: any, data?: DescribeMaintenanceWindowsForTargetCommandOutput) => void): void;
            describeMaintenanceWindowsForTarget(args: DescribeMaintenanceWindowsForTargetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeMaintenanceWindowsForTargetCommandOutput) => void): void;
            /**
                * <p>Lists the targets registered with the maintenance window.</p>
                */
            describeMaintenanceWindowTargets(args: DescribeMaintenanceWindowTargetsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeMaintenanceWindowTargetsCommandOutput>;
            describeMaintenanceWindowTargets(args: DescribeMaintenanceWindowTargetsCommandInput, cb: (err: any, data?: DescribeMaintenanceWindowTargetsCommandOutput) => void): void;
            describeMaintenanceWindowTargets(args: DescribeMaintenanceWindowTargetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeMaintenanceWindowTargetsCommandOutput) => void): void;
            /**
                * <p>Lists the tasks in a maintenance window.</p>
                *          <note>
                *             <p>For maintenance window tasks without a specified target, you can't supply values for
                *      <code>--max-errors</code> and <code>--max-concurrency</code>. Instead, the system inserts a
                *     placeholder value of <code>1</code>, which may be reported in the response to this command.
                *     These values don't affect the running of your task and can be ignored.</p>
                *          </note>
                */
            describeMaintenanceWindowTasks(args: DescribeMaintenanceWindowTasksCommandInput, options?: __HttpHandlerOptions): Promise<DescribeMaintenanceWindowTasksCommandOutput>;
            describeMaintenanceWindowTasks(args: DescribeMaintenanceWindowTasksCommandInput, cb: (err: any, data?: DescribeMaintenanceWindowTasksCommandOutput) => void): void;
            describeMaintenanceWindowTasks(args: DescribeMaintenanceWindowTasksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeMaintenanceWindowTasksCommandOutput) => void): void;
            /**
                * <p>Query a set of OpsItems. You must have permission in Identity and Access Management (IAM) to query a list of OpsItems. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
                *     OpsCenter</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          <p>Operations engineers and IT professionals use Amazon Web Services Systems Manager OpsCenter to view, investigate, and
                *    remediate operational issues impacting the performance and health of their Amazon Web Services resources. For
                *    more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">OpsCenter</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>. </p>
                */
            describeOpsItems(args: DescribeOpsItemsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOpsItemsCommandOutput>;
            describeOpsItems(args: DescribeOpsItemsCommandInput, cb: (err: any, data?: DescribeOpsItemsCommandOutput) => void): void;
            describeOpsItems(args: DescribeOpsItemsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOpsItemsCommandOutput) => void): void;
            /**
                * <p>Get information about a parameter.</p>
                *          <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code>
                *    in the request, the response includes information up to the limit specified. The number of items
                *    returned, however, can be between zero and the value of <code>MaxResults</code>. If the service
                *    reaches an internal limit while processing the results, it stops the operation and returns the
                *    matching values up to that point and a <code>NextToken</code>. You can specify the
                *     <code>NextToken</code> in a subsequent call to get the next set of results.</p>
                *          <important>
                *             <p>If you change the KMS key alias for the KMS key used to encrypt a parameter, then you must
                *     also update the key alias the parameter uses to reference KMS. Otherwise,
                *      <code>DescribeParameters</code> retrieves whatever the original key alias was
                *     referencing.</p>
                *          </important>
                */
            describeParameters(args: DescribeParametersCommandInput, options?: __HttpHandlerOptions): Promise<DescribeParametersCommandOutput>;
            describeParameters(args: DescribeParametersCommandInput, cb: (err: any, data?: DescribeParametersCommandOutput) => void): void;
            describeParameters(args: DescribeParametersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeParametersCommandOutput) => void): void;
            /**
                * <p>Lists the patch baselines in your Amazon Web Services account.</p>
                */
            describePatchBaselines(args: DescribePatchBaselinesCommandInput, options?: __HttpHandlerOptions): Promise<DescribePatchBaselinesCommandOutput>;
            describePatchBaselines(args: DescribePatchBaselinesCommandInput, cb: (err: any, data?: DescribePatchBaselinesCommandOutput) => void): void;
            describePatchBaselines(args: DescribePatchBaselinesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePatchBaselinesCommandOutput) => void): void;
            /**
                * <p>Lists all patch groups that have been registered with patch baselines.</p>
                */
            describePatchGroups(args: DescribePatchGroupsCommandInput, options?: __HttpHandlerOptions): Promise<DescribePatchGroupsCommandOutput>;
            describePatchGroups(args: DescribePatchGroupsCommandInput, cb: (err: any, data?: DescribePatchGroupsCommandOutput) => void): void;
            describePatchGroups(args: DescribePatchGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePatchGroupsCommandOutput) => void): void;
            /**
                * <p>Returns high-level aggregated patch compliance state information for a patch group.</p>
                */
            describePatchGroupState(args: DescribePatchGroupStateCommandInput, options?: __HttpHandlerOptions): Promise<DescribePatchGroupStateCommandOutput>;
            describePatchGroupState(args: DescribePatchGroupStateCommandInput, cb: (err: any, data?: DescribePatchGroupStateCommandOutput) => void): void;
            describePatchGroupState(args: DescribePatchGroupStateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePatchGroupStateCommandOutput) => void): void;
            /**
                * <p>Lists the properties of available patches organized by product, product family,
                *    classification, severity, and other properties of available patches. You can use the reported
                *    properties in the filters you specify in requests for operations such as <a>CreatePatchBaseline</a>, <a>UpdatePatchBaseline</a>, <a>DescribeAvailablePatches</a>, and <a>DescribePatchBaselines</a>.</p>
                *          <p>The following section lists the properties that can be used in filters for each major
                *    operating system type:</p>
                *          <dl>
                *             <dt>AMAZON_LINUX</dt>
                *             <dd>
                *                <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
                *        <code>SEVERITY</code>
                *                </p>
                *             </dd>
                *             <dt>AMAZON_LINUX_2</dt>
                *             <dd>
                *                <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
                *        <code>SEVERITY</code>
                *                </p>
                *             </dd>
                *             <dt>CENTOS</dt>
                *             <dd>
                *                <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
                *        <code>SEVERITY</code>
                *                </p>
                *             </dd>
                *             <dt>DEBIAN</dt>
                *             <dd>
                *                <p>Valid properties: <code>PRODUCT</code> | <code>PRIORITY</code>
                *                </p>
                *             </dd>
                *             <dt>MACOS</dt>
                *             <dd>
                *                <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code>
                *                </p>
                *             </dd>
                *             <dt>ORACLE_LINUX</dt>
                *             <dd>
                *                <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
                *        <code>SEVERITY</code>
                *                </p>
                *             </dd>
                *             <dt>REDHAT_ENTERPRISE_LINUX</dt>
                *             <dd>
                *                <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
                *        <code>SEVERITY</code>
                *                </p>
                *             </dd>
                *             <dt>SUSE</dt>
                *             <dd>
                *                <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
                *        <code>SEVERITY</code>
                *                </p>
                *             </dd>
                *             <dt>UBUNTU</dt>
                *             <dd>
                *                <p>Valid properties: <code>PRODUCT</code> | <code>PRIORITY</code>
                *                </p>
                *             </dd>
                *             <dt>WINDOWS</dt>
                *             <dd>
                *                <p>Valid properties: <code>PRODUCT</code> | <code>PRODUCT_FAMILY</code> |
                *        <code>CLASSIFICATION</code> | <code>MSRC_SEVERITY</code>
                *                </p>
                *             </dd>
                *          </dl>
                */
            describePatchProperties(args: DescribePatchPropertiesCommandInput, options?: __HttpHandlerOptions): Promise<DescribePatchPropertiesCommandOutput>;
            describePatchProperties(args: DescribePatchPropertiesCommandInput, cb: (err: any, data?: DescribePatchPropertiesCommandOutput) => void): void;
            describePatchProperties(args: DescribePatchPropertiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePatchPropertiesCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of all active sessions (both connected and disconnected) or terminated
                *    sessions from the past 30 days.</p>
                */
            describeSessions(args: DescribeSessionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeSessionsCommandOutput>;
            describeSessions(args: DescribeSessionsCommandInput, cb: (err: any, data?: DescribeSessionsCommandOutput) => void): void;
            describeSessions(args: DescribeSessionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeSessionsCommandOutput) => void): void;
            /**
                * <p>Deletes the association between an OpsItem and a related item. For example, this API
                *    operation can delete an Incident Manager incident from an OpsItem. Incident Manager is a capability of
                *    Amazon Web Services Systems Manager.</p>
                */
            disassociateOpsItemRelatedItem(args: DisassociateOpsItemRelatedItemCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateOpsItemRelatedItemCommandOutput>;
            disassociateOpsItemRelatedItem(args: DisassociateOpsItemRelatedItemCommandInput, cb: (err: any, data?: DisassociateOpsItemRelatedItemCommandOutput) => void): void;
            disassociateOpsItemRelatedItem(args: DisassociateOpsItemRelatedItemCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateOpsItemRelatedItemCommandOutput) => void): void;
            /**
                * <p>Get detailed information about a particular Automation execution.</p>
                */
            getAutomationExecution(args: GetAutomationExecutionCommandInput, options?: __HttpHandlerOptions): Promise<GetAutomationExecutionCommandOutput>;
            getAutomationExecution(args: GetAutomationExecutionCommandInput, cb: (err: any, data?: GetAutomationExecutionCommandOutput) => void): void;
            getAutomationExecution(args: GetAutomationExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAutomationExecutionCommandOutput) => void): void;
            /**
                * <p>Gets the state of a Amazon Web Services Systems Manager change calendar at the current time or a specified time. If
                *    you specify a time, <code>GetCalendarState</code> returns the state of the calendar at that
                *    specific time, and returns the next time that the change calendar state will transition. If you
                *    don't specify a time, <code>GetCalendarState</code> uses the current time. Change Calendar
                *    entries have two possible states: <code>OPEN</code> or <code>CLOSED</code>.</p>
                *          <p>If you specify more than one calendar in a request, the command returns the status of
                *     <code>OPEN</code> only if all calendars in the request are open. If one or more calendars in the
                *    request are closed, the status returned is <code>CLOSED</code>.</p>
                *          <p>For more information about Change Calendar, a capability of Amazon Web Services Systems Manager, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar.html">Amazon Web Services Systems Manager Change Calendar</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            getCalendarState(args: GetCalendarStateCommandInput, options?: __HttpHandlerOptions): Promise<GetCalendarStateCommandOutput>;
            getCalendarState(args: GetCalendarStateCommandInput, cb: (err: any, data?: GetCalendarStateCommandOutput) => void): void;
            getCalendarState(args: GetCalendarStateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCalendarStateCommandOutput) => void): void;
            /**
                * <p>Returns detailed information about command execution for an invocation or plugin.</p>
                *          <p>
                *             <code>GetCommandInvocation</code> only gives the execution status of a plugin in a document.
                *    To get the command execution status on a specific managed node, use <a>ListCommandInvocations</a>. To get the command execution status across managed nodes,
                *    use <a>ListCommands</a>.</p>
                */
            getCommandInvocation(args: GetCommandInvocationCommandInput, options?: __HttpHandlerOptions): Promise<GetCommandInvocationCommandOutput>;
            getCommandInvocation(args: GetCommandInvocationCommandInput, cb: (err: any, data?: GetCommandInvocationCommandOutput) => void): void;
            getCommandInvocation(args: GetCommandInvocationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCommandInvocationCommandOutput) => void): void;
            /**
                * <p>Retrieves the Session Manager connection status for a managed node to determine whether it is running
                *    and ready to receive Session Manager connections.</p>
                */
            getConnectionStatus(args: GetConnectionStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetConnectionStatusCommandOutput>;
            getConnectionStatus(args: GetConnectionStatusCommandInput, cb: (err: any, data?: GetConnectionStatusCommandOutput) => void): void;
            getConnectionStatus(args: GetConnectionStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetConnectionStatusCommandOutput) => void): void;
            /**
                * <p>Retrieves the default patch baseline. Amazon Web Services Systems Manager supports creating multiple default patch
                *    baselines. For example, you can create a default patch baseline for each operating system.</p>
                *          <p>If you don't specify an operating system value, the default patch baseline for Windows is
                *    returned.</p>
                */
            getDefaultPatchBaseline(args: GetDefaultPatchBaselineCommandInput, options?: __HttpHandlerOptions): Promise<GetDefaultPatchBaselineCommandOutput>;
            getDefaultPatchBaseline(args: GetDefaultPatchBaselineCommandInput, cb: (err: any, data?: GetDefaultPatchBaselineCommandOutput) => void): void;
            getDefaultPatchBaseline(args: GetDefaultPatchBaselineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDefaultPatchBaselineCommandOutput) => void): void;
            /**
                * <p>Retrieves the current snapshot for the patch baseline the managed node uses. This API is
                *    primarily used by the <code>AWS-RunPatchBaseline</code> Systems Manager document (SSM document).</p>
                *          <note>
                *             <p>If you run the command locally, such as with the Command Line Interface (CLI), the system attempts to use your local Amazon Web Services credentials and the operation fails. To avoid
                *     this, you can run the command in the Amazon Web Services Systems Manager console. Use Run Command, a capability of
                *     Amazon Web Services Systems Manager, with an SSM document that enables you to target a managed node with a script or
                *     command. For example, run the command using the <code>AWS-RunShellScript</code> document or the
                *      <code>AWS-RunPowerShellScript</code> document.</p>
                *          </note>
                */
            getDeployablePatchSnapshotForInstance(args: GetDeployablePatchSnapshotForInstanceCommandInput, options?: __HttpHandlerOptions): Promise<GetDeployablePatchSnapshotForInstanceCommandOutput>;
            getDeployablePatchSnapshotForInstance(args: GetDeployablePatchSnapshotForInstanceCommandInput, cb: (err: any, data?: GetDeployablePatchSnapshotForInstanceCommandOutput) => void): void;
            getDeployablePatchSnapshotForInstance(args: GetDeployablePatchSnapshotForInstanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDeployablePatchSnapshotForInstanceCommandOutput) => void): void;
            /**
                * <p>Gets the contents of the specified Amazon Web Services Systems Manager document (SSM document).</p>
                */
            getDocument(args: GetDocumentCommandInput, options?: __HttpHandlerOptions): Promise<GetDocumentCommandOutput>;
            getDocument(args: GetDocumentCommandInput, cb: (err: any, data?: GetDocumentCommandOutput) => void): void;
            getDocument(args: GetDocumentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDocumentCommandOutput) => void): void;
            /**
                * <p>Query inventory information. This includes managed node status, such as <code>Stopped</code>
                *    or <code>Terminated</code>.</p>
                */
            getInventory(args: GetInventoryCommandInput, options?: __HttpHandlerOptions): Promise<GetInventoryCommandOutput>;
            getInventory(args: GetInventoryCommandInput, cb: (err: any, data?: GetInventoryCommandOutput) => void): void;
            getInventory(args: GetInventoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInventoryCommandOutput) => void): void;
            /**
                * <p>Return a list of inventory type names for the account, or return a list of attribute names
                *    for a specific Inventory item type.</p>
                */
            getInventorySchema(args: GetInventorySchemaCommandInput, options?: __HttpHandlerOptions): Promise<GetInventorySchemaCommandOutput>;
            getInventorySchema(args: GetInventorySchemaCommandInput, cb: (err: any, data?: GetInventorySchemaCommandOutput) => void): void;
            getInventorySchema(args: GetInventorySchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInventorySchemaCommandOutput) => void): void;
            /**
                * <p>Retrieves a maintenance window.</p>
                */
            getMaintenanceWindow(args: GetMaintenanceWindowCommandInput, options?: __HttpHandlerOptions): Promise<GetMaintenanceWindowCommandOutput>;
            getMaintenanceWindow(args: GetMaintenanceWindowCommandInput, cb: (err: any, data?: GetMaintenanceWindowCommandOutput) => void): void;
            getMaintenanceWindow(args: GetMaintenanceWindowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMaintenanceWindowCommandOutput) => void): void;
            /**
                * <p>Retrieves details about a specific a maintenance window execution.</p>
                */
            getMaintenanceWindowExecution(args: GetMaintenanceWindowExecutionCommandInput, options?: __HttpHandlerOptions): Promise<GetMaintenanceWindowExecutionCommandOutput>;
            getMaintenanceWindowExecution(args: GetMaintenanceWindowExecutionCommandInput, cb: (err: any, data?: GetMaintenanceWindowExecutionCommandOutput) => void): void;
            getMaintenanceWindowExecution(args: GetMaintenanceWindowExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMaintenanceWindowExecutionCommandOutput) => void): void;
            /**
                * <p>Retrieves the details about a specific task run as part of a maintenance window
                *    execution.</p>
                */
            getMaintenanceWindowExecutionTask(args: GetMaintenanceWindowExecutionTaskCommandInput, options?: __HttpHandlerOptions): Promise<GetMaintenanceWindowExecutionTaskCommandOutput>;
            getMaintenanceWindowExecutionTask(args: GetMaintenanceWindowExecutionTaskCommandInput, cb: (err: any, data?: GetMaintenanceWindowExecutionTaskCommandOutput) => void): void;
            getMaintenanceWindowExecutionTask(args: GetMaintenanceWindowExecutionTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMaintenanceWindowExecutionTaskCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a specific task running on a specific target.</p>
                */
            getMaintenanceWindowExecutionTaskInvocation(args: GetMaintenanceWindowExecutionTaskInvocationCommandInput, options?: __HttpHandlerOptions): Promise<GetMaintenanceWindowExecutionTaskInvocationCommandOutput>;
            getMaintenanceWindowExecutionTaskInvocation(args: GetMaintenanceWindowExecutionTaskInvocationCommandInput, cb: (err: any, data?: GetMaintenanceWindowExecutionTaskInvocationCommandOutput) => void): void;
            getMaintenanceWindowExecutionTaskInvocation(args: GetMaintenanceWindowExecutionTaskInvocationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMaintenanceWindowExecutionTaskInvocationCommandOutput) => void): void;
            /**
                * <p>Retrieves the details of a maintenance window task.</p>
                *          <note>
                *             <p>For maintenance window tasks without a specified target, you can't supply values for
                *      <code>--max-errors</code> and <code>--max-concurrency</code>. Instead, the system inserts a
                *     placeholder value of <code>1</code>, which may be reported in the response to this command.
                *     These values don't affect the running of your task and can be ignored.</p>
                *          </note>
                *          <p>To retrieve a list of tasks in a maintenance window, instead use the <a>DescribeMaintenanceWindowTasks</a> command.</p>
                */
            getMaintenanceWindowTask(args: GetMaintenanceWindowTaskCommandInput, options?: __HttpHandlerOptions): Promise<GetMaintenanceWindowTaskCommandOutput>;
            getMaintenanceWindowTask(args: GetMaintenanceWindowTaskCommandInput, cb: (err: any, data?: GetMaintenanceWindowTaskCommandOutput) => void): void;
            getMaintenanceWindowTask(args: GetMaintenanceWindowTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMaintenanceWindowTaskCommandOutput) => void): void;
            /**
                * <p>Get information about an OpsItem by using the ID. You must have permission in Identity and Access Management (IAM) to view information about an OpsItem. For more information,
                *    see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
                *     OpsCenter</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          <p>Operations engineers and IT professionals use Amazon Web Services Systems Manager OpsCenter to view, investigate, and
                *    remediate operational issues impacting the performance and health of their Amazon Web Services resources. For
                *    more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">OpsCenter</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>. </p>
                */
            getOpsItem(args: GetOpsItemCommandInput, options?: __HttpHandlerOptions): Promise<GetOpsItemCommandOutput>;
            getOpsItem(args: GetOpsItemCommandInput, cb: (err: any, data?: GetOpsItemCommandOutput) => void): void;
            getOpsItem(args: GetOpsItemCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOpsItemCommandOutput) => void): void;
            /**
                * <p>View operational metadata related to an application in Application Manager.</p>
                */
            getOpsMetadata(args: GetOpsMetadataCommandInput, options?: __HttpHandlerOptions): Promise<GetOpsMetadataCommandOutput>;
            getOpsMetadata(args: GetOpsMetadataCommandInput, cb: (err: any, data?: GetOpsMetadataCommandOutput) => void): void;
            getOpsMetadata(args: GetOpsMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOpsMetadataCommandOutput) => void): void;
            /**
                * <p>View a summary of operations metadata (OpsData) based on specified filters and aggregators.
                *    OpsData can include information about Amazon Web Services Systems Manager OpsCenter operational workitems (OpsItems) as
                *    well as information about any Amazon Web Services resource or service configured to report OpsData to Amazon Web Services Systems Manager
                *    Explorer. </p>
                */
            getOpsSummary(args: GetOpsSummaryCommandInput, options?: __HttpHandlerOptions): Promise<GetOpsSummaryCommandOutput>;
            getOpsSummary(args: GetOpsSummaryCommandInput, cb: (err: any, data?: GetOpsSummaryCommandOutput) => void): void;
            getOpsSummary(args: GetOpsSummaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOpsSummaryCommandOutput) => void): void;
            /**
                * <p>Get information about a single parameter by specifying the parameter name.</p>
                *          <note>
                *             <p>To get information about more than one parameter at a time, use the <a>GetParameters</a> operation.</p>
                *          </note>
                */
            getParameter(args: GetParameterCommandInput, options?: __HttpHandlerOptions): Promise<GetParameterCommandOutput>;
            getParameter(args: GetParameterCommandInput, cb: (err: any, data?: GetParameterCommandOutput) => void): void;
            getParameter(args: GetParameterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetParameterCommandOutput) => void): void;
            /**
                * <p>Retrieves the history of all changes to a parameter.</p>
                *          <important>
                *             <p>If you change the KMS key alias for the KMS key used to encrypt a parameter, then you must
                *     also update the key alias the parameter uses to reference KMS. Otherwise,
                *      <code>GetParameterHistory</code> retrieves whatever the original key alias was
                *     referencing.</p>
                *          </important>
                */
            getParameterHistory(args: GetParameterHistoryCommandInput, options?: __HttpHandlerOptions): Promise<GetParameterHistoryCommandOutput>;
            getParameterHistory(args: GetParameterHistoryCommandInput, cb: (err: any, data?: GetParameterHistoryCommandOutput) => void): void;
            getParameterHistory(args: GetParameterHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetParameterHistoryCommandOutput) => void): void;
            /**
                * <p>Get information about one or more parameters by specifying multiple parameter names.</p>
                *          <note>
                *             <p>To get information about a single parameter, you can use the <a>GetParameter</a>
                *     operation instead.</p>
                *          </note>
                */
            getParameters(args: GetParametersCommandInput, options?: __HttpHandlerOptions): Promise<GetParametersCommandOutput>;
            getParameters(args: GetParametersCommandInput, cb: (err: any, data?: GetParametersCommandOutput) => void): void;
            getParameters(args: GetParametersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetParametersCommandOutput) => void): void;
            /**
                * <p>Retrieve information about one or more parameters in a specific hierarchy. </p>
                *          <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code>
                *    in the request, the response includes information up to the limit specified. The number of items
                *    returned, however, can be between zero and the value of <code>MaxResults</code>. If the service
                *    reaches an internal limit while processing the results, it stops the operation and returns the
                *    matching values up to that point and a <code>NextToken</code>. You can specify the
                *     <code>NextToken</code> in a subsequent call to get the next set of results.</p>
                */
            getParametersByPath(args: GetParametersByPathCommandInput, options?: __HttpHandlerOptions): Promise<GetParametersByPathCommandOutput>;
            getParametersByPath(args: GetParametersByPathCommandInput, cb: (err: any, data?: GetParametersByPathCommandOutput) => void): void;
            getParametersByPath(args: GetParametersByPathCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetParametersByPathCommandOutput) => void): void;
            /**
                * <p>Retrieves information about a patch baseline.</p>
                */
            getPatchBaseline(args: GetPatchBaselineCommandInput, options?: __HttpHandlerOptions): Promise<GetPatchBaselineCommandOutput>;
            getPatchBaseline(args: GetPatchBaselineCommandInput, cb: (err: any, data?: GetPatchBaselineCommandOutput) => void): void;
            getPatchBaseline(args: GetPatchBaselineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPatchBaselineCommandOutput) => void): void;
            /**
                * <p>Retrieves the patch baseline that should be used for the specified patch group.</p>
                */
            getPatchBaselineForPatchGroup(args: GetPatchBaselineForPatchGroupCommandInput, options?: __HttpHandlerOptions): Promise<GetPatchBaselineForPatchGroupCommandOutput>;
            getPatchBaselineForPatchGroup(args: GetPatchBaselineForPatchGroupCommandInput, cb: (err: any, data?: GetPatchBaselineForPatchGroupCommandOutput) => void): void;
            getPatchBaselineForPatchGroup(args: GetPatchBaselineForPatchGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPatchBaselineForPatchGroupCommandOutput) => void): void;
            /**
                * <p>
                *             <code>ServiceSetting</code> is an account-level setting for an Amazon Web Services service. This setting
                *    defines how a user interacts with or uses a service or a feature of a service. For example, if an
                *    Amazon Web Services service charges money to the account based on feature or service usage, then the Amazon Web Services
                *    service team might create a default setting of <code>false</code>. This means the user can't use
                *    this feature unless they change the setting to <code>true</code> and intentionally opt in for a
                *    paid feature.</p>
                *          <p>Services map a <code>SettingId</code> object to a setting value. Amazon Web Services services teams define
                *    the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>,
                *    but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code>
                *    permission for the setting. Use the <a>UpdateServiceSetting</a> API operation to
                *    change the default setting. Or use the <a>ResetServiceSetting</a> to change the value
                *    back to the original value defined by the Amazon Web Services service team.</p>
                *          <p>Query the current service setting for the Amazon Web Services account. </p>
                */
            getServiceSetting(args: GetServiceSettingCommandInput, options?: __HttpHandlerOptions): Promise<GetServiceSettingCommandOutput>;
            getServiceSetting(args: GetServiceSettingCommandInput, cb: (err: any, data?: GetServiceSettingCommandOutput) => void): void;
            getServiceSetting(args: GetServiceSettingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetServiceSettingCommandOutput) => void): void;
            /**
                * <p>A parameter label is a user-defined alias to help you manage different versions of a
                *    parameter. When you modify a parameter, Amazon Web Services Systems Manager automatically saves a new version and
                *    increments the version number by one. A label can help you remember the purpose of a parameter
                *    when there are multiple versions. </p>
                *          <p>Parameter labels have the following requirements and restrictions.</p>
                *          <ul>
                *             <li>
                *                <p>A version of a parameter can have a maximum of 10 labels.</p>
                *             </li>
                *             <li>
                *                <p>You can't attach the same label to different versions of the same parameter. For example,
                *      if version 1 has the label Production, then you can't attach Production to version 2.</p>
                *             </li>
                *             <li>
                *                <p>You can move a label from one version of a parameter to another.</p>
                *             </li>
                *             <li>
                *                <p>You can't create a label when you create a new parameter. You must attach a label to a
                *      specific version of a parameter.</p>
                *             </li>
                *             <li>
                *                <p>If you no longer want to use a parameter label, then you can either delete it or move it
                *      to a different version of a parameter.</p>
                *             </li>
                *             <li>
                *                <p>A label can have a maximum of 100 characters.</p>
                *             </li>
                *             <li>
                *                <p>Labels can contain letters (case sensitive), numbers, periods (.), hyphens (-), or
                *      underscores (_).</p>
                *             </li>
                *             <li>
                *                <p>Labels can't begin with a number, "<code>aws</code>" or "<code>ssm</code>" (not case
                *      sensitive). If a label fails to meet these requirements, then the label isn't associated with a
                *      parameter and the system displays it in the list of InvalidLabels.</p>
                *             </li>
                *          </ul>
                */
            labelParameterVersion(args: LabelParameterVersionCommandInput, options?: __HttpHandlerOptions): Promise<LabelParameterVersionCommandOutput>;
            labelParameterVersion(args: LabelParameterVersionCommandInput, cb: (err: any, data?: LabelParameterVersionCommandOutput) => void): void;
            labelParameterVersion(args: LabelParameterVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: LabelParameterVersionCommandOutput) => void): void;
            /**
                * <p>Returns all State Manager associations in the current Amazon Web Services account and Amazon Web Services Region. You
                *    can limit the results to a specific State Manager association document or managed node by
                *    specifying a filter. State Manager is a capability of Amazon Web Services Systems Manager.</p>
                */
            listAssociations(args: ListAssociationsCommandInput, options?: __HttpHandlerOptions): Promise<ListAssociationsCommandOutput>;
            listAssociations(args: ListAssociationsCommandInput, cb: (err: any, data?: ListAssociationsCommandOutput) => void): void;
            listAssociations(args: ListAssociationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssociationsCommandOutput) => void): void;
            /**
                * <p>Retrieves all versions of an association for a specific association ID.</p>
                */
            listAssociationVersions(args: ListAssociationVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListAssociationVersionsCommandOutput>;
            listAssociationVersions(args: ListAssociationVersionsCommandInput, cb: (err: any, data?: ListAssociationVersionsCommandOutput) => void): void;
            listAssociationVersions(args: ListAssociationVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssociationVersionsCommandOutput) => void): void;
            /**
                * <p>An invocation is copy of a command sent to a specific managed node. A command can apply to
                *    one or more managed nodes. A command invocation applies to one managed node. For example, if a
                *    user runs <code>SendCommand</code> against three managed nodes, then a command invocation is
                *    created for each requested managed node ID. <code>ListCommandInvocations</code> provide status
                *    about command execution.</p>
                */
            listCommandInvocations(args: ListCommandInvocationsCommandInput, options?: __HttpHandlerOptions): Promise<ListCommandInvocationsCommandOutput>;
            listCommandInvocations(args: ListCommandInvocationsCommandInput, cb: (err: any, data?: ListCommandInvocationsCommandOutput) => void): void;
            listCommandInvocations(args: ListCommandInvocationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCommandInvocationsCommandOutput) => void): void;
            /**
                * <p>Lists the commands requested by users of the Amazon Web Services account.</p>
                */
            listCommands(args: ListCommandsCommandInput, options?: __HttpHandlerOptions): Promise<ListCommandsCommandOutput>;
            listCommands(args: ListCommandsCommandInput, cb: (err: any, data?: ListCommandsCommandOutput) => void): void;
            listCommands(args: ListCommandsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListCommandsCommandOutput) => void): void;
            /**
                * <p>For a specified resource ID, this API operation returns a list of compliance statuses for
                *    different resource types. Currently, you can only specify one resource ID per call. List results
                *    depend on the criteria specified in the filter.</p>
                */
            listComplianceItems(args: ListComplianceItemsCommandInput, options?: __HttpHandlerOptions): Promise<ListComplianceItemsCommandOutput>;
            listComplianceItems(args: ListComplianceItemsCommandInput, cb: (err: any, data?: ListComplianceItemsCommandOutput) => void): void;
            listComplianceItems(args: ListComplianceItemsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListComplianceItemsCommandOutput) => void): void;
            /**
                * <p>Returns a summary count of compliant and non-compliant resources for a compliance type. For
                *    example, this call can return State Manager associations, patches, or custom compliance types
                *    according to the filter criteria that you specify.</p>
                */
            listComplianceSummaries(args: ListComplianceSummariesCommandInput, options?: __HttpHandlerOptions): Promise<ListComplianceSummariesCommandOutput>;
            listComplianceSummaries(args: ListComplianceSummariesCommandInput, cb: (err: any, data?: ListComplianceSummariesCommandOutput) => void): void;
            listComplianceSummaries(args: ListComplianceSummariesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListComplianceSummariesCommandOutput) => void): void;
            /**
                * <p>Information about approval reviews for a version of a change template in Change Manager.</p>
                */
            listDocumentMetadataHistory(args: ListDocumentMetadataHistoryCommandInput, options?: __HttpHandlerOptions): Promise<ListDocumentMetadataHistoryCommandOutput>;
            listDocumentMetadataHistory(args: ListDocumentMetadataHistoryCommandInput, cb: (err: any, data?: ListDocumentMetadataHistoryCommandOutput) => void): void;
            listDocumentMetadataHistory(args: ListDocumentMetadataHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDocumentMetadataHistoryCommandOutput) => void): void;
            /**
                * <p>Returns all Systems Manager (SSM) documents in the current Amazon Web Services account and Amazon Web Services Region. You can
                *    limit the results of this request by using a filter.</p>
                */
            listDocuments(args: ListDocumentsCommandInput, options?: __HttpHandlerOptions): Promise<ListDocumentsCommandOutput>;
            listDocuments(args: ListDocumentsCommandInput, cb: (err: any, data?: ListDocumentsCommandOutput) => void): void;
            listDocuments(args: ListDocumentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDocumentsCommandOutput) => void): void;
            /**
                * <p>List all versions for a document.</p>
                */
            listDocumentVersions(args: ListDocumentVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListDocumentVersionsCommandOutput>;
            listDocumentVersions(args: ListDocumentVersionsCommandInput, cb: (err: any, data?: ListDocumentVersionsCommandOutput) => void): void;
            listDocumentVersions(args: ListDocumentVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDocumentVersionsCommandOutput) => void): void;
            /**
                * <p>A list of inventory items returned by the request.</p>
                */
            listInventoryEntries(args: ListInventoryEntriesCommandInput, options?: __HttpHandlerOptions): Promise<ListInventoryEntriesCommandOutput>;
            listInventoryEntries(args: ListInventoryEntriesCommandInput, cb: (err: any, data?: ListInventoryEntriesCommandOutput) => void): void;
            listInventoryEntries(args: ListInventoryEntriesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListInventoryEntriesCommandOutput) => void): void;
            /**
                * <p>Returns a list of all OpsItem events in the current Amazon Web Services Region and Amazon Web Services account. You can
                *    limit the results to events associated with specific OpsItems by specifying a filter.</p>
                */
            listOpsItemEvents(args: ListOpsItemEventsCommandInput, options?: __HttpHandlerOptions): Promise<ListOpsItemEventsCommandOutput>;
            listOpsItemEvents(args: ListOpsItemEventsCommandInput, cb: (err: any, data?: ListOpsItemEventsCommandOutput) => void): void;
            listOpsItemEvents(args: ListOpsItemEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOpsItemEventsCommandOutput) => void): void;
            /**
                * <p>Lists all related-item resources associated with a Systems Manager OpsCenter OpsItem. OpsCenter is a
                *    capability of Amazon Web Services Systems Manager.</p>
                */
            listOpsItemRelatedItems(args: ListOpsItemRelatedItemsCommandInput, options?: __HttpHandlerOptions): Promise<ListOpsItemRelatedItemsCommandOutput>;
            listOpsItemRelatedItems(args: ListOpsItemRelatedItemsCommandInput, cb: (err: any, data?: ListOpsItemRelatedItemsCommandOutput) => void): void;
            listOpsItemRelatedItems(args: ListOpsItemRelatedItemsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOpsItemRelatedItemsCommandOutput) => void): void;
            /**
                * <p>Amazon Web Services Systems Manager calls this API operation when displaying all Application Manager OpsMetadata objects or
                *    blobs.</p>
                */
            listOpsMetadata(args: ListOpsMetadataCommandInput, options?: __HttpHandlerOptions): Promise<ListOpsMetadataCommandOutput>;
            listOpsMetadata(args: ListOpsMetadataCommandInput, cb: (err: any, data?: ListOpsMetadataCommandOutput) => void): void;
            listOpsMetadata(args: ListOpsMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOpsMetadataCommandOutput) => void): void;
            /**
                * <p>Returns a resource-level summary count. The summary includes information about compliant and
                *    non-compliant statuses and detailed compliance-item severity counts, according to the filter
                *    criteria you specify.</p>
                */
            listResourceComplianceSummaries(args: ListResourceComplianceSummariesCommandInput, options?: __HttpHandlerOptions): Promise<ListResourceComplianceSummariesCommandOutput>;
            listResourceComplianceSummaries(args: ListResourceComplianceSummariesCommandInput, cb: (err: any, data?: ListResourceComplianceSummariesCommandOutput) => void): void;
            listResourceComplianceSummaries(args: ListResourceComplianceSummariesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListResourceComplianceSummariesCommandOutput) => void): void;
            /**
                * <p>Lists your resource data sync configurations. Includes information about the last time a
                *    sync attempted to start, the last sync status, and the last time a sync successfully
                *    completed.</p>
                *          <p>The number of sync configurations might be too large to return using a single call to
                *     <code>ListResourceDataSync</code>. You can limit the number of sync configurations returned by
                *    using the <code>MaxResults</code> parameter. To determine whether there are more sync
                *    configurations to list, check the value of <code>NextToken</code> in the output. If there are
                *    more sync configurations to list, you can request them by specifying the <code>NextToken</code>
                *    returned in the call to the parameter of a subsequent call. </p>
                */
            listResourceDataSync(args: ListResourceDataSyncCommandInput, options?: __HttpHandlerOptions): Promise<ListResourceDataSyncCommandOutput>;
            listResourceDataSync(args: ListResourceDataSyncCommandInput, cb: (err: any, data?: ListResourceDataSyncCommandOutput) => void): void;
            listResourceDataSync(args: ListResourceDataSyncCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListResourceDataSyncCommandOutput) => void): void;
            /**
                * <p>Returns a list of the tags assigned to the specified resource.</p>
                *          <p>For information about the ID format for each supported resource type, see <a>AddTagsToResource</a>.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Shares a Amazon Web Services Systems Manager document (SSM document)publicly or privately. If you share a document
                *    privately, you must specify the Amazon Web Services user account IDs for those people who can use the
                *    document. If you share a document publicly, you must specify <i>All</i> as the
                *    account ID.</p>
                */
            modifyDocumentPermission(args: ModifyDocumentPermissionCommandInput, options?: __HttpHandlerOptions): Promise<ModifyDocumentPermissionCommandOutput>;
            modifyDocumentPermission(args: ModifyDocumentPermissionCommandInput, cb: (err: any, data?: ModifyDocumentPermissionCommandOutput) => void): void;
            modifyDocumentPermission(args: ModifyDocumentPermissionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ModifyDocumentPermissionCommandOutput) => void): void;
            /**
                * <p>Registers a compliance type and other compliance details on a designated resource. This
                *    operation lets you register custom compliance details with a resource. This call overwrites
                *    existing compliance information on the resource, so you must provide a full list of compliance
                *    items each time that you send the request.</p>
                *          <p>ComplianceType can be one of the following:</p>
                *          <ul>
                *             <li>
                *                <p>ExecutionId: The execution ID when the patch, association, or custom compliance item was
                *      applied.</p>
                *             </li>
                *             <li>
                *                <p>ExecutionType: Specify patch, association, or Custom:<code>string</code>.</p>
                *             </li>
                *             <li>
                *                <p>ExecutionTime. The time the patch, association, or custom compliance item was applied to
                *      the managed node.</p>
                *             </li>
                *             <li>
                *                <p>Id: The patch, association, or custom compliance ID.</p>
                *             </li>
                *             <li>
                *                <p>Title: A title.</p>
                *             </li>
                *             <li>
                *                <p>Status: The status of the compliance item. For example, <code>approved</code> for patches,
                *      or <code>Failed</code> for associations.</p>
                *             </li>
                *             <li>
                *                <p>Severity: A patch severity. For example, <code>critical</code>.</p>
                *             </li>
                *             <li>
                *                <p>DocumentName: An SSM document name. For example, <code>AWS-RunPatchBaseline</code>.</p>
                *             </li>
                *             <li>
                *                <p>DocumentVersion: An SSM document version number. For example, 4.</p>
                *             </li>
                *             <li>
                *                <p>Classification: A patch classification. For example, <code>security updates</code>.</p>
                *             </li>
                *             <li>
                *                <p>PatchBaselineId: A patch baseline ID.</p>
                *             </li>
                *             <li>
                *                <p>PatchSeverity: A patch severity. For example, <code>Critical</code>.</p>
                *             </li>
                *             <li>
                *                <p>PatchState: A patch state. For example, <code>InstancesWithFailedPatches</code>.</p>
                *             </li>
                *             <li>
                *                <p>PatchGroup: The name of a patch group.</p>
                *             </li>
                *             <li>
                *                <p>InstalledTime: The time the association, patch, or custom compliance item was applied to
                *      the resource. Specify the time by using the following format: yyyy-MM-dd'T'HH:mm:ss'Z'</p>
                *             </li>
                *          </ul>
                */
            putComplianceItems(args: PutComplianceItemsCommandInput, options?: __HttpHandlerOptions): Promise<PutComplianceItemsCommandOutput>;
            putComplianceItems(args: PutComplianceItemsCommandInput, cb: (err: any, data?: PutComplianceItemsCommandOutput) => void): void;
            putComplianceItems(args: PutComplianceItemsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutComplianceItemsCommandOutput) => void): void;
            /**
                * <p>Bulk update custom inventory items on one or more managed nodes. The request adds an
                *    inventory item, if it doesn't already exist, or updates an inventory item, if it does
                *    exist.</p>
                */
            putInventory(args: PutInventoryCommandInput, options?: __HttpHandlerOptions): Promise<PutInventoryCommandOutput>;
            putInventory(args: PutInventoryCommandInput, cb: (err: any, data?: PutInventoryCommandOutput) => void): void;
            putInventory(args: PutInventoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutInventoryCommandOutput) => void): void;
            /**
                * <p>Add a parameter to the system.</p>
                */
            putParameter(args: PutParameterCommandInput, options?: __HttpHandlerOptions): Promise<PutParameterCommandOutput>;
            putParameter(args: PutParameterCommandInput, cb: (err: any, data?: PutParameterCommandOutput) => void): void;
            putParameter(args: PutParameterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutParameterCommandOutput) => void): void;
            /**
                * <p>Defines the default patch baseline for the relevant operating system.</p>
                *          <p>To reset the Amazon Web Services-predefined patch baseline as the default, specify the full patch baseline
                *    Amazon Resource Name (ARN) as the baseline ID value. For example, for CentOS, specify
                *     <code>arn:aws:ssm:us-east-2:733109147000:patchbaseline/pb-0574b43a65ea646ed</code> instead of
                *     <code>pb-0574b43a65ea646ed</code>.</p>
                */
            registerDefaultPatchBaseline(args: RegisterDefaultPatchBaselineCommandInput, options?: __HttpHandlerOptions): Promise<RegisterDefaultPatchBaselineCommandOutput>;
            registerDefaultPatchBaseline(args: RegisterDefaultPatchBaselineCommandInput, cb: (err: any, data?: RegisterDefaultPatchBaselineCommandOutput) => void): void;
            registerDefaultPatchBaseline(args: RegisterDefaultPatchBaselineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterDefaultPatchBaselineCommandOutput) => void): void;
            /**
                * <p>Registers a patch baseline for a patch group.</p>
                */
            registerPatchBaselineForPatchGroup(args: RegisterPatchBaselineForPatchGroupCommandInput, options?: __HttpHandlerOptions): Promise<RegisterPatchBaselineForPatchGroupCommandOutput>;
            registerPatchBaselineForPatchGroup(args: RegisterPatchBaselineForPatchGroupCommandInput, cb: (err: any, data?: RegisterPatchBaselineForPatchGroupCommandOutput) => void): void;
            registerPatchBaselineForPatchGroup(args: RegisterPatchBaselineForPatchGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterPatchBaselineForPatchGroupCommandOutput) => void): void;
            /**
                * <p>Registers a target with a maintenance window.</p>
                */
            registerTargetWithMaintenanceWindow(args: RegisterTargetWithMaintenanceWindowCommandInput, options?: __HttpHandlerOptions): Promise<RegisterTargetWithMaintenanceWindowCommandOutput>;
            registerTargetWithMaintenanceWindow(args: RegisterTargetWithMaintenanceWindowCommandInput, cb: (err: any, data?: RegisterTargetWithMaintenanceWindowCommandOutput) => void): void;
            registerTargetWithMaintenanceWindow(args: RegisterTargetWithMaintenanceWindowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterTargetWithMaintenanceWindowCommandOutput) => void): void;
            /**
                * <p>Adds a new task to a maintenance window.</p>
                */
            registerTaskWithMaintenanceWindow(args: RegisterTaskWithMaintenanceWindowCommandInput, options?: __HttpHandlerOptions): Promise<RegisterTaskWithMaintenanceWindowCommandOutput>;
            registerTaskWithMaintenanceWindow(args: RegisterTaskWithMaintenanceWindowCommandInput, cb: (err: any, data?: RegisterTaskWithMaintenanceWindowCommandOutput) => void): void;
            registerTaskWithMaintenanceWindow(args: RegisterTaskWithMaintenanceWindowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterTaskWithMaintenanceWindowCommandOutput) => void): void;
            /**
                * <p>Removes tag keys from the specified resource.</p>
                */
            removeTagsFromResource(args: RemoveTagsFromResourceCommandInput, options?: __HttpHandlerOptions): Promise<RemoveTagsFromResourceCommandOutput>;
            removeTagsFromResource(args: RemoveTagsFromResourceCommandInput, cb: (err: any, data?: RemoveTagsFromResourceCommandOutput) => void): void;
            removeTagsFromResource(args: RemoveTagsFromResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveTagsFromResourceCommandOutput) => void): void;
            /**
                * <p>
                *             <code>ServiceSetting</code> is an account-level setting for an Amazon Web Services service. This setting
                *    defines how a user interacts with or uses a service or a feature of a service. For example, if an
                *    Amazon Web Services service charges money to the account based on feature or service usage, then the Amazon Web Services
                *    service team might create a default setting of "false". This means the user can't use this
                *    feature unless they change the setting to "true" and intentionally opt in for a paid
                *    feature.</p>
                *          <p>Services map a <code>SettingId</code> object to a setting value. Amazon Web Services services teams define
                *    the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>,
                *    but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code>
                *    permission for the setting. Use the <a>GetServiceSetting</a> API operation to view the
                *    current value. Use the <a>UpdateServiceSetting</a> API operation to change the default
                *    setting. </p>
                *          <p>Reset the service setting for the account to the default value as provisioned by the Amazon Web Services
                *    service team. </p>
                */
            resetServiceSetting(args: ResetServiceSettingCommandInput, options?: __HttpHandlerOptions): Promise<ResetServiceSettingCommandOutput>;
            resetServiceSetting(args: ResetServiceSettingCommandInput, cb: (err: any, data?: ResetServiceSettingCommandOutput) => void): void;
            resetServiceSetting(args: ResetServiceSettingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResetServiceSettingCommandOutput) => void): void;
            /**
                * <p>Reconnects a session to a managed node after it has been disconnected. Connections can be
                *    resumed for disconnected sessions, but not terminated sessions.</p>
                *          <note>
                *             <p>This command is primarily for use by client machines to automatically reconnect during
                *     intermittent network issues. It isn't intended for any other use.</p>
                *          </note>
                */
            resumeSession(args: ResumeSessionCommandInput, options?: __HttpHandlerOptions): Promise<ResumeSessionCommandOutput>;
            resumeSession(args: ResumeSessionCommandInput, cb: (err: any, data?: ResumeSessionCommandOutput) => void): void;
            resumeSession(args: ResumeSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResumeSessionCommandOutput) => void): void;
            /**
                * <p>Sends a signal to an Automation execution to change the current behavior or status of the
                *    execution. </p>
                */
            sendAutomationSignal(args: SendAutomationSignalCommandInput, options?: __HttpHandlerOptions): Promise<SendAutomationSignalCommandOutput>;
            sendAutomationSignal(args: SendAutomationSignalCommandInput, cb: (err: any, data?: SendAutomationSignalCommandOutput) => void): void;
            sendAutomationSignal(args: SendAutomationSignalCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendAutomationSignalCommandOutput) => void): void;
            /**
                * <p>Runs commands on one or more managed nodes.</p>
                */
            sendCommand(args: SendCommandCommandInput, options?: __HttpHandlerOptions): Promise<SendCommandCommandOutput>;
            sendCommand(args: SendCommandCommandInput, cb: (err: any, data?: SendCommandCommandOutput) => void): void;
            sendCommand(args: SendCommandCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendCommandCommandOutput) => void): void;
            /**
                * <p>Runs an association immediately and only one time. This operation can be helpful when
                *    troubleshooting associations.</p>
                */
            startAssociationsOnce(args: StartAssociationsOnceCommandInput, options?: __HttpHandlerOptions): Promise<StartAssociationsOnceCommandOutput>;
            startAssociationsOnce(args: StartAssociationsOnceCommandInput, cb: (err: any, data?: StartAssociationsOnceCommandOutput) => void): void;
            startAssociationsOnce(args: StartAssociationsOnceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartAssociationsOnceCommandOutput) => void): void;
            /**
                * <p>Initiates execution of an Automation runbook.</p>
                */
            startAutomationExecution(args: StartAutomationExecutionCommandInput, options?: __HttpHandlerOptions): Promise<StartAutomationExecutionCommandOutput>;
            startAutomationExecution(args: StartAutomationExecutionCommandInput, cb: (err: any, data?: StartAutomationExecutionCommandOutput) => void): void;
            startAutomationExecution(args: StartAutomationExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartAutomationExecutionCommandOutput) => void): void;
            /**
                * <p>Creates a change request for Change Manager. The Automation runbooks specified in the
                *    change request run only after all required approvals for the change request have been
                *    received.</p>
                */
            startChangeRequestExecution(args: StartChangeRequestExecutionCommandInput, options?: __HttpHandlerOptions): Promise<StartChangeRequestExecutionCommandOutput>;
            startChangeRequestExecution(args: StartChangeRequestExecutionCommandInput, cb: (err: any, data?: StartChangeRequestExecutionCommandOutput) => void): void;
            startChangeRequestExecution(args: StartChangeRequestExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartChangeRequestExecutionCommandOutput) => void): void;
            /**
                * <p>Initiates a connection to a target (for example, a managed node) for a Session Manager session.
                *    Returns a URL and token that can be used to open a WebSocket connection for sending input and
                *    receiving outputs.</p>
                *          <note>
                *             <p>Amazon Web Services CLI usage: <code>start-session</code> is an interactive command that requires the Session Manager
                *     plugin to be installed on the client machine making the call. For information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html">Install
                *      the Session Manager plugin for the Amazon Web Services CLI</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *             <p>Amazon Web Services Tools for PowerShell usage: Start-SSMSession isn't currently supported by Amazon Web Services Tools
                *     for PowerShell on Windows local machines.</p>
                *          </note>
                */
            startSession(args: StartSessionCommandInput, options?: __HttpHandlerOptions): Promise<StartSessionCommandOutput>;
            startSession(args: StartSessionCommandInput, cb: (err: any, data?: StartSessionCommandOutput) => void): void;
            startSession(args: StartSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartSessionCommandOutput) => void): void;
            /**
                * <p>Stop an Automation that is currently running.</p>
                */
            stopAutomationExecution(args: StopAutomationExecutionCommandInput, options?: __HttpHandlerOptions): Promise<StopAutomationExecutionCommandOutput>;
            stopAutomationExecution(args: StopAutomationExecutionCommandInput, cb: (err: any, data?: StopAutomationExecutionCommandOutput) => void): void;
            stopAutomationExecution(args: StopAutomationExecutionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopAutomationExecutionCommandOutput) => void): void;
            /**
                * <p>Permanently ends a session and closes the data connection between the Session Manager client and
                *    SSM Agent on the managed node. A terminated session can't be resumed.</p>
                */
            terminateSession(args: TerminateSessionCommandInput, options?: __HttpHandlerOptions): Promise<TerminateSessionCommandOutput>;
            terminateSession(args: TerminateSessionCommandInput, cb: (err: any, data?: TerminateSessionCommandOutput) => void): void;
            terminateSession(args: TerminateSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TerminateSessionCommandOutput) => void): void;
            /**
                * <p>Remove a label or labels from a parameter.</p>
                */
            unlabelParameterVersion(args: UnlabelParameterVersionCommandInput, options?: __HttpHandlerOptions): Promise<UnlabelParameterVersionCommandOutput>;
            unlabelParameterVersion(args: UnlabelParameterVersionCommandInput, cb: (err: any, data?: UnlabelParameterVersionCommandOutput) => void): void;
            unlabelParameterVersion(args: UnlabelParameterVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UnlabelParameterVersionCommandOutput) => void): void;
            /**
                * <p>Updates an association. You can update the association name and version, the document
                *    version, schedule, parameters, and Amazon Simple Storage Service (Amazon S3) output. When you
                *    call <code>UpdateAssociation</code>, the system removes all optional parameters from the request
                *    and overwrites the association with null values for those parameters. This is by design. You must
                *    specify all optional parameters in the call, even if you are not changing the parameters. This
                *    includes the <code>Name</code> parameter. Before calling this API action, we recommend that you
                *    call the <a>DescribeAssociation</a> API operation and make a note of all optional
                *    parameters required for your <code>UpdateAssociation</code> call.</p>
                *
                *          <p>In order to call this API operation, your Identity and Access Management (IAM) user
                *    account, group, or role must be configured with permission to call the <a>DescribeAssociation</a> API operation. If you don't have permission to call
                *     <code>DescribeAssociation</code>, then you receive the following error: <code>An error occurred
                *     (AccessDeniedException) when calling the UpdateAssociation operation: User: <user_arn>
                *     isn't authorized to perform: ssm:DescribeAssociation on resource:
                *    <resource_arn></code>
                *          </p>
                *          <important>
                *             <p>When you update an association, the association immediately runs against the specified
                *     targets. You can add the <code>ApplyOnlyAtCronInterval</code> parameter to run the association
                *     during the next schedule run.</p>
                *          </important>
                */
            updateAssociation(args: UpdateAssociationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAssociationCommandOutput>;
            updateAssociation(args: UpdateAssociationCommandInput, cb: (err: any, data?: UpdateAssociationCommandOutput) => void): void;
            updateAssociation(args: UpdateAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAssociationCommandOutput) => void): void;
            /**
                * <p>Updates the status of the Amazon Web Services Systems Manager document (SSM document) associated with the specified
                *    managed node.</p>
                *          <p>
                *             <code>UpdateAssociationStatus</code> is primarily used by the Amazon Web Services Systems Manager Agent (SSM Agent) to
                *    report status updates about your associations and is only used for associations created with the
                *     <code>InstanceId</code> legacy parameter.</p>
                */
            updateAssociationStatus(args: UpdateAssociationStatusCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAssociationStatusCommandOutput>;
            updateAssociationStatus(args: UpdateAssociationStatusCommandInput, cb: (err: any, data?: UpdateAssociationStatusCommandOutput) => void): void;
            updateAssociationStatus(args: UpdateAssociationStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAssociationStatusCommandOutput) => void): void;
            /**
                * <p>Updates one or more values for an SSM document.</p>
                */
            updateDocument(args: UpdateDocumentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDocumentCommandOutput>;
            updateDocument(args: UpdateDocumentCommandInput, cb: (err: any, data?: UpdateDocumentCommandOutput) => void): void;
            updateDocument(args: UpdateDocumentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDocumentCommandOutput) => void): void;
            /**
                * <p>Set the default version of a document. </p>
                *          <note>
                *             <p>If you change a document version for a State Manager association, Systems Manager immediately runs
                *     the association unless you previously specifed the <code>apply-only-at-cron-interval</code>
                *     parameter.</p>
                *          </note>
                */
            updateDocumentDefaultVersion(args: UpdateDocumentDefaultVersionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDocumentDefaultVersionCommandOutput>;
            updateDocumentDefaultVersion(args: UpdateDocumentDefaultVersionCommandInput, cb: (err: any, data?: UpdateDocumentDefaultVersionCommandOutput) => void): void;
            updateDocumentDefaultVersion(args: UpdateDocumentDefaultVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDocumentDefaultVersionCommandOutput) => void): void;
            /**
                * <p>Updates information related to approval reviews for a specific version of a change template
                *    in Change Manager.</p>
                */
            updateDocumentMetadata(args: UpdateDocumentMetadataCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDocumentMetadataCommandOutput>;
            updateDocumentMetadata(args: UpdateDocumentMetadataCommandInput, cb: (err: any, data?: UpdateDocumentMetadataCommandOutput) => void): void;
            updateDocumentMetadata(args: UpdateDocumentMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDocumentMetadataCommandOutput) => void): void;
            /**
                * <p>Updates an existing maintenance window. Only specified parameters are modified.</p>
                *          <note>
                *             <p>The value you specify for <code>Duration</code> determines the specific end time for the
                *     maintenance window based on the time it begins. No maintenance window tasks are permitted to
                *     start after the resulting endtime minus the number of hours you specify for <code>Cutoff</code>.
                *     For example, if the maintenance window starts at 3 PM, the duration is three hours, and the
                *     value you specify for <code>Cutoff</code> is one hour, no maintenance window tasks can start
                *     after 5 PM.</p>
                *          </note>
                */
            updateMaintenanceWindow(args: UpdateMaintenanceWindowCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMaintenanceWindowCommandOutput>;
            updateMaintenanceWindow(args: UpdateMaintenanceWindowCommandInput, cb: (err: any, data?: UpdateMaintenanceWindowCommandOutput) => void): void;
            updateMaintenanceWindow(args: UpdateMaintenanceWindowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMaintenanceWindowCommandOutput) => void): void;
            /**
                * <p>Modifies the target of an existing maintenance window. You
                *    can change the following:</p>
                *
                *          <ul>
                *             <li>
                *                <p>Name</p>
                *             </li>
                *             <li>
                *                <p>Description</p>
                *             </li>
                *             <li>
                *                <p>Owner</p>
                *             </li>
                *             <li>
                *                <p>IDs for an ID target</p>
                *             </li>
                *             <li>
                *                <p>Tags for a Tag target</p>
                *             </li>
                *             <li>
                *                <p>From any supported tag type to another. The three supported tag types are ID target, Tag
                *      target, and resource group. For more information, see <a>Target</a>.</p>
                *             </li>
                *          </ul>
                *          <note>
                *             <p>If a parameter is null, then the corresponding field isn't modified.</p>
                *          </note>
                */
            updateMaintenanceWindowTarget(args: UpdateMaintenanceWindowTargetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMaintenanceWindowTargetCommandOutput>;
            updateMaintenanceWindowTarget(args: UpdateMaintenanceWindowTargetCommandInput, cb: (err: any, data?: UpdateMaintenanceWindowTargetCommandOutput) => void): void;
            updateMaintenanceWindowTarget(args: UpdateMaintenanceWindowTargetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMaintenanceWindowTargetCommandOutput) => void): void;
            /**
                * <p>Modifies a task assigned to a maintenance window. You can't change the task type, but you
                *    can change the following values:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>TaskARN</code>. For example, you can change a <code>RUN_COMMAND</code> task from
                *       <code>AWS-RunPowerShellScript</code> to <code>AWS-RunShellScript</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>ServiceRoleArn</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>TaskInvocationParameters</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Priority</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MaxConcurrency</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MaxErrors</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <note>
                *             <p>One or more targets must be specified for maintenance window Run Command-type tasks.
                *     Depending on the task, targets are optional for other maintenance window task types (Automation,
                *      Lambda, and Step Functions). For more information about running tasks
                *     that don't specify targets, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">Registering
                *      maintenance window tasks without targets</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          </note>
                *          <p>If the value for a parameter in <code>UpdateMaintenanceWindowTask</code> is null, then the
                *    corresponding field isn't modified. If you set <code>Replace</code> to true, then all fields
                *    required by the <a>RegisterTaskWithMaintenanceWindow</a> operation are required for
                *    this request. Optional fields that aren't specified are set to null.</p>
                *          <important>
                *             <p>When you update a maintenance window task that has options specified in
                *      <code>TaskInvocationParameters</code>, you must provide again all the
                *      <code>TaskInvocationParameters</code> values that you want to retain. The values you don't
                *     specify again are removed. For example, suppose that when you registered a Run Command task, you
                *     specified <code>TaskInvocationParameters</code> values for <code>Comment</code>,
                *      <code>NotificationConfig</code>, and <code>OutputS3BucketName</code>. If you update the
                *     maintenance window task and specify only a different <code>OutputS3BucketName</code> value, the
                *     values for <code>Comment</code> and <code>NotificationConfig</code> are removed.</p>
                *          </important>
                */
            updateMaintenanceWindowTask(args: UpdateMaintenanceWindowTaskCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMaintenanceWindowTaskCommandOutput>;
            updateMaintenanceWindowTask(args: UpdateMaintenanceWindowTaskCommandInput, cb: (err: any, data?: UpdateMaintenanceWindowTaskCommandOutput) => void): void;
            updateMaintenanceWindowTask(args: UpdateMaintenanceWindowTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMaintenanceWindowTaskCommandOutput) => void): void;
            /**
                * <p>Changes the Identity and Access Management (IAM) role that is assigned to the
                *    on-premises server, edge device, or virtual machines (VM). IAM roles are first
                *    assigned to these hybrid nodes during the activation process. For more information, see <a>CreateActivation</a>.</p>
                */
            updateManagedInstanceRole(args: UpdateManagedInstanceRoleCommandInput, options?: __HttpHandlerOptions): Promise<UpdateManagedInstanceRoleCommandOutput>;
            updateManagedInstanceRole(args: UpdateManagedInstanceRoleCommandInput, cb: (err: any, data?: UpdateManagedInstanceRoleCommandOutput) => void): void;
            updateManagedInstanceRole(args: UpdateManagedInstanceRoleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateManagedInstanceRoleCommandOutput) => void): void;
            /**
                * <p>Edit or change an OpsItem. You must have permission in Identity and Access Management (IAM) to update an OpsItem. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
                *     OpsCenter</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          <p>Operations engineers and IT professionals use Amazon Web Services Systems Manager OpsCenter to view, investigate, and
                *    remediate operational issues impacting the performance and health of their Amazon Web Services resources. For
                *    more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">OpsCenter</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>. </p>
                */
            updateOpsItem(args: UpdateOpsItemCommandInput, options?: __HttpHandlerOptions): Promise<UpdateOpsItemCommandOutput>;
            updateOpsItem(args: UpdateOpsItemCommandInput, cb: (err: any, data?: UpdateOpsItemCommandOutput) => void): void;
            updateOpsItem(args: UpdateOpsItemCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateOpsItemCommandOutput) => void): void;
            /**
                * <p>Amazon Web Services Systems Manager calls this API operation when you edit OpsMetadata in Application Manager.</p>
                */
            updateOpsMetadata(args: UpdateOpsMetadataCommandInput, options?: __HttpHandlerOptions): Promise<UpdateOpsMetadataCommandOutput>;
            updateOpsMetadata(args: UpdateOpsMetadataCommandInput, cb: (err: any, data?: UpdateOpsMetadataCommandOutput) => void): void;
            updateOpsMetadata(args: UpdateOpsMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateOpsMetadataCommandOutput) => void): void;
            /**
                * <p>Modifies an existing patch baseline. Fields not specified in the request are left
                *    unchanged.</p>
                *          <note>
                *             <p>For information about valid key-value pairs in <code>PatchFilters</code> for each supported
                *     operating system type, see <a>PatchFilter</a>.</p>
                *          </note>
                */
            updatePatchBaseline(args: UpdatePatchBaselineCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePatchBaselineCommandOutput>;
            updatePatchBaseline(args: UpdatePatchBaselineCommandInput, cb: (err: any, data?: UpdatePatchBaselineCommandOutput) => void): void;
            updatePatchBaseline(args: UpdatePatchBaselineCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePatchBaselineCommandOutput) => void): void;
            /**
                * <p>Update a resource data sync. After you create a resource data sync for a Region, you can't
                *    change the account options for that sync. For example, if you create a sync in the us-east-2
                *    (Ohio) Region and you choose the <code>Include only the current account</code> option, you can't
                *    edit that sync later and choose the <code>Include all accounts from my Organizations
                *     configuration</code> option. Instead, you must delete the first resource data sync, and create a
                *    new one.</p>
                *          <note>
                *             <p>This API operation only supports a resource data sync that was created with a
                *     SyncFromSource <code>SyncType</code>.</p>
                *          </note>
                */
            updateResourceDataSync(args: UpdateResourceDataSyncCommandInput, options?: __HttpHandlerOptions): Promise<UpdateResourceDataSyncCommandOutput>;
            updateResourceDataSync(args: UpdateResourceDataSyncCommandInput, cb: (err: any, data?: UpdateResourceDataSyncCommandOutput) => void): void;
            updateResourceDataSync(args: UpdateResourceDataSyncCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateResourceDataSyncCommandOutput) => void): void;
            /**
                * <p>
                *             <code>ServiceSetting</code> is an account-level setting for an Amazon Web Services service. This setting
                *    defines how a user interacts with or uses a service or a feature of a service. For example, if an
                *    Amazon Web Services service charges money to the account based on feature or service usage, then the Amazon Web Services
                *    service team might create a default setting of "false". This means the user can't use this
                *    feature unless they change the setting to "true" and intentionally opt in for a paid
                *    feature.</p>
                *          <p>Services map a <code>SettingId</code> object to a setting value. Amazon Web Services services teams define
                *    the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>,
                *    but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code>
                *    permission for the setting. Use the <a>GetServiceSetting</a> API operation to view the
                *    current value. Or, use the <a>ResetServiceSetting</a> to change the value back to the
                *    original value defined by the Amazon Web Services service team.</p>
                *          <p>Update the service setting for the account. </p>
                */
            updateServiceSetting(args: UpdateServiceSettingCommandInput, options?: __HttpHandlerOptions): Promise<UpdateServiceSettingCommandOutput>;
            updateServiceSetting(args: UpdateServiceSettingCommandInput, cb: (err: any, data?: UpdateServiceSettingCommandOutput) => void): void;
            updateServiceSetting(args: UpdateServiceSettingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateServiceSettingCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/AddTagsToResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AddTagsToResourceRequest, AddTagsToResourceResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface AddTagsToResourceCommandInput extends AddTagsToResourceRequest {
    }
    export interface AddTagsToResourceCommandOutput extends AddTagsToResourceResult, __MetadataBearer {
    }
    /**
        * <p>Adds or overwrites one or more tags for the specified resource. Tags are metadata that you
        *    can assign to your automations, documents, managed nodes, maintenance windows, Parameter Store
        *    parameters, and patch baselines. Tags enable you to categorize your resources in different ways,
        *    for example, by purpose, owner, or environment. Each tag consists of a key and an optional value,
        *    both of which you define. For example, you could define a set of tags for your account's managed
        *    nodes that helps you track each node's owner and stack level. For example:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>Key=Owner,Value=DbAdmin</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Key=Owner,Value=SysAdmin</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Key=Owner,Value=Dev</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Key=Stack,Value=Production</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Key=Stack,Value=Pre-Production</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Key=Stack,Value=Test</code>
        *                </p>
        *             </li>
        *          </ul>
        *          <p>Most resources can have a maximum of 50 tags. Automations can have a maximum of 5
        *    tags.</p>
        *          <p>We recommend that you devise a set of tag keys that meets your needs for each resource type.
        *    Using a consistent set of tag keys makes it easier for you to manage your resources. You can
        *    search and filter the resources based on the tags you add. Tags don't have any semantic meaning
        *    to and are interpreted strictly as a string of characters.</p>
        *          <p>For more information about using tags with Amazon Elastic Compute Cloud (Amazon EC2) instances, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html">Tagging your Amazon EC2
        *     resources</a> in the <i>Amazon EC2 User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, AddTagsToResourceCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, AddTagsToResourceCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new AddTagsToResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddTagsToResourceCommandInput} for command's `input` shape.
        * @see {@link AddTagsToResourceCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class AddTagsToResourceCommand extends $Command<AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput, SSMClientResolvedConfig> {
            readonly input: AddTagsToResourceCommandInput;
            constructor(input: AddTagsToResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/AssociateOpsItemRelatedItemCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateOpsItemRelatedItemRequest, AssociateOpsItemRelatedItemResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface AssociateOpsItemRelatedItemCommandInput extends AssociateOpsItemRelatedItemRequest {
    }
    export interface AssociateOpsItemRelatedItemCommandOutput extends AssociateOpsItemRelatedItemResponse, __MetadataBearer {
    }
    /**
        * <p>Associates a related item to a Systems Manager OpsCenter OpsItem. For example, you can associate an
        *    Incident Manager incident or analysis with an OpsItem. Incident Manager and OpsCenter are capabilities of
        *    Amazon Web Services Systems Manager.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, AssociateOpsItemRelatedItemCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, AssociateOpsItemRelatedItemCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new AssociateOpsItemRelatedItemCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateOpsItemRelatedItemCommandInput} for command's `input` shape.
        * @see {@link AssociateOpsItemRelatedItemCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class AssociateOpsItemRelatedItemCommand extends $Command<AssociateOpsItemRelatedItemCommandInput, AssociateOpsItemRelatedItemCommandOutput, SSMClientResolvedConfig> {
            readonly input: AssociateOpsItemRelatedItemCommandInput;
            constructor(input: AssociateOpsItemRelatedItemCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateOpsItemRelatedItemCommandInput, AssociateOpsItemRelatedItemCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CancelCommandCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelCommandRequest, CancelCommandResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface CancelCommandCommandInput extends CancelCommandRequest {
    }
    export interface CancelCommandCommandOutput extends CancelCommandResult, __MetadataBearer {
    }
    /**
        * <p>Attempts to cancel the command specified by the Command ID. There is no guarantee that the
        *    command will be terminated and the underlying process stopped.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, CancelCommandCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, CancelCommandCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new CancelCommandCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelCommandCommandInput} for command's `input` shape.
        * @see {@link CancelCommandCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class CancelCommandCommand extends $Command<CancelCommandCommandInput, CancelCommandCommandOutput, SSMClientResolvedConfig> {
            readonly input: CancelCommandCommandInput;
            constructor(input: CancelCommandCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelCommandCommandInput, CancelCommandCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CancelMaintenanceWindowExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CancelMaintenanceWindowExecutionRequest, CancelMaintenanceWindowExecutionResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface CancelMaintenanceWindowExecutionCommandInput extends CancelMaintenanceWindowExecutionRequest {
    }
    export interface CancelMaintenanceWindowExecutionCommandOutput extends CancelMaintenanceWindowExecutionResult, __MetadataBearer {
    }
    /**
        * <p>Stops a maintenance window execution that is already in progress and cancels any tasks in
        *    the window that haven't already starting running. Tasks already in progress will continue to
        *    completion.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, CancelMaintenanceWindowExecutionCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, CancelMaintenanceWindowExecutionCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new CancelMaintenanceWindowExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CancelMaintenanceWindowExecutionCommandInput} for command's `input` shape.
        * @see {@link CancelMaintenanceWindowExecutionCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class CancelMaintenanceWindowExecutionCommand extends $Command<CancelMaintenanceWindowExecutionCommandInput, CancelMaintenanceWindowExecutionCommandOutput, SSMClientResolvedConfig> {
            readonly input: CancelMaintenanceWindowExecutionCommandInput;
            constructor(input: CancelMaintenanceWindowExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelMaintenanceWindowExecutionCommandInput, CancelMaintenanceWindowExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateActivationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateActivationRequest, CreateActivationResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface CreateActivationCommandInput extends CreateActivationRequest {
    }
    export interface CreateActivationCommandOutput extends CreateActivationResult, __MetadataBearer {
    }
    /**
        * <p>Generates an activation code and activation ID you can use to register your on-premises
        *    servers, edge devices, or virtual machine (VM) with Amazon Web Services Systems Manager. Registering these machines with
        *    Systems Manager makes it possible to manage them using Systems Manager capabilities. You use the activation code and
        *    ID when installing SSM Agent on machines in your hybrid environment. For more information about
        *    requirements for managing on-premises machines using Systems Manager, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html">Setting up
        *     Amazon Web Services Systems Manager for hybrid environments</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
        *          <note>
        *             <p>Amazon Elastic Compute Cloud (Amazon EC2) instances, edge devices, and on-premises servers and VMs that are
        *     configured for Systems Manager are all called <i>managed nodes</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, CreateActivationCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, CreateActivationCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new CreateActivationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateActivationCommandInput} for command's `input` shape.
        * @see {@link CreateActivationCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class CreateActivationCommand extends $Command<CreateActivationCommandInput, CreateActivationCommandOutput, SSMClientResolvedConfig> {
            readonly input: CreateActivationCommandInput;
            constructor(input: CreateActivationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateActivationCommandInput, CreateActivationCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateAssociationBatchCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAssociationBatchRequest, CreateAssociationBatchResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface CreateAssociationBatchCommandInput extends CreateAssociationBatchRequest {
    }
    export interface CreateAssociationBatchCommandOutput extends CreateAssociationBatchResult, __MetadataBearer {
    }
    /**
        * <p>Associates the specified Amazon Web Services Systems Manager document (SSM document) with the specified managed nodes
        *    or targets.</p>
        *          <p>When you associate a document with one or more managed nodes using IDs or tags, Amazon Web Services Systems Manager
        *    Agent (SSM Agent) running on the managed node processes the document and configures the node as
        *    specified.</p>
        *          <p>If you associate a document with a managed node that already has an associated document, the
        *    system returns the AssociationAlreadyExists exception.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, CreateAssociationBatchCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, CreateAssociationBatchCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new CreateAssociationBatchCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAssociationBatchCommandInput} for command's `input` shape.
        * @see {@link CreateAssociationBatchCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class CreateAssociationBatchCommand extends $Command<CreateAssociationBatchCommandInput, CreateAssociationBatchCommandOutput, SSMClientResolvedConfig> {
            readonly input: CreateAssociationBatchCommandInput;
            constructor(input: CreateAssociationBatchCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAssociationBatchCommandInput, CreateAssociationBatchCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateAssociationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAssociationRequest, CreateAssociationResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface CreateAssociationCommandInput extends CreateAssociationRequest {
    }
    export interface CreateAssociationCommandOutput extends CreateAssociationResult, __MetadataBearer {
    }
    /**
        * <p>A State Manager association defines the state that you want to maintain on your managed
        *    nodes. For example, an association can specify that anti-virus software must be installed and
        *    running on your managed nodes, or that certain ports must be closed. For static targets, the
        *    association specifies a schedule for when the configuration is reapplied. For dynamic targets,
        *    such as an Amazon Web Services resource group or an Amazon Web Services autoscaling group, State Manager, a capability of
        *    Amazon Web Services Systems Manager applies the configuration when new managed nodes are added to the group. The
        *    association also specifies actions to take when applying the configuration. For example, an
        *    association for anti-virus software might run once a day. If the software isn't installed, then
        *    State Manager installs it. If the software is installed, but the service isn't running, then the
        *    association might instruct State Manager to start the service. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, CreateAssociationCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, CreateAssociationCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new CreateAssociationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAssociationCommandInput} for command's `input` shape.
        * @see {@link CreateAssociationCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class CreateAssociationCommand extends $Command<CreateAssociationCommandInput, CreateAssociationCommandOutput, SSMClientResolvedConfig> {
            readonly input: CreateAssociationCommandInput;
            constructor(input: CreateAssociationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAssociationCommandInput, CreateAssociationCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateDocumentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateDocumentRequest, CreateDocumentResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface CreateDocumentCommandInput extends CreateDocumentRequest {
    }
    export interface CreateDocumentCommandOutput extends CreateDocumentResult, __MetadataBearer {
    }
    /**
        * <p>Creates a Amazon Web Services Systems Manager (SSM document). An SSM document defines the actions that Systems Manager performs
        *    on your managed nodes. For more information about SSM documents, including information about
        *    supported schemas, features, and syntax, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-ssm-docs.html">Amazon Web Services Systems Manager Documents</a> in the
        *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, CreateDocumentCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, CreateDocumentCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new CreateDocumentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDocumentCommandInput} for command's `input` shape.
        * @see {@link CreateDocumentCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class CreateDocumentCommand extends $Command<CreateDocumentCommandInput, CreateDocumentCommandOutput, SSMClientResolvedConfig> {
            readonly input: CreateDocumentCommandInput;
            constructor(input: CreateDocumentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDocumentCommandInput, CreateDocumentCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateMaintenanceWindowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateMaintenanceWindowRequest, CreateMaintenanceWindowResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface CreateMaintenanceWindowCommandInput extends CreateMaintenanceWindowRequest {
    }
    export interface CreateMaintenanceWindowCommandOutput extends CreateMaintenanceWindowResult, __MetadataBearer {
    }
    /**
        * <p>Creates a new maintenance window.</p>
        *          <note>
        *             <p>The value you specify for <code>Duration</code> determines the specific end time for the
        *     maintenance window based on the time it begins. No maintenance window tasks are permitted to
        *     start after the resulting endtime minus the number of hours you specify for <code>Cutoff</code>.
        *     For example, if the maintenance window starts at 3 PM, the duration is three hours, and the
        *     value you specify for <code>Cutoff</code> is one hour, no maintenance window tasks can start
        *     after 5 PM.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, CreateMaintenanceWindowCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, CreateMaintenanceWindowCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new CreateMaintenanceWindowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateMaintenanceWindowCommandInput} for command's `input` shape.
        * @see {@link CreateMaintenanceWindowCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class CreateMaintenanceWindowCommand extends $Command<CreateMaintenanceWindowCommandInput, CreateMaintenanceWindowCommandOutput, SSMClientResolvedConfig> {
            readonly input: CreateMaintenanceWindowCommandInput;
            constructor(input: CreateMaintenanceWindowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateMaintenanceWindowCommandInput, CreateMaintenanceWindowCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateOpsItemCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateOpsItemRequest, CreateOpsItemResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface CreateOpsItemCommandInput extends CreateOpsItemRequest {
    }
    export interface CreateOpsItemCommandOutput extends CreateOpsItemResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new OpsItem. You must have permission in Identity and Access Management (IAM) to create a new OpsItem. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
        *     OpsCenter</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        *          <p>Operations engineers and IT professionals use Amazon Web Services Systems Manager OpsCenter to view, investigate, and
        *    remediate operational issues impacting the performance and health of their Amazon Web Services resources. For
        *    more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">Amazon Web Services Systems Manager OpsCenter</a> in the
        *     <i>Amazon Web Services Systems Manager User Guide</i>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, CreateOpsItemCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, CreateOpsItemCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new CreateOpsItemCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateOpsItemCommandInput} for command's `input` shape.
        * @see {@link CreateOpsItemCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class CreateOpsItemCommand extends $Command<CreateOpsItemCommandInput, CreateOpsItemCommandOutput, SSMClientResolvedConfig> {
            readonly input: CreateOpsItemCommandInput;
            constructor(input: CreateOpsItemCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateOpsItemCommandInput, CreateOpsItemCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateOpsMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateOpsMetadataRequest, CreateOpsMetadataResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface CreateOpsMetadataCommandInput extends CreateOpsMetadataRequest {
    }
    export interface CreateOpsMetadataCommandOutput extends CreateOpsMetadataResult, __MetadataBearer {
    }
    /**
        * <p>If you create a new application in Application Manager, Amazon Web Services Systems Manager calls this API operation to specify
        *    information about the new application, including the application type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, CreateOpsMetadataCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, CreateOpsMetadataCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new CreateOpsMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateOpsMetadataCommandInput} for command's `input` shape.
        * @see {@link CreateOpsMetadataCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class CreateOpsMetadataCommand extends $Command<CreateOpsMetadataCommandInput, CreateOpsMetadataCommandOutput, SSMClientResolvedConfig> {
            readonly input: CreateOpsMetadataCommandInput;
            constructor(input: CreateOpsMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateOpsMetadataCommandInput, CreateOpsMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreatePatchBaselineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreatePatchBaselineRequest, CreatePatchBaselineResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface CreatePatchBaselineCommandInput extends CreatePatchBaselineRequest {
    }
    export interface CreatePatchBaselineCommandOutput extends CreatePatchBaselineResult, __MetadataBearer {
    }
    /**
        * <p>Creates a patch baseline.</p>
        *          <note>
        *             <p>For information about valid key-value pairs in <code>PatchFilters</code> for each supported
        *     operating system type, see <a>PatchFilter</a>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, CreatePatchBaselineCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, CreatePatchBaselineCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new CreatePatchBaselineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePatchBaselineCommandInput} for command's `input` shape.
        * @see {@link CreatePatchBaselineCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class CreatePatchBaselineCommand extends $Command<CreatePatchBaselineCommandInput, CreatePatchBaselineCommandOutput, SSMClientResolvedConfig> {
            readonly input: CreatePatchBaselineCommandInput;
            constructor(input: CreatePatchBaselineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePatchBaselineCommandInput, CreatePatchBaselineCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateResourceDataSyncCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateResourceDataSyncRequest, CreateResourceDataSyncResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface CreateResourceDataSyncCommandInput extends CreateResourceDataSyncRequest {
    }
    export interface CreateResourceDataSyncCommandOutput extends CreateResourceDataSyncResult, __MetadataBearer {
    }
    /**
        * <p>A resource data sync helps you view data from multiple sources in a single location.
        *    Amazon Web Services Systems Manager offers two types of resource data sync: <code>SyncToDestination</code> and
        *     <code>SyncFromSource</code>.</p>
        *          <p>You can configure Systems Manager Inventory to use the <code>SyncToDestination</code> type to
        *    synchronize Inventory data from multiple Amazon Web Services Regions to a single Amazon Simple Storage Service (Amazon S3) bucket. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-datasync.html">Configuring resource data
        *     sync for Inventory</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        *          <p>You can configure Systems Manager Explorer to use the <code>SyncFromSource</code> type to synchronize
        *    operational work items (OpsItems) and operational data (OpsData) from multiple Amazon Web Services Regions to a
        *    single Amazon S3 bucket. This type can synchronize OpsItems and OpsData from multiple
        *    Amazon Web Services accounts and Amazon Web Services Regions or <code>EntireOrganization</code> by using Organizations. For more
        *    information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resource-data-sync.html">Setting up Systems Manager
        *     Explorer to display data from multiple accounts and Regions</a> in the
        *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        *          <p>A resource data sync is an asynchronous operation that returns immediately. After a
        *    successful initial sync is completed, the system continuously syncs data. To check the status of
        *    a sync, use the <a>ListResourceDataSync</a>.</p>
        *          <note>
        *             <p>By default, data isn't encrypted in Amazon S3. We strongly recommend that you
        *     enable encryption in Amazon S3 to ensure secure data storage. We also recommend that you
        *     secure access to the Amazon S3 bucket by creating a restrictive bucket policy. </p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, CreateResourceDataSyncCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, CreateResourceDataSyncCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new CreateResourceDataSyncCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateResourceDataSyncCommandInput} for command's `input` shape.
        * @see {@link CreateResourceDataSyncCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class CreateResourceDataSyncCommand extends $Command<CreateResourceDataSyncCommandInput, CreateResourceDataSyncCommandOutput, SSMClientResolvedConfig> {
            readonly input: CreateResourceDataSyncCommandInput;
            constructor(input: CreateResourceDataSyncCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateResourceDataSyncCommandInput, CreateResourceDataSyncCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteActivationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteActivationRequest, DeleteActivationResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DeleteActivationCommandInput extends DeleteActivationRequest {
    }
    export interface DeleteActivationCommandOutput extends DeleteActivationResult, __MetadataBearer {
    }
    /**
        * <p>Deletes an activation. You aren't required to delete an activation. If you delete an
        *    activation, you can no longer use it to register additional managed nodes. Deleting an activation
        *    doesn't de-register managed nodes. You must manually de-register managed nodes.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DeleteActivationCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DeleteActivationCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DeleteActivationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteActivationCommandInput} for command's `input` shape.
        * @see {@link DeleteActivationCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DeleteActivationCommand extends $Command<DeleteActivationCommandInput, DeleteActivationCommandOutput, SSMClientResolvedConfig> {
            readonly input: DeleteActivationCommandInput;
            constructor(input: DeleteActivationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteActivationCommandInput, DeleteActivationCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteAssociationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAssociationRequest, DeleteAssociationResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DeleteAssociationCommandInput extends DeleteAssociationRequest {
    }
    export interface DeleteAssociationCommandOutput extends DeleteAssociationResult, __MetadataBearer {
    }
    /**
        * <p>Disassociates the specified Amazon Web Services Systems Manager document (SSM document) from the specified managed
        *    node. If you created the association by using the <code>Targets</code> parameter, then you must
        *    delete the association by using the association ID.</p>
        *          <p>When you disassociate a document from a managed node, it doesn't change the configuration of
        *    the node. To change the configuration state of a managed node after you disassociate a document,
        *    you must create a new document with the desired configuration and associate it with the
        *    node.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DeleteAssociationCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DeleteAssociationCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DeleteAssociationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAssociationCommandInput} for command's `input` shape.
        * @see {@link DeleteAssociationCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DeleteAssociationCommand extends $Command<DeleteAssociationCommandInput, DeleteAssociationCommandOutput, SSMClientResolvedConfig> {
            readonly input: DeleteAssociationCommandInput;
            constructor(input: DeleteAssociationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAssociationCommandInput, DeleteAssociationCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteDocumentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteDocumentRequest, DeleteDocumentResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DeleteDocumentCommandInput extends DeleteDocumentRequest {
    }
    export interface DeleteDocumentCommandOutput extends DeleteDocumentResult, __MetadataBearer {
    }
    /**
        * <p>Deletes the Amazon Web Services Systems Manager document (SSM document) and all managed node associations to the
        *    document.</p>
        *          <p>Before you delete the document, we recommend that you use <a>DeleteAssociation</a> to disassociate all managed nodes that are associated with the document.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DeleteDocumentCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DeleteDocumentCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DeleteDocumentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDocumentCommandInput} for command's `input` shape.
        * @see {@link DeleteDocumentCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DeleteDocumentCommand extends $Command<DeleteDocumentCommandInput, DeleteDocumentCommandOutput, SSMClientResolvedConfig> {
            readonly input: DeleteDocumentCommandInput;
            constructor(input: DeleteDocumentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDocumentCommandInput, DeleteDocumentCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteInventoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteInventoryRequest, DeleteInventoryResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DeleteInventoryCommandInput extends DeleteInventoryRequest {
    }
    export interface DeleteInventoryCommandOutput extends DeleteInventoryResult, __MetadataBearer {
    }
    /**
        * <p>Delete a custom inventory type or the data associated with a custom Inventory type. Deleting
        *    a custom inventory type is also referred to as deleting a custom inventory schema.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DeleteInventoryCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DeleteInventoryCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DeleteInventoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteInventoryCommandInput} for command's `input` shape.
        * @see {@link DeleteInventoryCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DeleteInventoryCommand extends $Command<DeleteInventoryCommandInput, DeleteInventoryCommandOutput, SSMClientResolvedConfig> {
            readonly input: DeleteInventoryCommandInput;
            constructor(input: DeleteInventoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteInventoryCommandInput, DeleteInventoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteMaintenanceWindowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteMaintenanceWindowRequest, DeleteMaintenanceWindowResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DeleteMaintenanceWindowCommandInput extends DeleteMaintenanceWindowRequest {
    }
    export interface DeleteMaintenanceWindowCommandOutput extends DeleteMaintenanceWindowResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a maintenance window.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DeleteMaintenanceWindowCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DeleteMaintenanceWindowCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DeleteMaintenanceWindowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteMaintenanceWindowCommandInput} for command's `input` shape.
        * @see {@link DeleteMaintenanceWindowCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DeleteMaintenanceWindowCommand extends $Command<DeleteMaintenanceWindowCommandInput, DeleteMaintenanceWindowCommandOutput, SSMClientResolvedConfig> {
            readonly input: DeleteMaintenanceWindowCommandInput;
            constructor(input: DeleteMaintenanceWindowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteMaintenanceWindowCommandInput, DeleteMaintenanceWindowCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteOpsMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteOpsMetadataRequest, DeleteOpsMetadataResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DeleteOpsMetadataCommandInput extends DeleteOpsMetadataRequest {
    }
    export interface DeleteOpsMetadataCommandOutput extends DeleteOpsMetadataResult, __MetadataBearer {
    }
    /**
        * <p>Delete OpsMetadata related to an application.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DeleteOpsMetadataCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DeleteOpsMetadataCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DeleteOpsMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteOpsMetadataCommandInput} for command's `input` shape.
        * @see {@link DeleteOpsMetadataCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DeleteOpsMetadataCommand extends $Command<DeleteOpsMetadataCommandInput, DeleteOpsMetadataCommandOutput, SSMClientResolvedConfig> {
            readonly input: DeleteOpsMetadataCommandInput;
            constructor(input: DeleteOpsMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteOpsMetadataCommandInput, DeleteOpsMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteParameterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteParameterRequest, DeleteParameterResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DeleteParameterCommandInput extends DeleteParameterRequest {
    }
    export interface DeleteParameterCommandOutput extends DeleteParameterResult, __MetadataBearer {
    }
    /**
        * <p>Delete a parameter from the system. After deleting a parameter, wait for at least 30 seconds
        *    to create a parameter with the same name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DeleteParameterCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DeleteParameterCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DeleteParameterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteParameterCommandInput} for command's `input` shape.
        * @see {@link DeleteParameterCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DeleteParameterCommand extends $Command<DeleteParameterCommandInput, DeleteParameterCommandOutput, SSMClientResolvedConfig> {
            readonly input: DeleteParameterCommandInput;
            constructor(input: DeleteParameterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteParameterCommandInput, DeleteParameterCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteParametersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteParametersRequest, DeleteParametersResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DeleteParametersCommandInput extends DeleteParametersRequest {
    }
    export interface DeleteParametersCommandOutput extends DeleteParametersResult, __MetadataBearer {
    }
    /**
        * <p>Delete a list of parameters. After deleting a parameter, wait for at least 30 seconds to
        *    create a parameter with the same name.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DeleteParametersCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DeleteParametersCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DeleteParametersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteParametersCommandInput} for command's `input` shape.
        * @see {@link DeleteParametersCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DeleteParametersCommand extends $Command<DeleteParametersCommandInput, DeleteParametersCommandOutput, SSMClientResolvedConfig> {
            readonly input: DeleteParametersCommandInput;
            constructor(input: DeleteParametersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteParametersCommandInput, DeleteParametersCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeletePatchBaselineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeletePatchBaselineRequest, DeletePatchBaselineResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DeletePatchBaselineCommandInput extends DeletePatchBaselineRequest {
    }
    export interface DeletePatchBaselineCommandOutput extends DeletePatchBaselineResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a patch baseline.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DeletePatchBaselineCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DeletePatchBaselineCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DeletePatchBaselineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePatchBaselineCommandInput} for command's `input` shape.
        * @see {@link DeletePatchBaselineCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DeletePatchBaselineCommand extends $Command<DeletePatchBaselineCommandInput, DeletePatchBaselineCommandOutput, SSMClientResolvedConfig> {
            readonly input: DeletePatchBaselineCommandInput;
            constructor(input: DeletePatchBaselineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePatchBaselineCommandInput, DeletePatchBaselineCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteResourceDataSyncCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteResourceDataSyncRequest, DeleteResourceDataSyncResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DeleteResourceDataSyncCommandInput extends DeleteResourceDataSyncRequest {
    }
    export interface DeleteResourceDataSyncCommandOutput extends DeleteResourceDataSyncResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a resource data sync configuration. After the configuration is deleted, changes to
        *    data on managed nodes are no longer synced to or from the target. Deleting a sync configuration
        *    doesn't delete data.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DeleteResourceDataSyncCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DeleteResourceDataSyncCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DeleteResourceDataSyncCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteResourceDataSyncCommandInput} for command's `input` shape.
        * @see {@link DeleteResourceDataSyncCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DeleteResourceDataSyncCommand extends $Command<DeleteResourceDataSyncCommandInput, DeleteResourceDataSyncCommandOutput, SSMClientResolvedConfig> {
            readonly input: DeleteResourceDataSyncCommandInput;
            constructor(input: DeleteResourceDataSyncCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteResourceDataSyncCommandInput, DeleteResourceDataSyncCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeregisterManagedInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeregisterManagedInstanceRequest, DeregisterManagedInstanceResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DeregisterManagedInstanceCommandInput extends DeregisterManagedInstanceRequest {
    }
    export interface DeregisterManagedInstanceCommandOutput extends DeregisterManagedInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Removes the server or virtual machine from the list of registered servers. You can
        *    reregister the node again at any time. If you don't plan to use Run Command on the server, we
        *    suggest uninstalling SSM Agent first.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DeregisterManagedInstanceCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DeregisterManagedInstanceCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DeregisterManagedInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterManagedInstanceCommandInput} for command's `input` shape.
        * @see {@link DeregisterManagedInstanceCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DeregisterManagedInstanceCommand extends $Command<DeregisterManagedInstanceCommandInput, DeregisterManagedInstanceCommandOutput, SSMClientResolvedConfig> {
            readonly input: DeregisterManagedInstanceCommandInput;
            constructor(input: DeregisterManagedInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterManagedInstanceCommandInput, DeregisterManagedInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeregisterPatchBaselineForPatchGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeregisterPatchBaselineForPatchGroupRequest, DeregisterPatchBaselineForPatchGroupResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DeregisterPatchBaselineForPatchGroupCommandInput extends DeregisterPatchBaselineForPatchGroupRequest {
    }
    export interface DeregisterPatchBaselineForPatchGroupCommandOutput extends DeregisterPatchBaselineForPatchGroupResult, __MetadataBearer {
    }
    /**
        * <p>Removes a patch group from a patch baseline.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DeregisterPatchBaselineForPatchGroupCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DeregisterPatchBaselineForPatchGroupCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DeregisterPatchBaselineForPatchGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterPatchBaselineForPatchGroupCommandInput} for command's `input` shape.
        * @see {@link DeregisterPatchBaselineForPatchGroupCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DeregisterPatchBaselineForPatchGroupCommand extends $Command<DeregisterPatchBaselineForPatchGroupCommandInput, DeregisterPatchBaselineForPatchGroupCommandOutput, SSMClientResolvedConfig> {
            readonly input: DeregisterPatchBaselineForPatchGroupCommandInput;
            constructor(input: DeregisterPatchBaselineForPatchGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterPatchBaselineForPatchGroupCommandInput, DeregisterPatchBaselineForPatchGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeregisterTargetFromMaintenanceWindowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeregisterTargetFromMaintenanceWindowRequest, DeregisterTargetFromMaintenanceWindowResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DeregisterTargetFromMaintenanceWindowCommandInput extends DeregisterTargetFromMaintenanceWindowRequest {
    }
    export interface DeregisterTargetFromMaintenanceWindowCommandOutput extends DeregisterTargetFromMaintenanceWindowResult, __MetadataBearer {
    }
    /**
        * <p>Removes a target from a maintenance window.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DeregisterTargetFromMaintenanceWindowCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DeregisterTargetFromMaintenanceWindowCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DeregisterTargetFromMaintenanceWindowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterTargetFromMaintenanceWindowCommandInput} for command's `input` shape.
        * @see {@link DeregisterTargetFromMaintenanceWindowCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DeregisterTargetFromMaintenanceWindowCommand extends $Command<DeregisterTargetFromMaintenanceWindowCommandInput, DeregisterTargetFromMaintenanceWindowCommandOutput, SSMClientResolvedConfig> {
            readonly input: DeregisterTargetFromMaintenanceWindowCommandInput;
            constructor(input: DeregisterTargetFromMaintenanceWindowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterTargetFromMaintenanceWindowCommandInput, DeregisterTargetFromMaintenanceWindowCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeregisterTaskFromMaintenanceWindowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeregisterTaskFromMaintenanceWindowRequest, DeregisterTaskFromMaintenanceWindowResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DeregisterTaskFromMaintenanceWindowCommandInput extends DeregisterTaskFromMaintenanceWindowRequest {
    }
    export interface DeregisterTaskFromMaintenanceWindowCommandOutput extends DeregisterTaskFromMaintenanceWindowResult, __MetadataBearer {
    }
    /**
        * <p>Removes a task from a maintenance window.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DeregisterTaskFromMaintenanceWindowCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DeregisterTaskFromMaintenanceWindowCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DeregisterTaskFromMaintenanceWindowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterTaskFromMaintenanceWindowCommandInput} for command's `input` shape.
        * @see {@link DeregisterTaskFromMaintenanceWindowCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DeregisterTaskFromMaintenanceWindowCommand extends $Command<DeregisterTaskFromMaintenanceWindowCommandInput, DeregisterTaskFromMaintenanceWindowCommandOutput, SSMClientResolvedConfig> {
            readonly input: DeregisterTaskFromMaintenanceWindowCommandInput;
            constructor(input: DeregisterTaskFromMaintenanceWindowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterTaskFromMaintenanceWindowCommandInput, DeregisterTaskFromMaintenanceWindowCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeActivationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeActivationsRequest, DescribeActivationsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeActivationsCommandInput extends DescribeActivationsRequest {
    }
    export interface DescribeActivationsCommandOutput extends DescribeActivationsResult, __MetadataBearer {
    }
    /**
        * <p>Describes details about the activation, such as the date and time the activation was
        *    created, its expiration date, the Identity and Access Management (IAM) role assigned to
        *    the managed nodes in the activation, and the number of nodes registered by using this
        *    activation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeActivationsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeActivationsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeActivationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeActivationsCommandInput} for command's `input` shape.
        * @see {@link DescribeActivationsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeActivationsCommand extends $Command<DescribeActivationsCommandInput, DescribeActivationsCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeActivationsCommandInput;
            constructor(input: DescribeActivationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeActivationsCommandInput, DescribeActivationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAssociationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAssociationRequest, DescribeAssociationResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeAssociationCommandInput extends DescribeAssociationRequest {
    }
    export interface DescribeAssociationCommandOutput extends DescribeAssociationResult, __MetadataBearer {
    }
    /**
        * <p>Describes the association for the specified target or managed node. If you created the
        *    association by using the <code>Targets</code> parameter, then you must retrieve the association
        *    by using the association ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeAssociationCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeAssociationCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeAssociationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAssociationCommandInput} for command's `input` shape.
        * @see {@link DescribeAssociationCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeAssociationCommand extends $Command<DescribeAssociationCommandInput, DescribeAssociationCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeAssociationCommandInput;
            constructor(input: DescribeAssociationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAssociationCommandInput, DescribeAssociationCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAssociationExecutionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAssociationExecutionsRequest, DescribeAssociationExecutionsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeAssociationExecutionsCommandInput extends DescribeAssociationExecutionsRequest {
    }
    export interface DescribeAssociationExecutionsCommandOutput extends DescribeAssociationExecutionsResult, __MetadataBearer {
    }
    /**
        * <p>Views all executions for a specific association ID. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeAssociationExecutionsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeAssociationExecutionsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeAssociationExecutionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAssociationExecutionsCommandInput} for command's `input` shape.
        * @see {@link DescribeAssociationExecutionsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeAssociationExecutionsCommand extends $Command<DescribeAssociationExecutionsCommandInput, DescribeAssociationExecutionsCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeAssociationExecutionsCommandInput;
            constructor(input: DescribeAssociationExecutionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAssociationExecutionsCommandInput, DescribeAssociationExecutionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAssociationExecutionTargetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAssociationExecutionTargetsRequest, DescribeAssociationExecutionTargetsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeAssociationExecutionTargetsCommandInput extends DescribeAssociationExecutionTargetsRequest {
    }
    export interface DescribeAssociationExecutionTargetsCommandOutput extends DescribeAssociationExecutionTargetsResult, __MetadataBearer {
    }
    /**
        * <p>Views information about a specific execution of a specific association.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeAssociationExecutionTargetsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeAssociationExecutionTargetsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeAssociationExecutionTargetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAssociationExecutionTargetsCommandInput} for command's `input` shape.
        * @see {@link DescribeAssociationExecutionTargetsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeAssociationExecutionTargetsCommand extends $Command<DescribeAssociationExecutionTargetsCommandInput, DescribeAssociationExecutionTargetsCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeAssociationExecutionTargetsCommandInput;
            constructor(input: DescribeAssociationExecutionTargetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAssociationExecutionTargetsCommandInput, DescribeAssociationExecutionTargetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAutomationExecutionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAutomationExecutionsRequest, DescribeAutomationExecutionsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeAutomationExecutionsCommandInput extends DescribeAutomationExecutionsRequest {
    }
    export interface DescribeAutomationExecutionsCommandOutput extends DescribeAutomationExecutionsResult, __MetadataBearer {
    }
    /**
        * <p>Provides details about all active and terminated Automation executions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeAutomationExecutionsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeAutomationExecutionsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeAutomationExecutionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAutomationExecutionsCommandInput} for command's `input` shape.
        * @see {@link DescribeAutomationExecutionsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeAutomationExecutionsCommand extends $Command<DescribeAutomationExecutionsCommandInput, DescribeAutomationExecutionsCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeAutomationExecutionsCommandInput;
            constructor(input: DescribeAutomationExecutionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAutomationExecutionsCommandInput, DescribeAutomationExecutionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAutomationStepExecutionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAutomationStepExecutionsRequest, DescribeAutomationStepExecutionsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeAutomationStepExecutionsCommandInput extends DescribeAutomationStepExecutionsRequest {
    }
    export interface DescribeAutomationStepExecutionsCommandOutput extends DescribeAutomationStepExecutionsResult, __MetadataBearer {
    }
    /**
        * <p>Information about all active and terminated step executions in an Automation
        *    workflow.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeAutomationStepExecutionsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeAutomationStepExecutionsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeAutomationStepExecutionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAutomationStepExecutionsCommandInput} for command's `input` shape.
        * @see {@link DescribeAutomationStepExecutionsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeAutomationStepExecutionsCommand extends $Command<DescribeAutomationStepExecutionsCommandInput, DescribeAutomationStepExecutionsCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeAutomationStepExecutionsCommandInput;
            constructor(input: DescribeAutomationStepExecutionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAutomationStepExecutionsCommandInput, DescribeAutomationStepExecutionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAvailablePatchesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeAvailablePatchesRequest, DescribeAvailablePatchesResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeAvailablePatchesCommandInput extends DescribeAvailablePatchesRequest {
    }
    export interface DescribeAvailablePatchesCommandOutput extends DescribeAvailablePatchesResult, __MetadataBearer {
    }
    /**
        * <p>Lists all patches eligible to be included in a patch baseline.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeAvailablePatchesCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeAvailablePatchesCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeAvailablePatchesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeAvailablePatchesCommandInput} for command's `input` shape.
        * @see {@link DescribeAvailablePatchesCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeAvailablePatchesCommand extends $Command<DescribeAvailablePatchesCommandInput, DescribeAvailablePatchesCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeAvailablePatchesCommandInput;
            constructor(input: DescribeAvailablePatchesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeAvailablePatchesCommandInput, DescribeAvailablePatchesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeDocumentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDocumentRequest, DescribeDocumentResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeDocumentCommandInput extends DescribeDocumentRequest {
    }
    export interface DescribeDocumentCommandOutput extends DescribeDocumentResult, __MetadataBearer {
    }
    /**
        * <p>Describes the specified Amazon Web Services Systems Manager document (SSM document).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeDocumentCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeDocumentCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeDocumentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDocumentCommandInput} for command's `input` shape.
        * @see {@link DescribeDocumentCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeDocumentCommand extends $Command<DescribeDocumentCommandInput, DescribeDocumentCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeDocumentCommandInput;
            constructor(input: DescribeDocumentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDocumentCommandInput, DescribeDocumentCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeDocumentPermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeDocumentPermissionRequest, DescribeDocumentPermissionResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeDocumentPermissionCommandInput extends DescribeDocumentPermissionRequest {
    }
    export interface DescribeDocumentPermissionCommandOutput extends DescribeDocumentPermissionResponse, __MetadataBearer {
    }
    /**
        * <p>Describes the permissions for a Amazon Web Services Systems Manager document (SSM document). If you created the
        *    document, you are the owner. If a document is shared, it can either be shared privately (by
        *    specifying a user's Amazon Web Services account ID) or publicly (<i>All</i>). </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeDocumentPermissionCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeDocumentPermissionCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeDocumentPermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDocumentPermissionCommandInput} for command's `input` shape.
        * @see {@link DescribeDocumentPermissionCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeDocumentPermissionCommand extends $Command<DescribeDocumentPermissionCommandInput, DescribeDocumentPermissionCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeDocumentPermissionCommandInput;
            constructor(input: DescribeDocumentPermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDocumentPermissionCommandInput, DescribeDocumentPermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeEffectiveInstanceAssociationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeEffectiveInstanceAssociationsRequest, DescribeEffectiveInstanceAssociationsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeEffectiveInstanceAssociationsCommandInput extends DescribeEffectiveInstanceAssociationsRequest {
    }
    export interface DescribeEffectiveInstanceAssociationsCommandOutput extends DescribeEffectiveInstanceAssociationsResult, __MetadataBearer {
    }
    /**
        * <p>All associations for the managed node(s).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeEffectiveInstanceAssociationsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeEffectiveInstanceAssociationsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeEffectiveInstanceAssociationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEffectiveInstanceAssociationsCommandInput} for command's `input` shape.
        * @see {@link DescribeEffectiveInstanceAssociationsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeEffectiveInstanceAssociationsCommand extends $Command<DescribeEffectiveInstanceAssociationsCommandInput, DescribeEffectiveInstanceAssociationsCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeEffectiveInstanceAssociationsCommandInput;
            constructor(input: DescribeEffectiveInstanceAssociationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEffectiveInstanceAssociationsCommandInput, DescribeEffectiveInstanceAssociationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeEffectivePatchesForPatchBaselineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeEffectivePatchesForPatchBaselineRequest, DescribeEffectivePatchesForPatchBaselineResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeEffectivePatchesForPatchBaselineCommandInput extends DescribeEffectivePatchesForPatchBaselineRequest {
    }
    export interface DescribeEffectivePatchesForPatchBaselineCommandOutput extends DescribeEffectivePatchesForPatchBaselineResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the current effective patches (the patch and the approval state) for the specified
        *    patch baseline. Applies to patch baselines for Windows only.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeEffectivePatchesForPatchBaselineCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeEffectivePatchesForPatchBaselineCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeEffectivePatchesForPatchBaselineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeEffectivePatchesForPatchBaselineCommandInput} for command's `input` shape.
        * @see {@link DescribeEffectivePatchesForPatchBaselineCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeEffectivePatchesForPatchBaselineCommand extends $Command<DescribeEffectivePatchesForPatchBaselineCommandInput, DescribeEffectivePatchesForPatchBaselineCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeEffectivePatchesForPatchBaselineCommandInput;
            constructor(input: DescribeEffectivePatchesForPatchBaselineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeEffectivePatchesForPatchBaselineCommandInput, DescribeEffectivePatchesForPatchBaselineCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstanceAssociationsStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeInstanceAssociationsStatusRequest, DescribeInstanceAssociationsStatusResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeInstanceAssociationsStatusCommandInput extends DescribeInstanceAssociationsStatusRequest {
    }
    export interface DescribeInstanceAssociationsStatusCommandOutput extends DescribeInstanceAssociationsStatusResult, __MetadataBearer {
    }
    /**
        * <p>The status of the associations for the managed node(s).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeInstanceAssociationsStatusCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeInstanceAssociationsStatusCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeInstanceAssociationsStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeInstanceAssociationsStatusCommandInput} for command's `input` shape.
        * @see {@link DescribeInstanceAssociationsStatusCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeInstanceAssociationsStatusCommand extends $Command<DescribeInstanceAssociationsStatusCommandInput, DescribeInstanceAssociationsStatusCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeInstanceAssociationsStatusCommandInput;
            constructor(input: DescribeInstanceAssociationsStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeInstanceAssociationsStatusCommandInput, DescribeInstanceAssociationsStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstanceInformationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeInstanceInformationRequest, DescribeInstanceInformationResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeInstanceInformationCommandInput extends DescribeInstanceInformationRequest {
    }
    export interface DescribeInstanceInformationCommandOutput extends DescribeInstanceInformationResult, __MetadataBearer {
    }
    /**
        * <p>Describes one or more of your managed nodes, including information about the operating
        *    system platform, the version of SSM Agent installed on the managed node, node status, and so
        *    on.</p>
        *          <p>If you specify one or more managed node IDs, it returns information for those managed nodes.
        *    If you don't specify node IDs, it returns information for all your managed nodes. If you specify
        *    a node ID that isn't valid or a node that you don't own, you receive an error.</p>
        *          <note>
        *             <p>The <code>IamRole</code> field for this API operation is the Identity and Access Management
        *      (IAM) role assigned to on-premises managed nodes. This call doesn't return the
        *      IAM role for EC2 instances.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeInstanceInformationCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeInstanceInformationCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeInstanceInformationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeInstanceInformationCommandInput} for command's `input` shape.
        * @see {@link DescribeInstanceInformationCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeInstanceInformationCommand extends $Command<DescribeInstanceInformationCommandInput, DescribeInstanceInformationCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeInstanceInformationCommandInput;
            constructor(input: DescribeInstanceInformationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeInstanceInformationCommandInput, DescribeInstanceInformationCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstancePatchesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeInstancePatchesRequest, DescribeInstancePatchesResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeInstancePatchesCommandInput extends DescribeInstancePatchesRequest {
    }
    export interface DescribeInstancePatchesCommandOutput extends DescribeInstancePatchesResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about the patches on the specified managed node and their state
        *    relative to the patch baseline being used for the node.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeInstancePatchesCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeInstancePatchesCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeInstancePatchesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeInstancePatchesCommandInput} for command's `input` shape.
        * @see {@link DescribeInstancePatchesCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeInstancePatchesCommand extends $Command<DescribeInstancePatchesCommandInput, DescribeInstancePatchesCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeInstancePatchesCommandInput;
            constructor(input: DescribeInstancePatchesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeInstancePatchesCommandInput, DescribeInstancePatchesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstancePatchStatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeInstancePatchStatesRequest, DescribeInstancePatchStatesResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeInstancePatchStatesCommandInput extends DescribeInstancePatchStatesRequest {
    }
    export interface DescribeInstancePatchStatesCommandOutput extends DescribeInstancePatchStatesResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the high-level patch state of one or more managed nodes.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeInstancePatchStatesCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeInstancePatchStatesCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeInstancePatchStatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeInstancePatchStatesCommandInput} for command's `input` shape.
        * @see {@link DescribeInstancePatchStatesCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeInstancePatchStatesCommand extends $Command<DescribeInstancePatchStatesCommandInput, DescribeInstancePatchStatesCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeInstancePatchStatesCommandInput;
            constructor(input: DescribeInstancePatchStatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeInstancePatchStatesCommandInput, DescribeInstancePatchStatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstancePatchStatesForPatchGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeInstancePatchStatesForPatchGroupRequest, DescribeInstancePatchStatesForPatchGroupResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeInstancePatchStatesForPatchGroupCommandInput extends DescribeInstancePatchStatesForPatchGroupRequest {
    }
    export interface DescribeInstancePatchStatesForPatchGroupCommandOutput extends DescribeInstancePatchStatesForPatchGroupResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the high-level patch state for the managed nodes in the specified patch
        *    group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeInstancePatchStatesForPatchGroupCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeInstancePatchStatesForPatchGroupCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeInstancePatchStatesForPatchGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeInstancePatchStatesForPatchGroupCommandInput} for command's `input` shape.
        * @see {@link DescribeInstancePatchStatesForPatchGroupCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeInstancePatchStatesForPatchGroupCommand extends $Command<DescribeInstancePatchStatesForPatchGroupCommandInput, DescribeInstancePatchStatesForPatchGroupCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeInstancePatchStatesForPatchGroupCommandInput;
            constructor(input: DescribeInstancePatchStatesForPatchGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeInstancePatchStatesForPatchGroupCommandInput, DescribeInstancePatchStatesForPatchGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInventoryDeletionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeInventoryDeletionsRequest, DescribeInventoryDeletionsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeInventoryDeletionsCommandInput extends DescribeInventoryDeletionsRequest {
    }
    export interface DescribeInventoryDeletionsCommandOutput extends DescribeInventoryDeletionsResult, __MetadataBearer {
    }
    /**
        * <p>Describes a specific delete inventory operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeInventoryDeletionsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeInventoryDeletionsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeInventoryDeletionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeInventoryDeletionsCommandInput} for command's `input` shape.
        * @see {@link DescribeInventoryDeletionsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeInventoryDeletionsCommand extends $Command<DescribeInventoryDeletionsCommandInput, DescribeInventoryDeletionsCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeInventoryDeletionsCommandInput;
            constructor(input: DescribeInventoryDeletionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeInventoryDeletionsCommandInput, DescribeInventoryDeletionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowExecutionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeMaintenanceWindowExecutionsRequest, DescribeMaintenanceWindowExecutionsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeMaintenanceWindowExecutionsCommandInput extends DescribeMaintenanceWindowExecutionsRequest {
    }
    export interface DescribeMaintenanceWindowExecutionsCommandOutput extends DescribeMaintenanceWindowExecutionsResult, __MetadataBearer {
    }
    /**
        * <p>Lists the executions of a maintenance window. This includes information about when the
        *    maintenance window was scheduled to be active, and information about tasks registered and run
        *    with the maintenance window.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeMaintenanceWindowExecutionsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeMaintenanceWindowExecutionsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeMaintenanceWindowExecutionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeMaintenanceWindowExecutionsCommandInput} for command's `input` shape.
        * @see {@link DescribeMaintenanceWindowExecutionsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeMaintenanceWindowExecutionsCommand extends $Command<DescribeMaintenanceWindowExecutionsCommandInput, DescribeMaintenanceWindowExecutionsCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeMaintenanceWindowExecutionsCommandInput;
            constructor(input: DescribeMaintenanceWindowExecutionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeMaintenanceWindowExecutionsCommandInput, DescribeMaintenanceWindowExecutionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowExecutionTaskInvocationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeMaintenanceWindowExecutionTaskInvocationsRequest, DescribeMaintenanceWindowExecutionTaskInvocationsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeMaintenanceWindowExecutionTaskInvocationsCommandInput extends DescribeMaintenanceWindowExecutionTaskInvocationsRequest {
    }
    export interface DescribeMaintenanceWindowExecutionTaskInvocationsCommandOutput extends DescribeMaintenanceWindowExecutionTaskInvocationsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the individual task executions (one per target) for a particular task run as part
        *    of a maintenance window execution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeMaintenanceWindowExecutionTaskInvocationsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeMaintenanceWindowExecutionTaskInvocationsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeMaintenanceWindowExecutionTaskInvocationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeMaintenanceWindowExecutionTaskInvocationsCommandInput} for command's `input` shape.
        * @see {@link DescribeMaintenanceWindowExecutionTaskInvocationsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeMaintenanceWindowExecutionTaskInvocationsCommand extends $Command<DescribeMaintenanceWindowExecutionTaskInvocationsCommandInput, DescribeMaintenanceWindowExecutionTaskInvocationsCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeMaintenanceWindowExecutionTaskInvocationsCommandInput;
            constructor(input: DescribeMaintenanceWindowExecutionTaskInvocationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeMaintenanceWindowExecutionTaskInvocationsCommandInput, DescribeMaintenanceWindowExecutionTaskInvocationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowExecutionTasksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeMaintenanceWindowExecutionTasksRequest, DescribeMaintenanceWindowExecutionTasksResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeMaintenanceWindowExecutionTasksCommandInput extends DescribeMaintenanceWindowExecutionTasksRequest {
    }
    export interface DescribeMaintenanceWindowExecutionTasksCommandOutput extends DescribeMaintenanceWindowExecutionTasksResult, __MetadataBearer {
    }
    /**
        * <p>For a given maintenance window execution, lists the tasks that were run.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeMaintenanceWindowExecutionTasksCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeMaintenanceWindowExecutionTasksCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeMaintenanceWindowExecutionTasksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeMaintenanceWindowExecutionTasksCommandInput} for command's `input` shape.
        * @see {@link DescribeMaintenanceWindowExecutionTasksCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeMaintenanceWindowExecutionTasksCommand extends $Command<DescribeMaintenanceWindowExecutionTasksCommandInput, DescribeMaintenanceWindowExecutionTasksCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeMaintenanceWindowExecutionTasksCommandInput;
            constructor(input: DescribeMaintenanceWindowExecutionTasksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeMaintenanceWindowExecutionTasksCommandInput, DescribeMaintenanceWindowExecutionTasksCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeMaintenanceWindowScheduleRequest, DescribeMaintenanceWindowScheduleResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeMaintenanceWindowScheduleCommandInput extends DescribeMaintenanceWindowScheduleRequest {
    }
    export interface DescribeMaintenanceWindowScheduleCommandOutput extends DescribeMaintenanceWindowScheduleResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about upcoming executions of a maintenance window.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeMaintenanceWindowScheduleCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeMaintenanceWindowScheduleCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeMaintenanceWindowScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeMaintenanceWindowScheduleCommandInput} for command's `input` shape.
        * @see {@link DescribeMaintenanceWindowScheduleCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeMaintenanceWindowScheduleCommand extends $Command<DescribeMaintenanceWindowScheduleCommandInput, DescribeMaintenanceWindowScheduleCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeMaintenanceWindowScheduleCommandInput;
            constructor(input: DescribeMaintenanceWindowScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeMaintenanceWindowScheduleCommandInput, DescribeMaintenanceWindowScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeMaintenanceWindowsRequest, DescribeMaintenanceWindowsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeMaintenanceWindowsCommandInput extends DescribeMaintenanceWindowsRequest {
    }
    export interface DescribeMaintenanceWindowsCommandOutput extends DescribeMaintenanceWindowsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the maintenance windows in an Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeMaintenanceWindowsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeMaintenanceWindowsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeMaintenanceWindowsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeMaintenanceWindowsCommandInput} for command's `input` shape.
        * @see {@link DescribeMaintenanceWindowsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeMaintenanceWindowsCommand extends $Command<DescribeMaintenanceWindowsCommandInput, DescribeMaintenanceWindowsCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeMaintenanceWindowsCommandInput;
            constructor(input: DescribeMaintenanceWindowsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeMaintenanceWindowsCommandInput, DescribeMaintenanceWindowsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowsForTargetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeMaintenanceWindowsForTargetRequest, DescribeMaintenanceWindowsForTargetResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeMaintenanceWindowsForTargetCommandInput extends DescribeMaintenanceWindowsForTargetRequest {
    }
    export interface DescribeMaintenanceWindowsForTargetCommandOutput extends DescribeMaintenanceWindowsForTargetResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about the maintenance window targets or tasks that a managed node is
        *    associated with.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeMaintenanceWindowsForTargetCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeMaintenanceWindowsForTargetCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeMaintenanceWindowsForTargetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeMaintenanceWindowsForTargetCommandInput} for command's `input` shape.
        * @see {@link DescribeMaintenanceWindowsForTargetCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeMaintenanceWindowsForTargetCommand extends $Command<DescribeMaintenanceWindowsForTargetCommandInput, DescribeMaintenanceWindowsForTargetCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeMaintenanceWindowsForTargetCommandInput;
            constructor(input: DescribeMaintenanceWindowsForTargetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeMaintenanceWindowsForTargetCommandInput, DescribeMaintenanceWindowsForTargetCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowTargetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeMaintenanceWindowTargetsRequest, DescribeMaintenanceWindowTargetsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeMaintenanceWindowTargetsCommandInput extends DescribeMaintenanceWindowTargetsRequest {
    }
    export interface DescribeMaintenanceWindowTargetsCommandOutput extends DescribeMaintenanceWindowTargetsResult, __MetadataBearer {
    }
    /**
        * <p>Lists the targets registered with the maintenance window.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeMaintenanceWindowTargetsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeMaintenanceWindowTargetsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeMaintenanceWindowTargetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeMaintenanceWindowTargetsCommandInput} for command's `input` shape.
        * @see {@link DescribeMaintenanceWindowTargetsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeMaintenanceWindowTargetsCommand extends $Command<DescribeMaintenanceWindowTargetsCommandInput, DescribeMaintenanceWindowTargetsCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeMaintenanceWindowTargetsCommandInput;
            constructor(input: DescribeMaintenanceWindowTargetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeMaintenanceWindowTargetsCommandInput, DescribeMaintenanceWindowTargetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowTasksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeMaintenanceWindowTasksRequest, DescribeMaintenanceWindowTasksResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeMaintenanceWindowTasksCommandInput extends DescribeMaintenanceWindowTasksRequest {
    }
    export interface DescribeMaintenanceWindowTasksCommandOutput extends DescribeMaintenanceWindowTasksResult, __MetadataBearer {
    }
    /**
        * <p>Lists the tasks in a maintenance window.</p>
        *          <note>
        *             <p>For maintenance window tasks without a specified target, you can't supply values for
        *      <code>--max-errors</code> and <code>--max-concurrency</code>. Instead, the system inserts a
        *     placeholder value of <code>1</code>, which may be reported in the response to this command.
        *     These values don't affect the running of your task and can be ignored.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeMaintenanceWindowTasksCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeMaintenanceWindowTasksCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeMaintenanceWindowTasksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeMaintenanceWindowTasksCommandInput} for command's `input` shape.
        * @see {@link DescribeMaintenanceWindowTasksCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeMaintenanceWindowTasksCommand extends $Command<DescribeMaintenanceWindowTasksCommandInput, DescribeMaintenanceWindowTasksCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeMaintenanceWindowTasksCommandInput;
            constructor(input: DescribeMaintenanceWindowTasksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeMaintenanceWindowTasksCommandInput, DescribeMaintenanceWindowTasksCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeOpsItemsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeOpsItemsRequest, DescribeOpsItemsResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeOpsItemsCommandInput extends DescribeOpsItemsRequest {
    }
    export interface DescribeOpsItemsCommandOutput extends DescribeOpsItemsResponse, __MetadataBearer {
    }
    /**
        * <p>Query a set of OpsItems. You must have permission in Identity and Access Management (IAM) to query a list of OpsItems. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
        *     OpsCenter</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        *          <p>Operations engineers and IT professionals use Amazon Web Services Systems Manager OpsCenter to view, investigate, and
        *    remediate operational issues impacting the performance and health of their Amazon Web Services resources. For
        *    more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">OpsCenter</a> in the
        *     <i>Amazon Web Services Systems Manager User Guide</i>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeOpsItemsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeOpsItemsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeOpsItemsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeOpsItemsCommandInput} for command's `input` shape.
        * @see {@link DescribeOpsItemsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeOpsItemsCommand extends $Command<DescribeOpsItemsCommandInput, DescribeOpsItemsCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeOpsItemsCommandInput;
            constructor(input: DescribeOpsItemsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeOpsItemsCommandInput, DescribeOpsItemsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeParametersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeParametersRequest } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { DescribeParametersResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeParametersCommandInput extends DescribeParametersRequest {
    }
    export interface DescribeParametersCommandOutput extends DescribeParametersResult, __MetadataBearer {
    }
    /**
        * <p>Get information about a parameter.</p>
        *          <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code>
        *    in the request, the response includes information up to the limit specified. The number of items
        *    returned, however, can be between zero and the value of <code>MaxResults</code>. If the service
        *    reaches an internal limit while processing the results, it stops the operation and returns the
        *    matching values up to that point and a <code>NextToken</code>. You can specify the
        *     <code>NextToken</code> in a subsequent call to get the next set of results.</p>
        *          <important>
        *             <p>If you change the KMS key alias for the KMS key used to encrypt a parameter, then you must
        *     also update the key alias the parameter uses to reference KMS. Otherwise,
        *      <code>DescribeParameters</code> retrieves whatever the original key alias was
        *     referencing.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeParametersCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeParametersCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeParametersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeParametersCommandInput} for command's `input` shape.
        * @see {@link DescribeParametersCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeParametersCommand extends $Command<DescribeParametersCommandInput, DescribeParametersCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeParametersCommandInput;
            constructor(input: DescribeParametersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeParametersCommandInput, DescribeParametersCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribePatchBaselinesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribePatchBaselinesRequest, DescribePatchBaselinesResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribePatchBaselinesCommandInput extends DescribePatchBaselinesRequest {
    }
    export interface DescribePatchBaselinesCommandOutput extends DescribePatchBaselinesResult, __MetadataBearer {
    }
    /**
        * <p>Lists the patch baselines in your Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribePatchBaselinesCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribePatchBaselinesCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribePatchBaselinesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePatchBaselinesCommandInput} for command's `input` shape.
        * @see {@link DescribePatchBaselinesCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribePatchBaselinesCommand extends $Command<DescribePatchBaselinesCommandInput, DescribePatchBaselinesCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribePatchBaselinesCommandInput;
            constructor(input: DescribePatchBaselinesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePatchBaselinesCommandInput, DescribePatchBaselinesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribePatchGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribePatchGroupsRequest, DescribePatchGroupsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribePatchGroupsCommandInput extends DescribePatchGroupsRequest {
    }
    export interface DescribePatchGroupsCommandOutput extends DescribePatchGroupsResult, __MetadataBearer {
    }
    /**
        * <p>Lists all patch groups that have been registered with patch baselines.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribePatchGroupsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribePatchGroupsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribePatchGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePatchGroupsCommandInput} for command's `input` shape.
        * @see {@link DescribePatchGroupsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribePatchGroupsCommand extends $Command<DescribePatchGroupsCommandInput, DescribePatchGroupsCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribePatchGroupsCommandInput;
            constructor(input: DescribePatchGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePatchGroupsCommandInput, DescribePatchGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribePatchGroupStateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribePatchGroupStateRequest, DescribePatchGroupStateResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribePatchGroupStateCommandInput extends DescribePatchGroupStateRequest {
    }
    export interface DescribePatchGroupStateCommandOutput extends DescribePatchGroupStateResult, __MetadataBearer {
    }
    /**
        * <p>Returns high-level aggregated patch compliance state information for a patch group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribePatchGroupStateCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribePatchGroupStateCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribePatchGroupStateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePatchGroupStateCommandInput} for command's `input` shape.
        * @see {@link DescribePatchGroupStateCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribePatchGroupStateCommand extends $Command<DescribePatchGroupStateCommandInput, DescribePatchGroupStateCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribePatchGroupStateCommandInput;
            constructor(input: DescribePatchGroupStateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePatchGroupStateCommandInput, DescribePatchGroupStateCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribePatchPropertiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribePatchPropertiesRequest, DescribePatchPropertiesResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribePatchPropertiesCommandInput extends DescribePatchPropertiesRequest {
    }
    export interface DescribePatchPropertiesCommandOutput extends DescribePatchPropertiesResult, __MetadataBearer {
    }
    /**
        * <p>Lists the properties of available patches organized by product, product family,
        *    classification, severity, and other properties of available patches. You can use the reported
        *    properties in the filters you specify in requests for operations such as <a>CreatePatchBaseline</a>, <a>UpdatePatchBaseline</a>, <a>DescribeAvailablePatches</a>, and <a>DescribePatchBaselines</a>.</p>
        *          <p>The following section lists the properties that can be used in filters for each major
        *    operating system type:</p>
        *          <dl>
        *             <dt>AMAZON_LINUX</dt>
        *             <dd>
        *                <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
        *        <code>SEVERITY</code>
        *                </p>
        *             </dd>
        *             <dt>AMAZON_LINUX_2</dt>
        *             <dd>
        *                <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
        *        <code>SEVERITY</code>
        *                </p>
        *             </dd>
        *             <dt>CENTOS</dt>
        *             <dd>
        *                <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
        *        <code>SEVERITY</code>
        *                </p>
        *             </dd>
        *             <dt>DEBIAN</dt>
        *             <dd>
        *                <p>Valid properties: <code>PRODUCT</code> | <code>PRIORITY</code>
        *                </p>
        *             </dd>
        *             <dt>MACOS</dt>
        *             <dd>
        *                <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code>
        *                </p>
        *             </dd>
        *             <dt>ORACLE_LINUX</dt>
        *             <dd>
        *                <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
        *        <code>SEVERITY</code>
        *                </p>
        *             </dd>
        *             <dt>REDHAT_ENTERPRISE_LINUX</dt>
        *             <dd>
        *                <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
        *        <code>SEVERITY</code>
        *                </p>
        *             </dd>
        *             <dt>SUSE</dt>
        *             <dd>
        *                <p>Valid properties: <code>PRODUCT</code> | <code>CLASSIFICATION</code> |
        *        <code>SEVERITY</code>
        *                </p>
        *             </dd>
        *             <dt>UBUNTU</dt>
        *             <dd>
        *                <p>Valid properties: <code>PRODUCT</code> | <code>PRIORITY</code>
        *                </p>
        *             </dd>
        *             <dt>WINDOWS</dt>
        *             <dd>
        *                <p>Valid properties: <code>PRODUCT</code> | <code>PRODUCT_FAMILY</code> |
        *        <code>CLASSIFICATION</code> | <code>MSRC_SEVERITY</code>
        *                </p>
        *             </dd>
        *          </dl>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribePatchPropertiesCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribePatchPropertiesCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribePatchPropertiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribePatchPropertiesCommandInput} for command's `input` shape.
        * @see {@link DescribePatchPropertiesCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribePatchPropertiesCommand extends $Command<DescribePatchPropertiesCommandInput, DescribePatchPropertiesCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribePatchPropertiesCommandInput;
            constructor(input: DescribePatchPropertiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribePatchPropertiesCommandInput, DescribePatchPropertiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeSessionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeSessionsRequest, DescribeSessionsResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DescribeSessionsCommandInput extends DescribeSessionsRequest {
    }
    export interface DescribeSessionsCommandOutput extends DescribeSessionsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of all active sessions (both connected and disconnected) or terminated
        *    sessions from the past 30 days.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DescribeSessionsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DescribeSessionsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DescribeSessionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeSessionsCommandInput} for command's `input` shape.
        * @see {@link DescribeSessionsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DescribeSessionsCommand extends $Command<DescribeSessionsCommandInput, DescribeSessionsCommandOutput, SSMClientResolvedConfig> {
            readonly input: DescribeSessionsCommandInput;
            constructor(input: DescribeSessionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeSessionsCommandInput, DescribeSessionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DisassociateOpsItemRelatedItemCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateOpsItemRelatedItemRequest, DisassociateOpsItemRelatedItemResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface DisassociateOpsItemRelatedItemCommandInput extends DisassociateOpsItemRelatedItemRequest {
    }
    export interface DisassociateOpsItemRelatedItemCommandOutput extends DisassociateOpsItemRelatedItemResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the association between an OpsItem and a related item. For example, this API
        *    operation can delete an Incident Manager incident from an OpsItem. Incident Manager is a capability of
        *    Amazon Web Services Systems Manager.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, DisassociateOpsItemRelatedItemCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, DisassociateOpsItemRelatedItemCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new DisassociateOpsItemRelatedItemCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateOpsItemRelatedItemCommandInput} for command's `input` shape.
        * @see {@link DisassociateOpsItemRelatedItemCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class DisassociateOpsItemRelatedItemCommand extends $Command<DisassociateOpsItemRelatedItemCommandInput, DisassociateOpsItemRelatedItemCommandOutput, SSMClientResolvedConfig> {
            readonly input: DisassociateOpsItemRelatedItemCommandInput;
            constructor(input: DisassociateOpsItemRelatedItemCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateOpsItemRelatedItemCommandInput, DisassociateOpsItemRelatedItemCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetAutomationExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAutomationExecutionRequest, GetAutomationExecutionResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetAutomationExecutionCommandInput extends GetAutomationExecutionRequest {
    }
    export interface GetAutomationExecutionCommandOutput extends GetAutomationExecutionResult, __MetadataBearer {
    }
    /**
        * <p>Get detailed information about a particular Automation execution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetAutomationExecutionCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetAutomationExecutionCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetAutomationExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAutomationExecutionCommandInput} for command's `input` shape.
        * @see {@link GetAutomationExecutionCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetAutomationExecutionCommand extends $Command<GetAutomationExecutionCommandInput, GetAutomationExecutionCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetAutomationExecutionCommandInput;
            constructor(input: GetAutomationExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAutomationExecutionCommandInput, GetAutomationExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetCalendarStateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCalendarStateRequest, GetCalendarStateResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetCalendarStateCommandInput extends GetCalendarStateRequest {
    }
    export interface GetCalendarStateCommandOutput extends GetCalendarStateResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the state of a Amazon Web Services Systems Manager change calendar at the current time or a specified time. If
        *    you specify a time, <code>GetCalendarState</code> returns the state of the calendar at that
        *    specific time, and returns the next time that the change calendar state will transition. If you
        *    don't specify a time, <code>GetCalendarState</code> uses the current time. Change Calendar
        *    entries have two possible states: <code>OPEN</code> or <code>CLOSED</code>.</p>
        *          <p>If you specify more than one calendar in a request, the command returns the status of
        *     <code>OPEN</code> only if all calendars in the request are open. If one or more calendars in the
        *    request are closed, the status returned is <code>CLOSED</code>.</p>
        *          <p>For more information about Change Calendar, a capability of Amazon Web Services Systems Manager, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar.html">Amazon Web Services Systems Manager Change Calendar</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetCalendarStateCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetCalendarStateCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetCalendarStateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCalendarStateCommandInput} for command's `input` shape.
        * @see {@link GetCalendarStateCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetCalendarStateCommand extends $Command<GetCalendarStateCommandInput, GetCalendarStateCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetCalendarStateCommandInput;
            constructor(input: GetCalendarStateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCalendarStateCommandInput, GetCalendarStateCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetCommandInvocationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetCommandInvocationRequest, GetCommandInvocationResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetCommandInvocationCommandInput extends GetCommandInvocationRequest {
    }
    export interface GetCommandInvocationCommandOutput extends GetCommandInvocationResult, __MetadataBearer {
    }
    /**
        * <p>Returns detailed information about command execution for an invocation or plugin.</p>
        *          <p>
        *             <code>GetCommandInvocation</code> only gives the execution status of a plugin in a document.
        *    To get the command execution status on a specific managed node, use <a>ListCommandInvocations</a>. To get the command execution status across managed nodes,
        *    use <a>ListCommands</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetCommandInvocationCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetCommandInvocationCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetCommandInvocationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCommandInvocationCommandInput} for command's `input` shape.
        * @see {@link GetCommandInvocationCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetCommandInvocationCommand extends $Command<GetCommandInvocationCommandInput, GetCommandInvocationCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetCommandInvocationCommandInput;
            constructor(input: GetCommandInvocationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCommandInvocationCommandInput, GetCommandInvocationCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetConnectionStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetConnectionStatusRequest, GetConnectionStatusResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetConnectionStatusCommandInput extends GetConnectionStatusRequest {
    }
    export interface GetConnectionStatusCommandOutput extends GetConnectionStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the Session Manager connection status for a managed node to determine whether it is running
        *    and ready to receive Session Manager connections.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetConnectionStatusCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetConnectionStatusCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetConnectionStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetConnectionStatusCommandInput} for command's `input` shape.
        * @see {@link GetConnectionStatusCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetConnectionStatusCommand extends $Command<GetConnectionStatusCommandInput, GetConnectionStatusCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetConnectionStatusCommandInput;
            constructor(input: GetConnectionStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetConnectionStatusCommandInput, GetConnectionStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetDefaultPatchBaselineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDefaultPatchBaselineRequest, GetDefaultPatchBaselineResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetDefaultPatchBaselineCommandInput extends GetDefaultPatchBaselineRequest {
    }
    export interface GetDefaultPatchBaselineCommandOutput extends GetDefaultPatchBaselineResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the default patch baseline. Amazon Web Services Systems Manager supports creating multiple default patch
        *    baselines. For example, you can create a default patch baseline for each operating system.</p>
        *          <p>If you don't specify an operating system value, the default patch baseline for Windows is
        *    returned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetDefaultPatchBaselineCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetDefaultPatchBaselineCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetDefaultPatchBaselineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDefaultPatchBaselineCommandInput} for command's `input` shape.
        * @see {@link GetDefaultPatchBaselineCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetDefaultPatchBaselineCommand extends $Command<GetDefaultPatchBaselineCommandInput, GetDefaultPatchBaselineCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetDefaultPatchBaselineCommandInput;
            constructor(input: GetDefaultPatchBaselineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDefaultPatchBaselineCommandInput, GetDefaultPatchBaselineCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetDeployablePatchSnapshotForInstanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDeployablePatchSnapshotForInstanceRequest, GetDeployablePatchSnapshotForInstanceResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetDeployablePatchSnapshotForInstanceCommandInput extends GetDeployablePatchSnapshotForInstanceRequest {
    }
    export interface GetDeployablePatchSnapshotForInstanceCommandOutput extends GetDeployablePatchSnapshotForInstanceResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the current snapshot for the patch baseline the managed node uses. This API is
        *    primarily used by the <code>AWS-RunPatchBaseline</code> Systems Manager document (SSM document).</p>
        *          <note>
        *             <p>If you run the command locally, such as with the Command Line Interface (CLI), the system attempts to use your local Amazon Web Services credentials and the operation fails. To avoid
        *     this, you can run the command in the Amazon Web Services Systems Manager console. Use Run Command, a capability of
        *     Amazon Web Services Systems Manager, with an SSM document that enables you to target a managed node with a script or
        *     command. For example, run the command using the <code>AWS-RunShellScript</code> document or the
        *      <code>AWS-RunPowerShellScript</code> document.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetDeployablePatchSnapshotForInstanceCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetDeployablePatchSnapshotForInstanceCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetDeployablePatchSnapshotForInstanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDeployablePatchSnapshotForInstanceCommandInput} for command's `input` shape.
        * @see {@link GetDeployablePatchSnapshotForInstanceCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetDeployablePatchSnapshotForInstanceCommand extends $Command<GetDeployablePatchSnapshotForInstanceCommandInput, GetDeployablePatchSnapshotForInstanceCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetDeployablePatchSnapshotForInstanceCommandInput;
            constructor(input: GetDeployablePatchSnapshotForInstanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDeployablePatchSnapshotForInstanceCommandInput, GetDeployablePatchSnapshotForInstanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetDocumentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetDocumentRequest, GetDocumentResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetDocumentCommandInput extends GetDocumentRequest {
    }
    export interface GetDocumentCommandOutput extends GetDocumentResult, __MetadataBearer {
    }
    /**
        * <p>Gets the contents of the specified Amazon Web Services Systems Manager document (SSM document).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetDocumentCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetDocumentCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetDocumentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDocumentCommandInput} for command's `input` shape.
        * @see {@link GetDocumentCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetDocumentCommand extends $Command<GetDocumentCommandInput, GetDocumentCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetDocumentCommandInput;
            constructor(input: GetDocumentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDocumentCommandInput, GetDocumentCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetInventoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetInventoryResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { GetInventoryRequest } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_2";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetInventoryCommandInput extends GetInventoryRequest {
    }
    export interface GetInventoryCommandOutput extends GetInventoryResult, __MetadataBearer {
    }
    /**
        * <p>Query inventory information. This includes managed node status, such as <code>Stopped</code>
        *    or <code>Terminated</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetInventoryCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetInventoryCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetInventoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInventoryCommandInput} for command's `input` shape.
        * @see {@link GetInventoryCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetInventoryCommand extends $Command<GetInventoryCommandInput, GetInventoryCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetInventoryCommandInput;
            constructor(input: GetInventoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInventoryCommandInput, GetInventoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetInventorySchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetInventorySchemaRequest, GetInventorySchemaResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetInventorySchemaCommandInput extends GetInventorySchemaRequest {
    }
    export interface GetInventorySchemaCommandOutput extends GetInventorySchemaResult, __MetadataBearer {
    }
    /**
        * <p>Return a list of inventory type names for the account, or return a list of attribute names
        *    for a specific Inventory item type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetInventorySchemaCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetInventorySchemaCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetInventorySchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInventorySchemaCommandInput} for command's `input` shape.
        * @see {@link GetInventorySchemaCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetInventorySchemaCommand extends $Command<GetInventorySchemaCommandInput, GetInventorySchemaCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetInventorySchemaCommandInput;
            constructor(input: GetInventorySchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInventorySchemaCommandInput, GetInventorySchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetMaintenanceWindowRequest, GetMaintenanceWindowResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetMaintenanceWindowCommandInput extends GetMaintenanceWindowRequest {
    }
    export interface GetMaintenanceWindowCommandOutput extends GetMaintenanceWindowResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves a maintenance window.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetMaintenanceWindowCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetMaintenanceWindowCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetMaintenanceWindowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMaintenanceWindowCommandInput} for command's `input` shape.
        * @see {@link GetMaintenanceWindowCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetMaintenanceWindowCommand extends $Command<GetMaintenanceWindowCommandInput, GetMaintenanceWindowCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetMaintenanceWindowCommandInput;
            constructor(input: GetMaintenanceWindowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMaintenanceWindowCommandInput, GetMaintenanceWindowCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetMaintenanceWindowExecutionRequest, GetMaintenanceWindowExecutionResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetMaintenanceWindowExecutionCommandInput extends GetMaintenanceWindowExecutionRequest {
    }
    export interface GetMaintenanceWindowExecutionCommandOutput extends GetMaintenanceWindowExecutionResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves details about a specific a maintenance window execution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetMaintenanceWindowExecutionCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetMaintenanceWindowExecutionCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetMaintenanceWindowExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMaintenanceWindowExecutionCommandInput} for command's `input` shape.
        * @see {@link GetMaintenanceWindowExecutionCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetMaintenanceWindowExecutionCommand extends $Command<GetMaintenanceWindowExecutionCommandInput, GetMaintenanceWindowExecutionCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetMaintenanceWindowExecutionCommandInput;
            constructor(input: GetMaintenanceWindowExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMaintenanceWindowExecutionCommandInput, GetMaintenanceWindowExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowExecutionTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetMaintenanceWindowExecutionTaskRequest, GetMaintenanceWindowExecutionTaskResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetMaintenanceWindowExecutionTaskCommandInput extends GetMaintenanceWindowExecutionTaskRequest {
    }
    export interface GetMaintenanceWindowExecutionTaskCommandOutput extends GetMaintenanceWindowExecutionTaskResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the details about a specific task run as part of a maintenance window
        *    execution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetMaintenanceWindowExecutionTaskCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetMaintenanceWindowExecutionTaskCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetMaintenanceWindowExecutionTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMaintenanceWindowExecutionTaskCommandInput} for command's `input` shape.
        * @see {@link GetMaintenanceWindowExecutionTaskCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetMaintenanceWindowExecutionTaskCommand extends $Command<GetMaintenanceWindowExecutionTaskCommandInput, GetMaintenanceWindowExecutionTaskCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetMaintenanceWindowExecutionTaskCommandInput;
            constructor(input: GetMaintenanceWindowExecutionTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMaintenanceWindowExecutionTaskCommandInput, GetMaintenanceWindowExecutionTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowExecutionTaskInvocationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetMaintenanceWindowExecutionTaskInvocationRequest, GetMaintenanceWindowExecutionTaskInvocationResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetMaintenanceWindowExecutionTaskInvocationCommandInput extends GetMaintenanceWindowExecutionTaskInvocationRequest {
    }
    export interface GetMaintenanceWindowExecutionTaskInvocationCommandOutput extends GetMaintenanceWindowExecutionTaskInvocationResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a specific task running on a specific target.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetMaintenanceWindowExecutionTaskInvocationCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetMaintenanceWindowExecutionTaskInvocationCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetMaintenanceWindowExecutionTaskInvocationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMaintenanceWindowExecutionTaskInvocationCommandInput} for command's `input` shape.
        * @see {@link GetMaintenanceWindowExecutionTaskInvocationCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetMaintenanceWindowExecutionTaskInvocationCommand extends $Command<GetMaintenanceWindowExecutionTaskInvocationCommandInput, GetMaintenanceWindowExecutionTaskInvocationCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetMaintenanceWindowExecutionTaskInvocationCommandInput;
            constructor(input: GetMaintenanceWindowExecutionTaskInvocationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMaintenanceWindowExecutionTaskInvocationCommandInput, GetMaintenanceWindowExecutionTaskInvocationCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetMaintenanceWindowTaskRequest, GetMaintenanceWindowTaskResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetMaintenanceWindowTaskCommandInput extends GetMaintenanceWindowTaskRequest {
    }
    export interface GetMaintenanceWindowTaskCommandOutput extends GetMaintenanceWindowTaskResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the details of a maintenance window task.</p>
        *          <note>
        *             <p>For maintenance window tasks without a specified target, you can't supply values for
        *      <code>--max-errors</code> and <code>--max-concurrency</code>. Instead, the system inserts a
        *     placeholder value of <code>1</code>, which may be reported in the response to this command.
        *     These values don't affect the running of your task and can be ignored.</p>
        *          </note>
        *          <p>To retrieve a list of tasks in a maintenance window, instead use the <a>DescribeMaintenanceWindowTasks</a> command.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetMaintenanceWindowTaskCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetMaintenanceWindowTaskCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetMaintenanceWindowTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMaintenanceWindowTaskCommandInput} for command's `input` shape.
        * @see {@link GetMaintenanceWindowTaskCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetMaintenanceWindowTaskCommand extends $Command<GetMaintenanceWindowTaskCommandInput, GetMaintenanceWindowTaskCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetMaintenanceWindowTaskCommandInput;
            constructor(input: GetMaintenanceWindowTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMaintenanceWindowTaskCommandInput, GetMaintenanceWindowTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetOpsItemCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetOpsItemRequest, GetOpsItemResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetOpsItemCommandInput extends GetOpsItemRequest {
    }
    export interface GetOpsItemCommandOutput extends GetOpsItemResponse, __MetadataBearer {
    }
    /**
        * <p>Get information about an OpsItem by using the ID. You must have permission in Identity and Access Management (IAM) to view information about an OpsItem. For more information,
        *    see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
        *     OpsCenter</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        *          <p>Operations engineers and IT professionals use Amazon Web Services Systems Manager OpsCenter to view, investigate, and
        *    remediate operational issues impacting the performance and health of their Amazon Web Services resources. For
        *    more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">OpsCenter</a> in the
        *     <i>Amazon Web Services Systems Manager User Guide</i>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetOpsItemCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetOpsItemCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetOpsItemCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOpsItemCommandInput} for command's `input` shape.
        * @see {@link GetOpsItemCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetOpsItemCommand extends $Command<GetOpsItemCommandInput, GetOpsItemCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetOpsItemCommandInput;
            constructor(input: GetOpsItemCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOpsItemCommandInput, GetOpsItemCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetOpsMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetOpsMetadataRequest, GetOpsMetadataResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetOpsMetadataCommandInput extends GetOpsMetadataRequest {
    }
    export interface GetOpsMetadataCommandOutput extends GetOpsMetadataResult, __MetadataBearer {
    }
    /**
        * <p>View operational metadata related to an application in Application Manager.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetOpsMetadataCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetOpsMetadataCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetOpsMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOpsMetadataCommandInput} for command's `input` shape.
        * @see {@link GetOpsMetadataCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetOpsMetadataCommand extends $Command<GetOpsMetadataCommandInput, GetOpsMetadataCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetOpsMetadataCommandInput;
            constructor(input: GetOpsMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOpsMetadataCommandInput, GetOpsMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetOpsSummaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetOpsSummaryResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { GetOpsSummaryRequest } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_2";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetOpsSummaryCommandInput extends GetOpsSummaryRequest {
    }
    export interface GetOpsSummaryCommandOutput extends GetOpsSummaryResult, __MetadataBearer {
    }
    /**
        * <p>View a summary of operations metadata (OpsData) based on specified filters and aggregators.
        *    OpsData can include information about Amazon Web Services Systems Manager OpsCenter operational workitems (OpsItems) as
        *    well as information about any Amazon Web Services resource or service configured to report OpsData to Amazon Web Services Systems Manager
        *    Explorer. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetOpsSummaryCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetOpsSummaryCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetOpsSummaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOpsSummaryCommandInput} for command's `input` shape.
        * @see {@link GetOpsSummaryCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetOpsSummaryCommand extends $Command<GetOpsSummaryCommandInput, GetOpsSummaryCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetOpsSummaryCommandInput;
            constructor(input: GetOpsSummaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOpsSummaryCommandInput, GetOpsSummaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetParameterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetParameterRequest, GetParameterResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetParameterCommandInput extends GetParameterRequest {
    }
    export interface GetParameterCommandOutput extends GetParameterResult, __MetadataBearer {
    }
    /**
        * <p>Get information about a single parameter by specifying the parameter name.</p>
        *          <note>
        *             <p>To get information about more than one parameter at a time, use the <a>GetParameters</a> operation.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetParameterCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetParameterCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetParameterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetParameterCommandInput} for command's `input` shape.
        * @see {@link GetParameterCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetParameterCommand extends $Command<GetParameterCommandInput, GetParameterCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetParameterCommandInput;
            constructor(input: GetParameterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetParameterCommandInput, GetParameterCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetParameterHistoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetParameterHistoryRequest, GetParameterHistoryResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetParameterHistoryCommandInput extends GetParameterHistoryRequest {
    }
    export interface GetParameterHistoryCommandOutput extends GetParameterHistoryResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the history of all changes to a parameter.</p>
        *          <important>
        *             <p>If you change the KMS key alias for the KMS key used to encrypt a parameter, then you must
        *     also update the key alias the parameter uses to reference KMS. Otherwise,
        *      <code>GetParameterHistory</code> retrieves whatever the original key alias was
        *     referencing.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetParameterHistoryCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetParameterHistoryCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetParameterHistoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetParameterHistoryCommandInput} for command's `input` shape.
        * @see {@link GetParameterHistoryCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetParameterHistoryCommand extends $Command<GetParameterHistoryCommandInput, GetParameterHistoryCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetParameterHistoryCommandInput;
            constructor(input: GetParameterHistoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetParameterHistoryCommandInput, GetParameterHistoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetParametersByPathCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetParametersByPathRequest, GetParametersByPathResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetParametersByPathCommandInput extends GetParametersByPathRequest {
    }
    export interface GetParametersByPathCommandOutput extends GetParametersByPathResult, __MetadataBearer {
    }
    /**
        * <p>Retrieve information about one or more parameters in a specific hierarchy. </p>
        *          <p>Request results are returned on a best-effort basis. If you specify <code>MaxResults</code>
        *    in the request, the response includes information up to the limit specified. The number of items
        *    returned, however, can be between zero and the value of <code>MaxResults</code>. If the service
        *    reaches an internal limit while processing the results, it stops the operation and returns the
        *    matching values up to that point and a <code>NextToken</code>. You can specify the
        *     <code>NextToken</code> in a subsequent call to get the next set of results.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetParametersByPathCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetParametersByPathCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetParametersByPathCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetParametersByPathCommandInput} for command's `input` shape.
        * @see {@link GetParametersByPathCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetParametersByPathCommand extends $Command<GetParametersByPathCommandInput, GetParametersByPathCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetParametersByPathCommandInput;
            constructor(input: GetParametersByPathCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetParametersByPathCommandInput, GetParametersByPathCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetParametersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetParametersRequest, GetParametersResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetParametersCommandInput extends GetParametersRequest {
    }
    export interface GetParametersCommandOutput extends GetParametersResult, __MetadataBearer {
    }
    /**
        * <p>Get information about one or more parameters by specifying multiple parameter names.</p>
        *          <note>
        *             <p>To get information about a single parameter, you can use the <a>GetParameter</a>
        *     operation instead.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetParametersCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetParametersCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetParametersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetParametersCommandInput} for command's `input` shape.
        * @see {@link GetParametersCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetParametersCommand extends $Command<GetParametersCommandInput, GetParametersCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetParametersCommandInput;
            constructor(input: GetParametersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetParametersCommandInput, GetParametersCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetPatchBaselineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetPatchBaselineRequest, GetPatchBaselineResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetPatchBaselineCommandInput extends GetPatchBaselineRequest {
    }
    export interface GetPatchBaselineCommandOutput extends GetPatchBaselineResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about a patch baseline.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetPatchBaselineCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetPatchBaselineCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetPatchBaselineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPatchBaselineCommandInput} for command's `input` shape.
        * @see {@link GetPatchBaselineCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetPatchBaselineCommand extends $Command<GetPatchBaselineCommandInput, GetPatchBaselineCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetPatchBaselineCommandInput;
            constructor(input: GetPatchBaselineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPatchBaselineCommandInput, GetPatchBaselineCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetPatchBaselineForPatchGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetPatchBaselineForPatchGroupRequest, GetPatchBaselineForPatchGroupResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetPatchBaselineForPatchGroupCommandInput extends GetPatchBaselineForPatchGroupRequest {
    }
    export interface GetPatchBaselineForPatchGroupCommandOutput extends GetPatchBaselineForPatchGroupResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves the patch baseline that should be used for the specified patch group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetPatchBaselineForPatchGroupCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetPatchBaselineForPatchGroupCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetPatchBaselineForPatchGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPatchBaselineForPatchGroupCommandInput} for command's `input` shape.
        * @see {@link GetPatchBaselineForPatchGroupCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetPatchBaselineForPatchGroupCommand extends $Command<GetPatchBaselineForPatchGroupCommandInput, GetPatchBaselineForPatchGroupCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetPatchBaselineForPatchGroupCommandInput;
            constructor(input: GetPatchBaselineForPatchGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPatchBaselineForPatchGroupCommandInput, GetPatchBaselineForPatchGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetServiceSettingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetServiceSettingRequest, GetServiceSettingResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface GetServiceSettingCommandInput extends GetServiceSettingRequest {
    }
    export interface GetServiceSettingCommandOutput extends GetServiceSettingResult, __MetadataBearer {
    }
    /**
        * <p>
        *             <code>ServiceSetting</code> is an account-level setting for an Amazon Web Services service. This setting
        *    defines how a user interacts with or uses a service or a feature of a service. For example, if an
        *    Amazon Web Services service charges money to the account based on feature or service usage, then the Amazon Web Services
        *    service team might create a default setting of <code>false</code>. This means the user can't use
        *    this feature unless they change the setting to <code>true</code> and intentionally opt in for a
        *    paid feature.</p>
        *          <p>Services map a <code>SettingId</code> object to a setting value. Amazon Web Services services teams define
        *    the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>,
        *    but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code>
        *    permission for the setting. Use the <a>UpdateServiceSetting</a> API operation to
        *    change the default setting. Or use the <a>ResetServiceSetting</a> to change the value
        *    back to the original value defined by the Amazon Web Services service team.</p>
        *          <p>Query the current service setting for the Amazon Web Services account. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, GetServiceSettingCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, GetServiceSettingCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new GetServiceSettingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetServiceSettingCommandInput} for command's `input` shape.
        * @see {@link GetServiceSettingCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class GetServiceSettingCommand extends $Command<GetServiceSettingCommandInput, GetServiceSettingCommandOutput, SSMClientResolvedConfig> {
            readonly input: GetServiceSettingCommandInput;
            constructor(input: GetServiceSettingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetServiceSettingCommandInput, GetServiceSettingCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/LabelParameterVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { LabelParameterVersionRequest, LabelParameterVersionResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface LabelParameterVersionCommandInput extends LabelParameterVersionRequest {
    }
    export interface LabelParameterVersionCommandOutput extends LabelParameterVersionResult, __MetadataBearer {
    }
    /**
        * <p>A parameter label is a user-defined alias to help you manage different versions of a
        *    parameter. When you modify a parameter, Amazon Web Services Systems Manager automatically saves a new version and
        *    increments the version number by one. A label can help you remember the purpose of a parameter
        *    when there are multiple versions. </p>
        *          <p>Parameter labels have the following requirements and restrictions.</p>
        *          <ul>
        *             <li>
        *                <p>A version of a parameter can have a maximum of 10 labels.</p>
        *             </li>
        *             <li>
        *                <p>You can't attach the same label to different versions of the same parameter. For example,
        *      if version 1 has the label Production, then you can't attach Production to version 2.</p>
        *             </li>
        *             <li>
        *                <p>You can move a label from one version of a parameter to another.</p>
        *             </li>
        *             <li>
        *                <p>You can't create a label when you create a new parameter. You must attach a label to a
        *      specific version of a parameter.</p>
        *             </li>
        *             <li>
        *                <p>If you no longer want to use a parameter label, then you can either delete it or move it
        *      to a different version of a parameter.</p>
        *             </li>
        *             <li>
        *                <p>A label can have a maximum of 100 characters.</p>
        *             </li>
        *             <li>
        *                <p>Labels can contain letters (case sensitive), numbers, periods (.), hyphens (-), or
        *      underscores (_).</p>
        *             </li>
        *             <li>
        *                <p>Labels can't begin with a number, "<code>aws</code>" or "<code>ssm</code>" (not case
        *      sensitive). If a label fails to meet these requirements, then the label isn't associated with a
        *      parameter and the system displays it in the list of InvalidLabels.</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, LabelParameterVersionCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, LabelParameterVersionCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new LabelParameterVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link LabelParameterVersionCommandInput} for command's `input` shape.
        * @see {@link LabelParameterVersionCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class LabelParameterVersionCommand extends $Command<LabelParameterVersionCommandInput, LabelParameterVersionCommandOutput, SSMClientResolvedConfig> {
            readonly input: LabelParameterVersionCommandInput;
            constructor(input: LabelParameterVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<LabelParameterVersionCommandInput, LabelParameterVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListAssociationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAssociationsRequest, ListAssociationsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListAssociationsCommandInput extends ListAssociationsRequest {
    }
    export interface ListAssociationsCommandOutput extends ListAssociationsResult, __MetadataBearer {
    }
    /**
        * <p>Returns all State Manager associations in the current Amazon Web Services account and Amazon Web Services Region. You
        *    can limit the results to a specific State Manager association document or managed node by
        *    specifying a filter. State Manager is a capability of Amazon Web Services Systems Manager.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListAssociationsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListAssociationsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListAssociationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssociationsCommandInput} for command's `input` shape.
        * @see {@link ListAssociationsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListAssociationsCommand extends $Command<ListAssociationsCommandInput, ListAssociationsCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListAssociationsCommandInput;
            constructor(input: ListAssociationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssociationsCommandInput, ListAssociationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListAssociationVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAssociationVersionsRequest, ListAssociationVersionsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListAssociationVersionsCommandInput extends ListAssociationVersionsRequest {
    }
    export interface ListAssociationVersionsCommandOutput extends ListAssociationVersionsResult, __MetadataBearer {
    }
    /**
        * <p>Retrieves all versions of an association for a specific association ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListAssociationVersionsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListAssociationVersionsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListAssociationVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssociationVersionsCommandInput} for command's `input` shape.
        * @see {@link ListAssociationVersionsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListAssociationVersionsCommand extends $Command<ListAssociationVersionsCommandInput, ListAssociationVersionsCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListAssociationVersionsCommandInput;
            constructor(input: ListAssociationVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssociationVersionsCommandInput, ListAssociationVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListCommandInvocationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListCommandInvocationsRequest, ListCommandInvocationsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListCommandInvocationsCommandInput extends ListCommandInvocationsRequest {
    }
    export interface ListCommandInvocationsCommandOutput extends ListCommandInvocationsResult, __MetadataBearer {
    }
    /**
        * <p>An invocation is copy of a command sent to a specific managed node. A command can apply to
        *    one or more managed nodes. A command invocation applies to one managed node. For example, if a
        *    user runs <code>SendCommand</code> against three managed nodes, then a command invocation is
        *    created for each requested managed node ID. <code>ListCommandInvocations</code> provide status
        *    about command execution.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListCommandInvocationsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListCommandInvocationsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListCommandInvocationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCommandInvocationsCommandInput} for command's `input` shape.
        * @see {@link ListCommandInvocationsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListCommandInvocationsCommand extends $Command<ListCommandInvocationsCommandInput, ListCommandInvocationsCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListCommandInvocationsCommandInput;
            constructor(input: ListCommandInvocationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCommandInvocationsCommandInput, ListCommandInvocationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListCommandsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListCommandsRequest, ListCommandsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListCommandsCommandInput extends ListCommandsRequest {
    }
    export interface ListCommandsCommandOutput extends ListCommandsResult, __MetadataBearer {
    }
    /**
        * <p>Lists the commands requested by users of the Amazon Web Services account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListCommandsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListCommandsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListCommandsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListCommandsCommandInput} for command's `input` shape.
        * @see {@link ListCommandsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListCommandsCommand extends $Command<ListCommandsCommandInput, ListCommandsCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListCommandsCommandInput;
            constructor(input: ListCommandsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListCommandsCommandInput, ListCommandsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListComplianceItemsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListComplianceItemsRequest, ListComplianceItemsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListComplianceItemsCommandInput extends ListComplianceItemsRequest {
    }
    export interface ListComplianceItemsCommandOutput extends ListComplianceItemsResult, __MetadataBearer {
    }
    /**
        * <p>For a specified resource ID, this API operation returns a list of compliance statuses for
        *    different resource types. Currently, you can only specify one resource ID per call. List results
        *    depend on the criteria specified in the filter.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListComplianceItemsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListComplianceItemsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListComplianceItemsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListComplianceItemsCommandInput} for command's `input` shape.
        * @see {@link ListComplianceItemsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListComplianceItemsCommand extends $Command<ListComplianceItemsCommandInput, ListComplianceItemsCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListComplianceItemsCommandInput;
            constructor(input: ListComplianceItemsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListComplianceItemsCommandInput, ListComplianceItemsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListComplianceSummariesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListComplianceSummariesRequest, ListComplianceSummariesResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListComplianceSummariesCommandInput extends ListComplianceSummariesRequest {
    }
    export interface ListComplianceSummariesCommandOutput extends ListComplianceSummariesResult, __MetadataBearer {
    }
    /**
        * <p>Returns a summary count of compliant and non-compliant resources for a compliance type. For
        *    example, this call can return State Manager associations, patches, or custom compliance types
        *    according to the filter criteria that you specify.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListComplianceSummariesCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListComplianceSummariesCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListComplianceSummariesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListComplianceSummariesCommandInput} for command's `input` shape.
        * @see {@link ListComplianceSummariesCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListComplianceSummariesCommand extends $Command<ListComplianceSummariesCommandInput, ListComplianceSummariesCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListComplianceSummariesCommandInput;
            constructor(input: ListComplianceSummariesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListComplianceSummariesCommandInput, ListComplianceSummariesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListDocumentMetadataHistoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDocumentMetadataHistoryRequest, ListDocumentMetadataHistoryResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListDocumentMetadataHistoryCommandInput extends ListDocumentMetadataHistoryRequest {
    }
    export interface ListDocumentMetadataHistoryCommandOutput extends ListDocumentMetadataHistoryResponse, __MetadataBearer {
    }
    /**
        * <p>Information about approval reviews for a version of a change template in Change Manager.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListDocumentMetadataHistoryCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListDocumentMetadataHistoryCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListDocumentMetadataHistoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDocumentMetadataHistoryCommandInput} for command's `input` shape.
        * @see {@link ListDocumentMetadataHistoryCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListDocumentMetadataHistoryCommand extends $Command<ListDocumentMetadataHistoryCommandInput, ListDocumentMetadataHistoryCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListDocumentMetadataHistoryCommandInput;
            constructor(input: ListDocumentMetadataHistoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDocumentMetadataHistoryCommandInput, ListDocumentMetadataHistoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListDocumentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDocumentsRequest, ListDocumentsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListDocumentsCommandInput extends ListDocumentsRequest {
    }
    export interface ListDocumentsCommandOutput extends ListDocumentsResult, __MetadataBearer {
    }
    /**
        * <p>Returns all Systems Manager (SSM) documents in the current Amazon Web Services account and Amazon Web Services Region. You can
        *    limit the results of this request by using a filter.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListDocumentsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListDocumentsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListDocumentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDocumentsCommandInput} for command's `input` shape.
        * @see {@link ListDocumentsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListDocumentsCommand extends $Command<ListDocumentsCommandInput, ListDocumentsCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListDocumentsCommandInput;
            constructor(input: ListDocumentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDocumentsCommandInput, ListDocumentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListDocumentVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListDocumentVersionsRequest, ListDocumentVersionsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListDocumentVersionsCommandInput extends ListDocumentVersionsRequest {
    }
    export interface ListDocumentVersionsCommandOutput extends ListDocumentVersionsResult, __MetadataBearer {
    }
    /**
        * <p>List all versions for a document.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListDocumentVersionsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListDocumentVersionsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListDocumentVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDocumentVersionsCommandInput} for command's `input` shape.
        * @see {@link ListDocumentVersionsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListDocumentVersionsCommand extends $Command<ListDocumentVersionsCommandInput, ListDocumentVersionsCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListDocumentVersionsCommandInput;
            constructor(input: ListDocumentVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDocumentVersionsCommandInput, ListDocumentVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListInventoryEntriesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListInventoryEntriesRequest, ListInventoryEntriesResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListInventoryEntriesCommandInput extends ListInventoryEntriesRequest {
    }
    export interface ListInventoryEntriesCommandOutput extends ListInventoryEntriesResult, __MetadataBearer {
    }
    /**
        * <p>A list of inventory items returned by the request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListInventoryEntriesCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListInventoryEntriesCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListInventoryEntriesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListInventoryEntriesCommandInput} for command's `input` shape.
        * @see {@link ListInventoryEntriesCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListInventoryEntriesCommand extends $Command<ListInventoryEntriesCommandInput, ListInventoryEntriesCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListInventoryEntriesCommandInput;
            constructor(input: ListInventoryEntriesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListInventoryEntriesCommandInput, ListInventoryEntriesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListOpsItemEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListOpsItemEventsRequest, ListOpsItemEventsResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListOpsItemEventsCommandInput extends ListOpsItemEventsRequest {
    }
    export interface ListOpsItemEventsCommandOutput extends ListOpsItemEventsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all OpsItem events in the current Amazon Web Services Region and Amazon Web Services account. You can
        *    limit the results to events associated with specific OpsItems by specifying a filter.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListOpsItemEventsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListOpsItemEventsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListOpsItemEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOpsItemEventsCommandInput} for command's `input` shape.
        * @see {@link ListOpsItemEventsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListOpsItemEventsCommand extends $Command<ListOpsItemEventsCommandInput, ListOpsItemEventsCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListOpsItemEventsCommandInput;
            constructor(input: ListOpsItemEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOpsItemEventsCommandInput, ListOpsItemEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListOpsItemRelatedItemsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListOpsItemRelatedItemsRequest, ListOpsItemRelatedItemsResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListOpsItemRelatedItemsCommandInput extends ListOpsItemRelatedItemsRequest {
    }
    export interface ListOpsItemRelatedItemsCommandOutput extends ListOpsItemRelatedItemsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all related-item resources associated with a Systems Manager OpsCenter OpsItem. OpsCenter is a
        *    capability of Amazon Web Services Systems Manager.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListOpsItemRelatedItemsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListOpsItemRelatedItemsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListOpsItemRelatedItemsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOpsItemRelatedItemsCommandInput} for command's `input` shape.
        * @see {@link ListOpsItemRelatedItemsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListOpsItemRelatedItemsCommand extends $Command<ListOpsItemRelatedItemsCommandInput, ListOpsItemRelatedItemsCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListOpsItemRelatedItemsCommandInput;
            constructor(input: ListOpsItemRelatedItemsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOpsItemRelatedItemsCommandInput, ListOpsItemRelatedItemsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListOpsMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListOpsMetadataRequest, ListOpsMetadataResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListOpsMetadataCommandInput extends ListOpsMetadataRequest {
    }
    export interface ListOpsMetadataCommandOutput extends ListOpsMetadataResult, __MetadataBearer {
    }
    /**
        * <p>Amazon Web Services Systems Manager calls this API operation when displaying all Application Manager OpsMetadata objects or
        *    blobs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListOpsMetadataCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListOpsMetadataCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListOpsMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOpsMetadataCommandInput} for command's `input` shape.
        * @see {@link ListOpsMetadataCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListOpsMetadataCommand extends $Command<ListOpsMetadataCommandInput, ListOpsMetadataCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListOpsMetadataCommandInput;
            constructor(input: ListOpsMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOpsMetadataCommandInput, ListOpsMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListResourceComplianceSummariesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListResourceComplianceSummariesRequest, ListResourceComplianceSummariesResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListResourceComplianceSummariesCommandInput extends ListResourceComplianceSummariesRequest {
    }
    export interface ListResourceComplianceSummariesCommandOutput extends ListResourceComplianceSummariesResult, __MetadataBearer {
    }
    /**
        * <p>Returns a resource-level summary count. The summary includes information about compliant and
        *    non-compliant statuses and detailed compliance-item severity counts, according to the filter
        *    criteria you specify.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListResourceComplianceSummariesCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListResourceComplianceSummariesCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListResourceComplianceSummariesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListResourceComplianceSummariesCommandInput} for command's `input` shape.
        * @see {@link ListResourceComplianceSummariesCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListResourceComplianceSummariesCommand extends $Command<ListResourceComplianceSummariesCommandInput, ListResourceComplianceSummariesCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListResourceComplianceSummariesCommandInput;
            constructor(input: ListResourceComplianceSummariesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListResourceComplianceSummariesCommandInput, ListResourceComplianceSummariesCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListResourceDataSyncCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListResourceDataSyncRequest, ListResourceDataSyncResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListResourceDataSyncCommandInput extends ListResourceDataSyncRequest {
    }
    export interface ListResourceDataSyncCommandOutput extends ListResourceDataSyncResult, __MetadataBearer {
    }
    /**
        * <p>Lists your resource data sync configurations. Includes information about the last time a
        *    sync attempted to start, the last sync status, and the last time a sync successfully
        *    completed.</p>
        *          <p>The number of sync configurations might be too large to return using a single call to
        *     <code>ListResourceDataSync</code>. You can limit the number of sync configurations returned by
        *    using the <code>MaxResults</code> parameter. To determine whether there are more sync
        *    configurations to list, check the value of <code>NextToken</code> in the output. If there are
        *    more sync configurations to list, you can request them by specifying the <code>NextToken</code>
        *    returned in the call to the parameter of a subsequent call. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListResourceDataSyncCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListResourceDataSyncCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListResourceDataSyncCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListResourceDataSyncCommandInput} for command's `input` shape.
        * @see {@link ListResourceDataSyncCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListResourceDataSyncCommand extends $Command<ListResourceDataSyncCommandInput, ListResourceDataSyncCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListResourceDataSyncCommandInput;
            constructor(input: ListResourceDataSyncCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListResourceDataSyncCommandInput, ListResourceDataSyncCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResult, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the tags assigned to the specified resource.</p>
        *          <p>For information about the ID format for each supported resource type, see <a>AddTagsToResource</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ListTagsForResourceCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ListTagsForResourceCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, SSMClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ModifyDocumentPermissionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ModifyDocumentPermissionRequest, ModifyDocumentPermissionResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ModifyDocumentPermissionCommandInput extends ModifyDocumentPermissionRequest {
    }
    export interface ModifyDocumentPermissionCommandOutput extends ModifyDocumentPermissionResponse, __MetadataBearer {
    }
    /**
        * <p>Shares a Amazon Web Services Systems Manager document (SSM document)publicly or privately. If you share a document
        *    privately, you must specify the Amazon Web Services user account IDs for those people who can use the
        *    document. If you share a document publicly, you must specify <i>All</i> as the
        *    account ID.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ModifyDocumentPermissionCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ModifyDocumentPermissionCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ModifyDocumentPermissionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ModifyDocumentPermissionCommandInput} for command's `input` shape.
        * @see {@link ModifyDocumentPermissionCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ModifyDocumentPermissionCommand extends $Command<ModifyDocumentPermissionCommandInput, ModifyDocumentPermissionCommandOutput, SSMClientResolvedConfig> {
            readonly input: ModifyDocumentPermissionCommandInput;
            constructor(input: ModifyDocumentPermissionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ModifyDocumentPermissionCommandInput, ModifyDocumentPermissionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/PutComplianceItemsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutComplianceItemsRequest, PutComplianceItemsResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface PutComplianceItemsCommandInput extends PutComplianceItemsRequest {
    }
    export interface PutComplianceItemsCommandOutput extends PutComplianceItemsResult, __MetadataBearer {
    }
    /**
        * <p>Registers a compliance type and other compliance details on a designated resource. This
        *    operation lets you register custom compliance details with a resource. This call overwrites
        *    existing compliance information on the resource, so you must provide a full list of compliance
        *    items each time that you send the request.</p>
        *          <p>ComplianceType can be one of the following:</p>
        *          <ul>
        *             <li>
        *                <p>ExecutionId: The execution ID when the patch, association, or custom compliance item was
        *      applied.</p>
        *             </li>
        *             <li>
        *                <p>ExecutionType: Specify patch, association, or Custom:<code>string</code>.</p>
        *             </li>
        *             <li>
        *                <p>ExecutionTime. The time the patch, association, or custom compliance item was applied to
        *      the managed node.</p>
        *             </li>
        *             <li>
        *                <p>Id: The patch, association, or custom compliance ID.</p>
        *             </li>
        *             <li>
        *                <p>Title: A title.</p>
        *             </li>
        *             <li>
        *                <p>Status: The status of the compliance item. For example, <code>approved</code> for patches,
        *      or <code>Failed</code> for associations.</p>
        *             </li>
        *             <li>
        *                <p>Severity: A patch severity. For example, <code>critical</code>.</p>
        *             </li>
        *             <li>
        *                <p>DocumentName: An SSM document name. For example, <code>AWS-RunPatchBaseline</code>.</p>
        *             </li>
        *             <li>
        *                <p>DocumentVersion: An SSM document version number. For example, 4.</p>
        *             </li>
        *             <li>
        *                <p>Classification: A patch classification. For example, <code>security updates</code>.</p>
        *             </li>
        *             <li>
        *                <p>PatchBaselineId: A patch baseline ID.</p>
        *             </li>
        *             <li>
        *                <p>PatchSeverity: A patch severity. For example, <code>Critical</code>.</p>
        *             </li>
        *             <li>
        *                <p>PatchState: A patch state. For example, <code>InstancesWithFailedPatches</code>.</p>
        *             </li>
        *             <li>
        *                <p>PatchGroup: The name of a patch group.</p>
        *             </li>
        *             <li>
        *                <p>InstalledTime: The time the association, patch, or custom compliance item was applied to
        *      the resource. Specify the time by using the following format: yyyy-MM-dd'T'HH:mm:ss'Z'</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, PutComplianceItemsCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, PutComplianceItemsCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new PutComplianceItemsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutComplianceItemsCommandInput} for command's `input` shape.
        * @see {@link PutComplianceItemsCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class PutComplianceItemsCommand extends $Command<PutComplianceItemsCommandInput, PutComplianceItemsCommandOutput, SSMClientResolvedConfig> {
            readonly input: PutComplianceItemsCommandInput;
            constructor(input: PutComplianceItemsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutComplianceItemsCommandInput, PutComplianceItemsCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/PutInventoryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutInventoryRequest, PutInventoryResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface PutInventoryCommandInput extends PutInventoryRequest {
    }
    export interface PutInventoryCommandOutput extends PutInventoryResult, __MetadataBearer {
    }
    /**
        * <p>Bulk update custom inventory items on one or more managed nodes. The request adds an
        *    inventory item, if it doesn't already exist, or updates an inventory item, if it does
        *    exist.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, PutInventoryCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, PutInventoryCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new PutInventoryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutInventoryCommandInput} for command's `input` shape.
        * @see {@link PutInventoryCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class PutInventoryCommand extends $Command<PutInventoryCommandInput, PutInventoryCommandOutput, SSMClientResolvedConfig> {
            readonly input: PutInventoryCommandInput;
            constructor(input: PutInventoryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutInventoryCommandInput, PutInventoryCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/PutParameterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutParameterRequest, PutParameterResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface PutParameterCommandInput extends PutParameterRequest {
    }
    export interface PutParameterCommandOutput extends PutParameterResult, __MetadataBearer {
    }
    /**
        * <p>Add a parameter to the system.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, PutParameterCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, PutParameterCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new PutParameterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutParameterCommandInput} for command's `input` shape.
        * @see {@link PutParameterCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class PutParameterCommand extends $Command<PutParameterCommandInput, PutParameterCommandOutput, SSMClientResolvedConfig> {
            readonly input: PutParameterCommandInput;
            constructor(input: PutParameterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutParameterCommandInput, PutParameterCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RegisterDefaultPatchBaselineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RegisterDefaultPatchBaselineRequest, RegisterDefaultPatchBaselineResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface RegisterDefaultPatchBaselineCommandInput extends RegisterDefaultPatchBaselineRequest {
    }
    export interface RegisterDefaultPatchBaselineCommandOutput extends RegisterDefaultPatchBaselineResult, __MetadataBearer {
    }
    /**
        * <p>Defines the default patch baseline for the relevant operating system.</p>
        *          <p>To reset the Amazon Web Services-predefined patch baseline as the default, specify the full patch baseline
        *    Amazon Resource Name (ARN) as the baseline ID value. For example, for CentOS, specify
        *     <code>arn:aws:ssm:us-east-2:733109147000:patchbaseline/pb-0574b43a65ea646ed</code> instead of
        *     <code>pb-0574b43a65ea646ed</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, RegisterDefaultPatchBaselineCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, RegisterDefaultPatchBaselineCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new RegisterDefaultPatchBaselineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterDefaultPatchBaselineCommandInput} for command's `input` shape.
        * @see {@link RegisterDefaultPatchBaselineCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class RegisterDefaultPatchBaselineCommand extends $Command<RegisterDefaultPatchBaselineCommandInput, RegisterDefaultPatchBaselineCommandOutput, SSMClientResolvedConfig> {
            readonly input: RegisterDefaultPatchBaselineCommandInput;
            constructor(input: RegisterDefaultPatchBaselineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterDefaultPatchBaselineCommandInput, RegisterDefaultPatchBaselineCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RegisterPatchBaselineForPatchGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RegisterPatchBaselineForPatchGroupRequest, RegisterPatchBaselineForPatchGroupResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface RegisterPatchBaselineForPatchGroupCommandInput extends RegisterPatchBaselineForPatchGroupRequest {
    }
    export interface RegisterPatchBaselineForPatchGroupCommandOutput extends RegisterPatchBaselineForPatchGroupResult, __MetadataBearer {
    }
    /**
        * <p>Registers a patch baseline for a patch group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, RegisterPatchBaselineForPatchGroupCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, RegisterPatchBaselineForPatchGroupCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new RegisterPatchBaselineForPatchGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterPatchBaselineForPatchGroupCommandInput} for command's `input` shape.
        * @see {@link RegisterPatchBaselineForPatchGroupCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class RegisterPatchBaselineForPatchGroupCommand extends $Command<RegisterPatchBaselineForPatchGroupCommandInput, RegisterPatchBaselineForPatchGroupCommandOutput, SSMClientResolvedConfig> {
            readonly input: RegisterPatchBaselineForPatchGroupCommandInput;
            constructor(input: RegisterPatchBaselineForPatchGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterPatchBaselineForPatchGroupCommandInput, RegisterPatchBaselineForPatchGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RegisterTargetWithMaintenanceWindowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RegisterTargetWithMaintenanceWindowRequest, RegisterTargetWithMaintenanceWindowResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface RegisterTargetWithMaintenanceWindowCommandInput extends RegisterTargetWithMaintenanceWindowRequest {
    }
    export interface RegisterTargetWithMaintenanceWindowCommandOutput extends RegisterTargetWithMaintenanceWindowResult, __MetadataBearer {
    }
    /**
        * <p>Registers a target with a maintenance window.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, RegisterTargetWithMaintenanceWindowCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, RegisterTargetWithMaintenanceWindowCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new RegisterTargetWithMaintenanceWindowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterTargetWithMaintenanceWindowCommandInput} for command's `input` shape.
        * @see {@link RegisterTargetWithMaintenanceWindowCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class RegisterTargetWithMaintenanceWindowCommand extends $Command<RegisterTargetWithMaintenanceWindowCommandInput, RegisterTargetWithMaintenanceWindowCommandOutput, SSMClientResolvedConfig> {
            readonly input: RegisterTargetWithMaintenanceWindowCommandInput;
            constructor(input: RegisterTargetWithMaintenanceWindowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterTargetWithMaintenanceWindowCommandInput, RegisterTargetWithMaintenanceWindowCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RegisterTaskWithMaintenanceWindowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RegisterTaskWithMaintenanceWindowRequest, RegisterTaskWithMaintenanceWindowResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface RegisterTaskWithMaintenanceWindowCommandInput extends RegisterTaskWithMaintenanceWindowRequest {
    }
    export interface RegisterTaskWithMaintenanceWindowCommandOutput extends RegisterTaskWithMaintenanceWindowResult, __MetadataBearer {
    }
    /**
        * <p>Adds a new task to a maintenance window.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, RegisterTaskWithMaintenanceWindowCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, RegisterTaskWithMaintenanceWindowCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new RegisterTaskWithMaintenanceWindowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterTaskWithMaintenanceWindowCommandInput} for command's `input` shape.
        * @see {@link RegisterTaskWithMaintenanceWindowCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class RegisterTaskWithMaintenanceWindowCommand extends $Command<RegisterTaskWithMaintenanceWindowCommandInput, RegisterTaskWithMaintenanceWindowCommandOutput, SSMClientResolvedConfig> {
            readonly input: RegisterTaskWithMaintenanceWindowCommandInput;
            constructor(input: RegisterTaskWithMaintenanceWindowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterTaskWithMaintenanceWindowCommandInput, RegisterTaskWithMaintenanceWindowCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RemoveTagsFromResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RemoveTagsFromResourceRequest, RemoveTagsFromResourceResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface RemoveTagsFromResourceCommandInput extends RemoveTagsFromResourceRequest {
    }
    export interface RemoveTagsFromResourceCommandOutput extends RemoveTagsFromResourceResult, __MetadataBearer {
    }
    /**
        * <p>Removes tag keys from the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, RemoveTagsFromResourceCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, RemoveTagsFromResourceCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new RemoveTagsFromResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveTagsFromResourceCommandInput} for command's `input` shape.
        * @see {@link RemoveTagsFromResourceCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class RemoveTagsFromResourceCommand extends $Command<RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput, SSMClientResolvedConfig> {
            readonly input: RemoveTagsFromResourceCommandInput;
            constructor(input: RemoveTagsFromResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ResetServiceSettingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ResetServiceSettingRequest, ResetServiceSettingResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ResetServiceSettingCommandInput extends ResetServiceSettingRequest {
    }
    export interface ResetServiceSettingCommandOutput extends ResetServiceSettingResult, __MetadataBearer {
    }
    /**
        * <p>
        *             <code>ServiceSetting</code> is an account-level setting for an Amazon Web Services service. This setting
        *    defines how a user interacts with or uses a service or a feature of a service. For example, if an
        *    Amazon Web Services service charges money to the account based on feature or service usage, then the Amazon Web Services
        *    service team might create a default setting of "false". This means the user can't use this
        *    feature unless they change the setting to "true" and intentionally opt in for a paid
        *    feature.</p>
        *          <p>Services map a <code>SettingId</code> object to a setting value. Amazon Web Services services teams define
        *    the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>,
        *    but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code>
        *    permission for the setting. Use the <a>GetServiceSetting</a> API operation to view the
        *    current value. Use the <a>UpdateServiceSetting</a> API operation to change the default
        *    setting. </p>
        *          <p>Reset the service setting for the account to the default value as provisioned by the Amazon Web Services
        *    service team. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ResetServiceSettingCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ResetServiceSettingCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ResetServiceSettingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResetServiceSettingCommandInput} for command's `input` shape.
        * @see {@link ResetServiceSettingCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ResetServiceSettingCommand extends $Command<ResetServiceSettingCommandInput, ResetServiceSettingCommandOutput, SSMClientResolvedConfig> {
            readonly input: ResetServiceSettingCommandInput;
            constructor(input: ResetServiceSettingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResetServiceSettingCommandInput, ResetServiceSettingCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ResumeSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ResumeSessionRequest, ResumeSessionResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface ResumeSessionCommandInput extends ResumeSessionRequest {
    }
    export interface ResumeSessionCommandOutput extends ResumeSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Reconnects a session to a managed node after it has been disconnected. Connections can be
        *    resumed for disconnected sessions, but not terminated sessions.</p>
        *          <note>
        *             <p>This command is primarily for use by client machines to automatically reconnect during
        *     intermittent network issues. It isn't intended for any other use.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, ResumeSessionCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, ResumeSessionCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new ResumeSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResumeSessionCommandInput} for command's `input` shape.
        * @see {@link ResumeSessionCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class ResumeSessionCommand extends $Command<ResumeSessionCommandInput, ResumeSessionCommandOutput, SSMClientResolvedConfig> {
            readonly input: ResumeSessionCommandInput;
            constructor(input: ResumeSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResumeSessionCommandInput, ResumeSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/SendAutomationSignalCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendAutomationSignalRequest, SendAutomationSignalResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface SendAutomationSignalCommandInput extends SendAutomationSignalRequest {
    }
    export interface SendAutomationSignalCommandOutput extends SendAutomationSignalResult, __MetadataBearer {
    }
    /**
        * <p>Sends a signal to an Automation execution to change the current behavior or status of the
        *    execution. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, SendAutomationSignalCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, SendAutomationSignalCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new SendAutomationSignalCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendAutomationSignalCommandInput} for command's `input` shape.
        * @see {@link SendAutomationSignalCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class SendAutomationSignalCommand extends $Command<SendAutomationSignalCommandInput, SendAutomationSignalCommandOutput, SSMClientResolvedConfig> {
            readonly input: SendAutomationSignalCommandInput;
            constructor(input: SendAutomationSignalCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendAutomationSignalCommandInput, SendAutomationSignalCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/SendCommandCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendCommandRequest, SendCommandResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface SendCommandCommandInput extends SendCommandRequest {
    }
    export interface SendCommandCommandOutput extends SendCommandResult, __MetadataBearer {
    }
    /**
        * <p>Runs commands on one or more managed nodes.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, SendCommandCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, SendCommandCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new SendCommandCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendCommandCommandInput} for command's `input` shape.
        * @see {@link SendCommandCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class SendCommandCommand extends $Command<SendCommandCommandInput, SendCommandCommandOutput, SSMClientResolvedConfig> {
            readonly input: SendCommandCommandInput;
            constructor(input: SendCommandCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendCommandCommandInput, SendCommandCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StartAssociationsOnceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartAssociationsOnceRequest, StartAssociationsOnceResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface StartAssociationsOnceCommandInput extends StartAssociationsOnceRequest {
    }
    export interface StartAssociationsOnceCommandOutput extends StartAssociationsOnceResult, __MetadataBearer {
    }
    /**
        * <p>Runs an association immediately and only one time. This operation can be helpful when
        *    troubleshooting associations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, StartAssociationsOnceCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, StartAssociationsOnceCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new StartAssociationsOnceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartAssociationsOnceCommandInput} for command's `input` shape.
        * @see {@link StartAssociationsOnceCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class StartAssociationsOnceCommand extends $Command<StartAssociationsOnceCommandInput, StartAssociationsOnceCommandOutput, SSMClientResolvedConfig> {
            readonly input: StartAssociationsOnceCommandInput;
            constructor(input: StartAssociationsOnceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartAssociationsOnceCommandInput, StartAssociationsOnceCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StartAutomationExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartAutomationExecutionRequest, StartAutomationExecutionResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface StartAutomationExecutionCommandInput extends StartAutomationExecutionRequest {
    }
    export interface StartAutomationExecutionCommandOutput extends StartAutomationExecutionResult, __MetadataBearer {
    }
    /**
        * <p>Initiates execution of an Automation runbook.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, StartAutomationExecutionCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, StartAutomationExecutionCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new StartAutomationExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartAutomationExecutionCommandInput} for command's `input` shape.
        * @see {@link StartAutomationExecutionCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class StartAutomationExecutionCommand extends $Command<StartAutomationExecutionCommandInput, StartAutomationExecutionCommandOutput, SSMClientResolvedConfig> {
            readonly input: StartAutomationExecutionCommandInput;
            constructor(input: StartAutomationExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartAutomationExecutionCommandInput, StartAutomationExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StartChangeRequestExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartChangeRequestExecutionRequest, StartChangeRequestExecutionResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface StartChangeRequestExecutionCommandInput extends StartChangeRequestExecutionRequest {
    }
    export interface StartChangeRequestExecutionCommandOutput extends StartChangeRequestExecutionResult, __MetadataBearer {
    }
    /**
        * <p>Creates a change request for Change Manager. The Automation runbooks specified in the
        *    change request run only after all required approvals for the change request have been
        *    received.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, StartChangeRequestExecutionCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, StartChangeRequestExecutionCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new StartChangeRequestExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartChangeRequestExecutionCommandInput} for command's `input` shape.
        * @see {@link StartChangeRequestExecutionCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class StartChangeRequestExecutionCommand extends $Command<StartChangeRequestExecutionCommandInput, StartChangeRequestExecutionCommandOutput, SSMClientResolvedConfig> {
            readonly input: StartChangeRequestExecutionCommandInput;
            constructor(input: StartChangeRequestExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartChangeRequestExecutionCommandInput, StartChangeRequestExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StartSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartSessionRequest, StartSessionResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface StartSessionCommandInput extends StartSessionRequest {
    }
    export interface StartSessionCommandOutput extends StartSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Initiates a connection to a target (for example, a managed node) for a Session Manager session.
        *    Returns a URL and token that can be used to open a WebSocket connection for sending input and
        *    receiving outputs.</p>
        *          <note>
        *             <p>Amazon Web Services CLI usage: <code>start-session</code> is an interactive command that requires the Session Manager
        *     plugin to be installed on the client machine making the call. For information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-install-plugin.html">Install
        *      the Session Manager plugin for the Amazon Web Services CLI</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        *             <p>Amazon Web Services Tools for PowerShell usage: Start-SSMSession isn't currently supported by Amazon Web Services Tools
        *     for PowerShell on Windows local machines.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, StartSessionCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, StartSessionCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new StartSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartSessionCommandInput} for command's `input` shape.
        * @see {@link StartSessionCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class StartSessionCommand extends $Command<StartSessionCommandInput, StartSessionCommandOutput, SSMClientResolvedConfig> {
            readonly input: StartSessionCommandInput;
            constructor(input: StartSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartSessionCommandInput, StartSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StopAutomationExecutionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StopAutomationExecutionRequest, StopAutomationExecutionResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface StopAutomationExecutionCommandInput extends StopAutomationExecutionRequest {
    }
    export interface StopAutomationExecutionCommandOutput extends StopAutomationExecutionResult, __MetadataBearer {
    }
    /**
        * <p>Stop an Automation that is currently running.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, StopAutomationExecutionCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, StopAutomationExecutionCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new StopAutomationExecutionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopAutomationExecutionCommandInput} for command's `input` shape.
        * @see {@link StopAutomationExecutionCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class StopAutomationExecutionCommand extends $Command<StopAutomationExecutionCommandInput, StopAutomationExecutionCommandOutput, SSMClientResolvedConfig> {
            readonly input: StopAutomationExecutionCommandInput;
            constructor(input: StopAutomationExecutionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopAutomationExecutionCommandInput, StopAutomationExecutionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/TerminateSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TerminateSessionRequest, TerminateSessionResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface TerminateSessionCommandInput extends TerminateSessionRequest {
    }
    export interface TerminateSessionCommandOutput extends TerminateSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Permanently ends a session and closes the data connection between the Session Manager client and
        *    SSM Agent on the managed node. A terminated session can't be resumed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, TerminateSessionCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, TerminateSessionCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new TerminateSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TerminateSessionCommandInput} for command's `input` shape.
        * @see {@link TerminateSessionCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class TerminateSessionCommand extends $Command<TerminateSessionCommandInput, TerminateSessionCommandOutput, SSMClientResolvedConfig> {
            readonly input: TerminateSessionCommandInput;
            constructor(input: TerminateSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TerminateSessionCommandInput, TerminateSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UnlabelParameterVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UnlabelParameterVersionRequest, UnlabelParameterVersionResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UnlabelParameterVersionCommandInput extends UnlabelParameterVersionRequest {
    }
    export interface UnlabelParameterVersionCommandOutput extends UnlabelParameterVersionResult, __MetadataBearer {
    }
    /**
        * <p>Remove a label or labels from a parameter.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UnlabelParameterVersionCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UnlabelParameterVersionCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UnlabelParameterVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UnlabelParameterVersionCommandInput} for command's `input` shape.
        * @see {@link UnlabelParameterVersionCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UnlabelParameterVersionCommand extends $Command<UnlabelParameterVersionCommandInput, UnlabelParameterVersionCommandOutput, SSMClientResolvedConfig> {
            readonly input: UnlabelParameterVersionCommandInput;
            constructor(input: UnlabelParameterVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UnlabelParameterVersionCommandInput, UnlabelParameterVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateAssociationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateAssociationRequest, UpdateAssociationResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UpdateAssociationCommandInput extends UpdateAssociationRequest {
    }
    export interface UpdateAssociationCommandOutput extends UpdateAssociationResult, __MetadataBearer {
    }
    /**
        * <p>Updates an association. You can update the association name and version, the document
        *    version, schedule, parameters, and Amazon Simple Storage Service (Amazon S3) output. When you
        *    call <code>UpdateAssociation</code>, the system removes all optional parameters from the request
        *    and overwrites the association with null values for those parameters. This is by design. You must
        *    specify all optional parameters in the call, even if you are not changing the parameters. This
        *    includes the <code>Name</code> parameter. Before calling this API action, we recommend that you
        *    call the <a>DescribeAssociation</a> API operation and make a note of all optional
        *    parameters required for your <code>UpdateAssociation</code> call.</p>
        *
        *          <p>In order to call this API operation, your Identity and Access Management (IAM) user
        *    account, group, or role must be configured with permission to call the <a>DescribeAssociation</a> API operation. If you don't have permission to call
        *     <code>DescribeAssociation</code>, then you receive the following error: <code>An error occurred
        *     (AccessDeniedException) when calling the UpdateAssociation operation: User: <user_arn>
        *     isn't authorized to perform: ssm:DescribeAssociation on resource:
        *    <resource_arn></code>
        *          </p>
        *          <important>
        *             <p>When you update an association, the association immediately runs against the specified
        *     targets. You can add the <code>ApplyOnlyAtCronInterval</code> parameter to run the association
        *     during the next schedule run.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UpdateAssociationCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UpdateAssociationCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UpdateAssociationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAssociationCommandInput} for command's `input` shape.
        * @see {@link UpdateAssociationCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UpdateAssociationCommand extends $Command<UpdateAssociationCommandInput, UpdateAssociationCommandOutput, SSMClientResolvedConfig> {
            readonly input: UpdateAssociationCommandInput;
            constructor(input: UpdateAssociationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAssociationCommandInput, UpdateAssociationCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateAssociationStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateAssociationStatusRequest, UpdateAssociationStatusResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UpdateAssociationStatusCommandInput extends UpdateAssociationStatusRequest {
    }
    export interface UpdateAssociationStatusCommandOutput extends UpdateAssociationStatusResult, __MetadataBearer {
    }
    /**
        * <p>Updates the status of the Amazon Web Services Systems Manager document (SSM document) associated with the specified
        *    managed node.</p>
        *          <p>
        *             <code>UpdateAssociationStatus</code> is primarily used by the Amazon Web Services Systems Manager Agent (SSM Agent) to
        *    report status updates about your associations and is only used for associations created with the
        *     <code>InstanceId</code> legacy parameter.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UpdateAssociationStatusCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UpdateAssociationStatusCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UpdateAssociationStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAssociationStatusCommandInput} for command's `input` shape.
        * @see {@link UpdateAssociationStatusCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UpdateAssociationStatusCommand extends $Command<UpdateAssociationStatusCommandInput, UpdateAssociationStatusCommandOutput, SSMClientResolvedConfig> {
            readonly input: UpdateAssociationStatusCommandInput;
            constructor(input: UpdateAssociationStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAssociationStatusCommandInput, UpdateAssociationStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateDocumentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDocumentRequest, UpdateDocumentResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UpdateDocumentCommandInput extends UpdateDocumentRequest {
    }
    export interface UpdateDocumentCommandOutput extends UpdateDocumentResult, __MetadataBearer {
    }
    /**
        * <p>Updates one or more values for an SSM document.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UpdateDocumentCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UpdateDocumentCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UpdateDocumentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDocumentCommandInput} for command's `input` shape.
        * @see {@link UpdateDocumentCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UpdateDocumentCommand extends $Command<UpdateDocumentCommandInput, UpdateDocumentCommandOutput, SSMClientResolvedConfig> {
            readonly input: UpdateDocumentCommandInput;
            constructor(input: UpdateDocumentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDocumentCommandInput, UpdateDocumentCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateDocumentDefaultVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDocumentDefaultVersionRequest, UpdateDocumentDefaultVersionResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UpdateDocumentDefaultVersionCommandInput extends UpdateDocumentDefaultVersionRequest {
    }
    export interface UpdateDocumentDefaultVersionCommandOutput extends UpdateDocumentDefaultVersionResult, __MetadataBearer {
    }
    /**
        * <p>Set the default version of a document. </p>
        *          <note>
        *             <p>If you change a document version for a State Manager association, Systems Manager immediately runs
        *     the association unless you previously specifed the <code>apply-only-at-cron-interval</code>
        *     parameter.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UpdateDocumentDefaultVersionCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UpdateDocumentDefaultVersionCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UpdateDocumentDefaultVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDocumentDefaultVersionCommandInput} for command's `input` shape.
        * @see {@link UpdateDocumentDefaultVersionCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UpdateDocumentDefaultVersionCommand extends $Command<UpdateDocumentDefaultVersionCommandInput, UpdateDocumentDefaultVersionCommandOutput, SSMClientResolvedConfig> {
            readonly input: UpdateDocumentDefaultVersionCommandInput;
            constructor(input: UpdateDocumentDefaultVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDocumentDefaultVersionCommandInput, UpdateDocumentDefaultVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateDocumentMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateDocumentMetadataRequest, UpdateDocumentMetadataResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_2";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UpdateDocumentMetadataCommandInput extends UpdateDocumentMetadataRequest {
    }
    export interface UpdateDocumentMetadataCommandOutput extends UpdateDocumentMetadataResponse, __MetadataBearer {
    }
    /**
        * <p>Updates information related to approval reviews for a specific version of a change template
        *    in Change Manager.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UpdateDocumentMetadataCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UpdateDocumentMetadataCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UpdateDocumentMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDocumentMetadataCommandInput} for command's `input` shape.
        * @see {@link UpdateDocumentMetadataCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UpdateDocumentMetadataCommand extends $Command<UpdateDocumentMetadataCommandInput, UpdateDocumentMetadataCommandOutput, SSMClientResolvedConfig> {
            readonly input: UpdateDocumentMetadataCommandInput;
            constructor(input: UpdateDocumentMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDocumentMetadataCommandInput, UpdateDocumentMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateMaintenanceWindowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateMaintenanceWindowRequest, UpdateMaintenanceWindowResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_2";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UpdateMaintenanceWindowCommandInput extends UpdateMaintenanceWindowRequest {
    }
    export interface UpdateMaintenanceWindowCommandOutput extends UpdateMaintenanceWindowResult, __MetadataBearer {
    }
    /**
        * <p>Updates an existing maintenance window. Only specified parameters are modified.</p>
        *          <note>
        *             <p>The value you specify for <code>Duration</code> determines the specific end time for the
        *     maintenance window based on the time it begins. No maintenance window tasks are permitted to
        *     start after the resulting endtime minus the number of hours you specify for <code>Cutoff</code>.
        *     For example, if the maintenance window starts at 3 PM, the duration is three hours, and the
        *     value you specify for <code>Cutoff</code> is one hour, no maintenance window tasks can start
        *     after 5 PM.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UpdateMaintenanceWindowCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UpdateMaintenanceWindowCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UpdateMaintenanceWindowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateMaintenanceWindowCommandInput} for command's `input` shape.
        * @see {@link UpdateMaintenanceWindowCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UpdateMaintenanceWindowCommand extends $Command<UpdateMaintenanceWindowCommandInput, UpdateMaintenanceWindowCommandOutput, SSMClientResolvedConfig> {
            readonly input: UpdateMaintenanceWindowCommandInput;
            constructor(input: UpdateMaintenanceWindowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateMaintenanceWindowCommandInput, UpdateMaintenanceWindowCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateMaintenanceWindowTargetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateMaintenanceWindowTargetRequest, UpdateMaintenanceWindowTargetResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_2";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UpdateMaintenanceWindowTargetCommandInput extends UpdateMaintenanceWindowTargetRequest {
    }
    export interface UpdateMaintenanceWindowTargetCommandOutput extends UpdateMaintenanceWindowTargetResult, __MetadataBearer {
    }
    /**
        * <p>Modifies the target of an existing maintenance window. You
        *    can change the following:</p>
        *
        *          <ul>
        *             <li>
        *                <p>Name</p>
        *             </li>
        *             <li>
        *                <p>Description</p>
        *             </li>
        *             <li>
        *                <p>Owner</p>
        *             </li>
        *             <li>
        *                <p>IDs for an ID target</p>
        *             </li>
        *             <li>
        *                <p>Tags for a Tag target</p>
        *             </li>
        *             <li>
        *                <p>From any supported tag type to another. The three supported tag types are ID target, Tag
        *      target, and resource group. For more information, see <a>Target</a>.</p>
        *             </li>
        *          </ul>
        *          <note>
        *             <p>If a parameter is null, then the corresponding field isn't modified.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UpdateMaintenanceWindowTargetCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UpdateMaintenanceWindowTargetCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UpdateMaintenanceWindowTargetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateMaintenanceWindowTargetCommandInput} for command's `input` shape.
        * @see {@link UpdateMaintenanceWindowTargetCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UpdateMaintenanceWindowTargetCommand extends $Command<UpdateMaintenanceWindowTargetCommandInput, UpdateMaintenanceWindowTargetCommandOutput, SSMClientResolvedConfig> {
            readonly input: UpdateMaintenanceWindowTargetCommandInput;
            constructor(input: UpdateMaintenanceWindowTargetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateMaintenanceWindowTargetCommandInput, UpdateMaintenanceWindowTargetCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateMaintenanceWindowTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateMaintenanceWindowTaskRequest, UpdateMaintenanceWindowTaskResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_2";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UpdateMaintenanceWindowTaskCommandInput extends UpdateMaintenanceWindowTaskRequest {
    }
    export interface UpdateMaintenanceWindowTaskCommandOutput extends UpdateMaintenanceWindowTaskResult, __MetadataBearer {
    }
    /**
        * <p>Modifies a task assigned to a maintenance window. You can't change the task type, but you
        *    can change the following values:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>TaskARN</code>. For example, you can change a <code>RUN_COMMAND</code> task from
        *       <code>AWS-RunPowerShellScript</code> to <code>AWS-RunShellScript</code>.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ServiceRoleArn</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>TaskInvocationParameters</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Priority</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>MaxConcurrency</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>MaxErrors</code>
        *                </p>
        *             </li>
        *          </ul>
        *          <note>
        *             <p>One or more targets must be specified for maintenance window Run Command-type tasks.
        *     Depending on the task, targets are optional for other maintenance window task types (Automation,
        *      Lambda, and Step Functions). For more information about running tasks
        *     that don't specify targets, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">Registering
        *      maintenance window tasks without targets</a> in the
        *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        *          </note>
        *          <p>If the value for a parameter in <code>UpdateMaintenanceWindowTask</code> is null, then the
        *    corresponding field isn't modified. If you set <code>Replace</code> to true, then all fields
        *    required by the <a>RegisterTaskWithMaintenanceWindow</a> operation are required for
        *    this request. Optional fields that aren't specified are set to null.</p>
        *          <important>
        *             <p>When you update a maintenance window task that has options specified in
        *      <code>TaskInvocationParameters</code>, you must provide again all the
        *      <code>TaskInvocationParameters</code> values that you want to retain. The values you don't
        *     specify again are removed. For example, suppose that when you registered a Run Command task, you
        *     specified <code>TaskInvocationParameters</code> values for <code>Comment</code>,
        *      <code>NotificationConfig</code>, and <code>OutputS3BucketName</code>. If you update the
        *     maintenance window task and specify only a different <code>OutputS3BucketName</code> value, the
        *     values for <code>Comment</code> and <code>NotificationConfig</code> are removed.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UpdateMaintenanceWindowTaskCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UpdateMaintenanceWindowTaskCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UpdateMaintenanceWindowTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateMaintenanceWindowTaskCommandInput} for command's `input` shape.
        * @see {@link UpdateMaintenanceWindowTaskCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UpdateMaintenanceWindowTaskCommand extends $Command<UpdateMaintenanceWindowTaskCommandInput, UpdateMaintenanceWindowTaskCommandOutput, SSMClientResolvedConfig> {
            readonly input: UpdateMaintenanceWindowTaskCommandInput;
            constructor(input: UpdateMaintenanceWindowTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateMaintenanceWindowTaskCommandInput, UpdateMaintenanceWindowTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateManagedInstanceRoleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateManagedInstanceRoleRequest, UpdateManagedInstanceRoleResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_2";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UpdateManagedInstanceRoleCommandInput extends UpdateManagedInstanceRoleRequest {
    }
    export interface UpdateManagedInstanceRoleCommandOutput extends UpdateManagedInstanceRoleResult, __MetadataBearer {
    }
    /**
        * <p>Changes the Identity and Access Management (IAM) role that is assigned to the
        *    on-premises server, edge device, or virtual machines (VM). IAM roles are first
        *    assigned to these hybrid nodes during the activation process. For more information, see <a>CreateActivation</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UpdateManagedInstanceRoleCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UpdateManagedInstanceRoleCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UpdateManagedInstanceRoleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateManagedInstanceRoleCommandInput} for command's `input` shape.
        * @see {@link UpdateManagedInstanceRoleCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UpdateManagedInstanceRoleCommand extends $Command<UpdateManagedInstanceRoleCommandInput, UpdateManagedInstanceRoleCommandOutput, SSMClientResolvedConfig> {
            readonly input: UpdateManagedInstanceRoleCommandInput;
            constructor(input: UpdateManagedInstanceRoleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateManagedInstanceRoleCommandInput, UpdateManagedInstanceRoleCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateOpsItemCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateOpsItemRequest, UpdateOpsItemResponse } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_2";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UpdateOpsItemCommandInput extends UpdateOpsItemRequest {
    }
    export interface UpdateOpsItemCommandOutput extends UpdateOpsItemResponse, __MetadataBearer {
    }
    /**
        * <p>Edit or change an OpsItem. You must have permission in Identity and Access Management (IAM) to update an OpsItem. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html">Getting started with
        *     OpsCenter</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        *          <p>Operations engineers and IT professionals use Amazon Web Services Systems Manager OpsCenter to view, investigate, and
        *    remediate operational issues impacting the performance and health of their Amazon Web Services resources. For
        *    more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">OpsCenter</a> in the
        *     <i>Amazon Web Services Systems Manager User Guide</i>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UpdateOpsItemCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UpdateOpsItemCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UpdateOpsItemCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateOpsItemCommandInput} for command's `input` shape.
        * @see {@link UpdateOpsItemCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UpdateOpsItemCommand extends $Command<UpdateOpsItemCommandInput, UpdateOpsItemCommandOutput, SSMClientResolvedConfig> {
            readonly input: UpdateOpsItemCommandInput;
            constructor(input: UpdateOpsItemCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateOpsItemCommandInput, UpdateOpsItemCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateOpsMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateOpsMetadataRequest, UpdateOpsMetadataResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_2";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UpdateOpsMetadataCommandInput extends UpdateOpsMetadataRequest {
    }
    export interface UpdateOpsMetadataCommandOutput extends UpdateOpsMetadataResult, __MetadataBearer {
    }
    /**
        * <p>Amazon Web Services Systems Manager calls this API operation when you edit OpsMetadata in Application Manager.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UpdateOpsMetadataCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UpdateOpsMetadataCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UpdateOpsMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateOpsMetadataCommandInput} for command's `input` shape.
        * @see {@link UpdateOpsMetadataCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UpdateOpsMetadataCommand extends $Command<UpdateOpsMetadataCommandInput, UpdateOpsMetadataCommandOutput, SSMClientResolvedConfig> {
            readonly input: UpdateOpsMetadataCommandInput;
            constructor(input: UpdateOpsMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateOpsMetadataCommandInput, UpdateOpsMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdatePatchBaselineCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdatePatchBaselineRequest, UpdatePatchBaselineResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_2";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UpdatePatchBaselineCommandInput extends UpdatePatchBaselineRequest {
    }
    export interface UpdatePatchBaselineCommandOutput extends UpdatePatchBaselineResult, __MetadataBearer {
    }
    /**
        * <p>Modifies an existing patch baseline. Fields not specified in the request are left
        *    unchanged.</p>
        *          <note>
        *             <p>For information about valid key-value pairs in <code>PatchFilters</code> for each supported
        *     operating system type, see <a>PatchFilter</a>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UpdatePatchBaselineCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UpdatePatchBaselineCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UpdatePatchBaselineCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdatePatchBaselineCommandInput} for command's `input` shape.
        * @see {@link UpdatePatchBaselineCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UpdatePatchBaselineCommand extends $Command<UpdatePatchBaselineCommandInput, UpdatePatchBaselineCommandOutput, SSMClientResolvedConfig> {
            readonly input: UpdatePatchBaselineCommandInput;
            constructor(input: UpdatePatchBaselineCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdatePatchBaselineCommandInput, UpdatePatchBaselineCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateResourceDataSyncCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateResourceDataSyncRequest, UpdateResourceDataSyncResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_2";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UpdateResourceDataSyncCommandInput extends UpdateResourceDataSyncRequest {
    }
    export interface UpdateResourceDataSyncCommandOutput extends UpdateResourceDataSyncResult, __MetadataBearer {
    }
    /**
        * <p>Update a resource data sync. After you create a resource data sync for a Region, you can't
        *    change the account options for that sync. For example, if you create a sync in the us-east-2
        *    (Ohio) Region and you choose the <code>Include only the current account</code> option, you can't
        *    edit that sync later and choose the <code>Include all accounts from my Organizations
        *     configuration</code> option. Instead, you must delete the first resource data sync, and create a
        *    new one.</p>
        *          <note>
        *             <p>This API operation only supports a resource data sync that was created with a
        *     SyncFromSource <code>SyncType</code>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UpdateResourceDataSyncCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UpdateResourceDataSyncCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UpdateResourceDataSyncCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateResourceDataSyncCommandInput} for command's `input` shape.
        * @see {@link UpdateResourceDataSyncCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UpdateResourceDataSyncCommand extends $Command<UpdateResourceDataSyncCommandInput, UpdateResourceDataSyncCommandOutput, SSMClientResolvedConfig> {
            readonly input: UpdateResourceDataSyncCommandInput;
            constructor(input: UpdateResourceDataSyncCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateResourceDataSyncCommandInput, UpdateResourceDataSyncCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateServiceSettingCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateServiceSettingRequest, UpdateServiceSettingResult } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_2";
    import { ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient";
    export interface UpdateServiceSettingCommandInput extends UpdateServiceSettingRequest {
    }
    export interface UpdateServiceSettingCommandOutput extends UpdateServiceSettingResult, __MetadataBearer {
    }
    /**
        * <p>
        *             <code>ServiceSetting</code> is an account-level setting for an Amazon Web Services service. This setting
        *    defines how a user interacts with or uses a service or a feature of a service. For example, if an
        *    Amazon Web Services service charges money to the account based on feature or service usage, then the Amazon Web Services
        *    service team might create a default setting of "false". This means the user can't use this
        *    feature unless they change the setting to "true" and intentionally opt in for a paid
        *    feature.</p>
        *          <p>Services map a <code>SettingId</code> object to a setting value. Amazon Web Services services teams define
        *    the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>,
        *    but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code>
        *    permission for the setting. Use the <a>GetServiceSetting</a> API operation to view the
        *    current value. Or, use the <a>ResetServiceSetting</a> to change the value back to the
        *    original value defined by the Amazon Web Services service team.</p>
        *          <p>Update the service setting for the account. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SSMClient, UpdateServiceSettingCommand } from "@aws-sdk/client-ssm"; // ES Modules import
        * // const { SSMClient, UpdateServiceSettingCommand } = require("@aws-sdk/client-ssm"); // CommonJS import
        * const client = new SSMClient(config);
        * const command = new UpdateServiceSettingCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateServiceSettingCommandInput} for command's `input` shape.
        * @see {@link UpdateServiceSettingCommandOutput} for command's `response` shape.
        * @see {@link SSMClientResolvedConfig | config} for SSMClient's `config` shape.
        *
        */
    export class UpdateServiceSettingCommand extends $Command<UpdateServiceSettingCommandInput, UpdateServiceSettingCommandOutput, SSMClientResolvedConfig> {
            readonly input: UpdateServiceSettingCommandInput;
            constructor(input: UpdateServiceSettingCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateServiceSettingCommandInput, UpdateServiceSettingCommandOutput>;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/SSMClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddTagsToResourceCommandInput, AddTagsToResourceCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/AddTagsToResourceCommand";
    import { AssociateOpsItemRelatedItemCommandInput, AssociateOpsItemRelatedItemCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/AssociateOpsItemRelatedItemCommand";
    import { CancelCommandCommandInput, CancelCommandCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CancelCommandCommand";
    import { CancelMaintenanceWindowExecutionCommandInput, CancelMaintenanceWindowExecutionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CancelMaintenanceWindowExecutionCommand";
    import { CreateActivationCommandInput, CreateActivationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateActivationCommand";
    import { CreateAssociationBatchCommandInput, CreateAssociationBatchCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateAssociationBatchCommand";
    import { CreateAssociationCommandInput, CreateAssociationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateAssociationCommand";
    import { CreateDocumentCommandInput, CreateDocumentCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateDocumentCommand";
    import { CreateMaintenanceWindowCommandInput, CreateMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateMaintenanceWindowCommand";
    import { CreateOpsItemCommandInput, CreateOpsItemCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateOpsItemCommand";
    import { CreateOpsMetadataCommandInput, CreateOpsMetadataCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateOpsMetadataCommand";
    import { CreatePatchBaselineCommandInput, CreatePatchBaselineCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreatePatchBaselineCommand";
    import { CreateResourceDataSyncCommandInput, CreateResourceDataSyncCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/CreateResourceDataSyncCommand";
    import { DeleteActivationCommandInput, DeleteActivationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteActivationCommand";
    import { DeleteAssociationCommandInput, DeleteAssociationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteAssociationCommand";
    import { DeleteDocumentCommandInput, DeleteDocumentCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteDocumentCommand";
    import { DeleteInventoryCommandInput, DeleteInventoryCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteInventoryCommand";
    import { DeleteMaintenanceWindowCommandInput, DeleteMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteMaintenanceWindowCommand";
    import { DeleteOpsMetadataCommandInput, DeleteOpsMetadataCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteOpsMetadataCommand";
    import { DeleteParameterCommandInput, DeleteParameterCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteParameterCommand";
    import { DeleteParametersCommandInput, DeleteParametersCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteParametersCommand";
    import { DeletePatchBaselineCommandInput, DeletePatchBaselineCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeletePatchBaselineCommand";
    import { DeleteResourceDataSyncCommandInput, DeleteResourceDataSyncCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeleteResourceDataSyncCommand";
    import { DeregisterManagedInstanceCommandInput, DeregisterManagedInstanceCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeregisterManagedInstanceCommand";
    import { DeregisterPatchBaselineForPatchGroupCommandInput, DeregisterPatchBaselineForPatchGroupCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeregisterPatchBaselineForPatchGroupCommand";
    import { DeregisterTargetFromMaintenanceWindowCommandInput, DeregisterTargetFromMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeregisterTargetFromMaintenanceWindowCommand";
    import { DeregisterTaskFromMaintenanceWindowCommandInput, DeregisterTaskFromMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DeregisterTaskFromMaintenanceWindowCommand";
    import { DescribeActivationsCommandInput, DescribeActivationsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeActivationsCommand";
    import { DescribeAssociationCommandInput, DescribeAssociationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAssociationCommand";
    import { DescribeAssociationExecutionsCommandInput, DescribeAssociationExecutionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAssociationExecutionsCommand";
    import { DescribeAssociationExecutionTargetsCommandInput, DescribeAssociationExecutionTargetsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAssociationExecutionTargetsCommand";
    import { DescribeAutomationExecutionsCommandInput, DescribeAutomationExecutionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAutomationExecutionsCommand";
    import { DescribeAutomationStepExecutionsCommandInput, DescribeAutomationStepExecutionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAutomationStepExecutionsCommand";
    import { DescribeAvailablePatchesCommandInput, DescribeAvailablePatchesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeAvailablePatchesCommand";
    import { DescribeDocumentCommandInput, DescribeDocumentCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeDocumentCommand";
    import { DescribeDocumentPermissionCommandInput, DescribeDocumentPermissionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeDocumentPermissionCommand";
    import { DescribeEffectiveInstanceAssociationsCommandInput, DescribeEffectiveInstanceAssociationsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeEffectiveInstanceAssociationsCommand";
    import { DescribeEffectivePatchesForPatchBaselineCommandInput, DescribeEffectivePatchesForPatchBaselineCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeEffectivePatchesForPatchBaselineCommand";
    import { DescribeInstanceAssociationsStatusCommandInput, DescribeInstanceAssociationsStatusCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstanceAssociationsStatusCommand";
    import { DescribeInstanceInformationCommandInput, DescribeInstanceInformationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstanceInformationCommand";
    import { DescribeInstancePatchesCommandInput, DescribeInstancePatchesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstancePatchesCommand";
    import { DescribeInstancePatchStatesCommandInput, DescribeInstancePatchStatesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstancePatchStatesCommand";
    import { DescribeInstancePatchStatesForPatchGroupCommandInput, DescribeInstancePatchStatesForPatchGroupCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInstancePatchStatesForPatchGroupCommand";
    import { DescribeInventoryDeletionsCommandInput, DescribeInventoryDeletionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeInventoryDeletionsCommand";
    import { DescribeMaintenanceWindowExecutionsCommandInput, DescribeMaintenanceWindowExecutionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowExecutionsCommand";
    import { DescribeMaintenanceWindowExecutionTaskInvocationsCommandInput, DescribeMaintenanceWindowExecutionTaskInvocationsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowExecutionTaskInvocationsCommand";
    import { DescribeMaintenanceWindowExecutionTasksCommandInput, DescribeMaintenanceWindowExecutionTasksCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowExecutionTasksCommand";
    import { DescribeMaintenanceWindowScheduleCommandInput, DescribeMaintenanceWindowScheduleCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowScheduleCommand";
    import { DescribeMaintenanceWindowsCommandInput, DescribeMaintenanceWindowsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowsCommand";
    import { DescribeMaintenanceWindowsForTargetCommandInput, DescribeMaintenanceWindowsForTargetCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowsForTargetCommand";
    import { DescribeMaintenanceWindowTargetsCommandInput, DescribeMaintenanceWindowTargetsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowTargetsCommand";
    import { DescribeMaintenanceWindowTasksCommandInput, DescribeMaintenanceWindowTasksCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeMaintenanceWindowTasksCommand";
    import { DescribeOpsItemsCommandInput, DescribeOpsItemsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeOpsItemsCommand";
    import { DescribeParametersCommandInput, DescribeParametersCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeParametersCommand";
    import { DescribePatchBaselinesCommandInput, DescribePatchBaselinesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribePatchBaselinesCommand";
    import { DescribePatchGroupsCommandInput, DescribePatchGroupsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribePatchGroupsCommand";
    import { DescribePatchGroupStateCommandInput, DescribePatchGroupStateCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribePatchGroupStateCommand";
    import { DescribePatchPropertiesCommandInput, DescribePatchPropertiesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribePatchPropertiesCommand";
    import { DescribeSessionsCommandInput, DescribeSessionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DescribeSessionsCommand";
    import { DisassociateOpsItemRelatedItemCommandInput, DisassociateOpsItemRelatedItemCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/DisassociateOpsItemRelatedItemCommand";
    import { GetAutomationExecutionCommandInput, GetAutomationExecutionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetAutomationExecutionCommand";
    import { GetCalendarStateCommandInput, GetCalendarStateCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetCalendarStateCommand";
    import { GetCommandInvocationCommandInput, GetCommandInvocationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetCommandInvocationCommand";
    import { GetConnectionStatusCommandInput, GetConnectionStatusCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetConnectionStatusCommand";
    import { GetDefaultPatchBaselineCommandInput, GetDefaultPatchBaselineCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetDefaultPatchBaselineCommand";
    import { GetDeployablePatchSnapshotForInstanceCommandInput, GetDeployablePatchSnapshotForInstanceCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetDeployablePatchSnapshotForInstanceCommand";
    import { GetDocumentCommandInput, GetDocumentCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetDocumentCommand";
    import { GetInventoryCommandInput, GetInventoryCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetInventoryCommand";
    import { GetInventorySchemaCommandInput, GetInventorySchemaCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetInventorySchemaCommand";
    import { GetMaintenanceWindowCommandInput, GetMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowCommand";
    import { GetMaintenanceWindowExecutionCommandInput, GetMaintenanceWindowExecutionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowExecutionCommand";
    import { GetMaintenanceWindowExecutionTaskCommandInput, GetMaintenanceWindowExecutionTaskCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowExecutionTaskCommand";
    import { GetMaintenanceWindowExecutionTaskInvocationCommandInput, GetMaintenanceWindowExecutionTaskInvocationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowExecutionTaskInvocationCommand";
    import { GetMaintenanceWindowTaskCommandInput, GetMaintenanceWindowTaskCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetMaintenanceWindowTaskCommand";
    import { GetOpsItemCommandInput, GetOpsItemCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetOpsItemCommand";
    import { GetOpsMetadataCommandInput, GetOpsMetadataCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetOpsMetadataCommand";
    import { GetOpsSummaryCommandInput, GetOpsSummaryCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetOpsSummaryCommand";
    import { GetParameterCommandInput, GetParameterCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetParameterCommand";
    import { GetParameterHistoryCommandInput, GetParameterHistoryCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetParameterHistoryCommand";
    import { GetParametersByPathCommandInput, GetParametersByPathCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetParametersByPathCommand";
    import { GetParametersCommandInput, GetParametersCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetParametersCommand";
    import { GetPatchBaselineCommandInput, GetPatchBaselineCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetPatchBaselineCommand";
    import { GetPatchBaselineForPatchGroupCommandInput, GetPatchBaselineForPatchGroupCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetPatchBaselineForPatchGroupCommand";
    import { GetServiceSettingCommandInput, GetServiceSettingCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/GetServiceSettingCommand";
    import { LabelParameterVersionCommandInput, LabelParameterVersionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/LabelParameterVersionCommand";
    import { ListAssociationsCommandInput, ListAssociationsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListAssociationsCommand";
    import { ListAssociationVersionsCommandInput, ListAssociationVersionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListAssociationVersionsCommand";
    import { ListCommandInvocationsCommandInput, ListCommandInvocationsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListCommandInvocationsCommand";
    import { ListCommandsCommandInput, ListCommandsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListCommandsCommand";
    import { ListComplianceItemsCommandInput, ListComplianceItemsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListComplianceItemsCommand";
    import { ListComplianceSummariesCommandInput, ListComplianceSummariesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListComplianceSummariesCommand";
    import { ListDocumentMetadataHistoryCommandInput, ListDocumentMetadataHistoryCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListDocumentMetadataHistoryCommand";
    import { ListDocumentsCommandInput, ListDocumentsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListDocumentsCommand";
    import { ListDocumentVersionsCommandInput, ListDocumentVersionsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListDocumentVersionsCommand";
    import { ListInventoryEntriesCommandInput, ListInventoryEntriesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListInventoryEntriesCommand";
    import { ListOpsItemEventsCommandInput, ListOpsItemEventsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListOpsItemEventsCommand";
    import { ListOpsItemRelatedItemsCommandInput, ListOpsItemRelatedItemsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListOpsItemRelatedItemsCommand";
    import { ListOpsMetadataCommandInput, ListOpsMetadataCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListOpsMetadataCommand";
    import { ListResourceComplianceSummariesCommandInput, ListResourceComplianceSummariesCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListResourceComplianceSummariesCommand";
    import { ListResourceDataSyncCommandInput, ListResourceDataSyncCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListResourceDataSyncCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ListTagsForResourceCommand";
    import { ModifyDocumentPermissionCommandInput, ModifyDocumentPermissionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ModifyDocumentPermissionCommand";
    import { PutComplianceItemsCommandInput, PutComplianceItemsCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/PutComplianceItemsCommand";
    import { PutInventoryCommandInput, PutInventoryCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/PutInventoryCommand";
    import { PutParameterCommandInput, PutParameterCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/PutParameterCommand";
    import { RegisterDefaultPatchBaselineCommandInput, RegisterDefaultPatchBaselineCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RegisterDefaultPatchBaselineCommand";
    import { RegisterPatchBaselineForPatchGroupCommandInput, RegisterPatchBaselineForPatchGroupCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RegisterPatchBaselineForPatchGroupCommand";
    import { RegisterTargetWithMaintenanceWindowCommandInput, RegisterTargetWithMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RegisterTargetWithMaintenanceWindowCommand";
    import { RegisterTaskWithMaintenanceWindowCommandInput, RegisterTaskWithMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RegisterTaskWithMaintenanceWindowCommand";
    import { RemoveTagsFromResourceCommandInput, RemoveTagsFromResourceCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/RemoveTagsFromResourceCommand";
    import { ResetServiceSettingCommandInput, ResetServiceSettingCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ResetServiceSettingCommand";
    import { ResumeSessionCommandInput, ResumeSessionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/ResumeSessionCommand";
    import { SendAutomationSignalCommandInput, SendAutomationSignalCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/SendAutomationSignalCommand";
    import { SendCommandCommandInput, SendCommandCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/SendCommandCommand";
    import { StartAssociationsOnceCommandInput, StartAssociationsOnceCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StartAssociationsOnceCommand";
    import { StartAutomationExecutionCommandInput, StartAutomationExecutionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StartAutomationExecutionCommand";
    import { StartChangeRequestExecutionCommandInput, StartChangeRequestExecutionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StartChangeRequestExecutionCommand";
    import { StartSessionCommandInput, StartSessionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StartSessionCommand";
    import { StopAutomationExecutionCommandInput, StopAutomationExecutionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/StopAutomationExecutionCommand";
    import { TerminateSessionCommandInput, TerminateSessionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/TerminateSessionCommand";
    import { UnlabelParameterVersionCommandInput, UnlabelParameterVersionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UnlabelParameterVersionCommand";
    import { UpdateAssociationCommandInput, UpdateAssociationCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateAssociationCommand";
    import { UpdateAssociationStatusCommandInput, UpdateAssociationStatusCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateAssociationStatusCommand";
    import { UpdateDocumentCommandInput, UpdateDocumentCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateDocumentCommand";
    import { UpdateDocumentDefaultVersionCommandInput, UpdateDocumentDefaultVersionCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateDocumentDefaultVersionCommand";
    import { UpdateDocumentMetadataCommandInput, UpdateDocumentMetadataCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateDocumentMetadataCommand";
    import { UpdateMaintenanceWindowCommandInput, UpdateMaintenanceWindowCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateMaintenanceWindowCommand";
    import { UpdateMaintenanceWindowTargetCommandInput, UpdateMaintenanceWindowTargetCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateMaintenanceWindowTargetCommand";
    import { UpdateMaintenanceWindowTaskCommandInput, UpdateMaintenanceWindowTaskCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateMaintenanceWindowTaskCommand";
    import { UpdateManagedInstanceRoleCommandInput, UpdateManagedInstanceRoleCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateManagedInstanceRoleCommand";
    import { UpdateOpsItemCommandInput, UpdateOpsItemCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateOpsItemCommand";
    import { UpdateOpsMetadataCommandInput, UpdateOpsMetadataCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateOpsMetadataCommand";
    import { UpdatePatchBaselineCommandInput, UpdatePatchBaselineCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdatePatchBaselineCommand";
    import { UpdateResourceDataSyncCommandInput, UpdateResourceDataSyncCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateResourceDataSyncCommand";
    import { UpdateServiceSettingCommandInput, UpdateServiceSettingCommandOutput } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/commands/UpdateServiceSettingCommand";
    export type ServiceInputTypes = AddTagsToResourceCommandInput | AssociateOpsItemRelatedItemCommandInput | CancelCommandCommandInput | CancelMaintenanceWindowExecutionCommandInput | CreateActivationCommandInput | CreateAssociationBatchCommandInput | CreateAssociationCommandInput | CreateDocumentCommandInput | CreateMaintenanceWindowCommandInput | CreateOpsItemCommandInput | CreateOpsMetadataCommandInput | CreatePatchBaselineCommandInput | CreateResourceDataSyncCommandInput | DeleteActivationCommandInput | DeleteAssociationCommandInput | DeleteDocumentCommandInput | DeleteInventoryCommandInput | DeleteMaintenanceWindowCommandInput | DeleteOpsMetadataCommandInput | DeleteParameterCommandInput | DeleteParametersCommandInput | DeletePatchBaselineCommandInput | DeleteResourceDataSyncCommandInput | DeregisterManagedInstanceCommandInput | DeregisterPatchBaselineForPatchGroupCommandInput | DeregisterTargetFromMaintenanceWindowCommandInput | DeregisterTaskFromMaintenanceWindowCommandInput | DescribeActivationsCommandInput | DescribeAssociationCommandInput | DescribeAssociationExecutionTargetsCommandInput | DescribeAssociationExecutionsCommandInput | DescribeAutomationExecutionsCommandInput | DescribeAutomationStepExecutionsCommandInput | DescribeAvailablePatchesCommandInput | DescribeDocumentCommandInput | DescribeDocumentPermissionCommandInput | DescribeEffectiveInstanceAssociationsCommandInput | DescribeEffectivePatchesForPatchBaselineCommandInput | DescribeInstanceAssociationsStatusCommandInput | DescribeInstanceInformationCommandInput | DescribeInstancePatchStatesCommandInput | DescribeInstancePatchStatesForPatchGroupCommandInput | DescribeInstancePatchesCommandInput | DescribeInventoryDeletionsCommandInput | DescribeMaintenanceWindowExecutionTaskInvocationsCommandInput | DescribeMaintenanceWindowExecutionTasksCommandInput | DescribeMaintenanceWindowExecutionsCommandInput | DescribeMaintenanceWindowScheduleCommandInput | DescribeMaintenanceWindowTargetsCommandInput | DescribeMaintenanceWindowTasksCommandInput | DescribeMaintenanceWindowsCommandInput | DescribeMaintenanceWindowsForTargetCommandInput | DescribeOpsItemsCommandInput | DescribeParametersCommandInput | DescribePatchBaselinesCommandInput | DescribePatchGroupStateCommandInput | DescribePatchGroupsCommandInput | DescribePatchPropertiesCommandInput | DescribeSessionsCommandInput | DisassociateOpsItemRelatedItemCommandInput | GetAutomationExecutionCommandInput | GetCalendarStateCommandInput | GetCommandInvocationCommandInput | GetConnectionStatusCommandInput | GetDefaultPatchBaselineCommandInput | GetDeployablePatchSnapshotForInstanceCommandInput | GetDocumentCommandInput | GetInventoryCommandInput | GetInventorySchemaCommandInput | GetMaintenanceWindowCommandInput | GetMaintenanceWindowExecutionCommandInput | GetMaintenanceWindowExecutionTaskCommandInput | GetMaintenanceWindowExecutionTaskInvocationCommandInput | GetMaintenanceWindowTaskCommandInput | GetOpsItemCommandInput | GetOpsMetadataCommandInput | GetOpsSummaryCommandInput | GetParameterCommandInput | GetParameterHistoryCommandInput | GetParametersByPathCommandInput | GetParametersCommandInput | GetPatchBaselineCommandInput | GetPatchBaselineForPatchGroupCommandInput | GetServiceSettingCommandInput | LabelParameterVersionCommandInput | ListAssociationVersionsCommandInput | ListAssociationsCommandInput | ListCommandInvocationsCommandInput | ListCommandsCommandInput | ListComplianceItemsCommandInput | ListComplianceSummariesCommandInput | ListDocumentMetadataHistoryCommandInput | ListDocumentVersionsCommandInput | ListDocumentsCommandInput | ListInventoryEntriesCommandInput | ListOpsItemEventsCommandInput | ListOpsItemRelatedItemsCommandInput | ListOpsMetadataCommandInput | ListResourceComplianceSummariesCommandInput | ListResourceDataSyncCommandInput | ListTagsForResourceCommandInput | ModifyDocumentPermissionCommandInput | PutComplianceItemsCommandInput | PutInventoryCommandInput | PutParameterCommandInput | RegisterDefaultPatchBaselineCommandInput | RegisterPatchBaselineForPatchGroupCommandInput | RegisterTargetWithMaintenanceWindowCommandInput | RegisterTaskWithMaintenanceWindowCommandInput | RemoveTagsFromResourceCommandInput | ResetServiceSettingCommandInput | ResumeSessionCommandInput | SendAutomationSignalCommandInput | SendCommandCommandInput | StartAssociationsOnceCommandInput | StartAutomationExecutionCommandInput | StartChangeRequestExecutionCommandInput | StartSessionCommandInput | StopAutomationExecutionCommandInput | TerminateSessionCommandInput | UnlabelParameterVersionCommandInput | UpdateAssociationCommandInput | UpdateAssociationStatusCommandInput | UpdateDocumentCommandInput | UpdateDocumentDefaultVersionCommandInput | UpdateDocumentMetadataCommandInput | UpdateMaintenanceWindowCommandInput | UpdateMaintenanceWindowTargetCommandInput | UpdateMaintenanceWindowTaskCommandInput | UpdateManagedInstanceRoleCommandInput | UpdateOpsItemCommandInput | UpdateOpsMetadataCommandInput | UpdatePatchBaselineCommandInput | UpdateResourceDataSyncCommandInput | UpdateServiceSettingCommandInput;
    export type ServiceOutputTypes = AddTagsToResourceCommandOutput | AssociateOpsItemRelatedItemCommandOutput | CancelCommandCommandOutput | CancelMaintenanceWindowExecutionCommandOutput | CreateActivationCommandOutput | CreateAssociationBatchCommandOutput | CreateAssociationCommandOutput | CreateDocumentCommandOutput | CreateMaintenanceWindowCommandOutput | CreateOpsItemCommandOutput | CreateOpsMetadataCommandOutput | CreatePatchBaselineCommandOutput | CreateResourceDataSyncCommandOutput | DeleteActivationCommandOutput | DeleteAssociationCommandOutput | DeleteDocumentCommandOutput | DeleteInventoryCommandOutput | DeleteMaintenanceWindowCommandOutput | DeleteOpsMetadataCommandOutput | DeleteParameterCommandOutput | DeleteParametersCommandOutput | DeletePatchBaselineCommandOutput | DeleteResourceDataSyncCommandOutput | DeregisterManagedInstanceCommandOutput | DeregisterPatchBaselineForPatchGroupCommandOutput | DeregisterTargetFromMaintenanceWindowCommandOutput | DeregisterTaskFromMaintenanceWindowCommandOutput | DescribeActivationsCommandOutput | DescribeAssociationCommandOutput | DescribeAssociationExecutionTargetsCommandOutput | DescribeAssociationExecutionsCommandOutput | DescribeAutomationExecutionsCommandOutput | DescribeAutomationStepExecutionsCommandOutput | DescribeAvailablePatchesCommandOutput | DescribeDocumentCommandOutput | DescribeDocumentPermissionCommandOutput | DescribeEffectiveInstanceAssociationsCommandOutput | DescribeEffectivePatchesForPatchBaselineCommandOutput | DescribeInstanceAssociationsStatusCommandOutput | DescribeInstanceInformationCommandOutput | DescribeInstancePatchStatesCommandOutput | DescribeInstancePatchStatesForPatchGroupCommandOutput | DescribeInstancePatchesCommandOutput | DescribeInventoryDeletionsCommandOutput | DescribeMaintenanceWindowExecutionTaskInvocationsCommandOutput | DescribeMaintenanceWindowExecutionTasksCommandOutput | DescribeMaintenanceWindowExecutionsCommandOutput | DescribeMaintenanceWindowScheduleCommandOutput | DescribeMaintenanceWindowTargetsCommandOutput | DescribeMaintenanceWindowTasksCommandOutput | DescribeMaintenanceWindowsCommandOutput | DescribeMaintenanceWindowsForTargetCommandOutput | DescribeOpsItemsCommandOutput | DescribeParametersCommandOutput | DescribePatchBaselinesCommandOutput | DescribePatchGroupStateCommandOutput | DescribePatchGroupsCommandOutput | DescribePatchPropertiesCommandOutput | DescribeSessionsCommandOutput | DisassociateOpsItemRelatedItemCommandOutput | GetAutomationExecutionCommandOutput | GetCalendarStateCommandOutput | GetCommandInvocationCommandOutput | GetConnectionStatusCommandOutput | GetDefaultPatchBaselineCommandOutput | GetDeployablePatchSnapshotForInstanceCommandOutput | GetDocumentCommandOutput | GetInventoryCommandOutput | GetInventorySchemaCommandOutput | GetMaintenanceWindowCommandOutput | GetMaintenanceWindowExecutionCommandOutput | GetMaintenanceWindowExecutionTaskCommandOutput | GetMaintenanceWindowExecutionTaskInvocationCommandOutput | GetMaintenanceWindowTaskCommandOutput | GetOpsItemCommandOutput | GetOpsMetadataCommandOutput | GetOpsSummaryCommandOutput | GetParameterCommandOutput | GetParameterHistoryCommandOutput | GetParametersByPathCommandOutput | GetParametersCommandOutput | GetPatchBaselineCommandOutput | GetPatchBaselineForPatchGroupCommandOutput | GetServiceSettingCommandOutput | LabelParameterVersionCommandOutput | ListAssociationVersionsCommandOutput | ListAssociationsCommandOutput | ListCommandInvocationsCommandOutput | ListCommandsCommandOutput | ListComplianceItemsCommandOutput | ListComplianceSummariesCommandOutput | ListDocumentMetadataHistoryCommandOutput | ListDocumentVersionsCommandOutput | ListDocumentsCommandOutput | ListInventoryEntriesCommandOutput | ListOpsItemEventsCommandOutput | ListOpsItemRelatedItemsCommandOutput | ListOpsMetadataCommandOutput | ListResourceComplianceSummariesCommandOutput | ListResourceDataSyncCommandOutput | ListTagsForResourceCommandOutput | ModifyDocumentPermissionCommandOutput | PutComplianceItemsCommandOutput | PutInventoryCommandOutput | PutParameterCommandOutput | RegisterDefaultPatchBaselineCommandOutput | RegisterPatchBaselineForPatchGroupCommandOutput | RegisterTargetWithMaintenanceWindowCommandOutput | RegisterTaskWithMaintenanceWindowCommandOutput | RemoveTagsFromResourceCommandOutput | ResetServiceSettingCommandOutput | ResumeSessionCommandOutput | SendAutomationSignalCommandOutput | SendCommandCommandOutput | StartAssociationsOnceCommandOutput | StartAutomationExecutionCommandOutput | StartChangeRequestExecutionCommandOutput | StartSessionCommandOutput | StopAutomationExecutionCommandOutput | TerminateSessionCommandOutput | UnlabelParameterVersionCommandOutput | UpdateAssociationCommandOutput | UpdateAssociationStatusCommandOutput | UpdateDocumentCommandOutput | UpdateDocumentDefaultVersionCommandOutput | UpdateDocumentMetadataCommandOutput | UpdateMaintenanceWindowCommandOutput | UpdateMaintenanceWindowTargetCommandOutput | UpdateMaintenanceWindowTaskCommandOutput | UpdateManagedInstanceRoleCommandOutput | UpdateOpsItemCommandOutput | UpdateOpsMetadataCommandOutput | UpdatePatchBaselineCommandOutput | UpdateResourceDataSyncCommandOutput | UpdateServiceSettingCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type SSMClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of SSMClient class constructor that set the region, credentials and other options.
        */
    export interface SSMClientConfig extends SSMClientConfigType {
    }
    type SSMClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of SSMClient class. This is resolved and normalized from the {@link SSMClientConfig | constructor configuration interface}.
        */
    export interface SSMClientResolvedConfig extends SSMClientResolvedConfigType {
    }
    /**
        * <p>Amazon Web Services Systems Manager is a collection of capabilities that helps you automate management tasks such as
        *    collecting system inventory, applying operating system (OS) patches, automating the creation of
        *    Amazon Machine Images (AMIs), and configuring operating systems (OSs) and applications at scale.
        *    Systems Manager lets you remotely and securely manage the configuration of your managed nodes. A
        *     <i>managed node</i> is any Amazon Elastic Compute Cloud (Amazon EC2) instance, edge device, or on-premises
        *    server or virtual machine (VM) that has been configured for Systems Manager. </p>
        *          <note>
        *             <p>With support for IoT Greengrass core devices, the phrase <i>managed
        *      instance</i> has been changed to <i>managed node</i> in most of the Systems Manager
        *     documentation. The Systems Manager console, API calls, error messages, and SSM documents still use the
        *     term <i>instance</i>.</p>
        *          </note>
        *          <p>This reference is intended to be used with the <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/">Amazon Web Services Systems Manager User Guide</a>.</p>
        *          <p>To get started, verify prerequisites and configure managed nodes. For more information, see
        *     <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up.html">Setting up
        *     Amazon Web Services Systems Manager</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        *          <p class="title">
        *             <b>Related resources</b>
        *          </p>
        *          <ul>
        *             <li>
        *                <p>For information about how to use a Query API, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/making-api-requests.html">Making API requests</a>. </p>
        *             </li>
        *             <li>
        *                <p>For information about other API operations you can perform on EC2 instances, see the
        *       <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/">Amazon EC2 API Reference</a>.</p>
        *             </li>
        *             <li>
        *                <p>For information about AppConfig, a capability of Systems Manager, see the <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/">AppConfig User Guide</a> and the <a href="https://docs.aws.amazon.com/appconfig/2019-10-09/APIReference/">AppConfig API
        *      Reference</a>.</p>
        *             </li>
        *             <li>
        *                <p>For information about Incident Manager, a capability of Systems Manager, see the <a href="https://docs.aws.amazon.com/incident-manager/latest/userguide/">Incident Manager User Guide</a>
        *      and the <a href="https://docs.aws.amazon.com/incident-manager/latest/APIReference/">Incident Manager API
        *       Reference</a>.</p>
        *             </li>
        *          </ul>
        */
    export class SSMClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, SSMClientResolvedConfig> {
            /**
                * The resolved configuration of SSMClient class. This is resolved and normalized from the {@link SSMClientConfig | constructor configuration interface}.
                */
            readonly config: SSMClientResolvedConfig;
            constructor(configuration: SSMClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { SSMServiceException as __BaseException } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/SSMServiceException";
    /**
        * <p>Information includes the Amazon Web Services account ID where the current document is shared and the
        *    version shared with that account.</p>
        */
    export interface AccountSharingInfo {
            /**
                * <p>The Amazon Web Services account ID where the current document is shared.</p>
                */
            AccountId?: string;
            /**
                * <p>The version of the current document shared with the account.</p>
                */
            SharedDocumentVersion?: string;
    }
    export namespace AccountSharingInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccountSharingInfo) => any;
    }
    /**
        * <p>Metadata that you assign to your Amazon Web Services resources. Tags enable you to categorize your
        *    resources in different ways, for example, by purpose, owner, or environment. In Amazon Web Services Systems Manager, you
        *    can apply tags to Systems Manager documents (SSM documents), managed nodes, maintenance windows,
        *    parameters, patch baselines, OpsItems, and OpsMetadata.</p>
        */
    export interface Tag {
            /**
                * <p>The name of the tag.</p>
                */
            Key: string | undefined;
            /**
                * <p>The value of the tag.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>An activation registers one or more on-premises servers or virtual machines (VMs) with Amazon Web Services
        *    so that you can configure those servers or VMs using Run Command. A server or VM that has been
        *    registered with Amazon Web Services Systems Manager is called a managed node.</p>
        */
    export interface Activation {
            /**
                * <p>The ID created by Systems Manager when you submitted the activation.</p>
                */
            ActivationId?: string;
            /**
                * <p>A user defined description of the activation.</p>
                */
            Description?: string;
            /**
                * <p>A name for the managed node when it is created.</p>
                */
            DefaultInstanceName?: string;
            /**
                * <p>The Identity and Access Management (IAM) role to assign to the managed node.</p>
                */
            IamRole?: string;
            /**
                * <p>The maximum number of managed nodes that can be registered using this activation.</p>
                */
            RegistrationLimit?: number;
            /**
                * <p>The number of managed nodes already registered with this activation.</p>
                */
            RegistrationsCount?: number;
            /**
                * <p>The date when this activation can no longer be used to register managed nodes.</p>
                */
            ExpirationDate?: Date;
            /**
                * <p>Whether or not the activation is expired.</p>
                */
            Expired?: boolean;
            /**
                * <p>The date the activation was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>Tags assigned to the activation.</p>
                */
            Tags?: Tag[];
    }
    export namespace Activation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Activation) => any;
    }
    export enum ResourceTypeForTagging {
            AUTOMATION = "Automation",
            DOCUMENT = "Document",
            MAINTENANCE_WINDOW = "MaintenanceWindow",
            MANAGED_INSTANCE = "ManagedInstance",
            OPSMETADATA = "OpsMetadata",
            OPS_ITEM = "OpsItem",
            PARAMETER = "Parameter",
            PATCH_BASELINE = "PatchBaseline"
    }
    export interface AddTagsToResourceRequest {
            /**
                * <p>Specifies the type of resource you are tagging.</p>
                *          <note>
                *             <p>The <code>ManagedInstance</code> type for this API operation is for on-premises managed
                *     nodes. You must specify the name of the managed node in the following format:
                *       <code>mi-<i>ID_number</i>
                *                </code>. For example,
                *     <code>mi-1a2b3c4d5e6f</code>.</p>
                *          </note>
                */
            ResourceType: ResourceTypeForTagging | string | undefined;
            /**
                * <p>The resource ID you want to tag.</p>
                *          <p>Use the ID of the resource. Here are some examples:</p>
                *          <p>
                *             <code>MaintenanceWindow</code>: <code>mw-012345abcde</code>
                *          </p>
                *          <p>
                *             <code>PatchBaseline</code>: <code>pb-012345abcde</code>
                *          </p>
                *          <p>
                *             <code>Automation</code>: <code>example-c160-4567-8519-012345abcde</code>
                *          </p>
                *          <p>
                *             <code>OpsMetadata</code> object: <code>ResourceID</code> for tagging is created from the
                *    Amazon Resource Name (ARN) for the object. Specifically, <code>ResourceID</code> is created from
                *    the strings that come after the word <code>opsmetadata</code> in the ARN. For example, an
                *    OpsMetadata object with an ARN of
                *     <code>arn:aws:ssm:us-east-2:1234567890:opsmetadata/aws/ssm/MyGroup/appmanager</code> has a
                *     <code>ResourceID</code> of either <code>aws/ssm/MyGroup/appmanager</code> or
                *     <code>/aws/ssm/MyGroup/appmanager</code>.</p>
                *          <p>For the <code>Document</code> and <code>Parameter</code> values, use the name of the
                *    resource.</p>
                *          <p>
                *             <code>ManagedInstance</code>: <code>mi-012345abcde</code>
                *          </p>
                *          <note>
                *             <p>The <code>ManagedInstance</code> type for this API operation is only for on-premises
                *     managed nodes. You must specify the name of the managed node in the following format:
                *       <code>mi-<i>ID_number</i>
                *                </code>. For example,
                *     <code>mi-1a2b3c4d5e6f</code>.</p>
                *          </note>
                */
            ResourceId: string | undefined;
            /**
                * <p>One or more tags. The value parameter is required.</p>
                *          <important>
                *             <p>Don't enter personally identifiable information in this field.</p>
                *          </important>
                */
            Tags: Tag[] | undefined;
    }
    export namespace AddTagsToResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsToResourceRequest) => any;
    }
    export interface AddTagsToResourceResult {
    }
    export namespace AddTagsToResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddTagsToResourceResult) => any;
    }
    /**
        * <p>An error occurred on the server side.</p>
        */
    export class InternalServerError extends __BaseException {
            readonly name: "InternalServerError";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerError, __BaseException>);
    }
    /**
        * <p>The resource ID isn't valid. Verify that you entered the correct ID and try again.</p>
        */
    export class InvalidResourceId extends __BaseException {
            readonly name: "InvalidResourceId";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidResourceId, __BaseException>);
    }
    /**
        * <p>The resource type isn't valid. For example, if you are attempting to tag an EC2 instance,
        *    the instance must be a registered managed node.</p>
        */
    export class InvalidResourceType extends __BaseException {
            readonly name: "InvalidResourceType";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidResourceType, __BaseException>);
    }
    /**
        * <p>The <code>Targets</code> parameter includes too many tags. Remove one or more tags and try
        *    the command again.</p>
        */
    export class TooManyTagsError extends __BaseException {
            readonly name: "TooManyTagsError";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyTagsError, __BaseException>);
    }
    /**
        * <p>There are concurrent updates for a resource that supports one update at a time.</p>
        */
    export class TooManyUpdates extends __BaseException {
            readonly name: "TooManyUpdates";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyUpdates, __BaseException>);
    }
    /**
        * <p>Error returned if an attempt is made to register a patch group with a patch baseline that is
        *    already registered with a different patch baseline.</p>
        */
    export class AlreadyExistsException extends __BaseException {
            readonly name: "AlreadyExistsException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AlreadyExistsException, __BaseException>);
    }
    export interface AssociateOpsItemRelatedItemRequest {
            /**
                * <p>The ID of the OpsItem to which you want to associate a resource as a related item.</p>
                */
            OpsItemId: string | undefined;
            /**
                * <p>The type of association that you want to create between an OpsItem and a resource. OpsCenter
                *    supports <code>IsParentOf</code> and <code>RelatesTo</code> association types.</p>
                */
            AssociationType: string | undefined;
            /**
                * <p>The type of resource that you want to associate with an OpsItem. OpsCenter supports the
                *    following types:</p>
                *          <p>
                *             <code>AWS::SSMIncidents::IncidentRecord</code>: an Incident Manager incident. </p>
                *          <p>
                *             <code>AWS::SSM::Document</code>: a Systems Manager (SSM) document.</p>
                */
            ResourceType: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the Amazon Web Services resource that you want to associate with the
                *    OpsItem.</p>
                */
            ResourceUri: string | undefined;
    }
    export namespace AssociateOpsItemRelatedItemRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateOpsItemRelatedItemRequest) => any;
    }
    export interface AssociateOpsItemRelatedItemResponse {
            /**
                * <p>The association ID.</p>
                */
            AssociationId?: string;
    }
    export namespace AssociateOpsItemRelatedItemResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateOpsItemRelatedItemResponse) => any;
    }
    /**
        * <p>A specified parameter argument isn't valid. Verify the available arguments and try
        *    again.</p>
        */
    export class OpsItemInvalidParameterException extends __BaseException {
            readonly name: "OpsItemInvalidParameterException";
            readonly $fault: "client";
            ParameterNames?: string[];
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OpsItemInvalidParameterException, __BaseException>);
    }
    /**
        * <p>The request caused OpsItems to exceed one or more quotas. For information about OpsItem
        *    quotas, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-learn-more.html#OpsCenter-learn-more-limits">What are the resource limits for OpsCenter?</a>.</p>
        */
    export class OpsItemLimitExceededException extends __BaseException {
            readonly name: "OpsItemLimitExceededException";
            readonly $fault: "client";
            ResourceTypes?: string[];
            Limit?: number;
            LimitType?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OpsItemLimitExceededException, __BaseException>);
    }
    /**
        * <p>The specified OpsItem ID doesn't exist. Verify the ID and try again.</p>
        */
    export class OpsItemNotFoundException extends __BaseException {
            readonly name: "OpsItemNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OpsItemNotFoundException, __BaseException>);
    }
    /**
        * <p>The Amazon Resource Name (ARN) is already associated with the OpsItem.</p>
        */
    export class OpsItemRelatedItemAlreadyExistsException extends __BaseException {
            readonly name: "OpsItemRelatedItemAlreadyExistsException";
            readonly $fault: "client";
            Message?: string;
            ResourceUri?: string;
            OpsItemId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OpsItemRelatedItemAlreadyExistsException, __BaseException>);
    }
    /**
        * <p></p>
        */
    export interface CancelCommandRequest {
            /**
                * <p>The ID of the command you want to cancel.</p>
                */
            CommandId: string | undefined;
            /**
                * <p>(Optional) A list of managed node IDs on which you want to cancel the command. If not
                *    provided, the command is canceled on every node on which it was requested.</p>
                */
            InstanceIds?: string[];
    }
    export namespace CancelCommandRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelCommandRequest) => any;
    }
    /**
        * <p>Whether or not the command was successfully canceled. There is no guarantee that a request
        *    can be canceled.</p>
        */
    export interface CancelCommandResult {
    }
    export namespace CancelCommandResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelCommandResult) => any;
    }
    /**
        * <p>You can't specify a managed node ID in more than one association.</p>
        */
    export class DuplicateInstanceId extends __BaseException {
            readonly name: "DuplicateInstanceId";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateInstanceId, __BaseException>);
    }
    /**
        * <p>The specified command ID isn't valid. Verify the ID and try again.</p>
        */
    export class InvalidCommandId extends __BaseException {
            readonly name: "InvalidCommandId";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidCommandId, __BaseException>);
    }
    /**
        * <p>The following problems can cause this exception:</p>
        *          <ul>
        *             <li>
        *                <p>You don't have permission to access the managed node.</p>
        *             </li>
        *             <li>
        *                <p>Amazon Web Services Systems Manager Agent(SSM Agent) isn't running. Verify that SSM Agent is
        *      running.</p>
        *             </li>
        *             <li>
        *                <p>SSM Agent isn't registered with the SSM endpoint. Try reinstalling SSM Agent.</p>
        *             </li>
        *             <li>
        *                <p>The managed node isn't in valid state. Valid states are: <code>Running</code>,
        *       <code>Pending</code>, <code>Stopped</code>, and <code>Stopping</code>. Invalid states are:
        *       <code>Shutting-down</code> and <code>Terminated</code>.</p>
        *             </li>
        *          </ul>
        */
    export class InvalidInstanceId extends __BaseException {
            readonly name: "InvalidInstanceId";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInstanceId, __BaseException>);
    }
    export interface CancelMaintenanceWindowExecutionRequest {
            /**
                * <p>The ID of the maintenance window execution to stop.</p>
                */
            WindowExecutionId: string | undefined;
    }
    export namespace CancelMaintenanceWindowExecutionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelMaintenanceWindowExecutionRequest) => any;
    }
    export interface CancelMaintenanceWindowExecutionResult {
            /**
                * <p>The ID of the maintenance window execution that has been stopped.</p>
                */
            WindowExecutionId?: string;
    }
    export namespace CancelMaintenanceWindowExecutionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CancelMaintenanceWindowExecutionResult) => any;
    }
    /**
        * <p>Error returned when the ID specified for a resource, such as a maintenance window or patch
        *    baseline, doesn't exist.</p>
        *          <p>For information about resource quotas in Amazon Web Services Systems Manager, see <a href="https://docs.aws.amazon.com/general/latest/gr/ssm.html#limits_ssm">Systems Manager service quotas</a> in the
        *     <i>Amazon Web Services General Reference</i>.</p>
        */
    export class DoesNotExistException extends __BaseException {
            readonly name: "DoesNotExistException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DoesNotExistException, __BaseException>);
    }
    /**
        * <p>Reserved for internal use.</p>
        */
    export interface RegistrationMetadataItem {
            /**
                * <p>Reserved for internal use.</p>
                */
            Key: string | undefined;
            /**
                * <p>Reserved for internal use.</p>
                */
            Value: string | undefined;
    }
    export namespace RegistrationMetadataItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegistrationMetadataItem) => any;
    }
    export interface CreateActivationRequest {
            /**
                * <p>A user-defined description of the resource that you want to register with Systems Manager. </p>
                *          <important>
                *             <p>Don't enter personally identifiable information in this field.</p>
                *          </important>
                */
            Description?: string;
            /**
                * <p>The name of the registered, managed node as it will appear in the Amazon Web Services Systems Manager console or when
                *    you use the Amazon Web Services command line tools to list Systems Manager resources.</p>
                *          <important>
                *             <p>Don't enter personally identifiable information in this field.</p>
                *          </important>
                */
            DefaultInstanceName?: string;
            /**
                * <p>The name of the Identity and Access Management (IAM) role that you want to assign to
                *    the managed node. This IAM role must provide AssumeRole permissions for the
                *    Amazon Web Services Systems Manager service principal <code>ssm.amazonaws.com</code>. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-service-role.html">Create an
                *      IAM service role for a hybrid environment</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            IamRole: string | undefined;
            /**
                * <p>Specify the maximum number of managed nodes you want to register. The default value is
                *     <code>1</code>.</p>
                */
            RegistrationLimit?: number;
            /**
                * <p>The date by which this activation request should expire, in timestamp format, such as
                *    "2021-07-07T00:00:00". You can specify a date up to 30 days in advance. If you don't provide an
                *    expiration date, the activation code expires in 24 hours.</p>
                */
            ExpirationDate?: Date;
            /**
                * <p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in
                *    different ways, such as by purpose, owner, or environment. For example, you might want to tag an
                *    activation to identify which servers or virtual machines (VMs) in your on-premises environment
                *    you intend to activate. In this case, you could specify the following key-value pairs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Key=OS,Value=Windows</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=Environment,Value=Production</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <important>
                *             <p>When you install SSM Agent on your on-premises servers and VMs, you specify an activation ID
                *     and code. When you specify the activation ID and code, tags assigned to the activation are
                *     automatically applied to the on-premises servers or VMs.</p>
                *          </important>
                *          <p>You can't add tags to or delete tags from an existing activation. You can tag your
                *    on-premises servers, edge devices, and VMs after they connect to Systems Manager for the first time and are
                *    assigned a managed node ID. This means they are listed in the Amazon Web Services Systems Manager console with an ID that
                *    is prefixed with "mi-". For information about how to add tags to your managed nodes, see <a>AddTagsToResource</a>. For information about how to remove tags from your managed nodes,
                *    see <a>RemoveTagsFromResource</a>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Reserved for internal use.</p>
                */
            RegistrationMetadata?: RegistrationMetadataItem[];
    }
    export namespace CreateActivationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateActivationRequest) => any;
    }
    export interface CreateActivationResult {
            /**
                * <p>The ID number generated by the system when it processed the activation. The activation ID
                *    functions like a user name.</p>
                */
            ActivationId?: string;
            /**
                * <p>The code the system generates when it processes the activation. The activation code
                *    functions like a password to validate the activation ID. </p>
                */
            ActivationCode?: string;
    }
    export namespace CreateActivationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateActivationResult) => any;
    }
    /**
        * <p>You must specify values for all required parameters in the Amazon Web Services Systems Manager document (SSM
        *    document). You can only supply values to parameters defined in the SSM document.</p>
        */
    export class InvalidParameters extends __BaseException {
            readonly name: "InvalidParameters";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidParameters, __BaseException>);
    }
    /**
        * <p>The specified association already exists.</p>
        */
    export class AssociationAlreadyExists extends __BaseException {
            readonly name: "AssociationAlreadyExists";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AssociationAlreadyExists, __BaseException>);
    }
    /**
        * <p>You can have at most 2,000 active associations.</p>
        */
    export class AssociationLimitExceeded extends __BaseException {
            readonly name: "AssociationLimitExceeded";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AssociationLimitExceeded, __BaseException>);
    }
    export enum AssociationComplianceSeverity {
            Critical = "CRITICAL",
            High = "HIGH",
            Low = "LOW",
            Medium = "MEDIUM",
            Unspecified = "UNSPECIFIED"
    }
    /**
        * <p>An S3 bucket where you want to store the results of this request.</p>
        */
    export interface S3OutputLocation {
            /**
                * <p>The Amazon Web Services Region of the S3 bucket.</p>
                */
            OutputS3Region?: string;
            /**
                * <p>The name of the S3 bucket.</p>
                */
            OutputS3BucketName?: string;
            /**
                * <p>The S3 bucket subfolder.</p>
                */
            OutputS3KeyPrefix?: string;
    }
    export namespace S3OutputLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3OutputLocation) => any;
    }
    /**
        * <p>An S3 bucket where you want to store the results of this request.</p>
        *          <p>For the minimal permissions required to enable Amazon S3 output for an association,
        *    see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-state-assoc.html">Creating associations</a> in the <i>Systems Manager User Guide</i>. </p>
        */
    export interface InstanceAssociationOutputLocation {
            /**
                * <p>An S3 bucket where you want to store the results of this request.</p>
                */
            S3Location?: S3OutputLocation;
    }
    export namespace InstanceAssociationOutputLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceAssociationOutputLocation) => any;
    }
    export enum AssociationSyncCompliance {
            Auto = "AUTO",
            Manual = "MANUAL"
    }
    /**
        * <p>The combination of Amazon Web Services Regions and Amazon Web Services accounts targeted by the current Automation
        *    execution.</p>
        */
    export interface TargetLocation {
            /**
                * <p>The Amazon Web Services accounts targeted by the current Automation execution.</p>
                */
            Accounts?: string[];
            /**
                * <p>The Amazon Web Services Regions targeted by the current Automation execution.</p>
                */
            Regions?: string[];
            /**
                * <p>The maximum number of Amazon Web Services Regions and Amazon Web Services accounts allowed to run the Automation
                *    concurrently.</p>
                */
            TargetLocationMaxConcurrency?: string;
            /**
                * <p>The maximum number of errors allowed before the system stops queueing additional Automation
                *    executions for the currently running Automation.</p>
                */
            TargetLocationMaxErrors?: string;
            /**
                * <p>The Automation execution role used by the currently running Automation. If not specified,
                *    the default value is <code>AWS-SystemsManager-AutomationExecutionRole</code>.</p>
                */
            ExecutionRoleName?: string;
    }
    export namespace TargetLocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetLocation) => any;
    }
    /**
        * <p>An array of search criteria that targets managed nodes using a key-value pair that you
        *    specify.</p>
        *          <note>
        *             <p> One or more targets must be specified for maintenance window Run Command-type tasks.
        *     Depending on the task, targets are optional for other maintenance window task types (Automation,
        *      Lambda, and Step Functions). For more information about running tasks
        *     that don't specify targets, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">Registering
        *      maintenance window tasks without targets</a> in the
        *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        *          </note>
        *          <p>Supported formats include the following.</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>Key=InstanceIds,Values=<instance-id-1>,<instance-id-2>,<instance-id-3></code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Key=tag:<my-tag-key>,Values=<my-tag-value-1>,<my-tag-value-2></code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Key=tag-key,Values=<my-tag-key-1>,<my-tag-key-2></code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Run Command and Maintenance window targets only</b>:
        *       <code>Key=resource-groups:Name,Values=<resource-group-name></code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Maintenance window targets only</b>:
        *       <code>Key=resource-groups:ResourceTypeFilters,Values=<resource-type-1>,<resource-type-2></code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Automation targets only</b>:
        *       <code>Key=ResourceGroup;Values=<resource-group-name></code>
        *                </p>
        *             </li>
        *          </ul>
        *          <p>For example:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>Key=InstanceIds,Values=i-02573cafcfEXAMPLE,i-0471e04240EXAMPLE,i-07782c72faEXAMPLE</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Key=tag:CostCenter,Values=CostCenter1,CostCenter2,CostCenter3</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>Key=tag-key,Values=Name,Instance-Type,CostCenter</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Run Command and Maintenance window targets only</b>:
        *       <code>Key=resource-groups:Name,Values=ProductionResourceGroup</code>
        *                </p>
        *                <p>This example demonstrates how to target all resources in the resource group <b>ProductionResourceGroup</b> in your maintenance window.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Maintenance window targets only</b>:
        *       <code>Key=resource-groups:ResourceTypeFilters,Values=AWS::EC2::INSTANCE,AWS::EC2::VPC</code>
        *                </p>
        *                <p>This example demonstrates how to target only Amazon Elastic Compute Cloud (Amazon EC2)
        *      instances and VPCs in your maintenance window.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Automation targets only</b>:
        *       <code>Key=ResourceGroup,Values=MyResourceGroup</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>State Manager association targets only</b>:
        *       <code>Key=InstanceIds,Values=*</code>
        *                </p>
        *                <p>This example demonstrates how to target all managed instances in the Amazon Web Services Region where
        *      the association was created.</p>
        *             </li>
        *          </ul>
        *          <p>For more information about how to send commands that target managed nodes using
        *     <code>Key,Value</code> parameters, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-targeting">Targeting multiple instances</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        */
    export interface Target {
            /**
                * <p>User-defined criteria for sending commands that target managed nodes that meet the
                *    criteria.</p>
                */
            Key?: string;
            /**
                * <p>User-defined criteria that maps to <code>Key</code>. For example, if you specified
                *     <code>tag:ServerRole</code>, you could specify <code>value:WebServer</code> to run a command on
                *    instances that include EC2 tags of <code>ServerRole,WebServer</code>. </p>
                *          <p>Depending on the type of target, the maximum number of values for a key might be lower than
                *    the global maximum of 50.</p>
                */
            Values?: string[];
    }
    export namespace Target {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Target) => any;
    }
    export interface CreateAssociationRequest {
            /**
                * <p>The name of the SSM Command document or Automation runbook that contains the configuration
                *    information for the managed node.</p>
                *          <p>You can specify Amazon Web Services-predefined documents, documents you created, or a document that is
                *    shared with you from another account.</p>
                *          <p>For Systems Manager documents (SSM documents) that are shared with you from other Amazon Web Services accounts, you
                *    must specify the complete SSM document ARN, in the following format:</p>
                *          <p>
                *             <code>arn:<i>partition</i>:ssm:<i>region</i>:<i>account-id</i>:document/<i>document-name</i>
                *             </code>
                *          </p>
                *          <p>For example:</p>
                *          <p>
                *             <code>arn:aws:ssm:us-east-2:12345678912:document/My-Shared-Document</code>
                *          </p>
                *          <p>For Amazon Web Services-predefined documents and SSM documents you created in your account, you only need
                *    to specify the document name. For example, <code>AWS-ApplyPatchBaseline</code> or
                *     <code>My-Document</code>.</p>
                */
            Name: string | undefined;
            /**
                * <p>The document version you want to associate with the target(s). Can be a specific version or
                *    the default version.</p>
                *          <important>
                *             <p>State Manager doesn't support running associations that use a new version of a document if
                *     that document is shared from another account. State Manager always runs the <code>default</code>
                *     version of a document if shared from another account, even though the Systems Manager console shows that a
                *     new version was processed. If you want to run an association using a new version of a document
                *     shared form another account, you must set the document version to <code>default</code>.</p>
                *          </important>
                */
            DocumentVersion?: string;
            /**
                * <p>The managed node ID.</p>
                *          <note>
                *             <p>
                *                <code>InstanceId</code> has been deprecated. To specify a managed node ID for an
                *     association, use the <code>Targets</code> parameter. Requests that
                *     include the parameter <code>InstanceID</code> with Systems Manager documents (SSM documents) that use
                *     schema version 2.0 or later will fail. In addition, if you use the
                *     parameter <code>InstanceId</code>, you can't use the parameters <code>AssociationName</code>,
                *      <code>DocumentVersion</code>, <code>MaxErrors</code>, <code>MaxConcurrency</code>,
                *      <code>OutputLocation</code>, or <code>ScheduleExpression</code>. To use these parameters, you
                *     must use the <code>Targets</code> parameter.</p>
                *          </note>
                */
            InstanceId?: string;
            /**
                * <p>The parameters for the runtime configuration of the document.</p>
                */
            Parameters?: Record<string, string[]>;
            /**
                * <p>The targets for the association. You can target managed nodes by using tags, Amazon Web Services resource
                *    groups, all managed nodes in an Amazon Web Services account, or individual managed node IDs. You can target all
                *    managed nodes in an Amazon Web Services account by specifying the <code>InstanceIds</code> key with a value of
                *     <code>*</code>. For more information about choosing targets for an association, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-state-manager-targets-and-rate-controls.html">Using targets and rate controls with State Manager associations</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            Targets?: Target[];
            /**
                * <p>A cron expression when the association will be applied to the target(s).</p>
                */
            ScheduleExpression?: string;
            /**
                * <p>An Amazon Simple Storage Service (Amazon S3) bucket where you want to store the output
                *    details of the request.</p>
                */
            OutputLocation?: InstanceAssociationOutputLocation;
            /**
                * <p>Specify a descriptive name for the association.</p>
                */
            AssociationName?: string;
            /**
                * <p>Choose the parameter that will define how your automation will branch out. This target is
                *    required for associations that use an Automation runbook and target resources by using rate
                *    controls. Automation is a capability of Amazon Web Services Systems Manager.</p>
                */
            AutomationTargetParameterName?: string;
            /**
                * <p>The number of errors that are allowed before the system stops sending requests to run the
                *    association on additional targets. You can specify either an absolute number of errors, for
                *    example 10, or a percentage of the target set, for example 10%. If you specify 3, for example,
                *    the system stops sending requests when the fourth error is received. If you specify 0, then the
                *    system stops sending requests after the first error is returned. If you run an association on 50
                *    managed nodes and set <code>MaxError</code> to 10%, then the system stops sending the request
                *    when the sixth error is received.</p>
                *          <p>Executions that are already running an association when <code>MaxErrors</code> is reached
                *    are allowed to complete, but some of these executions may fail as well. If you need to ensure
                *    that there won't be more than max-errors failed executions, set <code>MaxConcurrency</code> to 1
                *    so that executions proceed one at a time.</p>
                */
            MaxErrors?: string;
            /**
                * <p>The maximum number of targets allowed to run the association at the same time. You can
                *    specify a number, for example 10, or a percentage of the target set, for example 10%. The default
                *    value is 100%, which means all targets run the association at the same time.</p>
                *          <p>If a new managed node starts and attempts to run an association while Systems Manager is running
                *     <code>MaxConcurrency</code> associations, the association is allowed to run. During the next
                *    association interval, the new managed node will process its association within the limit
                *    specified for <code>MaxConcurrency</code>.</p>
                */
            MaxConcurrency?: string;
            /**
                * <p>The severity level to assign to the association.</p>
                */
            ComplianceSeverity?: AssociationComplianceSeverity | string;
            /**
                * <p>The mode for generating association compliance. You can specify <code>AUTO</code> or
                *     <code>MANUAL</code>. In <code>AUTO</code> mode, the system uses the status of the association
                *    execution to determine the compliance status. If the association execution runs successfully,
                *    then the association is <code>COMPLIANT</code>. If the association execution doesn't run
                *    successfully, the association is <code>NON-COMPLIANT</code>.</p>
                *          <p>In <code>MANUAL</code> mode, you must specify the <code>AssociationId</code> as a parameter
                *    for the <a>PutComplianceItems</a> API operation. In this case, compliance data isn't
                *    managed by State Manager. It is managed by your direct call to the <a>PutComplianceItems</a> API operation.</p>
                *          <p>By default, all associations use <code>AUTO</code> mode.</p>
                */
            SyncCompliance?: AssociationSyncCompliance | string;
            /**
                * <p>By default, when you create a new association, the system runs it immediately after it is
                *    created and then according to the schedule you specified. Specify this option if you don't want
                *    an association to run immediately after you create it. This parameter isn't supported for rate
                *    expressions.</p>
                */
            ApplyOnlyAtCronInterval?: boolean;
            /**
                * <p>The names or Amazon Resource Names (ARNs) of the Change Calendar type documents you want to
                *    gate your associations under. The associations only run when that change calendar is open. For
                *    more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar">Amazon Web Services Systems Manager Change
                *     Calendar</a>.</p>
                */
            CalendarNames?: string[];
            /**
                * <p>A location is a combination of Amazon Web Services Regions and Amazon Web Services accounts where you want to run the
                *    association. Use this action to create an association in multiple Regions and multiple
                *    accounts.</p>
                */
            TargetLocations?: TargetLocation[];
            /**
                * <p>Number of days to wait after the scheduled day to run an association. For example, if you
                *    specified a cron schedule of <code>cron(0 0 ? * THU#2 *)</code>, you could specify an offset of 3
                *    to run the association each Sunday after the second Thursday of the month. For more information
                *    about cron schedules for associations, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/reference-cron-and-rate-expressions.html">Reference: Cron
                *     and rate expressions for Systems Manager</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
                *          <note>
                *             <p>To use offsets, you must specify the <code>ApplyOnlyAtCronInterval</code> parameter. This
                *     option tells the system not to run an association immediately after you create it. </p>
                *          </note>
                */
            ScheduleOffset?: number;
            /**
                * <p>A key-value mapping of document parameters to target resources. Both Targets and TargetMaps
                *    can't be specified together.</p>
                */
            TargetMaps?: Record<string, string[]>[];
    }
    export namespace CreateAssociationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssociationRequest) => any;
    }
    /**
        * <p>Information about the association.</p>
        */
    export interface AssociationOverview {
            /**
                * <p>The status of the association. Status can be: Pending, Success, or Failed.</p>
                */
            Status?: string;
            /**
                * <p>A detailed status of the association.</p>
                */
            DetailedStatus?: string;
            /**
                * <p>Returns the number of targets for the association status. For example, if you created an
                *    association with two managed nodes, and one of them was successful, this would return the count
                *    of managed nodes by status.</p>
                */
            AssociationStatusAggregatedCount?: Record<string, number>;
    }
    export namespace AssociationOverview {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociationOverview) => any;
    }
    export enum AssociationStatusName {
            Failed = "Failed",
            Pending = "Pending",
            Success = "Success"
    }
    /**
        * <p>Describes an association status.</p>
        */
    export interface AssociationStatus {
            /**
                * <p>The date when the status changed.</p>
                */
            Date: Date | undefined;
            /**
                * <p>The status.</p>
                */
            Name: AssociationStatusName | string | undefined;
            /**
                * <p>The reason for the status.</p>
                */
            Message: string | undefined;
            /**
                * <p>A user-defined string.</p>
                */
            AdditionalInfo?: string;
    }
    export namespace AssociationStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociationStatus) => any;
    }
    /**
        * <p>Describes the parameters for a document.</p>
        */
    export interface AssociationDescription {
            /**
                * <p>The name of the SSM document.</p>
                */
            Name?: string;
            /**
                * <p>The managed node ID.</p>
                */
            InstanceId?: string;
            /**
                * <p>The association version.</p>
                */
            AssociationVersion?: string;
            /**
                * <p>The date when the association was made.</p>
                */
            Date?: Date;
            /**
                * <p>The date when the association was last updated.</p>
                */
            LastUpdateAssociationDate?: Date;
            /**
                * <p>The association status.</p>
                */
            Status?: AssociationStatus;
            /**
                * <p>Information about the association.</p>
                */
            Overview?: AssociationOverview;
            /**
                * <p>The document version.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>Choose the parameter that will define how your automation will branch out. This target is
                *    required for associations that use an Automation runbook and target resources by using rate
                *    controls. Automation is a capability of Amazon Web Services Systems Manager.</p>
                */
            AutomationTargetParameterName?: string;
            /**
                * <p>A description of the parameters for a document. </p>
                */
            Parameters?: Record<string, string[]>;
            /**
                * <p>The association ID.</p>
                */
            AssociationId?: string;
            /**
                * <p>The managed nodes targeted by the request. </p>
                */
            Targets?: Target[];
            /**
                * <p>A cron expression that specifies a schedule when the association runs.</p>
                */
            ScheduleExpression?: string;
            /**
                * <p>An S3 bucket where you want to store the output details of the request.</p>
                */
            OutputLocation?: InstanceAssociationOutputLocation;
            /**
                * <p>The date on which the association was last run.</p>
                */
            LastExecutionDate?: Date;
            /**
                * <p>The last date on which the association was successfully run.</p>
                */
            LastSuccessfulExecutionDate?: Date;
            /**
                * <p>The association name.</p>
                */
            AssociationName?: string;
            /**
                * <p>The number of errors that are allowed before the system stops sending requests to run the
                *    association on additional targets. You can specify either an absolute number of errors, for
                *    example 10, or a percentage of the target set, for example 10%. If you specify 3, for example,
                *    the system stops sending requests when the fourth error is received. If you specify 0, then the
                *    system stops sending requests after the first error is returned. If you run an association on 50
                *    managed nodes and set <code>MaxError</code> to 10%, then the system stops sending the request
                *    when the sixth error is received.</p>
                *          <p>Executions that are already running an association when <code>MaxErrors</code> is reached
                *    are allowed to complete, but some of these executions may fail as well. If you need to ensure
                *    that there won't be more than max-errors failed executions, set <code>MaxConcurrency</code> to 1
                *    so that executions proceed one at a time.</p>
                */
            MaxErrors?: string;
            /**
                * <p>The maximum number of targets allowed to run the association at the same time. You can
                *    specify a number, for example 10, or a percentage of the target set, for example 10%. The default
                *    value is 100%, which means all targets run the association at the same time.</p>
                *          <p>If a new managed node starts and attempts to run an association while Systems Manager is running
                *     <code>MaxConcurrency</code> associations, the association is allowed to run. During the next
                *    association interval, the new managed node will process its association within the limit
                *    specified for <code>MaxConcurrency</code>.</p>
                */
            MaxConcurrency?: string;
            /**
                * <p>The severity level that is assigned to the association.</p>
                */
            ComplianceSeverity?: AssociationComplianceSeverity | string;
            /**
                * <p>The mode for generating association compliance. You can specify <code>AUTO</code> or
                *     <code>MANUAL</code>. In <code>AUTO</code> mode, the system uses the status of the association
                *    execution to determine the compliance status. If the association execution runs successfully,
                *    then the association is <code>COMPLIANT</code>. If the association execution doesn't run
                *    successfully, the association is <code>NON-COMPLIANT</code>.</p>
                *          <p>In <code>MANUAL</code> mode, you must specify the <code>AssociationId</code> as a parameter
                *    for the <a>PutComplianceItems</a> API operation. In this case, compliance data isn't
                *    managed by State Manager, a capability of Amazon Web Services Systems Manager. It is managed by your direct call to the
                *     <a>PutComplianceItems</a> API operation.</p>
                *          <p>By default, all associations use <code>AUTO</code> mode.</p>
                */
            SyncCompliance?: AssociationSyncCompliance | string;
            /**
                * <p>By default, when you create a new associations, the system runs it immediately after it is
                *    created and then according to the schedule you specified. Specify this option if you don't want
                *    an association to run immediately after you create it. This parameter isn't supported for rate
                *    expressions.</p>
                */
            ApplyOnlyAtCronInterval?: boolean;
            /**
                * <p>The names or Amazon Resource Names (ARNs) of the Change Calendar type documents your
                *    associations are gated under. The associations only run when that change calendar is open. For
                *    more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar">Amazon Web Services Systems Manager Change
                *     Calendar</a>.</p>
                */
            CalendarNames?: string[];
            /**
                * <p>The combination of Amazon Web Services Regions and Amazon Web Services accounts where you want to run the
                *    association.</p>
                */
            TargetLocations?: TargetLocation[];
            /**
                * <p>Number of days to wait after the scheduled day to run an association.</p>
                */
            ScheduleOffset?: number;
            /**
                * <p>A key-value mapping of document parameters to target resources. Both Targets and TargetMaps
                *    can't be specified together.</p>
                */
            TargetMaps?: Record<string, string[]>[];
    }
    export namespace AssociationDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociationDescription) => any;
    }
    export interface CreateAssociationResult {
            /**
                * <p>Information about the association.</p>
                */
            AssociationDescription?: AssociationDescription;
    }
    export namespace CreateAssociationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssociationResult) => any;
    }
    /**
        * <p>The specified SSM document doesn't exist.</p>
        */
    export class InvalidDocument extends __BaseException {
            readonly name: "InvalidDocument";
            readonly $fault: "client";
            /**
                * <p>The SSM document doesn't exist or the document isn't available to the user. This exception
                *    can be issued by various API operations. </p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDocument, __BaseException>);
    }
    /**
        * <p>The document version isn't valid or doesn't exist.</p>
        */
    export class InvalidDocumentVersion extends __BaseException {
            readonly name: "InvalidDocumentVersion";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDocumentVersion, __BaseException>);
    }
    /**
        * <p>The output location isn't valid or doesn't exist.</p>
        */
    export class InvalidOutputLocation extends __BaseException {
            readonly name: "InvalidOutputLocation";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidOutputLocation, __BaseException>);
    }
    /**
        * <p>The schedule is invalid. Verify your cron or rate expression and try again.</p>
        */
    export class InvalidSchedule extends __BaseException {
            readonly name: "InvalidSchedule";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSchedule, __BaseException>);
    }
    /**
        * <p>The target isn't valid or doesn't exist. It might not be configured for Systems Manager or you might
        *    not have permission to perform the operation.</p>
        */
    export class InvalidTarget extends __BaseException {
            readonly name: "InvalidTarget";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTarget, __BaseException>);
    }
    /**
        * <p>TargetMap parameter isn't valid.</p>
        */
    export class InvalidTargetMaps extends __BaseException {
            readonly name: "InvalidTargetMaps";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTargetMaps, __BaseException>);
    }
    /**
        * <p>The document doesn't support the platform type of the given managed node ID(s). For example,
        *    you sent an document for a Windows managed node to a Linux node.</p>
        */
    export class UnsupportedPlatformType extends __BaseException {
            readonly name: "UnsupportedPlatformType";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedPlatformType, __BaseException>);
    }
    /**
        * <p>Describes the association of a Amazon Web Services Systems Manager document (SSM document) and a managed node.</p>
        */
    export interface CreateAssociationBatchRequestEntry {
            /**
                * <p>The name of the SSM document that contains the configuration information for the managed
                *    node. You can specify Command or Automation runbooks.</p>
                *          <p>You can specify Amazon Web Services-predefined documents, documents you created, or a document that is
                *    shared with you from another account.</p>
                *          <p>For SSM documents that are shared with you from other Amazon Web Services accounts, you must specify the
                *    complete SSM document ARN, in the following format:</p>
                *          <p>
                *             <code>arn:aws:ssm:<i>region</i>:<i>account-id</i>:document/<i>document-name</i>
                *             </code>
                *          </p>
                *          <p>For example:</p>
                *          <p>
                *             <code>arn:aws:ssm:us-east-2:12345678912:document/My-Shared-Document</code>
                *          </p>
                *          <p>For Amazon Web Services-predefined documents and SSM documents you created in your account, you only need
                *    to specify the document name. For example, <code>AWS-ApplyPatchBaseline</code> or
                *     <code>My-Document</code>.</p>
                */
            Name: string | undefined;
            /**
                * <p>The managed node ID.</p>
                *          <note>
                *             <p>
                *                <code>InstanceId</code> has been deprecated. To specify a managed node ID for an
                *     association, use the <code>Targets</code> parameter. Requests that
                *     include the parameter <code>InstanceID</code> with Systems Manager documents (SSM documents) that use
                *     schema version 2.0 or later will fail. In addition, if you use the
                *     parameter <code>InstanceId</code>, you can't use the parameters <code>AssociationName</code>,
                *      <code>DocumentVersion</code>, <code>MaxErrors</code>, <code>MaxConcurrency</code>,
                *      <code>OutputLocation</code>, or <code>ScheduleExpression</code>. To use these parameters, you
                *     must use the <code>Targets</code> parameter.</p>
                *          </note>
                */
            InstanceId?: string;
            /**
                * <p>A description of the parameters for a document. </p>
                */
            Parameters?: Record<string, string[]>;
            /**
                * <p>Specify the target for the association. This target is required for associations that use an
                *    Automation runbook and target resources by using rate controls. Automation is a capability of
                *    Amazon Web Services Systems Manager.</p>
                */
            AutomationTargetParameterName?: string;
            /**
                * <p>The document version.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The managed nodes targeted by the request.</p>
                */
            Targets?: Target[];
            /**
                * <p>A cron expression that specifies a schedule when the association runs.</p>
                */
            ScheduleExpression?: string;
            /**
                * <p>An S3 bucket where you want to store the results of this request.</p>
                */
            OutputLocation?: InstanceAssociationOutputLocation;
            /**
                * <p>Specify a descriptive name for the association.</p>
                */
            AssociationName?: string;
            /**
                * <p>The number of errors that are allowed before the system stops sending requests to run the
                *    association on additional targets. You can specify either an absolute number of errors, for
                *    example 10, or a percentage of the target set, for example 10%. If you specify 3, for example,
                *    the system stops sending requests when the fourth error is received. If you specify 0, then the
                *    system stops sending requests after the first error is returned. If you run an association on 50
                *    managed nodes and set <code>MaxError</code> to 10%, then the system stops sending the request
                *    when the sixth error is received.</p>
                *          <p>Executions that are already running an association when <code>MaxErrors</code> is reached
                *    are allowed to complete, but some of these executions may fail as well. If you need to ensure
                *    that there won't be more than max-errors failed executions, set <code>MaxConcurrency</code> to 1
                *    so that executions proceed one at a time.</p>
                */
            MaxErrors?: string;
            /**
                * <p>The maximum number of targets allowed to run the association at the same time. You can
                *    specify a number, for example 10, or a percentage of the target set, for example 10%. The default
                *    value is 100%, which means all targets run the association at the same time.</p>
                *          <p>If a new managed node starts and attempts to run an association while Systems Manager is running
                *     <code>MaxConcurrency</code> associations, the association is allowed to run. During the next
                *    association interval, the new managed node will process its association within the limit
                *    specified for <code>MaxConcurrency</code>.</p>
                */
            MaxConcurrency?: string;
            /**
                * <p>The severity level to assign to the association.</p>
                */
            ComplianceSeverity?: AssociationComplianceSeverity | string;
            /**
                * <p>The mode for generating association compliance. You can specify <code>AUTO</code> or
                *     <code>MANUAL</code>. In <code>AUTO</code> mode, the system uses the status of the association
                *    execution to determine the compliance status. If the association execution runs successfully,
                *    then the association is <code>COMPLIANT</code>. If the association execution doesn't run
                *    successfully, the association is <code>NON-COMPLIANT</code>. </p>
                *          <p>In <code>MANUAL</code> mode, you must specify the <code>AssociationId</code> as a parameter
                *    for the <a>PutComplianceItems</a> API operation. In this case, compliance data isn't
                *    managed by State Manager, a capability of Amazon Web Services Systems Manager. It is managed by your direct call to the
                *     <a>PutComplianceItems</a> API operation.</p>
                *          <p>By default, all associations use <code>AUTO</code> mode.</p>
                */
            SyncCompliance?: AssociationSyncCompliance | string;
            /**
                * <p>By default, when you create a new associations, the system runs it immediately after it is
                *    created and then according to the schedule you specified. Specify this option if you don't want
                *    an association to run immediately after you create it. This parameter isn't supported for rate
                *    expressions.</p>
                */
            ApplyOnlyAtCronInterval?: boolean;
            /**
                * <p>The names or Amazon Resource Names (ARNs) of the Change Calendar type documents your
                *    associations are gated under. The associations only run when that Change Calendar is open. For
                *    more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar">Amazon Web Services Systems Manager Change
                *     Calendar</a>.</p>
                */
            CalendarNames?: string[];
            /**
                * <p>Use this action to create an association in multiple Regions and multiple accounts.</p>
                */
            TargetLocations?: TargetLocation[];
            /**
                * <p>Number of days to wait after the scheduled day to run an association.</p>
                */
            ScheduleOffset?: number;
            /**
                * <p>A key-value mapping of document parameters to target resources. Both Targets and TargetMaps
                *    can't be specified together.</p>
                */
            TargetMaps?: Record<string, string[]>[];
    }
    export namespace CreateAssociationBatchRequestEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssociationBatchRequestEntry) => any;
    }
    export interface CreateAssociationBatchRequest {
            /**
                * <p>One or more associations.</p>
                */
            Entries: CreateAssociationBatchRequestEntry[] | undefined;
    }
    export namespace CreateAssociationBatchRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssociationBatchRequest) => any;
    }
    export type Fault = "Client" | "Server" | "Unknown";
    /**
        * <p>Describes a failed association.</p>
        */
    export interface FailedCreateAssociation {
            /**
                * <p>The association.</p>
                */
            Entry?: CreateAssociationBatchRequestEntry;
            /**
                * <p>A description of the failure.</p>
                */
            Message?: string;
            /**
                * <p>The source of the failure.</p>
                */
            Fault?: Fault | string;
    }
    export namespace FailedCreateAssociation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailedCreateAssociation) => any;
    }
    export interface CreateAssociationBatchResult {
            /**
                * <p>Information about the associations that succeeded.</p>
                */
            Successful?: AssociationDescription[];
            /**
                * <p>Information about the associations that failed.</p>
                */
            Failed?: FailedCreateAssociation[];
    }
    export namespace CreateAssociationBatchResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssociationBatchResult) => any;
    }
    export enum AttachmentsSourceKey {
            AttachmentReference = "AttachmentReference",
            S3FileUrl = "S3FileUrl",
            SourceUrl = "SourceUrl"
    }
    /**
        * <p>Identifying information about a document attachment, including the file name and a key-value
        *    pair that identifies the location of an attachment to a document.</p>
        */
    export interface AttachmentsSource {
            /**
                * <p>The key of a key-value pair that identifies the location of an attachment to a
                *    document.</p>
                */
            Key?: AttachmentsSourceKey | string;
            /**
                * <p>The value of a key-value pair that identifies the location of an attachment to a document.
                *    The format for <b>Value</b> depends on the type of key you
                *    specify.</p>
                *          <ul>
                *             <li>
                *                <p>For the key <i>SourceUrl</i>, the value is an S3 bucket location. For
                *      example:</p>
                *                <p>
                *                   <code>"Values": [ "s3://doc-example-bucket/my-folder" ]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>For the key <i>S3FileUrl</i>, the value is a file in an S3 bucket. For
                *      example:</p>
                *                <p>
                *                   <code>"Values": [ "s3://doc-example-bucket/my-folder/my-file.py" ]</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>For the key <i>AttachmentReference</i>, the value is constructed from the
                *      name of another SSM document in your account, a version number of that document, and a file
                *      attached to that document version that you want to reuse. For example:</p>
                *                <p>
                *                   <code>"Values": [ "MyOtherDocument/3/my-other-file.py" ]</code>
                *                </p>
                *                <p>However, if the SSM document is shared with you from another account, the full SSM
                *      document ARN must be specified instead of the document name only. For example:</p>
                *                <p>
                *                   <code>"Values": [
                *       "arn:aws:ssm:us-east-2:111122223333:document/OtherAccountDocument/3/their-file.py"
                *       ]</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Values?: string[];
            /**
                * <p>The name of the document attachment file.</p>
                */
            Name?: string;
    }
    export namespace AttachmentsSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachmentsSource) => any;
    }
    export enum DocumentFormat {
            JSON = "JSON",
            TEXT = "TEXT",
            YAML = "YAML"
    }
    export enum DocumentType {
            ApplicationConfiguration = "ApplicationConfiguration",
            ApplicationConfigurationSchema = "ApplicationConfigurationSchema",
            Automation = "Automation",
            ChangeCalendar = "ChangeCalendar",
            ChangeTemplate = "Automation.ChangeTemplate",
            Command = "Command",
            DeploymentStrategy = "DeploymentStrategy",
            Package = "Package",
            Policy = "Policy",
            ProblemAnalysis = "ProblemAnalysis",
            ProblemAnalysisTemplate = "ProblemAnalysisTemplate",
            Session = "Session"
    }
    /**
        * <p>An SSM document required by the current document.</p>
        */
    export interface DocumentRequires {
            /**
                * <p>The name of the required SSM document. The name can be an Amazon Resource Name (ARN).</p>
                */
            Name: string | undefined;
            /**
                * <p>The document version required by the current document.</p>
                */
            Version?: string;
    }
    export namespace DocumentRequires {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentRequires) => any;
    }
    export interface CreateDocumentRequest {
            /**
                * <p>The content for the new SSM document in JSON or YAML format. We recommend storing the
                *    contents for your new document in an external JSON or YAML file and referencing the file in a
                *    command.</p>
                *          <p>For examples, see the following topics in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/create-ssm-document-api.html">Create an SSM document (Amazon Web Services API)</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/create-ssm-document-cli.html">Create an SSM document (Amazon Web Services CLI)</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/create-ssm-document-api.html">Create an SSM document (API)</a>
                *                </p>
                *             </li>
                *          </ul>
                */
            Content: string | undefined;
            /**
                * <p>A list of SSM documents required by a document. This parameter is used exclusively by
                *    AppConfig. When a user creates an AppConfig configuration in an SSM document, the user must also
                *    specify a required document for validation purposes. In this case, an
                *     <code>ApplicationConfiguration</code> document requires an
                *     <code>ApplicationConfigurationSchema</code> document for validation purposes. For more
                *    information, see <a href="https://docs.aws.amazon.com/appconfig/latest/userguide/what-is-appconfig.html">What is AppConfig?</a> in the
                *     <i>AppConfig User Guide</i>.</p>
                */
            Requires?: DocumentRequires[];
            /**
                * <p>A list of key-value pairs that describe attachments to a version of a document.</p>
                */
            Attachments?: AttachmentsSource[];
            /**
                * <p>A name for the SSM document.</p>
                *          <important>
                *             <p>You can't use the following strings as document name prefixes. These are reserved by Amazon Web Services
                *     for use as document name prefixes:</p>
                *             <ul>
                *                <li>
                *                   <p>
                *                      <code>aws-</code>
                *                   </p>
                *                </li>
                *                <li>
                *                   <p>
                *                      <code>amazon</code>
                *                   </p>
                *                </li>
                *                <li>
                *                   <p>
                *                      <code>amzn</code>
                *                   </p>
                *                </li>
                *             </ul>
                *          </important>
                */
            Name: string | undefined;
            /**
                * <p>An optional field where you can specify a friendly name for the SSM document. This value can
                *    differ for each version of the document. You can update this value at a later time using the
                *     <a>UpdateDocument</a> operation.</p>
                */
            DisplayName?: string;
            /**
                * <p>An optional field specifying the version of the artifact you are creating with the document.
                *    For example, "Release 12, Update 6". This value is unique across all versions of a document, and
                *    can't be changed.</p>
                */
            VersionName?: string;
            /**
                * <p>The type of document to create.</p>
                *          <note>
                *             <p>The <code>DeploymentStrategy</code> document type is an internal-use-only document type
                *     reserved for AppConfig.</p>
                *          </note>
                */
            DocumentType?: DocumentType | string;
            /**
                * <p>Specify the document format for the request. The document format can be JSON, YAML, or TEXT.
                *    JSON is the default format.</p>
                */
            DocumentFormat?: DocumentFormat | string;
            /**
                * <p>Specify a target type to define the kinds of resources the document can run on. For example,
                *    to run a document on EC2 instances, specify the following value:
                *    <code>/AWS::EC2::Instance</code>. If you specify a value of '/' the document can run on all types
                *    of resources. If you don't specify a value, the document can't run on any resources. For a list
                *    of valid resource types, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and
                *     property types reference</a> in the <i>CloudFormation User Guide</i>. </p>
                */
            TargetType?: string;
            /**
                * <p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in
                *    different ways, such as by purpose, owner, or environment. For example, you might want to tag an
                *    SSM document to identify the types of targets or the environment where it will run. In this case,
                *    you could specify the following key-value pairs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Key=OS,Value=Windows</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=Environment,Value=Production</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <note>
                *             <p>To add tags to an existing SSM document, use the <a>AddTagsToResource</a>
                *     operation.</p>
                *          </note>
                */
            Tags?: Tag[];
    }
    export namespace CreateDocumentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDocumentRequest) => any;
    }
    /**
        * <p>An attribute of an attachment, such as the attachment name.</p>
        */
    export interface AttachmentInformation {
            /**
                * <p>The name of the attachment.</p>
                */
            Name?: string;
    }
    export namespace AttachmentInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachmentInformation) => any;
    }
    export enum DocumentHashType {
            SHA1 = "Sha1",
            SHA256 = "Sha256"
    }
    export type DocumentParameterType = "String" | "StringList";
    /**
        * <p>Parameters specified in a System Manager document that run on the server when the command is
        *    run. </p>
        */
    export interface DocumentParameter {
            /**
                * <p>The name of the parameter.</p>
                */
            Name?: string;
            /**
                * <p>The type of parameter. The type can be either String or StringList.</p>
                */
            Type?: DocumentParameterType | string;
            /**
                * <p>A description of what the parameter does, how to use it, the default value, and whether or
                *    not the parameter is optional.</p>
                */
            Description?: string;
            /**
                * <p>If specified, the default values for the parameters. Parameters without a default value are
                *    required. Parameters with a default value are optional.</p>
                */
            DefaultValue?: string;
    }
    export namespace DocumentParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentParameter) => any;
    }
    export enum PlatformType {
            LINUX = "Linux",
            MACOS = "MacOS",
            WINDOWS = "Windows"
    }
    export enum ReviewStatus {
            APPROVED = "APPROVED",
            NOT_REVIEWED = "NOT_REVIEWED",
            PENDING = "PENDING",
            REJECTED = "REJECTED"
    }
    /**
        * <p>Information about the result of a document review request.</p>
        */
    export interface ReviewInformation {
            /**
                * <p>The time that the reviewer took action on the document review request.</p>
                */
            ReviewedTime?: Date;
            /**
                * <p>The current status of the document review request.</p>
                */
            Status?: ReviewStatus | string;
            /**
                * <p>The reviewer assigned to take action on the document review request.</p>
                */
            Reviewer?: string;
    }
    export namespace ReviewInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReviewInformation) => any;
    }
    export enum DocumentStatus {
            Active = "Active",
            Creating = "Creating",
            Deleting = "Deleting",
            Failed = "Failed",
            Updating = "Updating"
    }
    /**
        * <p>Describes an Amazon Web Services Systems Manager document (SSM document). </p>
        */
    export interface DocumentDescription {
            /**
                * <p>The SHA1 hash of the document, which you can use for verification.</p>
                */
            Sha1?: string;
            /**
                * <p>The Sha256 or Sha1 hash created by the system when the document was created. </p>
                *          <note>
                *             <p>Sha1 hashes have been deprecated.</p>
                *          </note>
                */
            Hash?: string;
            /**
                * <p>The hash type of the document. Valid values include <code>Sha256</code> or
                *    <code>Sha1</code>.</p>
                *          <note>
                *             <p>Sha1 hashes have been deprecated.</p>
                *          </note>
                */
            HashType?: DocumentHashType | string;
            /**
                * <p>The name of the SSM document.</p>
                */
            Name?: string;
            /**
                * <p>The friendly name of the SSM document. This value can differ for each version of the
                *    document. If you want to update this value, see <a>UpdateDocument</a>.</p>
                */
            DisplayName?: string;
            /**
                * <p>The version of the artifact associated with the document.</p>
                */
            VersionName?: string;
            /**
                * <p>The Amazon Web Services user account that created the document.</p>
                */
            Owner?: string;
            /**
                * <p>The date when the document was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The status of the SSM document.</p>
                */
            Status?: DocumentStatus | string;
            /**
                * <p>A message returned by Amazon Web Services Systems Manager that explains the <code>Status</code> value. For example, a
                *     <code>Failed</code> status might be explained by the <code>StatusInformation</code> message,
                *    "The specified S3 bucket doesn't exist. Verify that the URL of the S3 bucket is correct."</p>
                */
            StatusInformation?: string;
            /**
                * <p>The document version.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>A description of the document. </p>
                */
            Description?: string;
            /**
                * <p>A description of the parameters for a document.</p>
                */
            Parameters?: DocumentParameter[];
            /**
                * <p>The list of operating system (OS) platforms compatible with this SSM document. </p>
                */
            PlatformTypes?: (PlatformType | string)[];
            /**
                * <p>The type of document.</p>
                */
            DocumentType?: DocumentType | string;
            /**
                * <p>The schema version.</p>
                */
            SchemaVersion?: string;
            /**
                * <p>The latest version of the document.</p>
                */
            LatestVersion?: string;
            /**
                * <p>The default version.</p>
                */
            DefaultVersion?: string;
            /**
                * <p>The document format, either JSON or YAML.</p>
                */
            DocumentFormat?: DocumentFormat | string;
            /**
                * <p>The target type which defines the kinds of resources the document can run on. For example,
                *     <code>/AWS::EC2::Instance</code>. For a list of valid resource types, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and
                *     property types reference</a> in the <i>CloudFormation User Guide</i>. </p>
                */
            TargetType?: string;
            /**
                * <p>The tags, or metadata, that have been applied to the document.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Details about the document attachments, including names, locations, sizes, and so on.</p>
                */
            AttachmentsInformation?: AttachmentInformation[];
            /**
                * <p>A list of SSM documents required by a document. For example, an
                *     <code>ApplicationConfiguration</code> document requires an
                *     <code>ApplicationConfigurationSchema</code> document.</p>
                */
            Requires?: DocumentRequires[];
            /**
                * <p>The user in your organization who created the document.</p>
                */
            Author?: string;
            /**
                * <p>Details about the review of a document.</p>
                */
            ReviewInformation?: ReviewInformation[];
            /**
                * <p>The version of the document currently approved for use in the organization.</p>
                */
            ApprovedVersion?: string;
            /**
                * <p>The version of the document that is currently under review.</p>
                */
            PendingReviewVersion?: string;
            /**
                * <p>The current status of the review.</p>
                */
            ReviewStatus?: ReviewStatus | string;
            /**
                * <p>The classification of a document to help you identify and categorize its use.</p>
                */
            Category?: string[];
            /**
                * <p>The value that identifies a document's category.</p>
                */
            CategoryEnum?: string[];
    }
    export namespace DocumentDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentDescription) => any;
    }
    export interface CreateDocumentResult {
            /**
                * <p>Information about the SSM document.</p>
                */
            DocumentDescription?: DocumentDescription;
    }
    export namespace CreateDocumentResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDocumentResult) => any;
    }
    /**
        * <p>The specified document already exists.</p>
        */
    export class DocumentAlreadyExists extends __BaseException {
            readonly name: "DocumentAlreadyExists";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DocumentAlreadyExists, __BaseException>);
    }
    /**
        * <p>You can have at most 500 active SSM documents.</p>
        */
    export class DocumentLimitExceeded extends __BaseException {
            readonly name: "DocumentLimitExceeded";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DocumentLimitExceeded, __BaseException>);
    }
    /**
        * <p>The content for the document isn't valid.</p>
        */
    export class InvalidDocumentContent extends __BaseException {
            readonly name: "InvalidDocumentContent";
            readonly $fault: "client";
            /**
                * <p>A description of the validation error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDocumentContent, __BaseException>);
    }
    /**
        * <p>The version of the document schema isn't supported.</p>
        */
    export class InvalidDocumentSchemaVersion extends __BaseException {
            readonly name: "InvalidDocumentSchemaVersion";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDocumentSchemaVersion, __BaseException>);
    }
    /**
        * <p>The size limit of a document is 64 KB.</p>
        */
    export class MaxDocumentSizeExceeded extends __BaseException {
            readonly name: "MaxDocumentSizeExceeded";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaxDocumentSizeExceeded, __BaseException>);
    }
    export interface CreateMaintenanceWindowRequest {
            /**
                * <p>The name of the maintenance window.</p>
                */
            Name: string | undefined;
            /**
                * <p>An optional description for the maintenance window. We recommend specifying a description to
                *    help you organize your maintenance windows. </p>
                */
            Description?: string;
            /**
                * <p>The date and time, in ISO-8601 Extended format, for when you want the maintenance window to
                *    become active. <code>StartDate</code> allows you to delay activation of the maintenance window
                *    until the specified future date.</p>
                */
            StartDate?: string;
            /**
                * <p>The date and time, in ISO-8601 Extended format, for when you want the maintenance window to
                *    become inactive. <code>EndDate</code> allows you to set a date and time in the future when the
                *    maintenance window will no longer run.</p>
                */
            EndDate?: string;
            /**
                * <p>The schedule of the maintenance window in the form of a cron or rate expression.</p>
                */
            Schedule: string | undefined;
            /**
                * <p>The time zone that the scheduled maintenance window executions are based on, in Internet
                *    Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or
                *    "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time
                *     Zone Database</a> on the IANA website.</p>
                */
            ScheduleTimezone?: string;
            /**
                * <p>The number of days to wait after the date and time specified by a cron expression before
                *    running the maintenance window.</p>
                *          <p>For example, the following cron expression schedules a maintenance window to run on the
                *    third Tuesday of every month at 11:30 PM.</p>
                *          <p>
                *             <code>cron(30 23 ? * TUE#3 *)</code>
                *          </p>
                *          <p>If the schedule offset is <code>2</code>, the maintenance window won't run until two days
                *    later.</p>
                */
            ScheduleOffset?: number;
            /**
                * <p>The duration of the maintenance window in hours.</p>
                */
            Duration: number | undefined;
            /**
                * <p>The number of hours before the end of the maintenance window that Amazon Web Services Systems Manager stops scheduling
                *    new tasks for execution.</p>
                */
            Cutoff: number | undefined;
            /**
                * <p>Enables a maintenance window task to run on managed nodes, even if you haven't registered
                *    those nodes as targets. If enabled, then you must specify the unregistered managed nodes (by node
                *    ID) when you register a task with the maintenance window.</p>
                *          <p>If you don't enable this option, then you must specify previously-registered targets when
                *    you register a task with the maintenance window.</p>
                */
            AllowUnassociatedTargets: boolean | undefined;
            /**
                * <p>User-provided idempotency token.</p>
                */
            ClientToken?: string;
            /**
                * <p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in
                *    different ways, such as by purpose, owner, or environment. For example, you might want to tag a
                *    maintenance window to identify the type of tasks it will run, the types of targets, and the
                *    environment it will run in. In this case, you could specify the following key-value pairs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Key=TaskType,Value=AgentUpdate</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=OS,Value=Windows</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=Environment,Value=Production</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <note>
                *             <p>To add tags to an existing maintenance window, use the <a>AddTagsToResource</a>
                *     operation.</p>
                *          </note>
                */
            Tags?: Tag[];
    }
    export namespace CreateMaintenanceWindowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMaintenanceWindowRequest) => any;
    }
    export interface CreateMaintenanceWindowResult {
            /**
                * <p>The ID of the created maintenance window.</p>
                */
            WindowId?: string;
    }
    export namespace CreateMaintenanceWindowResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateMaintenanceWindowResult) => any;
    }
    /**
        * <p>Error returned when an idempotent operation is retried and the parameters don't match the
        *    original call to the API with the same idempotency token. </p>
        */
    export class IdempotentParameterMismatch extends __BaseException {
            readonly name: "IdempotentParameterMismatch";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IdempotentParameterMismatch, __BaseException>);
    }
    /**
        * <p>Error returned when the caller has exceeded the default resource quotas. For example, too
        *    many maintenance windows or patch baselines have been created.</p>
        *          <p>For information about resource quotas in Systems Manager, see <a href="https://docs.aws.amazon.com/general/latest/gr/ssm.html#limits_ssm">Systems Manager service quotas</a> in the
        *     <i>Amazon Web Services General Reference</i>.</p>
        */
    export class ResourceLimitExceededException extends __BaseException {
            readonly name: "ResourceLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceLimitExceededException, __BaseException>);
    }
    /**
        * <p>A notification about the OpsItem.</p>
        */
    export interface OpsItemNotification {
            /**
                * <p>The Amazon Resource Name (ARN) of an Amazon Simple Notification Service (Amazon SNS) topic where
                *    notifications are sent when this OpsItem is edited or changed.</p>
                */
            Arn?: string;
    }
    export namespace OpsItemNotification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsItemNotification) => any;
    }
    export enum OpsItemDataType {
            SEARCHABLE_STRING = "SearchableString",
            STRING = "String"
    }
    /**
        * <p>An object that defines the value of the key and its type in the OperationalData map.</p>
        */
    export interface OpsItemDataValue {
            /**
                * <p>The value of the OperationalData key.</p>
                */
            Value?: string;
            /**
                * <p>The type of key-value pair. Valid types include <code>SearchableString</code> and
                *     <code>String</code>.</p>
                */
            Type?: OpsItemDataType | string;
    }
    export namespace OpsItemDataValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsItemDataValue) => any;
    }
    /**
        * <p>An OpsItems that shares something in common with the current OpsItem. For example, related
        *    OpsItems can include OpsItems with similar error messages, impacted resources, or statuses for
        *    the impacted resource.</p>
        */
    export interface RelatedOpsItem {
            /**
                * <p>The ID of an OpsItem related to the current OpsItem.</p>
                */
            OpsItemId: string | undefined;
    }
    export namespace RelatedOpsItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelatedOpsItem) => any;
    }
    export interface CreateOpsItemRequest {
            /**
                * <p>Information about the OpsItem. </p>
                */
            Description: string | undefined;
            /**
                * <p>The type of OpsItem to create. Currently, the only valid values are
                *     <code>/aws/changerequest</code> and <code>/aws/issue</code>.</p>
                */
            OpsItemType?: string;
            /**
                * <p>Operational data is custom data that provides useful reference details about the OpsItem.
                *    For example, you can specify log files, error strings, license keys, troubleshooting tips, or
                *    other relevant data. You enter operational data as key-value pairs. The key has a maximum length
                *    of 128 characters. The value has a maximum size of 20 KB.</p>
                *          <important>
                *             <p>Operational data keys <i>can't</i> begin with the following:
                *      <code>amazon</code>, <code>aws</code>, <code>amzn</code>, <code>ssm</code>,
                *      <code>/amazon</code>, <code>/aws</code>, <code>/amzn</code>, <code>/ssm</code>.</p>
                *          </important>
                *          <p>You can choose to make the data searchable by other users in the account or you can restrict
                *    search access. Searchable data means that all users with access to the OpsItem Overview page (as
                *    provided by the <a>DescribeOpsItems</a> API operation) can view and search on the
                *    specified data. Operational data that isn't searchable is only viewable by users who have access
                *    to the OpsItem (as provided by the <a>GetOpsItem</a> API operation).</p>
                *          <p>Use the <code>/aws/resources</code> key in OperationalData to specify a related resource in
                *    the request. Use the <code>/aws/automations</code> key in OperationalData to associate an
                *    Automation runbook with the OpsItem. To view Amazon Web Services CLI example commands that use these keys, see
                *     <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-creating-OpsItems.html#OpsCenter-manually-create-OpsItems">Creating OpsItems manually</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            OperationalData?: Record<string, OpsItemDataValue>;
            /**
                * <p>The Amazon Resource Name (ARN) of an SNS topic where notifications are sent when this
                *    OpsItem is edited or changed.</p>
                */
            Notifications?: OpsItemNotification[];
            /**
                * <p>The importance of this OpsItem in relation to other OpsItems in the system.</p>
                */
            Priority?: number;
            /**
                * <p>One or more OpsItems that share something in common with the current OpsItems. For example,
                *    related OpsItems can include OpsItems with similar error messages, impacted resources, or
                *    statuses for the impacted resource.</p>
                */
            RelatedOpsItems?: RelatedOpsItem[];
            /**
                * <p>The origin of the OpsItem, such as Amazon EC2 or Systems Manager.</p>
                *          <note>
                *             <p>The source name can't contain the following strings: <code>aws</code>, <code>amazon</code>,
                *     and <code>amzn</code>. </p>
                *          </note>
                */
            Source: string | undefined;
            /**
                * <p>A short heading that describes the nature of the OpsItem and the impacted resource.</p>
                */
            Title: string | undefined;
            /**
                * <p>Optional metadata that you assign to a resource. You can restrict access to OpsItems by
                *    using an inline IAM policy that specifies tags. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-getting-started.html#OpsCenter-getting-started-user-permissions">Getting started with OpsCenter</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          <p>Tags use a key-value pair. For example:</p>
                *          <p>
                *             <code>Key=Department,Value=Finance</code>
                *          </p>
                *          <important>
                *             <p>To add tags to a new OpsItem, a user must have IAM permissions for both the
                *      <code>ssm:CreateOpsItems</code> operation and the <code>ssm:AddTagsToResource</code> operation.
                *     To add tags to an existing OpsItem, use the <a>AddTagsToResource</a>
                *     operation.</p>
                *          </important>
                */
            Tags?: Tag[];
            /**
                * <p>Specify a category to assign to an OpsItem. </p>
                */
            Category?: string;
            /**
                * <p>Specify a severity to assign to an OpsItem.</p>
                */
            Severity?: string;
            /**
                * <p>The time a runbook workflow started. Currently reported only for the OpsItem type
                *     <code>/aws/changerequest</code>.</p>
                */
            ActualStartTime?: Date;
            /**
                * <p>The time a runbook workflow ended. Currently reported only for the OpsItem type
                *     <code>/aws/changerequest</code>.</p>
                */
            ActualEndTime?: Date;
            /**
                * <p>The time specified in a change request for a runbook workflow to start. Currently supported
                *    only for the OpsItem type <code>/aws/changerequest</code>.</p>
                */
            PlannedStartTime?: Date;
            /**
                * <p>The time specified in a change request for a runbook workflow to end. Currently supported
                *    only for the OpsItem type <code>/aws/changerequest</code>.</p>
                */
            PlannedEndTime?: Date;
    }
    export namespace CreateOpsItemRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOpsItemRequest) => any;
    }
    export interface CreateOpsItemResponse {
            /**
                * <p>The ID of the OpsItem.</p>
                */
            OpsItemId?: string;
    }
    export namespace CreateOpsItemResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOpsItemResponse) => any;
    }
    /**
        * <p>The OpsItem already exists.</p>
        */
    export class OpsItemAlreadyExistsException extends __BaseException {
            readonly name: "OpsItemAlreadyExistsException";
            readonly $fault: "client";
            Message?: string;
            OpsItemId?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OpsItemAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>Metadata to assign to an Application Manager application.</p>
        */
    export interface MetadataValue {
            /**
                * <p>Metadata value to assign to an Application Manager application.</p>
                */
            Value?: string;
    }
    export namespace MetadataValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MetadataValue) => any;
    }
    export interface CreateOpsMetadataRequest {
            /**
                * <p>A resource ID for a new Application Manager application.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>Metadata for a new Application Manager application. </p>
                */
            Metadata?: Record<string, MetadataValue>;
            /**
                * <p>Optional metadata that you assign to a resource. You can specify a maximum of five tags for
                *    an OpsMetadata object. Tags enable you to categorize a resource in different ways, such as by
                *    purpose, owner, or environment. For example, you might want to tag an OpsMetadata object to
                *    identify an environment or target Amazon Web Services Region. In this case, you could specify the following
                *    key-value pairs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Key=Environment,Value=Production</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=Region,Value=us-east-2</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Tags?: Tag[];
    }
    export namespace CreateOpsMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOpsMetadataRequest) => any;
    }
    export interface CreateOpsMetadataResult {
            /**
                * <p>The Amazon Resource Name (ARN) of the OpsMetadata Object or blob created by the call.</p>
                */
            OpsMetadataArn?: string;
    }
    export namespace CreateOpsMetadataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOpsMetadataResult) => any;
    }
    /**
        * <p>An OpsMetadata object already exists for the selected resource.</p>
        */
    export class OpsMetadataAlreadyExistsException extends __BaseException {
            readonly name: "OpsMetadataAlreadyExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OpsMetadataAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>One of the arguments passed is invalid. </p>
        */
    export class OpsMetadataInvalidArgumentException extends __BaseException {
            readonly name: "OpsMetadataInvalidArgumentException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OpsMetadataInvalidArgumentException, __BaseException>);
    }
    /**
        * <p>Your account reached the maximum number of OpsMetadata objects allowed by Application Manager. The
        *    maximum is 200 OpsMetadata objects. Delete one or more OpsMetadata object and try again.</p>
        */
    export class OpsMetadataLimitExceededException extends __BaseException {
            readonly name: "OpsMetadataLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OpsMetadataLimitExceededException, __BaseException>);
    }
    /**
        * <p>The system is processing too many concurrent updates. Wait a few moments and try
        *    again.</p>
        */
    export class OpsMetadataTooManyUpdatesException extends __BaseException {
            readonly name: "OpsMetadataTooManyUpdatesException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OpsMetadataTooManyUpdatesException, __BaseException>);
    }
    export enum PatchComplianceLevel {
            Critical = "CRITICAL",
            High = "HIGH",
            Informational = "INFORMATIONAL",
            Low = "LOW",
            Medium = "MEDIUM",
            Unspecified = "UNSPECIFIED"
    }
    export enum PatchFilterKey {
            AdvisoryId = "ADVISORY_ID",
            Arch = "ARCH",
            BugzillaId = "BUGZILLA_ID",
            CVEId = "CVE_ID",
            Classification = "CLASSIFICATION",
            Epoch = "EPOCH",
            MsrcSeverity = "MSRC_SEVERITY",
            Name = "NAME",
            PatchId = "PATCH_ID",
            PatchSet = "PATCH_SET",
            Priority = "PRIORITY",
            Product = "PRODUCT",
            ProductFamily = "PRODUCT_FAMILY",
            Release = "RELEASE",
            Repository = "REPOSITORY",
            Section = "SECTION",
            Security = "SECURITY",
            Severity = "SEVERITY",
            Version = "VERSION"
    }
    /**
        * <p> Defines which patches should be included in a patch baseline.</p>
        *          <p>A patch filter consists of a key and a set of values. The filter key is a patch property.
        *    For example, the available filter keys for <code>WINDOWS</code> are <code>PATCH_SET</code>,
        *     <code>PRODUCT</code>, <code>PRODUCT_FAMILY</code>, <code>CLASSIFICATION</code>, and
        *     <code>MSRC_SEVERITY</code>.</p>
        *          <p>The filter values define a matching criterion for the patch property indicated by the key.
        *    For example, if the filter key is <code>PRODUCT</code> and the filter values are <code>["Office
        *     2013", "Office 2016"]</code>, then the filter accepts all patches where product name is either
        *    "Office 2013" or "Office 2016". The filter values can be exact values for the patch property
        *    given as a key, or a wildcard (*), which matches all values.</p>
        *          <p>You can view lists of valid values for the patch properties by running the
        *     <code>DescribePatchProperties</code> command. For information about which patch properties can
        *    be used with each major operating system, see <a>DescribePatchProperties</a>.</p>
        */
    export interface PatchFilter {
            /**
                * <p>The key for the filter.</p>
                *          <p>Run the <a>DescribePatchProperties</a> command to view lists of valid keys for
                *    each operating system type.</p>
                */
            Key: PatchFilterKey | string | undefined;
            /**
                * <p>The value for the filter key.</p>
                *          <p>Run the <a>DescribePatchProperties</a> command to view lists of valid values for
                *    each key based on operating system type.</p>
                */
            Values: string[] | undefined;
    }
    export namespace PatchFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PatchFilter) => any;
    }
    /**
        * <p>A set of patch filters, typically used for approval rules.</p>
        */
    export interface PatchFilterGroup {
            /**
                * <p>The set of patch filters that make up the group.</p>
                */
            PatchFilters: PatchFilter[] | undefined;
    }
    export namespace PatchFilterGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PatchFilterGroup) => any;
    }
    /**
        * <p>Defines an approval rule for a patch baseline.</p>
        */
    export interface PatchRule {
            /**
                * <p>The patch filter group that defines the criteria for the rule.</p>
                */
            PatchFilterGroup: PatchFilterGroup | undefined;
            /**
                * <p>A compliance severity level for all approved patches in a patch baseline.</p>
                */
            ComplianceLevel?: PatchComplianceLevel | string;
            /**
                * <p>The number of days after the release date of each patch matched by the rule that the patch
                *    is marked as approved in the patch baseline. For example, a value of <code>7</code> means that
                *    patches are approved seven days after they are released. Not supported on Debian Server or Ubuntu
                *    Server.</p>
                */
            ApproveAfterDays?: number;
            /**
                * <p>The cutoff date for auto approval of released patches. Any patches released on or before
                *    this date are installed automatically. Not supported on Debian Server or Ubuntu Server.</p>
                *          <p>Enter dates in the format <code>YYYY-MM-DD</code>. For example,
                *    <code>2021-12-31</code>.</p>
                */
            ApproveUntilDate?: string;
            /**
                * <p>For managed nodes identified by the approval rule filters, enables a patch baseline to apply
                *    non-security updates available in the specified repository. The default value is
                *     <code>false</code>. Applies to Linux managed nodes only.</p>
                */
            EnableNonSecurity?: boolean;
    }
    export namespace PatchRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PatchRule) => any;
    }
    /**
        * <p>A set of rules defining the approval rules for a patch baseline.</p>
        */
    export interface PatchRuleGroup {
            /**
                * <p>The rules that make up the rule group.</p>
                */
            PatchRules: PatchRule[] | undefined;
    }
    export namespace PatchRuleGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PatchRuleGroup) => any;
    }
    export enum OperatingSystem {
            AmazonLinux = "AMAZON_LINUX",
            AmazonLinux2 = "AMAZON_LINUX_2",
            CentOS = "CENTOS",
            Debian = "DEBIAN",
            MacOS = "MACOS",
            OracleLinux = "ORACLE_LINUX",
            Raspbian = "RASPBIAN",
            RedhatEnterpriseLinux = "REDHAT_ENTERPRISE_LINUX",
            Rocky_Linux = "ROCKY_LINUX",
            Suse = "SUSE",
            Ubuntu = "UBUNTU",
            Windows = "WINDOWS"
    }
    export enum PatchAction {
            AllowAsDependency = "ALLOW_AS_DEPENDENCY",
            Block = "BLOCK"
    }
    /**
        * <p>Information about the patches to use to update the managed nodes, including target operating
        *    systems and source repository. Applies to Linux managed nodes only.</p>
        */
    export interface PatchSource {
            /**
                * <p>The name specified to identify the patch source.</p>
                */
            Name: string | undefined;
            /**
                * <p>The specific operating system versions a patch repository applies to, such as "Ubuntu16.04",
                *    "AmazonLinux2016.09", "RedhatEnterpriseLinux7.2" or "Suse12.7". For lists of supported product
                *    values, see <a>PatchFilter</a>.</p>
                */
            Products: string[] | undefined;
            /**
                * <p>The value of the yum repo configuration. For example:</p>
                *          <p>
                *             <code>[main]</code>
                *          </p>
                *          <p>
                *             <code>name=MyCustomRepository</code>
                *          </p>
                *          <p>
                *             <code>baseurl=https://my-custom-repository</code>
                *          </p>
                *          <p>
                *             <code>enabled=1</code>
                *          </p>
                *          <note>
                *             <p>For information about other options available for your yum repository configuration, see
                *      <a href="https://man7.org/linux/man-pages/man5/dnf.conf.5.html">dnf.conf(5)</a>.</p>
                *          </note>
                */
            Configuration: string | undefined;
    }
    export namespace PatchSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PatchSource) => any;
    }
    export interface CreatePatchBaselineRequest {
            /**
                * <p>Defines the operating system the patch baseline applies to. The default value is
                *     <code>WINDOWS</code>.</p>
                */
            OperatingSystem?: OperatingSystem | string;
            /**
                * <p>The name of the patch baseline.</p>
                */
            Name: string | undefined;
            /**
                * <p>A set of global filters used to include patches in the baseline.</p>
                */
            GlobalFilters?: PatchFilterGroup;
            /**
                * <p>A set of rules used to include patches in the baseline.</p>
                */
            ApprovalRules?: PatchRuleGroup;
            /**
                * <p>A list of explicitly approved patches for the baseline.</p>
                *          <p>For information about accepted formats for lists of approved patches and rejected patches,
                *                         see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About
                *                         package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            ApprovedPatches?: string[];
            /**
                * <p>Defines the compliance level for approved patches. When an approved patch is reported as
                *    missing, this value describes the severity of the compliance violation. The default value is
                *     <code>UNSPECIFIED</code>.</p>
                */
            ApprovedPatchesComplianceLevel?: PatchComplianceLevel | string;
            /**
                * <p>Indicates whether the list of approved patches includes non-security updates that should be
                *    applied to the managed nodes. The default value is <code>false</code>. Applies to Linux managed
                *    nodes only.</p>
                */
            ApprovedPatchesEnableNonSecurity?: boolean;
            /**
                * <p>A list of explicitly rejected patches for the baseline.</p>
                *          <p>For information about accepted formats for lists of approved patches and rejected patches,
                *                         see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About
                *                         package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            RejectedPatches?: string[];
            /**
                * <p>The action for Patch Manager to take on patches included in the
                *     <code>RejectedPackages</code> list.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>ALLOW_AS_DEPENDENCY</code>
                *                   </b>: A package in the
                *       <code>Rejected</code> patches list is installed only if it is a dependency of another package.
                *      It is considered compliant with the patch baseline, and its status is reported as
                *       <code>InstalledOther</code>. This is the default action if no option is specified.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>BLOCK</code>
                *                   </b>: Packages in the
                *       <code>RejectedPatches</code> list, and packages that include them as dependencies, aren't
                *      installed under any circumstances. If a package was installed before it was added to the
                *      Rejected patches list, it is considered non-compliant with the patch baseline, and its status
                *      is reported as <code>InstalledRejected</code>.</p>
                *             </li>
                *          </ul>
                */
            RejectedPatchesAction?: PatchAction | string;
            /**
                * <p>A description of the patch baseline.</p>
                */
            Description?: string;
            /**
                * <p>Information about the patches to use to update the managed nodes, including target operating
                *    systems and source repositories. Applies to Linux managed nodes only.</p>
                */
            Sources?: PatchSource[];
            /**
                * <p>User-provided idempotency token.</p>
                */
            ClientToken?: string;
            /**
                * <p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in
                *    different ways, such as by purpose, owner, or environment. For example, you might want to tag a
                *    patch baseline to identify the severity level of patches it specifies and the operating system
                *    family it applies to. In this case, you could specify the following key-value pairs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Key=PatchSeverity,Value=Critical</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=OS,Value=Windows</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <note>
                *             <p>To add tags to an existing patch baseline, use the <a>AddTagsToResource</a>
                *     operation.</p>
                *          </note>
                */
            Tags?: Tag[];
    }
    export namespace CreatePatchBaselineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePatchBaselineRequest) => any;
    }
    export interface CreatePatchBaselineResult {
            /**
                * <p>The ID of the created patch baseline.</p>
                */
            BaselineId?: string;
    }
    export namespace CreatePatchBaselineResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePatchBaselineResult) => any;
    }
    /**
        * <p>Synchronize Amazon Web Services Systems Manager Inventory data from multiple Amazon Web Services accounts defined in Organizations to a
        *    centralized Amazon S3 bucket. Data is synchronized to individual key prefixes in the
        *    central bucket. Each key prefix represents a different Amazon Web Services account ID.</p>
        */
    export interface ResourceDataSyncDestinationDataSharing {
            /**
                * <p>The sharing data type. Only <code>Organization</code> is supported.</p>
                */
            DestinationDataSharingType?: string;
    }
    export namespace ResourceDataSyncDestinationDataSharing {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceDataSyncDestinationDataSharing) => any;
    }
    export enum ResourceDataSyncS3Format {
            JSON_SERDE = "JsonSerDe"
    }
    /**
        * <p>Information about the target S3 bucket for the resource data sync.</p>
        */
    export interface ResourceDataSyncS3Destination {
            /**
                * <p>The name of the S3 bucket where the aggregated data is stored.</p>
                */
            BucketName: string | undefined;
            /**
                * <p>An Amazon S3 prefix for the bucket.</p>
                */
            Prefix?: string;
            /**
                * <p>A supported sync format. The following format is currently supported: JsonSerDe</p>
                */
            SyncFormat: ResourceDataSyncS3Format | string | undefined;
            /**
                * <p>The Amazon Web Services Region with the S3 bucket targeted by the resource data sync.</p>
                */
            Region: string | undefined;
            /**
                * <p>The ARN of an encryption key for a destination in Amazon S3. Must belong to the same
                *    Region as the destination S3 bucket.</p>
                */
            AWSKMSKeyARN?: string;
            /**
                * <p>Enables destination data sharing. By default, this field is <code>null</code>.</p>
                */
            DestinationDataSharing?: ResourceDataSyncDestinationDataSharing;
    }
    export namespace ResourceDataSyncS3Destination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceDataSyncS3Destination) => any;
    }
    /**
        * <p>The Organizations organizational unit data source for the sync.</p>
        */
    export interface ResourceDataSyncOrganizationalUnit {
            /**
                * <p>The Organizations unit ID data source for the sync.</p>
                */
            OrganizationalUnitId?: string;
    }
    export namespace ResourceDataSyncOrganizationalUnit {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceDataSyncOrganizationalUnit) => any;
    }
    /**
        * <p>Information about the <code>AwsOrganizationsSource</code> resource data sync source. A sync
        *    source of this type can synchronize data from Organizations or, if an Amazon Web Services organization isn't
        *    present, from multiple Amazon Web Services Regions.</p>
        */
    export interface ResourceDataSyncAwsOrganizationsSource {
            /**
                * <p>If an Amazon Web Services organization is present, this is either <code>OrganizationalUnits</code> or
                *     <code>EntireOrganization</code>. For <code>OrganizationalUnits</code>, the data is aggregated
                *    from a set of organization units. For <code>EntireOrganization</code>, the data is aggregated
                *    from the entire Amazon Web Services organization.</p>
                */
            OrganizationSourceType: string | undefined;
            /**
                * <p>The Organizations organization units included in the sync.</p>
                */
            OrganizationalUnits?: ResourceDataSyncOrganizationalUnit[];
    }
    export namespace ResourceDataSyncAwsOrganizationsSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceDataSyncAwsOrganizationsSource) => any;
    }
    /**
        * <p>Information about the source of the data included in the resource data sync.</p>
        */
    export interface ResourceDataSyncSource {
            /**
                * <p>The type of data source for the resource data sync. <code>SourceType</code> is either
                *     <code>AwsOrganizations</code> (if an organization is present in Organizations) or
                *     <code>SingleAccountMultiRegions</code>.</p>
                */
            SourceType: string | undefined;
            /**
                * <p>Information about the <code>AwsOrganizationsSource</code> resource data sync source. A sync
                *    source of this type can synchronize data from Organizations.</p>
                */
            AwsOrganizationsSource?: ResourceDataSyncAwsOrganizationsSource;
            /**
                * <p>The <code>SyncSource</code> Amazon Web Services Regions included in the resource data sync.</p>
                */
            SourceRegions: string[] | undefined;
            /**
                * <p>Whether to automatically synchronize and aggregate data from new Amazon Web Services Regions when those
                *    Regions come online.</p>
                */
            IncludeFutureRegions?: boolean;
            /**
                * <p>When you create a resource data sync, if you choose one of the Organizations options, then Systems Manager
                *    automatically enables all OpsData sources in the selected Amazon Web Services Regions for all Amazon Web Services accounts in
                *    your organization (or in the selected organization units). For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resouce-data-sync-multiple-accounts-and-regions.html">About multiple account and Region resource data syncs</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            EnableAllOpsDataSources?: boolean;
    }
    export namespace ResourceDataSyncSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceDataSyncSource) => any;
    }
    export interface CreateResourceDataSyncRequest {
            /**
                * <p>A name for the configuration.</p>
                */
            SyncName: string | undefined;
            /**
                * <p>Amazon S3 configuration details for the sync. This parameter is required if the
                *     <code>SyncType</code> value is SyncToDestination.</p>
                */
            S3Destination?: ResourceDataSyncS3Destination;
            /**
                * <p>Specify <code>SyncToDestination</code> to create a resource data sync that synchronizes data
                *    to an S3 bucket for Inventory. If you specify <code>SyncToDestination</code>, you must provide a
                *    value for <code>S3Destination</code>. Specify <code>SyncFromSource</code> to synchronize data
                *    from a single account and multiple Regions, or multiple Amazon Web Services accounts and Amazon Web Services Regions, as
                *    listed in Organizations for Explorer. If you specify <code>SyncFromSource</code>, you must provide a
                *    value for <code>SyncSource</code>. The default value is <code>SyncToDestination</code>.</p>
                */
            SyncType?: string;
            /**
                * <p>Specify information about the data sources to synchronize. This parameter is required if the
                *     <code>SyncType</code> value is SyncFromSource.</p>
                */
            SyncSource?: ResourceDataSyncSource;
    }
    export namespace CreateResourceDataSyncRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateResourceDataSyncRequest) => any;
    }
    export interface CreateResourceDataSyncResult {
    }
    export namespace CreateResourceDataSyncResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateResourceDataSyncResult) => any;
    }
    /**
        * <p>A sync configuration with the same name already exists.</p>
        */
    export class ResourceDataSyncAlreadyExistsException extends __BaseException {
            readonly name: "ResourceDataSyncAlreadyExistsException";
            readonly $fault: "client";
            SyncName?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceDataSyncAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>You have exceeded the allowed maximum sync configurations.</p>
        */
    export class ResourceDataSyncCountExceededException extends __BaseException {
            readonly name: "ResourceDataSyncCountExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceDataSyncCountExceededException, __BaseException>);
    }
    /**
        * <p>The specified sync configuration is invalid.</p>
        */
    export class ResourceDataSyncInvalidConfigurationException extends __BaseException {
            readonly name: "ResourceDataSyncInvalidConfigurationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceDataSyncInvalidConfigurationException, __BaseException>);
    }
    export interface DeleteActivationRequest {
            /**
                * <p>The ID of the activation that you want to delete.</p>
                */
            ActivationId: string | undefined;
    }
    export namespace DeleteActivationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteActivationRequest) => any;
    }
    export interface DeleteActivationResult {
    }
    export namespace DeleteActivationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteActivationResult) => any;
    }
    /**
        * <p>The activation isn't valid. The activation might have been deleted, or the ActivationId and
        *    the ActivationCode don't match.</p>
        */
    export class InvalidActivation extends __BaseException {
            readonly name: "InvalidActivation";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidActivation, __BaseException>);
    }
    /**
        * <p>The activation ID isn't valid. Verify the you entered the correct ActivationId or
        *    ActivationCode and try again.</p>
        */
    export class InvalidActivationId extends __BaseException {
            readonly name: "InvalidActivationId";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidActivationId, __BaseException>);
    }
    /**
        * <p>The specified association doesn't exist.</p>
        */
    export class AssociationDoesNotExist extends __BaseException {
            readonly name: "AssociationDoesNotExist";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AssociationDoesNotExist, __BaseException>);
    }
    export interface DeleteAssociationRequest {
            /**
                * <p>The name of the SSM document.</p>
                */
            Name?: string;
            /**
                * <p>The managed node ID.</p>
                *          <note>
                *             <p>
                *                <code>InstanceId</code> has been deprecated. To specify a managed node ID for an
                *     association, use the <code>Targets</code> parameter. Requests that include the parameter
                *      <code>InstanceID</code> with Systems Manager documents (SSM documents) that use schema version 2.0 or
                *     later will fail. In addition, if you use the parameter <code>InstanceId</code>, you can't use
                *     the parameters <code>AssociationName</code>, <code>DocumentVersion</code>,
                *      <code>MaxErrors</code>, <code>MaxConcurrency</code>, <code>OutputLocation</code>, or
                *      <code>ScheduleExpression</code>. To use these parameters, you must use the <code>Targets</code>
                *     parameter.</p>
                *          </note>
                */
            InstanceId?: string;
            /**
                * <p>The association ID that you want to delete.</p>
                */
            AssociationId?: string;
    }
    export namespace DeleteAssociationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssociationRequest) => any;
    }
    export interface DeleteAssociationResult {
    }
    export namespace DeleteAssociationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssociationResult) => any;
    }
    /**
        * <p>You must disassociate a document from all managed nodes before you can delete it.</p>
        */
    export class AssociatedInstances extends __BaseException {
            readonly name: "AssociatedInstances";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AssociatedInstances, __BaseException>);
    }
    export interface DeleteDocumentRequest {
            /**
                * <p>The name of the document.</p>
                */
            Name: string | undefined;
            /**
                * <p>The version of the document that you want to delete. If not provided, all versions of the
                *    document are deleted.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The version name of the document that you want to delete. If not provided, all versions of
                *    the document are deleted.</p>
                */
            VersionName?: string;
            /**
                * <p>Some SSM document types require that you specify a <code>Force</code> flag before you can
                *    delete the document. For example, you must specify a <code>Force</code> flag to delete a document
                *    of type <code>ApplicationConfigurationSchema</code>. You can restrict access to the
                *     <code>Force</code> flag in an Identity and Access Management (IAM) policy.</p>
                */
            Force?: boolean;
    }
    export namespace DeleteDocumentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDocumentRequest) => any;
    }
    export interface DeleteDocumentResult {
    }
    export namespace DeleteDocumentResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDocumentResult) => any;
    }
    /**
        * <p>You attempted to delete a document while it is still shared. You must stop sharing the
        *    document before you can delete it.</p>
        */
    export class InvalidDocumentOperation extends __BaseException {
            readonly name: "InvalidDocumentOperation";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDocumentOperation, __BaseException>);
    }
    export enum InventorySchemaDeleteOption {
            DELETE_SCHEMA = "DeleteSchema",
            DISABLE_SCHEMA = "DisableSchema"
    }
    export interface DeleteInventoryRequest {
            /**
                * <p>The name of the custom inventory type for which you want to delete either all previously
                *    collected data or the inventory type itself. </p>
                */
            TypeName: string | undefined;
            /**
                * <p>Use the <code>SchemaDeleteOption</code> to delete a custom inventory type (schema). If you
                *    don't choose this option, the system only deletes existing inventory data associated with the
                *    custom inventory type. Choose one of the following options:</p>
                *          <p>DisableSchema: If you choose this option, the system ignores all inventory data for the
                *    specified version, and any earlier versions. To enable this schema again, you must call the
                *     <code>PutInventory</code> operation for a version greater than the disabled version.</p>
                *          <p>DeleteSchema: This option deletes the specified custom type from the Inventory service. You
                *    can recreate the schema later, if you want.</p>
                */
            SchemaDeleteOption?: InventorySchemaDeleteOption | string;
            /**
                * <p>Use this option to view a summary of the deletion request without deleting any data or the
                *    data type. This option is useful when you only want to understand what will be deleted. Once you
                *    validate that the data to be deleted is what you intend to delete, you can run the same command
                *    without specifying the <code>DryRun</code> option.</p>
                */
            DryRun?: boolean;
            /**
                * <p>User-provided idempotency token.</p>
                */
            ClientToken?: string;
    }
    export namespace DeleteInventoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInventoryRequest) => any;
    }
    /**
        * <p>Either a count, remaining count, or a version number in a delete inventory summary.</p>
        */
    export interface InventoryDeletionSummaryItem {
            /**
                * <p>The inventory type version.</p>
                */
            Version?: string;
            /**
                * <p>A count of the number of deleted items.</p>
                */
            Count?: number;
            /**
                * <p>The remaining number of items to delete.</p>
                */
            RemainingCount?: number;
    }
    export namespace InventoryDeletionSummaryItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InventoryDeletionSummaryItem) => any;
    }
    /**
        * <p>Information about the delete operation.</p>
        */
    export interface InventoryDeletionSummary {
            /**
                * <p>The total number of items to delete. This count doesn't change during the delete
                *    operation.</p>
                */
            TotalCount?: number;
            /**
                * <p>Remaining number of items to delete.</p>
                */
            RemainingCount?: number;
            /**
                * <p>A list of counts and versions for deleted items.</p>
                */
            SummaryItems?: InventoryDeletionSummaryItem[];
    }
    export namespace InventoryDeletionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InventoryDeletionSummary) => any;
    }
    export interface DeleteInventoryResult {
            /**
                * <p>Every <code>DeleteInventory</code> operation is assigned a unique ID. This option returns a
                *    unique ID. You can use this ID to query the status of a delete operation. This option is useful
                *    for ensuring that a delete operation has completed before you begin other operations. </p>
                */
            DeletionId?: string;
            /**
                * <p>The name of the inventory data type specified in the request.</p>
                */
            TypeName?: string;
            /**
                * <p>A summary of the delete operation. For more information about this summary, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-custom.html#sysman-inventory-delete-summary">Deleting custom inventory</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            DeletionSummary?: InventoryDeletionSummary;
    }
    export namespace DeleteInventoryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInventoryResult) => any;
    }
    /**
        * <p>One or more of the parameters specified for the delete operation isn't valid. Verify all
        *    parameters and try again.</p>
        */
    export class InvalidDeleteInventoryParametersException extends __BaseException {
            readonly name: "InvalidDeleteInventoryParametersException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDeleteInventoryParametersException, __BaseException>);
    }
    /**
        * <p>The request isn't valid.</p>
        */
    export class InvalidInventoryRequestException extends __BaseException {
            readonly name: "InvalidInventoryRequestException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInventoryRequestException, __BaseException>);
    }
    /**
        * <p>The delete inventory option specified isn't valid. Verify the option and try again.</p>
        */
    export class InvalidOptionException extends __BaseException {
            readonly name: "InvalidOptionException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidOptionException, __BaseException>);
    }
    /**
        * <p>The parameter type name isn't valid.</p>
        */
    export class InvalidTypeNameException extends __BaseException {
            readonly name: "InvalidTypeNameException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTypeNameException, __BaseException>);
    }
    export interface DeleteMaintenanceWindowRequest {
            /**
                * <p>The ID of the maintenance window to delete.</p>
                */
            WindowId: string | undefined;
    }
    export namespace DeleteMaintenanceWindowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMaintenanceWindowRequest) => any;
    }
    export interface DeleteMaintenanceWindowResult {
            /**
                * <p>The ID of the deleted maintenance window.</p>
                */
            WindowId?: string;
    }
    export namespace DeleteMaintenanceWindowResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteMaintenanceWindowResult) => any;
    }
    export interface DeleteOpsMetadataRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of an OpsMetadata Object to delete.</p>
                */
            OpsMetadataArn: string | undefined;
    }
    export namespace DeleteOpsMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteOpsMetadataRequest) => any;
    }
    export interface DeleteOpsMetadataResult {
    }
    export namespace DeleteOpsMetadataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteOpsMetadataResult) => any;
    }
    /**
        * <p>The OpsMetadata object doesn't exist. </p>
        */
    export class OpsMetadataNotFoundException extends __BaseException {
            readonly name: "OpsMetadataNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OpsMetadataNotFoundException, __BaseException>);
    }
    export interface DeleteParameterRequest {
            /**
                * <p>The name of the parameter to delete.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteParameterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteParameterRequest) => any;
    }
    export interface DeleteParameterResult {
    }
    export namespace DeleteParameterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteParameterResult) => any;
    }
    /**
        * <p>The parameter couldn't be found. Verify the name and try again.</p>
        */
    export class ParameterNotFound extends __BaseException {
            readonly name: "ParameterNotFound";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ParameterNotFound, __BaseException>);
    }
    export interface DeleteParametersRequest {
            /**
                * <p>The names of the parameters to delete. After deleting a parameter, wait for at least 30
                *    seconds to create a parameter with the same name.</p>
                */
            Names: string[] | undefined;
    }
    export namespace DeleteParametersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteParametersRequest) => any;
    }
    export interface DeleteParametersResult {
            /**
                * <p>The names of the deleted parameters.</p>
                */
            DeletedParameters?: string[];
            /**
                * <p>The names of parameters that weren't deleted because the parameters aren't valid.</p>
                */
            InvalidParameters?: string[];
    }
    export namespace DeleteParametersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteParametersResult) => any;
    }
    export interface DeletePatchBaselineRequest {
            /**
                * <p>The ID of the patch baseline to delete.</p>
                */
            BaselineId: string | undefined;
    }
    export namespace DeletePatchBaselineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePatchBaselineRequest) => any;
    }
    export interface DeletePatchBaselineResult {
            /**
                * <p>The ID of the deleted patch baseline.</p>
                */
            BaselineId?: string;
    }
    export namespace DeletePatchBaselineResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePatchBaselineResult) => any;
    }
    /**
        * <p>Error returned if an attempt is made to delete a patch baseline that is registered for a
        *    patch group.</p>
        */
    export class ResourceInUseException extends __BaseException {
            readonly name: "ResourceInUseException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceInUseException, __BaseException>);
    }
    export interface DeleteResourceDataSyncRequest {
            /**
                * <p>The name of the configuration to delete.</p>
                */
            SyncName: string | undefined;
            /**
                * <p>Specify the type of resource data sync to delete.</p>
                */
            SyncType?: string;
    }
    export namespace DeleteResourceDataSyncRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourceDataSyncRequest) => any;
    }
    export interface DeleteResourceDataSyncResult {
    }
    export namespace DeleteResourceDataSyncResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourceDataSyncResult) => any;
    }
    /**
        * <p>The specified sync name wasn't found.</p>
        */
    export class ResourceDataSyncNotFoundException extends __BaseException {
            readonly name: "ResourceDataSyncNotFoundException";
            readonly $fault: "client";
            SyncName?: string;
            SyncType?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceDataSyncNotFoundException, __BaseException>);
    }
    export interface DeregisterManagedInstanceRequest {
            /**
                * <p>The ID assigned to the managed node when you registered it using the activation process.
                *   </p>
                */
            InstanceId: string | undefined;
    }
    export namespace DeregisterManagedInstanceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterManagedInstanceRequest) => any;
    }
    export interface DeregisterManagedInstanceResult {
    }
    export namespace DeregisterManagedInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterManagedInstanceResult) => any;
    }
    export interface DeregisterPatchBaselineForPatchGroupRequest {
            /**
                * <p>The ID of the patch baseline to deregister the patch group from.</p>
                */
            BaselineId: string | undefined;
            /**
                * <p>The name of the patch group that should be deregistered from the patch baseline.</p>
                */
            PatchGroup: string | undefined;
    }
    export namespace DeregisterPatchBaselineForPatchGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterPatchBaselineForPatchGroupRequest) => any;
    }
    export interface DeregisterPatchBaselineForPatchGroupResult {
            /**
                * <p>The ID of the patch baseline the patch group was deregistered from.</p>
                */
            BaselineId?: string;
            /**
                * <p>The name of the patch group deregistered from the patch baseline.</p>
                */
            PatchGroup?: string;
    }
    export namespace DeregisterPatchBaselineForPatchGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterPatchBaselineForPatchGroupResult) => any;
    }
    export interface DeregisterTargetFromMaintenanceWindowRequest {
            /**
                * <p>The ID of the maintenance window the target should be removed from.</p>
                */
            WindowId: string | undefined;
            /**
                * <p>The ID of the target definition to remove.</p>
                */
            WindowTargetId: string | undefined;
            /**
                * <p>The system checks if the target is being referenced by a task. If the target is being
                *    referenced, the system returns an error and doesn't deregister the target from the maintenance
                *    window.</p>
                */
            Safe?: boolean;
    }
    export namespace DeregisterTargetFromMaintenanceWindowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterTargetFromMaintenanceWindowRequest) => any;
    }
    export interface DeregisterTargetFromMaintenanceWindowResult {
            /**
                * <p>The ID of the maintenance window the target was removed from.</p>
                */
            WindowId?: string;
            /**
                * <p>The ID of the removed target definition.</p>
                */
            WindowTargetId?: string;
    }
    export namespace DeregisterTargetFromMaintenanceWindowResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterTargetFromMaintenanceWindowResult) => any;
    }
    /**
        * <p>You specified the <code>Safe</code> option for the DeregisterTargetFromMaintenanceWindow
        *    operation, but the target is still referenced in a task.</p>
        */
    export class TargetInUseException extends __BaseException {
            readonly name: "TargetInUseException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TargetInUseException, __BaseException>);
    }
    export interface DeregisterTaskFromMaintenanceWindowRequest {
            /**
                * <p>The ID of the maintenance window the task should be removed from.</p>
                */
            WindowId: string | undefined;
            /**
                * <p>The ID of the task to remove from the maintenance window.</p>
                */
            WindowTaskId: string | undefined;
    }
    export namespace DeregisterTaskFromMaintenanceWindowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterTaskFromMaintenanceWindowRequest) => any;
    }
    export interface DeregisterTaskFromMaintenanceWindowResult {
            /**
                * <p>The ID of the maintenance window the task was removed from.</p>
                */
            WindowId?: string;
            /**
                * <p>The ID of the task removed from the maintenance window.</p>
                */
            WindowTaskId?: string;
    }
    export namespace DeregisterTaskFromMaintenanceWindowResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterTaskFromMaintenanceWindowResult) => any;
    }
    export enum DescribeActivationsFilterKeys {
            ACTIVATION_IDS = "ActivationIds",
            DEFAULT_INSTANCE_NAME = "DefaultInstanceName",
            IAM_ROLE = "IamRole"
    }
    /**
        * <p>Filter for the DescribeActivation API.</p>
        */
    export interface DescribeActivationsFilter {
            /**
                * <p>The name of the filter.</p>
                */
            FilterKey?: DescribeActivationsFilterKeys | string;
            /**
                * <p>The filter values.</p>
                */
            FilterValues?: string[];
    }
    export namespace DescribeActivationsFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeActivationsFilter) => any;
    }
    export interface DescribeActivationsRequest {
            /**
                * <p>A filter to view information about your activations.</p>
                */
            Filters?: DescribeActivationsFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeActivationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeActivationsRequest) => any;
    }
    export interface DescribeActivationsResult {
            /**
                * <p>A list of activations for your Amazon Web Services account.</p>
                */
            ActivationList?: Activation[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeActivationsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeActivationsResult) => any;
    }
    /**
        * <p>The filter name isn't valid. Verify the you entered the correct name and try again.</p>
        */
    export class InvalidFilter extends __BaseException {
            readonly name: "InvalidFilter";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidFilter, __BaseException>);
    }
    /**
        * <p>The specified token isn't valid.</p>
        */
    export class InvalidNextToken extends __BaseException {
            readonly name: "InvalidNextToken";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidNextToken, __BaseException>);
    }
    export interface DescribeAssociationRequest {
            /**
                * <p>The name of the SSM document.</p>
                */
            Name?: string;
            /**
                * <p>The managed node ID.</p>
                */
            InstanceId?: string;
            /**
                * <p>The association ID for which you want information.</p>
                */
            AssociationId?: string;
            /**
                * <p>Specify the association version to retrieve. To view the latest version, either specify
                *     <code>$LATEST</code> for this parameter, or omit this parameter. To view a list of all
                *    associations for a managed node, use <a>ListAssociations</a>. To get a list of
                *    versions for a specific association, use <a>ListAssociationVersions</a>. </p>
                */
            AssociationVersion?: string;
    }
    export namespace DescribeAssociationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAssociationRequest) => any;
    }
    export interface DescribeAssociationResult {
            /**
                * <p>Information about the association.</p>
                */
            AssociationDescription?: AssociationDescription;
    }
    export namespace DescribeAssociationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAssociationResult) => any;
    }
    /**
        * <p>The version you specified isn't valid. Use ListAssociationVersions to view all versions of
        *    an association according to the association ID. Or, use the <code>$LATEST</code> parameter to
        *    view the latest version of the association.</p>
        */
    export class InvalidAssociationVersion extends __BaseException {
            readonly name: "InvalidAssociationVersion";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidAssociationVersion, __BaseException>);
    }
    export enum AssociationExecutionFilterKey {
            CreatedTime = "CreatedTime",
            ExecutionId = "ExecutionId",
            Status = "Status"
    }
    export enum AssociationFilterOperatorType {
            Equal = "EQUAL",
            GreaterThan = "GREATER_THAN",
            LessThan = "LESS_THAN"
    }
    /**
        * <p>Filters used in the request.</p>
        */
    export interface AssociationExecutionFilter {
            /**
                * <p>The key value used in the request.</p>
                */
            Key: AssociationExecutionFilterKey | string | undefined;
            /**
                * <p>The value specified for the key.</p>
                */
            Value: string | undefined;
            /**
                * <p>The filter type specified in the request.</p>
                */
            Type: AssociationFilterOperatorType | string | undefined;
    }
    export namespace AssociationExecutionFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociationExecutionFilter) => any;
    }
    export interface DescribeAssociationExecutionsRequest {
            /**
                * <p>The association ID for which you want to view execution history details.</p>
                */
            AssociationId: string | undefined;
            /**
                * <p>Filters for the request. You can specify the following filters and values.</p>
                *          <p>ExecutionId (EQUAL)</p>
                *          <p>Status (EQUAL)</p>
                *          <p>CreatedTime (EQUAL, GREATER_THAN, LESS_THAN)</p>
                */
            Filters?: AssociationExecutionFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeAssociationExecutionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAssociationExecutionsRequest) => any;
    }
    /**
        * <p>Includes information about the specified association.</p>
        */
    export interface AssociationExecution {
            /**
                * <p>The association ID.</p>
                */
            AssociationId?: string;
            /**
                * <p>The association version.</p>
                */
            AssociationVersion?: string;
            /**
                * <p>The execution ID for the association.</p>
                */
            ExecutionId?: string;
            /**
                * <p>The status of the association execution.</p>
                */
            Status?: string;
            /**
                * <p>Detailed status information about the execution.</p>
                */
            DetailedStatus?: string;
            /**
                * <p>The time the execution started.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The date of the last execution.</p>
                */
            LastExecutionDate?: Date;
            /**
                * <p>An aggregate status of the resources in the execution based on the status type.</p>
                */
            ResourceCountByStatus?: string;
    }
    export namespace AssociationExecution {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociationExecution) => any;
    }
    export interface DescribeAssociationExecutionsResult {
            /**
                * <p>A list of the executions for the specified association ID.</p>
                */
            AssociationExecutions?: AssociationExecution[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAssociationExecutionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAssociationExecutionsResult) => any;
    }
    /**
        * <p>The specified execution ID doesn't exist. Verify the ID number and try again.</p>
        */
    export class AssociationExecutionDoesNotExist extends __BaseException {
            readonly name: "AssociationExecutionDoesNotExist";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AssociationExecutionDoesNotExist, __BaseException>);
    }
    export enum AssociationExecutionTargetsFilterKey {
            ResourceId = "ResourceId",
            ResourceType = "ResourceType",
            Status = "Status"
    }
    /**
        * <p>Filters for the association execution.</p>
        */
    export interface AssociationExecutionTargetsFilter {
            /**
                * <p>The key value used in the request.</p>
                */
            Key: AssociationExecutionTargetsFilterKey | string | undefined;
            /**
                * <p>The value specified for the key.</p>
                */
            Value: string | undefined;
    }
    export namespace AssociationExecutionTargetsFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociationExecutionTargetsFilter) => any;
    }
    export interface DescribeAssociationExecutionTargetsRequest {
            /**
                * <p>The association ID that includes the execution for which you want to view details.</p>
                */
            AssociationId: string | undefined;
            /**
                * <p>The execution ID for which you want to view details.</p>
                */
            ExecutionId: string | undefined;
            /**
                * <p>Filters for the request. You can specify the following filters and values.</p>
                *          <p>Status (EQUAL)</p>
                *          <p>ResourceId (EQUAL)</p>
                *          <p>ResourceType (EQUAL)</p>
                */
            Filters?: AssociationExecutionTargetsFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeAssociationExecutionTargetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAssociationExecutionTargetsRequest) => any;
    }
    /**
        * <p>Information about the source where the association execution details are stored.</p>
        */
    export interface OutputSource {
            /**
                * <p>The ID of the output source, for example the URL of an S3 bucket.</p>
                */
            OutputSourceId?: string;
            /**
                * <p>The type of source where the association execution details are stored, for example, Amazon S3.</p>
                */
            OutputSourceType?: string;
    }
    export namespace OutputSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutputSource) => any;
    }
    /**
        * <p>Includes information about the specified association execution.</p>
        */
    export interface AssociationExecutionTarget {
            /**
                * <p>The association ID.</p>
                */
            AssociationId?: string;
            /**
                * <p>The association version.</p>
                */
            AssociationVersion?: string;
            /**
                * <p>The execution ID.</p>
                */
            ExecutionId?: string;
            /**
                * <p>The resource ID, for example, the managed node ID where the association ran.</p>
                */
            ResourceId?: string;
            /**
                * <p>The resource type, for example, EC2.</p>
                */
            ResourceType?: string;
            /**
                * <p>The association execution status.</p>
                */
            Status?: string;
            /**
                * <p>Detailed information about the execution status.</p>
                */
            DetailedStatus?: string;
            /**
                * <p>The date of the last execution.</p>
                */
            LastExecutionDate?: Date;
            /**
                * <p>The location where the association details are saved.</p>
                */
            OutputSource?: OutputSource;
    }
    export namespace AssociationExecutionTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociationExecutionTarget) => any;
    }
    export interface DescribeAssociationExecutionTargetsResult {
            /**
                * <p>Information about the execution.</p>
                */
            AssociationExecutionTargets?: AssociationExecutionTarget[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAssociationExecutionTargetsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAssociationExecutionTargetsResult) => any;
    }
    export enum AutomationExecutionFilterKey {
            AUTOMATION_SUBTYPE = "AutomationSubtype",
            AUTOMATION_TYPE = "AutomationType",
            CURRENT_ACTION = "CurrentAction",
            DOCUMENT_NAME_PREFIX = "DocumentNamePrefix",
            EXECUTION_ID = "ExecutionId",
            EXECUTION_STATUS = "ExecutionStatus",
            OPS_ITEM_ID = "OpsItemId",
            PARENT_EXECUTION_ID = "ParentExecutionId",
            START_TIME_AFTER = "StartTimeAfter",
            START_TIME_BEFORE = "StartTimeBefore",
            TAG_KEY = "TagKey",
            TARGET_RESOURCE_GROUP = "TargetResourceGroup"
    }
    /**
        * <p>A filter used to match specific automation executions. This is used to limit the scope of
        *    Automation execution information returned.</p>
        */
    export interface AutomationExecutionFilter {
            /**
                * <p>One or more keys to limit the results.</p>
                */
            Key: AutomationExecutionFilterKey | string | undefined;
            /**
                * <p>The values used to limit the execution information associated with the filter's key.</p>
                */
            Values: string[] | undefined;
    }
    export namespace AutomationExecutionFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutomationExecutionFilter) => any;
    }
    export interface DescribeAutomationExecutionsRequest {
            /**
                * <p>Filters used to limit the scope of executions that are requested.</p>
                */
            Filters?: AutomationExecutionFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAutomationExecutionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAutomationExecutionsRequest) => any;
    }
    export enum AutomationExecutionStatus {
            APPROVED = "Approved",
            CANCELLED = "Cancelled",
            CANCELLING = "Cancelling",
            CHANGE_CALENDAR_OVERRIDE_APPROVED = "ChangeCalendarOverrideApproved",
            CHANGE_CALENDAR_OVERRIDE_REJECTED = "ChangeCalendarOverrideRejected",
            COMPLETED_WITH_FAILURE = "CompletedWithFailure",
            COMPLETED_WITH_SUCCESS = "CompletedWithSuccess",
            FAILED = "Failed",
            INPROGRESS = "InProgress",
            PENDING = "Pending",
            PENDING_APPROVAL = "PendingApproval",
            PENDING_CHANGE_CALENDAR_OVERRIDE = "PendingChangeCalendarOverride",
            REJECTED = "Rejected",
            RUNBOOK_INPROGRESS = "RunbookInProgress",
            SCHEDULED = "Scheduled",
            SUCCESS = "Success",
            TIMEDOUT = "TimedOut",
            WAITING = "Waiting"
    }
    export enum AutomationSubtype {
            ChangeRequest = "ChangeRequest"
    }
    export enum AutomationType {
            CrossAccount = "CrossAccount",
            Local = "Local"
    }
    export enum ExecutionMode {
            Auto = "Auto",
            Interactive = "Interactive"
    }
    /**
        * <p>Information about targets that resolved during the Automation execution.</p>
        */
    export interface ResolvedTargets {
            /**
                * <p>A list of parameter values sent to targets that resolved during the Automation
                *    execution.</p>
                */
            ParameterValues?: string[];
            /**
                * <p>A boolean value indicating whether the resolved target list is truncated.</p>
                */
            Truncated?: boolean;
    }
    export namespace ResolvedTargets {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResolvedTargets) => any;
    }
    /**
        * <p>Information about an Automation runbook used in a runbook workflow in Change Manager.</p>
        *          <note>
        *             <p>The Automation runbooks specified for the runbook workflow can't run until all required
        *     approvals for the change request have been received.</p>
        *          </note>
        */
    export interface Runbook {
            /**
                * <p>The name of the Automation runbook used in a runbook workflow.</p>
                */
            DocumentName: string | undefined;
            /**
                * <p>The version of the Automation runbook used in a runbook workflow.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The key-value map of execution parameters, which were supplied when calling
                *     <code>StartChangeRequestExecution</code>.</p>
                */
            Parameters?: Record<string, string[]>;
            /**
                * <p>The name of the parameter used as the target resource for the rate-controlled
                *    runbook workflow. Required if you specify <code>Targets</code>. </p>
                */
            TargetParameterName?: string;
            /**
                * <p>A key-value mapping to target resources that the runbook operation performs tasks on.
                *    Required if you specify <code>TargetParameterName</code>.</p>
                */
            Targets?: Target[];
            /**
                * <p>A key-value mapping of runbook parameters to target resources. Both Targets and TargetMaps
                *    can't be specified together.</p>
                */
            TargetMaps?: Record<string, string[]>[];
            /**
                * <p>The <code>MaxConcurrency</code> value specified by the user when the operation started,
                *    indicating the maximum number of resources that the runbook operation can run on at the same
                *    time.</p>
                */
            MaxConcurrency?: string;
            /**
                * <p>The <code>MaxErrors</code> value specified by the user when the execution started,
                *    indicating the maximum number of errors that can occur during the operation before the updates
                *    are stopped or rolled back.</p>
                */
            MaxErrors?: string;
            /**
                * <p>Information about the Amazon Web Services Regions and Amazon Web Services accounts targeted by the current Runbook
                *    operation.</p>
                */
            TargetLocations?: TargetLocation[];
    }
    export namespace Runbook {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Runbook) => any;
    }
    /**
        * <p>Details about a specific Automation execution.</p>
        */
    export interface AutomationExecutionMetadata {
            /**
                * <p>The execution ID.</p>
                */
            AutomationExecutionId?: string;
            /**
                * <p>The name of the Automation runbook used during execution.</p>
                */
            DocumentName?: string;
            /**
                * <p>The document version used during the execution.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The status of the execution.</p>
                */
            AutomationExecutionStatus?: AutomationExecutionStatus | string;
            /**
                * <p>The time the execution started.</p>
                */
            ExecutionStartTime?: Date;
            /**
                * <p>The time the execution finished. This isn't populated if the execution is still in
                *    progress.</p>
                */
            ExecutionEndTime?: Date;
            /**
                * <p>The IAM role ARN of the user who ran the automation.</p>
                */
            ExecutedBy?: string;
            /**
                * <p>An S3 bucket where execution information is stored.</p>
                */
            LogFile?: string;
            /**
                * <p>The list of execution outputs as defined in the Automation runbook.</p>
                */
            Outputs?: Record<string, string[]>;
            /**
                * <p>The Automation execution mode.</p>
                */
            Mode?: ExecutionMode | string;
            /**
                * <p>The execution ID of the parent automation.</p>
                */
            ParentAutomationExecutionId?: string;
            /**
                * <p>The name of the step that is currently running.</p>
                */
            CurrentStepName?: string;
            /**
                * <p>The action of the step that is currently running.</p>
                */
            CurrentAction?: string;
            /**
                * <p>The list of execution outputs as defined in the Automation runbook.</p>
                */
            FailureMessage?: string;
            /**
                * <p>The list of execution outputs as defined in the Automation runbook.</p>
                */
            TargetParameterName?: string;
            /**
                * <p>The targets defined by the user when starting the automation.</p>
                */
            Targets?: Target[];
            /**
                * <p>The specified key-value mapping of document parameters to target resources.</p>
                */
            TargetMaps?: Record<string, string[]>[];
            /**
                * <p>A list of targets that resolved during the execution.</p>
                */
            ResolvedTargets?: ResolvedTargets;
            /**
                * <p>The <code>MaxConcurrency</code> value specified by the user when starting the
                *    automation.</p>
                */
            MaxConcurrency?: string;
            /**
                * <p>The <code>MaxErrors</code> value specified by the user when starting the automation.</p>
                */
            MaxErrors?: string;
            /**
                * <p>The list of execution outputs as defined in the Automation runbook.</p>
                */
            Target?: string;
            /**
                * <p>Use this filter with <a>DescribeAutomationExecutions</a>. Specify either Local or
                *    CrossAccount. CrossAccount is an Automation that runs in multiple Amazon Web Services Regions and
                *    Amazon Web Services accounts. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html">Running Automation workflows in multiple Amazon Web Services Regions and accounts</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>. </p>
                */
            AutomationType?: AutomationType | string;
            /**
                * <p>The subtype of the Automation operation. Currently, the only supported value is
                *     <code>ChangeRequest</code>.</p>
                */
            AutomationSubtype?: AutomationSubtype | string;
            /**
                * <p>The date and time the Automation operation is scheduled to start.</p>
                */
            ScheduledTime?: Date;
            /**
                * <p>Information about the Automation runbooks that are run during a runbook workflow in
                *    Change Manager.</p>
                *          <note>
                *             <p>The Automation runbooks specified for the runbook workflow can't run until all required
                *     approvals for the change request have been received.</p>
                *          </note>
                */
            Runbooks?: Runbook[];
            /**
                * <p>The ID of an OpsItem that is created to represent a Change Manager change request.</p>
                */
            OpsItemId?: string;
            /**
                * <p>The ID of a State Manager association used in the Automation operation.</p>
                */
            AssociationId?: string;
            /**
                * <p>The name of the Change Manager change request.</p>
                */
            ChangeRequestName?: string;
    }
    export namespace AutomationExecutionMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutomationExecutionMetadata) => any;
    }
    export interface DescribeAutomationExecutionsResult {
            /**
                * <p>The list of details about each automation execution which has occurred which matches the
                *    filter specification, if any.</p>
                */
            AutomationExecutionMetadataList?: AutomationExecutionMetadata[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAutomationExecutionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAutomationExecutionsResult) => any;
    }
    /**
        * <p>The specified key isn't valid.</p>
        */
    export class InvalidFilterKey extends __BaseException {
            readonly name: "InvalidFilterKey";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidFilterKey, __BaseException>);
    }
    /**
        * <p>The filter value isn't valid. Verify the value and try again.</p>
        */
    export class InvalidFilterValue extends __BaseException {
            readonly name: "InvalidFilterValue";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidFilterValue, __BaseException>);
    }
    /**
        * <p>There is no automation execution information for the requested automation execution
        *    ID.</p>
        */
    export class AutomationExecutionNotFoundException extends __BaseException {
            readonly name: "AutomationExecutionNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AutomationExecutionNotFoundException, __BaseException>);
    }
    export enum StepExecutionFilterKey {
            ACTION = "Action",
            START_TIME_AFTER = "StartTimeAfter",
            START_TIME_BEFORE = "StartTimeBefore",
            STEP_EXECUTION_ID = "StepExecutionId",
            STEP_EXECUTION_STATUS = "StepExecutionStatus",
            STEP_NAME = "StepName"
    }
    /**
        * <p>A filter to limit the amount of step execution information returned by the call.</p>
        */
    export interface StepExecutionFilter {
            /**
                * <p>One or more keys to limit the results. Valid filter keys include the following: StepName,
                *    Action, StepExecutionId, StepExecutionStatus, StartTimeBefore, StartTimeAfter.</p>
                */
            Key: StepExecutionFilterKey | string | undefined;
            /**
                * <p>The values of the filter key.</p>
                */
            Values: string[] | undefined;
    }
    export namespace StepExecutionFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StepExecutionFilter) => any;
    }
    export interface DescribeAutomationStepExecutionsRequest {
            /**
                * <p>The Automation execution ID for which you want step execution descriptions.</p>
                */
            AutomationExecutionId: string | undefined;
            /**
                * <p>One or more filters to limit the number of step executions returned by the request.</p>
                */
            Filters?: StepExecutionFilter[];
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>Indicates whether to list step executions in reverse order by start time. The default value
                *    is 'false'.</p>
                */
            ReverseOrder?: boolean;
    }
    export namespace DescribeAutomationStepExecutionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAutomationStepExecutionsRequest) => any;
    }
    /**
        * <p>Information about an Automation failure.</p>
        */
    export interface FailureDetails {
            /**
                * <p>The stage of the Automation execution when the failure occurred. The stages include the
                *    following: InputValidation, PreVerification, Invocation, PostVerification.</p>
                */
            FailureStage?: string;
            /**
                * <p>The type of Automation failure. Failure types include the following: Action, Permission,
                *    Throttling, Verification, Internal.</p>
                */
            FailureType?: string;
            /**
                * <p>Detailed information about the Automation step failure.</p>
                */
            Details?: Record<string, string[]>;
    }
    export namespace FailureDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FailureDetails) => any;
    }
    /**
        * <p>Detailed information about an the execution state of an Automation step.</p>
        */
    export interface StepExecution {
            /**
                * <p>The name of this execution step.</p>
                */
            StepName?: string;
            /**
                * <p>The action this step performs. The action determines the behavior of the step.</p>
                */
            Action?: string;
            /**
                * <p>The timeout seconds of the step.</p>
                */
            TimeoutSeconds?: number;
            /**
                * <p>The action to take if the step fails. The default value is <code>Abort</code>.</p>
                */
            OnFailure?: string;
            /**
                * <p>The maximum number of tries to run the action of the step. The default value is
                *     <code>1</code>.</p>
                */
            MaxAttempts?: number;
            /**
                * <p>If a step has begun execution, this contains the time the step started. If the step is in
                *    Pending status, this field isn't populated.</p>
                */
            ExecutionStartTime?: Date;
            /**
                * <p>If a step has finished execution, this contains the time the execution ended. If the step
                *    hasn't yet concluded, this field isn't populated.</p>
                */
            ExecutionEndTime?: Date;
            /**
                * <p>The execution status for this step.</p>
                */
            StepStatus?: AutomationExecutionStatus | string;
            /**
                * <p>The response code returned by the execution of the step.</p>
                */
            ResponseCode?: string;
            /**
                * <p>Fully-resolved values passed into the step before execution.</p>
                */
            Inputs?: Record<string, string>;
            /**
                * <p>Returned values from the execution of the step.</p>
                */
            Outputs?: Record<string, string[]>;
            /**
                * <p>A message associated with the response code for an execution.</p>
                */
            Response?: string;
            /**
                * <p>If a step failed, this message explains why the execution failed.</p>
                */
            FailureMessage?: string;
            /**
                * <p>Information about the Automation failure.</p>
                */
            FailureDetails?: FailureDetails;
            /**
                * <p>The unique ID of a step execution.</p>
                */
            StepExecutionId?: string;
            /**
                * <p>A user-specified list of parameters to override when running a step.</p>
                */
            OverriddenParameters?: Record<string, string[]>;
            /**
                * <p>The flag which can be used to end automation no matter whether the step succeeds or
                *    fails.</p>
                */
            IsEnd?: boolean;
            /**
                * <p>The next step after the step succeeds.</p>
                */
            NextStep?: string;
            /**
                * <p>The flag which can be used to help decide whether the failure of current step leads to the
                *    Automation failure.</p>
                */
            IsCritical?: boolean;
            /**
                * <p>Strategies used when step fails, we support Continue and Abort. Abort will fail the
                *    automation when the step fails. Continue will ignore the failure of current step and allow
                *    automation to run the next step. With conditional branching, we add step:stepName to support the
                *    automation to go to another specific step.</p>
                */
            ValidNextSteps?: string[];
            /**
                * <p>The targets for the step execution.</p>
                */
            Targets?: Target[];
            /**
                * <p>The combination of Amazon Web Services Regions and Amazon Web Services accounts targeted by the current Automation
                *    execution.</p>
                */
            TargetLocation?: TargetLocation;
    }
    export namespace StepExecution {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StepExecution) => any;
    }
    export interface DescribeAutomationStepExecutionsResult {
            /**
                * <p>A list of details about the current state of all steps that make up an execution.</p>
                */
            StepExecutions?: StepExecution[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAutomationStepExecutionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAutomationStepExecutionsResult) => any;
    }
    /**
        * <p>Defines a filter used in Patch Manager APIs. Supported filter keys depend on the API
        *    operation that includes the filter. Patch Manager API operations that use
        *     <code>PatchOrchestratorFilter</code> include the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>DescribeAvailablePatches</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DescribeInstancePatches</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DescribePatchBaselines</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DescribePatchGroups</a>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface PatchOrchestratorFilter {
            /**
                * <p>The key for the filter.</p>
                */
            Key?: string;
            /**
                * <p>The value for the filter.</p>
                */
            Values?: string[];
    }
    export namespace PatchOrchestratorFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PatchOrchestratorFilter) => any;
    }
    export interface DescribeAvailablePatchesRequest {
            /**
                * <p>Each element in the array is a structure containing a key-value pair.</p>
                *          <p>
                *             <b>Windows Server</b>
                *          </p>
                *          <p>Supported keys for Windows Server managed node patches include the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>PATCH_SET</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>OS</code> | <code>APPLICATION</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>PRODUCT</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>WindowsServer2012</code> | <code>Office 2010</code> |
                *       <code>MicrosoftDefenderAntivirus</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>PRODUCT_FAMILY</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>Windows</code> | <code>Office</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>MSRC_SEVERITY</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>ServicePacks</code> | <code>Important</code> | <code>Moderate</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>CLASSIFICATION</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>ServicePacks</code> | <code>SecurityUpdates</code> |
                *       <code>DefinitionUpdates</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>PATCH_ID</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>KB123456</code> | <code>KB4516046</code>
                *                </p>
                *             </li>
                *          </ul>
                *
                *          <p>
                *             <b>Linux</b>
                *          </p>
                *          <important>
                *             <p>When specifying filters for Linux patches, you must specify a key-pair for
                *      <code>PRODUCT</code>. For example, using the Command Line Interface (CLI), the
                *     following command fails:</p>
                *             <p>
                *                <code>aws ssm describe-available-patches --filters Key=CVE_ID,Values=CVE-2018-3615</code>
                *             </p>
                *             <p>However, the following command succeeds:</p>
                *             <p>
                *                <code>aws ssm describe-available-patches --filters Key=PRODUCT,Values=AmazonLinux2018.03
                *      Key=CVE_ID,Values=CVE-2018-3615</code>
                *             </p>
                *          </important>
                *          <p>Supported keys for Linux managed node patches include the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>PRODUCT</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>AmazonLinux2018.03</code> | <code>AmazonLinux2.0</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>NAME</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>kernel-headers</code> | <code>samba-python</code> | <code>php</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>SEVERITY</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>Critical</code> | <code>Important</code> | <code>Medium</code> |
                *       <code>Low</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>EPOCH</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>0</code> | <code>1</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>VERSION</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>78.6.1</code> | <code>4.10.16</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>RELEASE</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>9.56.amzn1</code> | <code>1.amzn2</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>ARCH</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>i686</code> | <code>x86_64</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>REPOSITORY</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>Core</code> | <code>Updates</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>ADVISORY_ID</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>ALAS-2018-1058</code> | <code>ALAS2-2021-1594</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>CVE_ID</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>CVE-2018-3615</code> | <code>CVE-2020-1472</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>BUGZILLA_ID</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>1463241</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Filters?: PatchOrchestratorFilter[];
            /**
                * <p>The maximum number of patches to return (per page).</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAvailablePatchesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAvailablePatchesRequest) => any;
    }
    /**
        * <p>Represents metadata about a patch.</p>
        */
    export interface Patch {
            /**
                * <p>The ID of the patch. Applies to Windows patches only.</p>
                *          <note>
                *             <p>This ID isn't the same as the Microsoft Knowledge Base ID.</p>
                *          </note>
                */
            Id?: string;
            /**
                * <p>The date the patch was released.</p>
                */
            ReleaseDate?: Date;
            /**
                * <p>The title of the patch.</p>
                */
            Title?: string;
            /**
                * <p>The description of the patch.</p>
                */
            Description?: string;
            /**
                * <p>The URL where more information can be obtained about the patch.</p>
                */
            ContentUrl?: string;
            /**
                * <p>The name of the vendor providing the patch.</p>
                */
            Vendor?: string;
            /**
                * <p>The product family the patch is applicable for. For example, <code>Windows</code> or
                *     <code>Amazon Linux 2</code>.</p>
                */
            ProductFamily?: string;
            /**
                * <p>The specific product the patch is applicable for. For example,
                *     <code>WindowsServer2016</code> or <code>AmazonLinux2018.03</code>.</p>
                */
            Product?: string;
            /**
                * <p>The classification of the patch. For example, <code>SecurityUpdates</code>,
                *     <code>Updates</code>, or <code>CriticalUpdates</code>.</p>
                */
            Classification?: string;
            /**
                * <p>The severity of the patch, such as <code>Critical</code>, <code>Important</code>, or
                *     <code>Moderate</code>. Applies to Windows patches only.</p>
                */
            MsrcSeverity?: string;
            /**
                * <p>The Microsoft Knowledge Base ID of the patch. Applies to Windows patches only.</p>
                */
            KbNumber?: string;
            /**
                * <p>The ID of the Microsoft Security Response Center (MSRC) bulletin the patch is related to.
                *    For example, <code>MS14-045</code>. Applies to Windows patches only.</p>
                */
            MsrcNumber?: string;
            /**
                * <p>The language of the patch if it's language-specific.</p>
                */
            Language?: string;
            /**
                * <p>The Advisory ID of the patch. For example, <code>RHSA-2020:3779</code>. Applies to
                *    Linux-based managed nodes only.</p>
                */
            AdvisoryIds?: string[];
            /**
                * <p>The Bugzilla ID of the patch. For example, <code>1600646</code>. Applies to Linux-based
                *    managed nodes only.</p>
                */
            BugzillaIds?: string[];
            /**
                * <p>The Common Vulnerabilities and Exposures (CVE) ID of the patch. For example,
                *     <code>CVE-2011-3192</code>. Applies to Linux-based managed nodes only.</p>
                */
            CVEIds?: string[];
            /**
                * <p>The name of the patch. Applies to Linux-based managed nodes only.</p>
                */
            Name?: string;
            /**
                * <p>The epoch of the patch. For example in
                *    <code>pkg-example-EE-20180914-2.2.amzn1.noarch</code>, the epoch value is
                *    <code>20180914-2</code>. Applies to Linux-based managed nodes only.</p>
                */
            Epoch?: number;
            /**
                * <p>The version number of the patch. For example, in
                *     <code>example-pkg-1.710.10-2.7.abcd.x86_64</code>, the version number is indicated by
                *     <code>-1</code>. Applies to Linux-based managed nodes only.</p>
                */
            Version?: string;
            /**
                * <p>The particular release of a patch. For example, in
                *     <code>pkg-example-EE-20180914-2.2.amzn1.noarch</code>, the release is <code>2.amaz1</code>.
                *    Applies to Linux-based managed nodes only.</p>
                */
            Release?: string;
            /**
                * <p>The architecture of the patch. For example, in
                *     <code>example-pkg-0.710.10-2.7.abcd.x86_64</code>, the architecture is indicated by
                *     <code>x86_64</code>. Applies to Linux-based managed nodes only.</p>
                */
            Arch?: string;
            /**
                * <p>The severity level of the patch. For example, <code>CRITICAL</code> or
                *    <code>MODERATE</code>.</p>
                */
            Severity?: string;
            /**
                * <p>The source patch repository for the operating system and version, such as
                *     <code>trusty-security</code> for Ubuntu Server 14.04 LTE and <code>focal-security</code> for
                *    Ubuntu Server 20.04 LTE. Applies to Linux-based managed nodes only.</p>
                */
            Repository?: string;
    }
    export namespace Patch {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Patch) => any;
    }
    export interface DescribeAvailablePatchesResult {
            /**
                * <p>An array of patches. Each entry in the array is a patch structure.</p>
                */
            Patches?: Patch[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeAvailablePatchesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeAvailablePatchesResult) => any;
    }
    export interface DescribeDocumentRequest {
            /**
                * <p>The name of the SSM document.</p>
                */
            Name: string | undefined;
            /**
                * <p>The document version for which you want information. Can be a specific version or the
                *    default version.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>An optional field specifying the version of the artifact associated with the document. For
                *    example, "Release 12, Update 6". This value is unique across all versions of a document, and
                *    can't be changed.</p>
                */
            VersionName?: string;
    }
    export namespace DescribeDocumentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDocumentRequest) => any;
    }
    export interface DescribeDocumentResult {
            /**
                * <p>Information about the SSM document.</p>
                */
            Document?: DocumentDescription;
    }
    export namespace DescribeDocumentResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDocumentResult) => any;
    }
    export enum DocumentPermissionType {
            SHARE = "Share"
    }
    export interface DescribeDocumentPermissionRequest {
            /**
                * <p>The name of the document for which you are the owner.</p>
                */
            Name: string | undefined;
            /**
                * <p>The permission type for the document. The permission type can be
                *    <i>Share</i>.</p>
                */
            PermissionType: DocumentPermissionType | string | undefined;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeDocumentPermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDocumentPermissionRequest) => any;
    }
    export interface DescribeDocumentPermissionResponse {
            /**
                * <p>The account IDs that have permission to use this document. The ID can be either an
                *    Amazon Web Services account or <i>All</i>.</p>
                */
            AccountIds?: string[];
            /**
                * <p>A list of Amazon Web Services accounts where the current document is shared and the version shared with
                *    each account.</p>
                */
            AccountSharingInfoList?: AccountSharingInfo[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeDocumentPermissionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDocumentPermissionResponse) => any;
    }
    /**
        * <p>The permission type isn't supported. <i>Share</i> is the only supported
        *    permission type.</p>
        */
    export class InvalidPermissionType extends __BaseException {
            readonly name: "InvalidPermissionType";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPermissionType, __BaseException>);
    }
    export interface DescribeEffectiveInstanceAssociationsRequest {
            /**
                * <p>The managed node ID for which you want to view all associations.</p>
                */
            InstanceId: string | undefined;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeEffectiveInstanceAssociationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEffectiveInstanceAssociationsRequest) => any;
    }
    /**
        * <p>One or more association documents on the managed node. </p>
        */
    export interface InstanceAssociation {
            /**
                * <p>The association ID.</p>
                */
            AssociationId?: string;
            /**
                * <p>The managed node ID.</p>
                */
            InstanceId?: string;
            /**
                * <p>The content of the association document for the managed node(s).</p>
                */
            Content?: string;
            /**
                * <p>Version information for the association on the managed node.</p>
                */
            AssociationVersion?: string;
    }
    export namespace InstanceAssociation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceAssociation) => any;
    }
    export interface DescribeEffectiveInstanceAssociationsResult {
            /**
                * <p>The associations for the requested managed node.</p>
                */
            Associations?: InstanceAssociation[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeEffectiveInstanceAssociationsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEffectiveInstanceAssociationsResult) => any;
    }
    export interface DescribeEffectivePatchesForPatchBaselineRequest {
            /**
                * <p>The ID of the patch baseline to retrieve the effective patches for.</p>
                */
            BaselineId: string | undefined;
            /**
                * <p>The maximum number of patches to return (per page).</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeEffectivePatchesForPatchBaselineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEffectivePatchesForPatchBaselineRequest) => any;
    }
    export enum PatchDeploymentStatus {
            Approved = "APPROVED",
            ExplicitApproved = "EXPLICIT_APPROVED",
            ExplicitRejected = "EXPLICIT_REJECTED",
            PendingApproval = "PENDING_APPROVAL"
    }
    /**
        * <p>Information about the approval status of a patch.</p>
        */
    export interface PatchStatus {
            /**
                * <p>The approval status of a patch.</p>
                */
            DeploymentStatus?: PatchDeploymentStatus | string;
            /**
                * <p>The compliance severity level for a patch.</p>
                */
            ComplianceLevel?: PatchComplianceLevel | string;
            /**
                * <p>The date the patch was approved (or will be approved if the status is
                *     <code>PENDING_APPROVAL</code>).</p>
                */
            ApprovalDate?: Date;
    }
    export namespace PatchStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PatchStatus) => any;
    }
    /**
        * <p>The <code>EffectivePatch</code> structure defines metadata about a patch along with the
        *    approval state of the patch in a particular patch baseline. The approval state includes
        *    information about whether the patch is currently approved, due to be approved by a rule,
        *    explicitly approved, or explicitly rejected and the date the patch was or will be
        *    approved.</p>
        */
    export interface EffectivePatch {
            /**
                * <p>Provides metadata for a patch, including information such as the KB ID, severity,
                *    classification and a URL for where more information can be obtained about the patch.</p>
                */
            Patch?: Patch;
            /**
                * <p>The status of the patch in a patch baseline. This includes information about whether the
                *    patch is currently approved, due to be approved by a rule, explicitly approved, or explicitly
                *    rejected and the date the patch was or will be approved.</p>
                */
            PatchStatus?: PatchStatus;
    }
    export namespace EffectivePatch {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EffectivePatch) => any;
    }
    export interface DescribeEffectivePatchesForPatchBaselineResult {
            /**
                * <p>An array of patches and patch status.</p>
                */
            EffectivePatches?: EffectivePatch[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeEffectivePatchesForPatchBaselineResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeEffectivePatchesForPatchBaselineResult) => any;
    }
    /**
        * <p>The operating systems you specified isn't supported, or the operation isn't supported for
        *    the operating system.</p>
        */
    export class UnsupportedOperatingSystem extends __BaseException {
            readonly name: "UnsupportedOperatingSystem";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedOperatingSystem, __BaseException>);
    }
    export interface DescribeInstanceAssociationsStatusRequest {
            /**
                * <p>The managed node IDs for which you want association status information.</p>
                */
            InstanceId: string | undefined;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeInstanceAssociationsStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInstanceAssociationsStatusRequest) => any;
    }
    /**
        * <p>A URL for the Amazon Web Services Systems Manager (Systems Manager) bucket where you want to store the
        *    results of this request.</p>
        */
    export interface S3OutputUrl {
            /**
                * <p>A URL for an S3 bucket where you want to store the results of this request.</p>
                */
            OutputUrl?: string;
    }
    export namespace S3OutputUrl {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3OutputUrl) => any;
    }
    /**
        * <p>The URL of S3 bucket where you want to store the results of this request.</p>
        */
    export interface InstanceAssociationOutputUrl {
            /**
                * <p>The URL of S3 bucket where you want to store the results of this request.</p>
                */
            S3OutputUrl?: S3OutputUrl;
    }
    export namespace InstanceAssociationOutputUrl {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceAssociationOutputUrl) => any;
    }
    /**
        * <p>Status information about the association.</p>
        */
    export interface InstanceAssociationStatusInfo {
            /**
                * <p>The association ID.</p>
                */
            AssociationId?: string;
            /**
                * <p>The name of the association.</p>
                */
            Name?: string;
            /**
                * <p>The association document versions.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The version of the association applied to the managed node.</p>
                */
            AssociationVersion?: string;
            /**
                * <p>The managed node ID where the association was created.</p>
                */
            InstanceId?: string;
            /**
                * <p>The date the association ran. </p>
                */
            ExecutionDate?: Date;
            /**
                * <p>Status information about the association.</p>
                */
            Status?: string;
            /**
                * <p>Detailed status information about the association.</p>
                */
            DetailedStatus?: string;
            /**
                * <p>Summary information about association execution.</p>
                */
            ExecutionSummary?: string;
            /**
                * <p>An error code returned by the request to create the association.</p>
                */
            ErrorCode?: string;
            /**
                * <p>A URL for an S3 bucket where you want to store the results of this request.</p>
                */
            OutputUrl?: InstanceAssociationOutputUrl;
            /**
                * <p>The name of the association applied to the managed node.</p>
                */
            AssociationName?: string;
    }
    export namespace InstanceAssociationStatusInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceAssociationStatusInfo) => any;
    }
    export interface DescribeInstanceAssociationsStatusResult {
            /**
                * <p>Status information about the association.</p>
                */
            InstanceAssociationStatusInfos?: InstanceAssociationStatusInfo[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeInstanceAssociationsStatusResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInstanceAssociationsStatusResult) => any;
    }
    /**
        * <p>The filters to describe or get information about your managed nodes.</p>
        */
    export interface InstanceInformationStringFilter {
            /**
                * <p>The filter key name to describe your managed nodes. For example:</p>
                *          <p>"InstanceIds"|"AgentVersion"|"PingStatus"|"PlatformTypes"|"ActivationIds"|"IamRole"|"ResourceType"|"AssociationStatus"|"Tag
                *    Key"</p>
                *          <important>
                *             <p>
                *                <code>Tag key</code> isn't a valid filter. You must specify either <code>tag-key</code> or
                *      <code>tag:keyname</code> and a string. Here are some valid examples: tag-key, tag:123, tag:al!,
                *     tag:Windows. Here are some <i>invalid</i> examples: tag-keys, Tag Key, tag:,
                *     tagKey, abc:keyname.</p>
                *          </important>
                */
            Key: string | undefined;
            /**
                * <p>The filter values.</p>
                */
            Values: string[] | undefined;
    }
    export namespace InstanceInformationStringFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceInformationStringFilter) => any;
    }
    export enum InstanceInformationFilterKey {
            ACTIVATION_IDS = "ActivationIds",
            AGENT_VERSION = "AgentVersion",
            ASSOCIATION_STATUS = "AssociationStatus",
            IAM_ROLE = "IamRole",
            INSTANCE_IDS = "InstanceIds",
            PING_STATUS = "PingStatus",
            PLATFORM_TYPES = "PlatformTypes",
            RESOURCE_TYPE = "ResourceType"
    }
    /**
        * <p>Describes a filter for a specific list of managed nodes. You can filter node information by
        *    using tags. You specify tags by using a key-value mapping.</p>
        *          <p>Use this operation instead of the <a>DescribeInstanceInformationRequest$InstanceInformationFilterList</a> method. The
        *     <code>InstanceInformationFilterList</code> method is a legacy method and doesn't support tags.
        *   </p>
        */
    export interface InstanceInformationFilter {
            /**
                * <p>The name of the filter. </p>
                */
            key: InstanceInformationFilterKey | string | undefined;
            /**
                * <p>The filter values.</p>
                */
            valueSet: string[] | undefined;
    }
    export namespace InstanceInformationFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceInformationFilter) => any;
    }
    export interface DescribeInstanceInformationRequest {
            /**
                * <p>This is a legacy method. We recommend that you don't use this method. Instead, use the
                *     <code>Filters</code> data type. <code>Filters</code> enables you to return node information by
                *    filtering based on tags applied to managed nodes.</p>
                *          <note>
                *             <p>Attempting to use <code>InstanceInformationFilterList</code> and <code>Filters</code> leads
                *     to an exception error. </p>
                *          </note>
                */
            InstanceInformationFilterList?: InstanceInformationFilter[];
            /**
                * <p>One or more filters. Use a filter to return a more specific list of managed nodes. You can
                *    filter based on tags applied to EC2 instances. Use this <code>Filters</code> data type instead of
                *     <code>InstanceInformationFilterList</code>, which is deprecated.</p>
                */
            Filters?: InstanceInformationStringFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results. </p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeInstanceInformationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInstanceInformationRequest) => any;
    }
    /**
        * <p>Status information about the aggregated associations.</p>
        */
    export interface InstanceAggregatedAssociationOverview {
            /**
                * <p>Detailed status information about the aggregated associations.</p>
                */
            DetailedStatus?: string;
            /**
                * <p>The number of associations for the managed node(s).</p>
                */
            InstanceAssociationStatusAggregatedCount?: Record<string, number>;
    }
    export namespace InstanceAggregatedAssociationOverview {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceAggregatedAssociationOverview) => any;
    }
    export enum PingStatus {
            CONNECTION_LOST = "ConnectionLost",
            INACTIVE = "Inactive",
            ONLINE = "Online"
    }
    export enum ResourceType {
            DOCUMENT = "Document",
            EC2_INSTANCE = "EC2Instance",
            MANAGED_INSTANCE = "ManagedInstance"
    }
    export enum SourceType {
            AWS_EC2_INSTANCE = "AWS::EC2::Instance",
            AWS_IOT_THING = "AWS::IoT::Thing",
            AWS_SSM_MANAGEDINSTANCE = "AWS::SSM::ManagedInstance"
    }
    /**
        * <p>Describes a filter for a specific list of managed nodes. </p>
        */
    export interface InstanceInformation {
            /**
                * <p>The managed node ID. </p>
                */
            InstanceId?: string;
            /**
                * <p>Connection status of SSM Agent. </p>
                *          <note>
                *             <p>The status <code>Inactive</code> has been deprecated and is no longer in use.</p>
                *          </note>
                */
            PingStatus?: PingStatus | string;
            /**
                * <p>The date and time when the agent last pinged the Systems Manager service. </p>
                */
            LastPingDateTime?: Date;
            /**
                * <p>The version of SSM Agent running on your Linux managed node. </p>
                */
            AgentVersion?: string;
            /**
                * <p>Indicates whether the latest version of SSM Agent is running on your Linux managed node. This
                *    field doesn't indicate whether or not the latest version is installed on Windows managed nodes,
                *    because some older versions of Windows Server use the EC2Config service to process Systems Manager
                *    requests.</p>
                */
            IsLatestVersion?: boolean;
            /**
                * <p>The operating system platform type. </p>
                */
            PlatformType?: PlatformType | string;
            /**
                * <p>The name of the operating system platform running on your managed node. </p>
                */
            PlatformName?: string;
            /**
                * <p>The version of the OS platform running on your managed node. </p>
                */
            PlatformVersion?: string;
            /**
                * <p>The activation ID created by Amazon Web Services Systems Manager when the server or virtual machine (VM) was
                *    registered.</p>
                */
            ActivationId?: string;
            /**
                * <p>The Identity and Access Management (IAM) role assigned to the on-premises Systems Manager
                *    managed node. This call doesn't return the IAM role for Amazon Elastic Compute Cloud
                *     (Amazon EC2) instances. To retrieve the IAM role for an EC2 instance, use
                *    the Amazon EC2 <code>DescribeInstances</code> operation. For information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html">DescribeInstances</a> in the <i>Amazon EC2 API Reference</i> or <a href="https://docs.aws.amazon.com/cli/latest/ec2/describe-instances.html">describe-instances</a> in
                *    the <i>Amazon Web Services CLI Command Reference</i>.</p>
                */
            IamRole?: string;
            /**
                * <p>The date the server or VM was registered with Amazon Web Services as a managed node.</p>
                */
            RegistrationDate?: Date;
            /**
                * <p>The type of instance. Instances are either EC2 instances or managed instances. </p>
                */
            ResourceType?: ResourceType | string;
            /**
                * <p>The name assigned to an on-premises server, edge device, or virtual machine (VM) when it is
                *    activated as a Systems Manager managed node. The name is specified as the <code>DefaultInstanceName</code>
                *    property using the <a>CreateActivation</a> command. It is applied to the managed node
                *    by specifying the Activation Code and Activation ID when you install SSM Agent on the node, as
                *    explained in <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-managed-linux.html">Install SSM Agent for a
                *     hybrid environment (Linux)</a> and <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-install-managed-win.html">Install SSM Agent for a
                *     hybrid environment (Windows)</a>. To retrieve the <code>Name</code> tag of an EC2 instance,
                *    use the Amazon EC2 <code>DescribeInstances</code> operation. For information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html">DescribeInstances</a> in the <i>Amazon EC2 API Reference</i> or <a href="https://docs.aws.amazon.com/cli/latest/ec2/describe-instances.html">describe-instances</a> in
                *    the <i>Amazon Web Services CLI Command Reference</i>.</p>
                */
            Name?: string;
            /**
                * <p>The IP address of the managed node.</p>
                */
            IPAddress?: string;
            /**
                * <p>The fully qualified host name of the managed node.</p>
                */
            ComputerName?: string;
            /**
                * <p>The status of the association.</p>
                */
            AssociationStatus?: string;
            /**
                * <p>The date the association was last run.</p>
                */
            LastAssociationExecutionDate?: Date;
            /**
                * <p>The last date the association was successfully run.</p>
                */
            LastSuccessfulAssociationExecutionDate?: Date;
            /**
                * <p>Information about the association.</p>
                */
            AssociationOverview?: InstanceAggregatedAssociationOverview;
            /**
                * <p>The ID of the source resource. For IoT Greengrass devices, <code>SourceId</code> is
                *    the Thing name. </p>
                */
            SourceId?: string;
            /**
                * <p>The type of the source resource. For IoT Greengrass devices, <code>SourceType</code>
                *    is <code>AWS::IoT::Thing</code>. </p>
                */
            SourceType?: SourceType | string;
    }
    export namespace InstanceInformation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceInformation) => any;
    }
    export interface DescribeInstanceInformationResult {
            /**
                * <p>The managed node information list.</p>
                */
            InstanceInformationList?: InstanceInformation[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty. </p>
                */
            NextToken?: string;
    }
    export namespace DescribeInstanceInformationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInstanceInformationResult) => any;
    }
    /**
        * <p>The specified filter value isn't valid.</p>
        */
    export class InvalidInstanceInformationFilterValue extends __BaseException {
            readonly name: "InvalidInstanceInformationFilterValue";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInstanceInformationFilterValue, __BaseException>);
    }
    export interface DescribeInstancePatchesRequest {
            /**
                * <p>The ID of the managed node whose patch state information should be retrieved.</p>
                */
            InstanceId: string | undefined;
            /**
                * <p>Each element in the array is a structure containing a key-value pair.</p>
                *          <p>Supported keys for <code>DescribeInstancePatches</code>include the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Classification</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>Security</code> | <code>SecurityUpdates</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>KBId</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>KB4480056</code> | <code>java-1.7.0-openjdk.x86_64</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>Severity</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>Important</code> | <code>Medium</code> | <code>Low</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>State</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>Installed</code> | <code>InstalledOther</code> |
                *       <code>InstalledPendingReboot</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Filters?: PatchOrchestratorFilter[];
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of patches to return (per page).</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeInstancePatchesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInstancePatchesRequest) => any;
    }
    export enum PatchComplianceDataState {
            Failed = "FAILED",
            Installed = "INSTALLED",
            InstalledOther = "INSTALLED_OTHER",
            InstalledPendingReboot = "INSTALLED_PENDING_REBOOT",
            InstalledRejected = "INSTALLED_REJECTED",
            Missing = "MISSING",
            NotApplicable = "NOT_APPLICABLE"
    }
    /**
        * <p>Information about the state of a patch on a particular managed node as it relates to the
        *    patch baseline used to patch the node.</p>
        */
    export interface PatchComplianceData {
            /**
                * <p>The title of the patch.</p>
                */
            Title: string | undefined;
            /**
                * <p>The operating system-specific ID of the patch.</p>
                */
            KBId: string | undefined;
            /**
                * <p>The classification of the patch, such as <code>SecurityUpdates</code>, <code>Updates</code>,
                *    and <code>CriticalUpdates</code>.</p>
                */
            Classification: string | undefined;
            /**
                * <p>The severity of the patch such as <code>Critical</code>, <code>Important</code>, and
                *     <code>Moderate</code>.</p>
                */
            Severity: string | undefined;
            /**
                * <p>The state of the patch on the managed node, such as INSTALLED or FAILED.</p>
                *          <p>For descriptions of each patch state, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-compliance-about.html#sysman-compliance-monitor-patch">About patch compliance</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            State: PatchComplianceDataState | string | undefined;
            /**
                * <p>The date/time the patch was installed on the managed node. Not all operating systems provide
                *    this level of information.</p>
                */
            InstalledTime: Date | undefined;
            /**
                * <p>The IDs of one or more Common Vulnerabilities and Exposure (CVE) issues that are resolved by
                *    the patch.</p>
                */
            CVEIds?: string;
    }
    export namespace PatchComplianceData {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PatchComplianceData) => any;
    }
    export interface DescribeInstancePatchesResult {
            /**
                * <p>Each entry in the array is a structure containing:</p>
                *          <ul>
                *             <li>
                *                <p>Title (string)</p>
                *             </li>
                *             <li>
                *                <p>KBId (string)</p>
                *             </li>
                *             <li>
                *                <p>Classification (string)</p>
                *             </li>
                *             <li>
                *                <p>Severity (string)</p>
                *             </li>
                *             <li>
                *                <p>State (string, such as "INSTALLED" or "FAILED")</p>
                *             </li>
                *             <li>
                *                <p>InstalledTime (DateTime)</p>
                *             </li>
                *             <li>
                *                <p>InstalledBy (string)</p>
                *             </li>
                *          </ul>
                */
            Patches?: PatchComplianceData[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeInstancePatchesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInstancePatchesResult) => any;
    }
    export interface DescribeInstancePatchStatesRequest {
            /**
                * <p>The ID of the managed node for which patch state information should be retrieved.</p>
                */
            InstanceIds: string[] | undefined;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of managed nodes to return (per page).</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeInstancePatchStatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInstancePatchStatesRequest) => any;
    }
    export enum PatchOperationType {
            INSTALL = "Install",
            SCAN = "Scan"
    }
    export enum RebootOption {
            NO_REBOOT = "NoReboot",
            REBOOT_IF_NEEDED = "RebootIfNeeded"
    }
    /**
        * <p>Defines the high-level patch compliance state for a managed node, providing information
        *    about the number of installed, missing, not applicable, and failed patches along with metadata
        *    about the operation when this information was gathered for the managed node.</p>
        */
    export interface InstancePatchState {
            /**
                * <p>The ID of the managed node the high-level patch compliance information was collected
                *    for.</p>
                */
            InstanceId: string | undefined;
            /**
                * <p>The name of the patch group the managed node belongs to.</p>
                */
            PatchGroup: string | undefined;
            /**
                * <p>The ID of the patch baseline used to patch the managed node.</p>
                */
            BaselineId: string | undefined;
            /**
                * <p>The ID of the patch baseline snapshot used during the patching operation when this
                *    compliance data was collected.</p>
                */
            SnapshotId?: string;
            /**
                * <p>An https URL or an Amazon Simple Storage Service (Amazon S3) path-style URL to a list of
                *    patches to be installed. This patch installation list, which you maintain in an S3 bucket in YAML
                *    format and specify in the SSM document <code>AWS-RunPatchBaseline</code>, overrides the patches
                *    specified by the default patch baseline.</p>
                *          <p>For more information about the <code>InstallOverrideList</code> parameter, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-about-aws-runpatchbaseline.html">About the
                *      <code>AWS-RunPatchBaseline</code>
                *             </a> SSM document in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            InstallOverrideList?: string;
            /**
                * <p>Placeholder information. This field will always be empty in the current release of the
                *    service.</p>
                */
            OwnerInformation?: string;
            /**
                * <p>The number of patches from the patch baseline that are installed on the managed node.</p>
                */
            InstalledCount?: number;
            /**
                * <p>The number of patches not specified in the patch baseline that are installed on the managed
                *    node.</p>
                */
            InstalledOtherCount?: number;
            /**
                * <p>The number of patches installed by Patch Manager since the last time the managed node was
                *    rebooted.</p>
                */
            InstalledPendingRebootCount?: number;
            /**
                * <p>The number of patches installed on a managed node that are specified in a
                *     <code>RejectedPatches</code> list. Patches with a status of <code>InstalledRejected</code> were
                *    typically installed before they were added to a <code>RejectedPatches</code> list.</p>
                *          <note>
                *             <p>If <code>ALLOW_AS_DEPENDENCY</code> is the specified option for
                *      <code>RejectedPatchesAction</code>, the value of <code>InstalledRejectedCount</code> will
                *     always be <code>0</code> (zero).</p>
                *          </note>
                */
            InstalledRejectedCount?: number;
            /**
                * <p>The number of patches from the patch baseline that are applicable for the managed node but
                *    aren't currently installed.</p>
                */
            MissingCount?: number;
            /**
                * <p>The number of patches from the patch baseline that were attempted to be installed during the
                *    last patching operation, but failed to install.</p>
                */
            FailedCount?: number;
            /**
                * <p>The number of patches beyond the supported limit of <code>NotApplicableCount</code> that
                *    aren't reported by name to Inventory. Inventory is a capability of Amazon Web Services Systems Manager.</p>
                */
            UnreportedNotApplicableCount?: number;
            /**
                * <p>The number of patches from the patch baseline that aren't applicable for the managed node
                *    and therefore aren't installed on the node. This number may be truncated if the list of patch
                *    names is very large. The number of patches beyond this limit are reported in
                *     <code>UnreportedNotApplicableCount</code>.</p>
                */
            NotApplicableCount?: number;
            /**
                * <p>The time the most recent patching operation was started on the managed node.</p>
                */
            OperationStartTime: Date | undefined;
            /**
                * <p>The time the most recent patching operation completed on the managed node.</p>
                */
            OperationEndTime: Date | undefined;
            /**
                * <p>The type of patching operation that was performed: or </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>SCAN</code> assesses the patch compliance state.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>INSTALL</code> installs missing patches.</p>
                *             </li>
                *          </ul>
                */
            Operation: PatchOperationType | string | undefined;
            /**
                * <p>The time of the last attempt to patch the managed node with <code>NoReboot</code> specified
                *    as the reboot option.</p>
                */
            LastNoRebootInstallOperationTime?: Date;
            /**
                * <p>Indicates the reboot option specified in the patch baseline.</p>
                *          <note>
                *             <p>Reboot options apply to <code>Install</code> operations only. Reboots aren't attempted for
                *     Patch Manager <code>Scan</code> operations.</p>
                *          </note>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>RebootIfNeeded</code>: Patch Manager tries to reboot the managed node if it
                *      installed any patches, or if any patches are detected with a status of
                *       <code>InstalledPendingReboot</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NoReboot</code>: Patch Manager attempts to install missing packages without trying
                *      to reboot the system. Patches installed with this option are assigned a status of
                *       <code>InstalledPendingReboot</code>. These patches might not be in effect until a reboot is
                *      performed.</p>
                *             </li>
                *          </ul>
                */
            RebootOption?: RebootOption | string;
            /**
                * <p>The number of managed nodes where patches that are specified as <code>Critical</code> for
                *    compliance reporting in the patch baseline aren't installed. These patches might be missing, have
                *    failed installation, were rejected, or were installed but awaiting a required managed node
                *    reboot. The status of these managed nodes is <code>NON_COMPLIANT</code>.</p>
                */
            CriticalNonCompliantCount?: number;
            /**
                * <p>The number of managed nodes where patches that are specified as <code>Security</code> in a
                *    patch advisory aren't installed. These patches might be missing, have failed installation, were
                *    rejected, or were installed but awaiting a required managed node reboot. The status of these
                *    managed nodes is <code>NON_COMPLIANT</code>.</p>
                */
            SecurityNonCompliantCount?: number;
            /**
                * <p>The number of managed nodes with patches installed that are specified as other than
                *     <code>Critical</code> or <code>Security</code> but aren't compliant with the patch baseline. The
                *    status of these managed nodes is <code>NON_COMPLIANT</code>.</p>
                */
            OtherNonCompliantCount?: number;
    }
    export namespace InstancePatchState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstancePatchState) => any;
    }
    export interface DescribeInstancePatchStatesResult {
            /**
                * <p>The high-level patch state for the requested managed nodes.</p>
                */
            InstancePatchStates?: InstancePatchState[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeInstancePatchStatesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInstancePatchStatesResult) => any;
    }
    export enum InstancePatchStateOperatorType {
            EQUAL = "Equal",
            GREATER_THAN = "GreaterThan",
            LESS_THAN = "LessThan",
            NOT_EQUAL = "NotEqual"
    }
    /**
        * <p>Defines a filter used in <a>DescribeInstancePatchStatesForPatchGroup</a> to scope
        *    down the information returned by the API.</p>
        *          <p>
        *             <b>Example</b>: To filter for all managed nodes in a patch group
        *    having more than three patches with a <code>FailedCount</code> status, use the following for the
        *    filter:</p>
        *          <ul>
        *             <li>
        *                <p>Value for <code>Key</code>: <code>FailedCount</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>Value for <code>Type</code>: <code>GreaterThan</code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>Value for <code>Values</code>: <code>3</code>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface InstancePatchStateFilter {
            /**
                * <p>The key for the filter. Supported values include the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>InstalledCount</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>InstalledOtherCount</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>InstalledPendingRebootCount</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>InstalledRejectedCount</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MissingCount</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>FailedCount</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>UnreportedNotApplicableCount</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>NotApplicableCount</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Key: string | undefined;
            /**
                * <p>The value for the filter. Must be an integer greater than or equal to 0.</p>
                */
            Values: string[] | undefined;
            /**
                * <p>The type of comparison that should be performed for the value.</p>
                */
            Type: InstancePatchStateOperatorType | string | undefined;
    }
    export namespace InstancePatchStateFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstancePatchStateFilter) => any;
    }
    export interface DescribeInstancePatchStatesForPatchGroupRequest {
            /**
                * <p>The name of the patch group for which the patch state information should be
                *    retrieved.</p>
                */
            PatchGroup: string | undefined;
            /**
                * <p>Each entry in the array is a structure containing:</p>
                *          <ul>
                *             <li>
                *                <p>Key (string between 1 and 200 characters)</p>
                *             </li>
                *             <li>
                *                <p>Values (array containing a single string)</p>
                *             </li>
                *             <li>
                *                <p>Type (string "Equal", "NotEqual", "LessThan", "GreaterThan")</p>
                *             </li>
                *          </ul>
                */
            Filters?: InstancePatchStateFilter[];
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of patches to return (per page).</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeInstancePatchStatesForPatchGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInstancePatchStatesForPatchGroupRequest) => any;
    }
    export interface DescribeInstancePatchStatesForPatchGroupResult {
            /**
                * <p>The high-level patch state for the requested managed nodes. </p>
                */
            InstancePatchStates?: InstancePatchState[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeInstancePatchStatesForPatchGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInstancePatchStatesForPatchGroupResult) => any;
    }
    export interface DescribeInventoryDeletionsRequest {
            /**
                * <p>Specify the delete inventory ID for which you want information. This ID was returned by the
                *     <code>DeleteInventory</code> operation.</p>
                */
            DeletionId?: string;
            /**
                * <p>A token to start the list. Use this token to get the next set of results. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
    }
    export namespace DescribeInventoryDeletionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInventoryDeletionsRequest) => any;
    }
    export enum InventoryDeletionStatus {
            COMPLETE = "Complete",
            IN_PROGRESS = "InProgress"
    }
    /**
        * <p>Status information returned by the <code>DeleteInventory</code> operation.</p>
        */
    export interface InventoryDeletionStatusItem {
            /**
                * <p>The deletion ID returned by the <code>DeleteInventory</code> operation.</p>
                */
            DeletionId?: string;
            /**
                * <p>The name of the inventory data type.</p>
                */
            TypeName?: string;
            /**
                * <p>The UTC timestamp when the delete operation started.</p>
                */
            DeletionStartTime?: Date;
            /**
                * <p>The status of the operation. Possible values are InProgress and Complete.</p>
                */
            LastStatus?: InventoryDeletionStatus | string;
            /**
                * <p>Information about the status.</p>
                */
            LastStatusMessage?: string;
            /**
                * <p>Information about the delete operation. For more information about this summary, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-custom.html#sysman-inventory-delete">Understanding the delete inventory summary</a> in the
                *    <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            DeletionSummary?: InventoryDeletionSummary;
            /**
                * <p>The UTC timestamp of when the last status report.</p>
                */
            LastStatusUpdateTime?: Date;
    }
    export namespace InventoryDeletionStatusItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InventoryDeletionStatusItem) => any;
    }
    export interface DescribeInventoryDeletionsResult {
            /**
                * <p>A list of status items for deleted inventory.</p>
                */
            InventoryDeletions?: InventoryDeletionStatusItem[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeInventoryDeletionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeInventoryDeletionsResult) => any;
    }
    /**
        * <p>The ID specified for the delete operation doesn't exist or isn't valid. Verify the ID and
        *    try again.</p>
        */
    export class InvalidDeletionIdException extends __BaseException {
            readonly name: "InvalidDeletionIdException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDeletionIdException, __BaseException>);
    }
    /**
        * <p>Filter used in the request. Supported filter keys depend on the API operation that includes
        *    the filter. API operations that use <code>MaintenanceWindowFilter></code> include the
        *    following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>DescribeMaintenanceWindowExecutions</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DescribeMaintenanceWindowExecutionTaskInvocations</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DescribeMaintenanceWindowExecutionTasks</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DescribeMaintenanceWindows</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DescribeMaintenanceWindowTargets</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>DescribeMaintenanceWindowTasks</a>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface MaintenanceWindowFilter {
            /**
                * <p>The name of the filter.</p>
                */
            Key?: string;
            /**
                * <p>The filter values.</p>
                */
            Values?: string[];
    }
    export namespace MaintenanceWindowFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaintenanceWindowFilter) => any;
    }
    export interface DescribeMaintenanceWindowExecutionsRequest {
            /**
                * <p>The ID of the maintenance window whose executions should be retrieved.</p>
                */
            WindowId: string | undefined;
            /**
                * <p>Each entry in the array is a structure containing:</p>
                *          <ul>
                *             <li>
                *                <p>Key. A string between 1 and 128 characters. Supported keys include
                *       <code>ExecutedBefore</code> and <code>ExecutedAfter</code>.</p>
                *             </li>
                *             <li>
                *                <p>Values. An array of strings, each between 1 and 256 characters. Supported values are
                *      date/time strings in a valid ISO 8601 date/time format, such as
                *       <code>2021-11-04T05:00:00Z</code>.</p>
                *             </li>
                *          </ul>
                */
            Filters?: MaintenanceWindowFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowExecutionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowExecutionsRequest) => any;
    }
    export enum MaintenanceWindowExecutionStatus {
            Cancelled = "CANCELLED",
            Cancelling = "CANCELLING",
            Failed = "FAILED",
            InProgress = "IN_PROGRESS",
            Pending = "PENDING",
            SkippedOverlapping = "SKIPPED_OVERLAPPING",
            Success = "SUCCESS",
            TimedOut = "TIMED_OUT"
    }
    /**
        * <p>Describes the information about an execution of a maintenance window. </p>
        */
    export interface MaintenanceWindowExecution {
            /**
                * <p>The ID of the maintenance window.</p>
                */
            WindowId?: string;
            /**
                * <p>The ID of the maintenance window execution.</p>
                */
            WindowExecutionId?: string;
            /**
                * <p>The status of the execution.</p>
                */
            Status?: MaintenanceWindowExecutionStatus | string;
            /**
                * <p>The details explaining the status. Not available for all status values.</p>
                */
            StatusDetails?: string;
            /**
                * <p>The time the execution started.</p>
                */
            StartTime?: Date;
            /**
                * <p>The time the execution finished.</p>
                */
            EndTime?: Date;
    }
    export namespace MaintenanceWindowExecution {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaintenanceWindowExecution) => any;
    }
    export interface DescribeMaintenanceWindowExecutionsResult {
            /**
                * <p>Information about the maintenance window executions.</p>
                */
            WindowExecutions?: MaintenanceWindowExecution[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowExecutionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowExecutionsResult) => any;
    }
    export interface DescribeMaintenanceWindowExecutionTaskInvocationsRequest {
            /**
                * <p>The ID of the maintenance window execution the task is part of.</p>
                */
            WindowExecutionId: string | undefined;
            /**
                * <p>The ID of the specific task in the maintenance window task that should be retrieved.</p>
                */
            TaskId: string | undefined;
            /**
                * <p>Optional filters used to scope down the returned task invocations. The supported filter key
                *    is <code>STATUS</code> with the corresponding values <code>PENDING</code>,
                *     <code>IN_PROGRESS</code>, <code>SUCCESS</code>, <code>FAILED</code>, <code>TIMED_OUT</code>,
                *     <code>CANCELLING</code>, and <code>CANCELLED</code>.</p>
                */
            Filters?: MaintenanceWindowFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowExecutionTaskInvocationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowExecutionTaskInvocationsRequest) => any;
    }
    export enum MaintenanceWindowTaskType {
            Automation = "AUTOMATION",
            Lambda = "LAMBDA",
            RunCommand = "RUN_COMMAND",
            StepFunctions = "STEP_FUNCTIONS"
    }
    /**
        * <p>Describes the information about a task invocation for a particular target as part of a task
        *    execution performed as part of a maintenance window execution.</p>
        */
    export interface MaintenanceWindowExecutionTaskInvocationIdentity {
            /**
                * <p>The ID of the maintenance window execution that ran the task.</p>
                */
            WindowExecutionId?: string;
            /**
                * <p>The ID of the specific task execution in the maintenance window execution.</p>
                */
            TaskExecutionId?: string;
            /**
                * <p>The ID of the task invocation.</p>
                */
            InvocationId?: string;
            /**
                * <p>The ID of the action performed in the service that actually handled the task invocation. If
                *    the task type is <code>RUN_COMMAND</code>, this value is the command ID.</p>
                */
            ExecutionId?: string;
            /**
                * <p>The task type.</p>
                */
            TaskType?: MaintenanceWindowTaskType | string;
            /**
                * <p>The parameters that were provided for the invocation when it was run.</p>
                */
            Parameters?: string;
            /**
                * <p>The status of the task invocation.</p>
                */
            Status?: MaintenanceWindowExecutionStatus | string;
            /**
                * <p>The details explaining the status of the task invocation. Not available for all status
                *    values. </p>
                */
            StatusDetails?: string;
            /**
                * <p>The time the invocation started.</p>
                */
            StartTime?: Date;
            /**
                * <p>The time the invocation finished.</p>
                */
            EndTime?: Date;
            /**
                * <p>User-provided value that was specified when the target was registered with the maintenance
                *    window. This was also included in any Amazon CloudWatch Events events raised during the task
                *    invocation.</p>
                */
            OwnerInformation?: string;
            /**
                * <p>The ID of the target definition in this maintenance window the invocation was performed
                *    for.</p>
                */
            WindowTargetId?: string;
    }
    export namespace MaintenanceWindowExecutionTaskInvocationIdentity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaintenanceWindowExecutionTaskInvocationIdentity) => any;
    }
    export interface DescribeMaintenanceWindowExecutionTaskInvocationsResult {
            /**
                * <p>Information about the task invocation results per invocation.</p>
                */
            WindowExecutionTaskInvocationIdentities?: MaintenanceWindowExecutionTaskInvocationIdentity[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowExecutionTaskInvocationsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowExecutionTaskInvocationsResult) => any;
    }
    export interface DescribeMaintenanceWindowExecutionTasksRequest {
            /**
                * <p>The ID of the maintenance window execution whose task executions should be retrieved.</p>
                */
            WindowExecutionId: string | undefined;
            /**
                * <p>Optional filters used to scope down the returned tasks. The supported filter key is
                *     <code>STATUS</code> with the corresponding values <code>PENDING</code>,
                *    <code>IN_PROGRESS</code>, <code>SUCCESS</code>, <code>FAILED</code>, <code>TIMED_OUT</code>,
                *     <code>CANCELLING</code>, and <code>CANCELLED</code>.</p>
                */
            Filters?: MaintenanceWindowFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowExecutionTasksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowExecutionTasksRequest) => any;
    }
    /**
        * <p>Information about a task execution performed as part of a maintenance window
        *    execution.</p>
        */
    export interface MaintenanceWindowExecutionTaskIdentity {
            /**
                * <p>The ID of the maintenance window execution that ran the task.</p>
                */
            WindowExecutionId?: string;
            /**
                * <p>The ID of the specific task execution in the maintenance window execution.</p>
                */
            TaskExecutionId?: string;
            /**
                * <p>The status of the task execution.</p>
                */
            Status?: MaintenanceWindowExecutionStatus | string;
            /**
                * <p>The details explaining the status of the task execution. Not available for all status
                *    values.</p>
                */
            StatusDetails?: string;
            /**
                * <p>The time the task execution started.</p>
                */
            StartTime?: Date;
            /**
                * <p>The time the task execution finished.</p>
                */
            EndTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the task that ran.</p>
                */
            TaskArn?: string;
            /**
                * <p>The type of task that ran.</p>
                */
            TaskType?: MaintenanceWindowTaskType | string;
    }
    export namespace MaintenanceWindowExecutionTaskIdentity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaintenanceWindowExecutionTaskIdentity) => any;
    }
    export interface DescribeMaintenanceWindowExecutionTasksResult {
            /**
                * <p>Information about the task executions.</p>
                */
            WindowExecutionTaskIdentities?: MaintenanceWindowExecutionTaskIdentity[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowExecutionTasksResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowExecutionTasksResult) => any;
    }
    export interface DescribeMaintenanceWindowsRequest {
            /**
                * <p>Optional filters used to narrow down the scope of the returned maintenance windows.
                *    Supported filter keys are <code>Name</code> and <code>Enabled</code>. For example,
                *     <code>Name=MyMaintenanceWindow</code> and <code>Enabled=True</code>.</p>
                */
            Filters?: MaintenanceWindowFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowsRequest) => any;
    }
    /**
        * <p>Information about the maintenance window.</p>
        */
    export interface MaintenanceWindowIdentity {
            /**
                * <p>The ID of the maintenance window.</p>
                */
            WindowId?: string;
            /**
                * <p>The name of the maintenance window.</p>
                */
            Name?: string;
            /**
                * <p>A description of the maintenance window.</p>
                */
            Description?: string;
            /**
                * <p>Indicates whether the maintenance window is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The duration of the maintenance window in hours.</p>
                */
            Duration?: number;
            /**
                * <p>The number of hours before the end of the maintenance window that Amazon Web Services Systems Manager stops scheduling
                *    new tasks for execution.</p>
                */
            Cutoff?: number;
            /**
                * <p>The schedule of the maintenance window in the form of a cron or rate expression.</p>
                */
            Schedule?: string;
            /**
                * <p>The time zone that the scheduled maintenance window executions are based on, in Internet
                *    Assigned Numbers Authority (IANA) format.</p>
                */
            ScheduleTimezone?: string;
            /**
                * <p>The number of days to wait to run a maintenance window after the scheduled cron expression
                *    date and time.</p>
                */
            ScheduleOffset?: number;
            /**
                * <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled
                *    to become inactive.</p>
                */
            EndDate?: string;
            /**
                * <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled
                *    to become active.</p>
                */
            StartDate?: string;
            /**
                * <p>The next time the maintenance window will actually run, taking into account any specified
                *    times for the maintenance window to become active or inactive.</p>
                */
            NextExecutionTime?: string;
    }
    export namespace MaintenanceWindowIdentity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaintenanceWindowIdentity) => any;
    }
    export interface DescribeMaintenanceWindowsResult {
            /**
                * <p>Information about the maintenance windows.</p>
                */
            WindowIdentities?: MaintenanceWindowIdentity[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowsResult) => any;
    }
    export enum MaintenanceWindowResourceType {
            Instance = "INSTANCE",
            ResourceGroup = "RESOURCE_GROUP"
    }
    export interface DescribeMaintenanceWindowScheduleRequest {
            /**
                * <p>The ID of the maintenance window to retrieve information about.</p>
                */
            WindowId?: string;
            /**
                * <p>The managed node ID or key-value pair to retrieve information about.</p>
                */
            Targets?: Target[];
            /**
                * <p>The type of resource you want to retrieve information about. For example,
                *     <code>INSTANCE</code>.</p>
                */
            ResourceType?: MaintenanceWindowResourceType | string;
            /**
                * <p>Filters used to limit the range of results. For example, you can limit maintenance window
                *    executions to only those scheduled before or after a certain date and time.</p>
                */
            Filters?: PatchOrchestratorFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowScheduleRequest) => any;
    }
    /**
        * <p>Information about a scheduled execution for a maintenance window.</p>
        */
    export interface ScheduledWindowExecution {
            /**
                * <p>The ID of the maintenance window to be run.</p>
                */
            WindowId?: string;
            /**
                * <p>The name of the maintenance window to be run.</p>
                */
            Name?: string;
            /**
                * <p>The time, in ISO-8601 Extended format, that the maintenance window is scheduled to be
                *    run.</p>
                */
            ExecutionTime?: string;
    }
    export namespace ScheduledWindowExecution {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ScheduledWindowExecution) => any;
    }
    export interface DescribeMaintenanceWindowScheduleResult {
            /**
                * <p>Information about maintenance window executions scheduled for the specified time
                *    range.</p>
                */
            ScheduledWindowExecutions?: ScheduledWindowExecution[];
            /**
                * <p>The token for the next set of items to return. (You use this token in the next call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowScheduleResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowScheduleResult) => any;
    }
    export interface DescribeMaintenanceWindowsForTargetRequest {
            /**
                * <p>The managed node ID or key-value pair to retrieve information about.</p>
                */
            Targets: Target[] | undefined;
            /**
                * <p>The type of resource you want to retrieve information about. For example,
                *     <code>INSTANCE</code>.</p>
                */
            ResourceType: MaintenanceWindowResourceType | string | undefined;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowsForTargetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowsForTargetRequest) => any;
    }
    /**
        * <p>The maintenance window to which the specified target belongs.</p>
        */
    export interface MaintenanceWindowIdentityForTarget {
            /**
                * <p>The ID of the maintenance window.</p>
                */
            WindowId?: string;
            /**
                * <p>The name of the maintenance window.</p>
                */
            Name?: string;
    }
    export namespace MaintenanceWindowIdentityForTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaintenanceWindowIdentityForTarget) => any;
    }
    export interface DescribeMaintenanceWindowsForTargetResult {
            /**
                * <p>Information about the maintenance window targets and tasks a managed node is associated
                *    with.</p>
                */
            WindowIdentities?: MaintenanceWindowIdentityForTarget[];
            /**
                * <p>The token for the next set of items to return. (You use this token in the next call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowsForTargetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowsForTargetResult) => any;
    }
    export interface DescribeMaintenanceWindowTargetsRequest {
            /**
                * <p>The ID of the maintenance window whose targets should be retrieved.</p>
                */
            WindowId: string | undefined;
            /**
                * <p>Optional filters that can be used to narrow down the scope of the returned window targets.
                *    The supported filter keys are <code>Type</code>, <code>WindowTargetId</code>, and
                *     <code>OwnerInformation</code>.</p>
                */
            Filters?: MaintenanceWindowFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowTargetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowTargetsRequest) => any;
    }
    /**
        * <p>The target registered with the maintenance window.</p>
        */
    export interface MaintenanceWindowTarget {
            /**
                * <p>The ID of the maintenance window to register the target with.</p>
                */
            WindowId?: string;
            /**
                * <p>The ID of the target.</p>
                */
            WindowTargetId?: string;
            /**
                * <p>The type of target that is being registered with the maintenance window.</p>
                */
            ResourceType?: MaintenanceWindowResourceType | string;
            /**
                * <p>The targets, either managed nodes or tags.</p>
                *          <p>Specify managed nodes using the following format:</p>
                *          <p>
                *             <code>Key=instanceids,Values=<instanceid1>,<instanceid2></code>
                *          </p>
                *          <p>Tags are specified using the following format:</p>
                *          <p>
                *             <code>Key=<tag name>,Values=<tag value></code>.</p>
                */
            Targets?: Target[];
            /**
                * <p>A user-provided value that will be included in any Amazon CloudWatch Events events that are
                *    raised while running tasks for these targets in this maintenance window.</p>
                */
            OwnerInformation?: string;
            /**
                * <p>The name for the maintenance window target.</p>
                */
            Name?: string;
            /**
                * <p>A description for the target.</p>
                */
            Description?: string;
    }
    export namespace MaintenanceWindowTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaintenanceWindowTarget) => any;
    }
    export interface DescribeMaintenanceWindowTargetsResult {
            /**
                * <p>Information about the targets in the maintenance window.</p>
                */
            Targets?: MaintenanceWindowTarget[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowTargetsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowTargetsResult) => any;
    }
    export interface DescribeMaintenanceWindowTasksRequest {
            /**
                * <p>The ID of the maintenance window whose tasks should be retrieved.</p>
                */
            WindowId: string | undefined;
            /**
                * <p>Optional filters used to narrow down the scope of the returned tasks. The supported filter
                *    keys are <code>WindowTaskId</code>, <code>TaskArn</code>, <code>Priority</code>, and
                *     <code>TaskType</code>.</p>
                */
            Filters?: MaintenanceWindowFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowTasksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowTasksRequest) => any;
    }
    export enum MaintenanceWindowTaskCutoffBehavior {
            CancelTask = "CANCEL_TASK",
            ContinueTask = "CONTINUE_TASK"
    }
    /**
        * <p>Information about an Amazon Simple Storage Service (Amazon S3) bucket to write managed
        *    node-level logs to.</p>
        *          <note>
        *             <p>
        *                <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the
        *       <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure.
        *       For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance
        *       window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
        *          </note>
        */
    export interface LoggingInfo {
            /**
                * <p>The name of an S3 bucket where execution logs are stored .</p>
                */
            S3BucketName: string | undefined;
            /**
                * <p>(Optional) The S3 bucket subfolder. </p>
                */
            S3KeyPrefix?: string;
            /**
                * <p>The Amazon Web Services Region where the S3 bucket is located.</p>
                */
            S3Region: string | undefined;
    }
    export namespace LoggingInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoggingInfo) => any;
    }
    /**
        * <p>Defines the values for a task parameter.</p>
        */
    export interface MaintenanceWindowTaskParameterValueExpression {
            /**
                * <p>This field contains an array of 0 or more strings, each 1 to 255 characters in
                *    length.</p>
                */
            Values?: string[];
    }
    export namespace MaintenanceWindowTaskParameterValueExpression {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaintenanceWindowTaskParameterValueExpression) => any;
    }
    /**
        * <p>Information about a task defined for a maintenance window.</p>
        */
    export interface MaintenanceWindowTask {
            /**
                * <p>The ID of the maintenance window where the task is registered.</p>
                */
            WindowId?: string;
            /**
                * <p>The task ID.</p>
                */
            WindowTaskId?: string;
            /**
                * <p>The resource that the task uses during execution. For <code>RUN_COMMAND</code> and
                *     <code>AUTOMATION</code> task types, <code>TaskArn</code> is the Amazon Web Services Systems Manager (SSM document) name or
                *    ARN. For <code>LAMBDA</code> tasks, it's the function name or ARN. For
                *     <code>STEP_FUNCTIONS</code> tasks, it's the state machine ARN.</p>
                */
            TaskArn?: string;
            /**
                * <p>The type of task.</p>
                */
            Type?: MaintenanceWindowTaskType | string;
            /**
                * <p>The targets (either managed nodes or tags). Managed nodes are specified using
                *     <code>Key=instanceids,Values=<instanceid1>,<instanceid2></code>. Tags are specified
                *    using <code>Key=<tag name>,Values=<tag value></code>.</p>
                */
            Targets?: Target[];
            /**
                * <p>The parameters that should be passed to the task when it is run.</p>
                *          <note>
                *             <p>
                *                <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs,
                *       instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information
                *       about how Systems Manager handles these options for the supported maintenance window task
                *       types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
                *          </note>
                */
            TaskParameters?: Record<string, MaintenanceWindowTaskParameterValueExpression>;
            /**
                * <p>The priority of the task in the maintenance window. The lower the number, the higher the
                *    priority. Tasks that have the same priority are scheduled in parallel.</p>
                */
            Priority?: number;
            /**
                * <p>Information about an S3 bucket to write task-level logs to.</p>
                *          <note>
                *             <p>
                *                <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the
                *       <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure.
                *       For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance
                *       window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
                *          </note>
                */
            LoggingInfo?: LoggingInfo;
            /**
                * <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service
                * (Amazon SNS) notifications for maintenance window Run Command tasks.</p>
                */
            ServiceRoleArn?: string;
            /**
                * <p>The maximum number of targets this task can be run for, in parallel.</p>
                *          <note>
                *             <p>Although this element is listed as "Required: No", a value can be omitted only when you are
                *     registering or updating a <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">targetless
                *      task</a> You must provide a value in all other cases.</p>
                *             <p>For maintenance window tasks without a target specified, you can't supply a value for this
                *     option. Instead, the system inserts a placeholder value of <code>1</code>. This value doesn't
                *     affect the running of your task.</p>
                *          </note>
                */
            MaxConcurrency?: string;
            /**
                * <p>The maximum number of errors allowed before this task stops being scheduled.</p>
                *          <note>
                *             <p>Although this element is listed as "Required: No", a value can be omitted only when you are
                *     registering or updating a <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">targetless
                *      task</a> You must provide a value in all other cases.</p>
                *             <p>For maintenance window tasks without a target specified, you can't supply a value for this
                *     option. Instead, the system inserts a placeholder value of <code>1</code>. This value doesn't
                *     affect the running of your task.</p>
                *          </note>
                */
            MaxErrors?: string;
            /**
                * <p>The task name.</p>
                */
            Name?: string;
            /**
                * <p>A description of the task.</p>
                */
            Description?: string;
            /**
                * <p>The specification for whether tasks should continue to run after the cutoff time specified
                *    in the maintenance windows is reached. </p>
                */
            CutoffBehavior?: MaintenanceWindowTaskCutoffBehavior | string;
    }
    export namespace MaintenanceWindowTask {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaintenanceWindowTask) => any;
    }
    export interface DescribeMaintenanceWindowTasksResult {
            /**
                * <p>Information about the tasks in the maintenance window.</p>
                */
            Tasks?: MaintenanceWindowTask[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeMaintenanceWindowTasksResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeMaintenanceWindowTasksResult) => any;
    }
    export enum OpsItemFilterKey {
            ACTUAL_END_TIME = "ActualEndTime",
            ACTUAL_START_TIME = "ActualStartTime",
            AUTOMATION_ID = "AutomationId",
            CATEGORY = "Category",
            CHANGE_REQUEST_APPROVER_ARN = "ChangeRequestByApproverArn",
            CHANGE_REQUEST_APPROVER_NAME = "ChangeRequestByApproverName",
            CHANGE_REQUEST_REQUESTER_ARN = "ChangeRequestByRequesterArn",
            CHANGE_REQUEST_REQUESTER_NAME = "ChangeRequestByRequesterName",
            CHANGE_REQUEST_TARGETS_RESOURCE_GROUP = "ChangeRequestByTargetsResourceGroup",
            CHANGE_REQUEST_TEMPLATE = "ChangeRequestByTemplate",
            CREATED_BY = "CreatedBy",
            CREATED_TIME = "CreatedTime",
            INSIGHT_TYPE = "InsightByType",
            LAST_MODIFIED_TIME = "LastModifiedTime",
            OPERATIONAL_DATA = "OperationalData",
            OPERATIONAL_DATA_KEY = "OperationalDataKey",
            OPERATIONAL_DATA_VALUE = "OperationalDataValue",
            OPSITEM_ID = "OpsItemId",
            OPSITEM_TYPE = "OpsItemType",
            PLANNED_END_TIME = "PlannedEndTime",
            PLANNED_START_TIME = "PlannedStartTime",
            PRIORITY = "Priority",
            RESOURCE_ID = "ResourceId",
            SEVERITY = "Severity",
            SOURCE = "Source",
            STATUS = "Status",
            TITLE = "Title"
    }
    export enum OpsItemFilterOperator {
            CONTAINS = "Contains",
            EQUAL = "Equal",
            GREATER_THAN = "GreaterThan",
            LESS_THAN = "LessThan"
    }
    /**
        * <p>Describes an OpsItem filter.</p>
        */
    export interface OpsItemFilter {
            /**
                * <p>The name of the filter.</p>
                */
            Key: OpsItemFilterKey | string | undefined;
            /**
                * <p>The filter value.</p>
                */
            Values: string[] | undefined;
            /**
                * <p>The operator used by the filter call.</p>
                */
            Operator: OpsItemFilterOperator | string | undefined;
    }
    export namespace OpsItemFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsItemFilter) => any;
    }
    export interface DescribeOpsItemsRequest {
            /**
                * <p>One or more filters to limit the response.</p>
                *          <ul>
                *             <li>
                *                <p>Key: CreatedTime</p>
                *                <p>Operations: GreaterThan, LessThan</p>
                *             </li>
                *             <li>
                *                <p>Key: LastModifiedBy</p>
                *                <p>Operations: Contains, Equals</p>
                *             </li>
                *             <li>
                *                <p>Key: LastModifiedTime</p>
                *                <p>Operations: GreaterThan, LessThan</p>
                *             </li>
                *             <li>
                *                <p>Key: Priority</p>
                *                <p>Operations: Equals</p>
                *             </li>
                *             <li>
                *                <p>Key: Source</p>
                *                <p>Operations: Contains, Equals</p>
                *             </li>
                *             <li>
                *                <p>Key: Status</p>
                *                <p>Operations: Equals</p>
                *             </li>
                *             <li>
                *                <p>Key: Title*</p>
                *                <p>Operations: Equals,Contains</p>
                *             </li>
                *             <li>
                *                <p>Key: OperationalData**</p>
                *                <p>Operations: Equals</p>
                *             </li>
                *             <li>
                *                <p>Key: OperationalDataKey</p>
                *                <p>Operations: Equals</p>
                *             </li>
                *             <li>
                *                <p>Key: OperationalDataValue</p>
                *                <p>Operations: Equals, Contains</p>
                *             </li>
                *             <li>
                *                <p>Key: OpsItemId</p>
                *                <p>Operations: Equals</p>
                *             </li>
                *             <li>
                *                <p>Key: ResourceId</p>
                *                <p>Operations: Contains</p>
                *             </li>
                *             <li>
                *                <p>Key: AutomationId</p>
                *                <p>Operations: Equals</p>
                *             </li>
                *          </ul>
                *          <p>*The Equals operator for Title matches the first 100 characters. If you specify more than
                *    100 characters, they system returns an error that the filter value exceeds the length
                *    limit.</p>
                *          <p>**If you filter the response by using the OperationalData operator, specify a key-value pair
                *    by using the following JSON format: {"key":"key_name","value":"a_value"}</p>
                */
            OpsItemFilters?: OpsItemFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeOpsItemsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOpsItemsRequest) => any;
    }
    export enum OpsItemStatus {
            APPROVED = "Approved",
            CANCELLED = "Cancelled",
            CANCELLING = "Cancelling",
            CHANGE_CALENDAR_OVERRIDE_APPROVED = "ChangeCalendarOverrideApproved",
            CHANGE_CALENDAR_OVERRIDE_REJECTED = "ChangeCalendarOverrideRejected",
            CLOSED = "Closed",
            COMPLETED_WITH_FAILURE = "CompletedWithFailure",
            COMPLETED_WITH_SUCCESS = "CompletedWithSuccess",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            OPEN = "Open",
            PENDING = "Pending",
            PENDING_APPROVAL = "PendingApproval",
            PENDING_CHANGE_CALENDAR_OVERRIDE = "PendingChangeCalendarOverride",
            REJECTED = "Rejected",
            RESOLVED = "Resolved",
            RUNBOOK_IN_PROGRESS = "RunbookInProgress",
            SCHEDULED = "Scheduled",
            TIMED_OUT = "TimedOut"
    }
    /**
        * <p>A count of OpsItems.</p>
        */
    export interface OpsItemSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM entity that created the
                *    OpsItem.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The date and time the OpsItem was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM entity that created the
                *    OpsItem.</p>
                */
            LastModifiedBy?: string;
            /**
                * <p>The date and time the OpsItem was last updated.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The importance of this OpsItem in relation to other OpsItems in the system.</p>
                */
            Priority?: number;
            /**
                * <p>The impacted Amazon Web Services resource.</p>
                */
            Source?: string;
            /**
                * <p>The OpsItem status. Status can be <code>Open</code>, <code>In Progress</code>, or
                *     <code>Resolved</code>.</p>
                */
            Status?: OpsItemStatus | string;
            /**
                * <p>The ID of the OpsItem.</p>
                */
            OpsItemId?: string;
            /**
                * <p>A short heading that describes the nature of the OpsItem and the impacted resource.</p>
                */
            Title?: string;
            /**
                * <p>Operational data is custom data that provides useful reference details about the OpsItem.
                *   </p>
                */
            OperationalData?: Record<string, OpsItemDataValue>;
            /**
                * <p>A list of OpsItems by category.</p>
                */
            Category?: string;
            /**
                * <p>A list of OpsItems by severity.</p>
                */
            Severity?: string;
            /**
                * <p>The type of OpsItem. Currently, the only valid values are <code>/aws/changerequest</code>
                *    and <code>/aws/issue</code>.</p>
                */
            OpsItemType?: string;
            /**
                * <p>The time a runbook workflow started. Currently reported only for the OpsItem type
                *     <code>/aws/changerequest</code>.</p>
                */
            ActualStartTime?: Date;
            /**
                * <p>The time a runbook workflow ended. Currently reported only for the OpsItem type
                *     <code>/aws/changerequest</code>.</p>
                */
            ActualEndTime?: Date;
            /**
                * <p>The time specified in a change request for a runbook workflow to start. Currently supported
                *    only for the OpsItem type <code>/aws/changerequest</code>.</p>
                */
            PlannedStartTime?: Date;
            /**
                * <p>The time specified in a change request for a runbook workflow to end. Currently supported
                *    only for the OpsItem type <code>/aws/changerequest</code>.</p>
                */
            PlannedEndTime?: Date;
    }
    export namespace OpsItemSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsItemSummary) => any;
    }
    export interface DescribeOpsItemsResponse {
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
            /**
                * <p>A list of OpsItems.</p>
                */
            OpsItemSummaries?: OpsItemSummary[];
    }
    export namespace DescribeOpsItemsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeOpsItemsResponse) => any;
    }
    export enum ParametersFilterKey {
            KEY_ID = "KeyId",
            NAME = "Name",
            TYPE = "Type"
    }
    /**
        * <p>This data type is deprecated. Instead, use <a>ParameterStringFilter</a>.</p>
        */
    export interface ParametersFilter {
            /**
                * <p>The name of the filter.</p>
                */
            Key: ParametersFilterKey | string | undefined;
            /**
                * <p>The filter values.</p>
                */
            Values: string[] | undefined;
    }
    export namespace ParametersFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ParametersFilter) => any;
    }
    /**
        * <p>One or more filters. Use a filter to return a more specific list of results.</p>
        */
    export interface ParameterStringFilter {
            /**
                * <p>The name of the filter.</p>
                *          <p>The <code>ParameterStringFilter</code> object is used by the <a>DescribeParameters</a> and <a>GetParametersByPath</a> API operations.
                *    However, not all of the pattern values listed for <code>Key</code> can be used with both
                *    operations.</p>
                *          <p>For <code>DescribeParameters</code>, all of the listed patterns are valid except
                *     <code>Label</code>.</p>
                *          <p>For <code>GetParametersByPath</code>, the following patterns listed for <code>Key</code>
                *    aren't valid: <code>tag</code>, <code>DataType</code>, <code>Name</code>, <code>Path</code>, and
                *     <code>Tier</code>.</p>
                *          <p>For examples of Amazon Web Services CLI commands demonstrating valid parameter filter constructions, see
                *     <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-search.html">Searching for Systems Manager parameters</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            Key: string | undefined;
            /**
                * <p>For all filters used with <a>DescribeParameters</a>, valid options include
                *     <code>Equals</code> and <code>BeginsWith</code>. The <code>Name</code> filter additionally
                *    supports the <code>Contains</code> option. (Exception: For filters using the key
                *     <code>Path</code>, valid options include <code>Recursive</code> and
                *    <code>OneLevel</code>.)</p>
                *          <p>For filters used with <a>GetParametersByPath</a>, valid options include
                *     <code>Equals</code> and <code>BeginsWith</code>. (Exception: For filters using
                *     <code>Label</code> as the Key name, the only valid option is <code>Equals</code>.)</p>
                */
            Option?: string;
            /**
                * <p>The value you want to search for.</p>
                */
            Values?: string[];
    }
    export namespace ParameterStringFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ParameterStringFilter) => any;
    }
    export interface DescribeParametersRequest {
            /**
                * <p>This data type is deprecated. Instead, use <code>ParameterFilters</code>.</p>
                */
            Filters?: ParametersFilter[];
            /**
                * <p>Filters to limit the request results.</p>
                */
            ParameterFilters?: ParameterStringFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeParametersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeParametersRequest) => any;
    }
    /**
        * <p>One or more policies assigned to a parameter.</p>
        */
    export interface ParameterInlinePolicy {
            /**
                * <p>The JSON text of the policy.</p>
                */
            PolicyText?: string;
            /**
                * <p>The type of policy. Parameter Store, a capability of Amazon Web Services Systems Manager, supports the following
                *    policy types: Expiration, ExpirationNotification, and NoChangeNotification. </p>
                */
            PolicyType?: string;
            /**
                * <p>The status of the policy. Policies report the following statuses: Pending (the policy hasn't
                *    been enforced or applied yet), Finished (the policy was applied), Failed (the policy wasn't
                *    applied), or InProgress (the policy is being applied now). </p>
                */
            PolicyStatus?: string;
    }
    export namespace ParameterInlinePolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ParameterInlinePolicy) => any;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { AssociationComplianceSeverity, AssociationDescription, AssociationOverview, AssociationStatus, AssociationSyncCompliance, AttachmentsSource, AutomationExecutionStatus, AutomationSubtype, DocumentDescription, DocumentFormat, DocumentHashType, DocumentPermissionType, DocumentRequires, DocumentStatus, DocumentType, ExecutionMode, InstanceAssociationOutputLocation, LoggingInfo, MaintenanceWindowExecutionStatus, MaintenanceWindowResourceType, MaintenanceWindowTaskCutoffBehavior, MaintenanceWindowTaskParameterValueExpression, MaintenanceWindowTaskType, MetadataValue, OperatingSystem, OpsItemDataValue, OpsItemNotification, OpsItemStatus, ParameterInlinePolicy, ParameterStringFilter, PatchAction, PatchComplianceLevel, PatchFilterGroup, PatchOrchestratorFilter, PatchRuleGroup, PatchSource, PlatformType, RelatedOpsItem, ResolvedTargets, ResourceDataSyncAwsOrganizationsSource, ResourceDataSyncS3Destination, ResourceTypeForTagging, ReviewStatus, Runbook, StepExecution, Tag, Target, TargetLocation } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { SSMServiceException as __BaseException } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/SSMServiceException";
    export enum ParameterTier {
            ADVANCED = "Advanced",
            INTELLIGENT_TIERING = "Intelligent-Tiering",
            STANDARD = "Standard"
    }
    export enum ParameterType {
            SECURE_STRING = "SecureString",
            STRING = "String",
            STRING_LIST = "StringList"
    }
    /**
        * <p>Metadata includes information like the ARN of the last user and the date/time the parameter
        *    was last used.</p>
        */
    export interface ParameterMetadata {
            /**
                * <p>The parameter name.</p>
                */
            Name?: string;
            /**
                * <p>The type of parameter. Valid parameter types include the following: <code>String</code>,
                *     <code>StringList</code>, and <code>SecureString</code>.</p>
                */
            Type?: ParameterType | string;
            /**
                * <p>The ID of the query key used for this parameter.</p>
                */
            KeyId?: string;
            /**
                * <p>Date the parameter was last changed or updated.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>Amazon Resource Name (ARN) of the Amazon Web Services user who last changed the parameter.</p>
                */
            LastModifiedUser?: string;
            /**
                * <p>Description of the parameter actions.</p>
                */
            Description?: string;
            /**
                * <p>A parameter name can include only the following letters and symbols.</p>
                *          <p>a-zA-Z0-9_.-</p>
                */
            AllowedPattern?: string;
            /**
                * <p>The parameter version.</p>
                */
            Version?: number;
            /**
                * <p>The parameter tier.</p>
                */
            Tier?: ParameterTier | string;
            /**
                * <p>A list of policies associated with a parameter.</p>
                */
            Policies?: ParameterInlinePolicy[];
            /**
                * <p>The data type of the parameter, such as <code>text</code> or <code>aws:ec2:image</code>. The
                *    default is <code>text</code>.</p>
                */
            DataType?: string;
    }
    export namespace ParameterMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ParameterMetadata) => any;
    }
    export interface DescribeParametersResult {
            /**
                * <p>Parameters returned by the request.</p>
                */
            Parameters?: ParameterMetadata[];
            /**
                * <p>The token to use when requesting the next set of items.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeParametersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeParametersResult) => any;
    }
    /**
        * <p>The specified filter option isn't valid. Valid options are Equals and BeginsWith. For Path
        *    filter, valid options are Recursive and OneLevel.</p>
        */
    export class InvalidFilterOption extends __BaseException {
            readonly name: "InvalidFilterOption";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidFilterOption, __BaseException>);
    }
    export interface DescribePatchBaselinesRequest {
            /**
                * <p>Each element in the array is a structure containing a key-value pair.</p>
                *          <p>Supported keys for <code>DescribePatchBaselines</code> include the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>NAME_PREFIX</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>AWS-</code> | <code>My-</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>OWNER</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>AWS</code> | <code>Self</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>OPERATING_SYSTEM</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>AMAZON_LINUX</code> | <code>SUSE</code> | <code>WINDOWS</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Filters?: PatchOrchestratorFilter[];
            /**
                * <p>The maximum number of patch baselines to return (per page).</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribePatchBaselinesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePatchBaselinesRequest) => any;
    }
    /**
        * <p>Defines the basic information about a patch baseline.</p>
        */
    export interface PatchBaselineIdentity {
            /**
                * <p>The ID of the patch baseline.</p>
                */
            BaselineId?: string;
            /**
                * <p>The name of the patch baseline.</p>
                */
            BaselineName?: string;
            /**
                * <p>Defines the operating system the patch baseline applies to. The default value is
                *     <code>WINDOWS</code>. </p>
                */
            OperatingSystem?: OperatingSystem | string;
            /**
                * <p>The description of the patch baseline.</p>
                */
            BaselineDescription?: string;
            /**
                * <p>Whether this is the default baseline. Amazon Web Services Systems Manager supports creating multiple default patch
                *    baselines. For example, you can create a default patch baseline for each operating system.</p>
                */
            DefaultBaseline?: boolean;
    }
    export namespace PatchBaselineIdentity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PatchBaselineIdentity) => any;
    }
    export interface DescribePatchBaselinesResult {
            /**
                * <p>An array of <code>PatchBaselineIdentity</code> elements.</p>
                */
            BaselineIdentities?: PatchBaselineIdentity[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribePatchBaselinesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePatchBaselinesResult) => any;
    }
    export interface DescribePatchGroupsRequest {
            /**
                * <p>The maximum number of patch groups to return (per page).</p>
                */
            MaxResults?: number;
            /**
                * <p>Each element in the array is a structure containing a key-value pair.</p>
                *          <p>Supported keys for <code>DescribePatchGroups</code> include the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>NAME_PREFIX</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>AWS-</code> | <code>My-</code>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>OPERATING_SYSTEM</code>
                *                   </b>
                *                </p>
                *                <p>Sample values: <code>AMAZON_LINUX</code> | <code>SUSE</code> | <code>WINDOWS</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Filters?: PatchOrchestratorFilter[];
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribePatchGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePatchGroupsRequest) => any;
    }
    /**
        * <p>The mapping between a patch group and the patch baseline the patch group is registered
        *    with.</p>
        */
    export interface PatchGroupPatchBaselineMapping {
            /**
                * <p>The name of the patch group registered with the patch baseline.</p>
                */
            PatchGroup?: string;
            /**
                * <p>The patch baseline the patch group is registered with.</p>
                */
            BaselineIdentity?: PatchBaselineIdentity;
    }
    export namespace PatchGroupPatchBaselineMapping {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PatchGroupPatchBaselineMapping) => any;
    }
    export interface DescribePatchGroupsResult {
            /**
                * <p>Each entry in the array contains:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>PatchGroup</code>: string (between 1 and 256 characters. Regex:
                *       <code>^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$)</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>PatchBaselineIdentity</code>: A <code>PatchBaselineIdentity</code> element.</p>
                *             </li>
                *          </ul>
                */
            Mappings?: PatchGroupPatchBaselineMapping[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace DescribePatchGroupsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePatchGroupsResult) => any;
    }
    export interface DescribePatchGroupStateRequest {
            /**
                * <p>The name of the patch group whose patch snapshot should be retrieved.</p>
                */
            PatchGroup: string | undefined;
    }
    export namespace DescribePatchGroupStateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePatchGroupStateRequest) => any;
    }
    export interface DescribePatchGroupStateResult {
            /**
                * <p>The number of managed nodes in the patch group.</p>
                */
            Instances?: number;
            /**
                * <p>The number of managed nodes with installed patches.</p>
                */
            InstancesWithInstalledPatches?: number;
            /**
                * <p>The number of managed nodes with patches installed that aren't defined in the patch
                *    baseline.</p>
                */
            InstancesWithInstalledOtherPatches?: number;
            /**
                * <p>The number of managed nodes with patches installed by Patch Manager that haven't been
                *    rebooted after the patch installation. The status of these managed nodes is
                *     <code>NON_COMPLIANT</code>.</p>
                */
            InstancesWithInstalledPendingRebootPatches?: number;
            /**
                * <p>The number of managed nodes with patches installed that are specified in a
                *     <code>RejectedPatches</code> list. Patches with a status of <code>INSTALLED_REJECTED</code> were
                *    typically installed before they were added to a <code>RejectedPatches</code> list.</p>
                *          <note>
                *             <p>If <code>ALLOW_AS_DEPENDENCY</code> is the specified option for
                *      <code>RejectedPatchesAction</code>, the value of
                *      <code>InstancesWithInstalledRejectedPatches</code> will always be <code>0</code> (zero).</p>
                *          </note>
                */
            InstancesWithInstalledRejectedPatches?: number;
            /**
                * <p>The number of managed nodes with missing patches from the patch baseline.</p>
                */
            InstancesWithMissingPatches?: number;
            /**
                * <p>The number of managed nodes with patches from the patch baseline that failed to
                *    install.</p>
                */
            InstancesWithFailedPatches?: number;
            /**
                * <p>The number of managed nodes with patches that aren't applicable.</p>
                */
            InstancesWithNotApplicablePatches?: number;
            /**
                * <p>The number of managed nodes with <code>NotApplicable</code> patches beyond the supported
                *    limit, which aren't reported by name to Inventory. Inventory is a capability of Amazon Web Services Systems Manager.</p>
                */
            InstancesWithUnreportedNotApplicablePatches?: number;
            /**
                * <p>The number of managed nodes where patches that are specified as <code>Critical</code> for
                *    compliance reporting in the patch baseline aren't installed. These patches might be missing, have
                *    failed installation, were rejected, or were installed but awaiting a required managed node
                *    reboot. The status of these managed nodes is <code>NON_COMPLIANT</code>.</p>
                */
            InstancesWithCriticalNonCompliantPatches?: number;
            /**
                * <p>The number of managed nodes where patches that are specified as <code>Security</code> in a
                *    patch advisory aren't installed. These patches might be missing, have failed installation, were
                *    rejected, or were installed but awaiting a required managed node reboot. The status of these
                *    managed nodes is <code>NON_COMPLIANT</code>.</p>
                */
            InstancesWithSecurityNonCompliantPatches?: number;
            /**
                * <p>The number of managed nodes with patches installed that are specified as other than
                *     <code>Critical</code> or <code>Security</code> but aren't compliant with the patch baseline. The
                *    status of these managed nodes is <code>NON_COMPLIANT</code>.</p>
                */
            InstancesWithOtherNonCompliantPatches?: number;
    }
    export namespace DescribePatchGroupStateResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePatchGroupStateResult) => any;
    }
    export enum PatchSet {
            Application = "APPLICATION",
            Os = "OS"
    }
    export enum PatchProperty {
            PatchClassification = "CLASSIFICATION",
            PatchMsrcSeverity = "MSRC_SEVERITY",
            PatchPriority = "PRIORITY",
            PatchProductFamily = "PRODUCT_FAMILY",
            PatchSeverity = "SEVERITY",
            Product = "PRODUCT"
    }
    export interface DescribePatchPropertiesRequest {
            /**
                * <p>The operating system type for which to list patches.</p>
                */
            OperatingSystem: OperatingSystem | string | undefined;
            /**
                * <p>The patch property for which you want to view patch details. </p>
                */
            Property: PatchProperty | string | undefined;
            /**
                * <p>Indicates whether to list patches for the Windows operating system or for applications
                *    released by Microsoft. Not applicable for the Linux or macOS operating systems.</p>
                */
            PatchSet?: PatchSet | string;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribePatchPropertiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePatchPropertiesRequest) => any;
    }
    export interface DescribePatchPropertiesResult {
            /**
                * <p>A list of the properties for patches matching the filter request parameters.</p>
                */
            Properties?: Record<string, string>[];
            /**
                * <p>The token for the next set of items to return. (You use this token in the next call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribePatchPropertiesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribePatchPropertiesResult) => any;
    }
    export enum SessionFilterKey {
            INVOKED_AFTER = "InvokedAfter",
            INVOKED_BEFORE = "InvokedBefore",
            OWNER = "Owner",
            SESSION_ID = "SessionId",
            STATUS = "Status",
            TARGET_ID = "Target"
    }
    /**
        * <p>Describes a filter for Session Manager information.</p>
        */
    export interface SessionFilter {
            /**
                * <p>The name of the filter.</p>
                */
            key: SessionFilterKey | string | undefined;
            /**
                * <p>The filter value. Valid values for each filter key are as follows:</p>
                *          <ul>
                *             <li>
                *                <p>InvokedAfter: Specify a timestamp to limit your results. For example, specify
                *      2018-08-29T00:00:00Z to see sessions that started August 29, 2018, and later.</p>
                *             </li>
                *             <li>
                *                <p>InvokedBefore: Specify a timestamp to limit your results. For example, specify
                *      2018-08-29T00:00:00Z to see sessions that started before August 29, 2018.</p>
                *             </li>
                *             <li>
                *                <p>Target: Specify a managed node to which session connections have been made.</p>
                *             </li>
                *             <li>
                *                <p>Owner: Specify an Amazon Web Services user account to see a list of sessions started by that
                *      user.</p>
                *             </li>
                *             <li>
                *                <p>Status: Specify a valid session status to see a list of all sessions with that status.
                *      Status values you can specify include:</p>
                *                <ul>
                *                   <li>
                *                      <p>Connected</p>
                *                   </li>
                *                   <li>
                *                      <p>Connecting</p>
                *                   </li>
                *                   <li>
                *                      <p>Disconnected</p>
                *                   </li>
                *                   <li>
                *                      <p>Terminated</p>
                *                   </li>
                *                   <li>
                *                      <p>Terminating</p>
                *                   </li>
                *                   <li>
                *                      <p>Failed</p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>SessionId: Specify a session ID to return details about the session.</p>
                *             </li>
                *          </ul>
                */
            value: string | undefined;
    }
    export namespace SessionFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SessionFilter) => any;
    }
    export enum SessionState {
            ACTIVE = "Active",
            HISTORY = "History"
    }
    export interface DescribeSessionsRequest {
            /**
                * <p>The session status to retrieve a list of sessions for. For example, "Active".</p>
                */
            State: SessionState | string | undefined;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
            /**
                * <p>One or more filters to limit the type of sessions returned by the request.</p>
                */
            Filters?: SessionFilter[];
    }
    export namespace DescribeSessionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSessionsRequest) => any;
    }
    /**
        * <p>Reserved for future use.</p>
        */
    export interface SessionManagerOutputUrl {
            /**
                * <p>Reserved for future use.</p>
                */
            S3OutputUrl?: string;
            /**
                * <p>Reserved for future use.</p>
                */
            CloudWatchOutputUrl?: string;
    }
    export namespace SessionManagerOutputUrl {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SessionManagerOutputUrl) => any;
    }
    export enum SessionStatus {
            CONNECTED = "Connected",
            CONNECTING = "Connecting",
            DISCONNECTED = "Disconnected",
            FAILED = "Failed",
            TERMINATED = "Terminated",
            TERMINATING = "Terminating"
    }
    /**
        * <p>Information about a Session Manager connection to a managed node.</p>
        */
    export interface Session {
            /**
                * <p>The ID of the session.</p>
                */
            SessionId?: string;
            /**
                * <p>The managed node that the Session Manager session connected to.</p>
                */
            Target?: string;
            /**
                * <p>The status of the session. For example, "Connected" or "Terminated".</p>
                */
            Status?: SessionStatus | string;
            /**
                * <p>The date and time, in ISO-8601 Extended format, when the session began.</p>
                */
            StartDate?: Date;
            /**
                * <p>The date and time, in ISO-8601 Extended format, when the session was terminated.</p>
                */
            EndDate?: Date;
            /**
                * <p>The name of the Session Manager SSM document used to define the parameters and plugin settings for the
                *    session. For example, <code>SSM-SessionManagerRunShell</code>.</p>
                */
            DocumentName?: string;
            /**
                * <p>The ID of the Amazon Web Services user account that started the session.</p>
                */
            Owner?: string;
            /**
                * <p>The reason for connecting to the instance.</p>
                */
            Reason?: string;
            /**
                * <p>Reserved for future use.</p>
                */
            Details?: string;
            /**
                * <p>Reserved for future use.</p>
                */
            OutputUrl?: SessionManagerOutputUrl;
            /**
                * <p>The maximum duration of a session before it terminates.</p>
                */
            MaxSessionDuration?: string;
    }
    export namespace Session {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Session) => any;
    }
    export interface DescribeSessionsResponse {
            /**
                * <p>A list of sessions meeting the request parameters.</p>
                */
            Sessions?: Session[];
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace DescribeSessionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeSessionsResponse) => any;
    }
    export interface DisassociateOpsItemRelatedItemRequest {
            /**
                * <p>The ID of the OpsItem for which you want to delete an association between the OpsItem and a
                *    related item.</p>
                */
            OpsItemId: string | undefined;
            /**
                * <p>The ID of the association for which you want to delete an association between the OpsItem
                *    and a related item.</p>
                */
            AssociationId: string | undefined;
    }
    export namespace DisassociateOpsItemRelatedItemRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateOpsItemRelatedItemRequest) => any;
    }
    export interface DisassociateOpsItemRelatedItemResponse {
    }
    export namespace DisassociateOpsItemRelatedItemResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateOpsItemRelatedItemResponse) => any;
    }
    /**
        * <p>The association wasn't found using the parameters you specified in the call. Verify the
        *    information and try again.</p>
        */
    export class OpsItemRelatedItemAssociationNotFoundException extends __BaseException {
            readonly name: "OpsItemRelatedItemAssociationNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OpsItemRelatedItemAssociationNotFoundException, __BaseException>);
    }
    export interface GetAutomationExecutionRequest {
            /**
                * <p>The unique identifier for an existing automation execution to examine. The execution ID is
                *    returned by StartAutomationExecution when the execution of an Automation runbook is
                *    initiated.</p>
                */
            AutomationExecutionId: string | undefined;
    }
    export namespace GetAutomationExecutionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAutomationExecutionRequest) => any;
    }
    /**
        * <p>An aggregate of step execution statuses displayed in the Amazon Web Services Systems Manager console for a
        *    multi-Region and multi-account Automation execution.</p>
        */
    export interface ProgressCounters {
            /**
                * <p>The total number of steps run in all specified Amazon Web Services Regions and Amazon Web Services accounts for the
                *    current Automation execution.</p>
                */
            TotalSteps?: number;
            /**
                * <p>The total number of steps that successfully completed in all specified Amazon Web Services Regions and
                *    Amazon Web Services accounts for the current Automation execution.</p>
                */
            SuccessSteps?: number;
            /**
                * <p>The total number of steps that failed to run in all specified Amazon Web Services Regions and
                *    Amazon Web Services accounts for the current Automation execution.</p>
                */
            FailedSteps?: number;
            /**
                * <p>The total number of steps that the system cancelled in all specified Amazon Web Services Regions and
                *    Amazon Web Services accounts for the current Automation execution.</p>
                */
            CancelledSteps?: number;
            /**
                * <p>The total number of steps that timed out in all specified Amazon Web Services Regions and Amazon Web Services accounts
                *    for the current Automation execution.</p>
                */
            TimedOutSteps?: number;
    }
    export namespace ProgressCounters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProgressCounters) => any;
    }
    /**
        * <p>Detailed information about the current state of an individual Automation execution.</p>
        */
    export interface AutomationExecution {
            /**
                * <p>The execution ID.</p>
                */
            AutomationExecutionId?: string;
            /**
                * <p>The name of the Automation runbook used during the execution.</p>
                */
            DocumentName?: string;
            /**
                * <p>The version of the document to use during execution.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The time the execution started.</p>
                */
            ExecutionStartTime?: Date;
            /**
                * <p>The time the execution finished.</p>
                */
            ExecutionEndTime?: Date;
            /**
                * <p>The execution status of the Automation.</p>
                */
            AutomationExecutionStatus?: AutomationExecutionStatus | string;
            /**
                * <p>A list of details about the current state of all steps that comprise an execution. An
                *    Automation runbook contains a list of steps that are run in order.</p>
                */
            StepExecutions?: StepExecution[];
            /**
                * <p>A boolean value that indicates if the response contains the full list of the Automation step
                *    executions. If true, use the DescribeAutomationStepExecutions API operation to get the full list
                *    of step executions.</p>
                */
            StepExecutionsTruncated?: boolean;
            /**
                * <p>The key-value map of execution parameters, which were supplied when calling <a>StartAutomationExecution</a>.</p>
                */
            Parameters?: Record<string, string[]>;
            /**
                * <p>The list of execution outputs as defined in the Automation runbook.</p>
                */
            Outputs?: Record<string, string[]>;
            /**
                * <p>A message describing why an execution has failed, if the status is set to Failed.</p>
                */
            FailureMessage?: string;
            /**
                * <p>The automation execution mode.</p>
                */
            Mode?: ExecutionMode | string;
            /**
                * <p>The AutomationExecutionId of the parent automation.</p>
                */
            ParentAutomationExecutionId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who ran the automation.</p>
                */
            ExecutedBy?: string;
            /**
                * <p>The name of the step that is currently running.</p>
                */
            CurrentStepName?: string;
            /**
                * <p>The action of the step that is currently running.</p>
                */
            CurrentAction?: string;
            /**
                * <p>The parameter name.</p>
                */
            TargetParameterName?: string;
            /**
                * <p>The specified targets.</p>
                */
            Targets?: Target[];
            /**
                * <p>The specified key-value mapping of document parameters to target resources.</p>
                */
            TargetMaps?: Record<string, string[]>[];
            /**
                * <p>A list of resolved targets in the rate control execution.</p>
                */
            ResolvedTargets?: ResolvedTargets;
            /**
                * <p>The <code>MaxConcurrency</code> value specified by the user when the execution
                *    started.</p>
                */
            MaxConcurrency?: string;
            /**
                * <p>The MaxErrors value specified by the user when the execution started.</p>
                */
            MaxErrors?: string;
            /**
                * <p>The target of the execution.</p>
                */
            Target?: string;
            /**
                * <p>The combination of Amazon Web Services Regions and/or Amazon Web Services accounts where you want to run the
                *    Automation.</p>
                */
            TargetLocations?: TargetLocation[];
            /**
                * <p>An aggregate of step execution statuses displayed in the Amazon Web Services Systems Manager console for a
                *    multi-Region and multi-account Automation execution.</p>
                */
            ProgressCounters?: ProgressCounters;
            /**
                * <p>The subtype of the Automation operation. Currently, the only supported value is
                *     <code>ChangeRequest</code>.</p>
                */
            AutomationSubtype?: AutomationSubtype | string;
            /**
                * <p>The date and time the Automation operation is scheduled to start.</p>
                */
            ScheduledTime?: Date;
            /**
                * <p>Information about the Automation runbooks that are run as part of a runbook workflow.</p>
                *          <note>
                *             <p>The Automation runbooks specified for the runbook workflow can't run until all required
                *     approvals for the change request have been received.</p>
                *          </note>
                */
            Runbooks?: Runbook[];
            /**
                * <p>The ID of an OpsItem that is created to represent a Change Manager change request.</p>
                */
            OpsItemId?: string;
            /**
                * <p>The ID of a State Manager association used in the Automation operation.</p>
                */
            AssociationId?: string;
            /**
                * <p>The name of the Change Manager change request.</p>
                */
            ChangeRequestName?: string;
    }
    export namespace AutomationExecution {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AutomationExecution) => any;
    }
    export interface GetAutomationExecutionResult {
            /**
                * <p>Detailed information about the current state of an automation execution.</p>
                */
            AutomationExecution?: AutomationExecution;
    }
    export namespace GetAutomationExecutionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAutomationExecutionResult) => any;
    }
    export interface GetCalendarStateRequest {
            /**
                * <p>The names or Amazon Resource Names (ARNs) of the Systems Manager documents (SSM documents) that
                *    represent the calendar entries for which you want to get the state.</p>
                */
            CalendarNames: string[] | undefined;
            /**
                * <p>(Optional) The specific time for which you want to get calendar state information, in <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> format. If you don't specify a
                *    value or <code>AtTime</code>, the current time is used.</p>
                */
            AtTime?: string;
    }
    export namespace GetCalendarStateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCalendarStateRequest) => any;
    }
    export enum CalendarState {
            CLOSED = "CLOSED",
            OPEN = "OPEN"
    }
    export interface GetCalendarStateResponse {
            /**
                * <p>The state of the calendar. An <code>OPEN</code> calendar indicates that actions are allowed
                *    to proceed, and a <code>CLOSED</code> calendar indicates that actions aren't allowed to
                *    proceed.</p>
                */
            State?: CalendarState | string;
            /**
                * <p>The time, as an <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> string,
                *    that you specified in your command. If you don't specify a time, <code>GetCalendarState</code>
                *    uses the current time.</p>
                */
            AtTime?: string;
            /**
                * <p>The time, as an <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> string,
                *    that the calendar state will change. If the current calendar state is <code>OPEN</code>,
                *     <code>NextTransitionTime</code> indicates when the calendar state changes to
                *    <code>CLOSED</code>, and vice-versa.</p>
                */
            NextTransitionTime?: string;
    }
    export namespace GetCalendarStateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCalendarStateResponse) => any;
    }
    /**
        * <p>The SSM document type isn't valid. Valid document types are described in the
        *     <code>DocumentType</code> property.</p>
        */
    export class InvalidDocumentType extends __BaseException {
            readonly name: "InvalidDocumentType";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidDocumentType, __BaseException>);
    }
    /**
        * <p>The calendar entry contained in the specified SSM document isn't supported.</p>
        */
    export class UnsupportedCalendarException extends __BaseException {
            readonly name: "UnsupportedCalendarException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedCalendarException, __BaseException>);
    }
    export interface GetCommandInvocationRequest {
            /**
                * <p>(Required) The parent command ID of the invocation plugin.</p>
                */
            CommandId: string | undefined;
            /**
                * <p>(Required) The ID of the managed node targeted by the command. A <i>managed
                *     node</i> can be an Amazon Elastic Compute Cloud (Amazon EC2) instance, edge device, and on-premises server or VM
                *    in your hybrid environment that is configured for Amazon Web Services Systems Manager.</p>
                */
            InstanceId: string | undefined;
            /**
                * <p>The name of the step for which you want detailed results. If the document contains only one
                *    step, you can omit the name and details for that step. If the document contains more than one
                *    step, you must specify the name of the step for which you want to view details. Be sure to
                *    specify the name of the step, not the name of a plugin like
                *    <code>aws:RunShellScript</code>.</p>
                *          <p>To find the <code>PluginName</code>, check the document content and find the name of the
                *    step you want details for. Alternatively, use <a>ListCommandInvocations</a> with the
                *     <code>CommandId</code> and <code>Details</code> parameters. The <code>PluginName</code> is the
                *     <code>Name</code> attribute of the <code>CommandPlugin</code> object in the
                *     <code>CommandPlugins</code> list.</p>
                */
            PluginName?: string;
    }
    export namespace GetCommandInvocationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCommandInvocationRequest) => any;
    }
    /**
        * <p>Configuration options for sending command output to Amazon CloudWatch Logs.</p>
        */
    export interface CloudWatchOutputConfig {
            /**
                * <p>The name of the CloudWatch Logs log group where you want to send command output. If you
                *    don't specify a group name, Amazon Web Services Systems Manager automatically creates a log group for you. The log group
                *    uses the following naming format:</p>
                *          <p>
                *             <code>aws/ssm/<i>SystemsManagerDocumentName</i>
                *             </code>
                *          </p>
                */
            CloudWatchLogGroupName?: string;
            /**
                * <p>Enables Systems Manager to send command output to CloudWatch Logs.</p>
                */
            CloudWatchOutputEnabled?: boolean;
    }
    export namespace CloudWatchOutputConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudWatchOutputConfig) => any;
    }
    export enum CommandInvocationStatus {
            CANCELLED = "Cancelled",
            CANCELLING = "Cancelling",
            DELAYED = "Delayed",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            PENDING = "Pending",
            SUCCESS = "Success",
            TIMED_OUT = "TimedOut"
    }
    export interface GetCommandInvocationResult {
            /**
                * <p>The parent command ID of the invocation plugin.</p>
                */
            CommandId?: string;
            /**
                * <p>The ID of the managed node targeted by the command. A <i>managed node</i> can
                *    be an Amazon Elastic Compute Cloud (Amazon EC2) instance, edge device, or on-premises server or VM in your hybrid
                *    environment that is configured for Amazon Web Services Systems Manager.</p>
                */
            InstanceId?: string;
            /**
                * <p>The comment text for the command.</p>
                */
            Comment?: string;
            /**
                * <p>The name of the document that was run. For example, <code>AWS-RunShellScript</code>.</p>
                */
            DocumentName?: string;
            /**
                * <p>The Systems Manager document (SSM document) version used in the request.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The name of the plugin, or <i>step name</i>, for which details are reported.
                *    For example, <code>aws:RunShellScript</code> is a plugin.</p>
                */
            PluginName?: string;
            /**
                * <p>The error level response code for the plugin script. If the response code is
                *    <code>-1</code>, then the command hasn't started running on the managed node, or it wasn't
                *    received by the node.</p>
                */
            ResponseCode?: number;
            /**
                * <p>The date and time the plugin started running. Date and time are written in ISO 8601 format.
                *    For example, June 7, 2017 is represented as 2017-06-7. The following sample Amazon Web Services CLI command uses
                *    the <code>InvokedBefore</code> filter.</p>
                *          <p>
                *             <code>aws ssm list-commands --filters key=InvokedBefore,value=2017-06-07T00:00:00Z</code>
                *          </p>
                *          <p>If the plugin hasn't started to run, the string is empty.</p>
                */
            ExecutionStartDateTime?: string;
            /**
                * <p>Duration since <code>ExecutionStartDateTime</code>.</p>
                */
            ExecutionElapsedTime?: string;
            /**
                * <p>The date and time the plugin finished running. Date and time are written in ISO 8601 format.
                *    For example, June 7, 2017 is represented as 2017-06-7. The following sample Amazon Web Services CLI command uses
                *    the <code>InvokedAfter</code> filter.</p>
                *          <p>
                *             <code>aws ssm list-commands --filters key=InvokedAfter,value=2017-06-07T00:00:00Z</code>
                *          </p>
                *          <p>If the plugin hasn't started to run, the string is empty.</p>
                */
            ExecutionEndDateTime?: string;
            /**
                * <p>The status of this invocation plugin. This status can be different than
                *     <code>StatusDetails</code>.</p>
                */
            Status?: CommandInvocationStatus | string;
            /**
                * <p>A detailed status of the command execution for an invocation. <code>StatusDetails</code>
                *    includes more information than <code>Status</code> because it includes states resulting from
                *    error and concurrency control parameters. <code>StatusDetails</code> can show different results
                *    than <code>Status</code>. For more information about these statuses, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html">Understanding
                *     command statuses</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.
                *     <code>StatusDetails</code> can be one of the following values:</p>
                *          <ul>
                *             <li>
                *                <p>Pending: The command hasn't been sent to the managed node.</p>
                *             </li>
                *             <li>
                *                <p>In Progress: The command has been sent to the managed node but hasn't reached a terminal
                *      state.</p>
                *             </li>
                *             <li>
                *                <p>Delayed: The system attempted to send the command to the target, but the target wasn't
                *      available. The managed node might not be available because of network issues, because the node
                *      was stopped, or for similar reasons. The system will try to send the command again.</p>
                *             </li>
                *             <li>
                *                <p>Success: The command or plugin ran successfully. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Delivery Timed Out: The command wasn't delivered to the managed node before the delivery
                *      timeout expired. Delivery timeouts don't count against the parent command's
                *       <code>MaxErrors</code> limit, but they do contribute to whether the parent command status is
                *      Success or Incomplete. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Execution Timed Out: The command started to run on the managed node, but the execution
                *      wasn't complete before the timeout expired. Execution timeouts count against the
                *       <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Failed: The command wasn't run successfully on the managed node. For a plugin, this
                *      indicates that the result code wasn't zero. For a command invocation, this indicates that the
                *      result code for one or more plugins wasn't zero. Invocation failures count against the
                *       <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Cancelled: The command was terminated before it was completed. This is a terminal
                *      state.</p>
                *             </li>
                *             <li>
                *                <p>Undeliverable: The command can't be delivered to the managed node. The node might not
                *      exist or might not be responding. Undeliverable invocations don't count against the parent
                *      command's <code>MaxErrors</code> limit and don't contribute to whether the parent command
                *      status is Success or Incomplete. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Terminated: The parent command exceeded its <code>MaxErrors</code> limit and subsequent
                *      command invocations were canceled by the system. This is a terminal state.</p>
                *             </li>
                *          </ul>
                */
            StatusDetails?: string;
            /**
                * <p>The first 24,000 characters written by the plugin to <code>stdout</code>. If the command
                *    hasn't finished running, if <code>ExecutionStatus</code> is neither Succeeded nor Failed, then
                *    this string is empty.</p>
                */
            StandardOutputContent?: string;
            /**
                * <p>The URL for the complete text written by the plugin to <code>stdout</code> in Amazon Simple Storage Service (Amazon S3). If an S3 bucket wasn't specified, then this string is
                *    empty.</p>
                */
            StandardOutputUrl?: string;
            /**
                * <p>The first 8,000 characters written by the plugin to <code>stderr</code>. If the command
                *    hasn't finished running, then this string is empty.</p>
                */
            StandardErrorContent?: string;
            /**
                * <p>The URL for the complete text written by the plugin to <code>stderr</code>. If the command
                *    hasn't finished running, then this string is empty.</p>
                */
            StandardErrorUrl?: string;
            /**
                * <p>Amazon CloudWatch Logs information where Systems Manager sent the command output.</p>
                */
            CloudWatchOutputConfig?: CloudWatchOutputConfig;
    }
    export namespace GetCommandInvocationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCommandInvocationResult) => any;
    }
    /**
        * <p>The plugin name isn't valid.</p>
        */
    export class InvalidPluginName extends __BaseException {
            readonly name: "InvalidPluginName";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPluginName, __BaseException>);
    }
    /**
        * <p>The command ID and managed node ID you specified didn't match any invocations. Verify the
        *    command ID and the managed node ID and try again. </p>
        */
    export class InvocationDoesNotExist extends __BaseException {
            readonly name: "InvocationDoesNotExist";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvocationDoesNotExist, __BaseException>);
    }
    export interface GetConnectionStatusRequest {
            /**
                * <p>The managed node ID.</p>
                */
            Target: string | undefined;
    }
    export namespace GetConnectionStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectionStatusRequest) => any;
    }
    export enum ConnectionStatus {
            CONNECTED = "Connected",
            NOT_CONNECTED = "NotConnected"
    }
    export interface GetConnectionStatusResponse {
            /**
                * <p>The ID of the managed node to check connection status. </p>
                */
            Target?: string;
            /**
                * <p>The status of the connection to the managed node. For example, 'Connected' or 'Not
                *    Connected'.</p>
                */
            Status?: ConnectionStatus | string;
    }
    export namespace GetConnectionStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetConnectionStatusResponse) => any;
    }
    export interface GetDefaultPatchBaselineRequest {
            /**
                * <p>Returns the default patch baseline for the specified operating system.</p>
                */
            OperatingSystem?: OperatingSystem | string;
    }
    export namespace GetDefaultPatchBaselineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDefaultPatchBaselineRequest) => any;
    }
    export interface GetDefaultPatchBaselineResult {
            /**
                * <p>The ID of the default patch baseline.</p>
                */
            BaselineId?: string;
            /**
                * <p>The operating system for the returned patch baseline. </p>
                */
            OperatingSystem?: OperatingSystem | string;
    }
    export namespace GetDefaultPatchBaselineResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDefaultPatchBaselineResult) => any;
    }
    /**
        * <p>Defines the basic information about a patch baseline override.</p>
        */
    export interface BaselineOverride {
            /**
                * <p>The operating system rule used by the patch baseline override.</p>
                */
            OperatingSystem?: OperatingSystem | string;
            /**
                * <p>A set of patch filters, typically used for approval rules.</p>
                */
            GlobalFilters?: PatchFilterGroup;
            /**
                * <p>A set of rules defining the approval rules for a patch baseline.</p>
                */
            ApprovalRules?: PatchRuleGroup;
            /**
                * <p>A list of explicitly approved patches for the baseline.</p>
                *          <p>For information about accepted formats for lists of approved patches and rejected patches,
                *                         see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About
                *                         package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            ApprovedPatches?: string[];
            /**
                * <p>Defines the compliance level for approved patches. When an approved patch is reported as
                *    missing, this value describes the severity of the compliance violation.</p>
                */
            ApprovedPatchesComplianceLevel?: PatchComplianceLevel | string;
            /**
                * <p>A list of explicitly rejected patches for the baseline.</p>
                *          <p>For information about accepted formats for lists of approved patches and rejected patches,
                *                         see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About
                *                         package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            RejectedPatches?: string[];
            /**
                * <p>The action for Patch Manager to take on patches included in the
                *     <code>RejectedPackages</code> list. A patch can be allowed only if it is a dependency of another
                *    package, or blocked entirely along with packages that include it as a dependency.</p>
                */
            RejectedPatchesAction?: PatchAction | string;
            /**
                * <p>Indicates whether the list of approved patches includes non-security updates that should be
                *    applied to the managed nodes. The default value is <code>false</code>. Applies to Linux managed
                *    nodes only.</p>
                */
            ApprovedPatchesEnableNonSecurity?: boolean;
            /**
                * <p>Information about the patches to use to update the managed nodes, including target operating
                *    systems and source repositories. Applies to Linux managed nodes only.</p>
                */
            Sources?: PatchSource[];
    }
    export namespace BaselineOverride {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BaselineOverride) => any;
    }
    export interface GetDeployablePatchSnapshotForInstanceRequest {
            /**
                * <p>The ID of the managed node for which the appropriate patch snapshot should be
                *    retrieved.</p>
                */
            InstanceId: string | undefined;
            /**
                * <p>The snapshot ID provided by the user when running <code>AWS-RunPatchBaseline</code>.</p>
                */
            SnapshotId: string | undefined;
            /**
                * <p>Defines the basic information about a patch baseline override.</p>
                */
            BaselineOverride?: BaselineOverride;
    }
    export namespace GetDeployablePatchSnapshotForInstanceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeployablePatchSnapshotForInstanceRequest) => any;
    }
    export interface GetDeployablePatchSnapshotForInstanceResult {
            /**
                * <p>The managed node ID.</p>
                */
            InstanceId?: string;
            /**
                * <p>The user-defined snapshot ID.</p>
                */
            SnapshotId?: string;
            /**
                * <p>A pre-signed Amazon Simple Storage Service (Amazon S3) URL that can be used to download the
                *    patch snapshot.</p>
                */
            SnapshotDownloadUrl?: string;
            /**
                * <p>Returns the specific operating system (for example Windows Server 2012 or Amazon Linux
                *    2015.09) on the managed node for the specified patch snapshot.</p>
                */
            Product?: string;
    }
    export namespace GetDeployablePatchSnapshotForInstanceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDeployablePatchSnapshotForInstanceResult) => any;
    }
    /**
        * <p>Patching for applications released by Microsoft is only available on EC2 instances and
        *    advanced instances. To patch applications released by Microsoft on on-premises servers and VMs,
        *    you must enable advanced instances. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances-advanced.html">Enabling
        *     the advanced-instances tier</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        */
    export class UnsupportedFeatureRequiredException extends __BaseException {
            readonly name: "UnsupportedFeatureRequiredException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedFeatureRequiredException, __BaseException>);
    }
    export interface GetDocumentRequest {
            /**
                * <p>The name of the SSM document.</p>
                */
            Name: string | undefined;
            /**
                * <p>An optional field specifying the version of the artifact associated with the document. For
                *    example, "Release 12, Update 6". This value is unique across all versions of a document and can't
                *    be changed.</p>
                */
            VersionName?: string;
            /**
                * <p>The document version for which you want information.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>Returns the document in the specified format. The document format can be either JSON or
                *    YAML. JSON is the default format.</p>
                */
            DocumentFormat?: DocumentFormat | string;
    }
    export namespace GetDocumentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDocumentRequest) => any;
    }
    export enum AttachmentHashType {
            SHA256 = "Sha256"
    }
    /**
        * <p>A structure that includes attributes that describe a document attachment.</p>
        */
    export interface AttachmentContent {
            /**
                * <p>The name of an attachment.</p>
                */
            Name?: string;
            /**
                * <p>The size of an attachment in bytes.</p>
                */
            Size?: number;
            /**
                * <p>The cryptographic hash value of the document content.</p>
                */
            Hash?: string;
            /**
                * <p>The hash algorithm used to calculate the hash value.</p>
                */
            HashType?: AttachmentHashType | string;
            /**
                * <p>The URL location of the attachment content.</p>
                */
            Url?: string;
    }
    export namespace AttachmentContent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachmentContent) => any;
    }
    export interface GetDocumentResult {
            /**
                * <p>The name of the SSM document.</p>
                */
            Name?: string;
            /**
                * <p>The date the SSM document was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The friendly name of the SSM document. This value can differ for each version of the
                *    document. If you want to update this value, see <a>UpdateDocument</a>.</p>
                */
            DisplayName?: string;
            /**
                * <p>The version of the artifact associated with the document. For example, "Release 12, Update
                *    6". This value is unique across all versions of a document, and can't be changed.</p>
                */
            VersionName?: string;
            /**
                * <p>The document version.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The status of the SSM document, such as <code>Creating</code>, <code>Active</code>,
                *     <code>Updating</code>, <code>Failed</code>, and <code>Deleting</code>.</p>
                */
            Status?: DocumentStatus | string;
            /**
                * <p>A message returned by Amazon Web Services Systems Manager that explains the <code>Status</code> value. For example, a
                *     <code>Failed</code> status might be explained by the <code>StatusInformation</code> message,
                *    "The specified S3 bucket doesn't exist. Verify that the URL of the S3 bucket is correct."</p>
                */
            StatusInformation?: string;
            /**
                * <p>The contents of the SSM document.</p>
                */
            Content?: string;
            /**
                * <p>The document type.</p>
                */
            DocumentType?: DocumentType | string;
            /**
                * <p>The document format, either JSON or YAML.</p>
                */
            DocumentFormat?: DocumentFormat | string;
            /**
                * <p>A list of SSM documents required by a document. For example, an
                *     <code>ApplicationConfiguration</code> document requires an
                *     <code>ApplicationConfigurationSchema</code> document.</p>
                */
            Requires?: DocumentRequires[];
            /**
                * <p>A description of the document attachments, including names, locations, sizes, and so
                *    on.</p>
                */
            AttachmentsContent?: AttachmentContent[];
            /**
                * <p>The current review status of a new custom Systems Manager document (SSM document) created by a member
                *    of your organization, or of the latest version of an existing SSM document.</p>
                *          <p>Only one version of an SSM document can be in the APPROVED state at a time. When a new
                *    version is approved, the status of the previous version changes to REJECTED.</p>
                *          <p>Only one version of an SSM document can be in review, or PENDING, at a time.</p>
                */
            ReviewStatus?: ReviewStatus | string;
    }
    export namespace GetDocumentResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDocumentResult) => any;
    }
    export enum InventoryQueryOperatorType {
            BEGIN_WITH = "BeginWith",
            EQUAL = "Equal",
            EXISTS = "Exists",
            GREATER_THAN = "GreaterThan",
            LESS_THAN = "LessThan",
            NOT_EQUAL = "NotEqual"
    }
    /**
        * <p>One or more filters. Use a filter to return a more specific list of results.</p>
        */
    export interface InventoryFilter {
            /**
                * <p>The name of the filter key.</p>
                */
            Key: string | undefined;
            /**
                * <p>Inventory filter values. Example: inventory filter where managed node IDs are specified as
                *    values <code>Key=AWS:InstanceInformation.InstanceId,Values= i-a12b3c4d5e6g,
                *     i-1a2b3c4d5e6,Type=Equal</code>. </p>
                */
            Values: string[] | undefined;
            /**
                * <p>The type of filter.</p>
                *          <note>
                *             <p>The <code>Exists</code> filter must be used with aggregators. For more information, see
                *      <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-inventory-aggregate.html">Aggregating inventory
                *      data</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          </note>
                */
            Type?: InventoryQueryOperatorType | string;
    }
    export namespace InventoryFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InventoryFilter) => any;
    }
    /**
        * <p>A user-defined set of one or more filters on which to aggregate inventory data. Groups
        *    return a count of resources that match and don't match the specified criteria.</p>
        */
    export interface InventoryGroup {
            /**
                * <p>The name of the group.</p>
                */
            Name: string | undefined;
            /**
                * <p>Filters define the criteria for the group. The <code>matchingCount</code> field displays the
                *    number of resources that match the criteria. The <code>notMatchingCount</code> field displays the
                *    number of resources that don't match the criteria. </p>
                */
            Filters: InventoryFilter[] | undefined;
    }
    export namespace InventoryGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InventoryGroup) => any;
    }
    /**
        * <p>The inventory item result attribute.</p>
        */
    export interface ResultAttribute {
            /**
                * <p>Name of the inventory item type. Valid value: <code>AWS:InstanceInformation</code>. Default
                *    Value: <code>AWS:InstanceInformation</code>.</p>
                */
            TypeName: string | undefined;
    }
    export namespace ResultAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResultAttribute) => any;
    }
    /**
        * <p>The inventory result item.</p>
        */
    export interface InventoryResultItem {
            /**
                * <p>The name of the inventory result item type.</p>
                */
            TypeName: string | undefined;
            /**
                * <p>The schema version for the inventory result item/</p>
                */
            SchemaVersion: string | undefined;
            /**
                * <p>The time inventory item data was captured.</p>
                */
            CaptureTime?: string;
            /**
                * <p>MD5 hash of the inventory item type contents. The content hash is used to determine whether
                *    to update inventory information. The PutInventory API doesn't update the inventory item type
                *    contents if the MD5 hash hasn't changed since last update. </p>
                */
            ContentHash?: string;
            /**
                * <p>Contains all the inventory data of the item type. Results include attribute names and
                *    values. </p>
                */
            Content: Record<string, string>[] | undefined;
    }
    export namespace InventoryResultItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InventoryResultItem) => any;
    }
    /**
        * <p>Inventory query results.</p>
        */
    export interface InventoryResultEntity {
            /**
                * <p>ID of the inventory result entity. For example, for managed node inventory the result will
                *    be the managed node ID. For EC2 instance inventory, the result will be the instance ID. </p>
                */
            Id?: string;
            /**
                * <p>The data section in the inventory result entity JSON.</p>
                */
            Data?: Record<string, InventoryResultItem>;
    }
    export namespace InventoryResultEntity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InventoryResultEntity) => any;
    }
    export interface GetInventoryResult {
            /**
                * <p>Collection of inventory entities such as a collection of managed node inventory. </p>
                */
            Entities?: InventoryResultEntity[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace GetInventoryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInventoryResult) => any;
    }
    /**
        * <p>The specified aggregator isn't valid for inventory groups. Verify that the aggregator uses a
        *    valid inventory type such as <code>AWS:Application</code> or
        *    <code>AWS:InstanceInformation</code>.</p>
        */
    export class InvalidAggregatorException extends __BaseException {
            readonly name: "InvalidAggregatorException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidAggregatorException, __BaseException>);
    }
    /**
        * <p>The specified inventory group isn't valid.</p>
        */
    export class InvalidInventoryGroupException extends __BaseException {
            readonly name: "InvalidInventoryGroupException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInventoryGroupException, __BaseException>);
    }
    /**
        * <p>The specified inventory item result attribute isn't valid.</p>
        */
    export class InvalidResultAttributeException extends __BaseException {
            readonly name: "InvalidResultAttributeException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidResultAttributeException, __BaseException>);
    }
    export interface GetInventorySchemaRequest {
            /**
                * <p>The type of inventory item to return.</p>
                */
            TypeName?: string;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>Returns inventory schemas that support aggregation. For example, this call returns the
                *     <code>AWS:InstanceInformation</code> type, because it supports aggregation based on the
                *     <code>PlatformName</code>, <code>PlatformType</code>, and <code>PlatformVersion</code>
                *    attributes.</p>
                */
            Aggregator?: boolean;
            /**
                * <p>Returns the sub-type schema for a specified inventory type.</p>
                */
            SubType?: boolean;
    }
    export namespace GetInventorySchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInventorySchemaRequest) => any;
    }
    export enum InventoryAttributeDataType {
            NUMBER = "number",
            STRING = "string"
    }
    /**
        * <p>Attributes are the entries within the inventory item content. It contains name and
        *    value.</p>
        */
    export interface InventoryItemAttribute {
            /**
                * <p>Name of the inventory item attribute.</p>
                */
            Name: string | undefined;
            /**
                * <p>The data type of the inventory item attribute. </p>
                */
            DataType: InventoryAttributeDataType | string | undefined;
    }
    export namespace InventoryItemAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InventoryItemAttribute) => any;
    }
    /**
        * <p>The inventory item schema definition. Users can use this to compose inventory query
        *    filters.</p>
        */
    export interface InventoryItemSchema {
            /**
                * <p>The name of the inventory type. Default inventory item type names start with Amazon Web Services. Custom
                *    inventory type names will start with Custom. Default inventory item types include the following:
                *     <code>AWS:AWSComponent</code>, <code>AWS:Application</code>,
                *     <code>AWS:InstanceInformation</code>, <code>AWS:Network</code>, and
                *     <code>AWS:WindowsUpdate</code>.</p>
                */
            TypeName: string | undefined;
            /**
                * <p>The schema version for the inventory item.</p>
                */
            Version?: string;
            /**
                * <p>The schema attributes for inventory. This contains data type and attribute name.</p>
                */
            Attributes: InventoryItemAttribute[] | undefined;
            /**
                * <p>The alias name of the inventory type. The alias name is used for display purposes.</p>
                */
            DisplayName?: string;
    }
    export namespace InventoryItemSchema {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InventoryItemSchema) => any;
    }
    export interface GetInventorySchemaResult {
            /**
                * <p>Inventory schemas returned by the request.</p>
                */
            Schemas?: InventoryItemSchema[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace GetInventorySchemaResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInventorySchemaResult) => any;
    }
    export interface GetMaintenanceWindowRequest {
            /**
                * <p>The ID of the maintenance window for which you want to retrieve information.</p>
                */
            WindowId: string | undefined;
    }
    export namespace GetMaintenanceWindowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMaintenanceWindowRequest) => any;
    }
    export interface GetMaintenanceWindowResult {
            /**
                * <p>The ID of the created maintenance window.</p>
                */
            WindowId?: string;
            /**
                * <p>The name of the maintenance window.</p>
                */
            Name?: string;
            /**
                * <p>The description of the maintenance window.</p>
                */
            Description?: string;
            /**
                * <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled
                *    to become active. The maintenance window won't run before this specified time.</p>
                */
            StartDate?: string;
            /**
                * <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled
                *    to become inactive. The maintenance window won't run after this specified time.</p>
                */
            EndDate?: string;
            /**
                * <p>The schedule of the maintenance window in the form of a cron or rate expression.</p>
                */
            Schedule?: string;
            /**
                * <p>The time zone that the scheduled maintenance window executions are based on, in Internet
                *    Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or
                *    "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time
                *     Zone Database</a> on the IANA website.</p>
                */
            ScheduleTimezone?: string;
            /**
                * <p>The number of days to wait to run a maintenance window after the scheduled cron expression
                *    date and time.</p>
                */
            ScheduleOffset?: number;
            /**
                * <p>The next time the maintenance window will actually run, taking into account any specified
                *    times for the maintenance window to become active or inactive.</p>
                */
            NextExecutionTime?: string;
            /**
                * <p>The duration of the maintenance window in hours.</p>
                */
            Duration?: number;
            /**
                * <p>The number of hours before the end of the maintenance window that Amazon Web Services Systems Manager stops scheduling
                *    new tasks for execution.</p>
                */
            Cutoff?: number;
            /**
                * <p>Whether targets must be registered with the maintenance window before tasks can be defined
                *    for those targets.</p>
                */
            AllowUnassociatedTargets?: boolean;
            /**
                * <p>Indicates whether the maintenance window is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>The date the maintenance window was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The date the maintenance window was last modified.</p>
                */
            ModifiedDate?: Date;
    }
    export namespace GetMaintenanceWindowResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMaintenanceWindowResult) => any;
    }
    export interface GetMaintenanceWindowExecutionRequest {
            /**
                * <p>The ID of the maintenance window execution that includes the task.</p>
                */
            WindowExecutionId: string | undefined;
    }
    export namespace GetMaintenanceWindowExecutionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMaintenanceWindowExecutionRequest) => any;
    }
    export interface GetMaintenanceWindowExecutionResult {
            /**
                * <p>The ID of the maintenance window execution.</p>
                */
            WindowExecutionId?: string;
            /**
                * <p>The ID of the task executions from the maintenance window execution.</p>
                */
            TaskIds?: string[];
            /**
                * <p>The status of the maintenance window execution.</p>
                */
            Status?: MaintenanceWindowExecutionStatus | string;
            /**
                * <p>The details explaining the status. Not available for all status values.</p>
                */
            StatusDetails?: string;
            /**
                * <p>The time the maintenance window started running.</p>
                */
            StartTime?: Date;
            /**
                * <p>The time the maintenance window finished running.</p>
                */
            EndTime?: Date;
    }
    export namespace GetMaintenanceWindowExecutionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMaintenanceWindowExecutionResult) => any;
    }
    export interface GetMaintenanceWindowExecutionTaskRequest {
            /**
                * <p>The ID of the maintenance window execution that includes the task.</p>
                */
            WindowExecutionId: string | undefined;
            /**
                * <p>The ID of the specific task execution in the maintenance window task that should be
                *    retrieved.</p>
                */
            TaskId: string | undefined;
    }
    export namespace GetMaintenanceWindowExecutionTaskRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMaintenanceWindowExecutionTaskRequest) => any;
    }
    export interface GetMaintenanceWindowExecutionTaskResult {
            /**
                * <p>The ID of the maintenance window execution that includes the task.</p>
                */
            WindowExecutionId?: string;
            /**
                * <p>The ID of the specific task execution in the maintenance window task that was
                *    retrieved.</p>
                */
            TaskExecutionId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the task that ran.</p>
                */
            TaskArn?: string;
            /**
                * <p>The role that was assumed when running the task.</p>
                */
            ServiceRole?: string;
            /**
                * <p>The type of task that was run.</p>
                */
            Type?: MaintenanceWindowTaskType | string;
            /**
                * <p>The parameters passed to the task when it was run.</p>
                *          <note>
                *             <p>
                *                <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs,
                *       instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information
                *       about how Systems Manager handles these options for the supported maintenance window task
                *       types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
                *          </note>
                *          <p>The map has the following format:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Key</code>: string, between 1 and 255 characters</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Value</code>: an array of strings, each between 1 and 255 characters</p>
                *             </li>
                *          </ul>
                */
            TaskParameters?: Record<string, MaintenanceWindowTaskParameterValueExpression>[];
            /**
                * <p>The priority of the task.</p>
                */
            Priority?: number;
            /**
                * <p>The defined maximum number of task executions that could be run in parallel.</p>
                */
            MaxConcurrency?: string;
            /**
                * <p>The defined maximum number of task execution errors allowed before scheduling of the task
                *    execution would have been stopped.</p>
                */
            MaxErrors?: string;
            /**
                * <p>The status of the task.</p>
                */
            Status?: MaintenanceWindowExecutionStatus | string;
            /**
                * <p>The details explaining the status. Not available for all status values.</p>
                */
            StatusDetails?: string;
            /**
                * <p>The time the task execution started.</p>
                */
            StartTime?: Date;
            /**
                * <p>The time the task execution completed.</p>
                */
            EndTime?: Date;
    }
    export namespace GetMaintenanceWindowExecutionTaskResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMaintenanceWindowExecutionTaskResult) => any;
    }
    export interface GetMaintenanceWindowExecutionTaskInvocationRequest {
            /**
                * <p>The ID of the maintenance window execution for which the task is a part.</p>
                */
            WindowExecutionId: string | undefined;
            /**
                * <p>The ID of the specific task in the maintenance window task that should be retrieved. </p>
                */
            TaskId: string | undefined;
            /**
                * <p>The invocation ID to retrieve.</p>
                */
            InvocationId: string | undefined;
    }
    export namespace GetMaintenanceWindowExecutionTaskInvocationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMaintenanceWindowExecutionTaskInvocationRequest) => any;
    }
    export interface GetMaintenanceWindowExecutionTaskInvocationResult {
            /**
                * <p>The maintenance window execution ID.</p>
                */
            WindowExecutionId?: string;
            /**
                * <p>The task execution ID.</p>
                */
            TaskExecutionId?: string;
            /**
                * <p>The invocation ID.</p>
                */
            InvocationId?: string;
            /**
                * <p>The execution ID.</p>
                */
            ExecutionId?: string;
            /**
                * <p>Retrieves the task type for a maintenance window.</p>
                */
            TaskType?: MaintenanceWindowTaskType | string;
            /**
                * <p>The parameters used at the time that the task ran.</p>
                */
            Parameters?: string;
            /**
                * <p>The task status for an invocation.</p>
                */
            Status?: MaintenanceWindowExecutionStatus | string;
            /**
                * <p>The details explaining the status. Details are only available for certain status
                *    values.</p>
                */
            StatusDetails?: string;
            /**
                * <p>The time that the task started running on the target.</p>
                */
            StartTime?: Date;
            /**
                * <p>The time that the task finished running on the target.</p>
                */
            EndTime?: Date;
            /**
                * <p>User-provided value to be included in any Amazon CloudWatch Events or Amazon EventBridge
                *    events raised while running tasks for these targets in this maintenance window.</p>
                */
            OwnerInformation?: string;
            /**
                * <p>The maintenance window target ID.</p>
                */
            WindowTargetId?: string;
    }
    export namespace GetMaintenanceWindowExecutionTaskInvocationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMaintenanceWindowExecutionTaskInvocationResult) => any;
    }
    export interface GetMaintenanceWindowTaskRequest {
            /**
                * <p>The maintenance window ID that includes the task to retrieve.</p>
                */
            WindowId: string | undefined;
            /**
                * <p>The maintenance window task ID to retrieve.</p>
                */
            WindowTaskId: string | undefined;
    }
    export namespace GetMaintenanceWindowTaskRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMaintenanceWindowTaskRequest) => any;
    }
    /**
        * <p>The parameters for an <code>AUTOMATION</code> task type.</p>
        */
    export interface MaintenanceWindowAutomationParameters {
            /**
                * <p>The version of an Automation runbook to use during task execution.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The parameters for the <code>AUTOMATION</code> task.</p>
                *          <p>For information about specifying and updating task parameters, see <a>RegisterTaskWithMaintenanceWindow</a> and <a>UpdateMaintenanceWindowTask</a>.</p>
                *          <note>
                *             <p>
                *                <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the
                *       <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure.
                *       For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance
                *       window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
                *
                *             <p>
                *                <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs,
                *       instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information
                *       about how Systems Manager handles these options for the supported maintenance window task
                *       types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
                *             <p>For <code>AUTOMATION</code> task types, Amazon Web Services Systems Manager ignores any values specified for these
                *     parameters.</p>
                *          </note>
                */
            Parameters?: Record<string, string[]>;
    }
    export namespace MaintenanceWindowAutomationParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaintenanceWindowAutomationParameters) => any;
    }
    /**
        * <p>The parameters for a <code>LAMBDA</code> task type.</p>
        *          <p>For information about specifying and updating task parameters, see <a>RegisterTaskWithMaintenanceWindow</a> and <a>UpdateMaintenanceWindowTask</a>.</p>
        *          <note>
        *             <p>
        *                <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the
        *       <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure.
        *       For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance
        *       window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
        *
        *             <p>
        *                <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs,
        *       instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information
        *       about how Systems Manager handles these options for the supported maintenance window task
        *       types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
        *             <p>For Lambda tasks, Systems Manager ignores any values specified for TaskParameters and
        *     LoggingInfo.</p>
        *          </note>
        */
    export interface MaintenanceWindowLambdaParameters {
            /**
                * <p>Pass client-specific information to the Lambda function that you are
                *    invoking. You can then process the client information in your Lambda function as you
                *    choose through the context variable.</p>
                */
            ClientContext?: string;
            /**
                * <p>(Optional) Specify an Lambda function version or alias name. If you specify a
                *    function version, the operation uses the qualified function Amazon Resource Name (ARN) to invoke
                *    a specific Lambda function. If you specify an alias name, the operation uses the
                *    alias ARN to invoke the Lambda function version to which the alias points.</p>
                */
            Qualifier?: string;
            /**
                * <p>JSON to provide to your Lambda function as input.</p>
                */
            Payload?: Uint8Array;
    }
    export namespace MaintenanceWindowLambdaParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaintenanceWindowLambdaParameters) => any;
    }
    export enum NotificationEvent {
            ALL = "All",
            CANCELLED = "Cancelled",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            SUCCESS = "Success",
            TIMED_OUT = "TimedOut"
    }
    export enum NotificationType {
            Command = "Command",
            Invocation = "Invocation"
    }
    /**
        * <p>Configurations for sending notifications.</p>
        */
    export interface NotificationConfig {
            /**
                * <p>An Amazon Resource Name (ARN) for an Amazon Simple Notification Service (Amazon SNS) topic. Run
                *    Command pushes notifications about command status changes to this topic.</p>
                */
            NotificationArn?: string;
            /**
                * <p>The different events for which you can receive notifications. To learn more about these
                *    events, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/monitoring-sns-notifications.html">Monitoring Systems Manager status
                *     changes using Amazon SNS notifications</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            NotificationEvents?: (NotificationEvent | string)[];
            /**
                * <p>The type of notification.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Command</code>: Receive notification when the status of a command changes.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Invocation</code>: For commands sent to multiple managed nodes, receive notification
                *      on a per-node basis when the status of a command changes. </p>
                *             </li>
                *          </ul>
                */
            NotificationType?: NotificationType | string;
    }
    export namespace NotificationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotificationConfig) => any;
    }
    /**
        * <p>The parameters for a <code>RUN_COMMAND</code> task type.</p>
        *          <p>For information about specifying and updating task parameters, see <a>RegisterTaskWithMaintenanceWindow</a> and <a>UpdateMaintenanceWindowTask</a>.</p>
        *          <note>
        *             <p>
        *                <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the
        *       <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure.
        *       For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance
        *       window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
        *
        *             <p>
        *                <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs,
        *       instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information
        *       about how Systems Manager handles these options for the supported maintenance window task
        *       types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
        *             <p>For <code>RUN_COMMAND</code> tasks, Systems Manager uses specified values for
        *      <code>TaskParameters</code> and <code>LoggingInfo</code> only if no values are specified for
        *      <code>TaskInvocationParameters</code>. </p>
        *          </note>
        */
    export interface MaintenanceWindowRunCommandParameters {
            /**
                * <p>Information about the commands to run.</p>
                */
            Comment?: string;
            /**
                * <p>Configuration options for sending command output to Amazon CloudWatch Logs.</p>
                */
            CloudWatchOutputConfig?: CloudWatchOutputConfig;
            /**
                * <p>The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes
                *    have been deprecated.</p>
                */
            DocumentHash?: string;
            /**
                * <p>SHA-256 or SHA-1. SHA-1 hashes have been deprecated.</p>
                */
            DocumentHashType?: DocumentHashType | string;
            /**
                * <p>The Amazon Web Services Systems Manager document (SSM document) version to use in the request. You can specify
                *     <code>$DEFAULT</code>, <code>$LATEST</code>, or a specific version number. If you run commands
                *    by using the Amazon Web Services CLI, then you must escape the first two options by using a backslash. If you
                *    specify a version number, then you don't need to use the backslash. For example:</p>
                *          <p>
                *             <code>--document-version "\$DEFAULT"</code>
                *          </p>
                *          <p>
                *             <code>--document-version "\$LATEST"</code>
                *          </p>
                *          <p>
                *             <code>--document-version "3"</code>
                *          </p>
                */
            DocumentVersion?: string;
            /**
                * <p>Configurations for sending notifications about command status changes on a per-managed node
                *    basis.</p>
                */
            NotificationConfig?: NotificationConfig;
            /**
                * <p>The name of the Amazon Simple Storage Service (Amazon S3) bucket.</p>
                */
            OutputS3BucketName?: string;
            /**
                * <p>The S3 bucket subfolder.</p>
                */
            OutputS3KeyPrefix?: string;
            /**
                * <p>The parameters for the <code>RUN_COMMAND</code> task execution.</p>
                */
            Parameters?: Record<string, string[]>;
            /**
                * <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service
                * (Amazon SNS) notifications for maintenance window Run Command tasks.</p>
                */
            ServiceRoleArn?: string;
            /**
                * <p>If this time is reached and the command hasn't already started running, it doesn't
                *    run.</p>
                */
            TimeoutSeconds?: number;
    }
    export namespace MaintenanceWindowRunCommandParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaintenanceWindowRunCommandParameters) => any;
    }
    /**
        * <p>The parameters for a <code>STEP_FUNCTIONS</code> task.</p>
        *          <p>For information about specifying and updating task parameters, see <a>RegisterTaskWithMaintenanceWindow</a> and <a>UpdateMaintenanceWindowTask</a>.</p>
        *          <note>
        *             <p>
        *                <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the
        *       <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure.
        *       For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance
        *       window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
        *
        *             <p>
        *                <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs,
        *       instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information
        *       about how Systems Manager handles these options for the supported maintenance window task
        *       types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
        *             <p>For Step Functions tasks, Systems Manager ignores any values specified for
        *      <code>TaskParameters</code> and <code>LoggingInfo</code>.</p>
        *          </note>
        */
    export interface MaintenanceWindowStepFunctionsParameters {
            /**
                * <p>The inputs for the <code>STEP_FUNCTIONS</code> task.</p>
                */
            Input?: string;
            /**
                * <p>The name of the <code>STEP_FUNCTIONS</code> task.</p>
                */
            Name?: string;
    }
    export namespace MaintenanceWindowStepFunctionsParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaintenanceWindowStepFunctionsParameters) => any;
    }
    /**
        * <p>The parameters for task execution.</p>
        */
    export interface MaintenanceWindowTaskInvocationParameters {
            /**
                * <p>The parameters for a <code>RUN_COMMAND</code> task type.</p>
                */
            RunCommand?: MaintenanceWindowRunCommandParameters;
            /**
                * <p>The parameters for an <code>AUTOMATION</code> task type.</p>
                */
            Automation?: MaintenanceWindowAutomationParameters;
            /**
                * <p>The parameters for a <code>STEP_FUNCTIONS</code> task type.</p>
                */
            StepFunctions?: MaintenanceWindowStepFunctionsParameters;
            /**
                * <p>The parameters for a <code>LAMBDA</code> task type.</p>
                */
            Lambda?: MaintenanceWindowLambdaParameters;
    }
    export namespace MaintenanceWindowTaskInvocationParameters {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MaintenanceWindowTaskInvocationParameters) => any;
    }
    export interface GetMaintenanceWindowTaskResult {
            /**
                * <p>The retrieved maintenance window ID.</p>
                */
            WindowId?: string;
            /**
                * <p>The retrieved maintenance window task ID.</p>
                */
            WindowTaskId?: string;
            /**
                * <p>The targets where the task should run.</p>
                */
            Targets?: Target[];
            /**
                * <p>The resource that the task used during execution. For <code>RUN_COMMAND</code> and
                *     <code>AUTOMATION</code> task types, the value of <code>TaskArn</code> is the SSM document
                *    name/ARN. For <code>LAMBDA</code> tasks, the value is the function name/ARN. For
                *     <code>STEP_FUNCTIONS</code> tasks, the value is the state machine ARN.</p>
                */
            TaskArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service
                * (Amazon SNS) notifications for maintenance window Run Command tasks.</p>
                */
            ServiceRoleArn?: string;
            /**
                * <p>The type of task to run.</p>
                */
            TaskType?: MaintenanceWindowTaskType | string;
            /**
                * <p>The parameters to pass to the task when it runs.</p>
                *          <note>
                *             <p>
                *                <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs,
                *       instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information
                *       about how Systems Manager handles these options for the supported maintenance window task
                *       types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
                *          </note>
                */
            TaskParameters?: Record<string, MaintenanceWindowTaskParameterValueExpression>;
            /**
                * <p>The parameters to pass to the task when it runs.</p>
                */
            TaskInvocationParameters?: MaintenanceWindowTaskInvocationParameters;
            /**
                * <p>The priority of the task when it runs. The lower the number, the higher the priority. Tasks
                *    that have the same priority are scheduled in parallel.</p>
                */
            Priority?: number;
            /**
                * <p>The maximum number of targets allowed to run this task in parallel.</p>
                *          <note>
                *             <p>For maintenance window tasks without a target specified, you can't supply a value for this
                *     option. Instead, the system inserts a placeholder value of <code>1</code>, which may be reported
                *     in the response to this command. This value doesn't affect the running of your task and can be
                *     ignored.</p>
                *          </note>
                */
            MaxConcurrency?: string;
            /**
                * <p>The maximum number of errors allowed before the task stops being scheduled.</p>
                *          <note>
                *             <p>For maintenance window tasks without a target specified, you can't supply a value for this
                *     option. Instead, the system inserts a placeholder value of <code>1</code>, which may be reported
                *     in the response to this command. This value doesn't affect the running of your task and can be
                *     ignored.</p>
                *          </note>
                */
            MaxErrors?: string;
            /**
                * <p>The location in Amazon Simple Storage Service (Amazon S3) where the task results are
                *    logged.</p>
                *          <note>
                *             <p>
                *                <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the
                *       <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure.
                *       For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance
                *       window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
                *          </note>
                */
            LoggingInfo?: LoggingInfo;
            /**
                * <p>The retrieved task name.</p>
                */
            Name?: string;
            /**
                * <p>The retrieved task description.</p>
                */
            Description?: string;
            /**
                * <p>The action to take on tasks when the maintenance window cutoff time is reached.
                *     <code>CONTINUE_TASK</code> means that tasks continue to run. For Automation, Lambda, Step Functions tasks, <code>CANCEL_TASK</code> means that currently
                *    running task invocations continue, but no new task invocations are started. For Run Command
                *    tasks, <code>CANCEL_TASK</code> means the system attempts to stop the task by sending a
                *     <code>CancelCommand</code> operation.</p>
                */
            CutoffBehavior?: MaintenanceWindowTaskCutoffBehavior | string;
    }
    export namespace GetMaintenanceWindowTaskResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMaintenanceWindowTaskResult) => any;
    }
    export interface GetOpsItemRequest {
            /**
                * <p>The ID of the OpsItem that you want to get.</p>
                */
            OpsItemId: string | undefined;
    }
    export namespace GetOpsItemRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOpsItemRequest) => any;
    }
    /**
        * <p>Operations engineers and IT professionals use Amazon Web Services Systems Manager OpsCenter to view, investigate, and
        *    remediate operational work items (OpsItems) impacting the performance and health of their Amazon Web Services
        *    resources. OpsCenter is integrated with Amazon EventBridge and Amazon CloudWatch. This
        *    means you can configure these services to automatically create an OpsItem in OpsCenter when a
        *     CloudWatch alarm enters the ALARM state or when EventBridge processes an event from
        *    any Amazon Web Services service that publishes events. Configuring Amazon CloudWatch alarms and EventBridge events to automatically create OpsItems allows you to quickly diagnose and remediate
        *    issues with Amazon Web Services resources from a single console.</p>
        *          <p>To help you diagnose issues, each OpsItem includes contextually relevant information such as
        *    the name and ID of the Amazon Web Services resource that generated the OpsItem, alarm or event details, alarm
        *    history, and an alarm timeline graph. For the Amazon Web Services resource, OpsCenter aggregates information
        *    from Config, CloudTrail logs, and EventBridge, so you don't have
        *    to navigate across multiple console pages during your investigation. For more information, see
        *     <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter.html">OpsCenter</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
        */
    export interface OpsItem {
            /**
                * <p>The ARN of the Amazon Web Services account that created the OpsItem.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The type of OpsItem. Currently, the only valid values are <code>/aws/changerequest</code>
                *    and <code>/aws/issue</code>.</p>
                */
            OpsItemType?: string;
            /**
                * <p>The date and time the OpsItem was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>The OpsItem description.</p>
                */
            Description?: string;
            /**
                * <p>The ARN of the Amazon Web Services account that last updated the OpsItem.</p>
                */
            LastModifiedBy?: string;
            /**
                * <p>The date and time the OpsItem was last updated.</p>
                */
            LastModifiedTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of an Amazon Simple Notification Service (Amazon SNS) topic where
                *    notifications are sent when this OpsItem is edited or changed.</p>
                */
            Notifications?: OpsItemNotification[];
            /**
                * <p>The importance of this OpsItem in relation to other OpsItems in the system.</p>
                */
            Priority?: number;
            /**
                * <p>One or more OpsItems that share something in common with the current OpsItem. For example,
                *    related OpsItems can include OpsItems with similar error messages, impacted resources, or
                *    statuses for the impacted resource.</p>
                */
            RelatedOpsItems?: RelatedOpsItem[];
            /**
                * <p>The OpsItem status. Status can be <code>Open</code>, <code>In Progress</code>, or
                *     <code>Resolved</code>. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-working-with-OpsItems-editing-details.html">Editing OpsItem details</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            Status?: OpsItemStatus | string;
            /**
                * <p>The ID of the OpsItem.</p>
                */
            OpsItemId?: string;
            /**
                * <p>The version of this OpsItem. Each time the OpsItem is edited the version number increments
                *    by one.</p>
                */
            Version?: string;
            /**
                * <p>A short heading that describes the nature of the OpsItem and the impacted resource.</p>
                */
            Title?: string;
            /**
                * <p>The origin of the OpsItem, such as Amazon EC2 or Systems Manager. The impacted resource is a subset of
                *    source.</p>
                */
            Source?: string;
            /**
                * <p>Operational data is custom data that provides useful reference details about the OpsItem.
                *    For example, you can specify log files, error strings, license keys, troubleshooting tips, or
                *    other relevant data. You enter operational data as key-value pairs. The key has a maximum length
                *    of 128 characters. The value has a maximum size of 20 KB.</p>
                *          <important>
                *             <p>Operational data keys <i>can't</i> begin with the following:
                *      <code>amazon</code>, <code>aws</code>, <code>amzn</code>, <code>ssm</code>,
                *      <code>/amazon</code>, <code>/aws</code>, <code>/amzn</code>, <code>/ssm</code>.</p>
                *          </important>
                *          <p>You can choose to make the data searchable by other users in the account or you can restrict
                *    search access. Searchable data means that all users with access to the OpsItem Overview page (as
                *    provided by the <a>DescribeOpsItems</a> API operation) can view and search on the
                *    specified data. Operational data that isn't searchable is only viewable by users who have access
                *    to the OpsItem (as provided by the <a>GetOpsItem</a> API operation).</p>
                *          <p>Use the <code>/aws/resources</code> key in OperationalData to specify a related resource in
                *    the request. Use the <code>/aws/automations</code> key in OperationalData to associate an
                *    Automation runbook with the OpsItem. To view Amazon Web Services CLI example commands that use these keys, see
                *     <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-creating-OpsItems.html#OpsCenter-manually-create-OpsItems">Creating OpsItems manually</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            OperationalData?: Record<string, OpsItemDataValue>;
            /**
                * <p>An OpsItem category. Category options include: Availability, Cost, Performance, Recovery,
                *    Security.</p>
                */
            Category?: string;
            /**
                * <p>The severity of the OpsItem. Severity options range from 1 to 4.</p>
                */
            Severity?: string;
            /**
                * <p>The time a runbook workflow started. Currently reported only for the OpsItem type
                *     <code>/aws/changerequest</code>.</p>
                */
            ActualStartTime?: Date;
            /**
                * <p>The time a runbook workflow ended. Currently reported only for the OpsItem type
                *     <code>/aws/changerequest</code>.</p>
                */
            ActualEndTime?: Date;
            /**
                * <p>The time specified in a change request for a runbook workflow to start. Currently supported
                *    only for the OpsItem type <code>/aws/changerequest</code>.</p>
                */
            PlannedStartTime?: Date;
            /**
                * <p>The time specified in a change request for a runbook workflow to end. Currently supported
                *    only for the OpsItem type <code>/aws/changerequest</code>.</p>
                */
            PlannedEndTime?: Date;
    }
    export namespace OpsItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsItem) => any;
    }
    export interface GetOpsItemResponse {
            /**
                * <p>The OpsItem.</p>
                */
            OpsItem?: OpsItem;
    }
    export namespace GetOpsItemResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOpsItemResponse) => any;
    }
    export interface GetOpsMetadataRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of an OpsMetadata Object to view.</p>
                */
            OpsMetadataArn: string | undefined;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetOpsMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOpsMetadataRequest) => any;
    }
    export interface GetOpsMetadataResult {
            /**
                * <p>The resource ID of the Application Manager application.</p>
                */
            ResourceId?: string;
            /**
                * <p>OpsMetadata for an Application Manager application.</p>
                */
            Metadata?: Record<string, MetadataValue>;
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
    }
    export namespace GetOpsMetadataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOpsMetadataResult) => any;
    }
    export enum OpsFilterOperatorType {
            BEGIN_WITH = "BeginWith",
            EQUAL = "Equal",
            EXISTS = "Exists",
            GREATER_THAN = "GreaterThan",
            LESS_THAN = "LessThan",
            NOT_EQUAL = "NotEqual"
    }
    /**
        * <p>A filter for viewing OpsData summaries.</p>
        */
    export interface OpsFilter {
            /**
                * <p>The name of the filter.</p>
                */
            Key: string | undefined;
            /**
                * <p>The filter value.</p>
                */
            Values: string[] | undefined;
            /**
                * <p>The type of filter.</p>
                */
            Type?: OpsFilterOperatorType | string;
    }
    export namespace OpsFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsFilter) => any;
    }
    /**
        * <p>The OpsItem data type to return.</p>
        */
    export interface OpsResultAttribute {
            /**
                * <p>Name of the data type. Valid value: <code>AWS:OpsItem</code>,
                *     <code>AWS:EC2InstanceInformation</code>, <code>AWS:OpsItemTrendline</code>, or
                *     <code>AWS:ComplianceSummary</code>.</p>
                */
            TypeName: string | undefined;
    }
    export namespace OpsResultAttribute {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsResultAttribute) => any;
    }
    /**
        * <p>The OpsData summary.</p>
        */
    export interface OpsEntityItem {
            /**
                * <p>The time the OpsData was captured.</p>
                */
            CaptureTime?: string;
            /**
                * <p>The details of an OpsData summary.</p>
                */
            Content?: Record<string, string>[];
    }
    export namespace OpsEntityItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsEntityItem) => any;
    }
    /**
        * <p>The result of the query.</p>
        */
    export interface OpsEntity {
            /**
                * <p>The query ID.</p>
                */
            Id?: string;
            /**
                * <p>The data returned by the query.</p>
                */
            Data?: Record<string, OpsEntityItem>;
    }
    export namespace OpsEntity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsEntity) => any;
    }
    export interface GetOpsSummaryResult {
            /**
                * <p>The list of aggregated details and filtered OpsData.</p>
                */
            Entities?: OpsEntity[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
    }
    export namespace GetOpsSummaryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOpsSummaryResult) => any;
    }
    export interface GetParameterRequest {
            /**
                * <p>The name of the parameter you want to query.</p>
                *          <p>To query by parameter label, use <code>"Name": "name:label"</code>. To query by parameter
                *    version, use <code>"Name": "name:version"</code>.</p>
                */
            Name: string | undefined;
            /**
                * <p>Return decrypted values for secure string parameters. This flag is ignored for
                *     <code>String</code> and <code>StringList</code> parameter types.</p>
                */
            WithDecryption?: boolean;
    }
    export namespace GetParameterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetParameterRequest) => any;
    }
    /**
        * <p>An Amazon Web Services Systems Manager parameter in Parameter Store.</p>
        */
    export interface Parameter {
            /**
                * <p>The name of the parameter.</p>
                */
            Name?: string;
            /**
                * <p>The type of parameter. Valid values include the following: <code>String</code>,
                *     <code>StringList</code>, and <code>SecureString</code>.</p>
                *          <note>
                *             <p>If type is <code>StringList</code>, the system returns a comma-separated string with no
                *     spaces between commas in the <code>Value</code> field.</p>
                *          </note>
                */
            Type?: ParameterType | string;
            /**
                * <p>The parameter value.</p>
                *          <note>
                *             <p>If type is <code>StringList</code>, the system returns a comma-separated string with no
                *     spaces between commas in the <code>Value</code> field.</p>
                *          </note>
                */
            Value?: string;
            /**
                * <p>The parameter version.</p>
                */
            Version?: number;
            /**
                * <p>Either the version number or the label used to retrieve the parameter value. Specify
                *    selectors by using one of the following formats:</p>
                *          <p>parameter_name:version</p>
                *          <p>parameter_name:label</p>
                */
            Selector?: string;
            /**
                * <p>Applies to parameters that reference information in other Amazon Web Services services.
                *     <code>SourceResult</code> is the raw result or response from the source.</p>
                */
            SourceResult?: string;
            /**
                * <p>Date the parameter was last changed or updated and the parameter version was created.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the parameter.</p>
                */
            ARN?: string;
            /**
                * <p>The data type of the parameter, such as <code>text</code> or <code>aws:ec2:image</code>. The
                *    default is <code>text</code>.</p>
                */
            DataType?: string;
    }
    export namespace Parameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Parameter) => any;
    }
    export interface GetParameterResult {
            /**
                * <p>Information about a parameter.</p>
                */
            Parameter?: Parameter;
    }
    export namespace GetParameterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetParameterResult) => any;
    }
    /**
        * <p>The query key ID isn't valid.</p>
        */
    export class InvalidKeyId extends __BaseException {
            readonly name: "InvalidKeyId";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidKeyId, __BaseException>);
    }
    /**
        * <p>The specified parameter version wasn't found. Verify the parameter name and version, and try
        *    again.</p>
        */
    export class ParameterVersionNotFound extends __BaseException {
            readonly name: "ParameterVersionNotFound";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ParameterVersionNotFound, __BaseException>);
    }
    export interface GetParameterHistoryRequest {
            /**
                * <p>The name of the parameter for which you want to review history.</p>
                */
            Name: string | undefined;
            /**
                * <p>Return decrypted values for secure string parameters. This flag is ignored for
                *     <code>String</code> and <code>StringList</code> parameter types.</p>
                */
            WithDecryption?: boolean;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace GetParameterHistoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetParameterHistoryRequest) => any;
    }
    /**
        * <p>Information about parameter usage.</p>
        */
    export interface ParameterHistory {
            /**
                * <p>The name of the parameter.</p>
                */
            Name?: string;
            /**
                * <p>The type of parameter used.</p>
                */
            Type?: ParameterType | string;
            /**
                * <p>The ID of the query key used for this parameter.</p>
                */
            KeyId?: string;
            /**
                * <p>Date the parameter was last changed or updated.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>Amazon Resource Name (ARN) of the Amazon Web Services user who last changed the parameter.</p>
                */
            LastModifiedUser?: string;
            /**
                * <p>Information about the parameter.</p>
                */
            Description?: string;
            /**
                * <p>The parameter value.</p>
                */
            Value?: string;
            /**
                * <p>Parameter names can include the following letters and symbols.</p>
                *          <p>a-zA-Z0-9_.-</p>
                */
            AllowedPattern?: string;
            /**
                * <p>The parameter version.</p>
                */
            Version?: number;
            /**
                * <p>Labels assigned to the parameter version.</p>
                */
            Labels?: string[];
            /**
                * <p>The parameter tier.</p>
                */
            Tier?: ParameterTier | string;
            /**
                * <p>Information about the policies assigned to a parameter.</p>
                *          <p>
                *             <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html">Assigning parameter
                *     policies</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            Policies?: ParameterInlinePolicy[];
            /**
                * <p>The data type of the parameter, such as <code>text</code> or <code>aws:ec2:image</code>. The
                *    default is <code>text</code>.</p>
                */
            DataType?: string;
    }
    export namespace ParameterHistory {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ParameterHistory) => any;
    }
    export interface GetParameterHistoryResult {
            /**
                * <p>A list of parameters returned by the request.</p>
                */
            Parameters?: ParameterHistory[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace GetParameterHistoryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetParameterHistoryResult) => any;
    }
    export interface GetParametersRequest {
            /**
                * <p>Names of the parameters for which you want to query information.</p>
                *          <p>To query by parameter label, use <code>"Name": "name:label"</code>. To query by parameter
                *    version, use <code>"Name": "name:version"</code>.</p>
                */
            Names: string[] | undefined;
            /**
                * <p>Return decrypted secure string value. Return decrypted values for secure string parameters.
                *    This flag is ignored for <code>String</code> and <code>StringList</code> parameter types.</p>
                */
            WithDecryption?: boolean;
    }
    export namespace GetParametersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetParametersRequest) => any;
    }
    export interface GetParametersResult {
            /**
                * <p>A list of details for a parameter.</p>
                */
            Parameters?: Parameter[];
            /**
                * <p>A list of parameters that aren't formatted correctly or don't run during an
                *    execution.</p>
                */
            InvalidParameters?: string[];
    }
    export namespace GetParametersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetParametersResult) => any;
    }
    export interface GetParametersByPathRequest {
            /**
                * <p>The hierarchy for the parameter. Hierarchies start with a forward slash (/). The hierarchy
                *    is the parameter name except the last part of the parameter. For the API call to succeed, the
                *    last part of the parameter name can't be in the path. A parameter name hierarchy can have a
                *    maximum of 15 levels. Here is an example of a hierarchy:
                *     <code>/Finance/Prod/IAD/WinServ2016/license33 </code>
                *          </p>
                */
            Path: string | undefined;
            /**
                * <p>Retrieve all parameters within a hierarchy.</p>
                *          <important>
                *             <p>If a user has access to a path, then the user can access all levels of that path. For
                *     example, if a user has permission to access path <code>/a</code>, then the user can also access
                *      <code>/a/b</code>. Even if a user has explicitly been denied access in IAM for
                *     parameter <code>/a/b</code>, they can still call the GetParametersByPath API operation
                *     recursively for <code>/a</code> and view <code>/a/b</code>.</p>
                *          </important>
                */
            Recursive?: boolean;
            /**
                * <p>Filters to limit the request results.</p>
                *          <note>
                *             <p>The following <code>Key</code> values are supported for <code>GetParametersByPath</code>:
                *      <code>Type</code>, <code>KeyId</code>, and <code>Label</code>.</p>
                *             <p>The following <code>Key</code> values aren't supported for
                *     <code>GetParametersByPath</code>: <code>tag</code>, <code>DataType</code>, <code>Name</code>,
                *      <code>Path</code>, and <code>Tier</code>.</p>
                *          </note>
                */
            ParameterFilters?: ParameterStringFilter[];
            /**
                * <p>Retrieve all parameters in a hierarchy with their value decrypted.</p>
                */
            WithDecryption?: boolean;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results. </p>
                */
            NextToken?: string;
    }
    export namespace GetParametersByPathRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetParametersByPathRequest) => any;
    }
    export interface GetParametersByPathResult {
            /**
                * <p>A list of parameters found in the specified hierarchy.</p>
                */
            Parameters?: Parameter[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
    }
    export namespace GetParametersByPathResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetParametersByPathResult) => any;
    }
    export interface GetPatchBaselineRequest {
            /**
                * <p>The ID of the patch baseline to retrieve.</p>
                *          <note>
                *             <p>To retrieve information about an Amazon Web Services managed patch baseline, specify the full Amazon
                *     Resource Name (ARN) of the baseline. For example, for the baseline
                *      <code>AWS-AmazonLinuxDefaultPatchBaseline</code>, specify
                *      <code>arn:aws:ssm:us-east-2:733109147000:patchbaseline/pb-0e392de35e7c563b7</code> instead of
                *      <code>pb-0e392de35e7c563b7</code>.</p>
                *          </note>
                */
            BaselineId: string | undefined;
    }
    export namespace GetPatchBaselineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPatchBaselineRequest) => any;
    }
    export interface GetPatchBaselineResult {
            /**
                * <p>The ID of the retrieved patch baseline.</p>
                */
            BaselineId?: string;
            /**
                * <p>The name of the patch baseline.</p>
                */
            Name?: string;
            /**
                * <p>Returns the operating system specified for the patch baseline.</p>
                */
            OperatingSystem?: OperatingSystem | string;
            /**
                * <p>A set of global filters used to exclude patches from the baseline.</p>
                */
            GlobalFilters?: PatchFilterGroup;
            /**
                * <p>A set of rules used to include patches in the baseline.</p>
                */
            ApprovalRules?: PatchRuleGroup;
            /**
                * <p>A list of explicitly approved patches for the baseline.</p>
                */
            ApprovedPatches?: string[];
            /**
                * <p>Returns the specified compliance severity level for approved patches in the patch
                *    baseline.</p>
                */
            ApprovedPatchesComplianceLevel?: PatchComplianceLevel | string;
            /**
                * <p>Indicates whether the list of approved patches includes non-security updates that should be
                *    applied to the managed nodes. The default value is <code>false</code>. Applies to Linux managed
                *    nodes only.</p>
                */
            ApprovedPatchesEnableNonSecurity?: boolean;
            /**
                * <p>A list of explicitly rejected patches for the baseline.</p>
                */
            RejectedPatches?: string[];
            /**
                * <p>The action specified to take on patches included in the <code>RejectedPatches</code> list. A
                *    patch can be allowed only if it is a dependency of another package, or blocked entirely along
                *    with packages that include it as a dependency.</p>
                */
            RejectedPatchesAction?: PatchAction | string;
            /**
                * <p>Patch groups included in the patch baseline.</p>
                */
            PatchGroups?: string[];
            /**
                * <p>The date the patch baseline was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The date the patch baseline was last modified.</p>
                */
            ModifiedDate?: Date;
            /**
                * <p>A description of the patch baseline.</p>
                */
            Description?: string;
            /**
                * <p>Information about the patches to use to update the managed nodes, including target operating
                *    systems and source repositories. Applies to Linux managed nodes only.</p>
                */
            Sources?: PatchSource[];
    }
    export namespace GetPatchBaselineResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPatchBaselineResult) => any;
    }
    export interface GetPatchBaselineForPatchGroupRequest {
            /**
                * <p>The name of the patch group whose patch baseline should be retrieved.</p>
                */
            PatchGroup: string | undefined;
            /**
                * <p>Returns the operating system rule specified for patch groups using the patch
                *    baseline.</p>
                */
            OperatingSystem?: OperatingSystem | string;
    }
    export namespace GetPatchBaselineForPatchGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPatchBaselineForPatchGroupRequest) => any;
    }
    export interface GetPatchBaselineForPatchGroupResult {
            /**
                * <p>The ID of the patch baseline that should be used for the patch group.</p>
                */
            BaselineId?: string;
            /**
                * <p>The name of the patch group.</p>
                */
            PatchGroup?: string;
            /**
                * <p>The operating system rule specified for patch groups using the patch baseline.</p>
                */
            OperatingSystem?: OperatingSystem | string;
    }
    export namespace GetPatchBaselineForPatchGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPatchBaselineForPatchGroupResult) => any;
    }
    /**
        * <p>The request body of the GetServiceSetting API operation.</p>
        */
    export interface GetServiceSettingRequest {
            /**
                * <p>The ID of the service setting to get. The setting ID can be one of the following.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>/ssm/automation/customer-script-log-destination</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/automation/customer-script-log-group-name</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/documents/console/public-sharing-permission</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/parameter-store/default-parameter-tier</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/parameter-store/high-throughput-enabled</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/managed-instance/activation-tier</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            SettingId: string | undefined;
    }
    export namespace GetServiceSettingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServiceSettingRequest) => any;
    }
    /**
        * <p>The service setting data structure.</p>
        *          <p>
        *             <code>ServiceSetting</code> is an account-level setting for an Amazon Web Services service. This setting
        *    defines how a user interacts with or uses a service or a feature of a service. For example, if an
        *    Amazon Web Services service charges money to the account based on feature or service usage, then the Amazon Web Services
        *    service team might create a default setting of "false". This means the user can't use this
        *    feature unless they change the setting to "true" and intentionally opt in for a paid
        *    feature.</p>
        *          <p>Services map a <code>SettingId</code> object to a setting value. Amazon Web Services services teams define
        *    the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>,
        *    but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code>
        *    permission for the setting. Use the <a>UpdateServiceSetting</a> API operation to
        *    change the default setting. Or, use the <a>ResetServiceSetting</a> to change the value
        *    back to the original value defined by the Amazon Web Services service team.</p>
        */
    export interface ServiceSetting {
            /**
                * <p>The ID of the service setting.</p>
                */
            SettingId?: string;
            /**
                * <p>The value of the service setting.</p>
                */
            SettingValue?: string;
            /**
                * <p>The last time the service setting was modified.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The ARN of the last modified user. This field is populated only if the setting value was
                *    overwritten.</p>
                */
            LastModifiedUser?: string;
            /**
                * <p>The ARN of the service setting.</p>
                */
            ARN?: string;
            /**
                * <p>The status of the service setting. The value can be Default, Customized or
                *    PendingUpdate.</p>
                *          <ul>
                *             <li>
                *                <p>Default: The current setting uses a default value provisioned by the Amazon Web Services service
                *      team.</p>
                *             </li>
                *             <li>
                *                <p>Customized: The current setting use a custom value specified by the customer.</p>
                *             </li>
                *             <li>
                *                <p>PendingUpdate: The current setting uses a default or custom value, but a setting change
                *      request is pending approval.</p>
                *             </li>
                *          </ul>
                */
            Status?: string;
    }
    export namespace ServiceSetting {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceSetting) => any;
    }
    /**
        * <p>The query result body of the GetServiceSetting API operation.</p>
        */
    export interface GetServiceSettingResult {
            /**
                * <p>The query result of the current service setting.</p>
                */
            ServiceSetting?: ServiceSetting;
    }
    export namespace GetServiceSettingResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServiceSettingResult) => any;
    }
    /**
        * <p>The specified service setting wasn't found. Either the service name or the setting hasn't
        *    been provisioned by the Amazon Web Services service team.</p>
        */
    export class ServiceSettingNotFound extends __BaseException {
            readonly name: "ServiceSettingNotFound";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceSettingNotFound, __BaseException>);
    }
    export interface LabelParameterVersionRequest {
            /**
                * <p>The parameter name on which you want to attach one or more labels.</p>
                */
            Name: string | undefined;
            /**
                * <p>The specific version of the parameter on which you want to attach one or more labels. If no
                *    version is specified, the system attaches the label to the latest version.</p>
                */
            ParameterVersion?: number;
            /**
                * <p>One or more labels to attach to the specified parameter version.</p>
                */
            Labels: string[] | undefined;
    }
    export namespace LabelParameterVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelParameterVersionRequest) => any;
    }
    export interface LabelParameterVersionResult {
            /**
                * <p>The label doesn't meet the requirements. For information about parameter label requirements,
                *    see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-labels.html">Labeling parameters</a>
                *    in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            InvalidLabels?: string[];
            /**
                * <p>The version of the parameter that has been labeled.</p>
                */
            ParameterVersion?: number;
    }
    export namespace LabelParameterVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LabelParameterVersionResult) => any;
    }
    /**
        * <p>A parameter version can have a maximum of ten labels.</p>
        */
    export class ParameterVersionLabelLimitExceeded extends __BaseException {
            readonly name: "ParameterVersionLabelLimitExceeded";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ParameterVersionLabelLimitExceeded, __BaseException>);
    }
    export enum AssociationFilterKey {
            AssociationId = "AssociationId",
            AssociationName = "AssociationName",
            InstanceId = "InstanceId",
            LastExecutedAfter = "LastExecutedAfter",
            LastExecutedBefore = "LastExecutedBefore",
            Name = "Name",
            ResourceGroupName = "ResourceGroupName",
            Status = "AssociationStatusName"
    }
    /**
        * <p>Describes a filter.</p>
        */
    export interface AssociationFilter {
            /**
                * <p>The name of the filter.</p>
                *          <note>
                *             <p>
                *                <code>InstanceId</code> has been deprecated.</p>
                *          </note>
                */
            key: AssociationFilterKey | string | undefined;
            /**
                * <p>The filter value.</p>
                */
            value: string | undefined;
    }
    export namespace AssociationFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociationFilter) => any;
    }
    export interface ListAssociationsRequest {
            /**
                * <p>One or more filters. Use a filter to return a more specific list of results.</p>
                *          <note>
                *             <p>Filtering associations using the <code>InstanceID</code> attribute only returns legacy
                *     associations created using the <code>InstanceID</code> attribute. Associations targeting the
                *     managed node that are part of the Target Attributes <code>ResourceGroup</code> or
                *      <code>Tags</code> aren't returned.</p>
                *          </note>
                */
            AssociationFilterList?: AssociationFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace ListAssociationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssociationsRequest) => any;
    }
    /**
        * <p>Describes an association of a Amazon Web Services Systems Manager document (SSM document) and a managed node.</p>
        */
    export interface Association {
            /**
                * <p>The name of the SSM document.</p>
                */
            Name?: string;
            /**
                * <p>The managed node ID.</p>
                */
            InstanceId?: string;
            /**
                * <p>The ID created by the system when you create an association. An association is a binding
                *    between a document and a set of targets with a schedule.</p>
                */
            AssociationId?: string;
            /**
                * <p>The association version.</p>
                */
            AssociationVersion?: string;
            /**
                * <p>The version of the document used in the association. If you change a document version for a
                *    State Manager association, Systems Manager immediately runs the association unless you previously specifed
                *    the <code>apply-only-at-cron-interval</code> parameter.</p>
                *
                *          <important>
                *             <p>State Manager doesn't support running associations that use a new version of a document if
                *     that document is shared from another account. State Manager always runs the <code>default</code>
                *     version of a document if shared from another account, even though the Systems Manager console shows that a
                *     new version was processed. If you want to run an association using a new version of a document
                *     shared form another account, you must set the document version to <code>default</code>.</p>
                *          </important>
                */
            DocumentVersion?: string;
            /**
                * <p>The managed nodes targeted by the request to create an association. You can target all
                *    managed nodes in an Amazon Web Services account by specifying the <code>InstanceIds</code> key with a value of
                *     <code>*</code>.</p>
                */
            Targets?: Target[];
            /**
                * <p>The date on which the association was last run.</p>
                */
            LastExecutionDate?: Date;
            /**
                * <p>Information about the association.</p>
                */
            Overview?: AssociationOverview;
            /**
                * <p>A cron expression that specifies a schedule when the association runs. The schedule runs in
                *    Coordinated Universal Time (UTC).</p>
                */
            ScheduleExpression?: string;
            /**
                * <p>The association name.</p>
                */
            AssociationName?: string;
            /**
                * <p>Number of days to wait after the scheduled day to run an association.</p>
                */
            ScheduleOffset?: number;
            /**
                * <p>A key-value mapping of document parameters to target resources. Both Targets and TargetMaps
                *    can't be specified together.</p>
                */
            TargetMaps?: Record<string, string[]>[];
    }
    export namespace Association {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Association) => any;
    }
    export interface ListAssociationsResult {
            /**
                * <p>The associations.</p>
                */
            Associations?: Association[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace ListAssociationsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssociationsResult) => any;
    }
    export interface ListAssociationVersionsRequest {
            /**
                * <p>The association ID for which you want to view all versions.</p>
                */
            AssociationId: string | undefined;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results. </p>
                */
            NextToken?: string;
    }
    export namespace ListAssociationVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssociationVersionsRequest) => any;
    }
    /**
        * <p>Information about the association version.</p>
        */
    export interface AssociationVersionInfo {
            /**
                * <p>The ID created by the system when the association was created.</p>
                */
            AssociationId?: string;
            /**
                * <p>The association version.</p>
                */
            AssociationVersion?: string;
            /**
                * <p>The date the association version was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The name specified when the association was created.</p>
                */
            Name?: string;
            /**
                * <p>The version of an Amazon Web Services Systems Manager document (SSM document) used when the association version was
                *    created.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>Parameters specified when the association version was created.</p>
                */
            Parameters?: Record<string, string[]>;
            /**
                * <p>The targets specified for the association when the association version was created. </p>
                */
            Targets?: Target[];
            /**
                * <p>The cron or rate schedule specified for the association when the association version was
                *    created.</p>
                */
            ScheduleExpression?: string;
            /**
                * <p>The location in Amazon S3 specified for the association when the association version
                *    was created.</p>
                */
            OutputLocation?: InstanceAssociationOutputLocation;
            /**
                * <p>The name specified for the association version when the association version was
                *    created.</p>
                */
            AssociationName?: string;
            /**
                * <p>The number of errors that are allowed before the system stops sending requests to run the
                *    association on additional targets. You can specify either an absolute number of errors, for
                *    example 10, or a percentage of the target set, for example 10%. If you specify 3, for example,
                *    the system stops sending requests when the fourth error is received. If you specify 0, then the
                *    system stops sending requests after the first error is returned. If you run an association on 50
                *    managed nodes and set <code>MaxError</code> to 10%, then the system stops sending the request
                *    when the sixth error is received.</p>
                *          <p>Executions that are already running an association when <code>MaxErrors</code> is reached
                *    are allowed to complete, but some of these executions may fail as well. If you need to ensure
                *    that there won't be more than max-errors failed executions, set <code>MaxConcurrency</code> to 1
                *    so that executions proceed one at a time.</p>
                */
            MaxErrors?: string;
            /**
                * <p>The maximum number of targets allowed to run the association at the same time. You can
                *    specify a number, for example 10, or a percentage of the target set, for example 10%. The default
                *    value is 100%, which means all targets run the association at the same time.</p>
                *          <p>If a new managed node starts and attempts to run an association while Systems Manager is running
                *     <code>MaxConcurrency</code> associations, the association is allowed to run. During the next
                *    association interval, the new managed node will process its association within the limit
                *    specified for <code>MaxConcurrency</code>.</p>
                */
            MaxConcurrency?: string;
            /**
                * <p>The severity level that is assigned to the association.</p>
                */
            ComplianceSeverity?: AssociationComplianceSeverity | string;
            /**
                * <p>The mode for generating association compliance. You can specify <code>AUTO</code> or
                *     <code>MANUAL</code>. In <code>AUTO</code> mode, the system uses the status of the association
                *    execution to determine the compliance status. If the association execution runs successfully,
                *    then the association is <code>COMPLIANT</code>. If the association execution doesn't run
                *    successfully, the association is <code>NON-COMPLIANT</code>.</p>
                *          <p>In <code>MANUAL</code> mode, you must specify the <code>AssociationId</code> as a parameter
                *    for the <a>PutComplianceItems</a> API operation. In this case, compliance data isn't
                *    managed by State Manager, a capability of Amazon Web Services Systems Manager. It is managed by your direct call to the
                *     <a>PutComplianceItems</a> API operation.</p>
                *          <p>By default, all associations use <code>AUTO</code> mode.</p>
                */
            SyncCompliance?: AssociationSyncCompliance | string;
            /**
                * <p>By default, when you create a new associations, the system runs it immediately after it is
                *    created and then according to the schedule you specified. Specify this option if you don't want
                *    an association to run immediately after you create it. This parameter isn't supported for rate
                *    expressions.</p>
                */
            ApplyOnlyAtCronInterval?: boolean;
            /**
                * <p>The names or Amazon Resource Names (ARNs) of the Change Calendar type documents your
                *    associations are gated under. The associations for this version only run when that Change
                *    Calendar is open. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar">Amazon Web Services Systems Manager Change
                *     Calendar</a>.</p>
                */
            CalendarNames?: string[];
            /**
                * <p>The combination of Amazon Web Services Regions and Amazon Web Services accounts where you wanted to run the association
                *    when this association version was created.</p>
                */
            TargetLocations?: TargetLocation[];
            /**
                * <p>Number of days to wait after the scheduled day to run an association.</p>
                */
            ScheduleOffset?: number;
            /**
                * <p>A key-value mapping of document parameters to target resources. Both Targets and TargetMaps
                *    can't be specified together.</p>
                */
            TargetMaps?: Record<string, string[]>[];
    }
    export namespace AssociationVersionInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociationVersionInfo) => any;
    }
    export interface ListAssociationVersionsResult {
            /**
                * <p>Information about all versions of the association for the specified association ID.</p>
                */
            AssociationVersions?: AssociationVersionInfo[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
    }
    export namespace ListAssociationVersionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssociationVersionsResult) => any;
    }
    export enum CommandFilterKey {
            DOCUMENT_NAME = "DocumentName",
            EXECUTION_STAGE = "ExecutionStage",
            INVOKED_AFTER = "InvokedAfter",
            INVOKED_BEFORE = "InvokedBefore",
            STATUS = "Status"
    }
    /**
        * <p>Describes a command filter.</p>
        *          <note>
        *             <p>A managed node ID can't be specified when a command status is <code>Pending</code> because
        *     the command hasn't run on the node yet.</p>
        *          </note>
        */
    export interface CommandFilter {
            /**
                * <p>The name of the filter.</p>
                *          <note>
                *             <p>The <code>ExecutionStage</code> filter can't be used with the
                *      <code>ListCommandInvocations</code> operation, only with <code>ListCommands</code>.</p>
                *          </note>
                */
            key: CommandFilterKey | string | undefined;
            /**
                * <p>The filter value. Valid values for each filter key are as follows:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>InvokedAfter</b>: Specify a timestamp to limit your results.
                *      For example, specify <code>2021-07-07T00:00:00Z</code> to see a list of command executions
                *      occurring July 7, 2021, and later.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>InvokedBefore</b>: Specify a timestamp to limit your results.
                *      For example, specify <code>2021-07-07T00:00:00Z</code> to see a list of command executions from
                *      before July 7, 2021.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Status</b>: Specify a valid command status to see a list of
                *      all command executions with that status. The status choices depend on the API you call.</p>
                *                <p>The status values you can specify for <code>ListCommands</code> are:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>Pending</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>InProgress</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Success</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Cancelled</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Failed</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>TimedOut</code> (this includes both Delivery and Execution time outs) </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>AccessDenied</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>DeliveryTimedOut</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>ExecutionTimedOut</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Incomplete</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>NoInstancesInTag</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>LimitExceeded</code>
                *                      </p>
                *                   </li>
                *                </ul>
                *                <p>The status values you can specify for <code>ListCommandInvocations</code> are:</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>Pending</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>InProgress</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Delayed</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Success</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Cancelled</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Failed</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>TimedOut</code> (this includes both Delivery and Execution time outs) </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>AccessDenied</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>DeliveryTimedOut</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>ExecutionTimedOut</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Undeliverable</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>InvalidPlatform</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Terminated</code>
                *                      </p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>DocumentName</b>: Specify name of the Amazon Web Services Systems Manager document (SSM
                *      document) for which you want to see command execution results. For example, specify
                *       <code>AWS-RunPatchBaseline</code> to see command executions that used this SSM document to
                *      perform security patching operations on managed nodes. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>ExecutionStage</b>: Specify one of the following values
                *       (<code>ListCommands</code> operations only):</p>
                *                <ul>
                *                   <li>
                *                      <p>
                *                         <code>Executing</code>: Returns a list of command executions that are currently still
                *        running.</p>
                *                   </li>
                *                   <li>
                *                      <p>
                *                         <code>Complete</code>: Returns a list of command executions that have already completed.
                *       </p>
                *                   </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            value: string | undefined;
    }
    export namespace CommandFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CommandFilter) => any;
    }
    export interface ListCommandInvocationsRequest {
            /**
                * <p>(Optional) The invocations for a specific command ID.</p>
                */
            CommandId?: string;
            /**
                * <p>(Optional) The command execution details for a specific managed node ID.</p>
                */
            InstanceId?: string;
            /**
                * <p>(Optional) The maximum number of items to return for this call. The call also returns a
                *    token that you can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>(Optional) The token for the next set of items to return. (You received this token from a
                *    previous call.)</p>
                */
            NextToken?: string;
            /**
                * <p>(Optional) One or more filters. Use a filter to return a more specific list of
                *    results.</p>
                */
            Filters?: CommandFilter[];
            /**
                * <p>(Optional) If set this returns the response of the command executions and any command
                *    output. The default value is <code>false</code>. </p>
                */
            Details?: boolean;
    }
    export namespace ListCommandInvocationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCommandInvocationsRequest) => any;
    }
    export enum CommandPluginStatus {
            CANCELLED = "Cancelled",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            PENDING = "Pending",
            SUCCESS = "Success",
            TIMED_OUT = "TimedOut"
    }
    /**
        * <p>Describes plugin details.</p>
        */
    export interface CommandPlugin {
            /**
                * <p>The name of the plugin. Must be one of the following: <code>aws:updateAgent</code>,
                *     <code>aws:domainjoin</code>, <code>aws:applications</code>,
                *    <code>aws:runPowerShellScript</code>, <code>aws:psmodule</code>, <code>aws:cloudWatch</code>,
                *     <code>aws:runShellScript</code>, or <code>aws:updateSSMAgent</code>. </p>
                */
            Name?: string;
            /**
                * <p>The status of this plugin. You can run a document with multiple plugins.</p>
                */
            Status?: CommandPluginStatus | string;
            /**
                * <p>A detailed status of the plugin execution. <code>StatusDetails</code> includes more
                *    information than Status because it includes states resulting from error and concurrency control
                *    parameters. StatusDetails can show different results than Status. For more information about
                *    these statuses, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html">Understanding command
                *     statuses</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. StatusDetails can be one of the
                *    following values:</p>
                *          <ul>
                *             <li>
                *                <p>Pending: The command hasn't been sent to the managed node.</p>
                *             </li>
                *             <li>
                *                <p>In Progress: The command has been sent to the managed node but hasn't reached a terminal
                *      state.</p>
                *             </li>
                *             <li>
                *                <p>Success: The execution of the command or plugin was successfully completed. This is a
                *      terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Delivery Timed Out: The command wasn't delivered to the managed node before the delivery
                *      timeout expired. Delivery timeouts don't count against the parent command's
                *       <code>MaxErrors</code> limit, but they do contribute to whether the parent command status is
                *      Success or Incomplete. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Execution Timed Out: Command execution started on the managed node, but the execution
                *      wasn't complete before the execution timeout expired. Execution timeouts count against the
                *       <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Failed: The command wasn't successful on the managed node. For a plugin, this indicates
                *      that the result code wasn't zero. For a command invocation, this indicates that the result code
                *      for one or more plugins wasn't zero. Invocation failures count against the MaxErrors limit of
                *      the parent command. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Cancelled: The command was terminated before it was completed. This is a terminal
                *      state.</p>
                *             </li>
                *             <li>
                *                <p>Undeliverable: The command can't be delivered to the managed node. The managed node might
                *      not exist, or it might not be responding. Undeliverable invocations don't count against the
                *      parent command's MaxErrors limit, and they don't contribute to whether the parent command
                *      status is Success or Incomplete. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Terminated: The parent command exceeded its MaxErrors limit and subsequent command
                *      invocations were canceled by the system. This is a terminal state.</p>
                *             </li>
                *          </ul>
                */
            StatusDetails?: string;
            /**
                * <p>A numeric response code generated after running the plugin. </p>
                */
            ResponseCode?: number;
            /**
                * <p>The time the plugin started running. </p>
                */
            ResponseStartDateTime?: Date;
            /**
                * <p>The time the plugin stopped running. Could stop prematurely if, for example, a cancel
                *    command was sent. </p>
                */
            ResponseFinishDateTime?: Date;
            /**
                * <p>Output of the plugin execution.</p>
                */
            Output?: string;
            /**
                * <p>The URL for the complete text written by the plugin to stdout in Amazon S3. If the
                *    S3 bucket for the command wasn't specified, then this string is empty.</p>
                */
            StandardOutputUrl?: string;
            /**
                * <p>The URL for the complete text written by the plugin to stderr. If execution isn't yet
                *    complete, then this string is empty.</p>
                */
            StandardErrorUrl?: string;
            /**
                * <p>(Deprecated) You can no longer specify this parameter. The system ignores it. Instead,
                *    Amazon Web Services Systems Manager automatically determines the S3 bucket region.</p>
                */
            OutputS3Region?: string;
            /**
                * <p>The S3 bucket where the responses to the command executions should be stored. This was
                *    requested when issuing the command. For example, in the following response:</p>
                *          <p>
                *             <code>doc-example-bucket/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-02573cafcfEXAMPLE/awsrunShellScript</code>
                *          </p>
                *          <p>
                *             <code>doc-example-bucket</code> is the name of the S3 bucket;</p>
                *          <p>
                *             <code>ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix</code> is the name of the S3 prefix;</p>
                *          <p>
                *             <code>i-02573cafcfEXAMPLE</code> is the managed node ID;</p>
                *          <p>
                *             <code>awsrunShellScript</code> is the name of the plugin.</p>
                */
            OutputS3BucketName?: string;
            /**
                * <p>The S3 directory path inside the bucket where the responses to the command executions should
                *    be stored. This was requested when issuing the command. For example, in the following
                *    response:</p>
                *          <p>
                *             <code>doc-example-bucket/ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix/i-02573cafcfEXAMPLE/awsrunShellScript</code>
                *          </p>
                *          <p>
                *             <code>doc-example-bucket</code> is the name of the S3 bucket;</p>
                *          <p>
                *             <code>ab19cb99-a030-46dd-9dfc-8eSAMPLEPre-Fix</code> is the name of the S3 prefix;</p>
                *          <p>
                *             <code>i-02573cafcfEXAMPLE</code> is the managed node ID;</p>
                *          <p>
                *             <code>awsrunShellScript</code> is the name of the plugin.</p>
                */
            OutputS3KeyPrefix?: string;
    }
    export namespace CommandPlugin {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CommandPlugin) => any;
    }
    /**
        * <p>An invocation is a copy of a command sent to a specific managed node. A command can apply to
        *    one or more managed nodes. A command invocation applies to one managed node. For example, if a
        *    user runs <code>SendCommand</code> against three managed nodes, then a command invocation is
        *    created for each requested managed node ID. A command invocation returns status and detail
        *    information about a command you ran. </p>
        */
    export interface CommandInvocation {
            /**
                * <p>The command against which this invocation was requested.</p>
                */
            CommandId?: string;
            /**
                * <p>The managed node ID in which this invocation was requested.</p>
                */
            InstanceId?: string;
            /**
                * <p>The fully qualified host name of the managed node.</p>
                */
            InstanceName?: string;
            /**
                * <p>User-specified information about the command, such as a brief description of what the
                *    command should do.</p>
                */
            Comment?: string;
            /**
                * <p>The document name that was requested for execution.</p>
                */
            DocumentName?: string;
            /**
                * <p>The Systems Manager document (SSM document) version.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The time and date the request was sent to this managed node.</p>
                */
            RequestedDateTime?: Date;
            /**
                * <p>Whether or not the invocation succeeded, failed, or is pending.</p>
                */
            Status?: CommandInvocationStatus | string;
            /**
                * <p>A detailed status of the command execution for each invocation (each managed node targeted
                *    by the command). StatusDetails includes more information than Status because it includes states
                *    resulting from error and concurrency control parameters. StatusDetails can show different results
                *    than Status. For more information about these statuses, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html">Understanding command
                *     statuses</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. StatusDetails can be one of the
                *    following values:</p>
                *          <ul>
                *             <li>
                *                <p>Pending: The command hasn't been sent to the managed node.</p>
                *             </li>
                *             <li>
                *                <p>In Progress: The command has been sent to the managed node but hasn't reached a terminal
                *      state.</p>
                *             </li>
                *             <li>
                *                <p>Success: The execution of the command or plugin was successfully completed. This is a
                *      terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Delivery Timed Out: The command wasn't delivered to the managed node before the delivery
                *      timeout expired. Delivery timeouts don't count against the parent command's
                *       <code>MaxErrors</code> limit, but they do contribute to whether the parent command status is
                *      Success or Incomplete. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Execution Timed Out: Command execution started on the managed node, but the execution
                *      wasn't complete before the execution timeout expired. Execution timeouts count against the
                *       <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Failed: The command wasn't successful on the managed node. For a plugin, this indicates
                *      that the result code wasn't zero. For a command invocation, this indicates that the result code
                *      for one or more plugins wasn't zero. Invocation failures count against the
                *       <code>MaxErrors</code> limit of the parent command. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Cancelled: The command was terminated before it was completed. This is a terminal
                *      state.</p>
                *             </li>
                *             <li>
                *                <p>Undeliverable: The command can't be delivered to the managed node. The managed node might
                *      not exist or might not be responding. Undeliverable invocations don't count against the parent
                *      command's MaxErrors limit and don't contribute to whether the parent command status is Success
                *      or Incomplete. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Terminated: The parent command exceeded its MaxErrors limit and subsequent command
                *      invocations were canceled by the system. This is a terminal state.</p>
                *             </li>
                *          </ul>
                */
            StatusDetails?: string;
            /**
                * <p> Gets the trace output sent by the agent. </p>
                */
            TraceOutput?: string;
            /**
                * <p>The URL to the plugin's StdOut file in Amazon Simple Storage Service (Amazon S3), if the S3
                *    bucket was defined for the parent command. For an invocation, <code>StandardOutputUrl</code> is
                *    populated if there is just one plugin defined for the command, and the S3 bucket was defined for
                *    the command.</p>
                */
            StandardOutputUrl?: string;
            /**
                * <p>The URL to the plugin's StdErr file in Amazon Simple Storage Service (Amazon S3), if the S3
                *    bucket was defined for the parent command. For an invocation, <code>StandardErrorUrl</code> is
                *    populated if there is just one plugin defined for the command, and the S3 bucket was defined for
                *    the command.</p>
                */
            StandardErrorUrl?: string;
            /**
                * <p>Plugins processed by the command.</p>
                */
            CommandPlugins?: CommandPlugin[];
            /**
                * <p>The Identity and Access Management (IAM) service role that Run Command, a capability
                *    of Amazon Web Services Systems Manager, uses to act on your behalf when sending notifications about command status changes
                *    on a per managed node basis.</p>
                */
            ServiceRole?: string;
            /**
                * <p>Configurations for sending notifications about command status changes on a per managed node
                *    basis.</p>
                */
            NotificationConfig?: NotificationConfig;
            /**
                * <p>Amazon CloudWatch Logs information where you want Amazon Web Services Systems Manager to send the command
                *    output.</p>
                */
            CloudWatchOutputConfig?: CloudWatchOutputConfig;
    }
    export namespace CommandInvocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CommandInvocation) => any;
    }
    export interface ListCommandInvocationsResult {
            /**
                * <p>(Optional) A list of all invocations. </p>
                */
            CommandInvocations?: CommandInvocation[];
            /**
                * <p>(Optional) The token for the next set of items to return. (You received this token from a
                *    previous call.)</p>
                */
            NextToken?: string;
    }
    export namespace ListCommandInvocationsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCommandInvocationsResult) => any;
    }
    export interface ListCommandsRequest {
            /**
                * <p>(Optional) If provided, lists only the specified command.</p>
                */
            CommandId?: string;
            /**
                * <p>(Optional) Lists commands issued against this managed node ID.</p>
                *          <note>
                *             <p>You can't specify a managed node ID in the same command that you specify
                *      <code>Status</code> = <code>Pending</code>. This is because the command hasn't reached the
                *     managed node yet.</p>
                *          </note>
                */
            InstanceId?: string;
            /**
                * <p>(Optional) The maximum number of items to return for this call. The call also returns a
                *    token that you can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>(Optional) The token for the next set of items to return. (You received this token from a
                *    previous call.)</p>
                */
            NextToken?: string;
            /**
                * <p>(Optional) One or more filters. Use a filter to return a more specific list of results.
                *   </p>
                */
            Filters?: CommandFilter[];
    }
    export namespace ListCommandsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCommandsRequest) => any;
    }
    export enum CommandStatus {
            CANCELLED = "Cancelled",
            CANCELLING = "Cancelling",
            FAILED = "Failed",
            IN_PROGRESS = "InProgress",
            PENDING = "Pending",
            SUCCESS = "Success",
            TIMED_OUT = "TimedOut"
    }
    /**
        * <p>Describes a command request.</p>
        */
    export interface Command {
            /**
                * <p>A unique identifier for this command.</p>
                */
            CommandId?: string;
            /**
                * <p>The name of the document requested for execution.</p>
                */
            DocumentName?: string;
            /**
                * <p>The Systems Manager document (SSM document) version.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>User-specified information about the command, such as a brief description of what the
                *    command should do.</p>
                */
            Comment?: string;
            /**
                * <p>If this time is reached and the command hasn't already started running, it won't run.
                *    Calculated based on the <code>ExpiresAfter</code> user input provided as part of the
                *     <code>SendCommand</code> API operation.</p>
                */
            ExpiresAfter?: Date;
            /**
                * <p>The parameter values to be inserted in the document when running the command.</p>
                */
            Parameters?: Record<string, string[]>;
            /**
                * <p>The managed node IDs against which this command was requested.</p>
                */
            InstanceIds?: string[];
            /**
                * <p>An array of search criteria that targets managed nodes using a Key,Value combination that
                *    you specify. Targets is required if you don't provide one or more managed node IDs in the
                *    call.</p>
                */
            Targets?: Target[];
            /**
                * <p>The date and time the command was requested.</p>
                */
            RequestedDateTime?: Date;
            /**
                * <p>The status of the command.</p>
                */
            Status?: CommandStatus | string;
            /**
                * <p>A detailed status of the command execution. <code>StatusDetails</code> includes more
                *    information than <code>Status</code> because it includes states resulting from error and
                *    concurrency control parameters. <code>StatusDetails</code> can show different results than
                *    Status. For more information about these statuses, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/monitor-commands.html">Understanding command
                *     statuses</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. StatusDetails can be one of the
                *    following values:</p>
                *          <ul>
                *             <li>
                *                <p>Pending: The command hasn't been sent to any managed nodes.</p>
                *             </li>
                *             <li>
                *                <p>In Progress: The command has been sent to at least one managed node but hasn't reached a
                *      final state on all managed nodes.</p>
                *             </li>
                *             <li>
                *                <p>Success: The command successfully ran on all invocations. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Delivery Timed Out: The value of MaxErrors or more command invocations shows a status of
                *      Delivery Timed Out. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Execution Timed Out: The value of MaxErrors or more command invocations shows a status of
                *      Execution Timed Out. This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Failed: The value of MaxErrors or more command invocations shows a status of Failed. This
                *      is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Incomplete: The command was attempted on all managed nodes and one or more invocations
                *      doesn't have a value of Success but not enough invocations failed for the status to be Failed.
                *      This is a terminal state.</p>
                *             </li>
                *             <li>
                *                <p>Cancelled: The command was terminated before it was completed. This is a terminal
                *      state.</p>
                *             </li>
                *             <li>
                *                <p>Rate Exceeded: The number of managed nodes targeted by the command exceeded the account
                *      limit for pending invocations. The system has canceled the command before running it on any
                *      managed node. This is a terminal state.</p>
                *             </li>
                *          </ul>
                */
            StatusDetails?: string;
            /**
                * <p>(Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager
                *    automatically determines the Amazon Web Services Region of the S3 bucket.</p>
                */
            OutputS3Region?: string;
            /**
                * <p>The S3 bucket where the responses to the command executions should be stored. This was
                *    requested when issuing the command.</p>
                */
            OutputS3BucketName?: string;
            /**
                * <p>The S3 directory path inside the bucket where the responses to the command executions should
                *    be stored. This was requested when issuing the command.</p>
                */
            OutputS3KeyPrefix?: string;
            /**
                * <p>The maximum number of managed nodes that are allowed to run the command at the same time.
                *    You can specify a number of managed nodes, such as 10, or a percentage of nodes, such as 10%. The
                *    default value is 50. For more information about how to use <code>MaxConcurrency</code>, see
                *     <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html">Running
                *     commands using Systems Manager Run Command</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            MaxConcurrency?: string;
            /**
                * <p>The maximum number of errors allowed before the system stops sending the command to
                *    additional targets. You can specify a number of errors, such as 10, or a percentage or errors,
                *    such as 10%. The default value is <code>0</code>. For more information about how to use
                *     <code>MaxErrors</code>, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/run-command.html">Running commands using Systems Manager Run
                *     Command</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            MaxErrors?: string;
            /**
                * <p>The number of targets for the command.</p>
                */
            TargetCount?: number;
            /**
                * <p>The number of targets for which the command invocation reached a terminal state. Terminal
                *    states include the following: Success, Failed, Execution Timed Out, Delivery Timed Out,
                *    Cancelled, Terminated, or Undeliverable.</p>
                */
            CompletedCount?: number;
            /**
                * <p>The number of targets for which the status is Failed or Execution Timed Out.</p>
                */
            ErrorCount?: number;
            /**
                * <p>The number of targets for which the status is Delivery Timed Out.</p>
                */
            DeliveryTimedOutCount?: number;
            /**
                * <p>The Identity and Access Management (IAM) service role that Run Command, a capability
                *    of Amazon Web Services Systems Manager, uses to act on your behalf when sending notifications about command status changes.
                *   </p>
                */
            ServiceRole?: string;
            /**
                * <p>Configurations for sending notifications about command status changes. </p>
                */
            NotificationConfig?: NotificationConfig;
            /**
                * <p>Amazon CloudWatch Logs information where you want Amazon Web Services Systems Manager to send the command
                *    output.</p>
                */
            CloudWatchOutputConfig?: CloudWatchOutputConfig;
            /**
                * <p>The <code>TimeoutSeconds</code> value specified for a command.</p>
                */
            TimeoutSeconds?: number;
    }
    export namespace Command {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Command) => any;
    }
    export interface ListCommandsResult {
            /**
                * <p>(Optional) The list of commands requested by the user. </p>
                */
            Commands?: Command[];
            /**
                * <p>(Optional) The token for the next set of items to return. (You received this token from a
                *    previous call.)</p>
                */
            NextToken?: string;
    }
    export namespace ListCommandsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListCommandsResult) => any;
    }
    export enum ComplianceQueryOperatorType {
            BeginWith = "BEGIN_WITH",
            Equal = "EQUAL",
            GreaterThan = "GREATER_THAN",
            LessThan = "LESS_THAN",
            NotEqual = "NOT_EQUAL"
    }
    /**
        * <p>One or more filters. Use a filter to return a more specific list of results.</p>
        */
    export interface ComplianceStringFilter {
            /**
                * <p>The name of the filter.</p>
                */
            Key?: string;
            /**
                * <p>The value for which to search.</p>
                */
            Values?: string[];
            /**
                * <p>The type of comparison that should be performed for the value: Equal, NotEqual, BeginWith,
                *    LessThan, or GreaterThan.</p>
                */
            Type?: ComplianceQueryOperatorType | string;
    }
    export namespace ComplianceStringFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComplianceStringFilter) => any;
    }
    export interface ListComplianceItemsRequest {
            /**
                * <p>One or more compliance filters. Use a filter to return a more specific list of
                *    results.</p>
                */
            Filters?: ComplianceStringFilter[];
            /**
                * <p>The ID for the resources from which to get compliance information. Currently, you can only
                *    specify one resource ID.</p>
                */
            ResourceIds?: string[];
            /**
                * <p>The type of resource from which to get compliance information. Currently, the only supported
                *    resource type is <code>ManagedInstance</code>.</p>
                */
            ResourceTypes?: string[];
            /**
                * <p>A token to start the list. Use this token to get the next set of results. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListComplianceItemsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListComplianceItemsRequest) => any;
    }
    /**
        * <p>A summary of the call execution that includes an execution ID, the type of execution (for
        *    example, <code>Command</code>), and the date/time of the execution using a datetime object that
        *    is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'.</p>
        */
    export interface ComplianceExecutionSummary {
            /**
                * <p>The time the execution ran as a datetime object that is saved in the following format:
                *    yyyy-MM-dd'T'HH:mm:ss'Z'.</p>
                */
            ExecutionTime: Date | undefined;
            /**
                * <p>An ID created by the system when <code>PutComplianceItems</code> was called. For example,
                *     <code>CommandID</code> is a valid execution ID. You can use this ID in subsequent calls.</p>
                */
            ExecutionId?: string;
            /**
                * <p>The type of execution. For example, <code>Command</code> is a valid execution type.</p>
                */
            ExecutionType?: string;
    }
    export namespace ComplianceExecutionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComplianceExecutionSummary) => any;
    }
    export enum ComplianceSeverity {
            Critical = "CRITICAL",
            High = "HIGH",
            Informational = "INFORMATIONAL",
            Low = "LOW",
            Medium = "MEDIUM",
            Unspecified = "UNSPECIFIED"
    }
    export enum ComplianceStatus {
            Compliant = "COMPLIANT",
            NonCompliant = "NON_COMPLIANT"
    }
    /**
        * <p>Information about the compliance as defined by the resource type. For example, for a patch
        *    resource type, <code>Items</code> includes information about the PatchSeverity, Classification,
        *    and so on.</p>
        */
    export interface ComplianceItem {
            /**
                * <p>The compliance type. For example, Association (for a State Manager association), Patch, or
                *     Custom:<code>string</code> are all valid compliance types.</p>
                */
            ComplianceType?: string;
            /**
                * <p>The type of resource. <code>ManagedInstance</code> is currently the only supported resource
                *    type.</p>
                */
            ResourceType?: string;
            /**
                * <p>An ID for the resource. For a managed node, this is the node ID.</p>
                */
            ResourceId?: string;
            /**
                * <p>An ID for the compliance item. For example, if the compliance item is a Windows patch, the
                *    ID could be the number of the KB article; for example: KB4010320.</p>
                */
            Id?: string;
            /**
                * <p>A title for the compliance item. For example, if the compliance item is a Windows patch, the
                *    title could be the title of the KB article for the patch; for example: Security Update for Active
                *    Directory Federation Services.</p>
                */
            Title?: string;
            /**
                * <p>The status of the compliance item. An item is either COMPLIANT, NON_COMPLIANT, or an empty
                *    string (for Windows patches that aren't applicable).</p>
                */
            Status?: ComplianceStatus | string;
            /**
                * <p>The severity of the compliance status. Severity can be one of the following: Critical, High,
                *    Medium, Low, Informational, Unspecified.</p>
                */
            Severity?: ComplianceSeverity | string;
            /**
                * <p>A summary for the compliance item. The summary includes an execution ID, the execution type
                *    (for example, command), and the execution time.</p>
                */
            ExecutionSummary?: ComplianceExecutionSummary;
            /**
                * <p>A "Key": "Value" tag combination for the compliance item.</p>
                */
            Details?: Record<string, string>;
    }
    export namespace ComplianceItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComplianceItem) => any;
    }
    export interface ListComplianceItemsResult {
            /**
                * <p>A list of compliance information for the specified resource ID. </p>
                */
            ComplianceItems?: ComplianceItem[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
    }
    export namespace ListComplianceItemsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListComplianceItemsResult) => any;
    }
    export interface ListComplianceSummariesRequest {
            /**
                * <p>One or more compliance or inventory filters. Use a filter to return a more specific list of
                *    results.</p>
                */
            Filters?: ComplianceStringFilter[];
            /**
                * <p>A token to start the list. Use this token to get the next set of results. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return for this call. Currently, you can specify null or 50.
                *    The call also returns a token that you can specify in a subsequent call to get the next set of
                *    results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListComplianceSummariesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListComplianceSummariesRequest) => any;
    }
    /**
        * <p>The number of managed nodes found for each patch severity level defined in the request
        *    filter.</p>
        */
    export interface SeveritySummary {
            /**
                * <p>The total number of resources or compliance items that have a severity level of critical.
                *    Critical severity is determined by the organization that published the compliance items.</p>
                */
            CriticalCount?: number;
            /**
                * <p>The total number of resources or compliance items that have a severity level of high. High
                *    severity is determined by the organization that published the compliance items.</p>
                */
            HighCount?: number;
            /**
                * <p>The total number of resources or compliance items that have a severity level of medium.
                *    Medium severity is determined by the organization that published the compliance items.</p>
                */
            MediumCount?: number;
            /**
                * <p>The total number of resources or compliance items that have a severity level of low. Low
                *    severity is determined by the organization that published the compliance items.</p>
                */
            LowCount?: number;
            /**
                * <p>The total number of resources or compliance items that have a severity level of
                *    informational. Informational severity is determined by the organization that published the
                *    compliance items.</p>
                */
            InformationalCount?: number;
            /**
                * <p>The total number of resources or compliance items that have a severity level of unspecified.
                *    Unspecified severity is determined by the organization that published the compliance
                *    items.</p>
                */
            UnspecifiedCount?: number;
    }
    export namespace SeveritySummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SeveritySummary) => any;
    }
    /**
        * <p>A summary of resources that are compliant. The summary is organized according to the
        *    resource count for each compliance type.</p>
        */
    export interface CompliantSummary {
            /**
                * <p>The total number of resources that are compliant.</p>
                */
            CompliantCount?: number;
            /**
                * <p>A summary of the compliance severity by compliance type.</p>
                */
            SeveritySummary?: SeveritySummary;
    }
    export namespace CompliantSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CompliantSummary) => any;
    }
    /**
        * <p>A summary of resources that aren't compliant. The summary is organized according to resource
        *    type.</p>
        */
    export interface NonCompliantSummary {
            /**
                * <p>The total number of compliance items that aren't compliant.</p>
                */
            NonCompliantCount?: number;
            /**
                * <p>A summary of the non-compliance severity by compliance type</p>
                */
            SeveritySummary?: SeveritySummary;
    }
    export namespace NonCompliantSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NonCompliantSummary) => any;
    }
    /**
        * <p>A summary of compliance information by compliance type.</p>
        */
    export interface ComplianceSummaryItem {
            /**
                * <p>The type of compliance item. For example, the compliance type can be Association, Patch, or
                *    Custom:string.</p>
                */
            ComplianceType?: string;
            /**
                * <p>A list of COMPLIANT items for the specified compliance type.</p>
                */
            CompliantSummary?: CompliantSummary;
            /**
                * <p>A list of NON_COMPLIANT items for the specified compliance type.</p>
                */
            NonCompliantSummary?: NonCompliantSummary;
    }
    export namespace ComplianceSummaryItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComplianceSummaryItem) => any;
    }
    export interface ListComplianceSummariesResult {
            /**
                * <p>A list of compliant and non-compliant summary counts based on compliance types. For example,
                *    this call returns State Manager associations, patches, or custom compliance types according to
                *    the filter criteria that you specified.</p>
                */
            ComplianceSummaryItems?: ComplianceSummaryItem[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
    }
    export namespace ListComplianceSummariesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListComplianceSummariesResult) => any;
    }
    export enum DocumentMetadataEnum {
            DocumentReviews = "DocumentReviews"
    }
    export interface ListDocumentMetadataHistoryRequest {
            /**
                * <p>The name of the change template.</p>
                */
            Name: string | undefined;
            /**
                * <p>The version of the change template.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The type of data for which details are being requested. Currently, the only supported value
                *    is <code>DocumentReviews</code>.</p>
                */
            Metadata: DocumentMetadataEnum | string | undefined;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListDocumentMetadataHistoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDocumentMetadataHistoryRequest) => any;
    }
    export enum DocumentReviewCommentType {
            Comment = "Comment"
    }
    /**
        * <p>Information about comments added to a document review request.</p>
        */
    export interface DocumentReviewCommentSource {
            /**
                * <p>The type of information added to a review request. Currently, only the value
                *     <code>Comment</code> is supported.</p>
                */
            Type?: DocumentReviewCommentType | string;
            /**
                * <p>The content of a comment entered by a user who requests a review of a new document version,
                *    or who reviews the new version.</p>
                */
            Content?: string;
    }
    export namespace DocumentReviewCommentSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentReviewCommentSource) => any;
    }
    /**
        * <p>Information about a reviewer's response to a document review request.</p>
        */
    export interface DocumentReviewerResponseSource {
            /**
                * <p>The date and time that a reviewer entered a response to a document review request.</p>
                */
            CreateTime?: Date;
            /**
                * <p>The date and time that a reviewer last updated a response to a document review
                *    request.</p>
                */
            UpdatedTime?: Date;
            /**
                * <p>The current review status of a new custom SSM document created by a member of your
                *    organization, or of the latest version of an existing SSM document.</p>
                *          <p>Only one version of a document can be in the APPROVED state at a time. When a new version is
                *    approved, the status of the previous version changes to REJECTED.</p>
                *          <p>Only one version of a document can be in review, or PENDING, at a time.</p>
                */
            ReviewStatus?: ReviewStatus | string;
            /**
                * <p>The comment entered by a reviewer as part of their document review response.</p>
                */
            Comment?: DocumentReviewCommentSource[];
            /**
                * <p>The user in your organization assigned to review a document request.</p>
                */
            Reviewer?: string;
    }
    export namespace DocumentReviewerResponseSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentReviewerResponseSource) => any;
    }
    /**
        * <p>Details about the response to a document review request.</p>
        */
    export interface DocumentMetadataResponseInfo {
            /**
                * <p>Details about a reviewer's response to a document review request.</p>
                */
            ReviewerResponse?: DocumentReviewerResponseSource[];
    }
    export namespace DocumentMetadataResponseInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentMetadataResponseInfo) => any;
    }
    export interface ListDocumentMetadataHistoryResponse {
            /**
                * <p>The name of the change template.</p>
                */
            Name?: string;
            /**
                * <p>The version of the change template.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The user ID of the person in the organization who requested the review of the
                *    change template.</p>
                */
            Author?: string;
            /**
                * <p>Information about the response to the change template approval request.</p>
                */
            Metadata?: DocumentMetadataResponseInfo;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListDocumentMetadataHistoryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDocumentMetadataHistoryResponse) => any;
    }
    export enum DocumentFilterKey {
            DocumentType = "DocumentType",
            Name = "Name",
            Owner = "Owner",
            PlatformTypes = "PlatformTypes"
    }
    /**
        * <p>This data type is deprecated. Instead, use <a>DocumentKeyValuesFilter</a>.</p>
        */
    export interface DocumentFilter {
            /**
                * <p>The name of the filter.</p>
                */
            key: DocumentFilterKey | string | undefined;
            /**
                * <p>The value of the filter.</p>
                */
            value: string | undefined;
    }
    export namespace DocumentFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentFilter) => any;
    }
    /**
        * <p>One or more filters. Use a filter to return a more specific list of documents.</p>
        *          <p>For keys, you can specify one or more tags that have been applied to a document. </p>
        *          <p>You can also use Amazon Web Services-provided keys, some of which have specific allowed values. These keys
        *    and their associated values are as follows:</p>
        *          <dl>
        *             <dt>DocumentType</dt>
        *             <dd>
        *                <ul>
        *                   <li>
        *                      <p>
        *                         <code>ApplicationConfiguration</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>ApplicationConfigurationSchema</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>Automation</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>ChangeCalendar</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>Command</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>Package</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>Policy</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>Session</code>
        *                      </p>
        *                   </li>
        *                </ul>
        *             </dd>
        *             <dt>Owner</dt>
        *             <dd>
        *                <p>Note that only one <code>Owner</code> can be specified in a request. For example:
        *        <code>Key=Owner,Values=Self</code>.</p>
        *                <ul>
        *                   <li>
        *                      <p>
        *                         <code>Amazon</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>Private</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>Public</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>Self</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>ThirdParty</code>
        *                      </p>
        *                   </li>
        *                </ul>
        *             </dd>
        *             <dt>PlatformTypes</dt>
        *             <dd>
        *                <ul>
        *                   <li>
        *                      <p>
        *                         <code>Linux</code>
        *                      </p>
        *                   </li>
        *                   <li>
        *                      <p>
        *                         <code>Windows</code>
        *                      </p>
        *                   </li>
        *                </ul>
        *             </dd>
        *          </dl>
        *          <p>
        *             <code>Name</code> is another Amazon Web Services-provided key. If you use <code>Name</code> as a key, you
        *    can use a name prefix to return a list of documents. For example, in the Amazon Web Services CLI, to return a list
        *    of all documents that begin with <code>Te</code>, run the following command:</p>
        *          <p>
        *             <code>aws ssm list-documents --filters Key=Name,Values=Te</code>
        *          </p>
        *          <p>You can also use the <code>TargetType</code> Amazon Web Services-provided key. For a list of valid
        *    resource type values that can be used with this key, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and
        *     property types reference</a> in the <i>CloudFormation User Guide</i>.</p>
        *          <p>If you specify more than two keys, only documents that are identified by all the tags are
        *    returned in the results. If you specify more than two values for a key, documents that are
        *    identified by any of the values are returned in the results.</p>
        *          <p>To specify a custom key-value pair, use the format
        *     <code>Key=tag:tagName,Values=valueName</code>.</p>
        *          <p>For example, if you created a key called region and are using the Amazon Web Services CLI to call the
        *     <code>list-documents</code> command: </p>
        *          <p>
        *             <code>aws ssm list-documents --filters Key=tag:region,Values=east,west
        *     Key=Owner,Values=Self</code>
        *          </p>
        */
    export interface DocumentKeyValuesFilter {
            /**
                * <p>The name of the filter key.</p>
                */
            Key?: string;
            /**
                * <p>The value for the filter key.</p>
                */
            Values?: string[];
    }
    export namespace DocumentKeyValuesFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentKeyValuesFilter) => any;
    }
    export interface ListDocumentsRequest {
            /**
                * <p>This data type is deprecated. Instead, use <code>Filters</code>.</p>
                */
            DocumentFilterList?: DocumentFilter[];
            /**
                * <p>One or more <code>DocumentKeyValuesFilter</code> objects. Use a filter to return a more
                *    specific list of results. For keys, you can specify one or more key-value pair tags that have
                *    been applied to a document. Other valid keys include <code>Owner</code>, <code>Name</code>,
                *     <code>PlatformTypes</code>, <code>DocumentType</code>, and <code>TargetType</code>. For example,
                *    to return documents you own use <code>Key=Owner,Values=Self</code>. To specify a custom key-value
                *    pair, use the format <code>Key=tag:tagName,Values=valueName</code>.</p>
                *          <note>
                *             <p>This API operation only supports filtering documents by using a single tag key and one or
                *     more tag values. For example: <code>Key=tag:tagName,Values=valueName1,valueName2</code>
                *             </p>
                *          </note>
                */
            Filters?: DocumentKeyValuesFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace ListDocumentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDocumentsRequest) => any;
    }
    /**
        * <p>Describes the name of a SSM document.</p>
        */
    export interface DocumentIdentifier {
            /**
                * <p>The name of the SSM document.</p>
                */
            Name?: string;
            /**
                * <p>The date the SSM document was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>An optional field where you can specify a friendly name for the SSM document. This value can
                *    differ for each version of the document. If you want to update this value, see <a>UpdateDocument</a>.</p>
                */
            DisplayName?: string;
            /**
                * <p>The Amazon Web Services user account that created the document.</p>
                */
            Owner?: string;
            /**
                * <p>An optional field specifying the version of the artifact associated with the document. For
                *    example, "Release 12, Update 6". This value is unique across all versions of a document, and
                *    can't be changed.</p>
                */
            VersionName?: string;
            /**
                * <p>The operating system platform. </p>
                */
            PlatformTypes?: (PlatformType | string)[];
            /**
                * <p>The document version.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The document type.</p>
                */
            DocumentType?: DocumentType | string;
            /**
                * <p>The schema version.</p>
                */
            SchemaVersion?: string;
            /**
                * <p>The document format, either JSON or YAML.</p>
                */
            DocumentFormat?: DocumentFormat | string;
            /**
                * <p>The target type which defines the kinds of resources the document can run on. For example,
                *     <code>/AWS::EC2::Instance</code>. For a list of valid resource types, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html">Amazon Web Services resource and
                *     property types reference</a> in the <i>CloudFormation User Guide</i>. </p>
                */
            TargetType?: string;
            /**
                * <p>The tags, or metadata, that have been applied to the document.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A list of SSM documents required by a document. For example, an
                *     <code>ApplicationConfiguration</code> document requires an
                *     <code>ApplicationConfigurationSchema</code> document.</p>
                */
            Requires?: DocumentRequires[];
            /**
                * <p>The current status of a document review.</p>
                */
            ReviewStatus?: ReviewStatus | string;
            /**
                * <p>The user in your organization who created the document.</p>
                */
            Author?: string;
    }
    export namespace DocumentIdentifier {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentIdentifier) => any;
    }
    export interface ListDocumentsResult {
            /**
                * <p>The names of the SSM documents.</p>
                */
            DocumentIdentifiers?: DocumentIdentifier[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace ListDocumentsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDocumentsResult) => any;
    }
    export interface ListDocumentVersionsRequest {
            /**
                * <p>The name of the document. You can specify an Amazon Resource Name (ARN).</p>
                */
            Name: string | undefined;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace ListDocumentVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDocumentVersionsRequest) => any;
    }
    /**
        * <p>Version information about the document.</p>
        */
    export interface DocumentVersionInfo {
            /**
                * <p>The document name.</p>
                */
            Name?: string;
            /**
                * <p>The friendly name of the SSM document. This value can differ for each version of the
                *    document. If you want to update this value, see <a>UpdateDocument</a>.</p>
                */
            DisplayName?: string;
            /**
                * <p>The document version.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The version of the artifact associated with the document. For example, "Release 12, Update
                *    6". This value is unique across all versions of a document, and can't be changed.</p>
                */
            VersionName?: string;
            /**
                * <p>The date the document was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>An identifier for the default version of the document.</p>
                */
            IsDefaultVersion?: boolean;
            /**
                * <p>The document format, either JSON or YAML.</p>
                */
            DocumentFormat?: DocumentFormat | string;
            /**
                * <p>The status of the SSM document, such as <code>Creating</code>, <code>Active</code>,
                *     <code>Failed</code>, and <code>Deleting</code>.</p>
                */
            Status?: DocumentStatus | string;
            /**
                * <p>A message returned by Amazon Web Services Systems Manager that explains the <code>Status</code> value. For example, a
                *     <code>Failed</code> status might be explained by the <code>StatusInformation</code> message,
                *    "The specified S3 bucket doesn't exist. Verify that the URL of the S3 bucket is correct."</p>
                */
            StatusInformation?: string;
            /**
                * <p>The current status of the approval review for the latest version of the document.</p>
                */
            ReviewStatus?: ReviewStatus | string;
    }
    export namespace DocumentVersionInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentVersionInfo) => any;
    }
    export interface ListDocumentVersionsResult {
            /**
                * <p>The document versions.</p>
                */
            DocumentVersions?: DocumentVersionInfo[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace ListDocumentVersionsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDocumentVersionsResult) => any;
    }
    export interface ListInventoryEntriesRequest {
            /**
                * <p>The managed node ID for which you want inventory information.</p>
                */
            InstanceId: string | undefined;
            /**
                * <p>The type of inventory item for which you want information.</p>
                */
            TypeName: string | undefined;
            /**
                * <p>One or more filters. Use a filter to return a more specific list of results.</p>
                */
            Filters?: InventoryFilter[];
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListInventoryEntriesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInventoryEntriesRequest) => any;
    }
    export interface ListInventoryEntriesResult {
            /**
                * <p>The type of inventory item returned by the request.</p>
                */
            TypeName?: string;
            /**
                * <p>The managed node ID targeted by the request to query inventory information.</p>
                */
            InstanceId?: string;
            /**
                * <p>The inventory schema version used by the managed node(s).</p>
                */
            SchemaVersion?: string;
            /**
                * <p>The time that inventory information was collected for the managed node(s).</p>
                */
            CaptureTime?: string;
            /**
                * <p>A list of inventory items on the managed node(s).</p>
                */
            Entries?: Record<string, string>[];
            /**
                * <p>The token to use when requesting the next set of items. If there are no additional items to
                *    return, the string is empty.</p>
                */
            NextToken?: string;
    }
    export namespace ListInventoryEntriesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInventoryEntriesResult) => any;
    }
    export enum OpsItemEventFilterKey {
            OPSITEM_ID = "OpsItemId"
    }
    export enum OpsItemEventFilterOperator {
            EQUAL = "Equal"
    }
    /**
        * <p>Describes a filter for a specific list of OpsItem events. You can filter event information
        *    by using tags. You specify tags by using a key-value pair mapping. </p>
        */
    export interface OpsItemEventFilter {
            /**
                * <p>The name of the filter key. Currently, the only supported value is
                *    <code>OpsItemId</code>.</p>
                */
            Key: OpsItemEventFilterKey | string | undefined;
            /**
                * <p>The values for the filter, consisting of one or more OpsItem IDs.</p>
                */
            Values: string[] | undefined;
            /**
                * <p>The operator used by the filter call. Currently, the only supported value is
                *     <code>Equal</code>.</p>
                */
            Operator: OpsItemEventFilterOperator | string | undefined;
    }
    export namespace OpsItemEventFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsItemEventFilter) => any;
    }
    export interface ListOpsItemEventsRequest {
            /**
                * <p>One or more OpsItem filters. Use a filter to return a more specific list of results. </p>
                */
            Filters?: OpsItemEventFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results. </p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results. </p>
                */
            NextToken?: string;
    }
    export namespace ListOpsItemEventsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOpsItemEventsRequest) => any;
    }
    /**
        * <p>Information about the user or resource that created an OpsItem event.</p>
        */
    export interface OpsItemIdentity {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM entity that created the OpsItem
                *    event.</p>
                */
            Arn?: string;
    }
    export namespace OpsItemIdentity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsItemIdentity) => any;
    }
    /**
        * <p>Summary information about an OpsItem event or that associated an OpsItem with a related
        *    item.</p>
        */
    export interface OpsItemEventSummary {
            /**
                * <p>The ID of the OpsItem.</p>
                */
            OpsItemId?: string;
            /**
                * <p>The ID of the OpsItem event.</p>
                */
            EventId?: string;
            /**
                * <p>The source of the OpsItem event.</p>
                */
            Source?: string;
            /**
                * <p>The type of information provided as a detail.</p>
                */
            DetailType?: string;
            /**
                * <p>Specific information about the OpsItem event.</p>
                */
            Detail?: string;
            /**
                * <p>Information about the user or resource that created the OpsItem event.</p>
                */
            CreatedBy?: OpsItemIdentity;
            /**
                * <p>The date and time the OpsItem event was created.</p>
                */
            CreatedTime?: Date;
    }
    export namespace OpsItemEventSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsItemEventSummary) => any;
    }
    export interface ListOpsItemEventsResponse {
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results. </p>
                */
            NextToken?: string;
            /**
                * <p>A list of event information for the specified OpsItems.</p>
                */
            Summaries?: OpsItemEventSummary[];
    }
    export namespace ListOpsItemEventsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOpsItemEventsResponse) => any;
    }
    export enum OpsItemRelatedItemsFilterKey {
            ASSOCIATION_ID = "AssociationId",
            RESOURCE_TYPE = "ResourceType",
            RESOURCE_URI = "ResourceUri"
    }
    export enum OpsItemRelatedItemsFilterOperator {
            EQUAL = "Equal"
    }
    /**
        * <p>Describes a filter for a specific list of related-item resources. </p>
        */
    export interface OpsItemRelatedItemsFilter {
            /**
                * <p>The name of the filter key. Supported values include <code>ResourceUri</code>,
                *     <code>ResourceType</code>, or <code>AssociationId</code>.</p>
                */
            Key: OpsItemRelatedItemsFilterKey | string | undefined;
            /**
                * <p>The values for the filter.</p>
                */
            Values: string[] | undefined;
            /**
                * <p>The operator used by the filter call. The only supported operator is
                *    <code>EQUAL</code>.</p>
                */
            Operator: OpsItemRelatedItemsFilterOperator | string | undefined;
    }
    export namespace OpsItemRelatedItemsFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsItemRelatedItemsFilter) => any;
    }
    export interface ListOpsItemRelatedItemsRequest {
            /**
                * <p>The ID of the OpsItem for which you want to list all related-item resources.</p>
                */
            OpsItemId?: string;
            /**
                * <p>One or more OpsItem filters. Use a filter to return a more specific list of results. </p>
                */
            Filters?: OpsItemRelatedItemsFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
    }
    export namespace ListOpsItemRelatedItemsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOpsItemRelatedItemsRequest) => any;
    }
    /**
        * <p>Summary information about related-item resources for an OpsItem.</p>
        */
    export interface OpsItemRelatedItemSummary {
            /**
                * <p>The OpsItem ID.</p>
                */
            OpsItemId?: string;
            /**
                * <p>The association ID.</p>
                */
            AssociationId?: string;
            /**
                * <p>The resource type.</p>
                */
            ResourceType?: string;
            /**
                * <p>The association type.</p>
                */
            AssociationType?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the related-item resource.</p>
                */
            ResourceUri?: string;
            /**
                * <p>Information about the user or resource that created an OpsItem event.</p>
                */
            CreatedBy?: OpsItemIdentity;
            /**
                * <p>The time the related-item association was created.</p>
                */
            CreatedTime?: Date;
            /**
                * <p>Information about the user or resource that created an OpsItem event.</p>
                */
            LastModifiedBy?: OpsItemIdentity;
            /**
                * <p>The time the related-item association was last updated.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace OpsItemRelatedItemSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsItemRelatedItemSummary) => any;
    }
    export interface ListOpsItemRelatedItemsResponse {
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
            /**
                * <p>A list of related-item resources for the specified OpsItem.</p>
                */
            Summaries?: OpsItemRelatedItemSummary[];
    }
    export namespace ListOpsItemRelatedItemsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOpsItemRelatedItemsResponse) => any;
    }
    /**
        * <p>A filter to limit the number of OpsMetadata objects displayed.</p>
        */
    export interface OpsMetadataFilter {
            /**
                * <p>A filter key.</p>
                */
            Key: string | undefined;
            /**
                * <p>A filter value.</p>
                */
            Values: string[] | undefined;
    }
    export namespace OpsMetadataFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsMetadataFilter) => any;
    }
    export interface ListOpsMetadataRequest {
            /**
                * <p>One or more filters to limit the number of OpsMetadata objects returned by the call.</p>
                */
            Filters?: OpsMetadataFilter[];
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token to start the list. Use this token to get the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListOpsMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOpsMetadataRequest) => any;
    }
    /**
        * <p>Operational metadata for an application in Application Manager.</p>
        */
    export interface OpsMetadata {
            /**
                * <p>The ID of the Application Manager application.</p>
                */
            ResourceId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the OpsMetadata Object or blob.</p>
                */
            OpsMetadataArn?: string;
            /**
                * <p>The date the OpsMetadata object was last updated.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The user name who last updated the OpsMetadata object.</p>
                */
            LastModifiedUser?: string;
            /**
                * <p>The date the OpsMetadata objects was created.</p>
                */
            CreationDate?: Date;
    }
    export namespace OpsMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsMetadata) => any;
    }
    export interface ListOpsMetadataResult {
            /**
                * <p>Returns a list of OpsMetadata objects.</p>
                */
            OpsMetadataList?: OpsMetadata[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
    }
    export namespace ListOpsMetadataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOpsMetadataResult) => any;
    }
    export interface ListResourceComplianceSummariesRequest {
            /**
                * <p>One or more filters. Use a filter to return a more specific list of results.</p>
                */
            Filters?: ComplianceStringFilter[];
            /**
                * <p>A token to start the list. Use this token to get the next set of results. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListResourceComplianceSummariesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourceComplianceSummariesRequest) => any;
    }
    /**
        * <p>Compliance summary information for a specific resource. </p>
        */
    export interface ResourceComplianceSummaryItem {
            /**
                * <p>The compliance type.</p>
                */
            ComplianceType?: string;
            /**
                * <p>The resource type.</p>
                */
            ResourceType?: string;
            /**
                * <p>The resource ID.</p>
                */
            ResourceId?: string;
            /**
                * <p>The compliance status for the resource.</p>
                */
            Status?: ComplianceStatus | string;
            /**
                * <p>The highest severity item found for the resource. The resource is compliant for this
                *    item.</p>
                */
            OverallSeverity?: ComplianceSeverity | string;
            /**
                * <p>Information about the execution.</p>
                */
            ExecutionSummary?: ComplianceExecutionSummary;
            /**
                * <p>A list of items that are compliant for the resource.</p>
                */
            CompliantSummary?: CompliantSummary;
            /**
                * <p>A list of items that aren't compliant for the resource.</p>
                */
            NonCompliantSummary?: NonCompliantSummary;
    }
    export namespace ResourceComplianceSummaryItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceComplianceSummaryItem) => any;
    }
    export interface ListResourceComplianceSummariesResult {
            /**
                * <p>A summary count for specified or targeted managed nodes. Summary count includes information
                *    about compliant and non-compliant State Manager associations, patch status, or custom items
                *    according to the filter criteria that you specify. </p>
                */
            ResourceComplianceSummaryItems?: ResourceComplianceSummaryItem[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
    }
    export namespace ListResourceComplianceSummariesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourceComplianceSummariesResult) => any;
    }
    export interface ListResourceDataSyncRequest {
            /**
                * <p>View a list of resource data syncs according to the sync type. Specify
                *     <code>SyncToDestination</code> to view resource data syncs that synchronize data to an Amazon S3 bucket. Specify <code>SyncFromSource</code> to view resource data syncs from Organizations
                *    or from multiple Amazon Web Services Regions.</p>
                */
            SyncType?: string;
            /**
                * <p>A token to start the list. Use this token to get the next set of results. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
    }
    export namespace ListResourceDataSyncRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourceDataSyncRequest) => any;
    }
    export enum LastResourceDataSyncStatus {
            FAILED = "Failed",
            INPROGRESS = "InProgress",
            SUCCESSFUL = "Successful"
    }
    /**
        * <p>The data type name for including resource data sync state. There are four sync
        *    states:</p>
        *          <p>
        *             <code>OrganizationNotExists</code> (Your organization doesn't exist)</p>
        *          <p>
        *             <code>NoPermissions</code> (The system can't locate the service-linked role. This role is
        *    automatically created when a user creates a resource data sync in Amazon Web Services Systems Manager Explorer.)</p>
        *          <p>
        *             <code>InvalidOrganizationalUnit</code> (You specified or selected an invalid unit in the
        *    resource data sync configuration.)</p>
        *          <p>
        *             <code>TrustedAccessDisabled</code> (You disabled Systems Manager access in the organization in
        *    Organizations.)</p>
        */
    export interface ResourceDataSyncSourceWithState {
            /**
                * <p>The type of data source for the resource data sync. <code>SourceType</code> is either
                *     <code>AwsOrganizations</code> (if an organization is present in Organizations) or
                *     <code>singleAccountMultiRegions</code>.</p>
                */
            SourceType?: string;
            /**
                * <p>The field name in <code>SyncSource</code> for the
                *     <code>ResourceDataSyncAwsOrganizationsSource</code> type.</p>
                */
            AwsOrganizationsSource?: ResourceDataSyncAwsOrganizationsSource;
            /**
                * <p>The <code>SyncSource</code> Amazon Web Services Regions included in the resource data sync.</p>
                */
            SourceRegions?: string[];
            /**
                * <p>Whether to automatically synchronize and aggregate data from new Amazon Web Services Regions when those
                *    Regions come online.</p>
                */
            IncludeFutureRegions?: boolean;
            /**
                * <p>The data type name for including resource data sync state. There are four sync
                *    states:</p>
                *          <p>
                *             <code>OrganizationNotExists</code>: Your organization doesn't exist.</p>
                *          <p>
                *             <code>NoPermissions</code>: The system can't locate the service-linked role. This role is
                *    automatically created when a user creates a resource data sync in Explorer.</p>
                *          <p>
                *             <code>InvalidOrganizationalUnit</code>: You specified or selected an invalid unit in the
                *    resource data sync configuration.</p>
                *          <p>
                *             <code>TrustedAccessDisabled</code>: You disabled Systems Manager access in the organization in
                *    Organizations.</p>
                */
            State?: string;
            /**
                * <p>When you create a resource data sync, if you choose one of the Organizations options, then Systems Manager
                *    automatically enables all OpsData sources in the selected Amazon Web Services Regions for all Amazon Web Services accounts in
                *    your organization (or in the selected organization units). For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/Explorer-resouce-data-sync-multiple-accounts-and-regions.html">About multiple account and Region resource data syncs</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            EnableAllOpsDataSources?: boolean;
    }
    export namespace ResourceDataSyncSourceWithState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceDataSyncSourceWithState) => any;
    }
    /**
        * <p>Information about a resource data sync configuration, including its current status and last
        *    successful sync.</p>
        */
    export interface ResourceDataSyncItem {
            /**
                * <p>The name of the resource data sync.</p>
                */
            SyncName?: string;
            /**
                * <p>The type of resource data sync. If <code>SyncType</code> is <code>SyncToDestination</code>,
                *    then the resource data sync synchronizes data to an S3 bucket. If the <code>SyncType</code> is
                *     <code>SyncFromSource</code> then the resource data sync synchronizes data from Organizations or from
                *    multiple Amazon Web Services Regions.</p>
                */
            SyncType?: string;
            /**
                * <p>Information about the source where the data was synchronized. </p>
                */
            SyncSource?: ResourceDataSyncSourceWithState;
            /**
                * <p>Configuration information for the target S3 bucket.</p>
                */
            S3Destination?: ResourceDataSyncS3Destination;
            /**
                * <p>The last time the configuration attempted to sync (UTC).</p>
                */
            LastSyncTime?: Date;
            /**
                * <p>The last time the sync operations returned a status of <code>SUCCESSFUL</code> (UTC).</p>
                */
            LastSuccessfulSyncTime?: Date;
            /**
                * <p>The date and time the resource data sync was changed. </p>
                */
            SyncLastModifiedTime?: Date;
            /**
                * <p>The status reported by the last sync.</p>
                */
            LastStatus?: LastResourceDataSyncStatus | string;
            /**
                * <p>The date and time the configuration was created (UTC).</p>
                */
            SyncCreatedTime?: Date;
            /**
                * <p>The status message details reported by the last sync.</p>
                */
            LastSyncStatusMessage?: string;
    }
    export namespace ResourceDataSyncItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceDataSyncItem) => any;
    }
    export interface ListResourceDataSyncResult {
            /**
                * <p>A list of your current resource data sync configurations and their statuses.</p>
                */
            ResourceDataSyncItems?: ResourceDataSyncItem[];
            /**
                * <p>The token for the next set of items to return. Use this token to get the next set of
                *    results.</p>
                */
            NextToken?: string;
    }
    export namespace ListResourceDataSyncResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourceDataSyncResult) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>Returns a list of tags for a specific resource type.</p>
                */
            ResourceType: ResourceTypeForTagging | string | undefined;
            /**
                * <p>The resource ID for which you want to see a list of tags.</p>
                */
            ResourceId: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResult {
            /**
                * <p>A list of tags.</p>
                */
            TagList?: Tag[];
    }
    export namespace ListTagsForResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResult) => any;
    }
    /**
        * <p>The document can't be shared with more Amazon Web Services user accounts. You can share a document
        *    with a maximum of 20 accounts. You can publicly share up to five documents. If you need to
        *    increase this limit, contact Amazon Web Services Support.</p>
        */
    export class DocumentPermissionLimit extends __BaseException {
            readonly name: "DocumentPermissionLimit";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DocumentPermissionLimit, __BaseException>);
    }
    export interface ModifyDocumentPermissionRequest {
            /**
                * <p>The name of the document that you want to share.</p>
                */
            Name: string | undefined;
            /**
                * <p>The permission type for the document. The permission type can be
                *    <i>Share</i>.</p>
                */
            PermissionType: DocumentPermissionType | string | undefined;
            /**
                * <p>The Amazon Web Services user accounts that should have access to the document. The account IDs can
                *    either be a group of account IDs or <i>All</i>.</p>
                */
            AccountIdsToAdd?: string[];
            /**
                * <p>The Amazon Web Services user accounts that should no longer have access to the document. The Amazon Web Services
                *    user account can either be a group of account IDs or <i>All</i>. This action has a
                *    higher priority than <i>AccountIdsToAdd</i>. If you specify an account ID to add
                *    and the same ID to remove, the system removes access to the document.</p>
                */
            AccountIdsToRemove?: string[];
            /**
                * <p>(Optional) The version of the document to share. If it isn't specified, the system choose
                *    the <code>Default</code> version to share.</p>
                */
            SharedDocumentVersion?: string;
    }
    export namespace ModifyDocumentPermissionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDocumentPermissionRequest) => any;
    }
    export interface ModifyDocumentPermissionResponse {
    }
    export namespace ModifyDocumentPermissionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ModifyDocumentPermissionResponse) => any;
    }
    /**
        * <p>You specified too many custom compliance types. You can specify a maximum of 10 different
        *    types. </p>
        */
    export class ComplianceTypeCountLimitExceededException extends __BaseException {
            readonly name: "ComplianceTypeCountLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ComplianceTypeCountLimitExceededException, __BaseException>);
    }
    /**
        * <p>One or more content items isn't valid.</p>
        */
    export class InvalidItemContentException extends __BaseException {
            readonly name: "InvalidItemContentException";
            readonly $fault: "client";
            TypeName?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidItemContentException, __BaseException>);
    }
    /**
        * <p>The inventory item size has exceeded the size limit.</p>
        */
    export class ItemSizeLimitExceededException extends __BaseException {
            readonly name: "ItemSizeLimitExceededException";
            readonly $fault: "client";
            TypeName?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ItemSizeLimitExceededException, __BaseException>);
    }
    /**
        * <p>Information about a compliance item.</p>
        */
    export interface ComplianceItemEntry {
            /**
                * <p>The compliance item ID. For example, if the compliance item is a Windows patch, the ID could
                *    be the number of the KB article.</p>
                */
            Id?: string;
            /**
                * <p>The title of the compliance item. For example, if the compliance item is a Windows patch,
                *    the title could be the title of the KB article for the patch; for example: Security Update for
                *    Active Directory Federation Services. </p>
                */
            Title?: string;
            /**
                * <p>The severity of the compliance status. Severity can be one of the following: Critical, High,
                *    Medium, Low, Informational, Unspecified.</p>
                */
            Severity: ComplianceSeverity | string | undefined;
            /**
                * <p>The status of the compliance item. An item is either COMPLIANT or NON_COMPLIANT.</p>
                */
            Status: ComplianceStatus | string | undefined;
            /**
                * <p>A "Key": "Value" tag combination for the compliance item.</p>
                */
            Details?: Record<string, string>;
    }
    export namespace ComplianceItemEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ComplianceItemEntry) => any;
    }
    export enum ComplianceUploadType {
            Complete = "COMPLETE",
            Partial = "PARTIAL"
    }
    export interface PutComplianceItemsRequest {
            /**
                * <p>Specify an ID for this resource. For a managed node, this is the node ID.</p>
                */
            ResourceId: string | undefined;
            /**
                * <p>Specify the type of resource. <code>ManagedInstance</code> is currently the only supported
                *    resource type.</p>
                */
            ResourceType: string | undefined;
            /**
                * <p>Specify the compliance type. For example, specify Association (for a State Manager
                *    association), Patch, or Custom:<code>string</code>.</p>
                */
            ComplianceType: string | undefined;
            /**
                * <p>A summary of the call execution that includes an execution ID, the type of execution (for
                *    example, <code>Command</code>), and the date/time of the execution using a datetime object that
                *    is saved in the following format: yyyy-MM-dd'T'HH:mm:ss'Z'.</p>
                */
            ExecutionSummary: ComplianceExecutionSummary | undefined;
            /**
                * <p>Information about the compliance as defined by the resource type. For example, for a patch
                *    compliance type, <code>Items</code> includes information about the PatchSeverity, Classification,
                *    and so on.</p>
                */
            Items: ComplianceItemEntry[] | undefined;
            /**
                * <p>MD5 or SHA-256 content hash. The content hash is used to determine if existing information
                *    should be overwritten or ignored. If the content hashes match, the request to put compliance
                *    information is ignored.</p>
                */
            ItemContentHash?: string;
            /**
                * <p>The mode for uploading compliance items. You can specify <code>COMPLETE</code> or
                *     <code>PARTIAL</code>. In <code>COMPLETE</code> mode, the system overwrites all existing
                *    compliance information for the resource. You must provide a full list of compliance items each
                *    time you send the request.</p>
                *          <p>In <code>PARTIAL</code> mode, the system overwrites compliance information for a specific
                *    association. The association must be configured with <code>SyncCompliance</code> set to
                *     <code>MANUAL</code>. By default, all requests use <code>COMPLETE</code> mode.</p>
                *          <note>
                *             <p>This attribute is only valid for association compliance.</p>
                *          </note>
                */
            UploadType?: ComplianceUploadType | string;
    }
    export namespace PutComplianceItemsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutComplianceItemsRequest) => any;
    }
    export interface PutComplianceItemsResult {
    }
    export namespace PutComplianceItemsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutComplianceItemsResult) => any;
    }
    /**
        * <p>The size of inventory data has exceeded the total size limit for the resource.</p>
        */
    export class TotalSizeLimitExceededException extends __BaseException {
            readonly name: "TotalSizeLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TotalSizeLimitExceededException, __BaseException>);
    }
    /**
        * <p>You have exceeded the limit for custom schemas. Delete one or more custom schemas and try
        *    again.</p>
        */
    export class CustomSchemaCountLimitExceededException extends __BaseException {
            readonly name: "CustomSchemaCountLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CustomSchemaCountLimitExceededException, __BaseException>);
    }
    /**
        * <p>You specified invalid keys or values in the <code>Context</code> attribute for
        *     <code>InventoryItem</code>. Verify the keys and values, and try again.</p>
        */
    export class InvalidInventoryItemContextException extends __BaseException {
            readonly name: "InvalidInventoryItemContextException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInventoryItemContextException, __BaseException>);
    }
    /**
        * <p>The inventory item has invalid content. </p>
        */
    export class ItemContentMismatchException extends __BaseException {
            readonly name: "ItemContentMismatchException";
            readonly $fault: "client";
            TypeName?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ItemContentMismatchException, __BaseException>);
    }
    /**
        * <p>Information collected from managed nodes based on your inventory policy document</p>
        */
    export interface InventoryItem {
            /**
                * <p>The name of the inventory type. Default inventory item type names start with
                *     <code>AWS</code>. Custom inventory type names will start with Custom. Default inventory item
                *    types include the following: <code>AWS:AWSComponent</code>, <code>AWS:Application</code>,
                *     <code>AWS:InstanceInformation</code>, <code>AWS:Network</code>, and
                *     <code>AWS:WindowsUpdate</code>.</p>
                */
            TypeName: string | undefined;
            /**
                * <p>The schema version for the inventory item.</p>
                */
            SchemaVersion: string | undefined;
            /**
                * <p>The time the inventory information was collected.</p>
                */
            CaptureTime: string | undefined;
            /**
                * <p>MD5 hash of the inventory item type contents. The content hash is used to determine whether
                *    to update inventory information. The PutInventory API doesn't update the inventory item type
                *    contents if the MD5 hash hasn't changed since last update. </p>
                */
            ContentHash?: string;
            /**
                * <p>The inventory data of the inventory type.</p>
                */
            Content?: Record<string, string>[];
            /**
                * <p>A map of associated properties for a specified inventory type. For example, with this
                *    attribute, you can specify the <code>ExecutionId</code>, <code>ExecutionType</code>,
                *     <code>ComplianceType</code> properties of the <code>AWS:ComplianceItem</code> type.</p>
                */
            Context?: Record<string, string>;
    }
    export namespace InventoryItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InventoryItem) => any;
    }
    export interface PutInventoryRequest {
            /**
                * <p>An managed node ID where you want to add or update inventory items.</p>
                */
            InstanceId: string | undefined;
            /**
                * <p>The inventory items that you want to add or update on managed nodes.</p>
                */
            Items: InventoryItem[] | undefined;
    }
    export namespace PutInventoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutInventoryRequest) => any;
    }
    export interface PutInventoryResult {
            /**
                * <p>Information about the request.</p>
                */
            Message?: string;
    }
    export namespace PutInventoryResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutInventoryResult) => any;
    }
    /**
        * <p>The sub-type count exceeded the limit for the inventory type.</p>
        */
    export class SubTypeCountLimitExceededException extends __BaseException {
            readonly name: "SubTypeCountLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SubTypeCountLimitExceededException, __BaseException>);
    }
    /**
        * <p>The <code>Context</code> attribute that you specified for the <code>InventoryItem</code>
        *    isn't allowed for this inventory type. You can only use the <code>Context</code> attribute with
        *    inventory types like <code>AWS:ComplianceItem</code>.</p>
        */
    export class UnsupportedInventoryItemContextException extends __BaseException {
            readonly name: "UnsupportedInventoryItemContextException";
            readonly $fault: "client";
            TypeName?: string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedInventoryItemContextException, __BaseException>);
    }
    /**
        * <p>Inventory item type schema version has to match supported versions in the service. Check
        *    output of GetInventorySchema to see the available schema version for each type.</p>
        */
    export class UnsupportedInventorySchemaVersionException extends __BaseException {
            readonly name: "UnsupportedInventorySchemaVersionException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedInventorySchemaVersionException, __BaseException>);
    }
    /**
        * <p>A hierarchy can have a maximum of 15 levels. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-parameter-name-constraints.html">Requirements and
        *     constraints for parameter names</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
        */
    export class HierarchyLevelLimitExceededException extends __BaseException {
            readonly name: "HierarchyLevelLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<HierarchyLevelLimitExceededException, __BaseException>);
    }
    /**
        * <p>Parameter Store doesn't support changing a parameter type in a hierarchy. For example, you
        *    can't change a parameter from a <code>String</code> type to a <code>SecureString</code> type. You
        *    must create a new, unique parameter.</p>
        */
    export class HierarchyTypeMismatchException extends __BaseException {
            readonly name: "HierarchyTypeMismatchException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<HierarchyTypeMismatchException, __BaseException>);
    }
    /**
        * <p>There is a conflict in the policies specified for this parameter. You can't, for example,
        *    specify two Expiration policies for a parameter. Review your policies, and try again.</p>
        */
    export class IncompatiblePolicyException extends __BaseException {
            readonly name: "IncompatiblePolicyException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<IncompatiblePolicyException, __BaseException>);
    }
    /**
        * <p>The request doesn't meet the regular expression requirement.</p>
        */
    export class InvalidAllowedPatternException extends __BaseException {
            readonly name: "InvalidAllowedPatternException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidAllowedPatternException, __BaseException>);
    }
    /**
        * <p>A policy attribute or its value is invalid. </p>
        */
    export class InvalidPolicyAttributeException extends __BaseException {
            readonly name: "InvalidPolicyAttributeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPolicyAttributeException, __BaseException>);
    }
    /**
        * <p>The policy type isn't supported. Parameter Store supports the following policy types:
        *    Expiration, ExpirationNotification, and NoChangeNotification.</p>
        */
    export class InvalidPolicyTypeException extends __BaseException {
            readonly name: "InvalidPolicyTypeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPolicyTypeException, __BaseException>);
    }
    /**
        * <p>The parameter already exists. You can't create duplicate parameters.</p>
        */
    export class ParameterAlreadyExists extends __BaseException {
            readonly name: "ParameterAlreadyExists";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ParameterAlreadyExists, __BaseException>);
    }
    /**
        * <p>You have exceeded the number of parameters for this Amazon Web Services account. Delete one or more
        *    parameters and try again.</p>
        */
    export class ParameterLimitExceeded extends __BaseException {
            readonly name: "ParameterLimitExceeded";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ParameterLimitExceeded, __BaseException>);
    }
    /**
        * <p>Parameter Store retains the 100 most recently created versions of a parameter. After this
        *    number of versions has been created, Parameter Store deletes the oldest version when a new one is
        *    created. However, if the oldest version has a <i>label</i> attached to it,
        *    Parameter Store won't delete the version and instead presents this error message:</p>
        *          <p>
        *             <code>An error occurred (ParameterMaxVersionLimitExceeded) when calling the PutParameter
        *     operation: You attempted to create a new version of <i>parameter-name</i> by
        *     calling the PutParameter API with the overwrite flag. Version
        *      <i>version-number</i>, the oldest version, can't be deleted because it has a
        *     label associated with it. Move the label to another version of the parameter, and try
        *     again.</code>
        *          </p>
        *          <p>This safeguard is to prevent parameter versions with mission critical labels assigned to
        *    them from being deleted. To continue creating new parameters, first move the label from the
        *    oldest version of the parameter to a newer one for use in your operations. For information about
        *    moving parameter labels, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-labels.html#sysman-paramstore-labels-console-move">Move a parameter label (console)</a> or <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-labels.html#sysman-paramstore-labels-cli-move">Move a parameter label (CLI)</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
        */
    export class ParameterMaxVersionLimitExceeded extends __BaseException {
            readonly name: "ParameterMaxVersionLimitExceeded";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ParameterMaxVersionLimitExceeded, __BaseException>);
    }
    /**
        * <p>The parameter name isn't valid.</p>
        */
    export class ParameterPatternMismatchException extends __BaseException {
            readonly name: "ParameterPatternMismatchException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ParameterPatternMismatchException, __BaseException>);
    }
    /**
        * <p>You specified more than the maximum number of allowed policies for the parameter. The
        *    maximum is 10.</p>
        */
    export class PoliciesLimitExceededException extends __BaseException {
            readonly name: "PoliciesLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PoliciesLimitExceededException, __BaseException>);
    }
    export interface PutParameterRequest {
            /**
                * <p>The fully qualified name of the parameter that you want to add to the system. The fully
                *    qualified name includes the complete hierarchy of the parameter path and name. For parameters in
                *    a hierarchy, you must include a leading forward slash character (/) when you create or reference
                *    a parameter. For example: <code>/Dev/DBServer/MySQL/db-string13</code>
                *          </p>
                *          <p>Naming Constraints:</p>
                *          <ul>
                *             <li>
                *                <p>Parameter names are case sensitive.</p>
                *             </li>
                *             <li>
                *                <p>A parameter name must be unique within an Amazon Web Services Region</p>
                *             </li>
                *             <li>
                *                <p>A parameter name can't be prefixed with "<code>aws</code>" or "<code>ssm</code>"
                *      (case-insensitive).</p>
                *             </li>
                *             <li>
                *                <p>Parameter names can include only the following symbols and letters:
                *       <code>a-zA-Z0-9_.-</code>
                *                </p>
                *                <p>In addition, the slash character ( / ) is used to delineate hierarchies in parameter
                *      names. For example: <code>/Dev/Production/East/Project-ABC/MyParameter</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>A parameter name can't include spaces.</p>
                *             </li>
                *             <li>
                *                <p>Parameter hierarchies are limited to a maximum depth of fifteen levels.</p>
                *             </li>
                *          </ul>
                *          <p>For additional information about valid values for parameter names, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-paramstore-su-create.html">Creating Systems Manager parameters</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          <note>
                *             <p>The maximum length constraint of 2048 characters listed below includes 1037 characters
                *     reserved for internal use by Systems Manager. The maximum length for a parameter name that you create is
                *     1011 characters. This includes the characters in the ARN that precede the name you specify, such
                *     as <code>arn:aws:ssm:us-east-2:111122223333:parameter/</code>.</p>
                *          </note>
                */
            Name: string | undefined;
            /**
                * <p>Information about the parameter that you want to add to the system. Optional but
                *    recommended.</p>
                *          <important>
                *             <p>Don't enter personally identifiable information in this field.</p>
                *          </important>
                */
            Description?: string;
            /**
                * <p>The parameter value that you want to add to the system. Standard parameters have a value
                *    limit of 4 KB. Advanced parameters have a value limit of 8 KB.</p>
                *          <note>
                *             <p>Parameters can't be referenced or nested in the values of other parameters. You can't
                *     include <code>{{}}</code> or <code>{{ssm:<i>parameter-name</i>}}</code> in a
                *     parameter value.</p>
                *          </note>
                */
            Value: string | undefined;
            /**
                * <p>The type of parameter that you want to add to the system.</p>
                *          <note>
                *             <p>
                *                <code>SecureString</code> isn't currently supported for CloudFormation templates.</p>
                *          </note>
                *          <p>Items in a <code>StringList</code> must be separated by a comma (,). You can't
                *    use other punctuation or special character to escape items in the list. If you have a parameter
                *    value that requires a comma, then use the <code>String</code> data type.</p>
                *          <important>
                *             <p>Specifying a parameter type isn't required when updating a parameter. You must specify a
                *     parameter type when creating a parameter.</p>
                *          </important>
                */
            Type?: ParameterType | string;
            /**
                * <p>The Key Management Service (KMS) ID that you want to use to encrypt a
                *    parameter. Either the default KMS key automatically assigned to your Amazon Web Services account
                *    or a custom key. Required for parameters that use the <code>SecureString</code>
                *    data type.</p>
                *          <p>If you don't specify a key ID, the system uses the default key associated with your
                *    Amazon Web Services account.</p>
                *          <ul>
                *             <li>
                *                <p>To use your default KMS key, choose the <code>SecureString</code> data type, and do <i>not</i> specify the <code>Key ID</code> when you create the parameter. The system automatically populates
                *       <code>Key ID</code> with your default KMS key.</p>
                *             </li>
                *             <li>
                *                <p>To use a custom KMS key, choose the <code>SecureString</code>
                *      data type with the <code>Key ID</code> parameter.</p>
                *             </li>
                *          </ul>
                */
            KeyId?: string;
            /**
                * <p>Overwrite an existing parameter. The default value is <code>false</code>.</p>
                */
            Overwrite?: boolean;
            /**
                * <p>A regular expression used to validate the parameter value. For example, for String types
                *    with values restricted to numbers, you can specify the following: AllowedPattern=^\d+$ </p>
                */
            AllowedPattern?: string;
            /**
                * <p>Optional metadata that you assign to a resource. Tags enable you to categorize a resource in
                *    different ways, such as by purpose, owner, or environment. For example, you might want to tag a
                *    Systems Manager parameter to identify the type of resource to which it applies, the environment, or the
                *    type of configuration data referenced by the parameter. In this case, you could specify the
                *    following key-value pairs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Key=Resource,Value=S3bucket</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=OS,Value=Windows</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=ParameterType,Value=LicenseKey</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <note>
                *             <p>To add tags to an existing Systems Manager parameter, use the <a>AddTagsToResource</a>
                *     operation.</p>
                *          </note>
                */
            Tags?: Tag[];
            /**
                * <p>The parameter tier to assign to a parameter.</p>
                *          <p>Parameter Store offers a standard tier and an advanced tier for parameters. Standard
                *    parameters have a content size limit of 4 KB and can't be configured to use parameter policies.
                *    You can create a maximum of 10,000 standard parameters for each Region in an Amazon Web Services account.
                *    Standard parameters are offered at no additional cost. </p>
                *          <p>Advanced parameters have a content size limit of 8 KB and can be configured to use parameter
                *    policies. You can create a maximum of 100,000 advanced parameters for each Region in an
                *    Amazon Web Services account. Advanced parameters incur a charge. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-advanced-parameters.html">Standard and
                *     advanced parameter tiers</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          <p>You can change a standard parameter to an advanced parameter any time. But you can't revert
                *    an advanced parameter to a standard parameter. Reverting an advanced parameter to a standard
                *    parameter would result in data loss because the system would truncate the size of the parameter
                *    from 8 KB to 4 KB. Reverting would also remove any policies attached to the parameter. Lastly,
                *    advanced parameters use a different form of encryption than standard parameters. </p>
                *          <p>If you no longer need an advanced parameter, or if you no longer want to incur charges for
                *    an advanced parameter, you must delete it and recreate it as a new standard parameter. </p>
                *          <p>
                *             <b>Using the Default Tier Configuration</b>
                *          </p>
                *          <p>In <code>PutParameter</code> requests, you can specify the tier to create the parameter in.
                *    Whenever you specify a tier in the request, Parameter Store creates or updates the parameter
                *    according to that request. However, if you don't specify a tier in a request, Parameter Store
                *    assigns the tier based on the current Parameter Store default tier configuration.</p>
                *          <p>The default tier when you begin using Parameter Store is the standard-parameter tier. If you
                *    use the advanced-parameter tier, you can specify one of the following as the default:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Advanced</b>: With this option, Parameter Store evaluates all
                *      requests as advanced parameters. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Intelligent-Tiering</b>: With this option, Parameter Store
                *      evaluates each request to determine if the parameter is standard or advanced. </p>
                *                <p>If the request doesn't include any options that require an advanced parameter, the
                *      parameter is created in the standard-parameter tier. If one or more options requiring an
                *      advanced parameter are included in the request, Parameter Store create a parameter in the
                *      advanced-parameter tier.</p>
                *                <p>This approach helps control your parameter-related costs by always creating standard
                *      parameters unless an advanced parameter is necessary. </p>
                *             </li>
                *          </ul>
                *          <p>Options that require an advanced parameter include the following:</p>
                *          <ul>
                *             <li>
                *                <p>The content size of the parameter is more than 4 KB.</p>
                *             </li>
                *             <li>
                *                <p>The parameter uses a parameter policy.</p>
                *             </li>
                *             <li>
                *                <p>More than 10,000 parameters already exist in your Amazon Web Services account in the current
                *      Amazon Web Services Region.</p>
                *             </li>
                *          </ul>
                *          <p>For more information about configuring the default tier option, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/ps-default-tier.html">Specifying a
                *     default parameter tier</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            Tier?: ParameterTier | string;
            /**
                * <p>One or more policies to apply to a parameter. This operation takes a JSON array. Parameter
                *    Store, a capability of Amazon Web Services Systems Manager supports the following policy types:</p>
                *          <p>Expiration: This policy deletes the parameter after it expires. When you create the policy,
                *    you specify the expiration date. You can update the expiration date and time by updating the
                *    policy. Updating the <i>parameter</i> doesn't affect the expiration date and time.
                *    When the expiration time is reached, Parameter Store deletes the parameter.</p>
                *          <p>ExpirationNotification: This policy initiates an event in Amazon CloudWatch Events that
                *    notifies you about the expiration. By using this policy, you can receive notification before or
                *    after the expiration time is reached, in units of days or hours.</p>
                *          <p>NoChangeNotification: This policy initiates a CloudWatch Events event if a parameter hasn't
                *    been modified for a specified period of time. This policy type is useful when, for example, a
                *    secret needs to be changed within a period of time, but it hasn't been changed.</p>
                *          <p>All existing policies are preserved until you send new policies or an empty policy. For more
                *    information about parameter policies, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-policies.html">Assigning parameter
                *     policies</a>. </p>
                */
            Policies?: string;
            /**
                * <p>The data type for a <code>String</code> parameter. Supported data types include plain text
                *    and Amazon Machine Image (AMI) IDs.</p>
                *          <p>
                *             <b>The following data type values are supported.</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>text</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>aws:ec2:image</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>aws:ssm:integration</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>When you create a <code>String</code> parameter and specify <code>aws:ec2:image</code>,
                *    Amazon Web Services Systems Manager validates the parameter value is in the required format, such as
                *     <code>ami-12345abcdeEXAMPLE</code>, and that the specified AMI is available in your
                *    Amazon Web Services account. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-store-ec2-aliases.html">Native parameter support
                *     for Amazon Machine Image (AMI) IDs</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            DataType?: string;
    }
    export namespace PutParameterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutParameterRequest) => any;
    }
    export interface PutParameterResult {
            /**
                * <p>The new version number of a parameter. If you edit a parameter value, Parameter Store
                *    automatically creates a new version and assigns this new version a unique ID. You can reference a
                *    parameter version ID in API operations or in Systems Manager documents (SSM documents). By default, if you
                *    don't specify a specific version, the system returns the latest parameter value when a parameter
                *    is called.</p>
                */
            Version?: number;
            /**
                * <p>The tier assigned to the parameter.</p>
                */
            Tier?: ParameterTier | string;
    }
    export namespace PutParameterResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutParameterResult) => any;
    }
    /**
        * <p>The parameter type isn't supported.</p>
        */
    export class UnsupportedParameterType extends __BaseException {
            readonly name: "UnsupportedParameterType";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedParameterType, __BaseException>);
    }
    export interface RegisterDefaultPatchBaselineRequest {
            /**
                * <p>The ID of the patch baseline that should be the default patch baseline.</p>
                */
            BaselineId: string | undefined;
    }
    export namespace RegisterDefaultPatchBaselineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterDefaultPatchBaselineRequest) => any;
    }
    export interface RegisterDefaultPatchBaselineResult {
            /**
                * <p>The ID of the default patch baseline.</p>
                */
            BaselineId?: string;
    }
    export namespace RegisterDefaultPatchBaselineResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterDefaultPatchBaselineResult) => any;
    }
    export interface RegisterPatchBaselineForPatchGroupRequest {
            /**
                * <p>The ID of the patch baseline to register with the patch group.</p>
                */
            BaselineId: string | undefined;
            /**
                * <p>The name of the patch group to be registered with the patch baseline.</p>
                */
            PatchGroup: string | undefined;
    }
    export namespace RegisterPatchBaselineForPatchGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterPatchBaselineForPatchGroupRequest) => any;
    }
    export interface RegisterPatchBaselineForPatchGroupResult {
            /**
                * <p>The ID of the patch baseline the patch group was registered with.</p>
                */
            BaselineId?: string;
            /**
                * <p>The name of the patch group registered with the patch baseline.</p>
                */
            PatchGroup?: string;
    }
    export namespace RegisterPatchBaselineForPatchGroupResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterPatchBaselineForPatchGroupResult) => any;
    }
    export interface RegisterTargetWithMaintenanceWindowRequest {
            /**
                * <p>The ID of the maintenance window the target should be registered with.</p>
                */
            WindowId: string | undefined;
            /**
                * <p>The type of target being registered with the maintenance window.</p>
                */
            ResourceType: MaintenanceWindowResourceType | string | undefined;
            /**
                * <p>The targets to register with the maintenance window. In other words, the managed nodes to
                *    run commands on when the maintenance window runs.</p>
                *          <note>
                *             <p>If a single maintenance window task is registered with multiple targets, its task
                *     invocations occur sequentially and not in parallel. If your task must run on multiple targets at
                *     the same time, register a task for each target individually and assign each task the same
                *     priority level.</p>
                *          </note>
                *          <p>You can specify targets using managed node IDs, resource group names, or tags that have been
                *    applied to managed nodes.</p>
                *          <p>
                *             <b>Example 1</b>: Specify managed node IDs</p>
                *          <p>
                *             <code>Key=InstanceIds,Values=<instance-id-1>,<instance-id-2>,<instance-id-3></code>
                *          </p>
                *          <p>
                *             <b>Example 2</b>: Use tag key-pairs applied to managed
                *    nodes</p>
                *          <p>
                *             <code>Key=tag:<my-tag-key>,Values=<my-tag-value-1>,<my-tag-value-2></code>
                *          </p>
                *          <p>
                *             <b>Example 3</b>: Use tag-keys applied to managed nodes</p>
                *          <p>
                *             <code>Key=tag-key,Values=<my-tag-key-1>,<my-tag-key-2></code>
                *          </p>
                *
                *          <p>
                *             <b>Example 4</b>: Use resource group names</p>
                *          <p>
                *             <code>Key=resource-groups:Name,Values=<resource-group-name></code>
                *          </p>
                *          <p>
                *             <b>Example 5</b>: Use filters for resource group types</p>
                *          <p>
                *             <code>Key=resource-groups:ResourceTypeFilters,Values=<resource-type-1>,<resource-type-2></code>
                *          </p>
                *          <note>
                *             <p>For <code>Key=resource-groups:ResourceTypeFilters</code>, specify resource types in the
                *     following format</p>
                *             <p>
                *                <code>Key=resource-groups:ResourceTypeFilters,Values=AWS::EC2::INSTANCE,AWS::EC2::VPC</code>
                *             </p>
                *          </note>
                *
                *          <p>For more information about these examples formats, including the best use case for each one,
                *    see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/mw-cli-tutorial-targets-examples.html">Examples: Register
                *     targets with a maintenance window</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            Targets: Target[] | undefined;
            /**
                * <p>User-provided value that will be included in any Amazon CloudWatch Events events raised while
                *    running tasks for these targets in this maintenance window.</p>
                */
            OwnerInformation?: string;
            /**
                * <p>An optional name for the target.</p>
                */
            Name?: string;
            /**
                * <p>An optional description for the target.</p>
                */
            Description?: string;
            /**
                * <p>User-provided idempotency token.</p>
                */
            ClientToken?: string;
    }
    export namespace RegisterTargetWithMaintenanceWindowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterTargetWithMaintenanceWindowRequest) => any;
    }
    export interface RegisterTargetWithMaintenanceWindowResult {
            /**
                * <p>The ID of the target definition in this maintenance window.</p>
                */
            WindowTargetId?: string;
    }
    export namespace RegisterTargetWithMaintenanceWindowResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterTargetWithMaintenanceWindowResult) => any;
    }
    /**
        * <p>You attempted to register a <code>LAMBDA</code> or <code>STEP_FUNCTIONS</code> task in a
        *    region where the corresponding service isn't available. </p>
        */
    export class FeatureNotAvailableException extends __BaseException {
            readonly name: "FeatureNotAvailableException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<FeatureNotAvailableException, __BaseException>);
    }
    export interface RegisterTaskWithMaintenanceWindowRequest {
            /**
                * <p>The ID of the maintenance window the task should be added to.</p>
                */
            WindowId: string | undefined;
            /**
                * <p>The targets (either managed nodes or maintenance window targets).</p>
                *          <note>
                *             <p>One or more targets must be specified for maintenance window Run Command-type tasks.
                *     Depending on the task, targets are optional for other maintenance window task types (Automation,
                *      Lambda, and Step Functions). For more information about running tasks
                *     that don't specify targets, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">Registering
                *      maintenance window tasks without targets</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          </note>
                *          <p>Specify managed nodes using the following format: </p>
                *          <p>
                *             <code>Key=InstanceIds,Values=<instance-id-1>,<instance-id-2></code>
                *          </p>
                *          <p>Specify maintenance window targets using the following format:</p>
                *          <p>
                *             <code>Key=WindowTargetIds,Values=<window-target-id-1>,<window-target-id-2></code>
                *          </p>
                */
            Targets?: Target[];
            /**
                * <p>The ARN of the task to run.</p>
                */
            TaskArn: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM service role for Amazon Web Services Systems Manager to assume when running a
                *   maintenance window task. If you do not specify a service role ARN, Systems Manager uses your account's
                *   service-linked role.  If no service-linked role for Systems Manager exists in your account, it is created when you run
                *   <code>RegisterTaskWithMaintenanceWindow</code>.</p>
                *          <p>For more information, see the following topics in the in the <i>Amazon Web Services Systems Manager User Guide</i>:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/using-service-linked-roles.html#slr-permissions">Using
                *     service-linked roles for Systems Manager</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-permissions.html#maintenance-window-tasks-service-role">Should I use a service-linked role or a custom service role to run maintenance window tasks?
                *    </a>
                *                </p>
                *             </li>
                *          </ul>
                */
            ServiceRoleArn?: string;
            /**
                * <p>The type of task being registered.</p>
                */
            TaskType: MaintenanceWindowTaskType | string | undefined;
            /**
                * <p>The parameters that should be passed to the task when it is run.</p>
                *          <note>
                *             <p>
                *                <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs,
                *       instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information
                *       about how Systems Manager handles these options for the supported maintenance window task
                *       types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
                *          </note>
                */
            TaskParameters?: Record<string, MaintenanceWindowTaskParameterValueExpression>;
            /**
                * <p>The parameters that the task should use during execution. Populate only the fields that
                *    match the task type. All other fields should be empty. </p>
                */
            TaskInvocationParameters?: MaintenanceWindowTaskInvocationParameters;
            /**
                * <p>The priority of the task in the maintenance window, the lower the number the higher the
                *    priority. Tasks in a maintenance window are scheduled in priority order with tasks that have the
                *    same priority scheduled in parallel.</p>
                */
            Priority?: number;
            /**
                * <p>The maximum number of targets this task can be run for, in parallel.</p>
                *          <note>
                *             <p>Although this element is listed as "Required: No", a value can be omitted only when you are
                *     registering or updating a <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">targetless
                *      task</a> You must provide a value in all other cases.</p>
                *             <p>For maintenance window tasks without a target specified, you can't supply a value for this
                *     option. Instead, the system inserts a placeholder value of <code>1</code>. This value doesn't
                *     affect the running of your task.</p>
                *          </note>
                */
            MaxConcurrency?: string;
            /**
                * <p>The maximum number of errors allowed before this task stops being scheduled.</p>
                *          <note>
                *             <p>Although this element is listed as "Required: No", a value can be omitted only when you are
                *     registering or updating a <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">targetless
                *      task</a> You must provide a value in all other cases.</p>
                *             <p>For maintenance window tasks without a target specified, you can't supply a value for this
                *     option. Instead, the system inserts a placeholder value of <code>1</code>. This value doesn't
                *     affect the running of your task.</p>
                *          </note>
                */
            MaxErrors?: string;
            /**
                * <p>A structure containing information about an Amazon Simple Storage Service (Amazon S3) bucket
                *    to write managed node-level logs to. </p>
                *          <note>
                *             <p>
                *                <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the
                *       <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure.
                *       For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance
                *       window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
                *          </note>
                */
            LoggingInfo?: LoggingInfo;
            /**
                * <p>An optional name for the task.</p>
                */
            Name?: string;
            /**
                * <p>An optional description for the task.</p>
                */
            Description?: string;
            /**
                * <p>User-provided idempotency token.</p>
                */
            ClientToken?: string;
            /**
                * <p>Indicates whether tasks should continue to run after the cutoff time specified in the
                *    maintenance windows is reached. </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>CONTINUE_TASK</code>: When the cutoff time is reached, any tasks that are running
                *      continue. The default value.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CANCEL_TASK</code>:</p>
                *                <ul>
                *                   <li>
                *                      <p>For Automation, Lambda, Step Functions tasks: When the cutoff
                *        time is reached, any task invocations that are already running continue, but no new task
                *        invocations are started.</p>
                *                   </li>
                *                   <li>
                *                      <p>For Run Command tasks: When the cutoff time is reached, the system sends a <a>CancelCommand</a> operation that attempts to cancel the command associated with the
                *        task. However, there is no guarantee that the command will be terminated and the underlying
                *        process stopped.</p>
                *                   </li>
                *                </ul>
                *                <p>The status for tasks that are not completed is <code>TIMED_OUT</code>.</p>
                *             </li>
                *          </ul>
                */
            CutoffBehavior?: MaintenanceWindowTaskCutoffBehavior | string;
    }
    export namespace RegisterTaskWithMaintenanceWindowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterTaskWithMaintenanceWindowRequest) => any;
    }
    export interface RegisterTaskWithMaintenanceWindowResult {
            /**
                * <p>The ID of the task in the maintenance window.</p>
                */
            WindowTaskId?: string;
    }
    export namespace RegisterTaskWithMaintenanceWindowResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterTaskWithMaintenanceWindowResult) => any;
    }
    export interface RemoveTagsFromResourceRequest {
            /**
                * <p>The type of resource from which you want to remove a tag.</p>
                *          <note>
                *             <p>The <code>ManagedInstance</code> type for this API operation is only for on-premises
                *     managed nodes. Specify the name of the managed node in the following format:
                *       <code>mi-<i>ID_number</i>
                *                </code>. For example,
                *     <code>mi-1a2b3c4d5e6f</code>.</p>
                *          </note>
                */
            ResourceType: ResourceTypeForTagging | string | undefined;
            /**
                * <p>The ID of the resource from which you want to remove tags. For example:</p>
                *          <p>ManagedInstance: mi-012345abcde</p>
                *          <p>MaintenanceWindow: mw-012345abcde</p>
                *          <p>
                *             <code>Automation</code>: <code>example-c160-4567-8519-012345abcde</code>
                *          </p>
                *          <p>PatchBaseline: pb-012345abcde</p>
                *          <p>OpsMetadata object: <code>ResourceID</code> for tagging is created from the Amazon Resource
                *    Name (ARN) for the object. Specifically, <code>ResourceID</code> is created from the strings that
                *    come after the word <code>opsmetadata</code> in the ARN. For example, an OpsMetadata object with
                *    an ARN of <code>arn:aws:ssm:us-east-2:1234567890:opsmetadata/aws/ssm/MyGroup/appmanager</code>
                *    has a <code>ResourceID</code> of either <code>aws/ssm/MyGroup/appmanager</code> or
                *     <code>/aws/ssm/MyGroup/appmanager</code>.</p>
                *          <p>For the Document and Parameter values, use the name of the resource.</p>
                *          <note>
                *             <p>The <code>ManagedInstance</code> type for this API operation is only for on-premises
                *     managed nodes. Specify the name of the managed node in the following format: mi-ID_number. For
                *     example, mi-1a2b3c4d5e6f.</p>
                *          </note>
                */
            ResourceId: string | undefined;
            /**
                * <p>Tag keys that you want to remove from the specified resource.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace RemoveTagsFromResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTagsFromResourceRequest) => any;
    }
    export interface RemoveTagsFromResourceResult {
    }
    export namespace RemoveTagsFromResourceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveTagsFromResourceResult) => any;
    }
    /**
        * <p>The request body of the ResetServiceSetting API operation.</p>
        */
    export interface ResetServiceSettingRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the service setting to reset. The setting ID can be one of
                *    the following.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>/ssm/automation/customer-script-log-destination</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/automation/customer-script-log-group-name</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/documents/console/public-sharing-permission</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/parameter-store/default-parameter-tier</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/parameter-store/high-throughput-enabled</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/managed-instance/activation-tier</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            SettingId: string | undefined;
    }
    export namespace ResetServiceSettingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResetServiceSettingRequest) => any;
    }
    /**
        * <p>The result body of the ResetServiceSetting API operation.</p>
        */
    export interface ResetServiceSettingResult {
            /**
                * <p>The current, effective service setting after calling the ResetServiceSetting API
                *    operation.</p>
                */
            ServiceSetting?: ServiceSetting;
    }
    export namespace ResetServiceSettingResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResetServiceSettingResult) => any;
    }
    export interface ResumeSessionRequest {
            /**
                * <p>The ID of the disconnected session to resume.</p>
                */
            SessionId: string | undefined;
    }
    export namespace ResumeSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResumeSessionRequest) => any;
    }
    export interface ResumeSessionResponse {
            /**
                * <p>The ID of the session.</p>
                */
            SessionId?: string;
            /**
                * <p>An encrypted token value containing session and caller information. Used to authenticate the
                *    connection to the managed node.</p>
                */
            TokenValue?: string;
            /**
                * <p>A URL back to SSM Agent on the managed node that the Session Manager client uses to send commands and
                *    receive output from the managed node. Format: <code>wss://ssmmessages.<b>region</b>.amazonaws.com/v1/data-channel/<b>session-id</b>?stream=(input|output)</code>.</p>
                *          <p>
                *             <b>region</b> represents the Region identifier for an
                * 						Amazon Web Services Region supported by Amazon Web Services Systems Manager, such as <code>us-east-2</code> for the US East (Ohio) Region.
                * 						For a list of supported <b>region</b> values, see the <b>Region</b> column in <a href="https://docs.aws.amazon.com/general/latest/gr/ssm.html#ssm_region">Systems Manager service endpoints</a> in the
                *         <i>Amazon Web Services General Reference</i>.</p>
                *          <p>
                *             <b>session-id</b> represents the ID of a Session Manager session, such as
                *     <code>1a2b3c4dEXAMPLE</code>.</p>
                */
            StreamUrl?: string;
    }
    export namespace ResumeSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResumeSessionResponse) => any;
    }
    /**
        * <p>The specified step name and execution ID don't exist. Verify the information and try
        *    again.</p>
        */
    export class AutomationStepNotFoundException extends __BaseException {
            readonly name: "AutomationStepNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AutomationStepNotFoundException, __BaseException>);
    }
    /**
        * <p>The signal isn't valid for the current Automation execution.</p>
        */
    export class InvalidAutomationSignalException extends __BaseException {
            readonly name: "InvalidAutomationSignalException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidAutomationSignalException, __BaseException>);
    }
    export enum SignalType {
            APPROVE = "Approve",
            REJECT = "Reject",
            RESUME = "Resume",
            START_STEP = "StartStep",
            STOP_STEP = "StopStep"
    }
    export interface SendAutomationSignalRequest {
            /**
                * <p>The unique identifier for an existing Automation execution that you want to send the signal
                *    to.</p>
                */
            AutomationExecutionId: string | undefined;
            /**
                * <p>The type of signal to send to an Automation execution. </p>
                */
            SignalType: SignalType | string | undefined;
            /**
                * <p>The data sent with the signal. The data schema depends on the type of signal used in the
                *    request.</p>
                *          <p>For <code>Approve</code> and <code>Reject</code> signal types, the payload is an optional
                *    comment that you can send with the signal type. For example:</p>
                *          <p>
                *             <code>Comment="Looks good"</code>
                *          </p>
                *          <p>For <code>StartStep</code> and <code>Resume</code> signal types, you must send the name of
                *    the Automation step to start or resume as the payload. For example:</p>
                *          <p>
                *             <code>StepName="step1"</code>
                *          </p>
                *          <p>For the <code>StopStep</code> signal type, you must send the step execution ID as the
                *    payload. For example:</p>
                *          <p>
                *             <code>StepExecutionId="97fff367-fc5a-4299-aed8-0123456789ab"</code>
                *          </p>
                */
            Payload?: Record<string, string[]>;
    }
    export namespace SendAutomationSignalRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendAutomationSignalRequest) => any;
    }
    export interface SendAutomationSignalResult {
    }
    export namespace SendAutomationSignalResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendAutomationSignalResult) => any;
    }
    /**
        * <p>One or more configuration items isn't valid. Verify that a valid Amazon Resource Name (ARN)
        *    was provided for an Amazon Simple Notification Service topic.</p>
        */
    export class InvalidNotificationConfig extends __BaseException {
            readonly name: "InvalidNotificationConfig";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidNotificationConfig, __BaseException>);
    }
    /**
        * <p>The S3 bucket doesn't exist.</p>
        */
    export class InvalidOutputFolder extends __BaseException {
            readonly name: "InvalidOutputFolder";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidOutputFolder, __BaseException>);
    }
    /**
        * <p>The role name can't contain invalid characters. Also verify that you specified an IAM role for notifications that includes the required trust policy. For information about
        *    configuring the IAM role for Run Command notifications, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/rc-sns-notifications.html">Configuring Amazon SNS Notifications for Run Command</a> in the
        *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
        */
    export class InvalidRole extends __BaseException {
            readonly name: "InvalidRole";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRole, __BaseException>);
    }
    export interface SendCommandRequest {
            /**
                * <p>The IDs of the managed nodes where the command should run. Specifying managed node IDs is
                *    most useful when you are targeting a limited number of managed nodes, though you can specify up
                *    to 50 IDs.</p>
                *          <p>To target a larger number of managed nodes, or if you prefer not to list individual node
                *    IDs, we recommend using the <code>Targets</code> option instead. Using <code>Targets</code>,
                *    which accepts tag key-value pairs to identify the managed nodes to send commands to, you can a
                *    send command to tens, hundreds, or thousands of nodes at once.</p>
                *          <p>For more information about how to use targets, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html">Using targets and rate
                *     controls to send commands to a fleet</a> in the
                *    <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            InstanceIds?: string[];
            /**
                * <p>An array of search criteria that targets managed nodes using a <code>Key,Value</code>
                *    combination that you specify. Specifying targets is most useful when you want to send a command
                *    to a large number of managed nodes at once. Using <code>Targets</code>, which accepts tag
                *    key-value pairs to identify managed nodes, you can send a command to tens, hundreds, or thousands
                *    of nodes at once.</p>
                *          <p>To send a command to a smaller number of managed nodes, you can use the
                *     <code>InstanceIds</code> option instead.</p>
                *          <p>For more information about how to use targets, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html">Sending commands to a
                *     fleet</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            Targets?: Target[];
            /**
                * <p>The name of the Amazon Web Services Systems Manager document (SSM document) to run. This can be a public document or a
                *    custom document. To run a shared document belonging to another account, specify the document
                *    Amazon Resource Name (ARN). For more information about how to use shared documents, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-using-shared.html">Using shared
                *     SSM documents</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          <note>
                *             <p>If you specify a document name or ARN that hasn't been shared with your account, you
                *     receive an <code>InvalidDocument</code> error. </p>
                *          </note>
                */
            DocumentName: string | undefined;
            /**
                * <p>The SSM document version to use in the request. You can specify $DEFAULT, $LATEST, or a
                *    specific version number. If you run commands by using the Command Line Interface (Amazon Web Services CLI), then
                *    you must escape the first two options by using a backslash. If you specify a version number, then
                *    you don't need to use the backslash. For example:</p>
                *          <p>--document-version "\$DEFAULT"</p>
                *          <p>--document-version "\$LATEST"</p>
                *          <p>--document-version "3"</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The Sha256 or Sha1 hash created by the system when the document was created. </p>
                *          <note>
                *             <p>Sha1 hashes have been deprecated.</p>
                *          </note>
                */
            DocumentHash?: string;
            /**
                * <p>Sha256 or Sha1.</p>
                *          <note>
                *             <p>Sha1 hashes have been deprecated.</p>
                *          </note>
                */
            DocumentHashType?: DocumentHashType | string;
            /**
                * <p>If this time is reached and the command hasn't already started running, it won't run.</p>
                */
            TimeoutSeconds?: number;
            /**
                * <p>User-specified information about the command, such as a brief description of what the
                *    command should do.</p>
                */
            Comment?: string;
            /**
                * <p>The required and optional parameters specified in the document being run.</p>
                */
            Parameters?: Record<string, string[]>;
            /**
                * <p>(Deprecated) You can no longer specify this parameter. The system ignores it. Instead, Systems Manager
                *    automatically determines the Amazon Web Services Region of the S3 bucket.</p>
                */
            OutputS3Region?: string;
            /**
                * <p>The name of the S3 bucket where command execution responses should be stored.</p>
                */
            OutputS3BucketName?: string;
            /**
                * <p>The directory structure within the S3 bucket where the responses should be stored.</p>
                */
            OutputS3KeyPrefix?: string;
            /**
                * <p>(Optional) The maximum number of managed nodes that are allowed to run the command at the
                *    same time. You can specify a number such as 10 or a percentage such as 10%. The default value is
                *     <code>50</code>. For more information about how to use <code>MaxConcurrency</code>, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-velocity">Using
                *     concurrency controls</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            MaxConcurrency?: string;
            /**
                * <p>The maximum number of errors allowed without the command failing. When the command fails one
                *    more time beyond the value of <code>MaxErrors</code>, the systems stops sending the command to
                *    additional targets. You can specify a number like 10 or a percentage like 10%. The default value
                *    is <code>0</code>. For more information about how to use <code>MaxErrors</code>, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/send-commands-multiple.html#send-commands-maxerrors">Using
                *     error controls</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            MaxErrors?: string;
            /**
                * <p>The ARN of the Identity and Access Management (IAM) service role to use to publish
                *     Amazon Simple Notification Service (Amazon SNS) notifications for Run Command commands.</p>
                */
            ServiceRoleArn?: string;
            /**
                * <p>Configurations for sending notifications.</p>
                */
            NotificationConfig?: NotificationConfig;
            /**
                * <p>Enables Amazon Web Services Systems Manager to send Run Command output to Amazon CloudWatch Logs. Run Command is a
                *    capability of Amazon Web Services Systems Manager.</p>
                */
            CloudWatchOutputConfig?: CloudWatchOutputConfig;
    }
    export namespace SendCommandRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendCommandRequest) => any;
    }
    export interface SendCommandResult {
            /**
                * <p>The request as it was received by Systems Manager. Also provides the command ID which can be used
                *    future references to this request.</p>
                */
            Command?: Command;
    }
    export namespace SendCommandResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendCommandResult) => any;
    }
    /**
        * <p>The association isn't valid or doesn't exist. </p>
        */
    export class InvalidAssociation extends __BaseException {
            readonly name: "InvalidAssociation";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidAssociation, __BaseException>);
    }
    export interface StartAssociationsOnceRequest {
            /**
                * <p>The association IDs that you want to run immediately and only one time.</p>
                */
            AssociationIds: string[] | undefined;
    }
    export namespace StartAssociationsOnceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartAssociationsOnceRequest) => any;
    }
    export interface StartAssociationsOnceResult {
    }
    export namespace StartAssociationsOnceResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartAssociationsOnceResult) => any;
    }
    /**
        * <p>An Automation runbook with the specified name couldn't be found.</p>
        */
    export class AutomationDefinitionNotFoundException extends __BaseException {
            readonly name: "AutomationDefinitionNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AutomationDefinitionNotFoundException, __BaseException>);
    }
    /**
        * <p>An Automation runbook with the specified name and version couldn't be found.</p>
        */
    export class AutomationDefinitionVersionNotFoundException extends __BaseException {
            readonly name: "AutomationDefinitionVersionNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AutomationDefinitionVersionNotFoundException, __BaseException>);
    }
    /**
        * <p>The number of simultaneously running Automation executions exceeded the allowable
        *    limit.</p>
        */
    export class AutomationExecutionLimitExceededException extends __BaseException {
            readonly name: "AutomationExecutionLimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AutomationExecutionLimitExceededException, __BaseException>);
    }
    /**
        * <p>The supplied parameters for invoking the specified Automation runbook are incorrect. For
        *    example, they may not match the set of parameters permitted for the specified Automation
        *    document.</p>
        */
    export class InvalidAutomationExecutionParametersException extends __BaseException {
            readonly name: "InvalidAutomationExecutionParametersException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidAutomationExecutionParametersException, __BaseException>);
    }
    export interface StartAutomationExecutionRequest {
            /**
                * <p>The name of the SSM document to run. This can be a public document or a custom document. To
                *    run a shared document belonging to another account, specify the document ARN. For more
                *    information about how to use shared documents, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/ssm-using-shared.html">Using shared SSM documents</a>
                *    in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            DocumentName: string | undefined;
            /**
                * <p>The version of the Automation runbook to use for this execution.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>A key-value map of execution parameters, which match the declared parameters in the
                *    Automation runbook.</p>
                */
            Parameters?: Record<string, string[]>;
            /**
                * <p>User-provided idempotency token. The token must be unique, is case insensitive, enforces the
                *    UUID format, and can't be reused.</p>
                */
            ClientToken?: string;
            /**
                * <p>The execution mode of the automation. Valid modes include the following: Auto and
                *    Interactive. The default mode is Auto.</p>
                */
            Mode?: ExecutionMode | string;
            /**
                * <p>The name of the parameter used as the target resource for the rate-controlled execution.
                *    Required if you specify targets.</p>
                */
            TargetParameterName?: string;
            /**
                * <p>A key-value mapping to target resources. Required if you specify TargetParameterName.</p>
                */
            Targets?: Target[];
            /**
                * <p>A key-value mapping of document parameters to target resources. Both Targets and TargetMaps
                *    can't be specified together.</p>
                */
            TargetMaps?: Record<string, string[]>[];
            /**
                * <p>The maximum number of targets allowed to run this task in parallel. You can specify a
                *    number, such as 10, or a percentage, such as 10%. The default value is <code>10</code>.</p>
                */
            MaxConcurrency?: string;
            /**
                * <p>The number of errors that are allowed before the system stops running the automation on
                *    additional targets. You can specify either an absolute number of errors, for example 10, or a
                *    percentage of the target set, for example 10%. If you specify 3, for example, the system stops
                *    running the automation when the fourth error is received. If you specify 0, then the system stops
                *    running the automation on additional targets after the first error result is returned. If you run
                *    an automation on 50 resources and set max-errors to 10%, then the system stops running the
                *    automation on additional targets when the sixth error is received.</p>
                *          <p>Executions that are already running an automation when max-errors is reached are allowed to
                *    complete, but some of these executions may fail as well. If you need to ensure that there won't
                *    be more than max-errors failed executions, set max-concurrency to 1 so the executions proceed one
                *    at a time.</p>
                */
            MaxErrors?: string;
            /**
                * <p>A location is a combination of Amazon Web Services Regions and/or Amazon Web Services accounts where you want to run the
                *    automation. Use this operation to start an automation in multiple Amazon Web Services Regions and multiple
                *    Amazon Web Services accounts. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation-multiple-accounts-and-regions.html">Running Automation workflows in multiple Amazon Web Services Regions and Amazon Web Services accounts</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>. </p>
                */
            TargetLocations?: TargetLocation[];
            /**
                * <p>Optional metadata that you assign to a resource. You can specify a maximum of five tags for
                *    an automation. Tags enable you to categorize a resource in different ways, such as by purpose,
                *    owner, or environment. For example, you might want to tag an automation to identify an
                *    environment or operating system. In this case, you could specify the following key-value
                *    pairs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Key=environment,Value=test</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=OS,Value=Windows</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <note>
                *             <p>To add tags to an existing automation, use the <a>AddTagsToResource</a>
                *     operation.</p>
                *          </note>
                */
            Tags?: Tag[];
    }
    export namespace StartAutomationExecutionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartAutomationExecutionRequest) => any;
    }
    export interface StartAutomationExecutionResult {
            /**
                * <p>The unique ID of a newly scheduled automation execution.</p>
                */
            AutomationExecutionId?: string;
    }
    export namespace StartAutomationExecutionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartAutomationExecutionResult) => any;
    }
    /**
        * <p>Indicates that the Change Manager change template used in the change request was rejected or is
        *    still in a pending state.</p>
        */
    export class AutomationDefinitionNotApprovedException extends __BaseException {
            readonly name: "AutomationDefinitionNotApprovedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AutomationDefinitionNotApprovedException, __BaseException>);
    }
    export interface StartChangeRequestExecutionRequest {
            /**
                * <p>The date and time specified in the change request to run the Automation runbooks.</p>
                *          <note>
                *             <p>The Automation runbooks specified for the runbook workflow can't run until all required
                *     approvals for the change request have been received.</p>
                *          </note>
                */
            ScheduledTime?: Date;
            /**
                * <p>The name of the change template document to run during the runbook workflow.</p>
                */
            DocumentName: string | undefined;
            /**
                * <p>The version of the change template document to run during the runbook workflow.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>A key-value map of parameters that match the declared parameters in the change template
                *    document.</p>
                */
            Parameters?: Record<string, string[]>;
            /**
                * <p>The name of the change request associated with the runbook workflow to be run.</p>
                */
            ChangeRequestName?: string;
            /**
                * <p>The user-provided idempotency token. The token must be unique, is case insensitive, enforces
                *    the UUID format, and can't be reused.</p>
                */
            ClientToken?: string;
            /**
                * <p>Indicates whether the change request can be approved automatically without the need for
                *    manual approvals.</p>
                *          <p>If <code>AutoApprovable</code> is enabled in a change template, then setting
                *     <code>AutoApprove</code> to <code>true</code> in <code>StartChangeRequestExecution</code>
                *    creates a change request that bypasses approver review.</p>
                *          <note>
                *             <p>Change Calendar restrictions are not bypassed in this scenario. If the state of an
                *     associated calendar is <code>CLOSED</code>, change freeze approvers must still grant permission
                *     for this change request to run. If they don't, the change won't be processed until the calendar
                *     state is again <code>OPEN</code>. </p>
                *          </note>
                */
            AutoApprove?: boolean;
            /**
                * <p>Information about the Automation runbooks that are run during the runbook workflow.</p>
                *          <note>
                *             <p>The Automation runbooks specified for the runbook workflow can't run until all required
                *     approvals for the change request have been received.</p>
                *          </note>
                */
            Runbooks: Runbook[] | undefined;
            /**
                * <p>Optional metadata that you assign to a resource. You can specify a maximum of five tags for
                *    a change request. Tags enable you to categorize a resource in different ways, such as by
                *    purpose, owner, or environment. For example, you might want to tag a change request to identify
                *    an environment or target Amazon Web Services Region. In this case, you could specify the following key-value
                *    pairs:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>Key=Environment,Value=Production</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>Key=Region,Value=us-east-2</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            Tags?: Tag[];
            /**
                * <p>The time that the requester expects the runbook workflow related to the change request to
                *    complete. The time is an estimate only that the requester provides for reviewers.</p>
                */
            ScheduledEndTime?: Date;
            /**
                * <p>User-provided details about the change. If no details are provided, content specified in the
                *     <b>Template information</b> section of the associated change template
                *    is added.</p>
                */
            ChangeDetails?: string;
    }
    export namespace StartChangeRequestExecutionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartChangeRequestExecutionRequest) => any;
    }
    export interface StartChangeRequestExecutionResult {
            /**
                * <p>The unique ID of a runbook workflow operation. (A runbook workflow is a type of Automation
                *    operation.) </p>
                */
            AutomationExecutionId?: string;
    }
    export namespace StartChangeRequestExecutionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartChangeRequestExecutionResult) => any;
    }
    export interface StartSessionRequest {
            /**
                * <p>The managed node to connect to for the session.</p>
                */
            Target: string | undefined;
            /**
                * <p>The name of the SSM document to define the parameters and plugin settings for the session.
                *    For example, <code>SSM-SessionManagerRunShell</code>. You can call the <a>GetDocument</a> API to verify the document exists before attempting to start a session.
                *    If no document name is provided, a shell to the managed node is launched by default.</p>
                */
            DocumentName?: string;
            /**
                * <p>The reason for connecting to the instance. This value is included in the details for the
                *     Amazon CloudWatch Events event created when you start the session.</p>
                */
            Reason?: string;
            /**
                * <p>The values you want to specify for the parameters defined in the Session
                *    document.</p>
                */
            Parameters?: Record<string, string[]>;
    }
    export namespace StartSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSessionRequest) => any;
    }
    export interface StartSessionResponse {
            /**
                * <p>The ID of the session.</p>
                */
            SessionId?: string;
            /**
                * <p>An encrypted token value containing session and caller information. Used to authenticate the
                *    connection to the managed node.</p>
                */
            TokenValue?: string;
            /**
                * <p>A URL back to SSM Agent on the managed node that the Session Manager client uses to send commands and
                *    receive output from the node. Format: <code>wss://ssmmessages.<b>region</b>.amazonaws.com/v1/data-channel/<b>session-id</b>?stream=(input|output)</code>
                *          </p>
                *          <p>
                *             <b>region</b> represents the Region identifier for an
                * 						Amazon Web Services Region supported by Amazon Web Services Systems Manager, such as <code>us-east-2</code> for the US East (Ohio) Region.
                * 						For a list of supported <b>region</b> values, see the <b>Region</b> column in <a href="https://docs.aws.amazon.com/general/latest/gr/ssm.html#ssm_region">Systems Manager service endpoints</a> in the
                *         <i>Amazon Web Services General Reference</i>.</p>
                *          <p>
                *             <b>session-id</b> represents the ID of a Session Manager session, such as
                *     <code>1a2b3c4dEXAMPLE</code>.</p>
                */
            StreamUrl?: string;
    }
    export namespace StartSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSessionResponse) => any;
    }
    /**
        * <p>The specified target managed node for the session isn't fully configured for use with Session Manager.
        *    For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-getting-started.html">Getting started with
        *     Session Manager</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. This error is also returned if you
        *    attempt to start a session on a managed node that is located in a different account or
        *    Region</p>
        */
    export class TargetNotConnected extends __BaseException {
            readonly name: "TargetNotConnected";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TargetNotConnected, __BaseException>);
    }
    /**
        * <p>The specified update status operation isn't valid.</p>
        */
    export class InvalidAutomationStatusUpdateException extends __BaseException {
            readonly name: "InvalidAutomationStatusUpdateException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidAutomationStatusUpdateException, __BaseException>);
    }
    export enum StopType {
            CANCEL = "Cancel",
            COMPLETE = "Complete"
    }
    export interface StopAutomationExecutionRequest {
            /**
                * <p>The execution ID of the Automation to stop.</p>
                */
            AutomationExecutionId: string | undefined;
            /**
                * <p>The stop request type. Valid types include the following: Cancel and Complete. The default
                *    type is Cancel.</p>
                */
            Type?: StopType | string;
    }
    export namespace StopAutomationExecutionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopAutomationExecutionRequest) => any;
    }
    export interface StopAutomationExecutionResult {
    }
    export namespace StopAutomationExecutionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopAutomationExecutionResult) => any;
    }
    export interface TerminateSessionRequest {
            /**
                * <p>The ID of the session to terminate.</p>
                */
            SessionId: string | undefined;
    }
    export namespace TerminateSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TerminateSessionRequest) => any;
    }
    export interface TerminateSessionResponse {
            /**
                * <p>The ID of the session that has been terminated.</p>
                */
            SessionId?: string;
    }
    export namespace TerminateSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TerminateSessionResponse) => any;
    }
    export interface UnlabelParameterVersionRequest {
            /**
                * <p>The name of the parameter from which you want to delete one or more labels.</p>
                */
            Name: string | undefined;
            /**
                * <p>The specific version of the parameter which you want to delete one or more labels from. If
                *    it isn't present, the call will fail.</p>
                */
            ParameterVersion: number | undefined;
            /**
                * <p>One or more labels to delete from the specified parameter version.</p>
                */
            Labels: string[] | undefined;
    }
    export namespace UnlabelParameterVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnlabelParameterVersionRequest) => any;
    }
    export interface UnlabelParameterVersionResult {
            /**
                * <p>A list of all labels deleted from the parameter.</p>
                */
            RemovedLabels?: string[];
            /**
                * <p>The labels that aren't attached to the given parameter version.</p>
                */
            InvalidLabels?: string[];
    }
    export namespace UnlabelParameterVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnlabelParameterVersionResult) => any;
    }
    /**
        * <p>You have reached the maximum number versions allowed for an association. Each association
        *    has a limit of 1,000 versions. </p>
        */
    export class AssociationVersionLimitExceeded extends __BaseException {
            readonly name: "AssociationVersionLimitExceeded";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AssociationVersionLimitExceeded, __BaseException>);
    }
    /**
        * <p>The update isn't valid.</p>
        */
    export class InvalidUpdate extends __BaseException {
            readonly name: "InvalidUpdate";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidUpdate, __BaseException>);
    }
    export interface UpdateAssociationRequest {
            /**
                * <p>The ID of the association you want to update. </p>
                */
            AssociationId: string | undefined;
            /**
                * <p>The parameters you want to update for the association. If you create a parameter using
                *    Parameter Store, a capability of Amazon Web Services Systems Manager, you can reference the parameter using
                *     <code>{{ssm:parameter-name}}</code>.</p>
                */
            Parameters?: Record<string, string[]>;
            /**
                * <p>The document version you want update for the association. </p>
                *          <important>
                *             <p>State Manager doesn't support running associations that use a new version of a document if
                *     that document is shared from another account. State Manager always runs the <code>default</code>
                *     version of a document if shared from another account, even though the Systems Manager console shows that a
                *     new version was processed. If you want to run an association using a new version of a document
                *     shared form another account, you must set the document version to <code>default</code>.</p>
                *          </important>
                */
            DocumentVersion?: string;
            /**
                * <p>The cron expression used to schedule the association that you want to update.</p>
                */
            ScheduleExpression?: string;
            /**
                * <p>An S3 bucket where you want to store the results of this request.</p>
                */
            OutputLocation?: InstanceAssociationOutputLocation;
            /**
                * <p>The name of the SSM Command document or Automation runbook that contains the configuration
                *    information for the managed node.</p>
                *          <p>You can specify Amazon Web Services-predefined documents, documents you created, or a document that is
                *    shared with you from another account.</p>
                *          <p>For Systems Manager document (SSM document) that are shared with you from other Amazon Web Services accounts, you
                *    must specify the complete SSM document ARN, in the following format:</p>
                *          <p>
                *             <code>arn:aws:ssm:<i>region</i>:<i>account-id</i>:document/<i>document-name</i>
                *             </code>
                *          </p>
                *          <p>For example:</p>
                *          <p>
                *             <code>arn:aws:ssm:us-east-2:12345678912:document/My-Shared-Document</code>
                *          </p>
                *          <p>For Amazon Web Services-predefined documents and SSM documents you created in your account, you only need
                *    to specify the document name. For example, <code>AWS-ApplyPatchBaseline</code> or
                *     <code>My-Document</code>.</p>
                */
            Name?: string;
            /**
                * <p>The targets of the association.</p>
                */
            Targets?: Target[];
            /**
                * <p>The name of the association that you want to update.</p>
                */
            AssociationName?: string;
            /**
                * <p>This parameter is provided for concurrency control purposes. You must specify the latest
                *    association version in the service. If you want to ensure that this request succeeds, either
                *    specify <code>$LATEST</code>, or omit this parameter.</p>
                */
            AssociationVersion?: string;
            /**
                * <p>Choose the parameter that will define how your automation will branch out. This target is
                *    required for associations that use an Automation runbook and target resources by using rate
                *    controls. Automation is a capability of Amazon Web Services Systems Manager.</p>
                */
            AutomationTargetParameterName?: string;
            /**
                * <p>The number of errors that are allowed before the system stops sending requests to run the
                *    association on additional targets. You can specify either an absolute number of errors, for
                *    example 10, or a percentage of the target set, for example 10%. If you specify 3, for example,
                *    the system stops sending requests when the fourth error is received. If you specify 0, then the
                *    system stops sending requests after the first error is returned. If you run an association on 50
                *    managed nodes and set <code>MaxError</code> to 10%, then the system stops sending the request
                *    when the sixth error is received.</p>
                *          <p>Executions that are already running an association when <code>MaxErrors</code> is reached
                *    are allowed to complete, but some of these executions may fail as well. If you need to ensure
                *    that there won't be more than max-errors failed executions, set <code>MaxConcurrency</code> to 1
                *    so that executions proceed one at a time.</p>
                */
            MaxErrors?: string;
            /**
                * <p>The maximum number of targets allowed to run the association at the same time. You can
                *    specify a number, for example 10, or a percentage of the target set, for example 10%. The default
                *    value is 100%, which means all targets run the association at the same time.</p>
                *          <p>If a new managed node starts and attempts to run an association while Systems Manager is running
                *     <code>MaxConcurrency</code> associations, the association is allowed to run. During the next
                *    association interval, the new managed node will process its association within the limit
                *    specified for <code>MaxConcurrency</code>.</p>
                */
            MaxConcurrency?: string;
            /**
                * <p>The severity level to assign to the association.</p>
                */
            ComplianceSeverity?: AssociationComplianceSeverity | string;
            /**
                * <p>The mode for generating association compliance. You can specify <code>AUTO</code> or
                *     <code>MANUAL</code>. In <code>AUTO</code> mode, the system uses the status of the association
                *    execution to determine the compliance status. If the association execution runs successfully,
                *    then the association is <code>COMPLIANT</code>. If the association execution doesn't run
                *    successfully, the association is <code>NON-COMPLIANT</code>.</p>
                *          <p>In <code>MANUAL</code> mode, you must specify the <code>AssociationId</code> as a parameter
                *    for the <a>PutComplianceItems</a> API operation. In this case, compliance data isn't
                *    managed by State Manager, a capability of Amazon Web Services Systems Manager. It is managed by your direct call to the
                *     <a>PutComplianceItems</a> API operation.</p>
                *          <p>By default, all associations use <code>AUTO</code> mode.</p>
                */
            SyncCompliance?: AssociationSyncCompliance | string;
            /**
                * <p>By default, when you update an association, the system runs it immediately after it is
                *    updated and then according to the schedule you specified. Specify this option if you don't want
                *    an association to run immediately after you update it. This parameter isn't supported for rate
                *    expressions.</p>
                *
                *          <p>If you chose this option when you created an association and later you edit that association
                *    or you make changes to the SSM document on which that association is based (by using the
                *    Documents page in the console), State Manager applies the association at the next specified cron
                *    interval. For example, if you chose the <code>Latest</code> version of an SSM document when you
                *    created an association and you edit the association by choosing a different document version on
                *    the Documents page, State Manager applies the association at the next specified cron interval if
                *    you previously selected this option. If this option wasn't selected, State Manager immediately
                *    runs the association.</p>
                *          <p>You can reset this option. To do so, specify the <code>no-apply-only-at-cron-interval</code>
                *    parameter when you update the association from the command line. This parameter forces the
                *    association to run immediately after updating it and according to the interval specified.</p>
                */
            ApplyOnlyAtCronInterval?: boolean;
            /**
                * <p>The names or Amazon Resource Names (ARNs) of the Change Calendar type documents you want to
                *    gate your associations under. The associations only run when that change calendar is open. For
                *    more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-change-calendar">Amazon Web Services Systems Manager Change
                *     Calendar</a>.</p>
                */
            CalendarNames?: string[];
            /**
                * <p>A location is a combination of Amazon Web Services Regions and Amazon Web Services accounts where you want to run the
                *    association. Use this action to update an association in multiple Regions and multiple
                *    accounts.</p>
                */
            TargetLocations?: TargetLocation[];
            /**
                * <p>Number of days to wait after the scheduled day to run an association. For example, if you
                *    specified a cron schedule of <code>cron(0 0 ? * THU#2 *)</code>, you could specify an offset of 3
                *    to run the association each Sunday after the second Thursday of the month. For more information
                *    about cron schedules for associations, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/reference-cron-and-rate-expressions.html">Reference: Cron
                *     and rate expressions for Systems Manager</a> in the <i>Amazon Web Services Systems Manager User Guide</i>. </p>
                *          <note>
                *             <p>To use offsets, you must specify the <code>ApplyOnlyAtCronInterval</code> parameter. This
                *     option tells the system not to run an association immediately after you create it. </p>
                *          </note>
                */
            ScheduleOffset?: number;
            /**
                * <p>A key-value mapping of document parameters to target resources. Both Targets and TargetMaps
                *    can't be specified together.</p>
                */
            TargetMaps?: Record<string, string[]>[];
    }
    export namespace UpdateAssociationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssociationRequest) => any;
    }
    export interface UpdateAssociationResult {
            /**
                * <p>The description of the association that was updated.</p>
                */
            AssociationDescription?: AssociationDescription;
    }
    export namespace UpdateAssociationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssociationResult) => any;
    }
    /**
        * <p>The updated status is the same as the current status.</p>
        */
    export class StatusUnchanged extends __BaseException {
            readonly name: "StatusUnchanged";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<StatusUnchanged, __BaseException>);
    }
    export interface UpdateAssociationStatusRequest {
            /**
                * <p>The name of the SSM document.</p>
                */
            Name: string | undefined;
            /**
                * <p>The managed node ID.</p>
                */
            InstanceId: string | undefined;
            /**
                * <p>The association status.</p>
                */
            AssociationStatus: AssociationStatus | undefined;
    }
    export namespace UpdateAssociationStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssociationStatusRequest) => any;
    }
    export interface UpdateAssociationStatusResult {
            /**
                * <p>Information about the association.</p>
                */
            AssociationDescription?: AssociationDescription;
    }
    export namespace UpdateAssociationStatusResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssociationStatusResult) => any;
    }
    /**
        * <p>The document has too many versions. Delete one or more document versions and try
        *    again.</p>
        */
    export class DocumentVersionLimitExceeded extends __BaseException {
            readonly name: "DocumentVersionLimitExceeded";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DocumentVersionLimitExceeded, __BaseException>);
    }
    /**
        * <p>The content of the association document matches another document. Change the content of the
        *    document and try again.</p>
        */
    export class DuplicateDocumentContent extends __BaseException {
            readonly name: "DuplicateDocumentContent";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateDocumentContent, __BaseException>);
    }
    /**
        * <p>The version name has already been used in this document. Specify a different version name,
        *    and then try again.</p>
        */
    export class DuplicateDocumentVersionName extends __BaseException {
            readonly name: "DuplicateDocumentVersionName";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateDocumentVersionName, __BaseException>);
    }
    export interface UpdateDocumentRequest {
            /**
                * <p>A valid JSON or YAML string.</p>
                */
            Content: string | undefined;
            /**
                * <p>A list of key-value pairs that describe attachments to a version of a document.</p>
                */
            Attachments?: AttachmentsSource[];
            /**
                * <p>The name of the SSM document that you want to update.</p>
                */
            Name: string | undefined;
            /**
                * <p>The friendly name of the SSM document that you want to update. This value can differ for
                *    each version of the document. If you don't specify a value for this parameter in your request,
                *    the existing value is applied to the new document version.</p>
                */
            DisplayName?: string;
            /**
                * <p>An optional field specifying the version of the artifact you are updating with the document.
                *    For example, "Release 12, Update 6". This value is unique across all versions of a document, and
                *    can't be changed.</p>
                */
            VersionName?: string;
            /**
                * <p>The version of the document that you want to update. Currently, Systems Manager supports updating only
                *    the latest version of the document. You can specify the version number of the latest version or
                *    use the <code>$LATEST</code> variable.</p>
                *          <note>
                *             <p>If you change a document version for a State Manager association, Systems Manager immediately runs
                *     the association unless you previously specifed the <code>apply-only-at-cron-interval</code>
                *     parameter.</p>
                *          </note>
                */
            DocumentVersion?: string;
            /**
                * <p>Specify the document format for the new document version. Systems Manager supports JSON and YAML
                *    documents. JSON is the default format.</p>
                */
            DocumentFormat?: DocumentFormat | string;
            /**
                * <p>Specify a new target type for the document.</p>
                */
            TargetType?: string;
    }
    export namespace UpdateDocumentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDocumentRequest) => any;
    }
    export interface UpdateDocumentResult {
            /**
                * <p>A description of the document that was updated.</p>
                */
            DocumentDescription?: DocumentDescription;
    }
    export namespace UpdateDocumentResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDocumentResult) => any;
    }
    export interface UpdateDocumentDefaultVersionRequest {
            /**
                * <p>The name of a custom document that you want to set as the default version.</p>
                */
            Name: string | undefined;
            /**
                * <p>The version of a custom document that you want to set as the default version.</p>
                */
            DocumentVersion: string | undefined;
    }
    export namespace UpdateDocumentDefaultVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDocumentDefaultVersionRequest) => any;
    }
    /**
        * <p>A default version of a document.</p>
        */
    export interface DocumentDefaultVersionDescription {
            /**
                * <p>The name of the document.</p>
                */
            Name?: string;
            /**
                * <p>The default version of the document.</p>
                */
            DefaultVersion?: string;
            /**
                * <p>The default version of the artifact associated with the document.</p>
                */
            DefaultVersionName?: string;
    }
    export namespace DocumentDefaultVersionDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentDefaultVersionDescription) => any;
    }
    export interface UpdateDocumentDefaultVersionResult {
            /**
                * <p>The description of a custom document that you want to set as the default version.</p>
                */
            Description?: DocumentDefaultVersionDescription;
    }
    export namespace UpdateDocumentDefaultVersionResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDocumentDefaultVersionResult) => any;
    }
    export enum DocumentReviewAction {
            Approve = "Approve",
            Reject = "Reject",
            SendForReview = "SendForReview",
            UpdateReview = "UpdateReview"
    }
    /**
        * <p>Information about a document approval review.</p>
        */
    export interface DocumentReviews {
            /**
                * <p>The action to take on a document approval review request.</p>
                */
            Action: DocumentReviewAction | string | undefined;
            /**
                * <p>A comment entered by a user in your organization about the document review request.</p>
                */
            Comment?: DocumentReviewCommentSource[];
    }
    export namespace DocumentReviews {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DocumentReviews) => any;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_2' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { LoggingInfo, MaintenanceWindowTaskCutoffBehavior, MaintenanceWindowTaskParameterValueExpression, MetadataValue, OperatingSystem, OpsItemDataValue, OpsItemNotification, OpsItemStatus, PatchAction, PatchComplianceLevel, PatchFilterGroup, PatchRuleGroup, PatchSource, RelatedOpsItem, ResourceDataSyncSource, Target } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_0";
    import { DocumentReviews, InventoryFilter, InventoryGroup, MaintenanceWindowTaskInvocationParameters, OpsFilter, OpsResultAttribute, ResultAttribute } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/models_1";
    import { SSMServiceException as __BaseException } from "@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/SSMServiceException";
    export interface UpdateDocumentMetadataRequest {
            /**
                * <p>The name of the change template for which a version's metadata is to be updated.</p>
                */
            Name: string | undefined;
            /**
                * <p>The version of a change template in which to update approval metadata.</p>
                */
            DocumentVersion?: string;
            /**
                * <p>The change template review details to update.</p>
                */
            DocumentReviews: DocumentReviews | undefined;
    }
    export namespace UpdateDocumentMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDocumentMetadataRequest) => any;
    }
    export interface UpdateDocumentMetadataResponse {
    }
    export namespace UpdateDocumentMetadataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDocumentMetadataResponse) => any;
    }
    export interface UpdateMaintenanceWindowRequest {
            /**
                * <p>The ID of the maintenance window to update.</p>
                */
            WindowId: string | undefined;
            /**
                * <p>The name of the maintenance window.</p>
                */
            Name?: string;
            /**
                * <p>An optional description for the update request.</p>
                */
            Description?: string;
            /**
                * <p>The date and time, in ISO-8601 Extended format, for when you want the maintenance window to
                *    become active. <code>StartDate</code> allows you to delay activation of the maintenance window
                *    until the specified future date.</p>
                */
            StartDate?: string;
            /**
                * <p>The date and time, in ISO-8601 Extended format, for when you want the maintenance window to
                *    become inactive. <code>EndDate</code> allows you to set a date and time in the future when the
                *    maintenance window will no longer run.</p>
                */
            EndDate?: string;
            /**
                * <p>The schedule of the maintenance window in the form of a cron or rate expression.</p>
                */
            Schedule?: string;
            /**
                * <p>The time zone that the scheduled maintenance window executions are based on, in Internet
                *    Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or
                *    "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time
                *     Zone Database</a> on the IANA website.</p>
                */
            ScheduleTimezone?: string;
            /**
                * <p>The number of days to wait after the date and time specified by a cron expression before
                *    running the maintenance window.</p>
                *          <p>For example, the following cron expression schedules a maintenance window to run the third
                *    Tuesday of every month at 11:30 PM.</p>
                *          <p>
                *             <code>cron(30 23 ? * TUE#3 *)</code>
                *          </p>
                *          <p>If the schedule offset is <code>2</code>, the maintenance window won't run until two days
                *    later.</p>
                */
            ScheduleOffset?: number;
            /**
                * <p>The duration of the maintenance window in hours.</p>
                */
            Duration?: number;
            /**
                * <p>The number of hours before the end of the maintenance window that Amazon Web Services Systems Manager stops scheduling
                *    new tasks for execution.</p>
                */
            Cutoff?: number;
            /**
                * <p>Whether targets must be registered with the maintenance window before tasks can be defined
                *    for those targets.</p>
                */
            AllowUnassociatedTargets?: boolean;
            /**
                * <p>Whether the maintenance window is enabled.</p>
                */
            Enabled?: boolean;
            /**
                * <p>If <code>True</code>, then all fields that are required by the <a>CreateMaintenanceWindow</a> operation are also required for this API request. Optional
                *    fields that aren't specified are set to null. </p>
                */
            Replace?: boolean;
    }
    export namespace UpdateMaintenanceWindowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMaintenanceWindowRequest) => any;
    }
    export interface UpdateMaintenanceWindowResult {
            /**
                * <p>The ID of the created maintenance window.</p>
                */
            WindowId?: string;
            /**
                * <p>The name of the maintenance window.</p>
                */
            Name?: string;
            /**
                * <p>An optional description of the update.</p>
                */
            Description?: string;
            /**
                * <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled
                *    to become active. The maintenance window won't run before this specified time.</p>
                */
            StartDate?: string;
            /**
                * <p>The date and time, in ISO-8601 Extended format, for when the maintenance window is scheduled
                *    to become inactive. The maintenance window won't run after this specified time.</p>
                */
            EndDate?: string;
            /**
                * <p>The schedule of the maintenance window in the form of a cron or rate expression.</p>
                */
            Schedule?: string;
            /**
                * <p>The time zone that the scheduled maintenance window executions are based on, in Internet
                *    Assigned Numbers Authority (IANA) format. For example: "America/Los_Angeles", "UTC", or
                *    "Asia/Seoul". For more information, see the <a href="https://www.iana.org/time-zones">Time
                *     Zone Database</a> on the IANA website.</p>
                */
            ScheduleTimezone?: string;
            /**
                * <p>The number of days to wait to run a maintenance window after the scheduled cron expression
                *    date and time.</p>
                */
            ScheduleOffset?: number;
            /**
                * <p>The duration of the maintenance window in hours.</p>
                */
            Duration?: number;
            /**
                * <p>The number of hours before the end of the maintenance window that Amazon Web Services Systems Manager stops scheduling
                *    new tasks for execution.</p>
                */
            Cutoff?: number;
            /**
                * <p>Whether targets must be registered with the maintenance window before tasks can be defined
                *    for those targets.</p>
                */
            AllowUnassociatedTargets?: boolean;
            /**
                * <p>Whether the maintenance window is enabled.</p>
                */
            Enabled?: boolean;
    }
    export namespace UpdateMaintenanceWindowResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMaintenanceWindowResult) => any;
    }
    export interface UpdateMaintenanceWindowTargetRequest {
            /**
                * <p>The maintenance window ID with which to modify the target.</p>
                */
            WindowId: string | undefined;
            /**
                * <p>The target ID to modify.</p>
                */
            WindowTargetId: string | undefined;
            /**
                * <p>The targets to add or replace.</p>
                */
            Targets?: Target[];
            /**
                * <p>User-provided value that will be included in any Amazon CloudWatch Events events raised while
                *    running tasks for these targets in this maintenance window.</p>
                */
            OwnerInformation?: string;
            /**
                * <p>A name for the update.</p>
                */
            Name?: string;
            /**
                * <p>An optional description for the update.</p>
                */
            Description?: string;
            /**
                * <p>If <code>True</code>, then all fields that are required by the <a>RegisterTargetWithMaintenanceWindow</a> operation are also required for this API
                *    request. Optional fields that aren't specified are set to null.</p>
                */
            Replace?: boolean;
    }
    export namespace UpdateMaintenanceWindowTargetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMaintenanceWindowTargetRequest) => any;
    }
    export interface UpdateMaintenanceWindowTargetResult {
            /**
                * <p>The maintenance window ID specified in the update request.</p>
                */
            WindowId?: string;
            /**
                * <p>The target ID specified in the update request.</p>
                */
            WindowTargetId?: string;
            /**
                * <p>The updated targets.</p>
                */
            Targets?: Target[];
            /**
                * <p>The updated owner.</p>
                */
            OwnerInformation?: string;
            /**
                * <p>The updated name.</p>
                */
            Name?: string;
            /**
                * <p>The updated description.</p>
                */
            Description?: string;
    }
    export namespace UpdateMaintenanceWindowTargetResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMaintenanceWindowTargetResult) => any;
    }
    export interface UpdateMaintenanceWindowTaskRequest {
            /**
                * <p>The maintenance window ID that contains the task to modify.</p>
                */
            WindowId: string | undefined;
            /**
                * <p>The task ID to modify.</p>
                */
            WindowTaskId: string | undefined;
            /**
                * <p>The targets (either managed nodes or tags) to modify. Managed nodes are specified using the
                *    format <code>Key=instanceids,Values=instanceID_1,instanceID_2</code>. Tags are specified using
                *    the format <code> Key=tag_name,Values=tag_value</code>. </p>
                *          <note>
                *             <p>One or more targets must be specified for maintenance window Run Command-type tasks.
                *     Depending on the task, targets are optional for other maintenance window task types (Automation,
                *      Lambda, and Step Functions). For more information about running tasks
                *     that don't specify targets, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">Registering
                *      maintenance window tasks without targets</a> in the
                *     <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                *          </note>
                */
            Targets?: Target[];
            /**
                * <p>The task ARN to modify.</p>
                */
            TaskArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM service role for Amazon Web Services Systems Manager to assume when running a
                *   maintenance window task. If you do not specify a service role ARN, Systems Manager uses your account's
                *   service-linked role.  If no service-linked role for Systems Manager exists in your account, it is created when you run
                *   <code>RegisterTaskWithMaintenanceWindow</code>.</p>
                *          <p>For more information, see the following topics in the in the <i>Amazon Web Services Systems Manager User Guide</i>:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/using-service-linked-roles.html#slr-permissions">Using
                *     service-linked roles for Systems Manager</a>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-maintenance-permissions.html#maintenance-window-tasks-service-role">Should I use a service-linked role or a custom service role to run maintenance window tasks?
                *    </a>
                *                </p>
                *             </li>
                *          </ul>
                */
            ServiceRoleArn?: string;
            /**
                * <p>The parameters to modify.</p>
                *          <note>
                *             <p>
                *                <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs,
                *       instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information
                *       about how Systems Manager handles these options for the supported maintenance window task
                *       types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
                *          </note>
                *          <p>The map has the following format:</p>
                *          <p>Key: string, between 1 and 255 characters</p>
                *          <p>Value: an array of strings, each string is between 1 and 255 characters</p>
                */
            TaskParameters?: Record<string, MaintenanceWindowTaskParameterValueExpression>;
            /**
                * <p>The parameters that the task should use during execution. Populate only the fields that
                *    match the task type. All other fields should be empty.</p>
                *          <important>
                *             <p>When you update a maintenance window task that has options specified in
                *      <code>TaskInvocationParameters</code>, you must provide again all the
                *      <code>TaskInvocationParameters</code> values that you want to retain. The values you don't
                *     specify again are removed. For example, suppose that when you registered a Run Command task, you
                *     specified <code>TaskInvocationParameters</code> values for <code>Comment</code>,
                *      <code>NotificationConfig</code>, and <code>OutputS3BucketName</code>. If you update the
                *     maintenance window task and specify only a different <code>OutputS3BucketName</code> value, the
                *     values for <code>Comment</code> and <code>NotificationConfig</code> are removed.</p>
                *          </important>
                */
            TaskInvocationParameters?: MaintenanceWindowTaskInvocationParameters;
            /**
                * <p>The new task priority to specify. The lower the number, the higher the priority. Tasks that
                *    have the same priority are scheduled in parallel.</p>
                */
            Priority?: number;
            /**
                * <p>The new <code>MaxConcurrency</code> value you want to specify. <code>MaxConcurrency</code>
                *    is the number of targets that are allowed to run this task, in parallel.</p>
                *          <note>
                *             <p>Although this element is listed as "Required: No", a value can be omitted only when you are
                *     registering or updating a <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">targetless
                *      task</a> You must provide a value in all other cases.</p>
                *             <p>For maintenance window tasks without a target specified, you can't supply a value for this
                *     option. Instead, the system inserts a placeholder value of <code>1</code>. This value doesn't
                *     affect the running of your task.</p>
                *          </note>
                */
            MaxConcurrency?: string;
            /**
                * <p>The new <code>MaxErrors</code> value to specify. <code>MaxErrors</code> is the maximum
                *    number of errors that are allowed before the task stops being scheduled.</p>
                *          <note>
                *             <p>Although this element is listed as "Required: No", a value can be omitted only when you are
                *     registering or updating a <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/maintenance-windows-targetless-tasks.html">targetless
                *      task</a> You must provide a value in all other cases.</p>
                *             <p>For maintenance window tasks without a target specified, you can't supply a value for this
                *     option. Instead, the system inserts a placeholder value of <code>1</code>. This value doesn't
                *     affect the running of your task.</p>
                *          </note>
                */
            MaxErrors?: string;
            /**
                * <p>The new logging location in Amazon S3 to specify.</p>
                *          <note>
                *             <p>
                *                <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the
                *       <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure.
                *       For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance
                *       window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
                *          </note>
                */
            LoggingInfo?: LoggingInfo;
            /**
                * <p>The new task name to specify.</p>
                */
            Name?: string;
            /**
                * <p>The new task description to specify.</p>
                */
            Description?: string;
            /**
                * <p>If True, then all fields that are required by the <a>RegisterTaskWithMaintenanceWindow</a> operation are also required for this API request.
                *    Optional fields that aren't specified are set to null.</p>
                */
            Replace?: boolean;
            /**
                * <p>Indicates whether tasks should continue to run after the cutoff time specified in the
                *    maintenance windows is reached. </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>CONTINUE_TASK</code>: When the cutoff time is reached, any tasks that are running
                *      continue. The default value.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>CANCEL_TASK</code>:</p>
                *                <ul>
                *                   <li>
                *                      <p>For Automation, Lambda, Step Functions tasks: When the cutoff
                *        time is reached, any task invocations that are already running continue, but no new task
                *        invocations are started.</p>
                *                   </li>
                *                   <li>
                *                      <p>For Run Command tasks: When the cutoff time is reached, the system sends a <a>CancelCommand</a> operation that attempts to cancel the command associated with the
                *        task. However, there is no guarantee that the command will be terminated and the underlying
                *        process stopped.</p>
                *                   </li>
                *                </ul>
                *                <p>The status for tasks that are not completed is <code>TIMED_OUT</code>.</p>
                *             </li>
                *          </ul>
                */
            CutoffBehavior?: MaintenanceWindowTaskCutoffBehavior | string;
    }
    export namespace UpdateMaintenanceWindowTaskRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMaintenanceWindowTaskRequest) => any;
    }
    export interface UpdateMaintenanceWindowTaskResult {
            /**
                * <p>The ID of the maintenance window that was updated.</p>
                */
            WindowId?: string;
            /**
                * <p>The task ID of the maintenance window that was updated.</p>
                */
            WindowTaskId?: string;
            /**
                * <p>The updated target values.</p>
                */
            Targets?: Target[];
            /**
                * <p>The updated task ARN value.</p>
                */
            TaskArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) service role to use to publish Amazon Simple Notification Service
                * (Amazon SNS) notifications for maintenance window Run Command tasks.</p>
                */
            ServiceRoleArn?: string;
            /**
                * <p>The updated parameter values.</p>
                *          <note>
                *             <p>
                *                <code>TaskParameters</code> has been deprecated. To specify parameters to pass to a task when it runs,
                *       instead use the <code>Parameters</code> option in the <code>TaskInvocationParameters</code> structure. For information
                *       about how Systems Manager handles these options for the supported maintenance window task
                *       types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
                *          </note>
                */
            TaskParameters?: Record<string, MaintenanceWindowTaskParameterValueExpression>;
            /**
                * <p>The updated parameter values.</p>
                */
            TaskInvocationParameters?: MaintenanceWindowTaskInvocationParameters;
            /**
                * <p>The updated priority value.</p>
                */
            Priority?: number;
            /**
                * <p>The updated <code>MaxConcurrency</code> value.</p>
                */
            MaxConcurrency?: string;
            /**
                * <p>The updated <code>MaxErrors</code> value.</p>
                */
            MaxErrors?: string;
            /**
                * <p>The updated logging information in Amazon S3.</p>
                *          <note>
                *             <p>
                *                <code>LoggingInfo</code> has been deprecated. To specify an Amazon Simple Storage Service (Amazon S3) bucket to contain logs, instead use the
                *       <code>OutputS3BucketName</code> and <code>OutputS3KeyPrefix</code> options in the <code>TaskInvocationParameters</code> structure.
                *       For information about how Amazon Web Services Systems Manager handles these options for the supported maintenance
                *       window task types, see <a>MaintenanceWindowTaskInvocationParameters</a>.</p>
                *          </note>
                */
            LoggingInfo?: LoggingInfo;
            /**
                * <p>The updated task name.</p>
                */
            Name?: string;
            /**
                * <p>The updated task description.</p>
                */
            Description?: string;
            /**
                * <p>The specification for whether tasks should continue to run after the cutoff time specified
                *    in the maintenance windows is reached. </p>
                */
            CutoffBehavior?: MaintenanceWindowTaskCutoffBehavior | string;
    }
    export namespace UpdateMaintenanceWindowTaskResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMaintenanceWindowTaskResult) => any;
    }
    export interface UpdateManagedInstanceRoleRequest {
            /**
                * <p>The ID of the managed node where you want to update the role.</p>
                */
            InstanceId: string | undefined;
            /**
                * <p>The IAM role you want to assign or change.</p>
                */
            IamRole: string | undefined;
    }
    export namespace UpdateManagedInstanceRoleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateManagedInstanceRoleRequest) => any;
    }
    export interface UpdateManagedInstanceRoleResult {
    }
    export namespace UpdateManagedInstanceRoleResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateManagedInstanceRoleResult) => any;
    }
    export interface UpdateOpsItemRequest {
            /**
                * <p>Update the information about the OpsItem. Provide enough information so that users reading
                *    this OpsItem for the first time understand the issue. </p>
                */
            Description?: string;
            /**
                * <p>Add new keys or edit existing key-value pairs of the OperationalData map in the OpsItem
                *    object.</p>
                *          <p>Operational data is custom data that provides useful reference details about the OpsItem.
                *    For example, you can specify log files, error strings, license keys, troubleshooting tips, or
                *    other relevant data. You enter operational data as key-value pairs. The key has a maximum length
                *    of 128 characters. The value has a maximum size of 20 KB.</p>
                *          <important>
                *             <p>Operational data keys <i>can't</i> begin with the following:
                *      <code>amazon</code>, <code>aws</code>, <code>amzn</code>, <code>ssm</code>,
                *      <code>/amazon</code>, <code>/aws</code>, <code>/amzn</code>, <code>/ssm</code>.</p>
                *          </important>
                *          <p>You can choose to make the data searchable by other users in the account or you can restrict
                *    search access. Searchable data means that all users with access to the OpsItem Overview page (as
                *    provided by the <a>DescribeOpsItems</a> API operation) can view and search on the
                *    specified data. Operational data that isn't searchable is only viewable by users who have access
                *    to the OpsItem (as provided by the <a>GetOpsItem</a> API operation).</p>
                *          <p>Use the <code>/aws/resources</code> key in OperationalData to specify a related resource in
                *    the request. Use the <code>/aws/automations</code> key in OperationalData to associate an
                *    Automation runbook with the OpsItem. To view Amazon Web Services CLI example commands that use these keys, see
                *     <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-creating-OpsItems.html#OpsCenter-manually-create-OpsItems">Creating OpsItems manually</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            OperationalData?: Record<string, OpsItemDataValue>;
            /**
                * <p>Keys that you want to remove from the OperationalData map.</p>
                */
            OperationalDataToDelete?: string[];
            /**
                * <p>The Amazon Resource Name (ARN) of an SNS topic where notifications are sent when this
                *    OpsItem is edited or changed.</p>
                */
            Notifications?: OpsItemNotification[];
            /**
                * <p>The importance of this OpsItem in relation to other OpsItems in the system.</p>
                */
            Priority?: number;
            /**
                * <p>One or more OpsItems that share something in common with the current OpsItems. For example,
                *    related OpsItems can include OpsItems with similar error messages, impacted resources, or
                *    statuses for the impacted resource.</p>
                */
            RelatedOpsItems?: RelatedOpsItem[];
            /**
                * <p>The OpsItem status. Status can be <code>Open</code>, <code>In Progress</code>, or
                *     <code>Resolved</code>. For more information, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/OpsCenter-working-with-OpsItems.html#OpsCenter-working-with-OpsItems-editing-details">Editing OpsItem details</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            Status?: OpsItemStatus | string;
            /**
                * <p>The ID of the OpsItem.</p>
                */
            OpsItemId: string | undefined;
            /**
                * <p>A short heading that describes the nature of the OpsItem and the impacted resource.</p>
                */
            Title?: string;
            /**
                * <p>Specify a new category for an OpsItem.</p>
                */
            Category?: string;
            /**
                * <p>Specify a new severity for an OpsItem.</p>
                */
            Severity?: string;
            /**
                * <p>The time a runbook workflow started. Currently reported only for the OpsItem type
                *     <code>/aws/changerequest</code>.</p>
                */
            ActualStartTime?: Date;
            /**
                * <p>The time a runbook workflow ended. Currently reported only for the OpsItem type
                *     <code>/aws/changerequest</code>.</p>
                */
            ActualEndTime?: Date;
            /**
                * <p>The time specified in a change request for a runbook workflow to start. Currently supported
                *    only for the OpsItem type <code>/aws/changerequest</code>.</p>
                */
            PlannedStartTime?: Date;
            /**
                * <p>The time specified in a change request for a runbook workflow to end. Currently supported
                *    only for the OpsItem type <code>/aws/changerequest</code>.</p>
                */
            PlannedEndTime?: Date;
    }
    export namespace UpdateOpsItemRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateOpsItemRequest) => any;
    }
    export interface UpdateOpsItemResponse {
    }
    export namespace UpdateOpsItemResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateOpsItemResponse) => any;
    }
    /**
        * <p>The OpsMetadata object exceeds the maximum number of OpsMetadata keys that you can assign to
        *    an application in Application Manager.</p>
        */
    export class OpsMetadataKeyLimitExceededException extends __BaseException {
            readonly name: "OpsMetadataKeyLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<OpsMetadataKeyLimitExceededException, __BaseException>);
    }
    export interface UpdateOpsMetadataRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the OpsMetadata Object to update.</p>
                */
            OpsMetadataArn: string | undefined;
            /**
                * <p>Metadata to add to an OpsMetadata object.</p>
                */
            MetadataToUpdate?: Record<string, MetadataValue>;
            /**
                * <p>The metadata keys to delete from the OpsMetadata object. </p>
                */
            KeysToDelete?: string[];
    }
    export namespace UpdateOpsMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateOpsMetadataRequest) => any;
    }
    export interface UpdateOpsMetadataResult {
            /**
                * <p>The Amazon Resource Name (ARN) of the OpsMetadata Object that was updated.</p>
                */
            OpsMetadataArn?: string;
    }
    export namespace UpdateOpsMetadataResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateOpsMetadataResult) => any;
    }
    export interface UpdatePatchBaselineRequest {
            /**
                * <p>The ID of the patch baseline to update.</p>
                */
            BaselineId: string | undefined;
            /**
                * <p>The name of the patch baseline.</p>
                */
            Name?: string;
            /**
                * <p>A set of global filters used to include patches in the baseline.</p>
                */
            GlobalFilters?: PatchFilterGroup;
            /**
                * <p>A set of rules used to include patches in the baseline.</p>
                */
            ApprovalRules?: PatchRuleGroup;
            /**
                * <p>A list of explicitly approved patches for the baseline.</p>
                *          <p>For information about accepted formats for lists of approved patches and rejected patches,
                *                         see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About
                *                         package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            ApprovedPatches?: string[];
            /**
                * <p>Assigns a new compliance severity level to an existing patch baseline.</p>
                */
            ApprovedPatchesComplianceLevel?: PatchComplianceLevel | string;
            /**
                * <p>Indicates whether the list of approved patches includes non-security updates that should be
                *    applied to the managed nodes. The default value is <code>false</code>. Applies to Linux managed
                *    nodes only.</p>
                */
            ApprovedPatchesEnableNonSecurity?: boolean;
            /**
                * <p>A list of explicitly rejected patches for the baseline.</p>
                *          <p>For information about accepted formats for lists of approved patches and rejected patches,
                *                         see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/patch-manager-approved-rejected-package-name-formats.html">About
                *                         package name formats for approved and rejected patch lists</a> in the <i>Amazon Web Services Systems Manager User Guide</i>.</p>
                */
            RejectedPatches?: string[];
            /**
                * <p>The action for Patch Manager to take on patches included in the
                *     <code>RejectedPackages</code> list.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>ALLOW_AS_DEPENDENCY</code>
                *                   </b>: A package in the
                *       <code>Rejected</code> patches list is installed only if it is a dependency of another package.
                *      It is considered compliant with the patch baseline, and its status is reported as
                *       <code>InstalledOther</code>. This is the default action if no option is specified.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>
                *                      <code>BLOCK</code>
                *                   </b>: Packages in the
                *       <code>RejectedPatches</code> list, and packages that include them as dependencies, aren't
                *      installed under any circumstances. If a package was installed before it was added to the
                *       <code>Rejected</code> patches list, it is considered non-compliant with the patch baseline,
                *      and its status is reported as <code>InstalledRejected</code>.</p>
                *             </li>
                *          </ul>
                */
            RejectedPatchesAction?: PatchAction | string;
            /**
                * <p>A description of the patch baseline.</p>
                */
            Description?: string;
            /**
                * <p>Information about the patches to use to update the managed nodes, including target operating
                *    systems and source repositories. Applies to Linux managed nodes only.</p>
                */
            Sources?: PatchSource[];
            /**
                * <p>If True, then all fields that are required by the <a>CreatePatchBaseline</a>
                *    operation are also required for this API request. Optional fields that aren't specified are set
                *    to null.</p>
                */
            Replace?: boolean;
    }
    export namespace UpdatePatchBaselineRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePatchBaselineRequest) => any;
    }
    export interface UpdatePatchBaselineResult {
            /**
                * <p>The ID of the deleted patch baseline.</p>
                */
            BaselineId?: string;
            /**
                * <p>The name of the patch baseline.</p>
                */
            Name?: string;
            /**
                * <p>The operating system rule used by the updated patch baseline.</p>
                */
            OperatingSystem?: OperatingSystem | string;
            /**
                * <p>A set of global filters used to exclude patches from the baseline.</p>
                */
            GlobalFilters?: PatchFilterGroup;
            /**
                * <p>A set of rules used to include patches in the baseline.</p>
                */
            ApprovalRules?: PatchRuleGroup;
            /**
                * <p>A list of explicitly approved patches for the baseline.</p>
                */
            ApprovedPatches?: string[];
            /**
                * <p>The compliance severity level assigned to the patch baseline after the update
                *    completed.</p>
                */
            ApprovedPatchesComplianceLevel?: PatchComplianceLevel | string;
            /**
                * <p>Indicates whether the list of approved patches includes non-security updates that should be
                *    applied to the managed nodes. The default value is <code>false</code>. Applies to Linux managed
                *    nodes only.</p>
                */
            ApprovedPatchesEnableNonSecurity?: boolean;
            /**
                * <p>A list of explicitly rejected patches for the baseline.</p>
                */
            RejectedPatches?: string[];
            /**
                * <p>The action specified to take on patches included in the <code>RejectedPatches</code> list. A
                *    patch can be allowed only if it is a dependency of another package, or blocked entirely along
                *    with packages that include it as a dependency.</p>
                */
            RejectedPatchesAction?: PatchAction | string;
            /**
                * <p>The date when the patch baseline was created.</p>
                */
            CreatedDate?: Date;
            /**
                * <p>The date when the patch baseline was last modified.</p>
                */
            ModifiedDate?: Date;
            /**
                * <p>A description of the patch baseline.</p>
                */
            Description?: string;
            /**
                * <p>Information about the patches to use to update the managed nodes, including target operating
                *    systems and source repositories. Applies to Linux managed nodes only.</p>
                */
            Sources?: PatchSource[];
    }
    export namespace UpdatePatchBaselineResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdatePatchBaselineResult) => any;
    }
    /**
        * <p>Another <code>UpdateResourceDataSync</code> request is being processed. Wait a few minutes
        *    and try again.</p>
        */
    export class ResourceDataSyncConflictException extends __BaseException {
            readonly name: "ResourceDataSyncConflictException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceDataSyncConflictException, __BaseException>);
    }
    export interface UpdateResourceDataSyncRequest {
            /**
                * <p>The name of the resource data sync you want to update.</p>
                */
            SyncName: string | undefined;
            /**
                * <p>The type of resource data sync. The supported <code>SyncType</code> is
                *    SyncFromSource.</p>
                */
            SyncType: string | undefined;
            /**
                * <p>Specify information about the data sources to synchronize.</p>
                */
            SyncSource: ResourceDataSyncSource | undefined;
    }
    export namespace UpdateResourceDataSyncRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateResourceDataSyncRequest) => any;
    }
    export interface UpdateResourceDataSyncResult {
    }
    export namespace UpdateResourceDataSyncResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateResourceDataSyncResult) => any;
    }
    /**
        * <p>The request body of the UpdateServiceSetting API operation.</p>
        */
    export interface UpdateServiceSettingRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the service setting to reset. For example,
                *     <code>arn:aws:ssm:us-east-1:111122223333:servicesetting/ssm/parameter-store/high-throughput-enabled</code>.
                *    The setting ID can be one of the following.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>/ssm/automation/customer-script-log-destination</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/automation/customer-script-log-group-name</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/documents/console/public-sharing-permission</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/parameter-store/default-parameter-tier</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/parameter-store/high-throughput-enabled</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/managed-instance/activation-tier</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            SettingId: string | undefined;
            /**
                * <p>The new value to specify for the service setting. The following list specifies the available
                *    values for each setting.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>/ssm/parameter-store/default-parameter-tier</code>: <code>Standard</code>,
                *       <code>Advanced</code>, <code>Intelligent-Tiering</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/parameter-store/high-throughput-enabled</code>: <code>true</code> or
                *       <code>false</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/managed-instance/activation-tier</code>: <code>true</code> or
                *       <code>false</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/automation/customer-script-log-destination</code>: <code>CloudWatch</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/automation/customer-script-log-group-name</code>: the name of an Amazon CloudWatch Logs log group</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/documents/console/public-sharing-permission</code>: <code>Enable</code> or
                *       <code>Disable</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>/ssm/managed-instance/activation-tier</code>: <code>standard</code> or
                *       <code>advanced</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            SettingValue: string | undefined;
    }
    export namespace UpdateServiceSettingRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateServiceSettingRequest) => any;
    }
    /**
        * <p>The result body of the UpdateServiceSetting API operation.</p>
        */
    export interface UpdateServiceSettingResult {
    }
    export namespace UpdateServiceSettingResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateServiceSettingResult) => any;
    }
    /**
        * <p>Specifies the inventory type and attribute for the aggregation execution.</p>
        */
    export interface InventoryAggregator {
            /**
                * <p>The inventory type and attribute name for aggregation.</p>
                */
            Expression?: string;
            /**
                * <p>Nested aggregators to further refine aggregation for an inventory type.</p>
                */
            Aggregators?: InventoryAggregator[];
            /**
                * <p>A user-defined set of one or more filters on which to aggregate inventory data. Groups
                *    return a count of resources that match and don't match the specified criteria.</p>
                */
            Groups?: InventoryGroup[];
    }
    export namespace InventoryAggregator {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InventoryAggregator) => any;
    }
    /**
        * <p>One or more aggregators for viewing counts of OpsData using different dimensions such as
        *     <code>Source</code>, <code>CreatedTime</code>, or <code>Source and CreatedTime</code>, to name a
        *    few.</p>
        */
    export interface OpsAggregator {
            /**
                * <p>Either a <code>Range</code> or <code>Count</code> aggregator for limiting an OpsData
                *    summary.</p>
                */
            AggregatorType?: string;
            /**
                * <p>The data type name to use for viewing counts of OpsData.</p>
                */
            TypeName?: string;
            /**
                * <p>The name of an OpsData attribute on which to limit the count of OpsData.</p>
                */
            AttributeName?: string;
            /**
                * <p>The aggregator value.</p>
                */
            Values?: Record<string, string>;
            /**
                * <p>The aggregator filters.</p>
                */
            Filters?: OpsFilter[];
            /**
                * <p>A nested aggregator for viewing counts of OpsData.</p>
                */
            Aggregators?: OpsAggregator[];
    }
    export namespace OpsAggregator {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpsAggregator) => any;
    }
    export interface GetInventoryRequest {
            /**
                * <p>One or more filters. Use a filter to return a more specific list of results.</p>
                */
            Filters?: InventoryFilter[];
            /**
                * <p>Returns counts of inventory types based on one or more expressions. For example, if you
                *    aggregate by using an expression that uses the <code>AWS:InstanceInformation.PlatformType</code>
                *    type, you can see a count of how many Windows and Linux managed nodes exist in your inventoried
                *    fleet.</p>
                */
            Aggregators?: InventoryAggregator[];
            /**
                * <p>The list of inventory item types to return.</p>
                */
            ResultAttributes?: ResultAttribute[];
            /**
                * <p>The token for the next set of items to return. (You received this token from a previous
                *    call.)</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
    }
    export namespace GetInventoryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInventoryRequest) => any;
    }
    export interface GetOpsSummaryRequest {
            /**
                * <p>Specify the name of a resource data sync to get.</p>
                */
            SyncName?: string;
            /**
                * <p>Optional filters used to scope down the returned OpsData. </p>
                */
            Filters?: OpsFilter[];
            /**
                * <p>Optional aggregators that return counts of OpsData based on one or more expressions.</p>
                */
            Aggregators?: OpsAggregator[];
            /**
                * <p>The OpsData data type to return.</p>
                */
            ResultAttributes?: OpsResultAttribute[];
            /**
                * <p>A token to start the list. Use this token to get the next set of results. </p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of items to return for this call. The call also returns a token that you
                *    can specify in a subsequent call to get the next set of results.</p>
                */
            MaxResults?: number;
    }
    export namespace GetOpsSummaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOpsSummaryRequest) => any;
    }
}

declare module '@aws-sdk/client-ssm/node_modules/@aws-sdk/client-ssm/dist-types/models/SSMServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from SSM service.
        */
    export class SSMServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

