// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-databrew' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { BatchDeleteRecipeVersionCommandInput, BatchDeleteRecipeVersionCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/BatchDeleteRecipeVersionCommand";
    import { CreateDatasetCommandInput, CreateDatasetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateDatasetCommand";
    import { CreateProfileJobCommandInput, CreateProfileJobCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateProfileJobCommand";
    import { CreateProjectCommandInput, CreateProjectCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateProjectCommand";
    import { CreateRecipeCommandInput, CreateRecipeCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateRecipeCommand";
    import { CreateRecipeJobCommandInput, CreateRecipeJobCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateRecipeJobCommand";
    import { CreateRulesetCommandInput, CreateRulesetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateRulesetCommand";
    import { CreateScheduleCommandInput, CreateScheduleCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateScheduleCommand";
    import { DeleteDatasetCommandInput, DeleteDatasetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteDatasetCommand";
    import { DeleteJobCommandInput, DeleteJobCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteJobCommand";
    import { DeleteProjectCommandInput, DeleteProjectCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteProjectCommand";
    import { DeleteRecipeVersionCommandInput, DeleteRecipeVersionCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteRecipeVersionCommand";
    import { DeleteRulesetCommandInput, DeleteRulesetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteRulesetCommand";
    import { DeleteScheduleCommandInput, DeleteScheduleCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteScheduleCommand";
    import { DescribeDatasetCommandInput, DescribeDatasetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeDatasetCommand";
    import { DescribeJobCommandInput, DescribeJobCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeJobCommand";
    import { DescribeJobRunCommandInput, DescribeJobRunCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeJobRunCommand";
    import { DescribeProjectCommandInput, DescribeProjectCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeProjectCommand";
    import { DescribeRecipeCommandInput, DescribeRecipeCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeRecipeCommand";
    import { DescribeRulesetCommandInput, DescribeRulesetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeRulesetCommand";
    import { DescribeScheduleCommandInput, DescribeScheduleCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeScheduleCommand";
    import { ListDatasetsCommandInput, ListDatasetsCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListDatasetsCommand";
    import { ListJobRunsCommandInput, ListJobRunsCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListJobRunsCommand";
    import { ListJobsCommandInput, ListJobsCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListJobsCommand";
    import { ListProjectsCommandInput, ListProjectsCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListProjectsCommand";
    import { ListRecipesCommandInput, ListRecipesCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListRecipesCommand";
    import { ListRecipeVersionsCommandInput, ListRecipeVersionsCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListRecipeVersionsCommand";
    import { ListRulesetsCommandInput, ListRulesetsCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListRulesetsCommand";
    import { ListSchedulesCommandInput, ListSchedulesCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListSchedulesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListTagsForResourceCommand";
    import { PublishRecipeCommandInput, PublishRecipeCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/PublishRecipeCommand";
    import { SendProjectSessionActionCommandInput, SendProjectSessionActionCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/SendProjectSessionActionCommand";
    import { StartJobRunCommandInput, StartJobRunCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/StartJobRunCommand";
    import { StartProjectSessionCommandInput, StartProjectSessionCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/StartProjectSessionCommand";
    import { StopJobRunCommandInput, StopJobRunCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/StopJobRunCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UntagResourceCommand";
    import { UpdateDatasetCommandInput, UpdateDatasetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateDatasetCommand";
    import { UpdateProfileJobCommandInput, UpdateProfileJobCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateProfileJobCommand";
    import { UpdateProjectCommandInput, UpdateProjectCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateProjectCommand";
    import { UpdateRecipeCommandInput, UpdateRecipeCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateRecipeCommand";
    import { UpdateRecipeJobCommandInput, UpdateRecipeJobCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateRecipeJobCommand";
    import { UpdateRulesetCommandInput, UpdateRulesetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateRulesetCommand";
    import { UpdateScheduleCommandInput, UpdateScheduleCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateScheduleCommand";
    import { DataBrewClient } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    /**
        * <p>Glue DataBrew is a visual, cloud-scale data-preparation service. DataBrew
        *             simplifies data preparation tasks, targeting data issues that are hard to spot and
        *             time-consuming to fix. DataBrew empowers users of all technical levels to visualize the
        *             data and perform one-click data transformations, with no coding required.</p>
        */
    export class DataBrew extends DataBrewClient {
            /**
                * <p>Deletes one or more versions of a recipe at a time.</p>
                *
                *         <p>The entire request will be rejected if:</p>
                *         <ul>
                *             <li>
                *                 <p>The recipe does not exist.</p>
                *             </li>
                *             <li>
                *                 <p>There is an invalid version identifier in the list of versions.</p>
                *             </li>
                *             <li>
                *                 <p>The version list is empty.</p>
                *             </li>
                *             <li>
                *                 <p>The version list size exceeds 50.</p>
                *             </li>
                *             <li>
                *                 <p>The version list contains duplicate entries.</p>
                *             </li>
                *          </ul>
                *
                *         <p>The request will complete successfully, but with partial failures, if:</p>
                *         <ul>
                *             <li>
                *                 <p>A version does not exist.</p>
                *             </li>
                *             <li>
                *                 <p>A version is being used by a job.</p>
                *             </li>
                *             <li>
                *                 <p>You specify <code>LATEST_WORKING</code>, but it's being used by a
                *                     project.</p>
                *             </li>
                *             <li>
                *                 <p>The version fails to be deleted.</p>
                *             </li>
                *          </ul>
                *         <p>The <code>LATEST_WORKING</code> version will only be deleted if the recipe has no
                *             other versions. If you try to delete <code>LATEST_WORKING</code> while other versions
                *             exist (or if they can't be deleted), then <code>LATEST_WORKING</code> will be listed as
                *             partial failure in the response.</p>
                */
            batchDeleteRecipeVersion(args: BatchDeleteRecipeVersionCommandInput, options?: __HttpHandlerOptions): Promise<BatchDeleteRecipeVersionCommandOutput>;
            batchDeleteRecipeVersion(args: BatchDeleteRecipeVersionCommandInput, cb: (err: any, data?: BatchDeleteRecipeVersionCommandOutput) => void): void;
            batchDeleteRecipeVersion(args: BatchDeleteRecipeVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDeleteRecipeVersionCommandOutput) => void): void;
            /**
                * <p>Creates a new DataBrew dataset.</p>
                */
            createDataset(args: CreateDatasetCommandInput, options?: __HttpHandlerOptions): Promise<CreateDatasetCommandOutput>;
            createDataset(args: CreateDatasetCommandInput, cb: (err: any, data?: CreateDatasetCommandOutput) => void): void;
            createDataset(args: CreateDatasetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDatasetCommandOutput) => void): void;
            /**
                * <p>Creates a new job to analyze a dataset and create its data profile.</p>
                */
            createProfileJob(args: CreateProfileJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateProfileJobCommandOutput>;
            createProfileJob(args: CreateProfileJobCommandInput, cb: (err: any, data?: CreateProfileJobCommandOutput) => void): void;
            createProfileJob(args: CreateProfileJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateProfileJobCommandOutput) => void): void;
            /**
                * <p>Creates a new DataBrew project.</p>
                */
            createProject(args: CreateProjectCommandInput, options?: __HttpHandlerOptions): Promise<CreateProjectCommandOutput>;
            createProject(args: CreateProjectCommandInput, cb: (err: any, data?: CreateProjectCommandOutput) => void): void;
            createProject(args: CreateProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateProjectCommandOutput) => void): void;
            /**
                * <p>Creates a new DataBrew recipe.</p>
                */
            createRecipe(args: CreateRecipeCommandInput, options?: __HttpHandlerOptions): Promise<CreateRecipeCommandOutput>;
            createRecipe(args: CreateRecipeCommandInput, cb: (err: any, data?: CreateRecipeCommandOutput) => void): void;
            createRecipe(args: CreateRecipeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRecipeCommandOutput) => void): void;
            /**
                * <p>Creates a new job to transform input data, using steps defined in an existing Glue DataBrew recipe</p>
                */
            createRecipeJob(args: CreateRecipeJobCommandInput, options?: __HttpHandlerOptions): Promise<CreateRecipeJobCommandOutput>;
            createRecipeJob(args: CreateRecipeJobCommandInput, cb: (err: any, data?: CreateRecipeJobCommandOutput) => void): void;
            createRecipeJob(args: CreateRecipeJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRecipeJobCommandOutput) => void): void;
            /**
                * <p>Creates a new ruleset that can be used in a profile job to validate
                *             the data quality of a dataset.</p>
                */
            createRuleset(args: CreateRulesetCommandInput, options?: __HttpHandlerOptions): Promise<CreateRulesetCommandOutput>;
            createRuleset(args: CreateRulesetCommandInput, cb: (err: any, data?: CreateRulesetCommandOutput) => void): void;
            createRuleset(args: CreateRulesetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRulesetCommandOutput) => void): void;
            /**
                * <p>Creates a new schedule for one or more DataBrew jobs. Jobs can be run at a specific
                *             date and time, or at regular intervals.</p>
                */
            createSchedule(args: CreateScheduleCommandInput, options?: __HttpHandlerOptions): Promise<CreateScheduleCommandOutput>;
            createSchedule(args: CreateScheduleCommandInput, cb: (err: any, data?: CreateScheduleCommandOutput) => void): void;
            createSchedule(args: CreateScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateScheduleCommandOutput) => void): void;
            /**
                * <p>Deletes a dataset from DataBrew.</p>
                */
            deleteDataset(args: DeleteDatasetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDatasetCommandOutput>;
            deleteDataset(args: DeleteDatasetCommandInput, cb: (err: any, data?: DeleteDatasetCommandOutput) => void): void;
            deleteDataset(args: DeleteDatasetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDatasetCommandOutput) => void): void;
            /**
                * <p>Deletes the specified DataBrew job.</p>
                */
            deleteJob(args: DeleteJobCommandInput, options?: __HttpHandlerOptions): Promise<DeleteJobCommandOutput>;
            deleteJob(args: DeleteJobCommandInput, cb: (err: any, data?: DeleteJobCommandOutput) => void): void;
            deleteJob(args: DeleteJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteJobCommandOutput) => void): void;
            /**
                * <p>Deletes an existing DataBrew project.</p>
                */
            deleteProject(args: DeleteProjectCommandInput, options?: __HttpHandlerOptions): Promise<DeleteProjectCommandOutput>;
            deleteProject(args: DeleteProjectCommandInput, cb: (err: any, data?: DeleteProjectCommandOutput) => void): void;
            deleteProject(args: DeleteProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteProjectCommandOutput) => void): void;
            /**
                * <p>Deletes a single version of a DataBrew recipe.</p>
                */
            deleteRecipeVersion(args: DeleteRecipeVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRecipeVersionCommandOutput>;
            deleteRecipeVersion(args: DeleteRecipeVersionCommandInput, cb: (err: any, data?: DeleteRecipeVersionCommandOutput) => void): void;
            deleteRecipeVersion(args: DeleteRecipeVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRecipeVersionCommandOutput) => void): void;
            /**
                * <p>Deletes a ruleset.</p>
                */
            deleteRuleset(args: DeleteRulesetCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRulesetCommandOutput>;
            deleteRuleset(args: DeleteRulesetCommandInput, cb: (err: any, data?: DeleteRulesetCommandOutput) => void): void;
            deleteRuleset(args: DeleteRulesetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRulesetCommandOutput) => void): void;
            /**
                * <p>Deletes the specified DataBrew schedule.</p>
                */
            deleteSchedule(args: DeleteScheduleCommandInput, options?: __HttpHandlerOptions): Promise<DeleteScheduleCommandOutput>;
            deleteSchedule(args: DeleteScheduleCommandInput, cb: (err: any, data?: DeleteScheduleCommandOutput) => void): void;
            deleteSchedule(args: DeleteScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteScheduleCommandOutput) => void): void;
            /**
                * <p>Returns the definition of a specific DataBrew dataset.</p>
                */
            describeDataset(args: DescribeDatasetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDatasetCommandOutput>;
            describeDataset(args: DescribeDatasetCommandInput, cb: (err: any, data?: DescribeDatasetCommandOutput) => void): void;
            describeDataset(args: DescribeDatasetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDatasetCommandOutput) => void): void;
            /**
                * <p>Returns the definition of a specific DataBrew job.</p>
                */
            describeJob(args: DescribeJobCommandInput, options?: __HttpHandlerOptions): Promise<DescribeJobCommandOutput>;
            describeJob(args: DescribeJobCommandInput, cb: (err: any, data?: DescribeJobCommandOutput) => void): void;
            describeJob(args: DescribeJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeJobCommandOutput) => void): void;
            /**
                * <p>Represents one run of a DataBrew job.</p>
                */
            describeJobRun(args: DescribeJobRunCommandInput, options?: __HttpHandlerOptions): Promise<DescribeJobRunCommandOutput>;
            describeJobRun(args: DescribeJobRunCommandInput, cb: (err: any, data?: DescribeJobRunCommandOutput) => void): void;
            describeJobRun(args: DescribeJobRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeJobRunCommandOutput) => void): void;
            /**
                * <p>Returns the definition of a specific DataBrew project.</p>
                */
            describeProject(args: DescribeProjectCommandInput, options?: __HttpHandlerOptions): Promise<DescribeProjectCommandOutput>;
            describeProject(args: DescribeProjectCommandInput, cb: (err: any, data?: DescribeProjectCommandOutput) => void): void;
            describeProject(args: DescribeProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeProjectCommandOutput) => void): void;
            /**
                * <p>Returns the definition of a specific DataBrew recipe corresponding to a particular
                *             version.</p>
                */
            describeRecipe(args: DescribeRecipeCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRecipeCommandOutput>;
            describeRecipe(args: DescribeRecipeCommandInput, cb: (err: any, data?: DescribeRecipeCommandOutput) => void): void;
            describeRecipe(args: DescribeRecipeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRecipeCommandOutput) => void): void;
            /**
                * <p>Retrieves detailed information about the ruleset.</p>
                */
            describeRuleset(args: DescribeRulesetCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRulesetCommandOutput>;
            describeRuleset(args: DescribeRulesetCommandInput, cb: (err: any, data?: DescribeRulesetCommandOutput) => void): void;
            describeRuleset(args: DescribeRulesetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRulesetCommandOutput) => void): void;
            /**
                * <p>Returns the definition of a specific DataBrew schedule.</p>
                */
            describeSchedule(args: DescribeScheduleCommandInput, options?: __HttpHandlerOptions): Promise<DescribeScheduleCommandOutput>;
            describeSchedule(args: DescribeScheduleCommandInput, cb: (err: any, data?: DescribeScheduleCommandOutput) => void): void;
            describeSchedule(args: DescribeScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeScheduleCommandOutput) => void): void;
            /**
                * <p>Lists all of the DataBrew datasets.</p>
                */
            listDatasets(args: ListDatasetsCommandInput, options?: __HttpHandlerOptions): Promise<ListDatasetsCommandOutput>;
            listDatasets(args: ListDatasetsCommandInput, cb: (err: any, data?: ListDatasetsCommandOutput) => void): void;
            listDatasets(args: ListDatasetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDatasetsCommandOutput) => void): void;
            /**
                * <p>Lists all of the previous runs of a particular DataBrew job.</p>
                */
            listJobRuns(args: ListJobRunsCommandInput, options?: __HttpHandlerOptions): Promise<ListJobRunsCommandOutput>;
            listJobRuns(args: ListJobRunsCommandInput, cb: (err: any, data?: ListJobRunsCommandOutput) => void): void;
            listJobRuns(args: ListJobRunsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListJobRunsCommandOutput) => void): void;
            /**
                * <p>Lists all of the DataBrew jobs that are defined.</p>
                */
            listJobs(args: ListJobsCommandInput, options?: __HttpHandlerOptions): Promise<ListJobsCommandOutput>;
            listJobs(args: ListJobsCommandInput, cb: (err: any, data?: ListJobsCommandOutput) => void): void;
            listJobs(args: ListJobsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListJobsCommandOutput) => void): void;
            /**
                * <p>Lists all of the DataBrew projects that are defined.</p>
                */
            listProjects(args: ListProjectsCommandInput, options?: __HttpHandlerOptions): Promise<ListProjectsCommandOutput>;
            listProjects(args: ListProjectsCommandInput, cb: (err: any, data?: ListProjectsCommandOutput) => void): void;
            listProjects(args: ListProjectsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListProjectsCommandOutput) => void): void;
            /**
                * <p>Lists all of the DataBrew recipes that are defined.</p>
                */
            listRecipes(args: ListRecipesCommandInput, options?: __HttpHandlerOptions): Promise<ListRecipesCommandOutput>;
            listRecipes(args: ListRecipesCommandInput, cb: (err: any, data?: ListRecipesCommandOutput) => void): void;
            listRecipes(args: ListRecipesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRecipesCommandOutput) => void): void;
            /**
                * <p>Lists the versions of a particular DataBrew recipe, except for
                *                 <code>LATEST_WORKING</code>.</p>
                */
            listRecipeVersions(args: ListRecipeVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListRecipeVersionsCommandOutput>;
            listRecipeVersions(args: ListRecipeVersionsCommandInput, cb: (err: any, data?: ListRecipeVersionsCommandOutput) => void): void;
            listRecipeVersions(args: ListRecipeVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRecipeVersionsCommandOutput) => void): void;
            /**
                * <p>List all rulesets available in the current account or rulesets associated
                *             with a specific resource (dataset).</p>
                */
            listRulesets(args: ListRulesetsCommandInput, options?: __HttpHandlerOptions): Promise<ListRulesetsCommandOutput>;
            listRulesets(args: ListRulesetsCommandInput, cb: (err: any, data?: ListRulesetsCommandOutput) => void): void;
            listRulesets(args: ListRulesetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRulesetsCommandOutput) => void): void;
            /**
                * <p>Lists the DataBrew schedules that are defined.</p>
                */
            listSchedules(args: ListSchedulesCommandInput, options?: __HttpHandlerOptions): Promise<ListSchedulesCommandOutput>;
            listSchedules(args: ListSchedulesCommandInput, cb: (err: any, data?: ListSchedulesCommandOutput) => void): void;
            listSchedules(args: ListSchedulesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSchedulesCommandOutput) => void): void;
            /**
                * <p>Lists all the tags for a DataBrew resource. </p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Publishes a new version of a DataBrew recipe.</p>
                */
            publishRecipe(args: PublishRecipeCommandInput, options?: __HttpHandlerOptions): Promise<PublishRecipeCommandOutput>;
            publishRecipe(args: PublishRecipeCommandInput, cb: (err: any, data?: PublishRecipeCommandOutput) => void): void;
            publishRecipe(args: PublishRecipeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PublishRecipeCommandOutput) => void): void;
            /**
                * <p>Performs a recipe step within an interactive DataBrew session that's currently
                *             open.</p>
                */
            sendProjectSessionAction(args: SendProjectSessionActionCommandInput, options?: __HttpHandlerOptions): Promise<SendProjectSessionActionCommandOutput>;
            sendProjectSessionAction(args: SendProjectSessionActionCommandInput, cb: (err: any, data?: SendProjectSessionActionCommandOutput) => void): void;
            sendProjectSessionAction(args: SendProjectSessionActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendProjectSessionActionCommandOutput) => void): void;
            /**
                * <p>Runs a DataBrew job.</p>
                */
            startJobRun(args: StartJobRunCommandInput, options?: __HttpHandlerOptions): Promise<StartJobRunCommandOutput>;
            startJobRun(args: StartJobRunCommandInput, cb: (err: any, data?: StartJobRunCommandOutput) => void): void;
            startJobRun(args: StartJobRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartJobRunCommandOutput) => void): void;
            /**
                * <p>Creates an interactive session, enabling you to manipulate data in a DataBrew
                *             project.</p>
                */
            startProjectSession(args: StartProjectSessionCommandInput, options?: __HttpHandlerOptions): Promise<StartProjectSessionCommandOutput>;
            startProjectSession(args: StartProjectSessionCommandInput, cb: (err: any, data?: StartProjectSessionCommandOutput) => void): void;
            startProjectSession(args: StartProjectSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartProjectSessionCommandOutput) => void): void;
            /**
                * <p>Stops a particular run of a job.</p>
                */
            stopJobRun(args: StopJobRunCommandInput, options?: __HttpHandlerOptions): Promise<StopJobRunCommandOutput>;
            stopJobRun(args: StopJobRunCommandInput, cb: (err: any, data?: StopJobRunCommandOutput) => void): void;
            stopJobRun(args: StopJobRunCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopJobRunCommandOutput) => void): void;
            /**
                * <p>Adds metadata tags to a DataBrew resource, such as a dataset, project, recipe, job, or
                *             schedule.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes metadata tags from a DataBrew resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Modifies the definition of an existing DataBrew dataset.</p>
                */
            updateDataset(args: UpdateDatasetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDatasetCommandOutput>;
            updateDataset(args: UpdateDatasetCommandInput, cb: (err: any, data?: UpdateDatasetCommandOutput) => void): void;
            updateDataset(args: UpdateDatasetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDatasetCommandOutput) => void): void;
            /**
                * <p>Modifies the definition of an existing profile job.</p>
                */
            updateProfileJob(args: UpdateProfileJobCommandInput, options?: __HttpHandlerOptions): Promise<UpdateProfileJobCommandOutput>;
            updateProfileJob(args: UpdateProfileJobCommandInput, cb: (err: any, data?: UpdateProfileJobCommandOutput) => void): void;
            updateProfileJob(args: UpdateProfileJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateProfileJobCommandOutput) => void): void;
            /**
                * <p>Modifies the definition of an existing DataBrew project.</p>
                */
            updateProject(args: UpdateProjectCommandInput, options?: __HttpHandlerOptions): Promise<UpdateProjectCommandOutput>;
            updateProject(args: UpdateProjectCommandInput, cb: (err: any, data?: UpdateProjectCommandOutput) => void): void;
            updateProject(args: UpdateProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateProjectCommandOutput) => void): void;
            /**
                * <p>Modifies the definition of the <code>LATEST_WORKING</code> version of a DataBrew
                *             recipe.</p>
                */
            updateRecipe(args: UpdateRecipeCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRecipeCommandOutput>;
            updateRecipe(args: UpdateRecipeCommandInput, cb: (err: any, data?: UpdateRecipeCommandOutput) => void): void;
            updateRecipe(args: UpdateRecipeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRecipeCommandOutput) => void): void;
            /**
                * <p>Modifies the definition of an existing DataBrew recipe job.</p>
                */
            updateRecipeJob(args: UpdateRecipeJobCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRecipeJobCommandOutput>;
            updateRecipeJob(args: UpdateRecipeJobCommandInput, cb: (err: any, data?: UpdateRecipeJobCommandOutput) => void): void;
            updateRecipeJob(args: UpdateRecipeJobCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRecipeJobCommandOutput) => void): void;
            /**
                * <p>Updates specified ruleset.</p>
                */
            updateRuleset(args: UpdateRulesetCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRulesetCommandOutput>;
            updateRuleset(args: UpdateRulesetCommandInput, cb: (err: any, data?: UpdateRulesetCommandOutput) => void): void;
            updateRuleset(args: UpdateRulesetCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRulesetCommandOutput) => void): void;
            /**
                * <p>Modifies the definition of an existing DataBrew schedule.</p>
                */
            updateSchedule(args: UpdateScheduleCommandInput, options?: __HttpHandlerOptions): Promise<UpdateScheduleCommandOutput>;
            updateSchedule(args: UpdateScheduleCommandInput, cb: (err: any, data?: UpdateScheduleCommandOutput) => void): void;
            updateSchedule(args: UpdateScheduleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateScheduleCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/BatchDeleteRecipeVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { BatchDeleteRecipeVersionRequest, BatchDeleteRecipeVersionResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface BatchDeleteRecipeVersionCommandInput extends BatchDeleteRecipeVersionRequest {
    }
    export interface BatchDeleteRecipeVersionCommandOutput extends BatchDeleteRecipeVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes one or more versions of a recipe at a time.</p>
        *
        *         <p>The entire request will be rejected if:</p>
        *         <ul>
        *             <li>
        *                 <p>The recipe does not exist.</p>
        *             </li>
        *             <li>
        *                 <p>There is an invalid version identifier in the list of versions.</p>
        *             </li>
        *             <li>
        *                 <p>The version list is empty.</p>
        *             </li>
        *             <li>
        *                 <p>The version list size exceeds 50.</p>
        *             </li>
        *             <li>
        *                 <p>The version list contains duplicate entries.</p>
        *             </li>
        *          </ul>
        *
        *         <p>The request will complete successfully, but with partial failures, if:</p>
        *         <ul>
        *             <li>
        *                 <p>A version does not exist.</p>
        *             </li>
        *             <li>
        *                 <p>A version is being used by a job.</p>
        *             </li>
        *             <li>
        *                 <p>You specify <code>LATEST_WORKING</code>, but it's being used by a
        *                     project.</p>
        *             </li>
        *             <li>
        *                 <p>The version fails to be deleted.</p>
        *             </li>
        *          </ul>
        *         <p>The <code>LATEST_WORKING</code> version will only be deleted if the recipe has no
        *             other versions. If you try to delete <code>LATEST_WORKING</code> while other versions
        *             exist (or if they can't be deleted), then <code>LATEST_WORKING</code> will be listed as
        *             partial failure in the response.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, BatchDeleteRecipeVersionCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, BatchDeleteRecipeVersionCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new BatchDeleteRecipeVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDeleteRecipeVersionCommandInput} for command's `input` shape.
        * @see {@link BatchDeleteRecipeVersionCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class BatchDeleteRecipeVersionCommand extends $Command<BatchDeleteRecipeVersionCommandInput, BatchDeleteRecipeVersionCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: BatchDeleteRecipeVersionCommandInput;
            constructor(input: BatchDeleteRecipeVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDeleteRecipeVersionCommandInput, BatchDeleteRecipeVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateDatasetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { CreateDatasetRequest, CreateDatasetResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface CreateDatasetCommandInput extends CreateDatasetRequest {
    }
    export interface CreateDatasetCommandOutput extends CreateDatasetResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new DataBrew dataset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, CreateDatasetCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, CreateDatasetCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new CreateDatasetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDatasetCommandInput} for command's `input` shape.
        * @see {@link CreateDatasetCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class CreateDatasetCommand extends $Command<CreateDatasetCommandInput, CreateDatasetCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: CreateDatasetCommandInput;
            constructor(input: CreateDatasetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDatasetCommandInput, CreateDatasetCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateProfileJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { CreateProfileJobRequest, CreateProfileJobResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface CreateProfileJobCommandInput extends CreateProfileJobRequest {
    }
    export interface CreateProfileJobCommandOutput extends CreateProfileJobResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new job to analyze a dataset and create its data profile.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, CreateProfileJobCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, CreateProfileJobCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new CreateProfileJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateProfileJobCommandInput} for command's `input` shape.
        * @see {@link CreateProfileJobCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class CreateProfileJobCommand extends $Command<CreateProfileJobCommandInput, CreateProfileJobCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: CreateProfileJobCommandInput;
            constructor(input: CreateProfileJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateProfileJobCommandInput, CreateProfileJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { CreateProjectRequest, CreateProjectResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface CreateProjectCommandInput extends CreateProjectRequest {
    }
    export interface CreateProjectCommandOutput extends CreateProjectResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new DataBrew project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, CreateProjectCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, CreateProjectCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new CreateProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateProjectCommandInput} for command's `input` shape.
        * @see {@link CreateProjectCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class CreateProjectCommand extends $Command<CreateProjectCommandInput, CreateProjectCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: CreateProjectCommandInput;
            constructor(input: CreateProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateProjectCommandInput, CreateProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateRecipeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { CreateRecipeRequest, CreateRecipeResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface CreateRecipeCommandInput extends CreateRecipeRequest {
    }
    export interface CreateRecipeCommandOutput extends CreateRecipeResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new DataBrew recipe.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, CreateRecipeCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, CreateRecipeCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new CreateRecipeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRecipeCommandInput} for command's `input` shape.
        * @see {@link CreateRecipeCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class CreateRecipeCommand extends $Command<CreateRecipeCommandInput, CreateRecipeCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: CreateRecipeCommandInput;
            constructor(input: CreateRecipeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRecipeCommandInput, CreateRecipeCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateRecipeJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { CreateRecipeJobRequest, CreateRecipeJobResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface CreateRecipeJobCommandInput extends CreateRecipeJobRequest {
    }
    export interface CreateRecipeJobCommandOutput extends CreateRecipeJobResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new job to transform input data, using steps defined in an existing Glue DataBrew recipe</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, CreateRecipeJobCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, CreateRecipeJobCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new CreateRecipeJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRecipeJobCommandInput} for command's `input` shape.
        * @see {@link CreateRecipeJobCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class CreateRecipeJobCommand extends $Command<CreateRecipeJobCommandInput, CreateRecipeJobCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: CreateRecipeJobCommandInput;
            constructor(input: CreateRecipeJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRecipeJobCommandInput, CreateRecipeJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateRulesetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { CreateRulesetRequest, CreateRulesetResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface CreateRulesetCommandInput extends CreateRulesetRequest {
    }
    export interface CreateRulesetCommandOutput extends CreateRulesetResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new ruleset that can be used in a profile job to validate
        *             the data quality of a dataset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, CreateRulesetCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, CreateRulesetCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new CreateRulesetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRulesetCommandInput} for command's `input` shape.
        * @see {@link CreateRulesetCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class CreateRulesetCommand extends $Command<CreateRulesetCommandInput, CreateRulesetCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: CreateRulesetCommandInput;
            constructor(input: CreateRulesetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRulesetCommandInput, CreateRulesetCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { CreateScheduleRequest, CreateScheduleResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface CreateScheduleCommandInput extends CreateScheduleRequest {
    }
    export interface CreateScheduleCommandOutput extends CreateScheduleResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new schedule for one or more DataBrew jobs. Jobs can be run at a specific
        *             date and time, or at regular intervals.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, CreateScheduleCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, CreateScheduleCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new CreateScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateScheduleCommandInput} for command's `input` shape.
        * @see {@link CreateScheduleCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class CreateScheduleCommand extends $Command<CreateScheduleCommandInput, CreateScheduleCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: CreateScheduleCommandInput;
            constructor(input: CreateScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateScheduleCommandInput, CreateScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteDatasetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { DeleteDatasetRequest, DeleteDatasetResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface DeleteDatasetCommandInput extends DeleteDatasetRequest {
    }
    export interface DeleteDatasetCommandOutput extends DeleteDatasetResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a dataset from DataBrew.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, DeleteDatasetCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, DeleteDatasetCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new DeleteDatasetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDatasetCommandInput} for command's `input` shape.
        * @see {@link DeleteDatasetCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class DeleteDatasetCommand extends $Command<DeleteDatasetCommandInput, DeleteDatasetCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: DeleteDatasetCommandInput;
            constructor(input: DeleteDatasetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDatasetCommandInput, DeleteDatasetCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { DeleteJobRequest, DeleteJobResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface DeleteJobCommandInput extends DeleteJobRequest {
    }
    export interface DeleteJobCommandOutput extends DeleteJobResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified DataBrew job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, DeleteJobCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, DeleteJobCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new DeleteJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteJobCommandInput} for command's `input` shape.
        * @see {@link DeleteJobCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class DeleteJobCommand extends $Command<DeleteJobCommandInput, DeleteJobCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: DeleteJobCommandInput;
            constructor(input: DeleteJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteJobCommandInput, DeleteJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { DeleteProjectRequest, DeleteProjectResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface DeleteProjectCommandInput extends DeleteProjectRequest {
    }
    export interface DeleteProjectCommandOutput extends DeleteProjectResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an existing DataBrew project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, DeleteProjectCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, DeleteProjectCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new DeleteProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteProjectCommandInput} for command's `input` shape.
        * @see {@link DeleteProjectCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class DeleteProjectCommand extends $Command<DeleteProjectCommandInput, DeleteProjectCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: DeleteProjectCommandInput;
            constructor(input: DeleteProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteProjectCommandInput, DeleteProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteRecipeVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { DeleteRecipeVersionRequest, DeleteRecipeVersionResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface DeleteRecipeVersionCommandInput extends DeleteRecipeVersionRequest {
    }
    export interface DeleteRecipeVersionCommandOutput extends DeleteRecipeVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a single version of a DataBrew recipe.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, DeleteRecipeVersionCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, DeleteRecipeVersionCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new DeleteRecipeVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRecipeVersionCommandInput} for command's `input` shape.
        * @see {@link DeleteRecipeVersionCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class DeleteRecipeVersionCommand extends $Command<DeleteRecipeVersionCommandInput, DeleteRecipeVersionCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: DeleteRecipeVersionCommandInput;
            constructor(input: DeleteRecipeVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRecipeVersionCommandInput, DeleteRecipeVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteRulesetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { DeleteRulesetRequest, DeleteRulesetResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface DeleteRulesetCommandInput extends DeleteRulesetRequest {
    }
    export interface DeleteRulesetCommandOutput extends DeleteRulesetResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a ruleset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, DeleteRulesetCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, DeleteRulesetCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new DeleteRulesetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRulesetCommandInput} for command's `input` shape.
        * @see {@link DeleteRulesetCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class DeleteRulesetCommand extends $Command<DeleteRulesetCommandInput, DeleteRulesetCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: DeleteRulesetCommandInput;
            constructor(input: DeleteRulesetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRulesetCommandInput, DeleteRulesetCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { DeleteScheduleRequest, DeleteScheduleResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface DeleteScheduleCommandInput extends DeleteScheduleRequest {
    }
    export interface DeleteScheduleCommandOutput extends DeleteScheduleResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified DataBrew schedule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, DeleteScheduleCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, DeleteScheduleCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new DeleteScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteScheduleCommandInput} for command's `input` shape.
        * @see {@link DeleteScheduleCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class DeleteScheduleCommand extends $Command<DeleteScheduleCommandInput, DeleteScheduleCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: DeleteScheduleCommandInput;
            constructor(input: DeleteScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteScheduleCommandInput, DeleteScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeDatasetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { DescribeDatasetRequest, DescribeDatasetResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface DescribeDatasetCommandInput extends DescribeDatasetRequest {
    }
    export interface DescribeDatasetCommandOutput extends DescribeDatasetResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the definition of a specific DataBrew dataset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, DescribeDatasetCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, DescribeDatasetCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new DescribeDatasetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeDatasetCommandInput} for command's `input` shape.
        * @see {@link DescribeDatasetCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class DescribeDatasetCommand extends $Command<DescribeDatasetCommandInput, DescribeDatasetCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: DescribeDatasetCommandInput;
            constructor(input: DescribeDatasetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeDatasetCommandInput, DescribeDatasetCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { DescribeJobRequest, DescribeJobResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface DescribeJobCommandInput extends DescribeJobRequest {
    }
    export interface DescribeJobCommandOutput extends DescribeJobResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the definition of a specific DataBrew job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, DescribeJobCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, DescribeJobCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new DescribeJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeJobCommandInput} for command's `input` shape.
        * @see {@link DescribeJobCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class DescribeJobCommand extends $Command<DescribeJobCommandInput, DescribeJobCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: DescribeJobCommandInput;
            constructor(input: DescribeJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeJobCommandInput, DescribeJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeJobRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { DescribeJobRunRequest, DescribeJobRunResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface DescribeJobRunCommandInput extends DescribeJobRunRequest {
    }
    export interface DescribeJobRunCommandOutput extends DescribeJobRunResponse, __MetadataBearer {
    }
    /**
        * <p>Represents one run of a DataBrew job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, DescribeJobRunCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, DescribeJobRunCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new DescribeJobRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeJobRunCommandInput} for command's `input` shape.
        * @see {@link DescribeJobRunCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class DescribeJobRunCommand extends $Command<DescribeJobRunCommandInput, DescribeJobRunCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: DescribeJobRunCommandInput;
            constructor(input: DescribeJobRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeJobRunCommandInput, DescribeJobRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { DescribeProjectRequest, DescribeProjectResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface DescribeProjectCommandInput extends DescribeProjectRequest {
    }
    export interface DescribeProjectCommandOutput extends DescribeProjectResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the definition of a specific DataBrew project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, DescribeProjectCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, DescribeProjectCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new DescribeProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeProjectCommandInput} for command's `input` shape.
        * @see {@link DescribeProjectCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class DescribeProjectCommand extends $Command<DescribeProjectCommandInput, DescribeProjectCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: DescribeProjectCommandInput;
            constructor(input: DescribeProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeProjectCommandInput, DescribeProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeRecipeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { DescribeRecipeRequest, DescribeRecipeResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface DescribeRecipeCommandInput extends DescribeRecipeRequest {
    }
    export interface DescribeRecipeCommandOutput extends DescribeRecipeResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the definition of a specific DataBrew recipe corresponding to a particular
        *             version.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, DescribeRecipeCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, DescribeRecipeCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new DescribeRecipeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRecipeCommandInput} for command's `input` shape.
        * @see {@link DescribeRecipeCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class DescribeRecipeCommand extends $Command<DescribeRecipeCommandInput, DescribeRecipeCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: DescribeRecipeCommandInput;
            constructor(input: DescribeRecipeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRecipeCommandInput, DescribeRecipeCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeRulesetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { DescribeRulesetRequest, DescribeRulesetResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface DescribeRulesetCommandInput extends DescribeRulesetRequest {
    }
    export interface DescribeRulesetCommandOutput extends DescribeRulesetResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves detailed information about the ruleset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, DescribeRulesetCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, DescribeRulesetCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new DescribeRulesetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRulesetCommandInput} for command's `input` shape.
        * @see {@link DescribeRulesetCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class DescribeRulesetCommand extends $Command<DescribeRulesetCommandInput, DescribeRulesetCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: DescribeRulesetCommandInput;
            constructor(input: DescribeRulesetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRulesetCommandInput, DescribeRulesetCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { DescribeScheduleRequest, DescribeScheduleResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface DescribeScheduleCommandInput extends DescribeScheduleRequest {
    }
    export interface DescribeScheduleCommandOutput extends DescribeScheduleResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the definition of a specific DataBrew schedule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, DescribeScheduleCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, DescribeScheduleCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new DescribeScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeScheduleCommandInput} for command's `input` shape.
        * @see {@link DescribeScheduleCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class DescribeScheduleCommand extends $Command<DescribeScheduleCommandInput, DescribeScheduleCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: DescribeScheduleCommandInput;
            constructor(input: DescribeScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeScheduleCommandInput, DescribeScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListDatasetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { ListDatasetsRequest, ListDatasetsResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface ListDatasetsCommandInput extends ListDatasetsRequest {
    }
    export interface ListDatasetsCommandOutput extends ListDatasetsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all of the DataBrew datasets.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, ListDatasetsCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, ListDatasetsCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new ListDatasetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDatasetsCommandInput} for command's `input` shape.
        * @see {@link ListDatasetsCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class ListDatasetsCommand extends $Command<ListDatasetsCommandInput, ListDatasetsCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: ListDatasetsCommandInput;
            constructor(input: ListDatasetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDatasetsCommandInput, ListDatasetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListJobRunsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { ListJobRunsRequest, ListJobRunsResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface ListJobRunsCommandInput extends ListJobRunsRequest {
    }
    export interface ListJobRunsCommandOutput extends ListJobRunsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all of the previous runs of a particular DataBrew job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, ListJobRunsCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, ListJobRunsCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new ListJobRunsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListJobRunsCommandInput} for command's `input` shape.
        * @see {@link ListJobRunsCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class ListJobRunsCommand extends $Command<ListJobRunsCommandInput, ListJobRunsCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: ListJobRunsCommandInput;
            constructor(input: ListJobRunsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListJobRunsCommandInput, ListJobRunsCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListJobsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { ListJobsRequest, ListJobsResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface ListJobsCommandInput extends ListJobsRequest {
    }
    export interface ListJobsCommandOutput extends ListJobsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all of the DataBrew jobs that are defined.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, ListJobsCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, ListJobsCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new ListJobsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListJobsCommandInput} for command's `input` shape.
        * @see {@link ListJobsCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class ListJobsCommand extends $Command<ListJobsCommandInput, ListJobsCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: ListJobsCommandInput;
            constructor(input: ListJobsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListJobsCommandInput, ListJobsCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListProjectsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { ListProjectsRequest, ListProjectsResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface ListProjectsCommandInput extends ListProjectsRequest {
    }
    export interface ListProjectsCommandOutput extends ListProjectsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all of the DataBrew projects that are defined.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, ListProjectsCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, ListProjectsCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new ListProjectsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListProjectsCommandInput} for command's `input` shape.
        * @see {@link ListProjectsCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class ListProjectsCommand extends $Command<ListProjectsCommandInput, ListProjectsCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: ListProjectsCommandInput;
            constructor(input: ListProjectsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListProjectsCommandInput, ListProjectsCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListRecipesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { ListRecipesRequest, ListRecipesResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface ListRecipesCommandInput extends ListRecipesRequest {
    }
    export interface ListRecipesCommandOutput extends ListRecipesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all of the DataBrew recipes that are defined.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, ListRecipesCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, ListRecipesCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new ListRecipesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRecipesCommandInput} for command's `input` shape.
        * @see {@link ListRecipesCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class ListRecipesCommand extends $Command<ListRecipesCommandInput, ListRecipesCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: ListRecipesCommandInput;
            constructor(input: ListRecipesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRecipesCommandInput, ListRecipesCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListRecipeVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { ListRecipeVersionsRequest, ListRecipeVersionsResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface ListRecipeVersionsCommandInput extends ListRecipeVersionsRequest {
    }
    export interface ListRecipeVersionsCommandOutput extends ListRecipeVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the versions of a particular DataBrew recipe, except for
        *                 <code>LATEST_WORKING</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, ListRecipeVersionsCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, ListRecipeVersionsCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new ListRecipeVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRecipeVersionsCommandInput} for command's `input` shape.
        * @see {@link ListRecipeVersionsCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class ListRecipeVersionsCommand extends $Command<ListRecipeVersionsCommandInput, ListRecipeVersionsCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: ListRecipeVersionsCommandInput;
            constructor(input: ListRecipeVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRecipeVersionsCommandInput, ListRecipeVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListRulesetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { ListRulesetsRequest, ListRulesetsResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface ListRulesetsCommandInput extends ListRulesetsRequest {
    }
    export interface ListRulesetsCommandOutput extends ListRulesetsResponse, __MetadataBearer {
    }
    /**
        * <p>List all rulesets available in the current account or rulesets associated
        *             with a specific resource (dataset).</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, ListRulesetsCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, ListRulesetsCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new ListRulesetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRulesetsCommandInput} for command's `input` shape.
        * @see {@link ListRulesetsCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class ListRulesetsCommand extends $Command<ListRulesetsCommandInput, ListRulesetsCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: ListRulesetsCommandInput;
            constructor(input: ListRulesetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRulesetsCommandInput, ListRulesetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListSchedulesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { ListSchedulesRequest, ListSchedulesResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface ListSchedulesCommandInput extends ListSchedulesRequest {
    }
    export interface ListSchedulesCommandOutput extends ListSchedulesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the DataBrew schedules that are defined.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, ListSchedulesCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, ListSchedulesCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new ListSchedulesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSchedulesCommandInput} for command's `input` shape.
        * @see {@link ListSchedulesCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class ListSchedulesCommand extends $Command<ListSchedulesCommandInput, ListSchedulesCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: ListSchedulesCommandInput;
            constructor(input: ListSchedulesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSchedulesCommandInput, ListSchedulesCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the tags for a DataBrew resource. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, ListTagsForResourceCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, ListTagsForResourceCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/PublishRecipeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { PublishRecipeRequest, PublishRecipeResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface PublishRecipeCommandInput extends PublishRecipeRequest {
    }
    export interface PublishRecipeCommandOutput extends PublishRecipeResponse, __MetadataBearer {
    }
    /**
        * <p>Publishes a new version of a DataBrew recipe.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, PublishRecipeCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, PublishRecipeCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new PublishRecipeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PublishRecipeCommandInput} for command's `input` shape.
        * @see {@link PublishRecipeCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class PublishRecipeCommand extends $Command<PublishRecipeCommandInput, PublishRecipeCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: PublishRecipeCommandInput;
            constructor(input: PublishRecipeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PublishRecipeCommandInput, PublishRecipeCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/SendProjectSessionActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { SendProjectSessionActionRequest, SendProjectSessionActionResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface SendProjectSessionActionCommandInput extends SendProjectSessionActionRequest {
    }
    export interface SendProjectSessionActionCommandOutput extends SendProjectSessionActionResponse, __MetadataBearer {
    }
    /**
        * <p>Performs a recipe step within an interactive DataBrew session that's currently
        *             open.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, SendProjectSessionActionCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, SendProjectSessionActionCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new SendProjectSessionActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendProjectSessionActionCommandInput} for command's `input` shape.
        * @see {@link SendProjectSessionActionCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class SendProjectSessionActionCommand extends $Command<SendProjectSessionActionCommandInput, SendProjectSessionActionCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: SendProjectSessionActionCommandInput;
            constructor(input: SendProjectSessionActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendProjectSessionActionCommandInput, SendProjectSessionActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/StartJobRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { StartJobRunRequest, StartJobRunResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface StartJobRunCommandInput extends StartJobRunRequest {
    }
    export interface StartJobRunCommandOutput extends StartJobRunResponse, __MetadataBearer {
    }
    /**
        * <p>Runs a DataBrew job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, StartJobRunCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, StartJobRunCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new StartJobRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartJobRunCommandInput} for command's `input` shape.
        * @see {@link StartJobRunCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class StartJobRunCommand extends $Command<StartJobRunCommandInput, StartJobRunCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: StartJobRunCommandInput;
            constructor(input: StartJobRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartJobRunCommandInput, StartJobRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/StartProjectSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { StartProjectSessionRequest, StartProjectSessionResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface StartProjectSessionCommandInput extends StartProjectSessionRequest {
    }
    export interface StartProjectSessionCommandOutput extends StartProjectSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an interactive session, enabling you to manipulate data in a DataBrew
        *             project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, StartProjectSessionCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, StartProjectSessionCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new StartProjectSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartProjectSessionCommandInput} for command's `input` shape.
        * @see {@link StartProjectSessionCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class StartProjectSessionCommand extends $Command<StartProjectSessionCommandInput, StartProjectSessionCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: StartProjectSessionCommandInput;
            constructor(input: StartProjectSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartProjectSessionCommandInput, StartProjectSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/StopJobRunCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { StopJobRunRequest, StopJobRunResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface StopJobRunCommandInput extends StopJobRunRequest {
    }
    export interface StopJobRunCommandOutput extends StopJobRunResponse, __MetadataBearer {
    }
    /**
        * <p>Stops a particular run of a job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, StopJobRunCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, StopJobRunCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new StopJobRunCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopJobRunCommandInput} for command's `input` shape.
        * @see {@link StopJobRunCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class StopJobRunCommand extends $Command<StopJobRunCommandInput, StopJobRunCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: StopJobRunCommandInput;
            constructor(input: StopJobRunCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopJobRunCommandInput, StopJobRunCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds metadata tags to a DataBrew resource, such as a dataset, project, recipe, job, or
        *             schedule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, TagResourceCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, TagResourceCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes metadata tags from a DataBrew resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, UntagResourceCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, UntagResourceCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateDatasetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { UpdateDatasetRequest, UpdateDatasetResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface UpdateDatasetCommandInput extends UpdateDatasetRequest {
    }
    export interface UpdateDatasetCommandOutput extends UpdateDatasetResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the definition of an existing DataBrew dataset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, UpdateDatasetCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, UpdateDatasetCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new UpdateDatasetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDatasetCommandInput} for command's `input` shape.
        * @see {@link UpdateDatasetCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class UpdateDatasetCommand extends $Command<UpdateDatasetCommandInput, UpdateDatasetCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: UpdateDatasetCommandInput;
            constructor(input: UpdateDatasetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDatasetCommandInput, UpdateDatasetCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateProfileJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { UpdateProfileJobRequest, UpdateProfileJobResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface UpdateProfileJobCommandInput extends UpdateProfileJobRequest {
    }
    export interface UpdateProfileJobCommandOutput extends UpdateProfileJobResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the definition of an existing profile job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, UpdateProfileJobCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, UpdateProfileJobCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new UpdateProfileJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateProfileJobCommandInput} for command's `input` shape.
        * @see {@link UpdateProfileJobCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class UpdateProfileJobCommand extends $Command<UpdateProfileJobCommandInput, UpdateProfileJobCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: UpdateProfileJobCommandInput;
            constructor(input: UpdateProfileJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateProfileJobCommandInput, UpdateProfileJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { UpdateProjectRequest, UpdateProjectResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface UpdateProjectCommandInput extends UpdateProjectRequest {
    }
    export interface UpdateProjectCommandOutput extends UpdateProjectResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the definition of an existing DataBrew project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, UpdateProjectCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, UpdateProjectCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new UpdateProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateProjectCommandInput} for command's `input` shape.
        * @see {@link UpdateProjectCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class UpdateProjectCommand extends $Command<UpdateProjectCommandInput, UpdateProjectCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: UpdateProjectCommandInput;
            constructor(input: UpdateProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateProjectCommandInput, UpdateProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateRecipeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { UpdateRecipeRequest, UpdateRecipeResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface UpdateRecipeCommandInput extends UpdateRecipeRequest {
    }
    export interface UpdateRecipeCommandOutput extends UpdateRecipeResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the definition of the <code>LATEST_WORKING</code> version of a DataBrew
        *             recipe.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, UpdateRecipeCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, UpdateRecipeCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new UpdateRecipeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRecipeCommandInput} for command's `input` shape.
        * @see {@link UpdateRecipeCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class UpdateRecipeCommand extends $Command<UpdateRecipeCommandInput, UpdateRecipeCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: UpdateRecipeCommandInput;
            constructor(input: UpdateRecipeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRecipeCommandInput, UpdateRecipeCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateRecipeJobCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { UpdateRecipeJobRequest, UpdateRecipeJobResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface UpdateRecipeJobCommandInput extends UpdateRecipeJobRequest {
    }
    export interface UpdateRecipeJobCommandOutput extends UpdateRecipeJobResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the definition of an existing DataBrew recipe job.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, UpdateRecipeJobCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, UpdateRecipeJobCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new UpdateRecipeJobCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRecipeJobCommandInput} for command's `input` shape.
        * @see {@link UpdateRecipeJobCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class UpdateRecipeJobCommand extends $Command<UpdateRecipeJobCommandInput, UpdateRecipeJobCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: UpdateRecipeJobCommandInput;
            constructor(input: UpdateRecipeJobCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRecipeJobCommandInput, UpdateRecipeJobCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateRulesetCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { UpdateRulesetRequest, UpdateRulesetResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface UpdateRulesetCommandInput extends UpdateRulesetRequest {
    }
    export interface UpdateRulesetCommandOutput extends UpdateRulesetResponse, __MetadataBearer {
    }
    /**
        * <p>Updates specified ruleset.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, UpdateRulesetCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, UpdateRulesetCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new UpdateRulesetCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRulesetCommandInput} for command's `input` shape.
        * @see {@link UpdateRulesetCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class UpdateRulesetCommand extends $Command<UpdateRulesetCommandInput, UpdateRulesetCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: UpdateRulesetCommandInput;
            constructor(input: UpdateRulesetCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRulesetCommandInput, UpdateRulesetCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateScheduleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DataBrewClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient";
    import { UpdateScheduleRequest, UpdateScheduleResponse } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0";
    export interface UpdateScheduleCommandInput extends UpdateScheduleRequest {
    }
    export interface UpdateScheduleCommandOutput extends UpdateScheduleResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the definition of an existing DataBrew schedule.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { DataBrewClient, UpdateScheduleCommand } from "@aws-sdk/client-databrew"; // ES Modules import
        * // const { DataBrewClient, UpdateScheduleCommand } = require("@aws-sdk/client-databrew"); // CommonJS import
        * const client = new DataBrewClient(config);
        * const command = new UpdateScheduleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateScheduleCommandInput} for command's `input` shape.
        * @see {@link UpdateScheduleCommandOutput} for command's `response` shape.
        * @see {@link DataBrewClientResolvedConfig | config} for DataBrewClient's `config` shape.
        *
        */
    export class UpdateScheduleCommand extends $Command<UpdateScheduleCommandInput, UpdateScheduleCommandOutput, DataBrewClientResolvedConfig> {
            readonly input: UpdateScheduleCommandInput;
            constructor(input: UpdateScheduleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: DataBrewClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateScheduleCommandInput, UpdateScheduleCommandOutput>;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/DataBrewClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { BatchDeleteRecipeVersionCommandInput, BatchDeleteRecipeVersionCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/BatchDeleteRecipeVersionCommand";
    import { CreateDatasetCommandInput, CreateDatasetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateDatasetCommand";
    import { CreateProfileJobCommandInput, CreateProfileJobCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateProfileJobCommand";
    import { CreateProjectCommandInput, CreateProjectCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateProjectCommand";
    import { CreateRecipeCommandInput, CreateRecipeCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateRecipeCommand";
    import { CreateRecipeJobCommandInput, CreateRecipeJobCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateRecipeJobCommand";
    import { CreateRulesetCommandInput, CreateRulesetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateRulesetCommand";
    import { CreateScheduleCommandInput, CreateScheduleCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/CreateScheduleCommand";
    import { DeleteDatasetCommandInput, DeleteDatasetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteDatasetCommand";
    import { DeleteJobCommandInput, DeleteJobCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteJobCommand";
    import { DeleteProjectCommandInput, DeleteProjectCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteProjectCommand";
    import { DeleteRecipeVersionCommandInput, DeleteRecipeVersionCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteRecipeVersionCommand";
    import { DeleteRulesetCommandInput, DeleteRulesetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteRulesetCommand";
    import { DeleteScheduleCommandInput, DeleteScheduleCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DeleteScheduleCommand";
    import { DescribeDatasetCommandInput, DescribeDatasetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeDatasetCommand";
    import { DescribeJobCommandInput, DescribeJobCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeJobCommand";
    import { DescribeJobRunCommandInput, DescribeJobRunCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeJobRunCommand";
    import { DescribeProjectCommandInput, DescribeProjectCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeProjectCommand";
    import { DescribeRecipeCommandInput, DescribeRecipeCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeRecipeCommand";
    import { DescribeRulesetCommandInput, DescribeRulesetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeRulesetCommand";
    import { DescribeScheduleCommandInput, DescribeScheduleCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/DescribeScheduleCommand";
    import { ListDatasetsCommandInput, ListDatasetsCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListDatasetsCommand";
    import { ListJobRunsCommandInput, ListJobRunsCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListJobRunsCommand";
    import { ListJobsCommandInput, ListJobsCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListJobsCommand";
    import { ListProjectsCommandInput, ListProjectsCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListProjectsCommand";
    import { ListRecipesCommandInput, ListRecipesCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListRecipesCommand";
    import { ListRecipeVersionsCommandInput, ListRecipeVersionsCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListRecipeVersionsCommand";
    import { ListRulesetsCommandInput, ListRulesetsCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListRulesetsCommand";
    import { ListSchedulesCommandInput, ListSchedulesCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListSchedulesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/ListTagsForResourceCommand";
    import { PublishRecipeCommandInput, PublishRecipeCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/PublishRecipeCommand";
    import { SendProjectSessionActionCommandInput, SendProjectSessionActionCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/SendProjectSessionActionCommand";
    import { StartJobRunCommandInput, StartJobRunCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/StartJobRunCommand";
    import { StartProjectSessionCommandInput, StartProjectSessionCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/StartProjectSessionCommand";
    import { StopJobRunCommandInput, StopJobRunCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/StopJobRunCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UntagResourceCommand";
    import { UpdateDatasetCommandInput, UpdateDatasetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateDatasetCommand";
    import { UpdateProfileJobCommandInput, UpdateProfileJobCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateProfileJobCommand";
    import { UpdateProjectCommandInput, UpdateProjectCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateProjectCommand";
    import { UpdateRecipeCommandInput, UpdateRecipeCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateRecipeCommand";
    import { UpdateRecipeJobCommandInput, UpdateRecipeJobCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateRecipeJobCommand";
    import { UpdateRulesetCommandInput, UpdateRulesetCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateRulesetCommand";
    import { UpdateScheduleCommandInput, UpdateScheduleCommandOutput } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/commands/UpdateScheduleCommand";
    export type ServiceInputTypes = BatchDeleteRecipeVersionCommandInput | CreateDatasetCommandInput | CreateProfileJobCommandInput | CreateProjectCommandInput | CreateRecipeCommandInput | CreateRecipeJobCommandInput | CreateRulesetCommandInput | CreateScheduleCommandInput | DeleteDatasetCommandInput | DeleteJobCommandInput | DeleteProjectCommandInput | DeleteRecipeVersionCommandInput | DeleteRulesetCommandInput | DeleteScheduleCommandInput | DescribeDatasetCommandInput | DescribeJobCommandInput | DescribeJobRunCommandInput | DescribeProjectCommandInput | DescribeRecipeCommandInput | DescribeRulesetCommandInput | DescribeScheduleCommandInput | ListDatasetsCommandInput | ListJobRunsCommandInput | ListJobsCommandInput | ListProjectsCommandInput | ListRecipeVersionsCommandInput | ListRecipesCommandInput | ListRulesetsCommandInput | ListSchedulesCommandInput | ListTagsForResourceCommandInput | PublishRecipeCommandInput | SendProjectSessionActionCommandInput | StartJobRunCommandInput | StartProjectSessionCommandInput | StopJobRunCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateDatasetCommandInput | UpdateProfileJobCommandInput | UpdateProjectCommandInput | UpdateRecipeCommandInput | UpdateRecipeJobCommandInput | UpdateRulesetCommandInput | UpdateScheduleCommandInput;
    export type ServiceOutputTypes = BatchDeleteRecipeVersionCommandOutput | CreateDatasetCommandOutput | CreateProfileJobCommandOutput | CreateProjectCommandOutput | CreateRecipeCommandOutput | CreateRecipeJobCommandOutput | CreateRulesetCommandOutput | CreateScheduleCommandOutput | DeleteDatasetCommandOutput | DeleteJobCommandOutput | DeleteProjectCommandOutput | DeleteRecipeVersionCommandOutput | DeleteRulesetCommandOutput | DeleteScheduleCommandOutput | DescribeDatasetCommandOutput | DescribeJobCommandOutput | DescribeJobRunCommandOutput | DescribeProjectCommandOutput | DescribeRecipeCommandOutput | DescribeRulesetCommandOutput | DescribeScheduleCommandOutput | ListDatasetsCommandOutput | ListJobRunsCommandOutput | ListJobsCommandOutput | ListProjectsCommandOutput | ListRecipeVersionsCommandOutput | ListRecipesCommandOutput | ListRulesetsCommandOutput | ListSchedulesCommandOutput | ListTagsForResourceCommandOutput | PublishRecipeCommandOutput | SendProjectSessionActionCommandOutput | StartJobRunCommandOutput | StartProjectSessionCommandOutput | StopJobRunCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateDatasetCommandOutput | UpdateProfileJobCommandOutput | UpdateProjectCommandOutput | UpdateRecipeCommandOutput | UpdateRecipeJobCommandOutput | UpdateRulesetCommandOutput | UpdateScheduleCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type DataBrewClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of DataBrewClient class constructor that set the region, credentials and other options.
        */
    export interface DataBrewClientConfig extends DataBrewClientConfigType {
    }
    type DataBrewClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of DataBrewClient class. This is resolved and normalized from the {@link DataBrewClientConfig | constructor configuration interface}.
        */
    export interface DataBrewClientResolvedConfig extends DataBrewClientResolvedConfigType {
    }
    /**
        * <p>Glue DataBrew is a visual, cloud-scale data-preparation service. DataBrew
        *             simplifies data preparation tasks, targeting data issues that are hard to spot and
        *             time-consuming to fix. DataBrew empowers users of all technical levels to visualize the
        *             data and perform one-click data transformations, with no coding required.</p>
        */
    export class DataBrewClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, DataBrewClientResolvedConfig> {
            /**
                * The resolved configuration of DataBrewClient class. This is resolved and normalized from the {@link DataBrewClientConfig | constructor configuration interface}.
                */
            readonly config: DataBrewClientResolvedConfig;
            constructor(configuration: DataBrewClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { DataBrewServiceException as __BaseException } from "@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/DataBrewServiceException";
    /**
        * <p>Access to the specified resource was denied.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    /**
        * <p>Configuration of statistics that are allowed to be run on columns that
        *             contain detected entities. When undefined, no statistics will be computed
        *             on columns that contain detected entities.</p>
        */
    export interface AllowedStatistics {
            /**
                * <p>One or more column statistics to allow for columns that contain detected entities.</p>
                */
            Statistics: string[] | undefined;
    }
    export namespace AllowedStatistics {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AllowedStatistics) => any;
    }
    export enum AnalyticsMode {
            DISABLE = "DISABLE",
            ENABLE = "ENABLE"
    }
    export interface BatchDeleteRecipeVersionRequest {
            /**
                * <p>The name of the recipe whose versions are to be deleted.</p>
                */
            Name: string | undefined;
            /**
                * <p>An array of version identifiers, for the recipe versions to be deleted. You can
                *             specify numeric versions (<code>X.Y</code>) or <code>LATEST_WORKING</code>.
                *                 <code>LATEST_PUBLISHED</code> is not supported.</p>
                */
            RecipeVersions: string[] | undefined;
    }
    export namespace BatchDeleteRecipeVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteRecipeVersionRequest) => any;
    }
    /**
        * <p>Represents any errors encountered when attempting to delete multiple recipe
        *             versions.</p>
        */
    export interface RecipeVersionErrorDetail {
            /**
                * <p>The HTTP status code for the error.</p>
                */
            ErrorCode?: string;
            /**
                * <p>The text of the error message.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The identifier for the recipe version associated with this error.</p>
                */
            RecipeVersion?: string;
    }
    export namespace RecipeVersionErrorDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecipeVersionErrorDetail) => any;
    }
    export interface BatchDeleteRecipeVersionResponse {
            /**
                * <p>The name of the recipe that was modified.</p>
                */
            Name: string | undefined;
            /**
                * <p>Errors, if any, that occurred while attempting to delete the recipe versions.</p>
                */
            Errors?: RecipeVersionErrorDetail[];
    }
    export namespace BatchDeleteRecipeVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteRecipeVersionResponse) => any;
    }
    /**
        * <p>Updating or deleting a resource can cause an inconsistent state.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>One or more resources can't be found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>The input parameters for this request failed validation.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export enum InputFormat {
            CSV = "CSV",
            EXCEL = "EXCEL",
            JSON = "JSON",
            ORC = "ORC",
            PARQUET = "PARQUET"
    }
    /**
        * <p>Represents a set of options that define how DataBrew will read a
        *             comma-separated value (CSV) file when creating a dataset from that file.</p>
        */
    export interface CsvOptions {
            /**
                * <p>A single character that specifies the delimiter being used in the CSV file.</p>
                */
            Delimiter?: string;
            /**
                * <p>A variable that specifies whether the first row in the file is parsed as the
                *             header. If this value is false, column names are auto-generated.</p>
                */
            HeaderRow?: boolean;
    }
    export namespace CsvOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CsvOptions) => any;
    }
    /**
        * <p>Represents a set of options that define how DataBrew will interpret a Microsoft Excel file when
        *             creating a dataset from that file.</p>
        */
    export interface ExcelOptions {
            /**
                * <p>One or more named sheets in the Excel file that will be included in the dataset.</p>
                */
            SheetNames?: string[];
            /**
                * <p>One or more sheet numbers in the Excel file that will be included in the
                *             dataset.</p>
                */
            SheetIndexes?: number[];
            /**
                * <p>A variable that specifies whether the first row in the file is parsed as the
                *             header. If this value is false, column names are auto-generated.</p>
                */
            HeaderRow?: boolean;
    }
    export namespace ExcelOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExcelOptions) => any;
    }
    /**
        * <p>Represents the JSON-specific options that define how input is to be interpreted by Glue DataBrew.</p>
        */
    export interface JsonOptions {
            /**
                * <p>A value that specifies whether JSON input contains embedded new line
                *             characters.</p>
                */
            MultiLine?: boolean;
    }
    export namespace JsonOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JsonOptions) => any;
    }
    /**
        * <p>Represents a set of options that define the structure of either comma-separated value (CSV),
        *             Excel, or JSON input.</p>
        */
    export interface FormatOptions {
            /**
                * <p>Options that define how JSON input is to be interpreted by DataBrew.</p>
                */
            Json?: JsonOptions;
            /**
                * <p>Options that define how Excel input is to be interpreted by DataBrew.</p>
                */
            Excel?: ExcelOptions;
            /**
                * <p>Options that define how CSV input is to be interpreted by DataBrew.</p>
                */
            Csv?: CsvOptions;
    }
    export namespace FormatOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FormatOptions) => any;
    }
    /**
        * <p>Represents an Amazon S3 location (bucket name, bucket owner, and object key) where DataBrew can read
        *             input data, or write output from a job.</p>
        */
    export interface S3Location {
            /**
                * <p>The Amazon S3 bucket name.</p>
                */
            Bucket: string | undefined;
            /**
                * <p>The unique name of the object in the bucket.</p>
                */
            Key?: string;
            /**
                * <p>The Amazon Web Services account ID of the bucket owner.</p>
                */
            BucketOwner?: string;
    }
    export namespace S3Location {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Location) => any;
    }
    /**
        * <p>Connection information for dataset input files stored in a database.</p>
        */
    export interface DatabaseInputDefinition {
            /**
                * <p>The Glue Connection that stores the connection information for the target
                *             database.</p>
                */
            GlueConnectionName: string | undefined;
            /**
                * <p>The table within the target database.</p>
                */
            DatabaseTableName?: string;
            /**
                * <p>Represents an Amazon S3 location (bucket name, bucket owner, and object key) where DataBrew can read
                *             input data, or write output from a job.</p>
                */
            TempDirectory?: S3Location;
            /**
                * <p>Custom SQL to run against the provided Glue connection. This SQL will be used as
                *             the input for DataBrew projects and jobs.</p>
                */
            QueryString?: string;
    }
    export namespace DatabaseInputDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatabaseInputDefinition) => any;
    }
    /**
        * <p>Represents how metadata stored in the Glue Data Catalog is defined in a DataBrew
        *             dataset. </p>
        */
    export interface DataCatalogInputDefinition {
            /**
                * <p>The unique identifier of the Amazon Web Services account that holds the Data Catalog that stores the
                *             data.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of a database in the Data Catalog.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of a database table in the Data Catalog. This table corresponds to a DataBrew
                *             dataset.</p>
                */
            TableName: string | undefined;
            /**
                * <p>Represents an Amazon location where DataBrew can store intermediate results.</p>
                */
            TempDirectory?: S3Location;
    }
    export namespace DataCatalogInputDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataCatalogInputDefinition) => any;
    }
    /**
        * <p>Contains additional resource information needed for specific datasets.</p>
        */
    export interface Metadata {
            /**
                * <p>The Amazon Resource Name (ARN) associated with the dataset. Currently, DataBrew
                *             only supports ARNs from Amazon AppFlow.</p>
                */
            SourceArn?: string;
    }
    export namespace Metadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Metadata) => any;
    }
    /**
        * <p>Represents information on how DataBrew can find data, in either the Glue Data Catalog or
        *             Amazon S3.</p>
        */
    export interface Input {
            /**
                * <p>The Amazon S3 location where the data is stored.</p>
                */
            S3InputDefinition?: S3Location;
            /**
                * <p>The Glue Data Catalog parameters for the data.</p>
                */
            DataCatalogInputDefinition?: DataCatalogInputDefinition;
            /**
                * <p>Connection information for dataset input files stored in a database.</p>
                */
            DatabaseInputDefinition?: DatabaseInputDefinition;
            /**
                * <p>Contains additional resource information needed for specific datasets.</p>
                */
            Metadata?: Metadata;
    }
    export namespace Input {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Input) => any;
    }
    export enum Order {
            ASCENDING = "ASCENDING",
            DESCENDING = "DESCENDING"
    }
    export enum OrderedBy {
            LAST_MODIFIED_DATE = "LAST_MODIFIED_DATE"
    }
    /**
        * <p>Represents a limit imposed on number of Amazon S3 files that should be selected for a
        *             dataset from a connected Amazon S3 path.</p>
        */
    export interface FilesLimit {
            /**
                * <p>The number of Amazon S3 files to select.</p>
                */
            MaxFiles: number | undefined;
            /**
                * <p>A criteria to use for Amazon S3 files sorting before their selection. By default uses LAST_MODIFIED_DATE as
                *             a sorting criteria. Currently it's the only allowed value.</p>
                */
            OrderedBy?: OrderedBy | string;
            /**
                * <p>A criteria to use for Amazon S3 files sorting before their selection. By
                *             default uses DESCENDING order, i.e. most recent files are selected first. Another
                *             possible value is ASCENDING.</p>
                */
            Order?: Order | string;
    }
    export namespace FilesLimit {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FilesLimit) => any;
    }
    /**
        * <p>Represents a structure for defining parameter conditions. Supported conditions are described
        *             here: <a href="https://docs.aws.amazon.com/databrew/latest/dg/datasets.multiple-files.html#conditions.for.dynamic.datasets">Supported
        *                 conditions for dynamic datasets</a> in the
        *             <i>Glue DataBrew Developer Guide</i>.</p>
        */
    export interface FilterExpression {
            /**
                * <p>The expression which includes condition names followed by substitution variables, possibly grouped
                *             and combined with other conditions. For example, "(starts_with :prefix1 or starts_with :prefix2) and
                *             (ends_with :suffix1 or ends_with :suffix2)". Substitution variables should start with ':' symbol.</p>
                */
            Expression: string | undefined;
            /**
                * <p>The map of substitution variable names to their values used in this filter expression.</p>
                */
            ValuesMap: Record<string, string> | undefined;
    }
    export namespace FilterExpression {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FilterExpression) => any;
    }
    /**
        * <p>Represents additional options for correct interpretation of datetime parameters used in
        *             the Amazon S3 path of a dataset.</p>
        */
    export interface DatetimeOptions {
            /**
                * <p>Required option, that defines the datetime format used for a date parameter in the
                *             Amazon S3 path. Should use only supported datetime specifiers and separation characters, all
                *             literal a-z or A-Z characters should be escaped with single quotes. E.g. "MM.dd.yyyy-'at'-HH:mm".</p>
                */
            Format: string | undefined;
            /**
                * <p>Optional value for a timezone offset of the datetime parameter value in the Amazon S3
                *             path. Shouldn't be used if Format for this parameter includes timezone fields.
                *             If no offset specified, UTC is assumed.</p>
                */
            TimezoneOffset?: string;
            /**
                * <p>Optional value for a non-US locale code, needed for correct interpretation of some date formats.</p>
                */
            LocaleCode?: string;
    }
    export namespace DatetimeOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatetimeOptions) => any;
    }
    export enum ParameterType {
            Datetime = "Datetime",
            Number = "Number",
            String = "String"
    }
    /**
        * <p>Represents a dataset parameter that defines type and conditions for a parameter in the
        *                 Amazon S3 path of the dataset.</p>
        */
    export interface DatasetParameter {
            /**
                * <p>The name of the parameter that is used in the dataset's Amazon S3 path.</p>
                */
            Name: string | undefined;
            /**
                * <p>The type of the dataset parameter, can be one of a 'String', 'Number' or 'Datetime'.</p>
                */
            Type: ParameterType | string | undefined;
            /**
                * <p>Additional parameter options such as a format and a timezone. Required for datetime parameters.</p>
                */
            DatetimeOptions?: DatetimeOptions;
            /**
                * <p>Optional boolean value that defines whether the captured value of this parameter
                *             should be used to create a new column in a dataset.</p>
                */
            CreateColumn?: boolean;
            /**
                * <p>The optional filter expression structure to apply additional matching criteria to the parameter.</p>
                */
            Filter?: FilterExpression;
    }
    export namespace DatasetParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatasetParameter) => any;
    }
    /**
        * <p>Represents a set of options that define how DataBrew selects files for a given Amazon S3
        *             path in a dataset.</p>
        */
    export interface PathOptions {
            /**
                * <p>If provided, this structure defines a date range for matching Amazon S3 objects based on their
                *             LastModifiedDate attribute in Amazon S3.</p>
                */
            LastModifiedDateCondition?: FilterExpression;
            /**
                * <p>If provided, this structure imposes a limit on a number of files that should be selected.</p>
                */
            FilesLimit?: FilesLimit;
            /**
                * <p>A structure that maps names of parameters used in the Amazon S3 path of a dataset to their definitions.</p>
                */
            Parameters?: Record<string, DatasetParameter>;
    }
    export namespace PathOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PathOptions) => any;
    }
    export interface CreateDatasetRequest {
            /**
                * <p>The name of the dataset to be created. Valid characters are alphanumeric (A-Z, a-z,
                *             0-9), hyphen (-), period (.), and space.</p>
                */
            Name: string | undefined;
            /**
                * <p>The file format of a dataset that is created from an Amazon S3 file or folder.</p>
                */
            Format?: InputFormat | string;
            /**
                * <p>Represents a set of options that define the structure of either comma-separated value (CSV),
                *             Excel, or JSON input.</p>
                */
            FormatOptions?: FormatOptions;
            /**
                * <p>Represents information on how DataBrew can find data, in either the Glue Data Catalog or
                *             Amazon S3.</p>
                */
            Input: Input | undefined;
            /**
                * <p>A set of options that defines how DataBrew interprets an Amazon S3 path of the dataset.</p>
                */
            PathOptions?: PathOptions;
            /**
                * <p>Metadata tags to apply to this dataset.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateDatasetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDatasetRequest) => any;
    }
    export interface CreateDatasetResponse {
            /**
                * <p>The name of the dataset that you created.</p>
                */
            Name: string | undefined;
    }
    export namespace CreateDatasetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDatasetResponse) => any;
    }
    /**
        * <p>A service quota is exceeded.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    /**
        * <p>Selector of a column from a dataset for profile job configuration.
        *             One selector includes either a column name or a regular expression.</p>
        */
    export interface ColumnSelector {
            /**
                * <p>A regular expression for selecting a column from a dataset.</p>
                */
            Regex?: string;
            /**
                * <p>The name of a column from a dataset.</p>
                */
            Name?: string;
    }
    export namespace ColumnSelector {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnSelector) => any;
    }
    /**
        * <p>Override of a particular evaluation for a profile job. </p>
        */
    export interface StatisticOverride {
            /**
                * <p>The name of an evaluation</p>
                */
            Statistic: string | undefined;
            /**
                * <p>A map that includes overrides of an evaluation’s parameters.</p>
                */
            Parameters: Record<string, string> | undefined;
    }
    export namespace StatisticOverride {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatisticOverride) => any;
    }
    /**
        * <p>Configuration of evaluations for a profile job. This configuration can be used to select
        *             evaluations and override the parameters of selected evaluations.
        *         </p>
        */
    export interface StatisticsConfiguration {
            /**
                * <p>List of included evaluations. When the list is undefined, all supported
                *             evaluations will be included.</p>
                */
            IncludedStatistics?: string[];
            /**
                * <p>List of overrides for evaluations.</p>
                */
            Overrides?: StatisticOverride[];
    }
    export namespace StatisticsConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatisticsConfiguration) => any;
    }
    /**
        * <p>Configuration for column evaluations for a profile job. ColumnStatisticsConfiguration can be used to select
        *             evaluations and override parameters of evaluations for particular columns.
        *         </p>
        */
    export interface ColumnStatisticsConfiguration {
            /**
                * <p>List of column selectors. Selectors can be used to select columns from the dataset.
                *             When selectors are undefined, configuration will be applied to all supported columns.
                *         </p>
                */
            Selectors?: ColumnSelector[];
            /**
                * <p>Configuration for evaluations. Statistics can be used to select evaluations and override
                *             parameters of evaluations.
                *         </p>
                */
            Statistics: StatisticsConfiguration | undefined;
    }
    export namespace ColumnStatisticsConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ColumnStatisticsConfiguration) => any;
    }
    /**
        * <p>Configuration of entity detection for a profile job. When undefined, entity
        *             detection is disabled.</p>
        */
    export interface EntityDetectorConfiguration {
            /**
                * <p>Entity types to detect. Can be any of the following:</p>
                *         <ul>
                *             <li>
                *                <p>USA_SSN</p>
                *             </li>
                *             <li>
                *                <p>EMAIL</p>
                *             </li>
                *             <li>
                *                <p>USA_ITIN</p>
                *             </li>
                *             <li>
                *                <p>USA_PASSPORT_NUMBER</p>
                *             </li>
                *             <li>
                *                <p>PHONE_NUMBER</p>
                *             </li>
                *             <li>
                *                <p>USA_DRIVING_LICENSE</p>
                *             </li>
                *             <li>
                *                <p>BANK_ACCOUNT</p>
                *             </li>
                *             <li>
                *                <p>CREDIT_CARD</p>
                *             </li>
                *             <li>
                *                <p>IP_ADDRESS</p>
                *             </li>
                *             <li>
                *                <p>MAC_ADDRESS</p>
                *             </li>
                *             <li>
                *                <p>USA_DEA_NUMBER</p>
                *             </li>
                *             <li>
                *                <p>USA_HCPCS_CODE</p>
                *             </li>
                *             <li>
                *                <p>USA_NATIONAL_PROVIDER_IDENTIFIER</p>
                *             </li>
                *             <li>
                *                <p>USA_NATIONAL_DRUG_CODE</p>
                *             </li>
                *             <li>
                *                <p>USA_HEALTH_INSURANCE_CLAIM_NUMBER</p>
                *             </li>
                *             <li>
                *                <p>USA_MEDICARE_BENEFICIARY_IDENTIFIER</p>
                *             </li>
                *             <li>
                *                <p>USA_CPT_CODE</p>
                *             </li>
                *             <li>
                *                <p>PERSON_NAME</p>
                *             </li>
                *             <li>
                *                <p>DATE</p>
                *             </li>
                *          </ul>
                *         <p>The Entity type group USA_ALL is also supported, and includes all of the
                *             above entity types except PERSON_NAME and DATE.</p>
                */
            EntityTypes: string[] | undefined;
            /**
                * <p>Configuration of statistics that are allowed to be run on columns that
                *             contain detected entities. When undefined, no statistics will be computed
                *             on columns that contain detected entities.</p>
                */
            AllowedStatistics?: AllowedStatistics[];
    }
    export namespace EntityDetectorConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityDetectorConfiguration) => any;
    }
    /**
        * <p>Configuration for profile jobs. Configuration can be used to select columns, do evaluations, and override default
        *             parameters of evaluations. When configuration is undefined, the profile job will apply default settings to all
        *             supported columns.
        *         </p>
        */
    export interface ProfileConfiguration {
            /**
                * <p>Configuration for inter-column evaluations. Configuration can be used to select evaluations and override
                *             parameters of evaluations. When configuration is undefined, the profile job will run all supported
                *             inter-column evaluations.
                *         </p>
                */
            DatasetStatisticsConfiguration?: StatisticsConfiguration;
            /**
                * <p>List of column selectors. ProfileColumns can be used to select columns from the dataset. When
                *             ProfileColumns is undefined, the profile job will profile all supported columns.
                *         </p>
                */
            ProfileColumns?: ColumnSelector[];
            /**
                * <p>List of configurations for column evaluations. ColumnStatisticsConfigurations are used to
                *             select evaluations and override parameters of evaluations for particular columns. When
                *             ColumnStatisticsConfigurations is undefined,  the profile job will profile all supported columns
                *             and run all supported  evaluations.
                *         </p>
                */
            ColumnStatisticsConfigurations?: ColumnStatisticsConfiguration[];
            /**
                * <p>Configuration of entity detection for a profile job. When undefined, entity detection is disabled.</p>
                */
            EntityDetectorConfiguration?: EntityDetectorConfiguration;
    }
    export namespace ProfileConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProfileConfiguration) => any;
    }
    export enum EncryptionMode {
            SSEKMS = "SSE-KMS",
            SSES3 = "SSE-S3"
    }
    export enum SampleMode {
            CUSTOM_ROWS = "CUSTOM_ROWS",
            FULL_DATASET = "FULL_DATASET"
    }
    /**
        * <p>A sample configuration for profile jobs only, which determines the number of rows on which the
        *             profile job is run. If a <code>JobSample</code> value isn't provided, the
        *             default is used. The default value is CUSTOM_ROWS for the mode parameter and
        *             20,000 for the size parameter.</p>
        */
    export interface JobSample {
            /**
                * <p>A value that determines whether the profile job is run on the entire dataset or a
                *             specified number of rows. This value must be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>FULL_DATASET - The profile job is run on the entire dataset.</p>
                *             </li>
                *             <li>
                *                 <p>CUSTOM_ROWS - The profile job is run on the number of rows specified in the
                *                     <code>Size</code> parameter.</p>
                *             </li>
                *          </ul>
                */
            Mode?: SampleMode | string;
            /**
                * <p>The <code>Size</code> parameter is only required when the mode is CUSTOM_ROWS. The
                *             profile job is run on the specified number of rows. The maximum value for size is
                *             Long.MAX_VALUE.</p>
                *         <p>Long.MAX_VALUE = 9223372036854775807</p>
                */
            Size?: number;
    }
    export namespace JobSample {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobSample) => any;
    }
    export enum LogSubscription {
            DISABLE = "DISABLE",
            ENABLE = "ENABLE"
    }
    export enum ValidationMode {
            CHECK_ALL = "CHECK_ALL"
    }
    /**
        * <p>Configuration for data quality validation. Used to select the Rulesets and Validation Mode
        *             to be used in the profile job. When ValidationConfiguration is null, the profile
        *             job will run without data quality validation.</p>
        */
    export interface ValidationConfiguration {
            /**
                * <p>The Amazon Resource Name (ARN) for the ruleset to be validated in the profile job.
                *             The TargetArn of the selected ruleset should be the same as the Amazon Resource Name (ARN) of
                *             the dataset that is associated with the profile job.</p>
                */
            RulesetArn: string | undefined;
            /**
                * <p>Mode of data quality validation. Default mode is “CHECK_ALL” which verifies all rules
                *             defined in the selected ruleset.</p>
                */
            ValidationMode?: ValidationMode | string;
    }
    export namespace ValidationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationConfiguration) => any;
    }
    export interface CreateProfileJobRequest {
            /**
                * <p>The name of the dataset that this job is to act upon.</p>
                */
            DatasetName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an encryption key that is used to protect the
                *             job.</p>
                */
            EncryptionKeyArn?: string;
            /**
                * <p>The encryption mode for the job, which can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>SSE-KMS</code> - <code>SSE-KMS</code> - Server-side encryption with
                *                     KMS-managed keys.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p>
                *             </li>
                *          </ul>
                */
            EncryptionMode?: EncryptionMode | string;
            /**
                * <p>The name of the job to be created. Valid characters are alphanumeric (A-Z, a-z, 0-9),
                *             hyphen (-), period (.), and space.</p>
                */
            Name: string | undefined;
            /**
                * <p>Enables or disables Amazon CloudWatch logging for the job. If logging is enabled,
                *             CloudWatch writes one log stream for each job run.</p>
                */
            LogSubscription?: LogSubscription | string;
            /**
                * <p>The maximum number of nodes that DataBrew can use when the job processes data.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>The maximum number of times to retry the job after a job run fails.</p>
                */
            MaxRetries?: number;
            /**
                * <p>Represents an Amazon S3 location (bucket name, bucket owner, and object key) where DataBrew can read
                *             input data, or write output from a job.</p>
                */
            OutputLocation: S3Location | undefined;
            /**
                * <p>Configuration for profile jobs. Used to select columns, do evaluations,
                *             and override default parameters of evaluations. When configuration is null, the
                *             profile job will run with default settings.</p>
                */
            Configuration?: ProfileConfiguration;
            /**
                * <p>List of validation configurations that are applied to the profile job.</p>
                */
            ValidationConfigurations?: ValidationConfiguration[];
            /**
                * <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to
                *             be assumed when DataBrew runs the job.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>Metadata tags to apply to this job.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The job's timeout in minutes. A job that attempts to run longer than this timeout
                *             period ends with a status of <code>TIMEOUT</code>.</p>
                */
            Timeout?: number;
            /**
                * <p>Sample configuration for profile jobs only. Determines the number of rows on which the
                *             profile job will be executed. If a JobSample value is not provided, the default value
                *             will be used. The default value is CUSTOM_ROWS for the mode parameter and 20000 for the
                *             size parameter.</p>
                */
            JobSample?: JobSample;
    }
    export namespace CreateProfileJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProfileJobRequest) => any;
    }
    export interface CreateProfileJobResponse {
            /**
                * <p>The name of the job that was created.</p>
                */
            Name: string | undefined;
    }
    export namespace CreateProfileJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProfileJobResponse) => any;
    }
    export enum SampleType {
            FIRST_N = "FIRST_N",
            LAST_N = "LAST_N",
            RANDOM = "RANDOM"
    }
    /**
        * <p>Represents the sample size and sampling type for DataBrew to use for interactive data
        *             analysis.</p>
        */
    export interface Sample {
            /**
                * <p>The number of rows in the sample.</p>
                */
            Size?: number;
            /**
                * <p>The way in which DataBrew obtains rows from a dataset.</p>
                */
            Type: SampleType | string | undefined;
    }
    export namespace Sample {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Sample) => any;
    }
    export interface CreateProjectRequest {
            /**
                * <p>The name of an existing dataset to associate this project with.</p>
                */
            DatasetName: string | undefined;
            /**
                * <p>A unique name for the new project. Valid characters are alphanumeric (A-Z, a-z, 0-9),
                *             hyphen (-), period (.), and space.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of an existing recipe to associate with the project.</p>
                */
            RecipeName: string | undefined;
            /**
                * <p>Represents the sample size and sampling type for DataBrew to use for interactive data
                *             analysis.</p>
                */
            Sample?: Sample;
            /**
                * <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to
                *             be assumed for this request.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>Metadata tags to apply to this project.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProjectRequest) => any;
    }
    export interface CreateProjectResponse {
            /**
                * <p>The name of the project that you created.</p>
                */
            Name: string | undefined;
    }
    export namespace CreateProjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProjectResponse) => any;
    }
    /**
        * <p>An internal service failure occurred.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>Represents a transformation and associated parameters that are used to apply a change
        *             to a DataBrew dataset. For more information, see <a href="https://docs.aws.amazon.com/databrew/latest/dg/recipe-actions-reference.html">Recipe
        *                 actions reference</a>.</p>
        */
    export interface RecipeAction {
            /**
                * <p>The name of a valid DataBrew transformation to be performed on the data.</p>
                */
            Operation: string | undefined;
            /**
                * <p>Contextual parameters for the transformation.</p>
                */
            Parameters?: Record<string, string>;
    }
    export namespace RecipeAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecipeAction) => any;
    }
    /**
        * <p>Represents an individual condition that evaluates to true or false.</p>
        *         <p>Conditions are used with recipe actions. The action is only performed for column values where the
        *             condition evaluates to true.</p>
        *         <p>If a recipe requires more than one condition, then the recipe must specify multiple
        *             <code>ConditionExpression</code> elements. Each condition is applied to the rows in a dataset first, before
        *             the recipe action is performed.</p>
        */
    export interface ConditionExpression {
            /**
                * <p>A specific condition to apply to a recipe action. For more information, see <a href="https://docs.aws.amazon.com/databrew/latest/dg/recipes.html#recipes.structure">Recipe
                *             structure</a> in the <i>Glue DataBrew Developer
                *             Guide</i>.</p>
                */
            Condition: string | undefined;
            /**
                * <p>A value that the condition must evaluate to for the condition to succeed.</p>
                */
            Value?: string;
            /**
                * <p>A column to apply this condition to.</p>
                */
            TargetColumn: string | undefined;
    }
    export namespace ConditionExpression {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConditionExpression) => any;
    }
    /**
        * <p>Represents a single step from a DataBrew recipe to be performed.</p>
        */
    export interface RecipeStep {
            /**
                * <p>The particular action to be performed in the recipe step.</p>
                */
            Action: RecipeAction | undefined;
            /**
                * <p>One or more conditions that must be met for the recipe step to succeed.</p>
                *         <note>
                *             <p>All of the conditions in the array must be met. In other words, all of the
                *                 conditions must be combined using a logical AND operation.</p>
                *         </note>
                */
            ConditionExpressions?: ConditionExpression[];
    }
    export namespace RecipeStep {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecipeStep) => any;
    }
    export interface CreateRecipeRequest {
            /**
                * <p>A description for the recipe.</p>
                */
            Description?: string;
            /**
                * <p>A unique name for the recipe. Valid characters are alphanumeric (A-Z, a-z, 0-9),
                *             hyphen (-), period (.), and space.</p>
                */
            Name: string | undefined;
            /**
                * <p>An array containing the steps to be performed by the recipe. Each recipe step consists
                *             of one recipe action and (optionally) an array of condition expressions.</p>
                */
            Steps: RecipeStep[] | undefined;
            /**
                * <p>Metadata tags to apply to this recipe.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateRecipeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRecipeRequest) => any;
    }
    export interface CreateRecipeResponse {
            /**
                * <p>The name of the recipe that you created.</p>
                */
            Name: string | undefined;
    }
    export namespace CreateRecipeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRecipeResponse) => any;
    }
    /**
        * <p>Represents options that specify how and where DataBrew writes the database
        *             output generated by recipe jobs.</p>
        */
    export interface DatabaseTableOutputOptions {
            /**
                * <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can store
                *             intermediate results.</p>
                */
            TempDirectory?: S3Location;
            /**
                * <p>A prefix for the name of a table DataBrew will create in the database.</p>
                */
            TableName: string | undefined;
    }
    export namespace DatabaseTableOutputOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatabaseTableOutputOptions) => any;
    }
    export enum DatabaseOutputMode {
            NEW_TABLE = "NEW_TABLE"
    }
    /**
        * <p>Represents a JDBC database output object which defines the output destination for
        *             a DataBrew recipe job to write into.</p>
        */
    export interface DatabaseOutput {
            /**
                * <p>The Glue connection that stores the connection information for the
                *             target database.</p>
                */
            GlueConnectionName: string | undefined;
            /**
                * <p>Represents options that specify how and where DataBrew writes the database output
                *             generated by recipe jobs.</p>
                */
            DatabaseOptions: DatabaseTableOutputOptions | undefined;
            /**
                * <p>The output mode to write into the database. Currently supported option: NEW_TABLE.</p>
                */
            DatabaseOutputMode?: DatabaseOutputMode | string;
    }
    export namespace DatabaseOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DatabaseOutput) => any;
    }
    /**
        * <p>Represents options that specify how and where DataBrew writes the Amazon S3 output
        *             generated by recipe jobs.</p>
        */
    export interface S3TableOutputOptions {
            /**
                * <p>Represents an Amazon S3 location (bucket name and object key) where DataBrew can write output
                *             from a job.</p>
                */
            Location: S3Location | undefined;
    }
    export namespace S3TableOutputOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3TableOutputOptions) => any;
    }
    /**
        * <p>Represents options that specify how and where in the Glue Data Catalog DataBrew
        *             writes the output generated by recipe jobs.</p>
        */
    export interface DataCatalogOutput {
            /**
                * <p>The unique identifier of the Amazon Web Services account that holds the Data Catalog that
                *             stores the data.</p>
                */
            CatalogId?: string;
            /**
                * <p>The name of a database in the Data Catalog.</p>
                */
            DatabaseName: string | undefined;
            /**
                * <p>The name of a table in the Data Catalog.</p>
                */
            TableName: string | undefined;
            /**
                * <p>Represents options that specify how and where DataBrew writes the Amazon S3
                *             output generated by recipe jobs.</p>
                */
            S3Options?: S3TableOutputOptions;
            /**
                * <p>Represents options that specify how and where DataBrew writes the database output
                *             generated by recipe jobs.</p>
                */
            DatabaseOptions?: DatabaseTableOutputOptions;
            /**
                * <p>A value that, if true, means that any data in the location specified for output
                *             is overwritten with new output. Not supported with DatabaseOptions.</p>
                */
            Overwrite?: boolean;
    }
    export namespace DataCatalogOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataCatalogOutput) => any;
    }
    export enum CompressionFormat {
            BROTLI = "BROTLI",
            BZIP2 = "BZIP2",
            DEFLATE = "DEFLATE",
            GZIP = "GZIP",
            LZ4 = "LZ4",
            LZO = "LZO",
            SNAPPY = "SNAPPY",
            ZLIB = "ZLIB",
            ZSTD = "ZSTD"
    }
    export enum OutputFormat {
            AVRO = "AVRO",
            CSV = "CSV",
            GLUEPARQUET = "GLUEPARQUET",
            JSON = "JSON",
            ORC = "ORC",
            PARQUET = "PARQUET",
            TABLEAUHYPER = "TABLEAUHYPER",
            XML = "XML"
    }
    /**
        * <p>Represents a set of options that define how DataBrew will write a
        *             comma-separated value (CSV) file.</p>
        */
    export interface CsvOutputOptions {
            /**
                * <p>A single character that specifies the delimiter used to create CSV job output.</p>
                */
            Delimiter?: string;
    }
    export namespace CsvOutputOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CsvOutputOptions) => any;
    }
    /**
        * <p>Represents a set of options that define the structure of comma-separated (CSV) job output.</p>
        */
    export interface OutputFormatOptions {
            /**
                * <p>Represents a set of options that define the structure of comma-separated value (CSV)
                *             job output.</p>
                */
            Csv?: CsvOutputOptions;
    }
    export namespace OutputFormatOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OutputFormatOptions) => any;
    }
    /**
        * <p>Represents options that specify how and where in Amazon S3 DataBrew writes the output generated by
        *             recipe jobs or profile jobs.</p>
        */
    export interface Output {
            /**
                * <p>The compression algorithm used to compress the output text of the job.</p>
                */
            CompressionFormat?: CompressionFormat | string;
            /**
                * <p>The data format of the output of the job.</p>
                */
            Format?: OutputFormat | string;
            /**
                * <p>The names of one or more partition columns for the output of the job.</p>
                */
            PartitionColumns?: string[];
            /**
                * <p>The location in Amazon S3 where the job writes its output.</p>
                */
            Location: S3Location | undefined;
            /**
                * <p>A value that, if true, means that any data in the location specified for output is
                *             overwritten with new output.</p>
                */
            Overwrite?: boolean;
            /**
                * <p>Represents options that define how DataBrew formats job output files.</p>
                */
            FormatOptions?: OutputFormatOptions;
            /**
                * <p>Maximum number of files to be generated by the job and written to the output folder. For output partitioned
                *             by column(s), the MaxOutputFiles value is the maximum number of files per partition.</p>
                */
            MaxOutputFiles?: number;
    }
    export namespace Output {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Output) => any;
    }
    /**
        * <p>Represents the name and version of a DataBrew recipe.</p>
        */
    export interface RecipeReference {
            /**
                * <p>The name of the recipe.</p>
                */
            Name: string | undefined;
            /**
                * <p>The identifier for the version for the recipe. </p>
                */
            RecipeVersion?: string;
    }
    export namespace RecipeReference {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RecipeReference) => any;
    }
    export interface CreateRecipeJobRequest {
            /**
                * <p>The name of the dataset that this job processes.</p>
                */
            DatasetName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of an encryption key that is used to protect the
                *             job.</p>
                */
            EncryptionKeyArn?: string;
            /**
                * <p>The encryption mode for the job, which can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p>
                *             </li>
                *          </ul>
                */
            EncryptionMode?: EncryptionMode | string;
            /**
                * <p>A unique name for the job. Valid characters are alphanumeric (A-Z, a-z, 0-9), hyphen
                *             (-), period (.), and space.</p>
                */
            Name: string | undefined;
            /**
                * <p>Enables or disables Amazon CloudWatch logging for the job. If logging is enabled,
                *             CloudWatch writes one log stream for each job run.</p>
                */
            LogSubscription?: LogSubscription | string;
            /**
                * <p>The maximum number of nodes that DataBrew can consume when the job processes
                *             data.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>The maximum number of times to retry the job after a job run fails.</p>
                */
            MaxRetries?: number;
            /**
                * <p>One or more artifacts that represent the output from running the job.</p>
                */
            Outputs?: Output[];
            /**
                * <p>One or more artifacts that represent the Glue Data Catalog output from running the job.</p>
                */
            DataCatalogOutputs?: DataCatalogOutput[];
            /**
                * <p>Represents a list of JDBC database output objects which defines the output destination for
                *             a DataBrew recipe job to write to. </p>
                */
            DatabaseOutputs?: DatabaseOutput[];
            /**
                * <p>Either the name of an existing project, or a combination of a recipe and a dataset to
                *             associate with the recipe.</p>
                */
            ProjectName?: string;
            /**
                * <p>Represents the name and version of a DataBrew recipe.</p>
                */
            RecipeReference?: RecipeReference;
            /**
                * <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to
                *             be assumed when DataBrew runs the job.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>Metadata tags to apply to this job.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The job's timeout in minutes. A job that attempts to run longer than this timeout
                *             period ends with a status of <code>TIMEOUT</code>.</p>
                */
            Timeout?: number;
    }
    export namespace CreateRecipeJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRecipeJobRequest) => any;
    }
    export interface CreateRecipeJobResponse {
            /**
                * <p>The name of the job that you created.</p>
                */
            Name: string | undefined;
    }
    export namespace CreateRecipeJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRecipeJobResponse) => any;
    }
    export enum ThresholdType {
            GREATER_THAN = "GREATER_THAN",
            GREATER_THAN_OR_EQUAL = "GREATER_THAN_OR_EQUAL",
            LESS_THAN = "LESS_THAN",
            LESS_THAN_OR_EQUAL = "LESS_THAN_OR_EQUAL"
    }
    export enum ThresholdUnit {
            COUNT = "COUNT",
            PERCENTAGE = "PERCENTAGE"
    }
    /**
        * <p>The threshold used with a non-aggregate check expression. The non-aggregate check expression
        *             will be applied to each row in a specific column. Then the threshold will be used to determine
        *             whether the validation succeeds.</p>
        */
    export interface Threshold {
            /**
                * <p>The value of a threshold.</p>
                */
            Value: number | undefined;
            /**
                * <p>The type of a threshold. Used for comparison of an actual count of rows that satisfy the
                *             rule to the threshold value.</p>
                */
            Type?: ThresholdType | string;
            /**
                * <p>Unit of threshold value. Can be either a COUNT or PERCENTAGE of the full sample size
                *             used for validation.</p>
                */
            Unit?: ThresholdUnit | string;
    }
    export namespace Threshold {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Threshold) => any;
    }
    /**
        * <p>Represents a single data quality requirement that should be validated in the
        *             scope of this dataset.</p>
        */
    export interface Rule {
            /**
                * <p>The name of the rule.</p>
                */
            Name: string | undefined;
            /**
                * <p>A value that specifies whether the rule is disabled. Once a rule is
                *             disabled, a profile job will not validate it during a job run. Default
                *             value is false.</p>
                */
            Disabled?: boolean;
            /**
                * <p>The expression which includes column references, condition names followed by variable
                *             references, possibly grouped and combined with other conditions. For example,
                *                 <code>(:col1 starts_with :prefix1 or :col1 starts_with :prefix2) and (:col1
                *                 ends_with :suffix1 or :col1 ends_with :suffix2)</code>. Column and value references
                *             are substitution variables that should start with the ':' symbol. Depending on the
                *             context, substitution variables' values can be either an actual value or a column name.
                *             These values are defined in the SubstitutionMap. If a CheckExpression starts with a
                *             column reference, then ColumnSelectors in the rule should be null. If ColumnSelectors
                *             has been defined, then there should be no column reference in the left side of a
                *             condition, for example, <code>is_between :val1 and :val2</code>.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/databrew/latest/dg/profile.data-quality-available-checks.html">Available checks</a>
                *          </p>
                */
            CheckExpression: string | undefined;
            /**
                * <p>The map of substitution variable names to their values used in a check
                *             expression. Variable names should start with a ':' (colon).  Variable values can either
                *             be actual values or column names. To differentiate between the two, column names
                *             should be enclosed in backticks, for example, <code>":col1": "`Column A`".</code>
                *          </p>
                */
            SubstitutionMap?: Record<string, string>;
            /**
                * <p>The threshold used with a non-aggregate check expression. Non-aggregate check expressions
                *             will be applied to each row in a specific column, and the threshold will be used to determine
                *             whether the validation succeeds.</p>
                */
            Threshold?: Threshold;
            /**
                * <p>List of column selectors. Selectors can be used to select columns using a name or regular
                *             expression from the dataset. Rule will be applied to selected columns.</p>
                */
            ColumnSelectors?: ColumnSelector[];
    }
    export namespace Rule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Rule) => any;
    }
    export interface CreateRulesetRequest {
            /**
                * <p>The name of the ruleset to be created. Valid characters are alphanumeric
                *             (A-Z, a-z, 0-9), hyphen (-), period (.), and space.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description of the ruleset.</p>
                */
            Description?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of a resource (dataset) that the
                *             ruleset is associated with.</p>
                */
            TargetArn: string | undefined;
            /**
                * <p>A list of rules that are defined with the ruleset. A rule includes
                *             one or more checks to be validated on a DataBrew dataset.</p>
                */
            Rules: Rule[] | undefined;
            /**
                * <p>Metadata tags to apply to the ruleset.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateRulesetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRulesetRequest) => any;
    }
    export interface CreateRulesetResponse {
            /**
                * <p>The unique name of the created ruleset.</p>
                */
            Name: string | undefined;
    }
    export namespace CreateRulesetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRulesetResponse) => any;
    }
    export interface CreateScheduleRequest {
            /**
                * <p>The name or names of one or more jobs to be run.</p>
                */
            JobNames?: string[];
            /**
                * <p>The date or dates and time or times when the jobs are to be run. For more information,
                *             see <a href="https://docs.aws.amazon.com/databrew/latest/dg/jobs.cron.html">Cron
                *                 expressions</a> in the <i>Glue DataBrew Developer
                *             Guide</i>.</p>
                */
            CronExpression: string | undefined;
            /**
                * <p>Metadata tags to apply to this schedule.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A unique name for the schedule. Valid characters are alphanumeric (A-Z, a-z, 0-9),
                *             hyphen (-), period (.), and space.</p>
                */
            Name: string | undefined;
    }
    export namespace CreateScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateScheduleRequest) => any;
    }
    export interface CreateScheduleResponse {
            /**
                * <p>The name of the schedule that was created.</p>
                */
            Name: string | undefined;
    }
    export namespace CreateScheduleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateScheduleResponse) => any;
    }
    export interface DeleteDatasetRequest {
            /**
                * <p>The name of the dataset to be deleted.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteDatasetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDatasetRequest) => any;
    }
    export interface DeleteDatasetResponse {
            /**
                * <p>The name of the dataset that you deleted.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteDatasetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDatasetResponse) => any;
    }
    export interface DeleteJobRequest {
            /**
                * <p>The name of the job to be deleted.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteJobRequest) => any;
    }
    export interface DeleteJobResponse {
            /**
                * <p>The name of the job that you deleted.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteJobResponse) => any;
    }
    export interface DeleteProjectRequest {
            /**
                * <p>The name of the project to be deleted.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProjectRequest) => any;
    }
    export interface DeleteProjectResponse {
            /**
                * <p>The name of the project that you deleted.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteProjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProjectResponse) => any;
    }
    export interface DeleteRecipeVersionRequest {
            /**
                * <p>The name of the recipe.</p>
                */
            Name: string | undefined;
            /**
                * <p>The version of the recipe to be deleted. You can specify a numeric versions
                *                 (<code>X.Y</code>) or <code>LATEST_WORKING</code>. <code>LATEST_PUBLISHED</code> is
                *             not supported.</p>
                */
            RecipeVersion: string | undefined;
    }
    export namespace DeleteRecipeVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRecipeVersionRequest) => any;
    }
    export interface DeleteRecipeVersionResponse {
            /**
                * <p>The name of the recipe that was deleted.</p>
                */
            Name: string | undefined;
            /**
                * <p>The version of the recipe that was deleted.</p>
                */
            RecipeVersion: string | undefined;
    }
    export namespace DeleteRecipeVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRecipeVersionResponse) => any;
    }
    export interface DeleteRulesetRequest {
            /**
                * <p>The name of the ruleset to be deleted.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteRulesetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRulesetRequest) => any;
    }
    export interface DeleteRulesetResponse {
            /**
                * <p>The name of the deleted ruleset.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteRulesetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRulesetResponse) => any;
    }
    export interface DeleteScheduleRequest {
            /**
                * <p>The name of the schedule to be deleted.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteScheduleRequest) => any;
    }
    export interface DeleteScheduleResponse {
            /**
                * <p>The name of the schedule that was deleted.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteScheduleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteScheduleResponse) => any;
    }
    export interface DescribeDatasetRequest {
            /**
                * <p>The name of the dataset to be described.</p>
                */
            Name: string | undefined;
    }
    export namespace DescribeDatasetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDatasetRequest) => any;
    }
    export enum Source {
            DATABASE = "DATABASE",
            DATACATALOG = "DATA-CATALOG",
            S3 = "S3"
    }
    export interface DescribeDatasetResponse {
            /**
                * <p>The identifier (user name) of the user who created the dataset.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The date and time that the dataset was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The name of the dataset.</p>
                */
            Name: string | undefined;
            /**
                * <p>The file format of a dataset that is created from an Amazon S3 file
                *             or folder.</p>
                */
            Format?: InputFormat | string;
            /**
                * <p>Represents a set of options that define the structure of either comma-separated value (CSV),
                *             Excel, or JSON input.</p>
                */
            FormatOptions?: FormatOptions;
            /**
                * <p>Represents information on how DataBrew can find data, in either the Glue Data Catalog or
                *             Amazon S3.</p>
                */
            Input: Input | undefined;
            /**
                * <p>The date and time that the dataset was last modified.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The identifier (user name) of the user who last modified the dataset.</p>
                */
            LastModifiedBy?: string;
            /**
                * <p>The location of the data for this dataset, Amazon S3 or the
                *             Glue Data Catalog.</p>
                */
            Source?: Source | string;
            /**
                * <p>A set of options that defines how DataBrew interprets an Amazon S3
                *             path of the dataset.</p>
                */
            PathOptions?: PathOptions;
            /**
                * <p>Metadata tags associated with this dataset.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The Amazon Resource Name (ARN) of the dataset.</p>
                */
            ResourceArn?: string;
    }
    export namespace DescribeDatasetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeDatasetResponse) => any;
    }
    export interface DescribeJobRequest {
            /**
                * <p>The name of the job to be described.</p>
                */
            Name: string | undefined;
    }
    export namespace DescribeJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJobRequest) => any;
    }
    export enum JobType {
            PROFILE = "PROFILE",
            RECIPE = "RECIPE"
    }
    export interface DescribeJobResponse {
            /**
                * <p>The date and time that the job was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The identifier (user name) of the user associated with the creation of the job.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The dataset that the job acts upon.</p>
                */
            DatasetName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of an encryption key that is used to protect the
                *             job.</p>
                */
            EncryptionKeyArn?: string;
            /**
                * <p>The encryption mode for the job, which can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon
                *                     S3.</p>
                *             </li>
                *          </ul>
                */
            EncryptionMode?: EncryptionMode | string;
            /**
                * <p>The name of the job.</p>
                */
            Name: string | undefined;
            /**
                * <p>The job type, which must be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>PROFILE</code> - The job analyzes the dataset to determine its size,
                *                     data types, data distribution, and more.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>RECIPE</code> - The job applies one or more transformations to a
                *                     dataset.</p>
                *             </li>
                *          </ul>
                */
            Type?: JobType | string;
            /**
                * <p>The identifier (user name) of the user who last modified the job.</p>
                */
            LastModifiedBy?: string;
            /**
                * <p>The date and time that the job was last modified.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>Indicates whether Amazon CloudWatch logging is enabled for this job.</p>
                */
            LogSubscription?: LogSubscription | string;
            /**
                * <p>The maximum number of compute nodes that DataBrew can consume when the job processes
                *             data.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>The maximum number of times to retry the job after a job run fails.</p>
                */
            MaxRetries?: number;
            /**
                * <p>One or more artifacts that represent the output from running the job.</p>
                */
            Outputs?: Output[];
            /**
                * <p>One or more artifacts that represent the Glue Data Catalog output from running the job.</p>
                */
            DataCatalogOutputs?: DataCatalogOutput[];
            /**
                * <p>Represents a list of JDBC database output objects which defines the output
                *             destination for a DataBrew recipe job to write into.</p>
                */
            DatabaseOutputs?: DatabaseOutput[];
            /**
                * <p>The DataBrew project associated with this job.</p>
                */
            ProjectName?: string;
            /**
                * <p>Configuration for profile jobs. Used to select columns, do evaluations,
                *             and override default parameters of evaluations. When configuration is null, the
                *             profile job will run with default settings.</p>
                */
            ProfileConfiguration?: ProfileConfiguration;
            /**
                * <p>List of validation configurations that are applied to the profile job.</p>
                */
            ValidationConfigurations?: ValidationConfiguration[];
            /**
                * <p>Represents the name and version of a DataBrew recipe.</p>
                */
            RecipeReference?: RecipeReference;
            /**
                * <p>The Amazon Resource Name (ARN) of the job.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The ARN of the Identity and Access Management (IAM) role to be assumed when
                *             DataBrew runs the job.</p>
                */
            RoleArn?: string;
            /**
                * <p>Metadata tags associated with this job.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The job's timeout in minutes. A job that attempts to run longer than this timeout
                *             period ends with a status of <code>TIMEOUT</code>.</p>
                */
            Timeout?: number;
            /**
                * <p>Sample configuration for profile jobs only. Determines the number of rows on which the
                *             profile job will be executed.</p>
                */
            JobSample?: JobSample;
    }
    export namespace DescribeJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJobResponse) => any;
    }
    export interface DescribeJobRunRequest {
            /**
                * <p>The name of the job being processed during this run.</p>
                */
            Name: string | undefined;
            /**
                * <p>The unique identifier of the job run.</p>
                */
            RunId: string | undefined;
    }
    export namespace DescribeJobRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJobRunRequest) => any;
    }
    export enum JobRunState {
            FAILED = "FAILED",
            RUNNING = "RUNNING",
            STARTING = "STARTING",
            STOPPED = "STOPPED",
            STOPPING = "STOPPING",
            SUCCEEDED = "SUCCEEDED",
            TIMEOUT = "TIMEOUT"
    }
    export interface DescribeJobRunResponse {
            /**
                * <p>The number of times that DataBrew has attempted to run the job.</p>
                */
            Attempt?: number;
            /**
                * <p>The date and time when the job completed processing.</p>
                */
            CompletedOn?: Date;
            /**
                * <p>The name of the dataset for the job to process.</p>
                */
            DatasetName?: string;
            /**
                * <p>A message indicating an error (if any) that was encountered when the job ran.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The amount of time, in seconds, during which the job run consumed resources.</p>
                */
            ExecutionTime?: number;
            /**
                * <p>The name of the job being processed during this run.</p>
                */
            JobName: string | undefined;
            /**
                * <p>Configuration for profile jobs. Used to select columns, do evaluations,
                *             and override default parameters of evaluations. When configuration is null, the
                *             profile job will run with default settings.</p>
                */
            ProfileConfiguration?: ProfileConfiguration;
            /**
                * <p>List of validation configurations that are applied to the profile job.</p>
                */
            ValidationConfigurations?: ValidationConfiguration[];
            /**
                * <p>The unique identifier of the job run.</p>
                */
            RunId?: string;
            /**
                * <p>The current state of the job run entity itself.</p>
                */
            State?: JobRunState | string;
            /**
                * <p>The current status of Amazon CloudWatch logging for the job run.</p>
                */
            LogSubscription?: LogSubscription | string;
            /**
                * <p>The name of an Amazon CloudWatch log group, where the job writes diagnostic messages
                *             when it runs.</p>
                */
            LogGroupName?: string;
            /**
                * <p>One or more output artifacts from a job run.</p>
                */
            Outputs?: Output[];
            /**
                * <p>One or more artifacts that represent the Glue Data Catalog output from running the job.</p>
                */
            DataCatalogOutputs?: DataCatalogOutput[];
            /**
                * <p>Represents a list of JDBC database output objects which defines the output
                *             destination for a DataBrew recipe job to write into.</p>
                */
            DatabaseOutputs?: DatabaseOutput[];
            /**
                * <p>Represents the name and version of a DataBrew recipe.</p>
                */
            RecipeReference?: RecipeReference;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who started the job run.</p>
                */
            StartedBy?: string;
            /**
                * <p>The date and time when the job run began.</p>
                */
            StartedOn?: Date;
            /**
                * <p>Sample configuration for profile jobs only. Determines the number of rows on which the
                *             profile job will be executed. If a JobSample value is not provided, the default value
                *             will be used. The default value is CUSTOM_ROWS for the mode parameter and 20000 for the
                *             size parameter.</p>
                */
            JobSample?: JobSample;
    }
    export namespace DescribeJobRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeJobRunResponse) => any;
    }
    export interface DescribeProjectRequest {
            /**
                * <p>The name of the project to be described.</p>
                */
            Name: string | undefined;
    }
    export namespace DescribeProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProjectRequest) => any;
    }
    export enum SessionStatus {
            ASSIGNED = "ASSIGNED",
            FAILED = "FAILED",
            INITIALIZING = "INITIALIZING",
            PROVISIONING = "PROVISIONING",
            READY = "READY",
            RECYCLING = "RECYCLING",
            ROTATING = "ROTATING",
            TERMINATED = "TERMINATED",
            TERMINATING = "TERMINATING",
            UPDATING = "UPDATING"
    }
    export interface DescribeProjectResponse {
            /**
                * <p>The date and time that the project was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The identifier (user name) of the user who created the project.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The dataset associated with the project.</p>
                */
            DatasetName?: string;
            /**
                * <p>The date and time that the project was last modified.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The identifier (user name) of the user who last modified the project.</p>
                */
            LastModifiedBy?: string;
            /**
                * <p>The name of the project.</p>
                */
            Name: string | undefined;
            /**
                * <p>The recipe associated with this job.</p>
                */
            RecipeName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the project.</p>
                */
            ResourceArn?: string;
            /**
                * <p>Represents the sample size and sampling type for DataBrew to use for interactive data
                *             analysis.</p>
                */
            Sample?: Sample;
            /**
                * <p>The ARN of the Identity and Access Management (IAM) role to be assumed when
                *             DataBrew runs the job.</p>
                */
            RoleArn?: string;
            /**
                * <p>Metadata tags associated with this project.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>Describes the current state of the session:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>PROVISIONING</code> - allocating resources for the session.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>INITIALIZING</code> - getting the session ready for first use.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>ASSIGNED</code> - the session is ready for use.</p>
                *             </li>
                *          </ul>
                */
            SessionStatus?: SessionStatus | string;
            /**
                * <p>The identifier (user name) of the user that opened the project for use. </p>
                */
            OpenedBy?: string;
            /**
                * <p>The date and time when the project was opened. </p>
                */
            OpenDate?: Date;
    }
    export namespace DescribeProjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProjectResponse) => any;
    }
    export interface DescribeRecipeRequest {
            /**
                * <p>The name of the recipe to be described.</p>
                */
            Name: string | undefined;
            /**
                * <p>The recipe version identifier. If this parameter isn't specified, then the latest
                *             published version is returned.</p>
                */
            RecipeVersion?: string;
    }
    export namespace DescribeRecipeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRecipeRequest) => any;
    }
    export interface DescribeRecipeResponse {
            /**
                * <p>The identifier (user name) of the user who created the recipe.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The date and time that the recipe was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The identifier (user name) of the user who last modified the recipe.</p>
                */
            LastModifiedBy?: string;
            /**
                * <p>The date and time that the recipe was last modified.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The name of the project associated with this recipe.</p>
                */
            ProjectName?: string;
            /**
                * <p>The identifier (user name) of the user who last published the recipe.</p>
                */
            PublishedBy?: string;
            /**
                * <p>The date and time when the recipe was last published.</p>
                */
            PublishedDate?: Date;
            /**
                * <p>The description of the recipe.</p>
                */
            Description?: string;
            /**
                * <p>The name of the recipe.</p>
                */
            Name: string | undefined;
            /**
                * <p>One or more steps to be performed by the recipe. Each step consists of an action, and
                *             the conditions under which the action should succeed.</p>
                */
            Steps?: RecipeStep[];
            /**
                * <p>Metadata tags associated with this project.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The ARN of the recipe.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The recipe version identifier.</p>
                */
            RecipeVersion?: string;
    }
    export namespace DescribeRecipeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRecipeResponse) => any;
    }
    export interface DescribeRulesetRequest {
            /**
                * <p>The name of the ruleset to be described.</p>
                */
            Name: string | undefined;
    }
    export namespace DescribeRulesetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRulesetRequest) => any;
    }
    export interface DescribeRulesetResponse {
            /**
                * <p>The name of the ruleset.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description of the ruleset.</p>
                */
            Description?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of a resource (dataset) that the ruleset is
                *             associated with.</p>
                */
            TargetArn?: string;
            /**
                * <p>A list of rules that are defined with the ruleset. A rule includes one
                *             or more checks to be validated on a DataBrew dataset.</p>
                */
            Rules?: Rule[];
            /**
                * <p>The date and time that the ruleset was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who created the ruleset.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who last modified the ruleset.</p>
                */
            LastModifiedBy?: string;
            /**
                * <p>The modification date and time of the ruleset.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) for the ruleset.</p>
                */
            ResourceArn?: string;
            /**
                * <p>Metadata tags that have been applied to the ruleset.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace DescribeRulesetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRulesetResponse) => any;
    }
    export interface DescribeScheduleRequest {
            /**
                * <p>The name of the schedule to be described.</p>
                */
            Name: string | undefined;
    }
    export namespace DescribeScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeScheduleRequest) => any;
    }
    export interface DescribeScheduleResponse {
            /**
                * <p>The date and time that the schedule was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The identifier (user name) of the user who created the schedule. </p>
                */
            CreatedBy?: string;
            /**
                * <p>The name or names of one or more jobs to be run by using the schedule.</p>
                */
            JobNames?: string[];
            /**
                * <p>The identifier (user name) of the user who last modified the schedule.</p>
                */
            LastModifiedBy?: string;
            /**
                * <p>The date and time that the schedule was last modified.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the schedule.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The date or dates and time or times when the jobs are to be run for the schedule. For
                *             more information, see <a href="https://docs.aws.amazon.com/databrew/latest/dg/jobs.cron.html">Cron expressions</a> in the
                *             <i>Glue DataBrew Developer Guide</i>.</p>
                */
            CronExpression?: string;
            /**
                * <p>Metadata tags associated with this schedule.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The name of the schedule.</p>
                */
            Name: string | undefined;
    }
    export namespace DescribeScheduleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeScheduleResponse) => any;
    }
    export interface ListDatasetsRequest {
            /**
                * <p>The maximum number of results to return in this request. </p>
                */
            MaxResults?: number;
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListDatasetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDatasetsRequest) => any;
    }
    /**
        * <p>Represents a dataset that can be processed by DataBrew.</p>
        */
    export interface Dataset {
            /**
                * <p>The ID of the Amazon Web Services account that owns the dataset.</p>
                */
            AccountId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who created the dataset.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The date and time that the dataset was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The unique name of the dataset.</p>
                */
            Name: string | undefined;
            /**
                * <p>The file format of a dataset that is created from an Amazon S3 file or folder.</p>
                */
            Format?: InputFormat | string;
            /**
                * <p>A set of options that define how DataBrew interprets the data in the dataset.</p>
                */
            FormatOptions?: FormatOptions;
            /**
                * <p>Information on how DataBrew can find the dataset, in either the Glue Data Catalog
                *             or Amazon S3.</p>
                */
            Input: Input | undefined;
            /**
                * <p>The last modification date and time of the dataset.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who last modified the dataset.</p>
                */
            LastModifiedBy?: string;
            /**
                * <p>The location of the data for the dataset, either Amazon S3 or the Glue Data Catalog.</p>
                */
            Source?: Source | string;
            /**
                * <p>A set of options that defines how DataBrew interprets an Amazon S3
                *             path of the dataset.</p>
                */
            PathOptions?: PathOptions;
            /**
                * <p>Metadata tags that have been applied to the dataset.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The unique Amazon Resource Name (ARN) for the dataset.</p>
                */
            ResourceArn?: string;
    }
    export namespace Dataset {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Dataset) => any;
    }
    export interface ListDatasetsResponse {
            /**
                * <p>A list of datasets that are defined.</p>
                */
            Datasets: Dataset[] | undefined;
            /**
                * <p>A token that you can use in a subsequent call to retrieve the next set of
                *             results.</p>
                */
            NextToken?: string;
    }
    export namespace ListDatasetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDatasetsResponse) => any;
    }
    export interface ListJobRunsRequest {
            /**
                * <p>The name of the job.</p>
                */
            Name: string | undefined;
            /**
                * <p>The maximum number of results to return in this request. </p>
                */
            MaxResults?: number;
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListJobRunsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJobRunsRequest) => any;
    }
    /**
        * <p>Represents one run of a DataBrew job.</p>
        */
    export interface JobRun {
            /**
                * <p>The number of times that DataBrew has attempted to run the job.</p>
                */
            Attempt?: number;
            /**
                * <p>The date and time when the job completed processing.</p>
                */
            CompletedOn?: Date;
            /**
                * <p>The name of the dataset for the job to process.</p>
                */
            DatasetName?: string;
            /**
                * <p>A message indicating an error (if any) that was encountered when the job ran.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>The amount of time, in seconds, during which a job run consumed resources.</p>
                */
            ExecutionTime?: number;
            /**
                * <p>The name of the job being processed during this run.</p>
                */
            JobName?: string;
            /**
                * <p>The unique identifier of the job run.</p>
                */
            RunId?: string;
            /**
                * <p>The current state of the job run entity itself.</p>
                */
            State?: JobRunState | string;
            /**
                * <p>The current status of Amazon CloudWatch logging for the job run.</p>
                */
            LogSubscription?: LogSubscription | string;
            /**
                * <p>The name of an Amazon CloudWatch log group, where the job writes diagnostic messages
                *             when it runs.</p>
                */
            LogGroupName?: string;
            /**
                * <p>One or more output artifacts from a job run.</p>
                */
            Outputs?: Output[];
            /**
                * <p>One or more artifacts that represent the Glue Data Catalog output
                *             from running the job.</p>
                */
            DataCatalogOutputs?: DataCatalogOutput[];
            /**
                * <p>Represents a list of JDBC database output objects which defines the output
                *             destination for a DataBrew recipe job to write into.</p>
                */
            DatabaseOutputs?: DatabaseOutput[];
            /**
                * <p>The set of steps processed by the job.</p>
                */
            RecipeReference?: RecipeReference;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who initiated the job run. </p>
                */
            StartedBy?: string;
            /**
                * <p>The date and time when the job run began. </p>
                */
            StartedOn?: Date;
            /**
                * <p>A sample configuration for profile jobs only, which determines the number of rows on which the
                *             profile job is run. If a <code>JobSample</code> value isn't provided, the default
                *             is used. The default value is CUSTOM_ROWS for the mode parameter and 20,000 for the
                *             size parameter.</p>
                */
            JobSample?: JobSample;
            /**
                * <p>List of validation configurations that are applied to the profile job run.</p>
                */
            ValidationConfigurations?: ValidationConfiguration[];
    }
    export namespace JobRun {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JobRun) => any;
    }
    export interface ListJobRunsResponse {
            /**
                * <p>A list of job runs that have occurred for the specified job.</p>
                */
            JobRuns: JobRun[] | undefined;
            /**
                * <p>A token that you can use in a subsequent call to retrieve the next set of
                *             results.</p>
                */
            NextToken?: string;
    }
    export namespace ListJobRunsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJobRunsResponse) => any;
    }
    export interface ListJobsRequest {
            /**
                * <p>The name of a dataset. Using this parameter indicates to return only those jobs that
                *             act on the specified dataset.</p>
                */
            DatasetName?: string;
            /**
                * <p>The maximum number of results to return in this request. </p>
                */
            MaxResults?: number;
            /**
                * <p>A token generated by DataBrew that specifies where to continue pagination if a
                *             previous request was truncated. To get the next set of pages, pass in the NextToken
                *             value from the response object of the previous page call. </p>
                */
            NextToken?: string;
            /**
                * <p>The name of a project. Using this parameter indicates to return only those jobs that
                *             are associated with the specified project.</p>
                */
            ProjectName?: string;
    }
    export namespace ListJobsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJobsRequest) => any;
    }
    /**
        * <p>Represents all of the attributes of a DataBrew job.</p>
        */
    export interface Job {
            /**
                * <p>The ID of the Amazon Web Services account that owns the job.</p>
                */
            AccountId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who created the job.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The date and time that the job was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>A dataset that the job is to process.</p>
                */
            DatasetName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of an encryption key that is used to protect the job
                *             output. For more information, see <a href="https://docs.aws.amazon.com/databrew/latest/dg/encryption-security-configuration.html">Encrypting data
                *                 written by DataBrew jobs</a>
                *          </p>
                */
            EncryptionKeyArn?: string;
            /**
                * <p>The encryption mode for the job, which can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p>
                *             </li>
                *          </ul>
                */
            EncryptionMode?: EncryptionMode | string;
            /**
                * <p>The unique name of the job.</p>
                */
            Name: string | undefined;
            /**
                * <p>The job type of the job, which must be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>PROFILE</code> - A job to analyze a dataset, to determine its size, data
                *                     types, data distribution, and more.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>RECIPE</code> - A job to apply one or more transformations to a
                *                     dataset.</p>
                *             </li>
                *          </ul>
                */
            Type?: JobType | string;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who last modified the job.</p>
                */
            LastModifiedBy?: string;
            /**
                * <p>The modification date and time of the job.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The current status of Amazon CloudWatch logging for the job.</p>
                */
            LogSubscription?: LogSubscription | string;
            /**
                * <p>The maximum number of nodes that can be consumed when the job processes data.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>The maximum number of times to retry the job after a job run fails.</p>
                */
            MaxRetries?: number;
            /**
                * <p>One or more artifacts that represent output from running the job.</p>
                */
            Outputs?: Output[];
            /**
                * <p>One or more artifacts that represent the Glue Data Catalog output
                *             from running the job.</p>
                */
            DataCatalogOutputs?: DataCatalogOutput[];
            /**
                * <p>Represents a list of JDBC database output objects which defines the output
                *             destination for a DataBrew recipe job to write into.</p>
                */
            DatabaseOutputs?: DatabaseOutput[];
            /**
                * <p>The name of the project that the job is associated with.</p>
                */
            ProjectName?: string;
            /**
                * <p>A set of steps that the job runs.</p>
                */
            RecipeReference?: RecipeReference;
            /**
                * <p>The unique Amazon Resource Name (ARN) for the job.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the role to be assumed for this job.</p>
                */
            RoleArn?: string;
            /**
                * <p>The job's timeout in minutes. A job that attempts to run longer than this timeout
                *             period ends with a status of <code>TIMEOUT</code>.</p>
                */
            Timeout?: number;
            /**
                * <p>Metadata tags that have been applied to the job.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A sample configuration for profile jobs only, which determines the number of rows on which the
                *             profile job is run. If a <code>JobSample</code> value isn't provided, the default value
                *             is used. The default value is CUSTOM_ROWS for the mode parameter and 20,000 for the
                *             size parameter.</p>
                */
            JobSample?: JobSample;
            /**
                * <p>List of validation configurations that are applied to the profile job.</p>
                */
            ValidationConfigurations?: ValidationConfiguration[];
    }
    export namespace Job {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Job) => any;
    }
    export interface ListJobsResponse {
            /**
                * <p>A list of jobs that are defined.</p>
                */
            Jobs: Job[] | undefined;
            /**
                * <p>A token that you can use in a subsequent call to retrieve the next set of
                *             results.</p>
                */
            NextToken?: string;
    }
    export namespace ListJobsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListJobsResponse) => any;
    }
    export interface ListProjectsRequest {
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of results to return in this request. </p>
                */
            MaxResults?: number;
    }
    export namespace ListProjectsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProjectsRequest) => any;
    }
    /**
        * <p>Represents all of the attributes of a DataBrew project.</p>
        */
    export interface Project {
            /**
                * <p>The ID of the Amazon Web Services account that owns the project.</p>
                */
            AccountId?: string;
            /**
                * <p>The date and time that the project was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who crated the project.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The dataset that the project is to act upon.</p>
                */
            DatasetName?: string;
            /**
                * <p>The last modification date and time for the project.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who last modified the project.</p>
                */
            LastModifiedBy?: string;
            /**
                * <p>The unique name of a project.</p>
                */
            Name: string | undefined;
            /**
                * <p>The name of a recipe that will be developed during a project session.</p>
                */
            RecipeName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the project.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The sample size and sampling type to apply to the data. If this parameter isn't
                *             specified, then the sample consists of the first 500 rows from the dataset.</p>
                */
            Sample?: Sample;
            /**
                * <p>Metadata tags that have been applied to the project.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The Amazon Resource Name (ARN) of the role that will be assumed for this
                *             project.</p>
                */
            RoleArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the user that opened the project for use.</p>
                */
            OpenedBy?: string;
            /**
                * <p>The date and time when the project was opened.</p>
                */
            OpenDate?: Date;
    }
    export namespace Project {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Project) => any;
    }
    export interface ListProjectsResponse {
            /**
                * <p>A list of projects that are defined .</p>
                */
            Projects: Project[] | undefined;
            /**
                * <p>A token that you can use in a subsequent call to retrieve the next set of
                *             results.</p>
                */
            NextToken?: string;
    }
    export namespace ListProjectsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProjectsResponse) => any;
    }
    export interface ListRecipesRequest {
            /**
                * <p>The maximum number of results to return in this request. </p>
                */
            MaxResults?: number;
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>Return only those recipes with a version identifier of <code>LATEST_WORKING</code> or
                *                 <code>LATEST_PUBLISHED</code>. If <code>RecipeVersion</code> is omitted,
                *                 <code>ListRecipes</code> returns all of the <code>LATEST_PUBLISHED</code> recipe
                *             versions.</p>
                *         <p>Valid values: <code>LATEST_WORKING</code> | <code>LATEST_PUBLISHED</code>
                *          </p>
                */
            RecipeVersion?: string;
    }
    export namespace ListRecipesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRecipesRequest) => any;
    }
    /**
        * <p>Represents one or more actions to be performed on a DataBrew dataset.</p>
        */
    export interface Recipe {
            /**
                * <p>The Amazon Resource Name (ARN) of the user who created the recipe.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The date and time that the recipe was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who last modified the recipe.</p>
                */
            LastModifiedBy?: string;
            /**
                * <p>The last modification date and time of the recipe.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The name of the project that the recipe is associated with.</p>
                */
            ProjectName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who published the recipe.</p>
                */
            PublishedBy?: string;
            /**
                * <p>The date and time when the recipe was published.</p>
                */
            PublishedDate?: Date;
            /**
                * <p>The description of the recipe.</p>
                */
            Description?: string;
            /**
                * <p>The unique name for the recipe.</p>
                */
            Name: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the recipe.</p>
                */
            ResourceArn?: string;
            /**
                * <p>A list of steps that are defined by the recipe.</p>
                */
            Steps?: RecipeStep[];
            /**
                * <p>Metadata tags that have been applied to the recipe.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The identifier for the version for the recipe. Must be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>Numeric version (<code>X.Y</code>) - <code>X</code> and <code>Y</code> stand
                *                     for major and minor version numbers. The maximum length of each is 6 digits, and
                *                     neither can be negative values. Both <code>X</code> and <code>Y</code> are
                *                     required, and "0.0" isn't a valid version.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>LATEST_WORKING</code> - the most recent valid version being developed in
                *                     a DataBrew project.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>LATEST_PUBLISHED</code> - the most recent published version.</p>
                *             </li>
                *          </ul>
                */
            RecipeVersion?: string;
    }
    export namespace Recipe {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Recipe) => any;
    }
    export interface ListRecipesResponse {
            /**
                * <p>A list of recipes that are defined.</p>
                */
            Recipes: Recipe[] | undefined;
            /**
                * <p>A token that you can use in a subsequent call to retrieve the next set of
                *             results.</p>
                */
            NextToken?: string;
    }
    export namespace ListRecipesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRecipesResponse) => any;
    }
    export interface ListRecipeVersionsRequest {
            /**
                * <p>The maximum number of results to return in this request. </p>
                */
            MaxResults?: number;
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The name of the recipe for which to return version information.</p>
                */
            Name: string | undefined;
    }
    export namespace ListRecipeVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRecipeVersionsRequest) => any;
    }
    export interface ListRecipeVersionsResponse {
            /**
                * <p>A token that you can use in a subsequent call to retrieve the next set of
                *             results.</p>
                */
            NextToken?: string;
            /**
                * <p>A list of versions for the specified recipe.</p>
                */
            Recipes: Recipe[] | undefined;
    }
    export namespace ListRecipeVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRecipeVersionsResponse) => any;
    }
    export interface ListRulesetsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of a resource (dataset). Using this parameter
                *             indicates to return only those rulesets that are associated with the specified resource.</p>
                */
            TargetArn?: string;
            /**
                * <p>The maximum number of results to return in this request.</p>
                */
            MaxResults?: number;
            /**
                * <p>A token generated by DataBrew that specifies where to continue pagination
                *             if a previous request was truncated. To get the next set of pages, pass in
                *             the NextToken value from the response object of the previous page call.</p>
                */
            NextToken?: string;
    }
    export namespace ListRulesetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRulesetsRequest) => any;
    }
    /**
        * <p>Contains metadata about the ruleset.</p>
        */
    export interface RulesetItem {
            /**
                * <p>The ID of the Amazon Web Services account that owns the ruleset.</p>
                */
            AccountId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who created the ruleset.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The date and time that the ruleset was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The description of the ruleset.</p>
                */
            Description?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who last modified the ruleset.</p>
                */
            LastModifiedBy?: string;
            /**
                * <p>The modification date and time of the ruleset.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The name of the ruleset.</p>
                */
            Name: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) for the ruleset.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The number of rules that are defined in the ruleset.</p>
                */
            RuleCount?: number;
            /**
                * <p>Metadata tags that have been applied to the ruleset.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The Amazon Resource Name (ARN) of a resource (dataset) that the ruleset is
                *             associated with.</p>
                */
            TargetArn: string | undefined;
    }
    export namespace RulesetItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RulesetItem) => any;
    }
    export interface ListRulesetsResponse {
            /**
                * <p>A list of RulesetItem. RulesetItem contains meta data of a ruleset.</p>
                */
            Rulesets: RulesetItem[] | undefined;
            /**
                * <p>A token that you can use in a subsequent call to retrieve the next set of
                *             results.</p>
                */
            NextToken?: string;
    }
    export namespace ListRulesetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRulesetsResponse) => any;
    }
    export interface ListSchedulesRequest {
            /**
                * <p>The name of the job that these schedules apply to.</p>
                */
            JobName?: string;
            /**
                * <p>The maximum number of results to return in this request. </p>
                */
            MaxResults?: number;
            /**
                * <p>The token returned by a previous call to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListSchedulesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSchedulesRequest) => any;
    }
    /**
        * <p>Represents one or more dates and times when a job is to run.</p>
        */
    export interface Schedule {
            /**
                * <p>The ID of the Amazon Web Services account that owns the schedule.</p>
                */
            AccountId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the user who created the schedule.</p>
                */
            CreatedBy?: string;
            /**
                * <p>The date and time that the schedule was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>A list of jobs to be run, according to the schedule.</p>
                */
            JobNames?: string[];
            /**
                * <p>The Amazon Resource Name (ARN) of the user who last modified the schedule.</p>
                */
            LastModifiedBy?: string;
            /**
                * <p>The date and time when the schedule was last modified.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of the schedule.</p>
                */
            ResourceArn?: string;
            /**
                * <p>The dates and times when the job is to run. For more information, see <a href="https://docs.aws.amazon.com/databrew/latest/dg/jobs.cron.html">Cron
                *             expressions</a> in the <i>Glue DataBrew Developer
                *             Guide</i>.</p>
                */
            CronExpression?: string;
            /**
                * <p>Metadata tags that have been applied to the schedule.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The name of the schedule.</p>
                */
            Name: string | undefined;
    }
    export namespace Schedule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Schedule) => any;
    }
    export interface ListSchedulesResponse {
            /**
                * <p>A list of schedules that are defined.</p>
                */
            Schedules: Schedule[] | undefined;
            /**
                * <p>A token that you can use in a subsequent call to retrieve the next set of
                *             results.</p>
                */
            NextToken?: string;
    }
    export namespace ListSchedulesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSchedulesResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) string that uniquely identifies the DataBrew resource.
                *         </p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>A list of tags associated with the DataBrew resource.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface PublishRecipeRequest {
            /**
                * <p>A description of the recipe to be published, for this version of the recipe.</p>
                */
            Description?: string;
            /**
                * <p>The name of the recipe to be published.</p>
                */
            Name: string | undefined;
    }
    export namespace PublishRecipeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublishRecipeRequest) => any;
    }
    export interface PublishRecipeResponse {
            /**
                * <p>The name of the recipe that you published.</p>
                */
            Name: string | undefined;
    }
    export namespace PublishRecipeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublishRecipeResponse) => any;
    }
    /**
        * <p>Represents the data being transformed during an action.</p>
        */
    export interface ViewFrame {
            /**
                * <p>The starting index for the range of columns to return in the view frame.</p>
                */
            StartColumnIndex: number | undefined;
            /**
                * <p>The number of columns to include in the view frame, beginning with the
                *                 <code>StartColumnIndex</code> value and ignoring any columns in the
                *                 <code>HiddenColumns</code> list.</p>
                */
            ColumnRange?: number;
            /**
                * <p>A list of columns to hide in the view frame.</p>
                */
            HiddenColumns?: string[];
            /**
                * <p>The starting index for the range of rows to return in the view frame.</p>
                */
            StartRowIndex?: number;
            /**
                * <p>The number of rows to include in the view frame, beginning with the
                *             <code>StartRowIndex</code> value.</p>
                */
            RowRange?: number;
            /**
                * <p>Controls if analytics computation is enabled or disabled. Enabled by default.</p>
                */
            Analytics?: AnalyticsMode | string;
    }
    export namespace ViewFrame {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ViewFrame) => any;
    }
    export interface SendProjectSessionActionRequest {
            /**
                * <p>If true, the result of the recipe step will be returned, but not applied.</p>
                */
            Preview?: boolean;
            /**
                * <p>The name of the project to apply the action to.</p>
                */
            Name: string | undefined;
            /**
                * <p>Represents a single step from a DataBrew recipe to be performed.</p>
                */
            RecipeStep?: RecipeStep;
            /**
                * <p>The index from which to preview a step. This index is used to preview the result of
                *             steps that have already been applied, so that the resulting view frame is from earlier
                *             in the view frame stack.</p>
                */
            StepIndex?: number;
            /**
                * <p>A unique identifier for an interactive session that's currently open and ready for
                *             work. The action will be performed on this session.</p>
                */
            ClientSessionId?: string;
            /**
                * <p>Represents the data being transformed during an action.</p>
                */
            ViewFrame?: ViewFrame;
    }
    export namespace SendProjectSessionActionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendProjectSessionActionRequest) => any;
    }
    export interface SendProjectSessionActionResponse {
            /**
                * <p>A message indicating the result of performing the action.</p>
                */
            Result?: string;
            /**
                * <p>The name of the project that was affected by the action.</p>
                */
            Name: string | undefined;
            /**
                * <p>A unique identifier for the action that was performed.</p>
                */
            ActionId?: number;
    }
    export namespace SendProjectSessionActionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendProjectSessionActionResponse) => any;
    }
    export interface StartJobRunRequest {
            /**
                * <p>The name of the job to be run.</p>
                */
            Name: string | undefined;
    }
    export namespace StartJobRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartJobRunRequest) => any;
    }
    export interface StartJobRunResponse {
            /**
                * <p>A system-generated identifier for this particular job run.</p>
                */
            RunId: string | undefined;
    }
    export namespace StartJobRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartJobRunResponse) => any;
    }
    export interface StartProjectSessionRequest {
            /**
                * <p>The name of the project to act upon.</p>
                */
            Name: string | undefined;
            /**
                * <p>A value that, if true, enables you to take control of a session, even if a different
                *             client is currently accessing the project.</p>
                */
            AssumeControl?: boolean;
    }
    export namespace StartProjectSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartProjectSessionRequest) => any;
    }
    export interface StartProjectSessionResponse {
            /**
                * <p>The name of the project to be acted upon.</p>
                */
            Name: string | undefined;
            /**
                * <p>A system-generated identifier for the session.</p>
                */
            ClientSessionId?: string;
    }
    export namespace StartProjectSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartProjectSessionResponse) => any;
    }
    export interface StopJobRunRequest {
            /**
                * <p>The name of the job to be stopped.</p>
                */
            Name: string | undefined;
            /**
                * <p>The ID of the job run to be stopped.</p>
                */
            RunId: string | undefined;
    }
    export namespace StopJobRunRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopJobRunRequest) => any;
    }
    export interface StopJobRunResponse {
            /**
                * <p>The ID of the job run that you stopped.</p>
                */
            RunId: string | undefined;
    }
    export namespace StopJobRunResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopJobRunResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The DataBrew resource to which tags should be added. The value for this parameter is
                *             an Amazon Resource Name (ARN). For DataBrew, you can tag a dataset, a job, a project, or
                *             a recipe.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>One or more tags to be assigned to the resource.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>A DataBrew resource from which you want to remove a tag or tags. The value for this
                *             parameter is an Amazon Resource Name (ARN). </p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The tag keys (names) of one or more tags to be removed.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateDatasetRequest {
            /**
                * <p>The name of the dataset to be updated.</p>
                */
            Name: string | undefined;
            /**
                * <p>The file format of a dataset that is created from an Amazon S3 file or folder.</p>
                */
            Format?: InputFormat | string;
            /**
                * <p>Represents a set of options that define the structure of either comma-separated value (CSV),
                *             Excel, or JSON input.</p>
                */
            FormatOptions?: FormatOptions;
            /**
                * <p>Represents information on how DataBrew can find data, in either the Glue Data Catalog or
                *             Amazon S3.</p>
                */
            Input: Input | undefined;
            /**
                * <p>A set of options that defines how DataBrew interprets an Amazon S3 path of the dataset.</p>
                */
            PathOptions?: PathOptions;
    }
    export namespace UpdateDatasetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDatasetRequest) => any;
    }
    export interface UpdateDatasetResponse {
            /**
                * <p>The name of the dataset that you updated.</p>
                */
            Name: string | undefined;
    }
    export namespace UpdateDatasetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDatasetResponse) => any;
    }
    export interface UpdateProfileJobRequest {
            /**
                * <p>Configuration for profile jobs. Used to select columns, do evaluations,
                *             and override default parameters of evaluations. When configuration is null, the
                *             profile job will run with default settings.</p>
                */
            Configuration?: ProfileConfiguration;
            /**
                * <p>The Amazon Resource Name (ARN) of an encryption key that is used to protect the
                *             job.</p>
                */
            EncryptionKeyArn?: string;
            /**
                * <p>The encryption mode for the job, which can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon
                *                     S3.</p>
                *             </li>
                *          </ul>
                */
            EncryptionMode?: EncryptionMode | string;
            /**
                * <p>The name of the job to be updated.</p>
                */
            Name: string | undefined;
            /**
                * <p>Enables or disables Amazon CloudWatch logging for the job. If logging is enabled,
                *             CloudWatch writes one log stream for each job run.</p>
                */
            LogSubscription?: LogSubscription | string;
            /**
                * <p>The maximum number of compute nodes that DataBrew can use when the job processes
                *             data.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>The maximum number of times to retry the job after a job run fails.</p>
                */
            MaxRetries?: number;
            /**
                * <p>Represents an Amazon S3 location (bucket name, bucket owner, and object key) where DataBrew can read
                *             input data, or write output from a job.</p>
                */
            OutputLocation: S3Location | undefined;
            /**
                * <p>List of validation configurations that are applied to the profile job.</p>
                */
            ValidationConfigurations?: ValidationConfiguration[];
            /**
                * <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to
                *             be assumed when DataBrew runs the job.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The job's timeout in minutes. A job that attempts to run longer than this timeout
                *             period ends with a status of <code>TIMEOUT</code>.</p>
                */
            Timeout?: number;
            /**
                * <p>Sample configuration for Profile Jobs only. Determines the number of rows on which the
                *             Profile job will be executed. If a JobSample value is not provided for profile jobs, the
                *             default value will be used. The default value is CUSTOM_ROWS for the mode parameter and
                *             20000 for the size parameter.</p>
                */
            JobSample?: JobSample;
    }
    export namespace UpdateProfileJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProfileJobRequest) => any;
    }
    export interface UpdateProfileJobResponse {
            /**
                * <p>The name of the job that was updated.</p>
                */
            Name: string | undefined;
    }
    export namespace UpdateProfileJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProfileJobResponse) => any;
    }
    export interface UpdateProjectRequest {
            /**
                * <p>Represents the sample size and sampling type for DataBrew to use for interactive data
                *             analysis.</p>
                */
            Sample?: Sample;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM role to be assumed for this request.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The name of the project to be updated.</p>
                */
            Name: string | undefined;
    }
    export namespace UpdateProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProjectRequest) => any;
    }
    export interface UpdateProjectResponse {
            /**
                * <p>The date and time that the project was last modified.</p>
                */
            LastModifiedDate?: Date;
            /**
                * <p>The name of the project that you updated.</p>
                */
            Name: string | undefined;
    }
    export namespace UpdateProjectResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProjectResponse) => any;
    }
    export interface UpdateRecipeRequest {
            /**
                * <p>A description of the recipe.</p>
                */
            Description?: string;
            /**
                * <p>The name of the recipe to be updated.</p>
                */
            Name: string | undefined;
            /**
                * <p>One or more steps to be performed by the recipe. Each step consists of an action, and
                *             the conditions under which the action should succeed.</p>
                */
            Steps?: RecipeStep[];
    }
    export namespace UpdateRecipeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRecipeRequest) => any;
    }
    export interface UpdateRecipeResponse {
            /**
                * <p>The name of the recipe that was updated.</p>
                */
            Name: string | undefined;
    }
    export namespace UpdateRecipeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRecipeResponse) => any;
    }
    export interface UpdateRecipeJobRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of an encryption key that is used to protect the
                *             job.</p>
                */
            EncryptionKeyArn?: string;
            /**
                * <p>The encryption mode for the job, which can be one of the following:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <code>SSE-KMS</code> - Server-side encryption with keys managed by KMS.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <code>SSE-S3</code> - Server-side encryption with keys managed by Amazon S3.</p>
                *             </li>
                *          </ul>
                */
            EncryptionMode?: EncryptionMode | string;
            /**
                * <p>The name of the job to update.</p>
                */
            Name: string | undefined;
            /**
                * <p>Enables or disables Amazon CloudWatch logging for the job. If logging is enabled,
                *             CloudWatch writes one log stream for each job run.</p>
                */
            LogSubscription?: LogSubscription | string;
            /**
                * <p>The maximum number of nodes that DataBrew can consume when the job processes
                *             data.</p>
                */
            MaxCapacity?: number;
            /**
                * <p>The maximum number of times to retry the job after a job run fails.</p>
                */
            MaxRetries?: number;
            /**
                * <p>One or more artifacts that represent the output from running the job. </p>
                */
            Outputs?: Output[];
            /**
                * <p>One or more artifacts that represent the Glue Data Catalog output from running the job.</p>
                */
            DataCatalogOutputs?: DataCatalogOutput[];
            /**
                * <p>Represents a list of JDBC database output objects which defines the output destination for a
                *             DataBrew recipe job to write into.</p>
                */
            DatabaseOutputs?: DatabaseOutput[];
            /**
                * <p>The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role to
                *             be assumed when DataBrew runs the job.</p>
                */
            RoleArn: string | undefined;
            /**
                * <p>The job's timeout in minutes. A job that attempts to run longer than this timeout
                *             period ends with a status of <code>TIMEOUT</code>.</p>
                */
            Timeout?: number;
    }
    export namespace UpdateRecipeJobRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRecipeJobRequest) => any;
    }
    export interface UpdateRecipeJobResponse {
            /**
                * <p>The name of the job that you updated.</p>
                */
            Name: string | undefined;
    }
    export namespace UpdateRecipeJobResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRecipeJobResponse) => any;
    }
    export interface UpdateRulesetRequest {
            /**
                * <p>The name of the ruleset to be updated.</p>
                */
            Name: string | undefined;
            /**
                * <p>The description of the ruleset.</p>
                */
            Description?: string;
            /**
                * <p>A list of rules that are defined with the ruleset. A rule includes one or more
                *             checks to be validated on a DataBrew dataset.</p>
                */
            Rules: Rule[] | undefined;
    }
    export namespace UpdateRulesetRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRulesetRequest) => any;
    }
    export interface UpdateRulesetResponse {
            /**
                * <p>The name of the updated ruleset.</p>
                */
            Name: string | undefined;
    }
    export namespace UpdateRulesetResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRulesetResponse) => any;
    }
    export interface UpdateScheduleRequest {
            /**
                * <p>The name or names of one or more jobs to be run for this schedule.</p>
                */
            JobNames?: string[];
            /**
                * <p>The date or dates and time or times when the jobs are to be run. For more information,
                *             see <a href="https://docs.aws.amazon.com/databrew/latest/dg/jobs.cron.html">Cron
                *                 expressions</a> in the <i>Glue DataBrew Developer
                *             Guide</i>.</p>
                */
            CronExpression: string | undefined;
            /**
                * <p>The name of the schedule to update.</p>
                */
            Name: string | undefined;
    }
    export namespace UpdateScheduleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateScheduleRequest) => any;
    }
    export interface UpdateScheduleResponse {
            /**
                * <p>The name of the schedule that was updated.</p>
                */
            Name: string | undefined;
    }
    export namespace UpdateScheduleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateScheduleResponse) => any;
    }
}

declare module '@aws-sdk/client-databrew/node_modules/@aws-sdk/client-databrew/dist-types/models/DataBrewServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from DataBrew service.
        */
    export class DataBrewServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

