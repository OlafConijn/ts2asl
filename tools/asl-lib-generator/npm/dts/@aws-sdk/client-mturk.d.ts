// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-mturk' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AcceptQualificationRequestCommandInput, AcceptQualificationRequestCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/AcceptQualificationRequestCommand";
    import { ApproveAssignmentCommandInput, ApproveAssignmentCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ApproveAssignmentCommand";
    import { AssociateQualificationWithWorkerCommandInput, AssociateQualificationWithWorkerCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/AssociateQualificationWithWorkerCommand";
    import { CreateAdditionalAssignmentsForHITCommandInput, CreateAdditionalAssignmentsForHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateAdditionalAssignmentsForHITCommand";
    import { CreateHITCommandInput, CreateHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateHITCommand";
    import { CreateHITTypeCommandInput, CreateHITTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateHITTypeCommand";
    import { CreateHITWithHITTypeCommandInput, CreateHITWithHITTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateHITWithHITTypeCommand";
    import { CreateQualificationTypeCommandInput, CreateQualificationTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateQualificationTypeCommand";
    import { CreateWorkerBlockCommandInput, CreateWorkerBlockCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateWorkerBlockCommand";
    import { DeleteHITCommandInput, DeleteHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/DeleteHITCommand";
    import { DeleteQualificationTypeCommandInput, DeleteQualificationTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/DeleteQualificationTypeCommand";
    import { DeleteWorkerBlockCommandInput, DeleteWorkerBlockCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/DeleteWorkerBlockCommand";
    import { DisassociateQualificationFromWorkerCommandInput, DisassociateQualificationFromWorkerCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/DisassociateQualificationFromWorkerCommand";
    import { GetAccountBalanceCommandInput, GetAccountBalanceCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetAccountBalanceCommand";
    import { GetAssignmentCommandInput, GetAssignmentCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetAssignmentCommand";
    import { GetFileUploadURLCommandInput, GetFileUploadURLCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetFileUploadURLCommand";
    import { GetHITCommandInput, GetHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetHITCommand";
    import { GetQualificationScoreCommandInput, GetQualificationScoreCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetQualificationScoreCommand";
    import { GetQualificationTypeCommandInput, GetQualificationTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetQualificationTypeCommand";
    import { ListAssignmentsForHITCommandInput, ListAssignmentsForHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListAssignmentsForHITCommand";
    import { ListBonusPaymentsCommandInput, ListBonusPaymentsCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListBonusPaymentsCommand";
    import { ListHITsCommandInput, ListHITsCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListHITsCommand";
    import { ListHITsForQualificationTypeCommandInput, ListHITsForQualificationTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListHITsForQualificationTypeCommand";
    import { ListQualificationRequestsCommandInput, ListQualificationRequestsCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListQualificationRequestsCommand";
    import { ListQualificationTypesCommandInput, ListQualificationTypesCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListQualificationTypesCommand";
    import { ListReviewableHITsCommandInput, ListReviewableHITsCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListReviewableHITsCommand";
    import { ListReviewPolicyResultsForHITCommandInput, ListReviewPolicyResultsForHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListReviewPolicyResultsForHITCommand";
    import { ListWorkerBlocksCommandInput, ListWorkerBlocksCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListWorkerBlocksCommand";
    import { ListWorkersWithQualificationTypeCommandInput, ListWorkersWithQualificationTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListWorkersWithQualificationTypeCommand";
    import { NotifyWorkersCommandInput, NotifyWorkersCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/NotifyWorkersCommand";
    import { RejectAssignmentCommandInput, RejectAssignmentCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/RejectAssignmentCommand";
    import { RejectQualificationRequestCommandInput, RejectQualificationRequestCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/RejectQualificationRequestCommand";
    import { SendBonusCommandInput, SendBonusCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/SendBonusCommand";
    import { SendTestEventNotificationCommandInput, SendTestEventNotificationCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/SendTestEventNotificationCommand";
    import { UpdateExpirationForHITCommandInput, UpdateExpirationForHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateExpirationForHITCommand";
    import { UpdateHITReviewStatusCommandInput, UpdateHITReviewStatusCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateHITReviewStatusCommand";
    import { UpdateHITTypeOfHITCommandInput, UpdateHITTypeOfHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateHITTypeOfHITCommand";
    import { UpdateNotificationSettingsCommandInput, UpdateNotificationSettingsCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateNotificationSettingsCommand";
    import { UpdateQualificationTypeCommandInput, UpdateQualificationTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateQualificationTypeCommand";
    import { MTurkClient } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    /**
        * <fullname>Amazon Mechanical Turk API Reference</fullname>
        */
    export class MTurk extends MTurkClient {
            /**
                * <p>
                *             The <code>AcceptQualificationRequest</code> operation approves a Worker's request for a Qualification.
                *         </p>
                *         <p>
                *             Only the owner of the Qualification type can grant a Qualification request for that	type.
                *         </p>
                *         <p>
                *             A successful request for the <code>AcceptQualificationRequest</code> operation
                *             returns with no errors and an empty body.
                *         </p>
                */
            acceptQualificationRequest(args: AcceptQualificationRequestCommandInput, options?: __HttpHandlerOptions): Promise<AcceptQualificationRequestCommandOutput>;
            acceptQualificationRequest(args: AcceptQualificationRequestCommandInput, cb: (err: any, data?: AcceptQualificationRequestCommandOutput) => void): void;
            acceptQualificationRequest(args: AcceptQualificationRequestCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AcceptQualificationRequestCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>ApproveAssignment</code> operation approves the results of a completed assignment.
                *         </p>
                *         <p>
                *             Approving an assignment initiates two payments from the Requester's Amazon.com account
                *         </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     The Worker who submitted the results is paid the reward specified in the HIT.
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     Amazon Mechanical Turk fees are debited.
                *                 </p>
                *             </li>
                *          </ul>
                *         <p>
                *             If the Requester's account does not have adequate funds for these payments,
                *             the call to ApproveAssignment returns an exception, and the approval is not processed.
                *             You can include an optional feedback message with the approval,
                *             which the Worker can see in the Status section of the web site.
                *         </p>
                *         <p>
                *             You can also call this operation for assignments that were previous rejected
                *             and approve them by explicitly overriding the previous rejection.
                *             This only works on rejected assignments that were submitted within the previous 30 days
                *             and only if the assignment's related HIT has not been deleted.
                *         </p>
                */
            approveAssignment(args: ApproveAssignmentCommandInput, options?: __HttpHandlerOptions): Promise<ApproveAssignmentCommandOutput>;
            approveAssignment(args: ApproveAssignmentCommandInput, cb: (err: any, data?: ApproveAssignmentCommandOutput) => void): void;
            approveAssignment(args: ApproveAssignmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ApproveAssignmentCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>AssociateQualificationWithWorker</code> operation gives a Worker a
                *             Qualification. <code>AssociateQualificationWithWorker</code> does not require that the Worker
                *             submit a Qualification request. It gives the Qualification directly to the Worker.
                *         </p>
                *
                *         <p>
                *             You can only assign a Qualification of a Qualification type that you created (using
                *             the <code>CreateQualificationType</code> operation).
                *         </p>
                *
                *         <note>
                *             <p>
                *                 Note: <code>AssociateQualificationWithWorker</code> does not affect any pending Qualification
                *                 requests for the Qualification by the Worker. If you assign a Qualification to a
                *                 Worker, then later grant a Qualification request made by the Worker, the granting of
                *                 the request may modify the Qualification score. To resolve a pending Qualification
                *                 request without affecting the Qualification the Worker already has, reject the
                *                 request with the <code>RejectQualificationRequest</code> operation.
                *             </p>
                *         </note>
                */
            associateQualificationWithWorker(args: AssociateQualificationWithWorkerCommandInput, options?: __HttpHandlerOptions): Promise<AssociateQualificationWithWorkerCommandOutput>;
            associateQualificationWithWorker(args: AssociateQualificationWithWorkerCommandInput, cb: (err: any, data?: AssociateQualificationWithWorkerCommandOutput) => void): void;
            associateQualificationWithWorker(args: AssociateQualificationWithWorkerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateQualificationWithWorkerCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>CreateAdditionalAssignmentsForHIT</code>
                *             operation increases the maximum number of assignments of an existing HIT.
                *         </p>
                *         <p>
                *             To extend the maximum number of assignments, specify the number of additional assignments.</p>
                *         <note>
                *             <ul>
                *                <li>
                *                     <p>HITs created with fewer than 10 assignments cannot be extended to have 10 or more assignments. Attempting to add assignments in a way that brings the total number of assignments for a HIT from fewer than 10 assignments to 10 or more
                *                         assignments will result in an
                *                         <code>AWS.MechanicalTurk.InvalidMaximumAssignmentsIncrease</code>
                *                         exception.</p>
                *                 </li>
                *                <li>
                *                     <p>HITs that were created before July 22, 2015 cannot be extended. Attempting to extend HITs that were created before July 22, 2015 will result in an
                *                         <code>AWS.MechanicalTurk.HITTooOldForExtension</code>
                *                         exception.
                *                     </p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            createAdditionalAssignmentsForHIT(args: CreateAdditionalAssignmentsForHITCommandInput, options?: __HttpHandlerOptions): Promise<CreateAdditionalAssignmentsForHITCommandOutput>;
            createAdditionalAssignmentsForHIT(args: CreateAdditionalAssignmentsForHITCommandInput, cb: (err: any, data?: CreateAdditionalAssignmentsForHITCommandOutput) => void): void;
            createAdditionalAssignmentsForHIT(args: CreateAdditionalAssignmentsForHITCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAdditionalAssignmentsForHITCommandOutput) => void): void;
            /**
                * <p>The <code>CreateHIT</code> operation creates a new Human Intelligence Task (HIT).
                *             The new HIT is made available for Workers to find and accept on the Amazon Mechanical
                *             Turk website. </p>
                *         <p>
                *             This operation allows you to specify a new HIT by passing in values for the properties of the HIT, such as its title, reward amount and number of assignments. When you pass these values to <code>CreateHIT</code>, a new HIT is created for you, with a new <code>HITTypeID</code>. The HITTypeID can be used to create additional HITs in the future without needing to specify common parameters such as the title, description and reward amount each time.</p>
                *         <p> An alternative way to create HITs is to first generate a HITTypeID using the <code>CreateHITType</code> operation and then call the <code>CreateHITWithHITType</code> operation. This is the recommended best practice for Requesters who are creating large numbers of HITs.
                *         </p>
                *
                *         <p>CreateHIT also supports several ways to provide question data: by providing a value
                *             for the <code>Question</code> parameter that fully specifies the contents of the HIT, or by providing
                *             a <code>HitLayoutId</code> and associated <code>HitLayoutParameters</code>.
                *         </p>
                *
                *         <note>
                *             <p> If a HIT is created with 10 or more maximum assignments, there is an additional fee. For more information, see
                *             <a href="https://requester.mturk.com/pricing">Amazon Mechanical Turk Pricing</a>.</p>
                *         </note>
                */
            createHIT(args: CreateHITCommandInput, options?: __HttpHandlerOptions): Promise<CreateHITCommandOutput>;
            createHIT(args: CreateHITCommandInput, cb: (err: any, data?: CreateHITCommandOutput) => void): void;
            createHIT(args: CreateHITCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateHITCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>CreateHITType</code> operation creates a new HIT type. This operation
                *             allows you to define a standard set of HIT properties to use when creating HITs.
                *             If you register a HIT type with values that match an existing HIT type, the HIT type
                *             ID of the existing type will be returned.
                *         </p>
                */
            createHITType(args: CreateHITTypeCommandInput, options?: __HttpHandlerOptions): Promise<CreateHITTypeCommandOutput>;
            createHITType(args: CreateHITTypeCommandInput, cb: (err: any, data?: CreateHITTypeCommandOutput) => void): void;
            createHITType(args: CreateHITTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateHITTypeCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>CreateHITWithHITType</code> operation creates a new Human Intelligence Task (HIT)
                *             using an existing HITTypeID generated by the <code>CreateHITType</code> operation.
                *         </p>
                *         <p>
                *             This is an alternative way to create HITs from the <code>CreateHIT</code> operation.
                *             This is the recommended best practice for Requesters who are creating large numbers of HITs.
                *         </p>
                *         <p>CreateHITWithHITType also supports several ways to provide question data:
                *             by providing a value for the <code>Question</code> parameter that fully specifies the contents of the HIT,
                *             or by providing a <code>HitLayoutId</code> and associated <code>HitLayoutParameters</code>.
                *         </p>
                *         <note>
                *             <p>
                *                 If a HIT is created with 10 or more maximum assignments, there is an additional fee.
                *                 For more information, see <a href="https://requester.mturk.com/pricing">Amazon Mechanical Turk Pricing</a>.
                *             </p>
                *         </note>
                */
            createHITWithHITType(args: CreateHITWithHITTypeCommandInput, options?: __HttpHandlerOptions): Promise<CreateHITWithHITTypeCommandOutput>;
            createHITWithHITType(args: CreateHITWithHITTypeCommandInput, cb: (err: any, data?: CreateHITWithHITTypeCommandOutput) => void): void;
            createHITWithHITType(args: CreateHITWithHITTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateHITWithHITTypeCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>CreateQualificationType</code>
                *             operation creates a new Qualification type, which is represented by a
                *             <code>QualificationType</code>
                *             data structure.
                *         </p>
                */
            createQualificationType(args: CreateQualificationTypeCommandInput, options?: __HttpHandlerOptions): Promise<CreateQualificationTypeCommandOutput>;
            createQualificationType(args: CreateQualificationTypeCommandInput, cb: (err: any, data?: CreateQualificationTypeCommandOutput) => void): void;
            createQualificationType(args: CreateQualificationTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateQualificationTypeCommandOutput) => void): void;
            /**
                * <p>The <code>CreateWorkerBlock</code> operation allows you to prevent a Worker from working on your HITs. For example, you can block a Worker who is producing poor quality work. You can block up to 100,000 Workers.</p>
                */
            createWorkerBlock(args: CreateWorkerBlockCommandInput, options?: __HttpHandlerOptions): Promise<CreateWorkerBlockCommandOutput>;
            createWorkerBlock(args: CreateWorkerBlockCommandInput, cb: (err: any, data?: CreateWorkerBlockCommandOutput) => void): void;
            createWorkerBlock(args: CreateWorkerBlockCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateWorkerBlockCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>DeleteHIT</code> operation is used to delete HIT that is no longer needed.
                *             Only the Requester who created the HIT can delete it.
                *         </p>
                *         <p>
                *             You can only dispose of HITs that are in the <code>Reviewable</code> state,
                *             with all of their submitted assignments already either approved or rejected.
                *             If you call the DeleteHIT operation on a HIT that is not in the <code>Reviewable</code> state
                *             (for example, that has not expired, or still has active assignments),
                *             or on a HIT that is Reviewable but without all of its submitted assignments
                *             already approved or rejected, the service will return an error.
                *         </p>
                *         <note>
                *             <ul>
                *                <li>
                *                     <p>
                *                         HITs are automatically disposed of after 120 days.
                *                     </p>
                *                 </li>
                *                <li>
                *                     <p>
                *                         After you dispose of a HIT, you can no longer approve the HIT's rejected assignments.
                *                     </p>
                *                 </li>
                *                <li>
                *                     <p>
                *                         Disposed HITs are not returned in results for the ListHITs operation.
                *                     </p>
                *                 </li>
                *                <li>
                *                     <p>
                *                         Disposing HITs can improve the performance of operations such as ListReviewableHITs and ListHITs.
                *                     </p>
                *                 </li>
                *             </ul>
                *         </note>
                */
            deleteHIT(args: DeleteHITCommandInput, options?: __HttpHandlerOptions): Promise<DeleteHITCommandOutput>;
            deleteHIT(args: DeleteHITCommandInput, cb: (err: any, data?: DeleteHITCommandOutput) => void): void;
            deleteHIT(args: DeleteHITCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteHITCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>DeleteQualificationType</code>
                *             deletes a Qualification type and deletes any HIT types that are
                *             associated with the Qualification type.
                *         </p>
                *         <p>This operation does not revoke Qualifications already assigned
                *             to Workers because the Qualifications might be needed for active HITs.
                *             If there are any pending requests for the Qualification type, Amazon
                *             Mechanical Turk rejects those requests. After you delete a
                *             Qualification type, you can no longer use it to create HITs or HIT
                *             types.</p>
                *         <note>
                *             <p>DeleteQualificationType must wait for all the HITs that use
                *                 the deleted Qualification type to be deleted before completing. It
                *                 may take up to 48 hours before DeleteQualificationType completes and
                *                 the unique name of the Qualification type is available for reuse with
                *                 CreateQualificationType.</p>
                *         </note>
                */
            deleteQualificationType(args: DeleteQualificationTypeCommandInput, options?: __HttpHandlerOptions): Promise<DeleteQualificationTypeCommandOutput>;
            deleteQualificationType(args: DeleteQualificationTypeCommandInput, cb: (err: any, data?: DeleteQualificationTypeCommandOutput) => void): void;
            deleteQualificationType(args: DeleteQualificationTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteQualificationTypeCommandOutput) => void): void;
            /**
                * <p>The <code>DeleteWorkerBlock</code> operation allows you to reinstate a blocked Worker to work on your HITs. This operation reverses the effects of the CreateWorkerBlock operation. You need the Worker ID to use this operation. If the Worker ID is missing or invalid, this operation fails and returns the message “WorkerId is invalid.” If the specified Worker is not blocked, this operation returns successfully.</p>
                */
            deleteWorkerBlock(args: DeleteWorkerBlockCommandInput, options?: __HttpHandlerOptions): Promise<DeleteWorkerBlockCommandOutput>;
            deleteWorkerBlock(args: DeleteWorkerBlockCommandInput, cb: (err: any, data?: DeleteWorkerBlockCommandOutput) => void): void;
            deleteWorkerBlock(args: DeleteWorkerBlockCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteWorkerBlockCommandOutput) => void): void;
            /**
                * <p>
                *             The 	<code>DisassociateQualificationFromWorker</code>
                *             revokes a previously granted Qualification from a user.
                *         </p>
                *         <p>
                *             You can provide a text message explaining why the Qualification was
                *             revoked. The user who had the Qualification can see this message.
                *         </p>
                */
            disassociateQualificationFromWorker(args: DisassociateQualificationFromWorkerCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateQualificationFromWorkerCommandOutput>;
            disassociateQualificationFromWorker(args: DisassociateQualificationFromWorkerCommandInput, cb: (err: any, data?: DisassociateQualificationFromWorkerCommandOutput) => void): void;
            disassociateQualificationFromWorker(args: DisassociateQualificationFromWorkerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateQualificationFromWorkerCommandOutput) => void): void;
            /**
                * <p>The <code>GetAccountBalance</code> operation retrieves the Prepaid HITs balance in your Amazon Mechanical Turk account if you are a Prepaid Requester.
                *             Alternatively, this operation will retrieve the remaining available AWS Billing usage if you have enabled AWS Billing.
                *             Note: If you have enabled AWS Billing and still have a remaining Prepaid HITs balance, this balance can be viewed on the My Account page in the Requester console.</p>
                */
            getAccountBalance(args: GetAccountBalanceCommandInput, options?: __HttpHandlerOptions): Promise<GetAccountBalanceCommandOutput>;
            getAccountBalance(args: GetAccountBalanceCommandInput, cb: (err: any, data?: GetAccountBalanceCommandOutput) => void): void;
            getAccountBalance(args: GetAccountBalanceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAccountBalanceCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>GetAssignment</code> operation retrieves the details of the specified Assignment.
                *         </p>
                */
            getAssignment(args: GetAssignmentCommandInput, options?: __HttpHandlerOptions): Promise<GetAssignmentCommandOutput>;
            getAssignment(args: GetAssignmentCommandInput, cb: (err: any, data?: GetAssignmentCommandOutput) => void): void;
            getAssignment(args: GetAssignmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAssignmentCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>GetFileUploadURL</code>
                *             operation generates and returns a temporary URL. You use the
                *             temporary URL to retrieve a file uploaded by a Worker as an answer to
                *             a FileUploadAnswer question for a HIT. The temporary URL is generated
                *             the instant the GetFileUploadURL operation is called, and is valid
                *             for 60 seconds. You can get a temporary file upload URL any time
                *             until the HIT is disposed. After the HIT is disposed, any uploaded
                *             files are deleted, and cannot be retrieved.
                *
                *             Pending Deprecation on December 12, 2017. The Answer Specification
                *             structure will no longer  support the <code>FileUploadAnswer</code>
                *             element to be used for the QuestionForm data structure.
                *             Instead, we recommend that Requesters who want to create HITs asking
                *             Workers to upload files to use Amazon S3.
                *
                *         </p>
                */
            getFileUploadURL(args: GetFileUploadURLCommandInput, options?: __HttpHandlerOptions): Promise<GetFileUploadURLCommandOutput>;
            getFileUploadURL(args: GetFileUploadURLCommandInput, cb: (err: any, data?: GetFileUploadURLCommandOutput) => void): void;
            getFileUploadURL(args: GetFileUploadURLCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFileUploadURLCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>GetHIT</code> operation retrieves the details of the specified HIT.
                *         </p>
                */
            getHIT(args: GetHITCommandInput, options?: __HttpHandlerOptions): Promise<GetHITCommandOutput>;
            getHIT(args: GetHITCommandInput, cb: (err: any, data?: GetHITCommandOutput) => void): void;
            getHIT(args: GetHITCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetHITCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>GetQualificationScore</code>
                *             operation returns the value of a Worker's Qualification for a given
                *             Qualification type.
                *         </p>
                *         <p>
                *             To get a Worker's Qualification, you must know the Worker's ID. The
                *             Worker's ID is included in the assignment data returned by the
                *             <code>ListAssignmentsForHIT</code>
                *             operation.
                *         </p>
                *         <p>Only the owner of a Qualification type can query the value of
                *             a Worker's Qualification of that type.</p>
                */
            getQualificationScore(args: GetQualificationScoreCommandInput, options?: __HttpHandlerOptions): Promise<GetQualificationScoreCommandOutput>;
            getQualificationScore(args: GetQualificationScoreCommandInput, cb: (err: any, data?: GetQualificationScoreCommandOutput) => void): void;
            getQualificationScore(args: GetQualificationScoreCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetQualificationScoreCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>GetQualificationType</code>operation retrieves information about a Qualification type using its ID.
                *         </p>
                */
            getQualificationType(args: GetQualificationTypeCommandInput, options?: __HttpHandlerOptions): Promise<GetQualificationTypeCommandOutput>;
            getQualificationType(args: GetQualificationTypeCommandInput, cb: (err: any, data?: GetQualificationTypeCommandOutput) => void): void;
            getQualificationType(args: GetQualificationTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetQualificationTypeCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>ListAssignmentsForHIT</code>
                *             operation retrieves completed assignments for a HIT. You can use this
                *             operation to retrieve the results for a HIT.
                *         </p>
                *         <p> You can get assignments for a HIT at any time, even if the
                *             HIT is not yet Reviewable. If a HIT requested multiple assignments,
                *             and has received some results but has not yet become Reviewable, you
                *             can still retrieve the partial results with this operation.
                *         </p>
                *         <p> Use the AssignmentStatus parameter to control which set of
                *             assignments for a HIT are returned. The ListAssignmentsForHIT
                *             operation
                *             can return submitted assignments awaiting approval, or it can return
                *             assignments that have already been approved or rejected. You can set
                *             AssignmentStatus=Approved,Rejected to get assignments that have
                *             already been approved and rejected together in one result set.
                *         </p>
                *         <p> Only the Requester who created the HIT can retrieve the
                *             assignments for that HIT.
                *         </p>
                *         <p> Results are sorted and divided into numbered pages and the
                *             operation returns a single page of results. You can use the
                *             parameters
                *             of the operation to control sorting and pagination.
                *         </p>
                */
            listAssignmentsForHIT(args: ListAssignmentsForHITCommandInput, options?: __HttpHandlerOptions): Promise<ListAssignmentsForHITCommandOutput>;
            listAssignmentsForHIT(args: ListAssignmentsForHITCommandInput, cb: (err: any, data?: ListAssignmentsForHITCommandOutput) => void): void;
            listAssignmentsForHIT(args: ListAssignmentsForHITCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssignmentsForHITCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>ListBonusPayments</code>
                *             operation retrieves the amounts of bonuses you have paid to Workers
                *             for a given HIT or assignment.
                *         </p>
                */
            listBonusPayments(args: ListBonusPaymentsCommandInput, options?: __HttpHandlerOptions): Promise<ListBonusPaymentsCommandOutput>;
            listBonusPayments(args: ListBonusPaymentsCommandInput, cb: (err: any, data?: ListBonusPaymentsCommandOutput) => void): void;
            listBonusPayments(args: ListBonusPaymentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListBonusPaymentsCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>ListHITs</code>
                *             operation returns all of a Requester's HITs. The operation returns
                *             HITs of any status, except for HITs that have been deleted of with
                *             the DeleteHIT operation or that have been auto-deleted.
                *         </p>
                */
            listHITs(args: ListHITsCommandInput, options?: __HttpHandlerOptions): Promise<ListHITsCommandOutput>;
            listHITs(args: ListHITsCommandInput, cb: (err: any, data?: ListHITsCommandOutput) => void): void;
            listHITs(args: ListHITsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListHITsCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>ListHITsForQualificationType</code> operation returns the HITs that use
                *             the given Qualification type for a Qualification requirement.
                *             The operation returns HITs of any status, except for HITs that have been deleted
                *             with the <code>DeleteHIT</code> operation or that have been auto-deleted.
                *         </p>
                */
            listHITsForQualificationType(args: ListHITsForQualificationTypeCommandInput, options?: __HttpHandlerOptions): Promise<ListHITsForQualificationTypeCommandOutput>;
            listHITsForQualificationType(args: ListHITsForQualificationTypeCommandInput, cb: (err: any, data?: ListHITsForQualificationTypeCommandOutput) => void): void;
            listHITsForQualificationType(args: ListHITsForQualificationTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListHITsForQualificationTypeCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>ListQualificationRequests</code>
                *             operation retrieves requests for Qualifications of a particular
                *             Qualification type. The owner of the Qualification type calls this
                *             operation to poll for pending requests, and accepts them using the
                *             AcceptQualification operation.
                *         </p>
                */
            listQualificationRequests(args: ListQualificationRequestsCommandInput, options?: __HttpHandlerOptions): Promise<ListQualificationRequestsCommandOutput>;
            listQualificationRequests(args: ListQualificationRequestsCommandInput, cb: (err: any, data?: ListQualificationRequestsCommandOutput) => void): void;
            listQualificationRequests(args: ListQualificationRequestsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListQualificationRequestsCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>ListQualificationTypes</code>
                *             operation returns a list of Qualification types, filtered by
                *             an optional search term.
                *         </p>
                */
            listQualificationTypes(args: ListQualificationTypesCommandInput, options?: __HttpHandlerOptions): Promise<ListQualificationTypesCommandOutput>;
            listQualificationTypes(args: ListQualificationTypesCommandInput, cb: (err: any, data?: ListQualificationTypesCommandOutput) => void): void;
            listQualificationTypes(args: ListQualificationTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListQualificationTypesCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>ListReviewableHITs</code> operation retrieves the HITs with Status equal to
                *             Reviewable or Status equal to Reviewing that belong to the Requester calling the operation.
                *         </p>
                */
            listReviewableHITs(args: ListReviewableHITsCommandInput, options?: __HttpHandlerOptions): Promise<ListReviewableHITsCommandOutput>;
            listReviewableHITs(args: ListReviewableHITsCommandInput, cb: (err: any, data?: ListReviewableHITsCommandOutput) => void): void;
            listReviewableHITs(args: ListReviewableHITsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListReviewableHITsCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>ListReviewPolicyResultsForHIT</code> operation retrieves the computed results
                *             and the actions taken in the course of executing your Review Policies for a given HIT.
                *             For information about how to specify Review Policies when you call CreateHIT,
                *             see Review Policies. The ListReviewPolicyResultsForHIT operation can return results for both
                *             Assignment-level and HIT-level review results.
                *         </p>
                */
            listReviewPolicyResultsForHIT(args: ListReviewPolicyResultsForHITCommandInput, options?: __HttpHandlerOptions): Promise<ListReviewPolicyResultsForHITCommandOutput>;
            listReviewPolicyResultsForHIT(args: ListReviewPolicyResultsForHITCommandInput, cb: (err: any, data?: ListReviewPolicyResultsForHITCommandOutput) => void): void;
            listReviewPolicyResultsForHIT(args: ListReviewPolicyResultsForHITCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListReviewPolicyResultsForHITCommandOutput) => void): void;
            /**
                * <p>The <code>ListWorkersBlocks</code> operation retrieves a list of Workers who are blocked from working on your HITs.</p>
                */
            listWorkerBlocks(args: ListWorkerBlocksCommandInput, options?: __HttpHandlerOptions): Promise<ListWorkerBlocksCommandOutput>;
            listWorkerBlocks(args: ListWorkerBlocksCommandInput, cb: (err: any, data?: ListWorkerBlocksCommandOutput) => void): void;
            listWorkerBlocks(args: ListWorkerBlocksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorkerBlocksCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>ListWorkersWithQualificationType</code> operation returns all of the Workers
                *             that have been associated with a given Qualification type.
                *         </p>
                */
            listWorkersWithQualificationType(args: ListWorkersWithQualificationTypeCommandInput, options?: __HttpHandlerOptions): Promise<ListWorkersWithQualificationTypeCommandOutput>;
            listWorkersWithQualificationType(args: ListWorkersWithQualificationTypeCommandInput, cb: (err: any, data?: ListWorkersWithQualificationTypeCommandOutput) => void): void;
            listWorkersWithQualificationType(args: ListWorkersWithQualificationTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListWorkersWithQualificationTypeCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>NotifyWorkers</code>
                *             operation sends an email to one or more Workers that you specify with
                *             the Worker ID. You can specify up to 100 Worker IDs to send the same
                *             message with a single call to the NotifyWorkers operation. The
                *             NotifyWorkers operation will send a notification email to a Worker
                *             only if you have previously approved or rejected work from the
                *             Worker.
                *         </p>
                */
            notifyWorkers(args: NotifyWorkersCommandInput, options?: __HttpHandlerOptions): Promise<NotifyWorkersCommandOutput>;
            notifyWorkers(args: NotifyWorkersCommandInput, cb: (err: any, data?: NotifyWorkersCommandOutput) => void): void;
            notifyWorkers(args: NotifyWorkersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: NotifyWorkersCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>RejectAssignment</code> operation rejects the results of a completed assignment.
                *         </p>
                *         <p>
                *             You can include an optional feedback message with the rejection,
                *             which the Worker can see in the Status section of the web site.
                *             When you include a feedback message with the rejection,
                *             it helps the Worker understand why the assignment was rejected,
                *             and can improve the quality of the results the Worker submits in the future.
                *         </p>
                *         <p>
                *             Only the Requester who created the HIT can reject an assignment for the HIT.
                *         </p>
                */
            rejectAssignment(args: RejectAssignmentCommandInput, options?: __HttpHandlerOptions): Promise<RejectAssignmentCommandOutput>;
            rejectAssignment(args: RejectAssignmentCommandInput, cb: (err: any, data?: RejectAssignmentCommandOutput) => void): void;
            rejectAssignment(args: RejectAssignmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RejectAssignmentCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>RejectQualificationRequest</code>
                *             operation rejects a user's request for a Qualification.
                *         </p>
                *         <p> You can provide a text message explaining why the request was
                *             rejected. The Worker who made the request can see this message.</p>
                */
            rejectQualificationRequest(args: RejectQualificationRequestCommandInput, options?: __HttpHandlerOptions): Promise<RejectQualificationRequestCommandOutput>;
            rejectQualificationRequest(args: RejectQualificationRequestCommandInput, cb: (err: any, data?: RejectQualificationRequestCommandOutput) => void): void;
            rejectQualificationRequest(args: RejectQualificationRequestCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RejectQualificationRequestCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>SendBonus</code>
                *             operation issues a payment of money from your account to a Worker.
                *             This payment happens separately from the reward you pay to the Worker
                *             when you approve the Worker's assignment. The SendBonus operation
                *             requires the Worker's ID and the assignment ID as parameters to
                *             initiate payment of the bonus. You must include a message that
                *             explains the reason for the bonus payment, as the Worker may not be
                *             expecting the payment. Amazon Mechanical Turk collects a fee for
                *             bonus payments, similar to the HIT listing fee. This operation fails
                *             if your account does not have enough funds to pay for both the bonus
                *             and the fees.
                *         </p>
                */
            sendBonus(args: SendBonusCommandInput, options?: __HttpHandlerOptions): Promise<SendBonusCommandOutput>;
            sendBonus(args: SendBonusCommandInput, cb: (err: any, data?: SendBonusCommandOutput) => void): void;
            sendBonus(args: SendBonusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendBonusCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>SendTestEventNotification</code> operation causes Amazon Mechanical Turk to send
                *             a notification message as if a HIT event occurred, according to the provided
                *             notification specification. This allows you to test notifications without
                *             setting up notifications for a real HIT type and trying to trigger them using the website.
                *             When you call this operation, the service attempts to send the test notification immediately.
                *         </p>
                */
            sendTestEventNotification(args: SendTestEventNotificationCommandInput, options?: __HttpHandlerOptions): Promise<SendTestEventNotificationCommandOutput>;
            sendTestEventNotification(args: SendTestEventNotificationCommandInput, cb: (err: any, data?: SendTestEventNotificationCommandOutput) => void): void;
            sendTestEventNotification(args: SendTestEventNotificationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendTestEventNotificationCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>UpdateExpirationForHIT</code> operation allows you update the expiration time of a HIT.
                *             If you update it to a time in the past, the HIT will be immediately expired.
                *         </p>
                */
            updateExpirationForHIT(args: UpdateExpirationForHITCommandInput, options?: __HttpHandlerOptions): Promise<UpdateExpirationForHITCommandOutput>;
            updateExpirationForHIT(args: UpdateExpirationForHITCommandInput, cb: (err: any, data?: UpdateExpirationForHITCommandOutput) => void): void;
            updateExpirationForHIT(args: UpdateExpirationForHITCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateExpirationForHITCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>UpdateHITReviewStatus</code> operation updates the status of a HIT.
                *             If the status is Reviewable, this operation can update the status to Reviewing,
                *             or it can revert a Reviewing HIT back to the Reviewable status.
                *         </p>
                */
            updateHITReviewStatus(args: UpdateHITReviewStatusCommandInput, options?: __HttpHandlerOptions): Promise<UpdateHITReviewStatusCommandOutput>;
            updateHITReviewStatus(args: UpdateHITReviewStatusCommandInput, cb: (err: any, data?: UpdateHITReviewStatusCommandOutput) => void): void;
            updateHITReviewStatus(args: UpdateHITReviewStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateHITReviewStatusCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>UpdateHITTypeOfHIT</code>
                *             operation allows you to change the HITType properties of a HIT. This
                *             operation disassociates the HIT from its old HITType properties and
                *             associates it with the new HITType properties. The HIT takes on the
                *             properties of the new HITType in place of the old ones.
                *         </p>
                */
            updateHITTypeOfHIT(args: UpdateHITTypeOfHITCommandInput, options?: __HttpHandlerOptions): Promise<UpdateHITTypeOfHITCommandOutput>;
            updateHITTypeOfHIT(args: UpdateHITTypeOfHITCommandInput, cb: (err: any, data?: UpdateHITTypeOfHITCommandOutput) => void): void;
            updateHITTypeOfHIT(args: UpdateHITTypeOfHITCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateHITTypeOfHITCommandOutput) => void): void;
            /**
                * <p>
                *             The <code>UpdateNotificationSettings</code> operation creates, updates,
                *             disables or re-enables notifications for a HIT type.
                *             If you call the UpdateNotificationSettings operation for a HIT type that already has a
                *             notification specification, the operation replaces the old specification with a new one.
                *             You can call the UpdateNotificationSettings operation to enable or disable notifications
                *             for the HIT type, without having to modify the notification specification itself by providing
                *             updates to the Active status without specifying a new notification specification.
                *             To change the Active status of a HIT type's notifications,
                *             the HIT type must already have a notification specification,
                *             or one must be provided in the same call to <code>UpdateNotificationSettings</code>.
                *         </p>
                */
            updateNotificationSettings(args: UpdateNotificationSettingsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateNotificationSettingsCommandOutput>;
            updateNotificationSettings(args: UpdateNotificationSettingsCommandInput, cb: (err: any, data?: UpdateNotificationSettingsCommandOutput) => void): void;
            updateNotificationSettings(args: UpdateNotificationSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateNotificationSettingsCommandOutput) => void): void;
            /**
                * <p>
                *             The
                *             <code>UpdateQualificationType</code>
                *             operation modifies the attributes of an existing Qualification type,
                *             which is represented by a QualificationType data structure. Only the
                *             owner of a Qualification type can modify its attributes.
                *         </p>
                *         <p> Most attributes of a Qualification type can be changed after
                *             the type has been created. However, the Name and Keywords fields
                *             cannot be modified. The RetryDelayInSeconds parameter can be modified
                *             or added to change the delay or to enable retries, but
                *             RetryDelayInSeconds cannot be used to disable retries. </p>
                *         <p> You can use this operation to update the test for a
                *             Qualification type. The test is updated based on the values specified
                *             for the Test, TestDurationInSeconds and AnswerKey parameters. All
                *             three parameters specify the updated test. If you are updating the
                *             test for a type, you must specify the Test and TestDurationInSeconds
                *             parameters. The AnswerKey parameter is optional; omitting it specifies
                *             that the updated test does not have an answer key. </p>
                *         <p> If you omit the Test parameter, the test for the
                *             Qualification type is unchanged. There is no way to remove a test from
                *             a Qualification type that has one. If the type already has a test, you
                *             cannot update it to be AutoGranted. If the Qualification type does not
                *             have a test and one is provided by an update, the type will henceforth
                *             have a test. </p>
                *         <p> If you want to update the test duration or answer key for an
                *             existing test without changing the questions, you must specify a Test
                *             parameter with the original questions, along with the updated values. </p>
                *         <p> If you provide an updated Test but no AnswerKey, the new test
                *             will not have an answer key. Requests for such Qualifications must be
                *             granted manually. </p>
                *         <p> You can also update the AutoGranted and AutoGrantedValue
                *             attributes of the Qualification type.</p>
                */
            updateQualificationType(args: UpdateQualificationTypeCommandInput, options?: __HttpHandlerOptions): Promise<UpdateQualificationTypeCommandOutput>;
            updateQualificationType(args: UpdateQualificationTypeCommandInput, cb: (err: any, data?: UpdateQualificationTypeCommandOutput) => void): void;
            updateQualificationType(args: UpdateQualificationTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateQualificationTypeCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/AcceptQualificationRequestCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AcceptQualificationRequestRequest, AcceptQualificationRequestResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface AcceptQualificationRequestCommandInput extends AcceptQualificationRequestRequest {
    }
    export interface AcceptQualificationRequestCommandOutput extends AcceptQualificationRequestResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>AcceptQualificationRequest</code> operation approves a Worker's request for a Qualification.
        *         </p>
        *         <p>
        *             Only the owner of the Qualification type can grant a Qualification request for that	type.
        *         </p>
        *         <p>
        *             A successful request for the <code>AcceptQualificationRequest</code> operation
        *             returns with no errors and an empty body.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, AcceptQualificationRequestCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, AcceptQualificationRequestCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new AcceptQualificationRequestCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AcceptQualificationRequestCommandInput} for command's `input` shape.
        * @see {@link AcceptQualificationRequestCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class AcceptQualificationRequestCommand extends $Command<AcceptQualificationRequestCommandInput, AcceptQualificationRequestCommandOutput, MTurkClientResolvedConfig> {
            readonly input: AcceptQualificationRequestCommandInput;
            constructor(input: AcceptQualificationRequestCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AcceptQualificationRequestCommandInput, AcceptQualificationRequestCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ApproveAssignmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ApproveAssignmentRequest, ApproveAssignmentResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface ApproveAssignmentCommandInput extends ApproveAssignmentRequest {
    }
    export interface ApproveAssignmentCommandOutput extends ApproveAssignmentResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>ApproveAssignment</code> operation approves the results of a completed assignment.
        *         </p>
        *         <p>
        *             Approving an assignment initiates two payments from the Requester's Amazon.com account
        *         </p>
        *         <ul>
        *             <li>
        *                 <p>
        *                     The Worker who submitted the results is paid the reward specified in the HIT.
        *                 </p>
        *             </li>
        *             <li>
        *                 <p>
        *                     Amazon Mechanical Turk fees are debited.
        *                 </p>
        *             </li>
        *          </ul>
        *         <p>
        *             If the Requester's account does not have adequate funds for these payments,
        *             the call to ApproveAssignment returns an exception, and the approval is not processed.
        *             You can include an optional feedback message with the approval,
        *             which the Worker can see in the Status section of the web site.
        *         </p>
        *         <p>
        *             You can also call this operation for assignments that were previous rejected
        *             and approve them by explicitly overriding the previous rejection.
        *             This only works on rejected assignments that were submitted within the previous 30 days
        *             and only if the assignment's related HIT has not been deleted.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, ApproveAssignmentCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, ApproveAssignmentCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new ApproveAssignmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ApproveAssignmentCommandInput} for command's `input` shape.
        * @see {@link ApproveAssignmentCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class ApproveAssignmentCommand extends $Command<ApproveAssignmentCommandInput, ApproveAssignmentCommandOutput, MTurkClientResolvedConfig> {
            readonly input: ApproveAssignmentCommandInput;
            constructor(input: ApproveAssignmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ApproveAssignmentCommandInput, ApproveAssignmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/AssociateQualificationWithWorkerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateQualificationWithWorkerRequest, AssociateQualificationWithWorkerResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface AssociateQualificationWithWorkerCommandInput extends AssociateQualificationWithWorkerRequest {
    }
    export interface AssociateQualificationWithWorkerCommandOutput extends AssociateQualificationWithWorkerResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>AssociateQualificationWithWorker</code> operation gives a Worker a
        *             Qualification. <code>AssociateQualificationWithWorker</code> does not require that the Worker
        *             submit a Qualification request. It gives the Qualification directly to the Worker.
        *         </p>
        *
        *         <p>
        *             You can only assign a Qualification of a Qualification type that you created (using
        *             the <code>CreateQualificationType</code> operation).
        *         </p>
        *
        *         <note>
        *             <p>
        *                 Note: <code>AssociateQualificationWithWorker</code> does not affect any pending Qualification
        *                 requests for the Qualification by the Worker. If you assign a Qualification to a
        *                 Worker, then later grant a Qualification request made by the Worker, the granting of
        *                 the request may modify the Qualification score. To resolve a pending Qualification
        *                 request without affecting the Qualification the Worker already has, reject the
        *                 request with the <code>RejectQualificationRequest</code> operation.
        *             </p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, AssociateQualificationWithWorkerCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, AssociateQualificationWithWorkerCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new AssociateQualificationWithWorkerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateQualificationWithWorkerCommandInput} for command's `input` shape.
        * @see {@link AssociateQualificationWithWorkerCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class AssociateQualificationWithWorkerCommand extends $Command<AssociateQualificationWithWorkerCommandInput, AssociateQualificationWithWorkerCommandOutput, MTurkClientResolvedConfig> {
            readonly input: AssociateQualificationWithWorkerCommandInput;
            constructor(input: AssociateQualificationWithWorkerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateQualificationWithWorkerCommandInput, AssociateQualificationWithWorkerCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateAdditionalAssignmentsForHITCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAdditionalAssignmentsForHITRequest, CreateAdditionalAssignmentsForHITResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface CreateAdditionalAssignmentsForHITCommandInput extends CreateAdditionalAssignmentsForHITRequest {
    }
    export interface CreateAdditionalAssignmentsForHITCommandOutput extends CreateAdditionalAssignmentsForHITResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>CreateAdditionalAssignmentsForHIT</code>
        *             operation increases the maximum number of assignments of an existing HIT.
        *         </p>
        *         <p>
        *             To extend the maximum number of assignments, specify the number of additional assignments.</p>
        *         <note>
        *             <ul>
        *                <li>
        *                     <p>HITs created with fewer than 10 assignments cannot be extended to have 10 or more assignments. Attempting to add assignments in a way that brings the total number of assignments for a HIT from fewer than 10 assignments to 10 or more
        *                         assignments will result in an
        *                         <code>AWS.MechanicalTurk.InvalidMaximumAssignmentsIncrease</code>
        *                         exception.</p>
        *                 </li>
        *                <li>
        *                     <p>HITs that were created before July 22, 2015 cannot be extended. Attempting to extend HITs that were created before July 22, 2015 will result in an
        *                         <code>AWS.MechanicalTurk.HITTooOldForExtension</code>
        *                         exception.
        *                     </p>
        *                 </li>
        *             </ul>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, CreateAdditionalAssignmentsForHITCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, CreateAdditionalAssignmentsForHITCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new CreateAdditionalAssignmentsForHITCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAdditionalAssignmentsForHITCommandInput} for command's `input` shape.
        * @see {@link CreateAdditionalAssignmentsForHITCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class CreateAdditionalAssignmentsForHITCommand extends $Command<CreateAdditionalAssignmentsForHITCommandInput, CreateAdditionalAssignmentsForHITCommandOutput, MTurkClientResolvedConfig> {
            readonly input: CreateAdditionalAssignmentsForHITCommandInput;
            constructor(input: CreateAdditionalAssignmentsForHITCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAdditionalAssignmentsForHITCommandInput, CreateAdditionalAssignmentsForHITCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateHITCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateHITRequest, CreateHITResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface CreateHITCommandInput extends CreateHITRequest {
    }
    export interface CreateHITCommandOutput extends CreateHITResponse, __MetadataBearer {
    }
    /**
        * <p>The <code>CreateHIT</code> operation creates a new Human Intelligence Task (HIT).
        *             The new HIT is made available for Workers to find and accept on the Amazon Mechanical
        *             Turk website. </p>
        *         <p>
        *             This operation allows you to specify a new HIT by passing in values for the properties of the HIT, such as its title, reward amount and number of assignments. When you pass these values to <code>CreateHIT</code>, a new HIT is created for you, with a new <code>HITTypeID</code>. The HITTypeID can be used to create additional HITs in the future without needing to specify common parameters such as the title, description and reward amount each time.</p>
        *         <p> An alternative way to create HITs is to first generate a HITTypeID using the <code>CreateHITType</code> operation and then call the <code>CreateHITWithHITType</code> operation. This is the recommended best practice for Requesters who are creating large numbers of HITs.
        *         </p>
        *
        *         <p>CreateHIT also supports several ways to provide question data: by providing a value
        *             for the <code>Question</code> parameter that fully specifies the contents of the HIT, or by providing
        *             a <code>HitLayoutId</code> and associated <code>HitLayoutParameters</code>.
        *         </p>
        *
        *         <note>
        *             <p> If a HIT is created with 10 or more maximum assignments, there is an additional fee. For more information, see
        *             <a href="https://requester.mturk.com/pricing">Amazon Mechanical Turk Pricing</a>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, CreateHITCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, CreateHITCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new CreateHITCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateHITCommandInput} for command's `input` shape.
        * @see {@link CreateHITCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class CreateHITCommand extends $Command<CreateHITCommandInput, CreateHITCommandOutput, MTurkClientResolvedConfig> {
            readonly input: CreateHITCommandInput;
            constructor(input: CreateHITCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateHITCommandInput, CreateHITCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateHITTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateHITTypeRequest, CreateHITTypeResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface CreateHITTypeCommandInput extends CreateHITTypeRequest {
    }
    export interface CreateHITTypeCommandOutput extends CreateHITTypeResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>CreateHITType</code> operation creates a new HIT type. This operation
        *             allows you to define a standard set of HIT properties to use when creating HITs.
        *             If you register a HIT type with values that match an existing HIT type, the HIT type
        *             ID of the existing type will be returned.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, CreateHITTypeCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, CreateHITTypeCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new CreateHITTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateHITTypeCommandInput} for command's `input` shape.
        * @see {@link CreateHITTypeCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class CreateHITTypeCommand extends $Command<CreateHITTypeCommandInput, CreateHITTypeCommandOutput, MTurkClientResolvedConfig> {
            readonly input: CreateHITTypeCommandInput;
            constructor(input: CreateHITTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateHITTypeCommandInput, CreateHITTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateHITWithHITTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateHITWithHITTypeRequest, CreateHITWithHITTypeResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface CreateHITWithHITTypeCommandInput extends CreateHITWithHITTypeRequest {
    }
    export interface CreateHITWithHITTypeCommandOutput extends CreateHITWithHITTypeResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>CreateHITWithHITType</code> operation creates a new Human Intelligence Task (HIT)
        *             using an existing HITTypeID generated by the <code>CreateHITType</code> operation.
        *         </p>
        *         <p>
        *             This is an alternative way to create HITs from the <code>CreateHIT</code> operation.
        *             This is the recommended best practice for Requesters who are creating large numbers of HITs.
        *         </p>
        *         <p>CreateHITWithHITType also supports several ways to provide question data:
        *             by providing a value for the <code>Question</code> parameter that fully specifies the contents of the HIT,
        *             or by providing a <code>HitLayoutId</code> and associated <code>HitLayoutParameters</code>.
        *         </p>
        *         <note>
        *             <p>
        *                 If a HIT is created with 10 or more maximum assignments, there is an additional fee.
        *                 For more information, see <a href="https://requester.mturk.com/pricing">Amazon Mechanical Turk Pricing</a>.
        *             </p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, CreateHITWithHITTypeCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, CreateHITWithHITTypeCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new CreateHITWithHITTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateHITWithHITTypeCommandInput} for command's `input` shape.
        * @see {@link CreateHITWithHITTypeCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class CreateHITWithHITTypeCommand extends $Command<CreateHITWithHITTypeCommandInput, CreateHITWithHITTypeCommandOutput, MTurkClientResolvedConfig> {
            readonly input: CreateHITWithHITTypeCommandInput;
            constructor(input: CreateHITWithHITTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateHITWithHITTypeCommandInput, CreateHITWithHITTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateQualificationTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateQualificationTypeRequest, CreateQualificationTypeResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface CreateQualificationTypeCommandInput extends CreateQualificationTypeRequest {
    }
    export interface CreateQualificationTypeCommandOutput extends CreateQualificationTypeResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>CreateQualificationType</code>
        *             operation creates a new Qualification type, which is represented by a
        *             <code>QualificationType</code>
        *             data structure.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, CreateQualificationTypeCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, CreateQualificationTypeCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new CreateQualificationTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateQualificationTypeCommandInput} for command's `input` shape.
        * @see {@link CreateQualificationTypeCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class CreateQualificationTypeCommand extends $Command<CreateQualificationTypeCommandInput, CreateQualificationTypeCommandOutput, MTurkClientResolvedConfig> {
            readonly input: CreateQualificationTypeCommandInput;
            constructor(input: CreateQualificationTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateQualificationTypeCommandInput, CreateQualificationTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateWorkerBlockCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateWorkerBlockRequest, CreateWorkerBlockResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface CreateWorkerBlockCommandInput extends CreateWorkerBlockRequest {
    }
    export interface CreateWorkerBlockCommandOutput extends CreateWorkerBlockResponse, __MetadataBearer {
    }
    /**
        * <p>The <code>CreateWorkerBlock</code> operation allows you to prevent a Worker from working on your HITs. For example, you can block a Worker who is producing poor quality work. You can block up to 100,000 Workers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, CreateWorkerBlockCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, CreateWorkerBlockCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new CreateWorkerBlockCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateWorkerBlockCommandInput} for command's `input` shape.
        * @see {@link CreateWorkerBlockCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class CreateWorkerBlockCommand extends $Command<CreateWorkerBlockCommandInput, CreateWorkerBlockCommandOutput, MTurkClientResolvedConfig> {
            readonly input: CreateWorkerBlockCommandInput;
            constructor(input: CreateWorkerBlockCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateWorkerBlockCommandInput, CreateWorkerBlockCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/DeleteHITCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteHITRequest, DeleteHITResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface DeleteHITCommandInput extends DeleteHITRequest {
    }
    export interface DeleteHITCommandOutput extends DeleteHITResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>DeleteHIT</code> operation is used to delete HIT that is no longer needed.
        *             Only the Requester who created the HIT can delete it.
        *         </p>
        *         <p>
        *             You can only dispose of HITs that are in the <code>Reviewable</code> state,
        *             with all of their submitted assignments already either approved or rejected.
        *             If you call the DeleteHIT operation on a HIT that is not in the <code>Reviewable</code> state
        *             (for example, that has not expired, or still has active assignments),
        *             or on a HIT that is Reviewable but without all of its submitted assignments
        *             already approved or rejected, the service will return an error.
        *         </p>
        *         <note>
        *             <ul>
        *                <li>
        *                     <p>
        *                         HITs are automatically disposed of after 120 days.
        *                     </p>
        *                 </li>
        *                <li>
        *                     <p>
        *                         After you dispose of a HIT, you can no longer approve the HIT's rejected assignments.
        *                     </p>
        *                 </li>
        *                <li>
        *                     <p>
        *                         Disposed HITs are not returned in results for the ListHITs operation.
        *                     </p>
        *                 </li>
        *                <li>
        *                     <p>
        *                         Disposing HITs can improve the performance of operations such as ListReviewableHITs and ListHITs.
        *                     </p>
        *                 </li>
        *             </ul>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, DeleteHITCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, DeleteHITCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new DeleteHITCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteHITCommandInput} for command's `input` shape.
        * @see {@link DeleteHITCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class DeleteHITCommand extends $Command<DeleteHITCommandInput, DeleteHITCommandOutput, MTurkClientResolvedConfig> {
            readonly input: DeleteHITCommandInput;
            constructor(input: DeleteHITCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteHITCommandInput, DeleteHITCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/DeleteQualificationTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteQualificationTypeRequest, DeleteQualificationTypeResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface DeleteQualificationTypeCommandInput extends DeleteQualificationTypeRequest {
    }
    export interface DeleteQualificationTypeCommandOutput extends DeleteQualificationTypeResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>DeleteQualificationType</code>
        *             deletes a Qualification type and deletes any HIT types that are
        *             associated with the Qualification type.
        *         </p>
        *         <p>This operation does not revoke Qualifications already assigned
        *             to Workers because the Qualifications might be needed for active HITs.
        *             If there are any pending requests for the Qualification type, Amazon
        *             Mechanical Turk rejects those requests. After you delete a
        *             Qualification type, you can no longer use it to create HITs or HIT
        *             types.</p>
        *         <note>
        *             <p>DeleteQualificationType must wait for all the HITs that use
        *                 the deleted Qualification type to be deleted before completing. It
        *                 may take up to 48 hours before DeleteQualificationType completes and
        *                 the unique name of the Qualification type is available for reuse with
        *                 CreateQualificationType.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, DeleteQualificationTypeCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, DeleteQualificationTypeCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new DeleteQualificationTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteQualificationTypeCommandInput} for command's `input` shape.
        * @see {@link DeleteQualificationTypeCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class DeleteQualificationTypeCommand extends $Command<DeleteQualificationTypeCommandInput, DeleteQualificationTypeCommandOutput, MTurkClientResolvedConfig> {
            readonly input: DeleteQualificationTypeCommandInput;
            constructor(input: DeleteQualificationTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteQualificationTypeCommandInput, DeleteQualificationTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/DeleteWorkerBlockCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteWorkerBlockRequest, DeleteWorkerBlockResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface DeleteWorkerBlockCommandInput extends DeleteWorkerBlockRequest {
    }
    export interface DeleteWorkerBlockCommandOutput extends DeleteWorkerBlockResponse, __MetadataBearer {
    }
    /**
        * <p>The <code>DeleteWorkerBlock</code> operation allows you to reinstate a blocked Worker to work on your HITs. This operation reverses the effects of the CreateWorkerBlock operation. You need the Worker ID to use this operation. If the Worker ID is missing or invalid, this operation fails and returns the message “WorkerId is invalid.” If the specified Worker is not blocked, this operation returns successfully.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, DeleteWorkerBlockCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, DeleteWorkerBlockCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new DeleteWorkerBlockCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteWorkerBlockCommandInput} for command's `input` shape.
        * @see {@link DeleteWorkerBlockCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class DeleteWorkerBlockCommand extends $Command<DeleteWorkerBlockCommandInput, DeleteWorkerBlockCommandOutput, MTurkClientResolvedConfig> {
            readonly input: DeleteWorkerBlockCommandInput;
            constructor(input: DeleteWorkerBlockCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteWorkerBlockCommandInput, DeleteWorkerBlockCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/DisassociateQualificationFromWorkerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateQualificationFromWorkerRequest, DisassociateQualificationFromWorkerResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface DisassociateQualificationFromWorkerCommandInput extends DisassociateQualificationFromWorkerRequest {
    }
    export interface DisassociateQualificationFromWorkerCommandOutput extends DisassociateQualificationFromWorkerResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The 	<code>DisassociateQualificationFromWorker</code>
        *             revokes a previously granted Qualification from a user.
        *         </p>
        *         <p>
        *             You can provide a text message explaining why the Qualification was
        *             revoked. The user who had the Qualification can see this message.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, DisassociateQualificationFromWorkerCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, DisassociateQualificationFromWorkerCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new DisassociateQualificationFromWorkerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateQualificationFromWorkerCommandInput} for command's `input` shape.
        * @see {@link DisassociateQualificationFromWorkerCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class DisassociateQualificationFromWorkerCommand extends $Command<DisassociateQualificationFromWorkerCommandInput, DisassociateQualificationFromWorkerCommandOutput, MTurkClientResolvedConfig> {
            readonly input: DisassociateQualificationFromWorkerCommandInput;
            constructor(input: DisassociateQualificationFromWorkerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateQualificationFromWorkerCommandInput, DisassociateQualificationFromWorkerCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetAccountBalanceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAccountBalanceRequest, GetAccountBalanceResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface GetAccountBalanceCommandInput extends GetAccountBalanceRequest {
    }
    export interface GetAccountBalanceCommandOutput extends GetAccountBalanceResponse, __MetadataBearer {
    }
    /**
        * <p>The <code>GetAccountBalance</code> operation retrieves the Prepaid HITs balance in your Amazon Mechanical Turk account if you are a Prepaid Requester.
        *             Alternatively, this operation will retrieve the remaining available AWS Billing usage if you have enabled AWS Billing.
        *             Note: If you have enabled AWS Billing and still have a remaining Prepaid HITs balance, this balance can be viewed on the My Account page in the Requester console.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, GetAccountBalanceCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, GetAccountBalanceCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new GetAccountBalanceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAccountBalanceCommandInput} for command's `input` shape.
        * @see {@link GetAccountBalanceCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class GetAccountBalanceCommand extends $Command<GetAccountBalanceCommandInput, GetAccountBalanceCommandOutput, MTurkClientResolvedConfig> {
            readonly input: GetAccountBalanceCommandInput;
            constructor(input: GetAccountBalanceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAccountBalanceCommandInput, GetAccountBalanceCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetAssignmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAssignmentRequest, GetAssignmentResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface GetAssignmentCommandInput extends GetAssignmentRequest {
    }
    export interface GetAssignmentCommandOutput extends GetAssignmentResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>GetAssignment</code> operation retrieves the details of the specified Assignment.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, GetAssignmentCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, GetAssignmentCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new GetAssignmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAssignmentCommandInput} for command's `input` shape.
        * @see {@link GetAssignmentCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class GetAssignmentCommand extends $Command<GetAssignmentCommandInput, GetAssignmentCommandOutput, MTurkClientResolvedConfig> {
            readonly input: GetAssignmentCommandInput;
            constructor(input: GetAssignmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAssignmentCommandInput, GetAssignmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetFileUploadURLCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetFileUploadURLRequest, GetFileUploadURLResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface GetFileUploadURLCommandInput extends GetFileUploadURLRequest {
    }
    export interface GetFileUploadURLCommandOutput extends GetFileUploadURLResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>GetFileUploadURL</code>
        *             operation generates and returns a temporary URL. You use the
        *             temporary URL to retrieve a file uploaded by a Worker as an answer to
        *             a FileUploadAnswer question for a HIT. The temporary URL is generated
        *             the instant the GetFileUploadURL operation is called, and is valid
        *             for 60 seconds. You can get a temporary file upload URL any time
        *             until the HIT is disposed. After the HIT is disposed, any uploaded
        *             files are deleted, and cannot be retrieved.
        *
        *             Pending Deprecation on December 12, 2017. The Answer Specification
        *             structure will no longer  support the <code>FileUploadAnswer</code>
        *             element to be used for the QuestionForm data structure.
        *             Instead, we recommend that Requesters who want to create HITs asking
        *             Workers to upload files to use Amazon S3.
        *
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, GetFileUploadURLCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, GetFileUploadURLCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new GetFileUploadURLCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFileUploadURLCommandInput} for command's `input` shape.
        * @see {@link GetFileUploadURLCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class GetFileUploadURLCommand extends $Command<GetFileUploadURLCommandInput, GetFileUploadURLCommandOutput, MTurkClientResolvedConfig> {
            readonly input: GetFileUploadURLCommandInput;
            constructor(input: GetFileUploadURLCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFileUploadURLCommandInput, GetFileUploadURLCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetHITCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetHITRequest, GetHITResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface GetHITCommandInput extends GetHITRequest {
    }
    export interface GetHITCommandOutput extends GetHITResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>GetHIT</code> operation retrieves the details of the specified HIT.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, GetHITCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, GetHITCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new GetHITCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetHITCommandInput} for command's `input` shape.
        * @see {@link GetHITCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class GetHITCommand extends $Command<GetHITCommandInput, GetHITCommandOutput, MTurkClientResolvedConfig> {
            readonly input: GetHITCommandInput;
            constructor(input: GetHITCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetHITCommandInput, GetHITCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetQualificationScoreCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetQualificationScoreRequest, GetQualificationScoreResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface GetQualificationScoreCommandInput extends GetQualificationScoreRequest {
    }
    export interface GetQualificationScoreCommandOutput extends GetQualificationScoreResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>GetQualificationScore</code>
        *             operation returns the value of a Worker's Qualification for a given
        *             Qualification type.
        *         </p>
        *         <p>
        *             To get a Worker's Qualification, you must know the Worker's ID. The
        *             Worker's ID is included in the assignment data returned by the
        *             <code>ListAssignmentsForHIT</code>
        *             operation.
        *         </p>
        *         <p>Only the owner of a Qualification type can query the value of
        *             a Worker's Qualification of that type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, GetQualificationScoreCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, GetQualificationScoreCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new GetQualificationScoreCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetQualificationScoreCommandInput} for command's `input` shape.
        * @see {@link GetQualificationScoreCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class GetQualificationScoreCommand extends $Command<GetQualificationScoreCommandInput, GetQualificationScoreCommandOutput, MTurkClientResolvedConfig> {
            readonly input: GetQualificationScoreCommandInput;
            constructor(input: GetQualificationScoreCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetQualificationScoreCommandInput, GetQualificationScoreCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetQualificationTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetQualificationTypeRequest, GetQualificationTypeResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface GetQualificationTypeCommandInput extends GetQualificationTypeRequest {
    }
    export interface GetQualificationTypeCommandOutput extends GetQualificationTypeResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>GetQualificationType</code>operation retrieves information about a Qualification type using its ID.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, GetQualificationTypeCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, GetQualificationTypeCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new GetQualificationTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetQualificationTypeCommandInput} for command's `input` shape.
        * @see {@link GetQualificationTypeCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class GetQualificationTypeCommand extends $Command<GetQualificationTypeCommandInput, GetQualificationTypeCommandOutput, MTurkClientResolvedConfig> {
            readonly input: GetQualificationTypeCommandInput;
            constructor(input: GetQualificationTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetQualificationTypeCommandInput, GetQualificationTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListAssignmentsForHITCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAssignmentsForHITRequest, ListAssignmentsForHITResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface ListAssignmentsForHITCommandInput extends ListAssignmentsForHITRequest {
    }
    export interface ListAssignmentsForHITCommandOutput extends ListAssignmentsForHITResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>ListAssignmentsForHIT</code>
        *             operation retrieves completed assignments for a HIT. You can use this
        *             operation to retrieve the results for a HIT.
        *         </p>
        *         <p> You can get assignments for a HIT at any time, even if the
        *             HIT is not yet Reviewable. If a HIT requested multiple assignments,
        *             and has received some results but has not yet become Reviewable, you
        *             can still retrieve the partial results with this operation.
        *         </p>
        *         <p> Use the AssignmentStatus parameter to control which set of
        *             assignments for a HIT are returned. The ListAssignmentsForHIT
        *             operation
        *             can return submitted assignments awaiting approval, or it can return
        *             assignments that have already been approved or rejected. You can set
        *             AssignmentStatus=Approved,Rejected to get assignments that have
        *             already been approved and rejected together in one result set.
        *         </p>
        *         <p> Only the Requester who created the HIT can retrieve the
        *             assignments for that HIT.
        *         </p>
        *         <p> Results are sorted and divided into numbered pages and the
        *             operation returns a single page of results. You can use the
        *             parameters
        *             of the operation to control sorting and pagination.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, ListAssignmentsForHITCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, ListAssignmentsForHITCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new ListAssignmentsForHITCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssignmentsForHITCommandInput} for command's `input` shape.
        * @see {@link ListAssignmentsForHITCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class ListAssignmentsForHITCommand extends $Command<ListAssignmentsForHITCommandInput, ListAssignmentsForHITCommandOutput, MTurkClientResolvedConfig> {
            readonly input: ListAssignmentsForHITCommandInput;
            constructor(input: ListAssignmentsForHITCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssignmentsForHITCommandInput, ListAssignmentsForHITCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListBonusPaymentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListBonusPaymentsRequest, ListBonusPaymentsResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface ListBonusPaymentsCommandInput extends ListBonusPaymentsRequest {
    }
    export interface ListBonusPaymentsCommandOutput extends ListBonusPaymentsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>ListBonusPayments</code>
        *             operation retrieves the amounts of bonuses you have paid to Workers
        *             for a given HIT or assignment.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, ListBonusPaymentsCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, ListBonusPaymentsCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new ListBonusPaymentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListBonusPaymentsCommandInput} for command's `input` shape.
        * @see {@link ListBonusPaymentsCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class ListBonusPaymentsCommand extends $Command<ListBonusPaymentsCommandInput, ListBonusPaymentsCommandOutput, MTurkClientResolvedConfig> {
            readonly input: ListBonusPaymentsCommandInput;
            constructor(input: ListBonusPaymentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListBonusPaymentsCommandInput, ListBonusPaymentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListHITsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListHITsRequest, ListHITsResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface ListHITsCommandInput extends ListHITsRequest {
    }
    export interface ListHITsCommandOutput extends ListHITsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>ListHITs</code>
        *             operation returns all of a Requester's HITs. The operation returns
        *             HITs of any status, except for HITs that have been deleted of with
        *             the DeleteHIT operation or that have been auto-deleted.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, ListHITsCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, ListHITsCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new ListHITsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListHITsCommandInput} for command's `input` shape.
        * @see {@link ListHITsCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class ListHITsCommand extends $Command<ListHITsCommandInput, ListHITsCommandOutput, MTurkClientResolvedConfig> {
            readonly input: ListHITsCommandInput;
            constructor(input: ListHITsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListHITsCommandInput, ListHITsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListHITsForQualificationTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListHITsForQualificationTypeRequest, ListHITsForQualificationTypeResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface ListHITsForQualificationTypeCommandInput extends ListHITsForQualificationTypeRequest {
    }
    export interface ListHITsForQualificationTypeCommandOutput extends ListHITsForQualificationTypeResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>ListHITsForQualificationType</code> operation returns the HITs that use
        *             the given Qualification type for a Qualification requirement.
        *             The operation returns HITs of any status, except for HITs that have been deleted
        *             with the <code>DeleteHIT</code> operation or that have been auto-deleted.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, ListHITsForQualificationTypeCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, ListHITsForQualificationTypeCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new ListHITsForQualificationTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListHITsForQualificationTypeCommandInput} for command's `input` shape.
        * @see {@link ListHITsForQualificationTypeCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class ListHITsForQualificationTypeCommand extends $Command<ListHITsForQualificationTypeCommandInput, ListHITsForQualificationTypeCommandOutput, MTurkClientResolvedConfig> {
            readonly input: ListHITsForQualificationTypeCommandInput;
            constructor(input: ListHITsForQualificationTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListHITsForQualificationTypeCommandInput, ListHITsForQualificationTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListQualificationRequestsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListQualificationRequestsRequest, ListQualificationRequestsResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface ListQualificationRequestsCommandInput extends ListQualificationRequestsRequest {
    }
    export interface ListQualificationRequestsCommandOutput extends ListQualificationRequestsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>ListQualificationRequests</code>
        *             operation retrieves requests for Qualifications of a particular
        *             Qualification type. The owner of the Qualification type calls this
        *             operation to poll for pending requests, and accepts them using the
        *             AcceptQualification operation.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, ListQualificationRequestsCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, ListQualificationRequestsCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new ListQualificationRequestsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListQualificationRequestsCommandInput} for command's `input` shape.
        * @see {@link ListQualificationRequestsCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class ListQualificationRequestsCommand extends $Command<ListQualificationRequestsCommandInput, ListQualificationRequestsCommandOutput, MTurkClientResolvedConfig> {
            readonly input: ListQualificationRequestsCommandInput;
            constructor(input: ListQualificationRequestsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListQualificationRequestsCommandInput, ListQualificationRequestsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListQualificationTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListQualificationTypesRequest, ListQualificationTypesResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface ListQualificationTypesCommandInput extends ListQualificationTypesRequest {
    }
    export interface ListQualificationTypesCommandOutput extends ListQualificationTypesResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>ListQualificationTypes</code>
        *             operation returns a list of Qualification types, filtered by
        *             an optional search term.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, ListQualificationTypesCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, ListQualificationTypesCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new ListQualificationTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListQualificationTypesCommandInput} for command's `input` shape.
        * @see {@link ListQualificationTypesCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class ListQualificationTypesCommand extends $Command<ListQualificationTypesCommandInput, ListQualificationTypesCommandOutput, MTurkClientResolvedConfig> {
            readonly input: ListQualificationTypesCommandInput;
            constructor(input: ListQualificationTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListQualificationTypesCommandInput, ListQualificationTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListReviewableHITsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListReviewableHITsRequest, ListReviewableHITsResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface ListReviewableHITsCommandInput extends ListReviewableHITsRequest {
    }
    export interface ListReviewableHITsCommandOutput extends ListReviewableHITsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>ListReviewableHITs</code> operation retrieves the HITs with Status equal to
        *             Reviewable or Status equal to Reviewing that belong to the Requester calling the operation.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, ListReviewableHITsCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, ListReviewableHITsCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new ListReviewableHITsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListReviewableHITsCommandInput} for command's `input` shape.
        * @see {@link ListReviewableHITsCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class ListReviewableHITsCommand extends $Command<ListReviewableHITsCommandInput, ListReviewableHITsCommandOutput, MTurkClientResolvedConfig> {
            readonly input: ListReviewableHITsCommandInput;
            constructor(input: ListReviewableHITsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListReviewableHITsCommandInput, ListReviewableHITsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListReviewPolicyResultsForHITCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListReviewPolicyResultsForHITRequest, ListReviewPolicyResultsForHITResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface ListReviewPolicyResultsForHITCommandInput extends ListReviewPolicyResultsForHITRequest {
    }
    export interface ListReviewPolicyResultsForHITCommandOutput extends ListReviewPolicyResultsForHITResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>ListReviewPolicyResultsForHIT</code> operation retrieves the computed results
        *             and the actions taken in the course of executing your Review Policies for a given HIT.
        *             For information about how to specify Review Policies when you call CreateHIT,
        *             see Review Policies. The ListReviewPolicyResultsForHIT operation can return results for both
        *             Assignment-level and HIT-level review results.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, ListReviewPolicyResultsForHITCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, ListReviewPolicyResultsForHITCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new ListReviewPolicyResultsForHITCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListReviewPolicyResultsForHITCommandInput} for command's `input` shape.
        * @see {@link ListReviewPolicyResultsForHITCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class ListReviewPolicyResultsForHITCommand extends $Command<ListReviewPolicyResultsForHITCommandInput, ListReviewPolicyResultsForHITCommandOutput, MTurkClientResolvedConfig> {
            readonly input: ListReviewPolicyResultsForHITCommandInput;
            constructor(input: ListReviewPolicyResultsForHITCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListReviewPolicyResultsForHITCommandInput, ListReviewPolicyResultsForHITCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListWorkerBlocksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListWorkerBlocksRequest, ListWorkerBlocksResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface ListWorkerBlocksCommandInput extends ListWorkerBlocksRequest {
    }
    export interface ListWorkerBlocksCommandOutput extends ListWorkerBlocksResponse, __MetadataBearer {
    }
    /**
        * <p>The <code>ListWorkersBlocks</code> operation retrieves a list of Workers who are blocked from working on your HITs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, ListWorkerBlocksCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, ListWorkerBlocksCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new ListWorkerBlocksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorkerBlocksCommandInput} for command's `input` shape.
        * @see {@link ListWorkerBlocksCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class ListWorkerBlocksCommand extends $Command<ListWorkerBlocksCommandInput, ListWorkerBlocksCommandOutput, MTurkClientResolvedConfig> {
            readonly input: ListWorkerBlocksCommandInput;
            constructor(input: ListWorkerBlocksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorkerBlocksCommandInput, ListWorkerBlocksCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListWorkersWithQualificationTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListWorkersWithQualificationTypeRequest, ListWorkersWithQualificationTypeResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface ListWorkersWithQualificationTypeCommandInput extends ListWorkersWithQualificationTypeRequest {
    }
    export interface ListWorkersWithQualificationTypeCommandOutput extends ListWorkersWithQualificationTypeResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>ListWorkersWithQualificationType</code> operation returns all of the Workers
        *             that have been associated with a given Qualification type.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, ListWorkersWithQualificationTypeCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, ListWorkersWithQualificationTypeCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new ListWorkersWithQualificationTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListWorkersWithQualificationTypeCommandInput} for command's `input` shape.
        * @see {@link ListWorkersWithQualificationTypeCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class ListWorkersWithQualificationTypeCommand extends $Command<ListWorkersWithQualificationTypeCommandInput, ListWorkersWithQualificationTypeCommandOutput, MTurkClientResolvedConfig> {
            readonly input: ListWorkersWithQualificationTypeCommandInput;
            constructor(input: ListWorkersWithQualificationTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListWorkersWithQualificationTypeCommandInput, ListWorkersWithQualificationTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/NotifyWorkersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { NotifyWorkersRequest, NotifyWorkersResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface NotifyWorkersCommandInput extends NotifyWorkersRequest {
    }
    export interface NotifyWorkersCommandOutput extends NotifyWorkersResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>NotifyWorkers</code>
        *             operation sends an email to one or more Workers that you specify with
        *             the Worker ID. You can specify up to 100 Worker IDs to send the same
        *             message with a single call to the NotifyWorkers operation. The
        *             NotifyWorkers operation will send a notification email to a Worker
        *             only if you have previously approved or rejected work from the
        *             Worker.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, NotifyWorkersCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, NotifyWorkersCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new NotifyWorkersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link NotifyWorkersCommandInput} for command's `input` shape.
        * @see {@link NotifyWorkersCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class NotifyWorkersCommand extends $Command<NotifyWorkersCommandInput, NotifyWorkersCommandOutput, MTurkClientResolvedConfig> {
            readonly input: NotifyWorkersCommandInput;
            constructor(input: NotifyWorkersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<NotifyWorkersCommandInput, NotifyWorkersCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/RejectAssignmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RejectAssignmentRequest, RejectAssignmentResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface RejectAssignmentCommandInput extends RejectAssignmentRequest {
    }
    export interface RejectAssignmentCommandOutput extends RejectAssignmentResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>RejectAssignment</code> operation rejects the results of a completed assignment.
        *         </p>
        *         <p>
        *             You can include an optional feedback message with the rejection,
        *             which the Worker can see in the Status section of the web site.
        *             When you include a feedback message with the rejection,
        *             it helps the Worker understand why the assignment was rejected,
        *             and can improve the quality of the results the Worker submits in the future.
        *         </p>
        *         <p>
        *             Only the Requester who created the HIT can reject an assignment for the HIT.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, RejectAssignmentCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, RejectAssignmentCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new RejectAssignmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RejectAssignmentCommandInput} for command's `input` shape.
        * @see {@link RejectAssignmentCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class RejectAssignmentCommand extends $Command<RejectAssignmentCommandInput, RejectAssignmentCommandOutput, MTurkClientResolvedConfig> {
            readonly input: RejectAssignmentCommandInput;
            constructor(input: RejectAssignmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RejectAssignmentCommandInput, RejectAssignmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/RejectQualificationRequestCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { RejectQualificationRequestRequest, RejectQualificationRequestResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface RejectQualificationRequestCommandInput extends RejectQualificationRequestRequest {
    }
    export interface RejectQualificationRequestCommandOutput extends RejectQualificationRequestResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>RejectQualificationRequest</code>
        *             operation rejects a user's request for a Qualification.
        *         </p>
        *         <p> You can provide a text message explaining why the request was
        *             rejected. The Worker who made the request can see this message.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, RejectQualificationRequestCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, RejectQualificationRequestCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new RejectQualificationRequestCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RejectQualificationRequestCommandInput} for command's `input` shape.
        * @see {@link RejectQualificationRequestCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class RejectQualificationRequestCommand extends $Command<RejectQualificationRequestCommandInput, RejectQualificationRequestCommandOutput, MTurkClientResolvedConfig> {
            readonly input: RejectQualificationRequestCommandInput;
            constructor(input: RejectQualificationRequestCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RejectQualificationRequestCommandInput, RejectQualificationRequestCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/SendBonusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendBonusRequest, SendBonusResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface SendBonusCommandInput extends SendBonusRequest {
    }
    export interface SendBonusCommandOutput extends SendBonusResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>SendBonus</code>
        *             operation issues a payment of money from your account to a Worker.
        *             This payment happens separately from the reward you pay to the Worker
        *             when you approve the Worker's assignment. The SendBonus operation
        *             requires the Worker's ID and the assignment ID as parameters to
        *             initiate payment of the bonus. You must include a message that
        *             explains the reason for the bonus payment, as the Worker may not be
        *             expecting the payment. Amazon Mechanical Turk collects a fee for
        *             bonus payments, similar to the HIT listing fee. This operation fails
        *             if your account does not have enough funds to pay for both the bonus
        *             and the fees.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, SendBonusCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, SendBonusCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new SendBonusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendBonusCommandInput} for command's `input` shape.
        * @see {@link SendBonusCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class SendBonusCommand extends $Command<SendBonusCommandInput, SendBonusCommandOutput, MTurkClientResolvedConfig> {
            readonly input: SendBonusCommandInput;
            constructor(input: SendBonusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendBonusCommandInput, SendBonusCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/SendTestEventNotificationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SendTestEventNotificationRequest, SendTestEventNotificationResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface SendTestEventNotificationCommandInput extends SendTestEventNotificationRequest {
    }
    export interface SendTestEventNotificationCommandOutput extends SendTestEventNotificationResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>SendTestEventNotification</code> operation causes Amazon Mechanical Turk to send
        *             a notification message as if a HIT event occurred, according to the provided
        *             notification specification. This allows you to test notifications without
        *             setting up notifications for a real HIT type and trying to trigger them using the website.
        *             When you call this operation, the service attempts to send the test notification immediately.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, SendTestEventNotificationCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, SendTestEventNotificationCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new SendTestEventNotificationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendTestEventNotificationCommandInput} for command's `input` shape.
        * @see {@link SendTestEventNotificationCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class SendTestEventNotificationCommand extends $Command<SendTestEventNotificationCommandInput, SendTestEventNotificationCommandOutput, MTurkClientResolvedConfig> {
            readonly input: SendTestEventNotificationCommandInput;
            constructor(input: SendTestEventNotificationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendTestEventNotificationCommandInput, SendTestEventNotificationCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateExpirationForHITCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateExpirationForHITRequest, UpdateExpirationForHITResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface UpdateExpirationForHITCommandInput extends UpdateExpirationForHITRequest {
    }
    export interface UpdateExpirationForHITCommandOutput extends UpdateExpirationForHITResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>UpdateExpirationForHIT</code> operation allows you update the expiration time of a HIT.
        *             If you update it to a time in the past, the HIT will be immediately expired.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, UpdateExpirationForHITCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, UpdateExpirationForHITCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new UpdateExpirationForHITCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateExpirationForHITCommandInput} for command's `input` shape.
        * @see {@link UpdateExpirationForHITCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class UpdateExpirationForHITCommand extends $Command<UpdateExpirationForHITCommandInput, UpdateExpirationForHITCommandOutput, MTurkClientResolvedConfig> {
            readonly input: UpdateExpirationForHITCommandInput;
            constructor(input: UpdateExpirationForHITCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateExpirationForHITCommandInput, UpdateExpirationForHITCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateHITReviewStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateHITReviewStatusRequest, UpdateHITReviewStatusResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface UpdateHITReviewStatusCommandInput extends UpdateHITReviewStatusRequest {
    }
    export interface UpdateHITReviewStatusCommandOutput extends UpdateHITReviewStatusResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>UpdateHITReviewStatus</code> operation updates the status of a HIT.
        *             If the status is Reviewable, this operation can update the status to Reviewing,
        *             or it can revert a Reviewing HIT back to the Reviewable status.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, UpdateHITReviewStatusCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, UpdateHITReviewStatusCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new UpdateHITReviewStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateHITReviewStatusCommandInput} for command's `input` shape.
        * @see {@link UpdateHITReviewStatusCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class UpdateHITReviewStatusCommand extends $Command<UpdateHITReviewStatusCommandInput, UpdateHITReviewStatusCommandOutput, MTurkClientResolvedConfig> {
            readonly input: UpdateHITReviewStatusCommandInput;
            constructor(input: UpdateHITReviewStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateHITReviewStatusCommandInput, UpdateHITReviewStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateHITTypeOfHITCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateHITTypeOfHITRequest, UpdateHITTypeOfHITResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface UpdateHITTypeOfHITCommandInput extends UpdateHITTypeOfHITRequest {
    }
    export interface UpdateHITTypeOfHITCommandOutput extends UpdateHITTypeOfHITResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>UpdateHITTypeOfHIT</code>
        *             operation allows you to change the HITType properties of a HIT. This
        *             operation disassociates the HIT from its old HITType properties and
        *             associates it with the new HITType properties. The HIT takes on the
        *             properties of the new HITType in place of the old ones.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, UpdateHITTypeOfHITCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, UpdateHITTypeOfHITCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new UpdateHITTypeOfHITCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateHITTypeOfHITCommandInput} for command's `input` shape.
        * @see {@link UpdateHITTypeOfHITCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class UpdateHITTypeOfHITCommand extends $Command<UpdateHITTypeOfHITCommandInput, UpdateHITTypeOfHITCommandOutput, MTurkClientResolvedConfig> {
            readonly input: UpdateHITTypeOfHITCommandInput;
            constructor(input: UpdateHITTypeOfHITCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateHITTypeOfHITCommandInput, UpdateHITTypeOfHITCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateNotificationSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateNotificationSettingsRequest, UpdateNotificationSettingsResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface UpdateNotificationSettingsCommandInput extends UpdateNotificationSettingsRequest {
    }
    export interface UpdateNotificationSettingsCommandOutput extends UpdateNotificationSettingsResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The <code>UpdateNotificationSettings</code> operation creates, updates,
        *             disables or re-enables notifications for a HIT type.
        *             If you call the UpdateNotificationSettings operation for a HIT type that already has a
        *             notification specification, the operation replaces the old specification with a new one.
        *             You can call the UpdateNotificationSettings operation to enable or disable notifications
        *             for the HIT type, without having to modify the notification specification itself by providing
        *             updates to the Active status without specifying a new notification specification.
        *             To change the Active status of a HIT type's notifications,
        *             the HIT type must already have a notification specification,
        *             or one must be provided in the same call to <code>UpdateNotificationSettings</code>.
        *         </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, UpdateNotificationSettingsCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, UpdateNotificationSettingsCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new UpdateNotificationSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateNotificationSettingsCommandInput} for command's `input` shape.
        * @see {@link UpdateNotificationSettingsCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class UpdateNotificationSettingsCommand extends $Command<UpdateNotificationSettingsCommandInput, UpdateNotificationSettingsCommandOutput, MTurkClientResolvedConfig> {
            readonly input: UpdateNotificationSettingsCommandInput;
            constructor(input: UpdateNotificationSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateNotificationSettingsCommandInput, UpdateNotificationSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateQualificationTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateQualificationTypeRequest, UpdateQualificationTypeResponse } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0";
    import { MTurkClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient";
    export interface UpdateQualificationTypeCommandInput extends UpdateQualificationTypeRequest {
    }
    export interface UpdateQualificationTypeCommandOutput extends UpdateQualificationTypeResponse, __MetadataBearer {
    }
    /**
        * <p>
        *             The
        *             <code>UpdateQualificationType</code>
        *             operation modifies the attributes of an existing Qualification type,
        *             which is represented by a QualificationType data structure. Only the
        *             owner of a Qualification type can modify its attributes.
        *         </p>
        *         <p> Most attributes of a Qualification type can be changed after
        *             the type has been created. However, the Name and Keywords fields
        *             cannot be modified. The RetryDelayInSeconds parameter can be modified
        *             or added to change the delay or to enable retries, but
        *             RetryDelayInSeconds cannot be used to disable retries. </p>
        *         <p> You can use this operation to update the test for a
        *             Qualification type. The test is updated based on the values specified
        *             for the Test, TestDurationInSeconds and AnswerKey parameters. All
        *             three parameters specify the updated test. If you are updating the
        *             test for a type, you must specify the Test and TestDurationInSeconds
        *             parameters. The AnswerKey parameter is optional; omitting it specifies
        *             that the updated test does not have an answer key. </p>
        *         <p> If you omit the Test parameter, the test for the
        *             Qualification type is unchanged. There is no way to remove a test from
        *             a Qualification type that has one. If the type already has a test, you
        *             cannot update it to be AutoGranted. If the Qualification type does not
        *             have a test and one is provided by an update, the type will henceforth
        *             have a test. </p>
        *         <p> If you want to update the test duration or answer key for an
        *             existing test without changing the questions, you must specify a Test
        *             parameter with the original questions, along with the updated values. </p>
        *         <p> If you provide an updated Test but no AnswerKey, the new test
        *             will not have an answer key. Requests for such Qualifications must be
        *             granted manually. </p>
        *         <p> You can also update the AutoGranted and AutoGrantedValue
        *             attributes of the Qualification type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MTurkClient, UpdateQualificationTypeCommand } from "@aws-sdk/client-mturk"; // ES Modules import
        * // const { MTurkClient, UpdateQualificationTypeCommand } = require("@aws-sdk/client-mturk"); // CommonJS import
        * const client = new MTurkClient(config);
        * const command = new UpdateQualificationTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateQualificationTypeCommandInput} for command's `input` shape.
        * @see {@link UpdateQualificationTypeCommandOutput} for command's `response` shape.
        * @see {@link MTurkClientResolvedConfig | config} for MTurkClient's `config` shape.
        *
        */
    export class UpdateQualificationTypeCommand extends $Command<UpdateQualificationTypeCommandInput, UpdateQualificationTypeCommandOutput, MTurkClientResolvedConfig> {
            readonly input: UpdateQualificationTypeCommandInput;
            constructor(input: UpdateQualificationTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MTurkClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateQualificationTypeCommandInput, UpdateQualificationTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/MTurkClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AcceptQualificationRequestCommandInput, AcceptQualificationRequestCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/AcceptQualificationRequestCommand";
    import { ApproveAssignmentCommandInput, ApproveAssignmentCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ApproveAssignmentCommand";
    import { AssociateQualificationWithWorkerCommandInput, AssociateQualificationWithWorkerCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/AssociateQualificationWithWorkerCommand";
    import { CreateAdditionalAssignmentsForHITCommandInput, CreateAdditionalAssignmentsForHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateAdditionalAssignmentsForHITCommand";
    import { CreateHITCommandInput, CreateHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateHITCommand";
    import { CreateHITTypeCommandInput, CreateHITTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateHITTypeCommand";
    import { CreateHITWithHITTypeCommandInput, CreateHITWithHITTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateHITWithHITTypeCommand";
    import { CreateQualificationTypeCommandInput, CreateQualificationTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateQualificationTypeCommand";
    import { CreateWorkerBlockCommandInput, CreateWorkerBlockCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/CreateWorkerBlockCommand";
    import { DeleteHITCommandInput, DeleteHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/DeleteHITCommand";
    import { DeleteQualificationTypeCommandInput, DeleteQualificationTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/DeleteQualificationTypeCommand";
    import { DeleteWorkerBlockCommandInput, DeleteWorkerBlockCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/DeleteWorkerBlockCommand";
    import { DisassociateQualificationFromWorkerCommandInput, DisassociateQualificationFromWorkerCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/DisassociateQualificationFromWorkerCommand";
    import { GetAccountBalanceCommandInput, GetAccountBalanceCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetAccountBalanceCommand";
    import { GetAssignmentCommandInput, GetAssignmentCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetAssignmentCommand";
    import { GetFileUploadURLCommandInput, GetFileUploadURLCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetFileUploadURLCommand";
    import { GetHITCommandInput, GetHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetHITCommand";
    import { GetQualificationScoreCommandInput, GetQualificationScoreCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetQualificationScoreCommand";
    import { GetQualificationTypeCommandInput, GetQualificationTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/GetQualificationTypeCommand";
    import { ListAssignmentsForHITCommandInput, ListAssignmentsForHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListAssignmentsForHITCommand";
    import { ListBonusPaymentsCommandInput, ListBonusPaymentsCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListBonusPaymentsCommand";
    import { ListHITsCommandInput, ListHITsCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListHITsCommand";
    import { ListHITsForQualificationTypeCommandInput, ListHITsForQualificationTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListHITsForQualificationTypeCommand";
    import { ListQualificationRequestsCommandInput, ListQualificationRequestsCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListQualificationRequestsCommand";
    import { ListQualificationTypesCommandInput, ListQualificationTypesCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListQualificationTypesCommand";
    import { ListReviewableHITsCommandInput, ListReviewableHITsCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListReviewableHITsCommand";
    import { ListReviewPolicyResultsForHITCommandInput, ListReviewPolicyResultsForHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListReviewPolicyResultsForHITCommand";
    import { ListWorkerBlocksCommandInput, ListWorkerBlocksCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListWorkerBlocksCommand";
    import { ListWorkersWithQualificationTypeCommandInput, ListWorkersWithQualificationTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/ListWorkersWithQualificationTypeCommand";
    import { NotifyWorkersCommandInput, NotifyWorkersCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/NotifyWorkersCommand";
    import { RejectAssignmentCommandInput, RejectAssignmentCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/RejectAssignmentCommand";
    import { RejectQualificationRequestCommandInput, RejectQualificationRequestCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/RejectQualificationRequestCommand";
    import { SendBonusCommandInput, SendBonusCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/SendBonusCommand";
    import { SendTestEventNotificationCommandInput, SendTestEventNotificationCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/SendTestEventNotificationCommand";
    import { UpdateExpirationForHITCommandInput, UpdateExpirationForHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateExpirationForHITCommand";
    import { UpdateHITReviewStatusCommandInput, UpdateHITReviewStatusCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateHITReviewStatusCommand";
    import { UpdateHITTypeOfHITCommandInput, UpdateHITTypeOfHITCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateHITTypeOfHITCommand";
    import { UpdateNotificationSettingsCommandInput, UpdateNotificationSettingsCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateNotificationSettingsCommand";
    import { UpdateQualificationTypeCommandInput, UpdateQualificationTypeCommandOutput } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/commands/UpdateQualificationTypeCommand";
    export type ServiceInputTypes = AcceptQualificationRequestCommandInput | ApproveAssignmentCommandInput | AssociateQualificationWithWorkerCommandInput | CreateAdditionalAssignmentsForHITCommandInput | CreateHITCommandInput | CreateHITTypeCommandInput | CreateHITWithHITTypeCommandInput | CreateQualificationTypeCommandInput | CreateWorkerBlockCommandInput | DeleteHITCommandInput | DeleteQualificationTypeCommandInput | DeleteWorkerBlockCommandInput | DisassociateQualificationFromWorkerCommandInput | GetAccountBalanceCommandInput | GetAssignmentCommandInput | GetFileUploadURLCommandInput | GetHITCommandInput | GetQualificationScoreCommandInput | GetQualificationTypeCommandInput | ListAssignmentsForHITCommandInput | ListBonusPaymentsCommandInput | ListHITsCommandInput | ListHITsForQualificationTypeCommandInput | ListQualificationRequestsCommandInput | ListQualificationTypesCommandInput | ListReviewPolicyResultsForHITCommandInput | ListReviewableHITsCommandInput | ListWorkerBlocksCommandInput | ListWorkersWithQualificationTypeCommandInput | NotifyWorkersCommandInput | RejectAssignmentCommandInput | RejectQualificationRequestCommandInput | SendBonusCommandInput | SendTestEventNotificationCommandInput | UpdateExpirationForHITCommandInput | UpdateHITReviewStatusCommandInput | UpdateHITTypeOfHITCommandInput | UpdateNotificationSettingsCommandInput | UpdateQualificationTypeCommandInput;
    export type ServiceOutputTypes = AcceptQualificationRequestCommandOutput | ApproveAssignmentCommandOutput | AssociateQualificationWithWorkerCommandOutput | CreateAdditionalAssignmentsForHITCommandOutput | CreateHITCommandOutput | CreateHITTypeCommandOutput | CreateHITWithHITTypeCommandOutput | CreateQualificationTypeCommandOutput | CreateWorkerBlockCommandOutput | DeleteHITCommandOutput | DeleteQualificationTypeCommandOutput | DeleteWorkerBlockCommandOutput | DisassociateQualificationFromWorkerCommandOutput | GetAccountBalanceCommandOutput | GetAssignmentCommandOutput | GetFileUploadURLCommandOutput | GetHITCommandOutput | GetQualificationScoreCommandOutput | GetQualificationTypeCommandOutput | ListAssignmentsForHITCommandOutput | ListBonusPaymentsCommandOutput | ListHITsCommandOutput | ListHITsForQualificationTypeCommandOutput | ListQualificationRequestsCommandOutput | ListQualificationTypesCommandOutput | ListReviewPolicyResultsForHITCommandOutput | ListReviewableHITsCommandOutput | ListWorkerBlocksCommandOutput | ListWorkersWithQualificationTypeCommandOutput | NotifyWorkersCommandOutput | RejectAssignmentCommandOutput | RejectQualificationRequestCommandOutput | SendBonusCommandOutput | SendTestEventNotificationCommandOutput | UpdateExpirationForHITCommandOutput | UpdateHITReviewStatusCommandOutput | UpdateHITTypeOfHITCommandOutput | UpdateNotificationSettingsCommandOutput | UpdateQualificationTypeCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type MTurkClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of MTurkClient class constructor that set the region, credentials and other options.
        */
    export interface MTurkClientConfig extends MTurkClientConfigType {
    }
    type MTurkClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of MTurkClient class. This is resolved and normalized from the {@link MTurkClientConfig | constructor configuration interface}.
        */
    export interface MTurkClientResolvedConfig extends MTurkClientResolvedConfigType {
    }
    /**
        * <fullname>Amazon Mechanical Turk API Reference</fullname>
        */
    export class MTurkClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, MTurkClientResolvedConfig> {
            /**
                * The resolved configuration of MTurkClient class. This is resolved and normalized from the {@link MTurkClientConfig | constructor configuration interface}.
                */
            readonly config: MTurkClientResolvedConfig;
            constructor(configuration: MTurkClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { MTurkServiceException as __BaseException } from "@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/MTurkServiceException";
    export interface AcceptQualificationRequestRequest {
            /**
                * <p>The ID of the Qualification request, as returned by the <code>GetQualificationRequests</code> operation.</p>
                */
            QualificationRequestId: string | undefined;
            /**
                * <p>
                *             The value of the Qualification. You can omit this value if you are using the
                *             presence or absence of the Qualification as the basis for a HIT requirement.
                *         </p>
                */
            IntegerValue?: number;
    }
    export namespace AcceptQualificationRequestRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AcceptQualificationRequestRequest) => any;
    }
    export interface AcceptQualificationRequestResponse {
    }
    export namespace AcceptQualificationRequestResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AcceptQualificationRequestResponse) => any;
    }
    /**
        * <p>Your request is invalid.</p>
        */
    export class RequestError extends __BaseException {
            readonly name: "RequestError";
            readonly $fault: "client";
            Message?: string;
            TurkErrorCode?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<RequestError, __BaseException>);
    }
    /**
        * <p>Amazon Mechanical Turk is temporarily unable to process your request. Try your call again.</p>
        */
    export class ServiceFault extends __BaseException {
            readonly name: "ServiceFault";
            readonly $fault: "server";
            Message?: string;
            TurkErrorCode?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceFault, __BaseException>);
    }
    export interface ApproveAssignmentRequest {
            /**
                * <p>
                *             The ID of the assignment. The assignment must correspond to a HIT created by the Requester.
                *         </p>
                */
            AssignmentId: string | undefined;
            /**
                * <p>
                *             A message for the Worker, which the Worker can see in the Status section of the web site.
                *         </p>
                */
            RequesterFeedback?: string;
            /**
                * <p>
                *             A flag indicating that an assignment should be approved even if it was previously rejected. Defaults to <code>False</code>.
                *         </p>
                */
            OverrideRejection?: boolean;
    }
    export namespace ApproveAssignmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApproveAssignmentRequest) => any;
    }
    export interface ApproveAssignmentResponse {
    }
    export namespace ApproveAssignmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApproveAssignmentResponse) => any;
    }
    export enum AssignmentStatus {
            Approved = "Approved",
            Rejected = "Rejected",
            Submitted = "Submitted"
    }
    /**
        * <p> The Assignment data structure represents a single assignment
        *             of a HIT to a Worker. The assignment tracks the Worker's efforts to
        *             complete the HIT, and contains the results for later retrieval.
        *         </p>
        */
    export interface Assignment {
            /**
                * <p> A unique identifier for the assignment.</p>
                */
            AssignmentId?: string;
            /**
                * <p> The ID of the Worker who accepted the HIT.</p>
                */
            WorkerId?: string;
            /**
                * <p> The ID of the HIT.</p>
                */
            HITId?: string;
            /**
                * <p> The status of the assignment.</p>
                */
            AssignmentStatus?: AssignmentStatus | string;
            /**
                * <p> If results have been submitted, AutoApprovalTime is the date
                *             and time the results of the assignment results are considered
                *             Approved automatically if they have not already been explicitly
                *             approved or rejected by the Requester. This value is derived from the
                *             auto-approval delay specified by the Requester in the HIT. This value
                *             is omitted from the assignment if the Worker has not yet submitted
                *             results.</p>
                */
            AutoApprovalTime?: Date;
            /**
                * <p> The date and time the Worker accepted the assignment.</p>
                */
            AcceptTime?: Date;
            /**
                * <p> If the Worker has submitted results, SubmitTime is the date
                *             and time the assignment was submitted. This value is omitted from the
                *             assignment if the Worker has not yet submitted results.</p>
                */
            SubmitTime?: Date;
            /**
                * <p> If the Worker has submitted results and the Requester has
                *             approved the results, ApprovalTime is the date and time the Requester
                *             approved the results. This value is omitted from the assignment if
                *             the Requester has not yet approved the results.</p>
                */
            ApprovalTime?: Date;
            /**
                * <p> If the Worker has submitted results and the Requester has
                *             rejected the results, RejectionTime is the date and time the
                *             Requester rejected the results.</p>
                */
            RejectionTime?: Date;
            /**
                * <p> The date and time of the deadline for the assignment. This
                *             value is derived from the deadline specification for the HIT and the
                *             date and time the Worker accepted the HIT.</p>
                */
            Deadline?: Date;
            /**
                * <p> The Worker's answers submitted for the HIT contained in a
                *             QuestionFormAnswers document, if the Worker provides an answer. If
                *             the Worker does not provide any answers, Answer may contain a
                *             QuestionFormAnswers document, or Answer may be empty.</p>
                */
            Answer?: string;
            /**
                * <p> The feedback string included with the call to the
                *             ApproveAssignment operation or the RejectAssignment operation, if the
                *             Requester approved or rejected the assignment and specified feedback.</p>
                */
            RequesterFeedback?: string;
    }
    export namespace Assignment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Assignment) => any;
    }
    export interface AssociateQualificationWithWorkerRequest {
            /**
                * <p>The ID of the Qualification type to use for the assigned Qualification.</p>
                */
            QualificationTypeId: string | undefined;
            /**
                * <p>
                *             The ID of the Worker to whom the Qualification is being assigned.
                *             Worker IDs are included with submitted HIT assignments and Qualification requests.
                *         </p>
                */
            WorkerId: string | undefined;
            /**
                * <p>The value of the Qualification to assign.</p>
                */
            IntegerValue?: number;
            /**
                * <p>
                *             Specifies whether to send a notification email message to the Worker
                *             saying that the qualification was assigned to the Worker.
                *             Note: this is true by default.
                *         </p>
                */
            SendNotification?: boolean;
    }
    export namespace AssociateQualificationWithWorkerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateQualificationWithWorkerRequest) => any;
    }
    export interface AssociateQualificationWithWorkerResponse {
    }
    export namespace AssociateQualificationWithWorkerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateQualificationWithWorkerResponse) => any;
    }
    /**
        * <p>An object representing a Bonus payment paid to a Worker.</p>
        */
    export interface BonusPayment {
            /**
                * <p>The ID of the Worker to whom the bonus was paid.</p>
                */
            WorkerId?: string;
            /**
                * <p>A string representing a currency amount.</p>
                */
            BonusAmount?: string;
            /**
                * <p>The ID of the assignment associated with this bonus payment.</p>
                */
            AssignmentId?: string;
            /**
                * <p>The Reason text given when the bonus was granted, if any.</p>
                */
            Reason?: string;
            /**
                * <p>The date and time of when the bonus was granted.</p>
                */
            GrantTime?: Date;
    }
    export namespace BonusPayment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BonusPayment) => any;
    }
    export enum Comparator {
            DoesNotExist = "DoesNotExist",
            EqualTo = "EqualTo",
            Exists = "Exists",
            GreaterThan = "GreaterThan",
            GreaterThanOrEqualTo = "GreaterThanOrEqualTo",
            In = "In",
            LessThan = "LessThan",
            LessThanOrEqualTo = "LessThanOrEqualTo",
            NotEqualTo = "NotEqualTo",
            NotIn = "NotIn"
    }
    export interface CreateAdditionalAssignmentsForHITRequest {
            /**
                * <p>The ID of the HIT to extend.</p>
                */
            HITId: string | undefined;
            /**
                * <p>The number of additional assignments to request for this HIT.</p>
                */
            NumberOfAdditionalAssignments: number | undefined;
            /**
                * <p>
                *             A unique identifier for this request, which allows you to retry the call on error
                *             without extending the HIT multiple times.
                *             This is useful in cases such as network timeouts where it is unclear whether or not
                *             the call succeeded on the server. If the extend HIT already exists in the system
                *             from a previous call using the same <code>UniqueRequestToken</code>,
                *             subsequent calls will return an error with a message containing the request ID.
                *         </p>
                */
            UniqueRequestToken?: string;
    }
    export namespace CreateAdditionalAssignmentsForHITRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAdditionalAssignmentsForHITRequest) => any;
    }
    export interface CreateAdditionalAssignmentsForHITResponse {
    }
    export namespace CreateAdditionalAssignmentsForHITResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAdditionalAssignmentsForHITResponse) => any;
    }
    /**
        * <p> This data structure is the data type for the AnswerKey
        *             parameter of the ScoreMyKnownAnswers/2011-09-01 Review Policy.
        *         </p>
        */
    export interface ParameterMapEntry {
            /**
                * <p> The QuestionID from the HIT that is used to identify which
                *             question requires Mechanical Turk to score as part of the
                *             ScoreMyKnownAnswers/2011-09-01 Review Policy.
                *         </p>
                */
            Key?: string;
            /**
                * <p> The list of answers to the question specified in the
                *             MapEntry Key element. The Worker must match all values in order for
                *             the answer to be scored correctly.
                *         </p>
                */
            Values?: string[];
    }
    export namespace ParameterMapEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ParameterMapEntry) => any;
    }
    /**
        * <p> Name of the parameter from the Review policy.
        *         </p>
        */
    export interface PolicyParameter {
            /**
                * <p> Name of the parameter from the list of Review Polices.
                *         </p>
                */
            Key?: string;
            /**
                * <p> The list of values of the Parameter</p>
                */
            Values?: string[];
            /**
                * <p> List of ParameterMapEntry objects.
                *         </p>
                */
            MapEntries?: ParameterMapEntry[];
    }
    export namespace PolicyParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyParameter) => any;
    }
    /**
        * <p> HIT Review Policy data structures represent HIT review
        *             policies, which you specify when you create a HIT.
        *         </p>
        */
    export interface ReviewPolicy {
            /**
                * <p> Name of a Review Policy: SimplePlurality/2011-09-01 or
                *             ScoreMyKnownAnswers/2011-09-01
                *         </p>
                */
            PolicyName: string | undefined;
            /**
                * <p>Name of the parameter from the Review policy.</p>
                */
            Parameters?: PolicyParameter[];
    }
    export namespace ReviewPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReviewPolicy) => any;
    }
    /**
        * <p> The HITLayoutParameter data structure defines parameter
        *             values used with a HITLayout. A HITLayout is a reusable Amazon
        *             Mechanical Turk project template used to provide Human Intelligence
        *             Task (HIT) question data for CreateHIT.
        *         </p>
        */
    export interface HITLayoutParameter {
            /**
                * <p> The name of the parameter in the HITLayout.
                *         </p>
                */
            Name: string | undefined;
            /**
                * <p>The value substituted for the parameter referenced in the
                *             HITLayout.
                *         </p>
                */
            Value: string | undefined;
    }
    export namespace HITLayoutParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HITLayoutParameter) => any;
    }
    export enum HITAccessActions {
            Accept = "Accept",
            DiscoverPreviewAndAccept = "DiscoverPreviewAndAccept",
            PreviewAndAccept = "PreviewAndAccept"
    }
    /**
        * <p>The Locale data structure represents a geographical region or location.</p>
        */
    export interface Locale {
            /**
                * <p> The country of the locale. Must be a valid ISO 3166 country
                *             code. For example, the code US refers to the United States of
                *             America.
                *         </p>
                */
            Country: string | undefined;
            /**
                * <p>The state or subdivision of the locale. A valid ISO 3166-2
                *             subdivision code. For example, the code WA refers to the state of
                *             Washington.</p>
                */
            Subdivision?: string;
    }
    export namespace Locale {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Locale) => any;
    }
    /**
        * <p>
        *             The QualificationRequirement data structure describes a Qualification that a Worker must have
        *             before the Worker is allowed to accept a HIT.
        *             A requirement may optionally state that a Worker must have the Qualification in order to preview the HIT, or
        *             see the HIT in search results.
        *         </p>
        */
    export interface QualificationRequirement {
            /**
                * <p> The ID of the Qualification type for the requirement.</p>
                */
            QualificationTypeId: string | undefined;
            /**
                * <p>The kind of comparison to make against a Qualification's
                *             value. You can compare a Qualification's value to an IntegerValue to
                *             see if it is LessThan, LessThanOrEqualTo, GreaterThan,
                *             GreaterThanOrEqualTo, EqualTo, or NotEqualTo the IntegerValue. You
                *             can compare it to a LocaleValue to see if it is EqualTo, or
                *             NotEqualTo the LocaleValue. You can check to see if the value is In
                *             or NotIn a set of IntegerValue
                *             or LocaleValue values. Lastly, a
                *             Qualification requirement can also
                *             test if a Qualification Exists or
                *             DoesNotExist in the user's profile,
                *             regardless of its value.
                *         </p>
                */
            Comparator: Comparator | string | undefined;
            /**
                * <p> The integer value to compare against the Qualification's
                *             value. IntegerValue must not be present if Comparator is Exists or
                *             DoesNotExist. IntegerValue can only be used if the Qualification type
                *             has an integer value; it cannot be used with the Worker_Locale
                *             QualificationType ID. When performing a set comparison by using the
                *             In or the NotIn comparator, you can use up to 15 IntegerValue
                *             elements in a QualificationRequirement data structure.
                *         </p>
                */
            IntegerValues?: number[];
            /**
                * <p> The locale value to compare against the Qualification's
                *             value. The local value must be a valid ISO 3166 country code or
                *             supports ISO 3166-2 subdivisions. LocaleValue can only be used with a
                *             Worker_Locale QualificationType ID. LocaleValue can only be used with
                *             the EqualTo, NotEqualTo, In, and NotIn comparators. You must only use
                *             a single LocaleValue element when using the EqualTo or NotEqualTo
                *             comparators. When performing a set comparison by using the In or the
                *             NotIn comparator, you can use up to 30 LocaleValue elements in a
                *             QualificationRequirement data structure.
                *         </p>
                */
            LocaleValues?: Locale[];
            /**
                * @deprecated
                *
                * <p> DEPRECATED: Use the <code>ActionsGuarded</code> field instead.
                *             If RequiredToPreview is true, the question data for the HIT will not be shown
                *             when a Worker whose Qualifications do not meet this requirement tries
                *             to preview the HIT. That is, a Worker's Qualifications must meet all
                *             of the requirements for which RequiredToPreview is true in order to
                *             preview the HIT. If a Worker meets all of the requirements where
                *             RequiredToPreview is true (or if there are no such requirements), but
                *             does not meet all of the requirements for the HIT, the Worker will be
                *             allowed to preview the HIT's question data, but will not be allowed
                *             to accept and complete the HIT. The default is false. This should not
                *             be used in combination with the <code>ActionsGuarded</code> field.
                *         </p>
                */
            RequiredToPreview?: boolean;
            /**
                * <p> Setting this attribute prevents Workers whose Qualifications do not meet
                *             this QualificationRequirement from taking the specified action. Valid arguments include
                *             "Accept" (Worker cannot accept the HIT, but can preview the HIT and see it in their search results),
                *             "PreviewAndAccept" (Worker cannot accept or preview the HIT, but can see the HIT in their search results),
                *             and "DiscoverPreviewAndAccept" (Worker cannot accept, preview, or see the HIT in their search results). It's possible for you to create a HIT with multiple
                *             QualificationRequirements (which can have different values for the ActionGuarded attribute). In this case,
                *             the Worker is only permitted to perform an action when they have met all QualificationRequirements guarding
                *             the action. The actions in the order of least restrictive to most restrictive are Discover, Preview and Accept.
                *             For example, if a Worker meets all QualificationRequirements that are set to DiscoverPreviewAndAccept, but do
                *             not meet all requirements that are set with PreviewAndAccept, then the Worker will be able to Discover, i.e. see the
                *             HIT in their search result, but will not be able to Preview or Accept the HIT. ActionsGuarded should not be used in combination with the
                *             <code>RequiredToPreview</code> field.
                *         </p>
                */
            ActionsGuarded?: HITAccessActions | string;
    }
    export namespace QualificationRequirement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QualificationRequirement) => any;
    }
    export interface CreateHITRequest {
            /**
                * <p>
                *             The number of times the HIT can be accepted and completed before the HIT becomes unavailable.
                *         </p>
                */
            MaxAssignments?: number;
            /**
                * <p>
                *             The number of seconds after an assignment for the HIT has been submitted,
                *             after which the assignment is considered Approved automatically
                *             unless the Requester explicitly rejects it.
                *         </p>
                */
            AutoApprovalDelayInSeconds?: number;
            /**
                * <p>
                *             An amount of time, in seconds, after which the HIT is no longer available for users to accept.
                *             After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches,
                *             even if not all of the assignments for the HIT have been accepted.
                *         </p>
                */
            LifetimeInSeconds: number | undefined;
            /**
                * <p>
                *             The amount of time, in seconds, that a Worker has to complete the HIT after accepting it.
                *             If a Worker does not complete the assignment within the specified duration,
                *             the assignment is considered abandoned. If the HIT is still active
                *             (that is, its lifetime has not elapsed), the assignment becomes available
                *             for other users to find and accept.
                *         </p>
                */
            AssignmentDurationInSeconds: number | undefined;
            /**
                * <p>
                *             The amount of money the Requester will pay a Worker for successfully completing the HIT.
                *         </p>
                */
            Reward: string | undefined;
            /**
                * <p>
                *             The title of the HIT. A title should be short and descriptive about the kind of task the HIT contains.
                *             On the Amazon Mechanical Turk web site, the HIT title appears in search results,
                *             and everywhere the HIT is mentioned.
                *         </p>
                */
            Title: string | undefined;
            /**
                * <p>
                *             One or more words or phrases that describe the HIT, separated by commas.
                *             These words are used in searches to find HITs.
                *         </p>
                */
            Keywords?: string;
            /**
                * <p>
                *             A general description of the HIT. A description includes detailed information about the kind of task
                *             the HIT contains. On the Amazon Mechanical Turk web site, the HIT description appears in the expanded
                *             view of search results, and in the HIT and assignment screens. A good description gives the user enough
                *             information to evaluate the HIT before accepting it.
                *         </p>
                */
            Description: string | undefined;
            /**
                * <p>
                *             The data the person completing the HIT uses to produce the results.
                *         </p>
                *         <p>
                *             Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure,
                *             or an HTMLQuestion data structure. The XML question data must not be larger than
                *             64 kilobytes (65,535 bytes) in size, including whitespace.
                *         </p>
                *         <p>Either a Question parameter or a HITLayoutId parameter must be provided.</p>
                */
            Question?: string;
            /**
                * <p>
                *             An arbitrary data field.
                *             The RequesterAnnotation parameter lets your application attach arbitrary data
                *             to the HIT for tracking purposes.
                *             For example, this parameter could be an identifier internal to the Requester's application
                *             that corresponds with the HIT.
                *         </p>
                *         <p>
                *             The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT.
                *             It is not shown to the Worker, or any other Requester.
                *         </p>
                *         <p>
                *             The RequesterAnnotation parameter may be different for each HIT you submit.
                *             It does not affect how your HITs are grouped.
                *         </p>
                */
            RequesterAnnotation?: string;
            /**
                * <p>
                *             Conditions that a Worker's Qualifications must meet in order
                *             to accept the HIT. A HIT can have between zero and ten
                *             Qualification requirements. All requirements must be met in
                *             order for a Worker to accept the HIT. Additionally, other
                *             actions can be restricted using the <code>ActionsGuarded</code>
                *             field on each <code>QualificationRequirement</code> structure.
                *         </p>
                */
            QualificationRequirements?: QualificationRequirement[];
            /**
                * <p>
                *             A unique identifier for this request which allows you to retry the call
                *             on error without creating duplicate HITs.
                *             This is useful in cases such as network timeouts where it is unclear whether or not
                *             the call succeeded on the server.
                *             If the HIT already exists in the system from a previous call using the same UniqueRequestToken,
                *             subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error
                *             with a message containing the HITId.
                *         </p>
                *         <note>
                *             <p>
                *                 Note: It is your responsibility to ensure uniqueness of the token.
                *                 The unique token expires after 24 hours. Subsequent calls using the same
                *                 UniqueRequestToken made after the 24 hour limit could create duplicate HITs.
                *             </p>
                *         </note>
                */
            UniqueRequestToken?: string;
            /**
                * <p>
                *             The Assignment-level Review Policy applies to the assignments under the HIT.
                *             You can specify for Mechanical Turk to take various actions based on the policy.
                *         </p>
                */
            AssignmentReviewPolicy?: ReviewPolicy;
            /**
                * <p>
                *             The HIT-level Review Policy applies to the HIT.
                *             You can specify for Mechanical Turk to take various actions based on the policy.
                *         </p>
                */
            HITReviewPolicy?: ReviewPolicy;
            /**
                * <p>
                *             The HITLayoutId allows you to use a pre-existing HIT design with placeholder values
                *             and create an additional HIT by providing those values as HITLayoutParameters.
                *         </p>
                *         <p>
                *             Constraints: Either a Question parameter or a HITLayoutId parameter must be provided.
                *         </p>
                */
            HITLayoutId?: string;
            /**
                * <p>
                *             If the HITLayoutId is provided, any placeholder values must be filled in with values
                *             using the HITLayoutParameter structure. For more information, see HITLayout.
                *         </p>
                */
            HITLayoutParameters?: HITLayoutParameter[];
    }
    export namespace CreateHITRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateHITRequest) => any;
    }
    export enum HITReviewStatus {
            MarkedForReview = "MarkedForReview",
            NotReviewed = "NotReviewed",
            ReviewedAppropriate = "ReviewedAppropriate",
            ReviewedInappropriate = "ReviewedInappropriate"
    }
    export enum HITStatus {
            Assignable = "Assignable",
            Disposed = "Disposed",
            Reviewable = "Reviewable",
            Reviewing = "Reviewing",
            Unassignable = "Unassignable"
    }
    /**
        * <p> The HIT data structure represents a single HIT, including
        *             all the information necessary for a Worker to accept and complete the
        *             HIT.</p>
        */
    export interface HIT {
            /**
                * <p> A unique identifier for the HIT.</p>
                */
            HITId?: string;
            /**
                * <p>The ID of the HIT type of this HIT</p>
                */
            HITTypeId?: string;
            /**
                * <p> The ID of the HIT Group of this HIT.</p>
                */
            HITGroupId?: string;
            /**
                * <p> The ID of the HIT Layout of this HIT.</p>
                */
            HITLayoutId?: string;
            /**
                * <p> The date and time the HIT was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p> The title of the HIT.</p>
                */
            Title?: string;
            /**
                * <p> A general description of the HIT.</p>
                */
            Description?: string;
            /**
                * <p> The data the Worker completing the HIT uses produce the
                *             results. This is either either a QuestionForm, HTMLQuestion or an
                *             ExternalQuestion data structure.</p>
                */
            Question?: string;
            /**
                * <p> One or more words or phrases that describe the HIT,
                *             separated by commas. Search terms similar to the keywords of a HIT
                *             are more likely to have the HIT in the search results.</p>
                */
            Keywords?: string;
            /**
                * <p>The status of the HIT and its assignments. Valid Values are
                *             Assignable | Unassignable | Reviewable | Reviewing | Disposed.
                *         </p>
                */
            HITStatus?: HITStatus | string;
            /**
                * <p>The number of times the HIT can be accepted and completed
                *             before the HIT becomes unavailable.
                *         </p>
                */
            MaxAssignments?: number;
            /**
                * <p>A string representing a currency amount.</p>
                */
            Reward?: string;
            /**
                * <p>The amount of time, in seconds, after the Worker submits an
                *             assignment for the HIT that the results are automatically approved by
                *             Amazon Mechanical Turk. This is the amount of time the Requester has
                *             to reject an assignment submitted by a Worker before the assignment
                *             is auto-approved and the Worker is paid.
                *         </p>
                */
            AutoApprovalDelayInSeconds?: number;
            /**
                * <p>The date and time the HIT expires.</p>
                */
            Expiration?: Date;
            /**
                * <p> The length of time, in seconds, that a Worker has to
                *             complete the HIT after accepting it.</p>
                */
            AssignmentDurationInSeconds?: number;
            /**
                * <p> An arbitrary data field the Requester who created the HIT
                *             can use. This field is visible only to the creator of the HIT.</p>
                */
            RequesterAnnotation?: string;
            /**
                * <p>
                *             Conditions that a Worker's Qualifications must meet in order
                *             to accept the HIT. A HIT can have between zero and ten
                *             Qualification requirements. All requirements must be met in
                *             order for a Worker to accept the HIT. Additionally, other
                *             actions can be restricted using the <code>ActionsGuarded</code>
                *             field on each <code>QualificationRequirement</code> structure.
                *         </p>
                */
            QualificationRequirements?: QualificationRequirement[];
            /**
                * <p> Indicates the review status of the HIT. Valid Values are
                *             NotReviewed | MarkedForReview | ReviewedAppropriate |
                *             ReviewedInappropriate.</p>
                */
            HITReviewStatus?: HITReviewStatus | string;
            /**
                * <p> The number of assignments for this HIT that are being
                *             previewed or have been accepted by Workers, but have not yet been
                *             submitted, returned, or abandoned.</p>
                */
            NumberOfAssignmentsPending?: number;
            /**
                * <p> The number of assignments for this HIT that are available
                *             for Workers to accept.</p>
                */
            NumberOfAssignmentsAvailable?: number;
            /**
                * <p> The number of assignments for this HIT that have been
                *             approved or rejected.</p>
                */
            NumberOfAssignmentsCompleted?: number;
    }
    export namespace HIT {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HIT) => any;
    }
    export interface CreateHITResponse {
            /**
                * <p> Contains the newly created HIT data. For a description of
                *             the HIT data structure as it appears in responses, see the HIT Data
                *             Structure documentation.
                *         </p>
                */
            HIT?: HIT;
    }
    export namespace CreateHITResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateHITResponse) => any;
    }
    export interface CreateHITTypeRequest {
            /**
                * <p>
                *             The number of seconds after an assignment for the HIT has been submitted,
                *             after which the assignment is considered Approved automatically
                *             unless the Requester explicitly rejects it.
                *         </p>
                */
            AutoApprovalDelayInSeconds?: number;
            /**
                * <p>
                *             The amount of time, in seconds, that a Worker has to complete the HIT after accepting it.
                *             If a Worker does not complete the assignment within the specified duration,
                *             the assignment is considered abandoned. If the HIT is still active
                *             (that is, its lifetime has not elapsed), the assignment becomes available
                *             for other users to find and accept.
                *         </p>
                */
            AssignmentDurationInSeconds: number | undefined;
            /**
                * <p>
                *             The amount of money the Requester will pay a Worker for successfully completing the HIT.
                *         </p>
                */
            Reward: string | undefined;
            /**
                * <p>
                *             The title of the HIT. A title should be short and descriptive about the kind of task the HIT contains.
                *             On the Amazon Mechanical Turk web site, the HIT title appears in search results,
                *             and everywhere the HIT is mentioned.
                *         </p>
                */
            Title: string | undefined;
            /**
                * <p>
                *             One or more words or phrases that describe the HIT, separated by commas.
                *             These words are used in searches to find HITs.
                *         </p>
                */
            Keywords?: string;
            /**
                * <p>
                *             A general description of the HIT. A description includes detailed information about the kind of task
                *             the HIT contains. On the Amazon Mechanical Turk web site, the HIT description appears in the expanded
                *             view of search results, and in the HIT and assignment screens. A good description gives the user enough
                *             information to evaluate the HIT before accepting it.
                *         </p>
                */
            Description: string | undefined;
            /**
                * <p>
                *             Conditions that a Worker's Qualifications must meet in order
                *             to accept the HIT. A HIT can have between zero and ten
                *             Qualification requirements. All requirements must be met in
                *             order for a Worker to accept the HIT. Additionally, other
                *             actions can be restricted using the <code>ActionsGuarded</code>
                *             field on each <code>QualificationRequirement</code> structure.
                *         </p>
                */
            QualificationRequirements?: QualificationRequirement[];
    }
    export namespace CreateHITTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateHITTypeRequest) => any;
    }
    export interface CreateHITTypeResponse {
            /**
                * <p> The ID of the newly registered HIT type.</p>
                */
            HITTypeId?: string;
    }
    export namespace CreateHITTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateHITTypeResponse) => any;
    }
    export interface CreateHITWithHITTypeRequest {
            /**
                * <p>The HIT type ID you want to create this HIT with.</p>
                */
            HITTypeId: string | undefined;
            /**
                * <p>
                *             The number of times the HIT can be accepted and completed before the HIT becomes unavailable.
                *         </p>
                */
            MaxAssignments?: number;
            /**
                * <p>
                *             An amount of time, in seconds, after which the HIT is no longer available for users to accept.
                *             After the lifetime of the HIT elapses, the HIT no longer appears in HIT searches,
                *             even if not all of the assignments for the HIT have been accepted.
                *         </p>
                */
            LifetimeInSeconds: number | undefined;
            /**
                * <p>
                *             The data the person completing the HIT uses to produce the results.
                *         </p>
                *         <p>
                *             Constraints: Must be a QuestionForm data structure, an ExternalQuestion data structure,
                *             or an HTMLQuestion data structure. The XML question data must not be larger than
                *             64 kilobytes (65,535 bytes) in size, including whitespace.
                *         </p>
                *         <p>Either a Question parameter or a HITLayoutId parameter must be provided.</p>
                */
            Question?: string;
            /**
                * <p>
                *             An arbitrary data field.
                *             The RequesterAnnotation parameter lets your application attach arbitrary data
                *             to the HIT for tracking purposes.
                *             For example, this parameter could be an identifier internal to the Requester's application
                *             that corresponds with the HIT.
                *         </p>
                *         <p>
                *             The RequesterAnnotation parameter for a HIT is only visible to the Requester who created the HIT.
                *             It is not shown to the Worker, or any other Requester.
                *         </p>
                *         <p>
                *             The RequesterAnnotation parameter may be different for each HIT you submit.
                *             It does not affect how your HITs are grouped.
                *         </p>
                */
            RequesterAnnotation?: string;
            /**
                * <p>
                *             A unique identifier for this request which allows you to retry the call
                *             on error without creating duplicate HITs.
                *             This is useful in cases such as network timeouts where it is unclear whether or not
                *             the call succeeded on the server.
                *             If the HIT already exists in the system from a previous call using the same UniqueRequestToken,
                *             subsequent calls will return a AWS.MechanicalTurk.HitAlreadyExists error
                *             with a message containing the HITId.
                *         </p>
                *         <note>
                *             <p>
                *                 Note: It is your responsibility to ensure uniqueness of the token.
                *                 The unique token expires after 24 hours. Subsequent calls using the same
                *                 UniqueRequestToken made after the 24 hour limit could create duplicate HITs.
                *             </p>
                *         </note>
                */
            UniqueRequestToken?: string;
            /**
                * <p>
                *             The Assignment-level Review Policy applies to the assignments under the HIT.
                *             You can specify for Mechanical Turk to take various actions based on the policy.
                *         </p>
                */
            AssignmentReviewPolicy?: ReviewPolicy;
            /**
                * <p>
                *             The HIT-level Review Policy applies to the HIT.
                *             You can specify for Mechanical Turk to take various actions based on the policy.
                *         </p>
                */
            HITReviewPolicy?: ReviewPolicy;
            /**
                * <p>
                *             The HITLayoutId allows you to use a pre-existing HIT design with placeholder values
                *             and create an additional HIT by providing those values as HITLayoutParameters.
                *         </p>
                *         <p>
                *             Constraints: Either a Question parameter or a HITLayoutId parameter must be provided.
                *         </p>
                */
            HITLayoutId?: string;
            /**
                * <p>
                *             If the HITLayoutId is provided, any placeholder values must be filled in with values
                *             using the HITLayoutParameter structure. For more information, see HITLayout.
                *         </p>
                */
            HITLayoutParameters?: HITLayoutParameter[];
    }
    export namespace CreateHITWithHITTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateHITWithHITTypeRequest) => any;
    }
    export interface CreateHITWithHITTypeResponse {
            /**
                * <p> Contains the newly created HIT data. For a description of
                *             the HIT data structure as it appears in responses, see the HIT Data
                *             Structure documentation.
                *         </p>
                */
            HIT?: HIT;
    }
    export namespace CreateHITWithHITTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateHITWithHITTypeResponse) => any;
    }
    export enum QualificationTypeStatus {
            Active = "Active",
            Inactive = "Inactive"
    }
    export interface CreateQualificationTypeRequest {
            /**
                * <p> The name you give to the Qualification type. The type name
                *             is used to represent the Qualification to Workers, and to find the
                *             type using a Qualification type search. It must be unique across all
                *             of your Qualification types.</p>
                */
            Name: string | undefined;
            /**
                * <p>One or more words or phrases that describe the Qualification
                *             type, separated by commas. The keywords of a type make the type
                *             easier to find during a search.</p>
                */
            Keywords?: string;
            /**
                * <p>A long description for the Qualification type. On the Amazon
                *             Mechanical Turk website, the long description is displayed when a
                *             Worker examines a Qualification type.</p>
                */
            Description: string | undefined;
            /**
                * <p>The initial status of the Qualification type.</p>
                *         <p>Constraints: Valid values are: Active | Inactive</p>
                */
            QualificationTypeStatus: QualificationTypeStatus | string | undefined;
            /**
                * <p>The number of seconds that a Worker must wait after
                *             requesting a Qualification of the Qualification type before the
                *             worker can retry the Qualification request.</p>
                *         <p>Constraints: None. If not specified, retries are disabled and
                *             Workers can request a Qualification of this type only once, even if
                *             the Worker has not been granted the Qualification. It is not possible
                *             to disable retries for a Qualification type after it has been created
                *             with retries enabled. If you want to disable retries, you must delete
                *             existing retry-enabled Qualification type and then create a new
                *             Qualification type with retries disabled.</p>
                */
            RetryDelayInSeconds?: number;
            /**
                * <p>
                *             The questions for the Qualification test a Worker must answer
                *             correctly to obtain a Qualification of this type. If this parameter
                *             is specified,
                *             <code>TestDurationInSeconds</code>
                *             must also be specified.
                *         </p>
                *         <p>Constraints: Must not be longer than 65535 bytes. Must be a
                *             QuestionForm data structure. This parameter cannot be specified if
                *             AutoGranted is true.</p>
                *         <p>Constraints: None. If not specified, the Worker may request
                *             the Qualification without answering any questions.</p>
                */
            Test?: string;
            /**
                * <p>The answers to the Qualification test specified in the Test
                *             parameter, in the form of an AnswerKey data structure.</p>
                *         <p>Constraints: Must not be longer than 65535 bytes.</p>
                *         <p>Constraints: None. If not specified, you must process
                *             Qualification requests manually.</p>
                */
            AnswerKey?: string;
            /**
                * <p>The number of seconds the Worker has to complete the
                *             Qualification test, starting from the time the Worker requests the
                *             Qualification.</p>
                */
            TestDurationInSeconds?: number;
            /**
                * <p>Specifies whether requests for the Qualification type are
                *             granted immediately, without prompting the Worker with a
                *             Qualification test.</p>
                *         <p>Constraints: If the Test parameter is specified, this
                *             parameter cannot be true.</p>
                */
            AutoGranted?: boolean;
            /**
                * <p>The Qualification value to use for automatically granted
                *             Qualifications. This parameter is used only if the AutoGranted
                *             parameter is true.</p>
                */
            AutoGrantedValue?: number;
    }
    export namespace CreateQualificationTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateQualificationTypeRequest) => any;
    }
    /**
        * <p> The QualificationType data structure represents a
        *             Qualification type, a description of a property of a Worker that must
        *             match the requirements of a HIT for the Worker to be able to accept
        *             the HIT. The type also describes how a Worker can obtain a
        *             Qualification of that type, such as through a Qualification test.
        *         </p>
        */
    export interface QualificationType {
            /**
                * <p> A unique identifier for the Qualification type. A
                *             Qualification type is given a Qualification type ID when you call the
                *             CreateQualificationType operation.
                *         </p>
                */
            QualificationTypeId?: string;
            /**
                * <p> The date and time the Qualification type was created.
                *         </p>
                */
            CreationTime?: Date;
            /**
                * <p> The name of the Qualification type. The type name is used to
                *             identify the type, and to find the type using a Qualification type
                *             search.
                *         </p>
                */
            Name?: string;
            /**
                * <p> A long description for the Qualification type.
                *         </p>
                */
            Description?: string;
            /**
                * <p> One or more words or phrases that describe theQualification
                *             type, separated by commas. The Keywords make the type easier to find
                *             using a search.
                *         </p>
                */
            Keywords?: string;
            /**
                * <p> The status of the Qualification type. A Qualification type's
                *             status determines if users can apply to receive a Qualification of
                *             this type, and if HITs can be created with requirements based on this
                *             type. Valid values are Active | Inactive.
                *         </p>
                */
            QualificationTypeStatus?: QualificationTypeStatus | string;
            /**
                * <p> The questions for a Qualification test associated with this
                *             Qualification type that a user can take to obtain a Qualification of
                *             this type. This parameter must be specified if AnswerKey is present.
                *             A Qualification type cannot have both a specified Test parameter and
                *             an AutoGranted value of true.
                *         </p>
                */
            Test?: string;
            /**
                * <p> The amount of time, in seconds, given to a Worker to
                *             complete the Qualification test, beginning from the time the Worker
                *             requests the Qualification.
                *         </p>
                */
            TestDurationInSeconds?: number;
            /**
                * <p>The answers to the Qualification test specified in the Test
                *             parameter.</p>
                */
            AnswerKey?: string;
            /**
                * <p> The amount of time, in seconds, Workers must wait after
                *             taking the Qualification test before they can take it again. Workers
                *             can take a Qualification test multiple times if they were not granted
                *             the Qualification from a previous attempt, or if the test offers a
                *             gradient score and they want a better score. If not specified,
                *             retries are disabled and Workers can request a Qualification only
                *             once.
                *         </p>
                */
            RetryDelayInSeconds?: number;
            /**
                * <p> Specifies whether the Qualification type is one that a user
                *             can request through the Amazon Mechanical Turk web site, such as by
                *             taking a Qualification test. This value is False for Qualifications
                *             assigned automatically by the system. Valid values are True | False.
                *         </p>
                */
            IsRequestable?: boolean;
            /**
                * <p>Specifies that requests for the Qualification type are
                *             granted immediately, without prompting the Worker with a
                *             Qualification test. Valid values are True | False.</p>
                */
            AutoGranted?: boolean;
            /**
                * <p> The Qualification integer value to use for automatically
                *             granted Qualifications, if AutoGranted is true. This is 1 by default.
                *         </p>
                */
            AutoGrantedValue?: number;
    }
    export namespace QualificationType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QualificationType) => any;
    }
    export interface CreateQualificationTypeResponse {
            /**
                * <p>The created Qualification type, returned as a
                *             QualificationType data structure.</p>
                */
            QualificationType?: QualificationType;
    }
    export namespace CreateQualificationTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateQualificationTypeResponse) => any;
    }
    export interface CreateWorkerBlockRequest {
            /**
                * <p>The ID of the Worker to block.</p>
                */
            WorkerId: string | undefined;
            /**
                * <p>A message explaining the reason for blocking the Worker. This parameter enables you to keep track of your Workers. The Worker does not see this message.</p>
                */
            Reason: string | undefined;
    }
    export namespace CreateWorkerBlockRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkerBlockRequest) => any;
    }
    export interface CreateWorkerBlockResponse {
    }
    export namespace CreateWorkerBlockResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateWorkerBlockResponse) => any;
    }
    export interface DeleteHITRequest {
            /**
                * <p>The ID of the HIT to be deleted.</p>
                */
            HITId: string | undefined;
    }
    export namespace DeleteHITRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteHITRequest) => any;
    }
    export interface DeleteHITResponse {
    }
    export namespace DeleteHITResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteHITResponse) => any;
    }
    export interface DeleteQualificationTypeRequest {
            /**
                * <p>The ID of the QualificationType to dispose.</p>
                */
            QualificationTypeId: string | undefined;
    }
    export namespace DeleteQualificationTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteQualificationTypeRequest) => any;
    }
    export interface DeleteQualificationTypeResponse {
    }
    export namespace DeleteQualificationTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteQualificationTypeResponse) => any;
    }
    export interface DeleteWorkerBlockRequest {
            /**
                * <p>The ID of the Worker to unblock.</p>
                */
            WorkerId: string | undefined;
            /**
                * <p>A message that explains the reason for unblocking the Worker. The Worker does not see this message.</p>
                */
            Reason?: string;
    }
    export namespace DeleteWorkerBlockRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkerBlockRequest) => any;
    }
    export interface DeleteWorkerBlockResponse {
    }
    export namespace DeleteWorkerBlockResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteWorkerBlockResponse) => any;
    }
    export interface DisassociateQualificationFromWorkerRequest {
            /**
                * <p>The ID of the Worker who possesses the Qualification to be revoked.</p>
                */
            WorkerId: string | undefined;
            /**
                * <p>The ID of the Qualification type of the Qualification to be revoked.</p>
                */
            QualificationTypeId: string | undefined;
            /**
                * <p>A text message that explains why the Qualification was revoked. The user who had the Qualification sees this message.</p>
                */
            Reason?: string;
    }
    export namespace DisassociateQualificationFromWorkerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateQualificationFromWorkerRequest) => any;
    }
    export interface DisassociateQualificationFromWorkerResponse {
    }
    export namespace DisassociateQualificationFromWorkerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateQualificationFromWorkerResponse) => any;
    }
    export enum EventType {
            AssignmentAbandoned = "AssignmentAbandoned",
            AssignmentAccepted = "AssignmentAccepted",
            AssignmentApproved = "AssignmentApproved",
            AssignmentRejected = "AssignmentRejected",
            AssignmentReturned = "AssignmentReturned",
            AssignmentSubmitted = "AssignmentSubmitted",
            HITCreated = "HITCreated",
            HITDisposed = "HITDisposed",
            HITExpired = "HITExpired",
            HITExtended = "HITExtended",
            HITReviewable = "HITReviewable",
            Ping = "Ping"
    }
    export interface GetAccountBalanceRequest {
    }
    export namespace GetAccountBalanceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountBalanceRequest) => any;
    }
    export interface GetAccountBalanceResponse {
            /**
                * <p>A string representing a currency amount.</p>
                */
            AvailableBalance?: string;
            /**
                * <p>A string representing a currency amount.</p>
                */
            OnHoldBalance?: string;
    }
    export namespace GetAccountBalanceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountBalanceResponse) => any;
    }
    export interface GetAssignmentRequest {
            /**
                * <p>The ID of the Assignment to be retrieved.</p>
                */
            AssignmentId: string | undefined;
    }
    export namespace GetAssignmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAssignmentRequest) => any;
    }
    export interface GetAssignmentResponse {
            /**
                * <p> The assignment. The response includes one Assignment
                *             element.
                *         </p>
                */
            Assignment?: Assignment;
            /**
                * <p> The HIT associated with this assignment. The response
                *             includes one HIT element.</p>
                */
            HIT?: HIT;
    }
    export namespace GetAssignmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAssignmentResponse) => any;
    }
    export interface GetFileUploadURLRequest {
            /**
                * <p>The ID of the assignment that contains the question with a
                *             FileUploadAnswer.</p>
                */
            AssignmentId: string | undefined;
            /**
                * <p>The identifier of the question with a FileUploadAnswer, as
                *             specified in the QuestionForm of the HIT.</p>
                */
            QuestionIdentifier: string | undefined;
    }
    export namespace GetFileUploadURLRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFileUploadURLRequest) => any;
    }
    export interface GetFileUploadURLResponse {
            /**
                * <p> A temporary URL for the file that the Worker uploaded for
                *             the answer.
                *         </p>
                */
            FileUploadURL?: string;
    }
    export namespace GetFileUploadURLResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFileUploadURLResponse) => any;
    }
    export interface GetHITRequest {
            /**
                * <p>The ID of the HIT to be retrieved.</p>
                */
            HITId: string | undefined;
    }
    export namespace GetHITRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetHITRequest) => any;
    }
    export interface GetHITResponse {
            /**
                * <p> Contains the requested HIT data.</p>
                */
            HIT?: HIT;
    }
    export namespace GetHITResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetHITResponse) => any;
    }
    export interface GetQualificationScoreRequest {
            /**
                * <p>The ID of the QualificationType.</p>
                */
            QualificationTypeId: string | undefined;
            /**
                * <p>The ID of the Worker whose Qualification is being updated.</p>
                */
            WorkerId: string | undefined;
    }
    export namespace GetQualificationScoreRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQualificationScoreRequest) => any;
    }
    export enum QualificationStatus {
            Granted = "Granted",
            Revoked = "Revoked"
    }
    /**
        * <p>The Qualification data structure represents a Qualification
        *             assigned to a user, including the Qualification type and the value
        *             (score).</p>
        */
    export interface Qualification {
            /**
                * <p> The ID of the Qualification type for the Qualification.</p>
                */
            QualificationTypeId?: string;
            /**
                * <p> The ID of the Worker who possesses the Qualification.
                *         </p>
                */
            WorkerId?: string;
            /**
                * <p> The date and time the Qualification was granted to the
                *             Worker. If the Worker's Qualification was revoked, and then
                *             re-granted based on a new Qualification request, GrantTime is the
                *             date and time of the last call to the AcceptQualificationRequest
                *             operation.</p>
                */
            GrantTime?: Date;
            /**
                * <p> The value (score) of the Qualification, if the Qualification
                *             has an integer value.</p>
                */
            IntegerValue?: number;
            /**
                * <p>The Locale data structure represents a geographical region or location.</p>
                */
            LocaleValue?: Locale;
            /**
                * <p> The status of the Qualification. Valid values are Granted |
                *             Revoked.</p>
                */
            Status?: QualificationStatus | string;
    }
    export namespace Qualification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Qualification) => any;
    }
    export interface GetQualificationScoreResponse {
            /**
                * <p> The Qualification data structure of the Qualification
                *             assigned to a user, including the Qualification type and the value
                *             (score).
                *         </p>
                */
            Qualification?: Qualification;
    }
    export namespace GetQualificationScoreResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQualificationScoreResponse) => any;
    }
    export interface GetQualificationTypeRequest {
            /**
                * <p>The ID of the QualificationType.</p>
                */
            QualificationTypeId: string | undefined;
    }
    export namespace GetQualificationTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQualificationTypeRequest) => any;
    }
    export interface GetQualificationTypeResponse {
            /**
                * <p> The returned Qualification Type</p>
                */
            QualificationType?: QualificationType;
    }
    export namespace GetQualificationTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetQualificationTypeResponse) => any;
    }
    export interface ListAssignmentsForHITRequest {
            /**
                * <p>The ID of the HIT.</p>
                */
            HITId: string | undefined;
            /**
                * <p>Pagination token</p>
                */
            NextToken?: string;
            MaxResults?: number;
            /**
                * <p>The status of the assignments to return: Submitted | Approved
                *             | Rejected</p>
                */
            AssignmentStatuses?: (AssignmentStatus | string)[];
    }
    export namespace ListAssignmentsForHITRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssignmentsForHITRequest) => any;
    }
    export interface ListAssignmentsForHITResponse {
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk
                *             returns a pagination token in the response. You can use this pagination token
                *             to retrieve the next set of results.
                *         </p>
                */
            NextToken?: string;
            /**
                * <p> The number of assignments on the page in the filtered
                *             results list, equivalent to the number of assignments returned by
                *             this call.</p>
                */
            NumResults?: number;
            /**
                * <p> The collection of Assignment data structures returned by
                *             this call.</p>
                */
            Assignments?: Assignment[];
    }
    export namespace ListAssignmentsForHITResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssignmentsForHITResponse) => any;
    }
    export interface ListBonusPaymentsRequest {
            /**
                * <p>The ID of the HIT associated with the bonus payments to
                *             retrieve. If not specified, all bonus payments for all assignments
                *             for the given HIT are returned. Either the HITId parameter or the
                *             AssignmentId parameter must be specified</p>
                */
            HITId?: string;
            /**
                * <p>The ID of the assignment associated with the bonus payments
                *             to retrieve. If specified, only bonus payments for the given
                *             assignment are returned. Either the HITId parameter or the
                *             AssignmentId parameter must be specified</p>
                */
            AssignmentId?: string;
            /**
                * <p>Pagination token</p>
                */
            NextToken?: string;
            MaxResults?: number;
    }
    export namespace ListBonusPaymentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListBonusPaymentsRequest) => any;
    }
    export interface ListBonusPaymentsResponse {
            /**
                * <p>The number of bonus payments on this page in the filtered
                *             results list, equivalent to the number of bonus payments being
                *             returned by this call.
                *         </p>
                */
            NumResults?: number;
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk
                *             returns a pagination token in the response. You can use this pagination token
                *             to retrieve the next set of results.
                *         </p>
                */
            NextToken?: string;
            /**
                * <p>A successful request to the ListBonusPayments operation
                *             returns a list of BonusPayment objects.
                *         </p>
                */
            BonusPayments?: BonusPayment[];
    }
    export namespace ListBonusPaymentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListBonusPaymentsResponse) => any;
    }
    export interface ListHITsRequest {
            /**
                * <p>Pagination token</p>
                */
            NextToken?: string;
            MaxResults?: number;
    }
    export namespace ListHITsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListHITsRequest) => any;
    }
    export interface ListHITsResponse {
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk
                *             returns a pagination token in the response. You can use this pagination token
                *             to retrieve the next set of results.
                *         </p>
                */
            NextToken?: string;
            /**
                * <p>The number of HITs on this page in the filtered results list,
                *             equivalent to the number of HITs being returned by this call.</p>
                */
            NumResults?: number;
            /**
                * <p> The list of HIT elements returned by the query.</p>
                */
            HITs?: HIT[];
    }
    export namespace ListHITsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListHITsResponse) => any;
    }
    export interface ListHITsForQualificationTypeRequest {
            /**
                * <p>
                *             The ID of the Qualification type to use when querying HITs.
                *         </p>
                */
            QualificationTypeId: string | undefined;
            /**
                * <p>Pagination Token</p>
                */
            NextToken?: string;
            /**
                * <p>
                *             Limit the number of results returned.
                *         </p>
                */
            MaxResults?: number;
    }
    export namespace ListHITsForQualificationTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListHITsForQualificationTypeRequest) => any;
    }
    export interface ListHITsForQualificationTypeResponse {
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk
                *             returns a pagination token in the response. You can use this pagination token
                *             to retrieve the next set of results.
                *         </p>
                */
            NextToken?: string;
            /**
                * <p> The number of HITs on this page in the filtered results
                *             list, equivalent to the number of HITs being returned by this call.	</p>
                */
            NumResults?: number;
            /**
                * <p> The list of HIT elements returned by the query.</p>
                */
            HITs?: HIT[];
    }
    export namespace ListHITsForQualificationTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListHITsForQualificationTypeResponse) => any;
    }
    export interface ListQualificationRequestsRequest {
            /**
                * <p>The ID of the QualificationType.</p>
                */
            QualificationTypeId?: string;
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk
                *             returns a pagination token in the response. You can use this pagination token
                *             to retrieve the next set of results.
                *         </p>
                */
            NextToken?: string;
            /**
                * <p> The maximum number of results to return in a single call.
                *         </p>
                */
            MaxResults?: number;
    }
    export namespace ListQualificationRequestsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListQualificationRequestsRequest) => any;
    }
    /**
        * <p> The QualificationRequest data structure represents a request
        *             a Worker has made for a Qualification.
        *         </p>
        */
    export interface QualificationRequest {
            /**
                * <p>The ID of the Qualification request, a unique identifier
                *             generated when the request was submitted.
                *
                *         </p>
                */
            QualificationRequestId?: string;
            /**
                * <p> The ID of the Qualification type the Worker is requesting,
                *             as returned by the CreateQualificationType operation.
                *         </p>
                */
            QualificationTypeId?: string;
            /**
                * <p> The ID of the Worker requesting the Qualification.</p>
                */
            WorkerId?: string;
            /**
                * <p> The contents of the Qualification test that was presented to
                *             the Worker, if the type has a test and the Worker has submitted
                *             answers. This value is identical to the QuestionForm associated with
                *             the Qualification type at the time the Worker requests the
                *             Qualification.</p>
                */
            Test?: string;
            /**
                * <p> The Worker's answers for the Qualification type's test
                *             contained in a QuestionFormAnswers document, if the type has a test
                *             and the Worker has submitted answers. If the Worker does not provide
                *             any answers, Answer may be empty.
                *         </p>
                */
            Answer?: string;
            /**
                * <p>The date and time the Qualification request had a status of
                *             Submitted. This is either the time the Worker submitted answers for a
                *             Qualification test, or the time the Worker requested the
                *             Qualification if the Qualification type does not have a test.
                *         </p>
                */
            SubmitTime?: Date;
    }
    export namespace QualificationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QualificationRequest) => any;
    }
    export interface ListQualificationRequestsResponse {
            /**
                * <p>The number of Qualification requests on this page in the filtered results list,
                *             equivalent to the number of Qualification requests being returned by this call.</p>
                */
            NumResults?: number;
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk
                *             returns a pagination token in the response. You can use this pagination token
                *             to retrieve the next set of results.
                *         </p>
                */
            NextToken?: string;
            /**
                * <p>The Qualification request. The response includes one
                *             QualificationRequest element
                *             for each Qualification request returned
                *             by the query.</p>
                */
            QualificationRequests?: QualificationRequest[];
    }
    export namespace ListQualificationRequestsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListQualificationRequestsResponse) => any;
    }
    export interface ListQualificationTypesRequest {
            /**
                * <p> A text query against all of the searchable attributes of
                *             Qualification types.
                *         </p>
                */
            Query?: string;
            /**
                * <p>Specifies that only Qualification types that a user can
                *             request through the Amazon Mechanical Turk web site, such as by
                *             taking a Qualification test, are returned as results of the search.
                *             Some Qualification types, such as those assigned automatically by the
                *             system, cannot be requested directly by users. If false, all
                *             Qualification types, including those managed by the system, are
                *             considered. Valid values are True | False.
                *         </p>
                */
            MustBeRequestable: boolean | undefined;
            /**
                * <p> Specifies that only Qualification types that the Requester
                *             created are returned. If false, the operation returns all
                *             Qualification types.
                *         </p>
                */
            MustBeOwnedByCaller?: boolean;
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk
                *             returns a pagination token in the response. You can use this pagination token
                *             to retrieve the next set of results.
                *         </p>
                */
            NextToken?: string;
            /**
                * <p> The maximum number of results to return in a single call.
                *         </p>
                */
            MaxResults?: number;
    }
    export namespace ListQualificationTypesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListQualificationTypesRequest) => any;
    }
    export interface ListQualificationTypesResponse {
            /**
                * <p> The number of Qualification types on this page in the
                *             filtered results list, equivalent to the number of types this
                *             operation returns.
                *         </p>
                */
            NumResults?: number;
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk
                *             returns a pagination token in the response. You can use this pagination token
                *             to retrieve the next set of results.
                *         </p>
                */
            NextToken?: string;
            /**
                * <p> The list of QualificationType elements returned by the
                *             query.
                *         </p>
                */
            QualificationTypes?: QualificationType[];
    }
    export namespace ListQualificationTypesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListQualificationTypesResponse) => any;
    }
    export enum ReviewableHITStatus {
            Reviewable = "Reviewable",
            Reviewing = "Reviewing"
    }
    export interface ListReviewableHITsRequest {
            /**
                * <p>
                *             The ID of the HIT type of the HITs to consider for the query.
                *             If not specified, all HITs for the Reviewer are considered
                *         </p>
                */
            HITTypeId?: string;
            /**
                * <p>
                *             Can be either <code>Reviewable</code> or <code>Reviewing</code>.
                *             Reviewable is the default value.
                *         </p>
                */
            Status?: ReviewableHITStatus | string;
            /**
                * <p>Pagination Token</p>
                */
            NextToken?: string;
            /**
                * <p>
                *             Limit the number of results returned.
                *         </p>
                */
            MaxResults?: number;
    }
    export namespace ListReviewableHITsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListReviewableHITsRequest) => any;
    }
    export interface ListReviewableHITsResponse {
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk
                *             returns a pagination token in the response. You can use this pagination token
                *             to retrieve the next set of results.
                *         </p>
                */
            NextToken?: string;
            /**
                * <p> The number of HITs on this page in the filtered results
                *             list, equivalent to the number of HITs being returned by this call.
                *         </p>
                */
            NumResults?: number;
            /**
                * <p> The list of HIT elements returned by the query.</p>
                */
            HITs?: HIT[];
    }
    export namespace ListReviewableHITsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListReviewableHITsResponse) => any;
    }
    export enum ReviewPolicyLevel {
            Assignment = "Assignment",
            HIT = "HIT"
    }
    export interface ListReviewPolicyResultsForHITRequest {
            /**
                * <p>The unique identifier of the HIT to retrieve review results for.</p>
                */
            HITId: string | undefined;
            /**
                * <p>
                *             The Policy Level(s) to retrieve review results for - HIT or Assignment.
                *             If omitted, the default behavior is to retrieve all data for both policy levels.
                *             For a list of all the described policies, see Review Policies.
                *         </p>
                */
            PolicyLevels?: (ReviewPolicyLevel | string)[];
            /**
                * <p>
                *             Specify if the operation should retrieve a list of the actions taken executing
                *             the Review Policies and their outcomes.
                *         </p>
                */
            RetrieveActions?: boolean;
            /**
                * <p>
                *             Specify if the operation should retrieve a list of the results computed by the Review Policies.
                *         </p>
                */
            RetrieveResults?: boolean;
            /**
                * <p>Pagination token</p>
                */
            NextToken?: string;
            /**
                * <p>Limit the number of results returned.</p>
                */
            MaxResults?: number;
    }
    export namespace ListReviewPolicyResultsForHITRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListReviewPolicyResultsForHITRequest) => any;
    }
    export enum ReviewActionStatus {
            Cancelled = "Cancelled",
            Failed = "Failed",
            Intended = "Intended",
            Succeeded = "Succeeded"
    }
    /**
        * <p> Both the AssignmentReviewReport and the HITReviewReport
        *             elements contains the ReviewActionDetail data structure. This
        *             structure is returned multiple times for each action specified in the
        *             Review Policy.
        *         </p>
        */
    export interface ReviewActionDetail {
            /**
                * <p>The unique identifier for the action.</p>
                */
            ActionId?: string;
            /**
                * <p> The nature of the action itself. The Review Policy is
                *             responsible for examining the HIT and Assignments, emitting results,
                *             and deciding which other actions will be necessary. </p>
                */
            ActionName?: string;
            /**
                * <p> The specific HITId or AssignmentID targeted by the action.</p>
                */
            TargetId?: string;
            /**
                * <p> The type of object in TargetId.</p>
                */
            TargetType?: string;
            /**
                * <p> The current disposition of the action: INTENDED, SUCCEEDED,
                *             FAILED, or CANCELLED.
                *         </p>
                */
            Status?: ReviewActionStatus | string;
            /**
                * <p> The date when the action was completed.</p>
                */
            CompleteTime?: Date;
            /**
                * <p> A description of the outcome of the review.</p>
                */
            Result?: string;
            /**
                * <p> Present only when the Results have a FAILED Status.</p>
                */
            ErrorCode?: string;
    }
    export namespace ReviewActionDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReviewActionDetail) => any;
    }
    /**
        * <p> This data structure is returned multiple times for each
        *             result specified in the Review Policy.
        *         </p>
        */
    export interface ReviewResultDetail {
            /**
                * <p> A unique identifier of the Review action result.
                *         </p>
                */
            ActionId?: string;
            /**
                * <p>The HITID or AssignmentId about which this result was taken.
                *             Note that HIT-level Review Policies will often emit results about
                *             both the HIT itself and its Assignments, while Assignment-level
                *             review policies generally only emit results about the Assignment
                *             itself.
                *         </p>
                */
            SubjectId?: string;
            /**
                * <p> The type of the object from the SubjectId field.</p>
                */
            SubjectType?: string;
            /**
                * <p> Specifies the QuestionId the result is describing. Depending
                *             on whether the TargetType is a HIT or Assignment this results could
                *             specify multiple values. If TargetType is HIT and QuestionId is
                *             absent, then the result describes results of the HIT, including the
                *             HIT agreement score. If ObjectType is Assignment and QuestionId is
                *             absent, then the result describes the Worker's performance on the
                *             HIT.
                *         </p>
                */
            QuestionId?: string;
            /**
                * <p> Key identifies the particular piece of reviewed information.
                *         </p>
                */
            Key?: string;
            /**
                * <p> The values of Key provided by the review policies you have
                *             selected.
                *         </p>
                */
            Value?: string;
    }
    export namespace ReviewResultDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReviewResultDetail) => any;
    }
    /**
        * <p> Contains both ReviewResult and ReviewAction elements for a
        *             particular HIT.
        *         </p>
        */
    export interface ReviewReport {
            /**
                * <p> A list of ReviewResults objects for each action specified in
                *             the Review Policy.
                *         </p>
                */
            ReviewResults?: ReviewResultDetail[];
            /**
                * <p> A list of ReviewAction objects for each action specified in
                *             the Review Policy.
                *         </p>
                */
            ReviewActions?: ReviewActionDetail[];
    }
    export namespace ReviewReport {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ReviewReport) => any;
    }
    export interface ListReviewPolicyResultsForHITResponse {
            /**
                * <p>The HITId of the HIT for which results have been returned.</p>
                */
            HITId?: string;
            /**
                * <p> The name of the Assignment-level Review Policy. This
                *             contains only the PolicyName element.
                *         </p>
                */
            AssignmentReviewPolicy?: ReviewPolicy;
            /**
                * <p>The name of the HIT-level Review Policy. This contains only
                *             the PolicyName element.</p>
                */
            HITReviewPolicy?: ReviewPolicy;
            /**
                * <p> Contains both ReviewResult and ReviewAction elements for an
                *             Assignment.
                *         </p>
                */
            AssignmentReviewReport?: ReviewReport;
            /**
                * <p>Contains both ReviewResult and ReviewAction elements for a particular HIT.
                *         </p>
                */
            HITReviewReport?: ReviewReport;
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk
                *             returns a pagination token in the response. You can use this pagination token
                *             to retrieve the next set of results.
                *         </p>
                */
            NextToken?: string;
    }
    export namespace ListReviewPolicyResultsForHITResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListReviewPolicyResultsForHITResponse) => any;
    }
    export interface ListWorkerBlocksRequest {
            /**
                * <p>Pagination token</p>
                */
            NextToken?: string;
            MaxResults?: number;
    }
    export namespace ListWorkerBlocksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkerBlocksRequest) => any;
    }
    /**
        * <p> The WorkerBlock data structure represents a Worker who has
        *             been blocked. It has two elements: the WorkerId and the Reason for
        *             the block.
        *         </p>
        */
    export interface WorkerBlock {
            /**
                * <p> The ID of the Worker who accepted the HIT.</p>
                */
            WorkerId?: string;
            /**
                * <p> A message explaining the reason the Worker was blocked.
                *         </p>
                */
            Reason?: string;
    }
    export namespace WorkerBlock {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: WorkerBlock) => any;
    }
    export interface ListWorkerBlocksResponse {
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk
                *             returns a pagination token in the response. You can use this pagination token
                *             to retrieve the next set of results.
                *         </p>
                */
            NextToken?: string;
            /**
                * <p> The number of assignments on the page in the filtered
                *             results list, equivalent to the number of assignments returned by
                *             this call.</p>
                */
            NumResults?: number;
            /**
                * <p> The list of WorkerBlocks, containing the collection of
                *             Worker IDs and reasons for blocking.</p>
                */
            WorkerBlocks?: WorkerBlock[];
    }
    export namespace ListWorkerBlocksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkerBlocksResponse) => any;
    }
    export interface ListWorkersWithQualificationTypeRequest {
            /**
                * <p>The ID of the Qualification type of the Qualifications to
                *             return.</p>
                */
            QualificationTypeId: string | undefined;
            /**
                * <p>
                *             The status of the Qualifications to return.
                *             Can be <code>Granted | Revoked</code>.
                *         </p>
                */
            Status?: QualificationStatus | string;
            /**
                * <p>Pagination Token</p>
                */
            NextToken?: string;
            /**
                * <p>
                *             Limit the number of results returned.
                *         </p>
                */
            MaxResults?: number;
    }
    export namespace ListWorkersWithQualificationTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkersWithQualificationTypeRequest) => any;
    }
    export interface ListWorkersWithQualificationTypeResponse {
            /**
                * <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Mechanical Turk
                *             returns a pagination token in the response. You can use this pagination token
                *             to retrieve the next set of results.
                *         </p>
                */
            NextToken?: string;
            /**
                * <p> The number of Qualifications on this page in the filtered
                *             results list, equivalent to the number of Qualifications being
                *             returned by this call.</p>
                */
            NumResults?: number;
            /**
                * <p> The list of Qualification elements returned by this call.
                *         </p>
                */
            Qualifications?: Qualification[];
    }
    export namespace ListWorkersWithQualificationTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListWorkersWithQualificationTypeResponse) => any;
    }
    export interface NotifyWorkersRequest {
            /**
                * <p>The subject line of the email message to send. Can include up
                *             to 200 characters.</p>
                */
            Subject: string | undefined;
            /**
                * <p>The text of the email message to send. Can include up to
                *             4,096 characters</p>
                */
            MessageText: string | undefined;
            /**
                * <p>A list of Worker IDs you wish to notify. You
                *             can notify upto
                *             100 Workers at a time.</p>
                */
            WorkerIds: string[] | undefined;
    }
    export namespace NotifyWorkersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotifyWorkersRequest) => any;
    }
    export enum NotifyWorkersFailureCode {
            HardFailure = "HardFailure",
            SoftFailure = "SoftFailure"
    }
    /**
        * <p> When MTurk encounters an issue with notifying the Workers
        *             you specified, it returns back this object with failure details.
        *         </p>
        */
    export interface NotifyWorkersFailureStatus {
            /**
                * <p> Encoded value for the failure type.
                *         </p>
                */
            NotifyWorkersFailureCode?: NotifyWorkersFailureCode | string;
            /**
                * <p> A message detailing the reason the Worker could not be
                *             notified.
                *         </p>
                */
            NotifyWorkersFailureMessage?: string;
            /**
                * <p> The ID of the Worker.</p>
                */
            WorkerId?: string;
    }
    export namespace NotifyWorkersFailureStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotifyWorkersFailureStatus) => any;
    }
    export interface NotifyWorkersResponse {
            /**
                * <p> When MTurk sends notifications to the list of Workers, it
                *             returns back any failures it encounters in this list of
                *             NotifyWorkersFailureStatus objects.
                *         </p>
                */
            NotifyWorkersFailureStatuses?: NotifyWorkersFailureStatus[];
    }
    export namespace NotifyWorkersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotifyWorkersResponse) => any;
    }
    export interface RejectAssignmentRequest {
            /**
                * <p>
                *             The ID of the assignment. The assignment must correspond to a HIT created by the Requester.
                *         </p>
                */
            AssignmentId: string | undefined;
            /**
                * <p>
                *             A message for the Worker, which the Worker can see in the Status section of the web site.
                *         </p>
                */
            RequesterFeedback: string | undefined;
    }
    export namespace RejectAssignmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RejectAssignmentRequest) => any;
    }
    export interface RejectAssignmentResponse {
    }
    export namespace RejectAssignmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RejectAssignmentResponse) => any;
    }
    export interface RejectQualificationRequestRequest {
            /**
                * <p>
                *             The ID of the Qualification request, as returned by the
                *             <code>ListQualificationRequests</code>
                *             operation.
                *         </p>
                */
            QualificationRequestId: string | undefined;
            /**
                * <p>A text message explaining why the request was rejected, to be
                *             shown to the Worker who made the request.</p>
                */
            Reason?: string;
    }
    export namespace RejectQualificationRequestRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RejectQualificationRequestRequest) => any;
    }
    export interface RejectQualificationRequestResponse {
    }
    export namespace RejectQualificationRequestResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RejectQualificationRequestResponse) => any;
    }
    export interface SendBonusRequest {
            /**
                * <p>The ID of the Worker being paid the bonus.</p>
                */
            WorkerId: string | undefined;
            /**
                * <p>
                *             The Bonus amount is a US Dollar amount specified using a string (for example, "5" represents $5.00 USD and
                *             "101.42" represents $101.42 USD). Do not include currency symbols or currency codes.
                *         </p>
                */
            BonusAmount: string | undefined;
            /**
                * <p>The ID of the assignment for which this bonus is paid.</p>
                */
            AssignmentId: string | undefined;
            /**
                * <p>A message that explains the reason for the bonus payment. The
                *             Worker receiving the bonus can see this message.</p>
                */
            Reason: string | undefined;
            /**
                * <p>A unique identifier for this request, which allows you to
                *             retry the call on error without granting multiple bonuses. This is
                *             useful in cases such as network timeouts where it is unclear whether
                *             or not the call succeeded on the server. If the bonus already exists
                *             in the system from a previous call using the same UniqueRequestToken,
                *             subsequent calls will return an error with a message containing the
                *             request ID.</p>
                */
            UniqueRequestToken?: string;
    }
    export namespace SendBonusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendBonusRequest) => any;
    }
    export interface SendBonusResponse {
    }
    export namespace SendBonusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendBonusResponse) => any;
    }
    export enum NotificationTransport {
            Email = "Email",
            SNS = "SNS",
            SQS = "SQS"
    }
    /**
        * <p>The NotificationSpecification data structure describes a HIT
        *             event notification for a HIT type.</p>
        */
    export interface NotificationSpecification {
            /**
                * <p>
                *             The target for notification messages. The Destination’s format is determined by the specified Transport:
                *         </p>
                *         <ul>
                *             <li>
                *                 <p>When Transport is Email, the Destination is your email address.</p>
                *             </li>
                *             <li>
                *                 <p>When Transport is SQS, the Destination is your queue URL.</p>
                *             </li>
                *             <li>
                *                 <p>When Transport is SNS, the Destination is the ARN of your topic.</p>
                *             </li>
                *          </ul>
                */
            Destination: string | undefined;
            /**
                * <p> The method Amazon Mechanical Turk uses to send the
                *             notification. Valid Values: Email | SQS | SNS.
                *         </p>
                */
            Transport: NotificationTransport | string | undefined;
            /**
                * <p>The version of the Notification API to use. Valid value is
                *             2006-05-05.</p>
                */
            Version: string | undefined;
            /**
                * <p> The list of events that should cause notifications to be
                *             sent. Valid Values: AssignmentAccepted | AssignmentAbandoned |
                *             AssignmentReturned | AssignmentSubmitted | AssignmentRejected |
                *             AssignmentApproved | HITCreated | HITExtended | HITDisposed |
                *             HITReviewable | HITExpired | Ping. The Ping event is only valid for
                *             the SendTestEventNotification operation.
                *         </p>
                */
            EventTypes: (EventType | string)[] | undefined;
    }
    export namespace NotificationSpecification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NotificationSpecification) => any;
    }
    export interface SendTestEventNotificationRequest {
            /**
                * <p>
                *             The notification specification to test. This value is identical to the value
                *             you would provide to the UpdateNotificationSettings operation when you establish
                *             the notification specification for a HIT type.
                *         </p>
                */
            Notification: NotificationSpecification | undefined;
            /**
                * <p>
                *             The event to simulate to test the notification specification.
                *             This event is included in the test message even if the notification specification
                *             does not include the event type.
                *             The notification specification does not filter out the test event.
                *         </p>
                */
            TestEventType: EventType | string | undefined;
    }
    export namespace SendTestEventNotificationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendTestEventNotificationRequest) => any;
    }
    export interface SendTestEventNotificationResponse {
    }
    export namespace SendTestEventNotificationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendTestEventNotificationResponse) => any;
    }
    export interface UpdateExpirationForHITRequest {
            /**
                * <p>
                *             The HIT to update.
                *         </p>
                */
            HITId: string | undefined;
            /**
                * <p>
                *             The date and time at which you want the HIT to expire
                *         </p>
                */
            ExpireAt: Date | undefined;
    }
    export namespace UpdateExpirationForHITRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExpirationForHITRequest) => any;
    }
    export interface UpdateExpirationForHITResponse {
    }
    export namespace UpdateExpirationForHITResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExpirationForHITResponse) => any;
    }
    export interface UpdateHITReviewStatusRequest {
            /**
                * <p>
                *             The ID of the HIT to update.
                *         </p>
                */
            HITId: string | undefined;
            /**
                * <p>
                *             Specifies how to update the HIT status. Default is <code>False</code>.
                *         </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     Setting this to false will only transition a HIT from <code>Reviewable</code> to <code>Reviewing</code>
                *                 </p>
                *             </li>
                *             <li>
                *                 <p>
                *                     Setting this to true will only transition a HIT from <code>Reviewing</code> to <code>Reviewable</code>
                *                 </p>
                *             </li>
                *          </ul>
                */
            Revert?: boolean;
    }
    export namespace UpdateHITReviewStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateHITReviewStatusRequest) => any;
    }
    export interface UpdateHITReviewStatusResponse {
    }
    export namespace UpdateHITReviewStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateHITReviewStatusResponse) => any;
    }
    export interface UpdateHITTypeOfHITRequest {
            /**
                * <p>The HIT to update.</p>
                */
            HITId: string | undefined;
            /**
                * <p>The ID of the new HIT type.</p>
                */
            HITTypeId: string | undefined;
    }
    export namespace UpdateHITTypeOfHITRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateHITTypeOfHITRequest) => any;
    }
    export interface UpdateHITTypeOfHITResponse {
    }
    export namespace UpdateHITTypeOfHITResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateHITTypeOfHITResponse) => any;
    }
    export interface UpdateNotificationSettingsRequest {
            /**
                * <p>
                *             The ID of the HIT type whose notification specification is being updated.
                *         </p>
                */
            HITTypeId: string | undefined;
            /**
                * <p>
                *             The notification specification for the HIT type.
                *         </p>
                */
            Notification?: NotificationSpecification;
            /**
                * <p>
                *             Specifies whether notifications are sent for HITs of this HIT type,
                *             according to the notification specification.
                *             You must specify either the Notification parameter or the Active parameter
                *             for the call to UpdateNotificationSettings to succeed.
                *         </p>
                */
            Active?: boolean;
    }
    export namespace UpdateNotificationSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNotificationSettingsRequest) => any;
    }
    export interface UpdateNotificationSettingsResponse {
    }
    export namespace UpdateNotificationSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateNotificationSettingsResponse) => any;
    }
    export interface UpdateQualificationTypeRequest {
            /**
                * <p>The ID of the Qualification type to update.</p>
                */
            QualificationTypeId: string | undefined;
            /**
                * <p>The new description of the Qualification type.</p>
                */
            Description?: string;
            /**
                * <p>The new status of the Qualification type - Active | Inactive</p>
                */
            QualificationTypeStatus?: QualificationTypeStatus | string;
            /**
                * <p>The questions for the Qualification test a Worker must answer correctly to obtain a Qualification of this type. If this parameter is specified, <code>TestDurationInSeconds</code> must also be specified.</p>
                *         <p>Constraints: Must not be longer than 65535 bytes. Must be a QuestionForm data structure. This parameter cannot be specified if AutoGranted is true.</p>
                *         <p>Constraints: None. If not specified, the Worker may request the Qualification without answering any questions.</p>
                */
            Test?: string;
            /**
                * <p>The answers to the Qualification test specified in the Test parameter, in the form of an AnswerKey data structure.</p>
                */
            AnswerKey?: string;
            /**
                * <p>The number of seconds the Worker has to complete the Qualification test, starting from the time the Worker requests the Qualification.</p>
                */
            TestDurationInSeconds?: number;
            /**
                * <p>The amount of time, in seconds, that Workers must wait
                *             after requesting a Qualification of the specified Qualification type
                *             before they can retry the Qualification request. It is not possible to
                *             disable retries for a Qualification type after it has been created with
                *             retries enabled. If you want to disable retries, you must dispose of
                *             the existing retry-enabled Qualification type using
                *             DisposeQualificationType and then create a new Qualification type with
                *             retries disabled using CreateQualificationType.</p>
                */
            RetryDelayInSeconds?: number;
            /**
                * <p>Specifies whether requests for the Qualification type are granted immediately, without prompting the Worker with a Qualification test.</p>
                *         <p>Constraints: If the Test parameter is specified, this parameter cannot be true.</p>
                */
            AutoGranted?: boolean;
            /**
                * <p>The Qualification value to use for automatically granted Qualifications. This parameter is used only if the AutoGranted parameter is true.</p>
                */
            AutoGrantedValue?: number;
    }
    export namespace UpdateQualificationTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateQualificationTypeRequest) => any;
    }
    export interface UpdateQualificationTypeResponse {
            /**
                * <p> Contains a QualificationType data structure.</p>
                */
            QualificationType?: QualificationType;
    }
    export namespace UpdateQualificationTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateQualificationTypeResponse) => any;
    }
}

declare module '@aws-sdk/client-mturk/node_modules/@aws-sdk/client-mturk/dist-types/models/MTurkServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from MTurk service.
        */
    export class MTurkServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

