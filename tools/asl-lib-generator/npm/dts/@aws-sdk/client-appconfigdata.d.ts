// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-appconfigdata' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AppConfigDataClient } from "@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/AppConfigDataClient";
    import { GetLatestConfigurationCommandInput, GetLatestConfigurationCommandOutput } from "@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/commands/GetLatestConfigurationCommand";
    import { StartConfigurationSessionCommandInput, StartConfigurationSessionCommandOutput } from "@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/commands/StartConfigurationSessionCommand";
    /**
        * <p>AppConfig Data provides the data plane APIs your application uses to retrieve configuration data.
        *          Here's how it works:</p>
        *          <p>Your application retrieves configuration data by first establishing a configuration
        *          session using the AppConfig Data <a>StartConfigurationSession</a> API action. Your session's
        *          client then makes periodic calls to <a>GetLatestConfiguration</a> to check for
        *          and retrieve the latest data available.</p>
        *          <p>When calling <code>StartConfigurationSession</code>, your code sends the following
        *          information:</p>
        *          <ul>
        *             <li>
        *                <p>Identifiers (ID or name) of an AppConfig application, environment, and
        *                configuration profile that the session tracks.</p>
        *             </li>
        *             <li>
        *                <p>(Optional) The minimum amount of time the session's client must wait between calls
        *                to <code>GetLatestConfiguration</code>.</p>
        *             </li>
        *          </ul>
        *          <p>In response, AppConfig provides an <code>InitialConfigurationToken</code> to be given to
        *          the session's client and used the first time it calls <code>GetLatestConfiguration</code>
        *          for that session.</p>
        *          <p>When calling <code>GetLatestConfiguration</code>, your client code sends the most recent
        *             <code>ConfigurationToken</code> value it has and receives in response:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>NextPollConfigurationToken</code>: the <code>ConfigurationToken</code> value
        *                to use on the next call to <code>GetLatestConfiguration</code>.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>NextPollIntervalInSeconds</code>: the duration the client should wait before
        *                making its next call to <code>GetLatestConfiguration</code>. This duration may vary
        *                over the course of the session, so it should be used instead of the value sent on the
        *                   <code>StartConfigurationSession</code> call.</p>
        *             </li>
        *             <li>
        *                <p>The configuration: the latest data intended for the session. This may be empty if
        *                the client already has the latest version of the configuration.</p>
        *             </li>
        *          </ul>
        *          <p>For more information and to view example CLI commands that show how to retrieve a
        *          configuration using the AppConfig Data <code>StartConfigurationSession</code> and
        *             <code>GetLatestConfiguration</code> API actions, see <a href="http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration">Receiving the
        *             configuration</a> in the <i>AppConfig User Guide</i>.</p>
        */
    export class AppConfigData extends AppConfigDataClient {
            /**
                * <p>Retrieves the latest deployed configuration. This API may return empty configuration
                *          data if the client already has the latest version. For more information about this API
                *          action and to view example CLI commands that show how to use it with the <a>StartConfigurationSession</a> API action, see <a href="http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration">Receiving the
                *             configuration</a> in the <i>AppConfig User Guide</i>. </p>
                *          <important>
                *             <p>Note the following important information.</p>
                *             <ul>
                *                <li>
                *                   <p>Each configuration token is only valid for one call to <code>GetLatestConfiguration</code>.
                *                   The <code>GetLatestConfiguration</code> response includes a <code>NextPollConfigurationToken</code> that
                *                   should always replace the token used for the just-completed call in preparation
                *                   for the next one. </p>
                *                </li>
                *                <li>
                *                   <p>
                *                      <code>GetLatestConfiguration</code> is a priced call. For more information, see
                *                      <a href="https://aws.amazon.com/systems-manager/pricing/">Pricing</a>.</p>
                *                </li>
                *             </ul>
                *          </important>
                */
            getLatestConfiguration(args: GetLatestConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<GetLatestConfigurationCommandOutput>;
            getLatestConfiguration(args: GetLatestConfigurationCommandInput, cb: (err: any, data?: GetLatestConfigurationCommandOutput) => void): void;
            getLatestConfiguration(args: GetLatestConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLatestConfigurationCommandOutput) => void): void;
            /**
                * <p>Starts a configuration session used to retrieve a deployed configuration. For more
                *          information about this API action and to view example CLI commands that show how to use
                *          it with the <a>GetLatestConfiguration</a> API action, see <a href="http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration">Receiving the
                *             configuration</a> in the <i>AppConfig User Guide</i>. </p>
                */
            startConfigurationSession(args: StartConfigurationSessionCommandInput, options?: __HttpHandlerOptions): Promise<StartConfigurationSessionCommandOutput>;
            startConfigurationSession(args: StartConfigurationSessionCommandInput, cb: (err: any, data?: StartConfigurationSessionCommandOutput) => void): void;
            startConfigurationSession(args: StartConfigurationSessionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartConfigurationSessionCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/AppConfigDataClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { GetLatestConfigurationCommandInput, GetLatestConfigurationCommandOutput } from "@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/commands/GetLatestConfigurationCommand";
    import { StartConfigurationSessionCommandInput, StartConfigurationSessionCommandOutput } from "@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/commands/StartConfigurationSessionCommand";
    export type ServiceInputTypes = GetLatestConfigurationCommandInput | StartConfigurationSessionCommandInput;
    export type ServiceOutputTypes = GetLatestConfigurationCommandOutput | StartConfigurationSessionCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type AppConfigDataClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of AppConfigDataClient class constructor that set the region, credentials and other options.
        */
    export interface AppConfigDataClientConfig extends AppConfigDataClientConfigType {
    }
    type AppConfigDataClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of AppConfigDataClient class. This is resolved and normalized from the {@link AppConfigDataClientConfig | constructor configuration interface}.
        */
    export interface AppConfigDataClientResolvedConfig extends AppConfigDataClientResolvedConfigType {
    }
    /**
        * <p>AppConfig Data provides the data plane APIs your application uses to retrieve configuration data.
        *          Here's how it works:</p>
        *          <p>Your application retrieves configuration data by first establishing a configuration
        *          session using the AppConfig Data <a>StartConfigurationSession</a> API action. Your session's
        *          client then makes periodic calls to <a>GetLatestConfiguration</a> to check for
        *          and retrieve the latest data available.</p>
        *          <p>When calling <code>StartConfigurationSession</code>, your code sends the following
        *          information:</p>
        *          <ul>
        *             <li>
        *                <p>Identifiers (ID or name) of an AppConfig application, environment, and
        *                configuration profile that the session tracks.</p>
        *             </li>
        *             <li>
        *                <p>(Optional) The minimum amount of time the session's client must wait between calls
        *                to <code>GetLatestConfiguration</code>.</p>
        *             </li>
        *          </ul>
        *          <p>In response, AppConfig provides an <code>InitialConfigurationToken</code> to be given to
        *          the session's client and used the first time it calls <code>GetLatestConfiguration</code>
        *          for that session.</p>
        *          <p>When calling <code>GetLatestConfiguration</code>, your client code sends the most recent
        *             <code>ConfigurationToken</code> value it has and receives in response:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>NextPollConfigurationToken</code>: the <code>ConfigurationToken</code> value
        *                to use on the next call to <code>GetLatestConfiguration</code>.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>NextPollIntervalInSeconds</code>: the duration the client should wait before
        *                making its next call to <code>GetLatestConfiguration</code>. This duration may vary
        *                over the course of the session, so it should be used instead of the value sent on the
        *                   <code>StartConfigurationSession</code> call.</p>
        *             </li>
        *             <li>
        *                <p>The configuration: the latest data intended for the session. This may be empty if
        *                the client already has the latest version of the configuration.</p>
        *             </li>
        *          </ul>
        *          <p>For more information and to view example CLI commands that show how to retrieve a
        *          configuration using the AppConfig Data <code>StartConfigurationSession</code> and
        *             <code>GetLatestConfiguration</code> API actions, see <a href="http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration">Receiving the
        *             configuration</a> in the <i>AppConfig User Guide</i>.</p>
        */
    export class AppConfigDataClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, AppConfigDataClientResolvedConfig> {
            /**
                * The resolved configuration of AppConfigDataClient class. This is resolved and normalized from the {@link AppConfigDataClientConfig | constructor configuration interface}.
                */
            readonly config: AppConfigDataClientResolvedConfig;
            constructor(configuration: AppConfigDataClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/commands/GetLatestConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigDataClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/AppConfigDataClient";
    import { GetLatestConfigurationRequest, GetLatestConfigurationResponse } from "@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/models/models_0";
    export interface GetLatestConfigurationCommandInput extends GetLatestConfigurationRequest {
    }
    export interface GetLatestConfigurationCommandOutput extends GetLatestConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the latest deployed configuration. This API may return empty configuration
        *          data if the client already has the latest version. For more information about this API
        *          action and to view example CLI commands that show how to use it with the <a>StartConfigurationSession</a> API action, see <a href="http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration">Receiving the
        *             configuration</a> in the <i>AppConfig User Guide</i>. </p>
        *          <important>
        *             <p>Note the following important information.</p>
        *             <ul>
        *                <li>
        *                   <p>Each configuration token is only valid for one call to <code>GetLatestConfiguration</code>.
        *                   The <code>GetLatestConfiguration</code> response includes a <code>NextPollConfigurationToken</code> that
        *                   should always replace the token used for the just-completed call in preparation
        *                   for the next one. </p>
        *                </li>
        *                <li>
        *                   <p>
        *                      <code>GetLatestConfiguration</code> is a priced call. For more information, see
        *                      <a href="https://aws.amazon.com/systems-manager/pricing/">Pricing</a>.</p>
        *                </li>
        *             </ul>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigDataClient, GetLatestConfigurationCommand } from "@aws-sdk/client-appconfigdata"; // ES Modules import
        * // const { AppConfigDataClient, GetLatestConfigurationCommand } = require("@aws-sdk/client-appconfigdata"); // CommonJS import
        * const client = new AppConfigDataClient(config);
        * const command = new GetLatestConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLatestConfigurationCommandInput} for command's `input` shape.
        * @see {@link GetLatestConfigurationCommandOutput} for command's `response` shape.
        * @see {@link AppConfigDataClientResolvedConfig | config} for AppConfigDataClient's `config` shape.
        *
        */
    export class GetLatestConfigurationCommand extends $Command<GetLatestConfigurationCommandInput, GetLatestConfigurationCommandOutput, AppConfigDataClientResolvedConfig> {
            readonly input: GetLatestConfigurationCommandInput;
            constructor(input: GetLatestConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigDataClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLatestConfigurationCommandInput, GetLatestConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/commands/StartConfigurationSessionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppConfigDataClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/AppConfigDataClient";
    import { StartConfigurationSessionRequest, StartConfigurationSessionResponse } from "@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/models/models_0";
    export interface StartConfigurationSessionCommandInput extends StartConfigurationSessionRequest {
    }
    export interface StartConfigurationSessionCommandOutput extends StartConfigurationSessionResponse, __MetadataBearer {
    }
    /**
        * <p>Starts a configuration session used to retrieve a deployed configuration. For more
        *          information about this API action and to view example CLI commands that show how to use
        *          it with the <a>GetLatestConfiguration</a> API action, see <a href="http://docs.aws.amazon.com/appconfig/latest/userguide/appconfig-retrieving-the-configuration">Receiving the
        *             configuration</a> in the <i>AppConfig User Guide</i>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppConfigDataClient, StartConfigurationSessionCommand } from "@aws-sdk/client-appconfigdata"; // ES Modules import
        * // const { AppConfigDataClient, StartConfigurationSessionCommand } = require("@aws-sdk/client-appconfigdata"); // CommonJS import
        * const client = new AppConfigDataClient(config);
        * const command = new StartConfigurationSessionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartConfigurationSessionCommandInput} for command's `input` shape.
        * @see {@link StartConfigurationSessionCommandOutput} for command's `response` shape.
        * @see {@link AppConfigDataClientResolvedConfig | config} for AppConfigDataClient's `config` shape.
        *
        */
    export class StartConfigurationSessionCommand extends $Command<StartConfigurationSessionCommandInput, StartConfigurationSessionCommandOutput, AppConfigDataClientResolvedConfig> {
            readonly input: StartConfigurationSessionCommandInput;
            constructor(input: StartConfigurationSessionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppConfigDataClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartConfigurationSessionCommandInput, StartConfigurationSessionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { AppConfigDataServiceException as __BaseException } from "@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/models/AppConfigDataServiceException";
    export enum InvalidParameterProblem {
            /**
                * The parameter was corrupted and could not be understood by the service.
                */
            CORRUPTED = "Corrupted",
            /**
                * The parameter was expired and can no longer be used.
                */
            EXPIRED = "Expired",
            /**
                * The client called the service before the time specified in the poll interval.
                */
            POLL_INTERVAL_NOT_SATISFIED = "PollIntervalNotSatisfied"
    }
    /**
        * <p>Information about an invalid parameter.</p>
        */
    export interface InvalidParameterDetail {
            /**
                * <p>The reason the parameter is invalid.</p>
                */
            Problem?: InvalidParameterProblem | string;
    }
    export namespace InvalidParameterDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InvalidParameterDetail) => any;
    }
    /**
        * <p>Detailed information about the input that failed to satisfy the constraints specified by
        *          a call.</p>
        */
    export type BadRequestDetails = BadRequestDetails.InvalidParametersMember | BadRequestDetails.$UnknownMember;
    export namespace BadRequestDetails {
            /**
                * <p>One or more specified parameters are not valid for the call.</p>
                */
            interface InvalidParametersMember {
                    InvalidParameters: Record<string, InvalidParameterDetail>;
                    $unknown?: never;
            }
            interface $UnknownMember {
                    InvalidParameters?: never;
                    $unknown: [string, any];
            }
            interface Visitor<T> {
                    InvalidParameters: (value: Record<string, InvalidParameterDetail>) => T;
                    _: (name: string, value: any) => T;
            }
            const visit: <T>(value: BadRequestDetails, visitor: Visitor<T>) => T;
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BadRequestDetails) => any;
    }
    export enum BadRequestReason {
            /**
                * Indicates there was a problem with one or more of the parameters.
                * See InvalidParameters in the BadRequestDetails for more information.
                */
            INVALID_PARAMETERS = "InvalidParameters"
    }
    /**
        * <p>The input fails to satisfy the constraints specified by the service.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>Code indicating the reason the request was invalid.</p>
                */
            Reason?: BadRequestReason | string;
            /**
                * <p>Details describing why the request was invalid.</p>
                */
            Details?: BadRequestDetails;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    /**
        * <p>There was an internal failure in the service.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    export enum ResourceType {
            /**
                * Resource type value for the Application resource.
                */
            APPLICATION = "Application",
            /**
                * Resource type value for the Configuration resource.
                */
            CONFIGURATION = "Configuration",
            /**
                * Resource type value for the ConfigurationProfile resource.
                */
            CONFIGURATION_PROFILE = "ConfigurationProfile",
            /**
                * Resource type value for the Deployment resource.
                */
            DEPLOYMENT = "Deployment",
            /**
                * Resource type value for the Environment resource.
                */
            ENVIRONMENT = "Environment"
    }
    /**
        * <p>The requested resource could not be found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p>The type of resource that was not found.</p>
                */
            ResourceType?: ResourceType | string;
            /**
                * <p>A map indicating which parameters in the request reference the resource that was not found.</p>
                */
            ReferencedBy?: Record<string, string>;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export interface StartConfigurationSessionRequest {
            /**
                * <p>The application ID or the application name.</p>
                */
            ApplicationIdentifier: string | undefined;
            /**
                * <p>The environment ID or the environment name.</p>
                */
            EnvironmentIdentifier: string | undefined;
            /**
                * <p>The configuration profile ID or the configuration profile name.</p>
                */
            ConfigurationProfileIdentifier: string | undefined;
            /**
                * <p>Sets a constraint on a session. If you specify a value of, for example, 60 seconds, then
                *          the client that established the session can't call <a>GetLatestConfiguration</a>
                *          more frequently then every 60 seconds.</p>
                */
            RequiredMinimumPollIntervalInSeconds?: number;
    }
    export namespace StartConfigurationSessionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartConfigurationSessionRequest) => any;
    }
    export interface StartConfigurationSessionResponse {
            /**
                * <p>Token encapsulating state about the configuration session. Provide this token to the
                *             <code>GetLatestConfiguration</code> API to retrieve configuration data.</p>
                *          <important>
                *             <p>This token should only be used once in your first call to
                *                <code>GetLatestConfiguration</code>. You MUST use the new token in the
                *                <code>GetLatestConfiguration</code> response
                *             (<code>NextPollConfigurationToken</code>) in each subsequent call to
                *                <code>GetLatestConfiguration</code>.</p>
                *          </important>
                */
            InitialConfigurationToken?: string;
    }
    export namespace StartConfigurationSessionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartConfigurationSessionResponse) => any;
    }
    /**
        * <p>The request was denied due to request throttling.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    export interface GetLatestConfigurationRequest {
            /**
                * <p>Token describing the current state of the configuration session. To obtain a token,
                *          first call the <a>StartConfigurationSession</a> API. Note that every call to
                *             <code>GetLatestConfiguration</code> will return a new <code>ConfigurationToken</code>
                *             (<code>NextPollConfigurationToken</code> in the response) and MUST be provided to
                *          subsequent <code>GetLatestConfiguration</code> API calls.</p>
                */
            ConfigurationToken: string | undefined;
    }
    export namespace GetLatestConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLatestConfigurationRequest) => any;
    }
    export interface GetLatestConfigurationResponse {
            /**
                * <p>The latest token describing the current state of the configuration session. This MUST be
                *          provided to the next call to <code>GetLatestConfiguration.</code>
                *          </p>
                */
            NextPollConfigurationToken?: string;
            /**
                * <p>The amount of time the client should wait before polling for configuration updates
                *          again. Use <code>RequiredMinimumPollIntervalInSeconds</code> to set the desired poll
                *          interval.</p>
                */
            NextPollIntervalInSeconds?: number;
            /**
                * <p>A standard MIME type describing the format of the configuration content.</p>
                */
            ContentType?: string;
            /**
                * <p>The data of the configuration. This may be empty if the client already has the latest
                *          version of configuration.</p>
                */
            Configuration?: Uint8Array;
    }
    export namespace GetLatestConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLatestConfigurationResponse) => any;
    }
}

declare module '@aws-sdk/client-appconfigdata/node_modules/@aws-sdk/client-appconfigdata/dist-types/models/AppConfigDataServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from AppConfigData service.
        */
    export class AppConfigDataServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

