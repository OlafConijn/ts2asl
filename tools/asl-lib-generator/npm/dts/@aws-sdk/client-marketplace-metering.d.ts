// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-marketplace-metering' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { BatchMeterUsageCommandInput, BatchMeterUsageCommandOutput } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/commands/BatchMeterUsageCommand";
    import { MeterUsageCommandInput, MeterUsageCommandOutput } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/commands/MeterUsageCommand";
    import { RegisterUsageCommandInput, RegisterUsageCommandOutput } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/commands/RegisterUsageCommand";
    import { ResolveCustomerCommandInput, ResolveCustomerCommandOutput } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/commands/ResolveCustomerCommand";
    import { MarketplaceMeteringClient } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/MarketplaceMeteringClient";
    /**
        * <fullname>AWS Marketplace Metering Service</fullname>
        *         <p>This reference provides descriptions of the low-level AWS Marketplace Metering Service
        *             API.</p>
        *         <p>AWS Marketplace sellers can use this API to submit usage data for custom usage
        *             dimensions.</p>
        *         <p>For information on the permissions you need to use this API, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/iam-user-policy-for-aws-marketplace-actions.html">AWS Marketplace metering and entitlement API permissions</a> in the
        *                 <i>AWS Marketplace Seller Guide.</i>
        *         </p>
        *         <p>
        *             <b>Submitting Metering Records</b>
        *         </p>
        *         <ul>
        *             <li>
        *                 <p>
        *                     <i>MeterUsage</i> - Submits the metering record for an AWS
        *                     Marketplace product. <code>MeterUsage</code> is called from an EC2 instance or a
        *                     container running on EKS or ECS.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                     <i>BatchMeterUsage</i> - Submits the metering record for a set of
        *                     customers. <code>BatchMeterUsage</code> is called from a software-as-a-service
        *                     (SaaS) application.</p>
        *             </li>
        *          </ul>
        *         <p>
        *             <b>Accepting New Customers</b>
        *         </p>
        *         <ul>
        *             <li>
        *                 <p>
        *                     <i>ResolveCustomer</i> - Called by a SaaS application during the
        *                     registration process. When a buyer visits your website during the registration
        *                     process, the buyer submits a Registration Token through the browser. The
        *                     Registration Token is resolved through this API to obtain a
        *                         <code>CustomerIdentifier</code>
        *
        *                     along with the <code>CustomerAWSAccountId</code> and
        *                     <code>ProductCode</code>.</p>
        *             </li>
        *          </ul>
        *         <p>
        *             <b>Entitlement and Metering for Paid Container Products</b>
        *         </p>
        *         <ul>
        *             <li>
        *                 <p>Paid container software products sold through AWS Marketplace must integrate
        *                     with the AWS Marketplace Metering Service and call the
        *                         <code>RegisterUsage</code> operation for software entitlement and metering.
        *                     Free and BYOL products for Amazon ECS or Amazon EKS aren't required to call
        *                         <code>RegisterUsage</code>, but you can do so if you want to receive usage
        *                     data in your seller reports. For more information on using the
        *                         <code>RegisterUsage</code> operation, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html">Container-Based Products</a>. </p>
        *             </li>
        *          </ul>
        *         <p>
        *             <code>BatchMeterUsage</code> API calls are captured by AWS CloudTrail. You can use
        *             Cloudtrail to verify that the SaaS metering records that you sent are accurate by
        *             searching for records with the <code>eventName</code> of <code>BatchMeterUsage</code>.
        *             You can also use CloudTrail to audit records over time. For more information, see the
        *                     <i>
        *                <a href="http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html">AWS CloudTrail User Guide</a>.</i>
        *          </p>
        */
    export class MarketplaceMetering extends MarketplaceMeteringClient {
            /**
                * <p>
                *             <code>BatchMeterUsage</code> is called from a SaaS application listed on AWS
                *             Marketplace to post metering records for a set of customers.</p>
                *         <p>For identical requests, the API is idempotent; requests can be retried with the same
                *             records or a subset of the input records.</p>
                *         <p>Every request to <code>BatchMeterUsage</code> is for one product. If you need to meter
                *             usage for multiple products, you must make multiple calls to
                *                 <code>BatchMeterUsage</code>.</p>
                *         <p>Usage records are expected to be submitted as quickly as possible after the event that
                *             is being recorded, and are not accepted more than 6 hours after the event.</p>
                *         <p>
                *             <code>BatchMeterUsage</code> can process up to 25 <code>UsageRecords</code> at a
                *             time.</p>
                *         <p>A <code>UsageRecord</code> can optionally include multiple usage allocations, to
                *             provide customers with usage data split into buckets by tags that you define (or allow
                *             the customer to define).</p>
                *         <p>
                *             <code>BatchMeterUsage</code> returns a list of <code>UsageRecordResult</code> objects,
                *             showing the result for each <code>UsageRecord</code>, as well as a list of
                *                 <code>UnprocessedRecords</code>, indicating errors in the service side that you
                *             should retry.</p>
                *         <p>
                *             <code>BatchMeterUsage</code> requests must be less than 1MB in size.</p>
                *         <note>
                *             <p>For an example of using <code>BatchMeterUsage</code>, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-batchmeterusage-example"> BatchMeterUsage code example</a> in the <i>AWS Marketplace Seller
                *                     Guide</i>.</p>
                *         </note>
                */
            batchMeterUsage(args: BatchMeterUsageCommandInput, options?: __HttpHandlerOptions): Promise<BatchMeterUsageCommandOutput>;
            batchMeterUsage(args: BatchMeterUsageCommandInput, cb: (err: any, data?: BatchMeterUsageCommandOutput) => void): void;
            batchMeterUsage(args: BatchMeterUsageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchMeterUsageCommandOutput) => void): void;
            /**
                * <p>API to emit metering records. For identical requests, the API is idempotent. It simply
                *             returns the metering record ID.</p>
                *         <p>
                *             <code>MeterUsage</code> is authenticated on the buyer's AWS account using credentials
                *             from the EC2 instance, ECS task, or EKS pod.</p>
                *         <p>
                *             <code>MeterUsage</code> can optionally include multiple usage allocations, to provide
                *             customers with usage data split into buckets by tags that you define (or allow the
                *             customer to define).</p>
                *         <p>Usage records are expected to be submitted as quickly as possible after the event that
                *             is being recorded, and are not accepted more than 6 hours after the event.</p>
                */
            meterUsage(args: MeterUsageCommandInput, options?: __HttpHandlerOptions): Promise<MeterUsageCommandOutput>;
            meterUsage(args: MeterUsageCommandInput, cb: (err: any, data?: MeterUsageCommandOutput) => void): void;
            meterUsage(args: MeterUsageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: MeterUsageCommandOutput) => void): void;
            /**
                * <p>Paid container software products sold through AWS Marketplace must integrate with the
                *             AWS Marketplace Metering Service and call the <code>RegisterUsage</code> operation for
                *             software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS
                *             aren't required to call <code>RegisterUsage</code>, but you may choose to do so if you
                *             would like to receive usage data in your seller reports. The sections below explain the
                *             behavior of <code>RegisterUsage</code>. <code>RegisterUsage</code> performs two primary
                *             functions: metering and entitlement.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <i>Entitlement</i>: <code>RegisterUsage</code> allows you to
                *                     verify that the customer running your paid software is subscribed to your
                *                     product on AWS Marketplace, enabling you to guard against unauthorized use. Your
                *                     container image that integrates with <code>RegisterUsage</code> is only required
                *                     to guard against unauthorized use at container startup, as such a
                *                         <code>CustomerNotSubscribedException</code> or
                *                         <code>PlatformNotSupportedException</code> will only be thrown on the
                *                     initial call to <code>RegisterUsage</code>. Subsequent calls from the same
                *                     Amazon ECS task instance (e.g. task-id) or Amazon EKS pod will not throw a
                *                         <code>CustomerNotSubscribedException</code>, even if the customer
                *                     unsubscribes while the Amazon ECS task or Amazon EKS pod is still
                *                     running.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <i>Metering</i>: <code>RegisterUsage</code> meters software use
                *                     per ECS task, per hour, or per pod for Amazon EKS with usage prorated to the
                *                     second. A minimum of 1 minute of usage applies to tasks that are short lived.
                *                     For example, if a customer has a 10 node Amazon ECS or Amazon EKS cluster and a
                *                     service configured as a Daemon Set, then Amazon ECS or Amazon EKS will launch a
                *                     task on all 10 cluster nodes and the customer will be charged: (10 *
                *                     hourly_rate). Metering for software use is automatically handled by the AWS
                *                     Marketplace Metering Control Plane -- your software is not required to perform
                *                     any metering specific actions, other than call <code>RegisterUsage</code> once
                *                     for metering of software use to commence. The AWS Marketplace Metering Control
                *                     Plane will also continue to bill customers for running ECS tasks and Amazon EKS
                *                     pods, regardless of the customers subscription state, removing the need for your
                *                     software to perform entitlement checks at runtime.</p>
                *             </li>
                *          </ul>
                */
            registerUsage(args: RegisterUsageCommandInput, options?: __HttpHandlerOptions): Promise<RegisterUsageCommandOutput>;
            registerUsage(args: RegisterUsageCommandInput, cb: (err: any, data?: RegisterUsageCommandOutput) => void): void;
            registerUsage(args: RegisterUsageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterUsageCommandOutput) => void): void;
            /**
                * <p>
                *             <code>ResolveCustomer</code> is called by a SaaS application during the registration
                *             process. When a buyer visits your website during the registration process, the buyer
                *             submits a registration token through their browser. The registration token is resolved
                *             through this API to obtain a <code>CustomerIdentifier</code>
                *              along with the
                *                 <code>CustomerAWSAccountId</code> and
                *             <code>ProductCode</code>.</p>
                *         <note>
                *             <p>The API needs to called from the seller account id used to publish the SaaS
                *                 application to successfully resolve the token.</p>
                *             <p>For an example of using <code>ResolveCustomer</code>, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-resolvecustomer-example"> ResolveCustomer code example</a> in the <i>AWS Marketplace Seller
                *                     Guide</i>.</p>
                *         </note>
                */
            resolveCustomer(args: ResolveCustomerCommandInput, options?: __HttpHandlerOptions): Promise<ResolveCustomerCommandOutput>;
            resolveCustomer(args: ResolveCustomerCommandInput, cb: (err: any, data?: ResolveCustomerCommandOutput) => void): void;
            resolveCustomer(args: ResolveCustomerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResolveCustomerCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/commands/BatchMeterUsageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MarketplaceMeteringClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/MarketplaceMeteringClient";
    import { BatchMeterUsageRequest, BatchMeterUsageResult } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/models/models_0";
    export interface BatchMeterUsageCommandInput extends BatchMeterUsageRequest {
    }
    export interface BatchMeterUsageCommandOutput extends BatchMeterUsageResult, __MetadataBearer {
    }
    /**
        * <p>
        *             <code>BatchMeterUsage</code> is called from a SaaS application listed on AWS
        *             Marketplace to post metering records for a set of customers.</p>
        *         <p>For identical requests, the API is idempotent; requests can be retried with the same
        *             records or a subset of the input records.</p>
        *         <p>Every request to <code>BatchMeterUsage</code> is for one product. If you need to meter
        *             usage for multiple products, you must make multiple calls to
        *                 <code>BatchMeterUsage</code>.</p>
        *         <p>Usage records are expected to be submitted as quickly as possible after the event that
        *             is being recorded, and are not accepted more than 6 hours after the event.</p>
        *         <p>
        *             <code>BatchMeterUsage</code> can process up to 25 <code>UsageRecords</code> at a
        *             time.</p>
        *         <p>A <code>UsageRecord</code> can optionally include multiple usage allocations, to
        *             provide customers with usage data split into buckets by tags that you define (or allow
        *             the customer to define).</p>
        *         <p>
        *             <code>BatchMeterUsage</code> returns a list of <code>UsageRecordResult</code> objects,
        *             showing the result for each <code>UsageRecord</code>, as well as a list of
        *                 <code>UnprocessedRecords</code>, indicating errors in the service side that you
        *             should retry.</p>
        *         <p>
        *             <code>BatchMeterUsage</code> requests must be less than 1MB in size.</p>
        *         <note>
        *             <p>For an example of using <code>BatchMeterUsage</code>, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-batchmeterusage-example"> BatchMeterUsage code example</a> in the <i>AWS Marketplace Seller
        *                     Guide</i>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MarketplaceMeteringClient, BatchMeterUsageCommand } from "@aws-sdk/client-marketplace-metering"; // ES Modules import
        * // const { MarketplaceMeteringClient, BatchMeterUsageCommand } = require("@aws-sdk/client-marketplace-metering"); // CommonJS import
        * const client = new MarketplaceMeteringClient(config);
        * const command = new BatchMeterUsageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchMeterUsageCommandInput} for command's `input` shape.
        * @see {@link BatchMeterUsageCommandOutput} for command's `response` shape.
        * @see {@link MarketplaceMeteringClientResolvedConfig | config} for MarketplaceMeteringClient's `config` shape.
        *
        */
    export class BatchMeterUsageCommand extends $Command<BatchMeterUsageCommandInput, BatchMeterUsageCommandOutput, MarketplaceMeteringClientResolvedConfig> {
            readonly input: BatchMeterUsageCommandInput;
            constructor(input: BatchMeterUsageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MarketplaceMeteringClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchMeterUsageCommandInput, BatchMeterUsageCommandOutput>;
    }
}

declare module '@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/commands/MeterUsageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MarketplaceMeteringClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/MarketplaceMeteringClient";
    import { MeterUsageRequest, MeterUsageResult } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/models/models_0";
    export interface MeterUsageCommandInput extends MeterUsageRequest {
    }
    export interface MeterUsageCommandOutput extends MeterUsageResult, __MetadataBearer {
    }
    /**
        * <p>API to emit metering records. For identical requests, the API is idempotent. It simply
        *             returns the metering record ID.</p>
        *         <p>
        *             <code>MeterUsage</code> is authenticated on the buyer's AWS account using credentials
        *             from the EC2 instance, ECS task, or EKS pod.</p>
        *         <p>
        *             <code>MeterUsage</code> can optionally include multiple usage allocations, to provide
        *             customers with usage data split into buckets by tags that you define (or allow the
        *             customer to define).</p>
        *         <p>Usage records are expected to be submitted as quickly as possible after the event that
        *             is being recorded, and are not accepted more than 6 hours after the event.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MarketplaceMeteringClient, MeterUsageCommand } from "@aws-sdk/client-marketplace-metering"; // ES Modules import
        * // const { MarketplaceMeteringClient, MeterUsageCommand } = require("@aws-sdk/client-marketplace-metering"); // CommonJS import
        * const client = new MarketplaceMeteringClient(config);
        * const command = new MeterUsageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link MeterUsageCommandInput} for command's `input` shape.
        * @see {@link MeterUsageCommandOutput} for command's `response` shape.
        * @see {@link MarketplaceMeteringClientResolvedConfig | config} for MarketplaceMeteringClient's `config` shape.
        *
        */
    export class MeterUsageCommand extends $Command<MeterUsageCommandInput, MeterUsageCommandOutput, MarketplaceMeteringClientResolvedConfig> {
            readonly input: MeterUsageCommandInput;
            constructor(input: MeterUsageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MarketplaceMeteringClientResolvedConfig, options?: __HttpHandlerOptions): Handler<MeterUsageCommandInput, MeterUsageCommandOutput>;
    }
}

declare module '@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/commands/RegisterUsageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MarketplaceMeteringClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/MarketplaceMeteringClient";
    import { RegisterUsageRequest, RegisterUsageResult } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/models/models_0";
    export interface RegisterUsageCommandInput extends RegisterUsageRequest {
    }
    export interface RegisterUsageCommandOutput extends RegisterUsageResult, __MetadataBearer {
    }
    /**
        * <p>Paid container software products sold through AWS Marketplace must integrate with the
        *             AWS Marketplace Metering Service and call the <code>RegisterUsage</code> operation for
        *             software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS
        *             aren't required to call <code>RegisterUsage</code>, but you may choose to do so if you
        *             would like to receive usage data in your seller reports. The sections below explain the
        *             behavior of <code>RegisterUsage</code>. <code>RegisterUsage</code> performs two primary
        *             functions: metering and entitlement.</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                     <i>Entitlement</i>: <code>RegisterUsage</code> allows you to
        *                     verify that the customer running your paid software is subscribed to your
        *                     product on AWS Marketplace, enabling you to guard against unauthorized use. Your
        *                     container image that integrates with <code>RegisterUsage</code> is only required
        *                     to guard against unauthorized use at container startup, as such a
        *                         <code>CustomerNotSubscribedException</code> or
        *                         <code>PlatformNotSupportedException</code> will only be thrown on the
        *                     initial call to <code>RegisterUsage</code>. Subsequent calls from the same
        *                     Amazon ECS task instance (e.g. task-id) or Amazon EKS pod will not throw a
        *                         <code>CustomerNotSubscribedException</code>, even if the customer
        *                     unsubscribes while the Amazon ECS task or Amazon EKS pod is still
        *                     running.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                     <i>Metering</i>: <code>RegisterUsage</code> meters software use
        *                     per ECS task, per hour, or per pod for Amazon EKS with usage prorated to the
        *                     second. A minimum of 1 minute of usage applies to tasks that are short lived.
        *                     For example, if a customer has a 10 node Amazon ECS or Amazon EKS cluster and a
        *                     service configured as a Daemon Set, then Amazon ECS or Amazon EKS will launch a
        *                     task on all 10 cluster nodes and the customer will be charged: (10 *
        *                     hourly_rate). Metering for software use is automatically handled by the AWS
        *                     Marketplace Metering Control Plane -- your software is not required to perform
        *                     any metering specific actions, other than call <code>RegisterUsage</code> once
        *                     for metering of software use to commence. The AWS Marketplace Metering Control
        *                     Plane will also continue to bill customers for running ECS tasks and Amazon EKS
        *                     pods, regardless of the customers subscription state, removing the need for your
        *                     software to perform entitlement checks at runtime.</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MarketplaceMeteringClient, RegisterUsageCommand } from "@aws-sdk/client-marketplace-metering"; // ES Modules import
        * // const { MarketplaceMeteringClient, RegisterUsageCommand } = require("@aws-sdk/client-marketplace-metering"); // CommonJS import
        * const client = new MarketplaceMeteringClient(config);
        * const command = new RegisterUsageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterUsageCommandInput} for command's `input` shape.
        * @see {@link RegisterUsageCommandOutput} for command's `response` shape.
        * @see {@link MarketplaceMeteringClientResolvedConfig | config} for MarketplaceMeteringClient's `config` shape.
        *
        */
    export class RegisterUsageCommand extends $Command<RegisterUsageCommandInput, RegisterUsageCommandOutput, MarketplaceMeteringClientResolvedConfig> {
            readonly input: RegisterUsageCommandInput;
            constructor(input: RegisterUsageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MarketplaceMeteringClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterUsageCommandInput, RegisterUsageCommandOutput>;
    }
}

declare module '@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/commands/ResolveCustomerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { MarketplaceMeteringClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/MarketplaceMeteringClient";
    import { ResolveCustomerRequest, ResolveCustomerResult } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/models/models_0";
    export interface ResolveCustomerCommandInput extends ResolveCustomerRequest {
    }
    export interface ResolveCustomerCommandOutput extends ResolveCustomerResult, __MetadataBearer {
    }
    /**
        * <p>
        *             <code>ResolveCustomer</code> is called by a SaaS application during the registration
        *             process. When a buyer visits your website during the registration process, the buyer
        *             submits a registration token through their browser. The registration token is resolved
        *             through this API to obtain a <code>CustomerIdentifier</code>
        *              along with the
        *                 <code>CustomerAWSAccountId</code> and
        *             <code>ProductCode</code>.</p>
        *         <note>
        *             <p>The API needs to called from the seller account id used to publish the SaaS
        *                 application to successfully resolve the token.</p>
        *             <p>For an example of using <code>ResolveCustomer</code>, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-resolvecustomer-example"> ResolveCustomer code example</a> in the <i>AWS Marketplace Seller
        *                     Guide</i>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { MarketplaceMeteringClient, ResolveCustomerCommand } from "@aws-sdk/client-marketplace-metering"; // ES Modules import
        * // const { MarketplaceMeteringClient, ResolveCustomerCommand } = require("@aws-sdk/client-marketplace-metering"); // CommonJS import
        * const client = new MarketplaceMeteringClient(config);
        * const command = new ResolveCustomerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResolveCustomerCommandInput} for command's `input` shape.
        * @see {@link ResolveCustomerCommandOutput} for command's `response` shape.
        * @see {@link MarketplaceMeteringClientResolvedConfig | config} for MarketplaceMeteringClient's `config` shape.
        *
        */
    export class ResolveCustomerCommand extends $Command<ResolveCustomerCommandInput, ResolveCustomerCommandOutput, MarketplaceMeteringClientResolvedConfig> {
            readonly input: ResolveCustomerCommandInput;
            constructor(input: ResolveCustomerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: MarketplaceMeteringClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResolveCustomerCommandInput, ResolveCustomerCommandOutput>;
    }
}

declare module '@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/MarketplaceMeteringClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { BatchMeterUsageCommandInput, BatchMeterUsageCommandOutput } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/commands/BatchMeterUsageCommand";
    import { MeterUsageCommandInput, MeterUsageCommandOutput } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/commands/MeterUsageCommand";
    import { RegisterUsageCommandInput, RegisterUsageCommandOutput } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/commands/RegisterUsageCommand";
    import { ResolveCustomerCommandInput, ResolveCustomerCommandOutput } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/commands/ResolveCustomerCommand";
    export type ServiceInputTypes = BatchMeterUsageCommandInput | MeterUsageCommandInput | RegisterUsageCommandInput | ResolveCustomerCommandInput;
    export type ServiceOutputTypes = BatchMeterUsageCommandOutput | MeterUsageCommandOutput | RegisterUsageCommandOutput | ResolveCustomerCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type MarketplaceMeteringClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of MarketplaceMeteringClient class constructor that set the region, credentials and other options.
        */
    export interface MarketplaceMeteringClientConfig extends MarketplaceMeteringClientConfigType {
    }
    type MarketplaceMeteringClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of MarketplaceMeteringClient class. This is resolved and normalized from the {@link MarketplaceMeteringClientConfig | constructor configuration interface}.
        */
    export interface MarketplaceMeteringClientResolvedConfig extends MarketplaceMeteringClientResolvedConfigType {
    }
    /**
        * <fullname>AWS Marketplace Metering Service</fullname>
        *         <p>This reference provides descriptions of the low-level AWS Marketplace Metering Service
        *             API.</p>
        *         <p>AWS Marketplace sellers can use this API to submit usage data for custom usage
        *             dimensions.</p>
        *         <p>For information on the permissions you need to use this API, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/iam-user-policy-for-aws-marketplace-actions.html">AWS Marketplace metering and entitlement API permissions</a> in the
        *                 <i>AWS Marketplace Seller Guide.</i>
        *         </p>
        *         <p>
        *             <b>Submitting Metering Records</b>
        *         </p>
        *         <ul>
        *             <li>
        *                 <p>
        *                     <i>MeterUsage</i> - Submits the metering record for an AWS
        *                     Marketplace product. <code>MeterUsage</code> is called from an EC2 instance or a
        *                     container running on EKS or ECS.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                     <i>BatchMeterUsage</i> - Submits the metering record for a set of
        *                     customers. <code>BatchMeterUsage</code> is called from a software-as-a-service
        *                     (SaaS) application.</p>
        *             </li>
        *          </ul>
        *         <p>
        *             <b>Accepting New Customers</b>
        *         </p>
        *         <ul>
        *             <li>
        *                 <p>
        *                     <i>ResolveCustomer</i> - Called by a SaaS application during the
        *                     registration process. When a buyer visits your website during the registration
        *                     process, the buyer submits a Registration Token through the browser. The
        *                     Registration Token is resolved through this API to obtain a
        *                         <code>CustomerIdentifier</code>
        *
        *                     along with the <code>CustomerAWSAccountId</code> and
        *                     <code>ProductCode</code>.</p>
        *             </li>
        *          </ul>
        *         <p>
        *             <b>Entitlement and Metering for Paid Container Products</b>
        *         </p>
        *         <ul>
        *             <li>
        *                 <p>Paid container software products sold through AWS Marketplace must integrate
        *                     with the AWS Marketplace Metering Service and call the
        *                         <code>RegisterUsage</code> operation for software entitlement and metering.
        *                     Free and BYOL products for Amazon ECS or Amazon EKS aren't required to call
        *                         <code>RegisterUsage</code>, but you can do so if you want to receive usage
        *                     data in your seller reports. For more information on using the
        *                         <code>RegisterUsage</code> operation, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html">Container-Based Products</a>. </p>
        *             </li>
        *          </ul>
        *         <p>
        *             <code>BatchMeterUsage</code> API calls are captured by AWS CloudTrail. You can use
        *             Cloudtrail to verify that the SaaS metering records that you sent are accurate by
        *             searching for records with the <code>eventName</code> of <code>BatchMeterUsage</code>.
        *             You can also use CloudTrail to audit records over time. For more information, see the
        *                     <i>
        *                <a href="http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html">AWS CloudTrail User Guide</a>.</i>
        *          </p>
        */
    export class MarketplaceMeteringClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, MarketplaceMeteringClientResolvedConfig> {
            /**
                * The resolved configuration of MarketplaceMeteringClient class. This is resolved and normalized from the {@link MarketplaceMeteringClientConfig | constructor configuration interface}.
                */
            readonly config: MarketplaceMeteringClientResolvedConfig;
            constructor(configuration: MarketplaceMeteringClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { MarketplaceMeteringServiceException as __BaseException } from "@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/models/MarketplaceMeteringServiceException";
    /**
        * <p>Metadata assigned to an allocation. Each tag is made up of a <code>key</code> and a
        *                 <code>value</code>.</p>
        */
    export interface Tag {
            /**
                * <p>One part of a key-value pair that makes up a <code>tag</code>. A <code>key</code> is a
                *             label that acts like a category for the specific tag values.</p>
                */
            Key: string | undefined;
            /**
                * <p>One part of a key-value pair that makes up a <code>tag</code>. A <code>value</code>
                *             acts as a descriptor within a tag category (key). The value can be empty or null.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    /**
        * <p>Usage allocations allow you to split usage into buckets by tags.</p>
        *         <p>Each <code>UsageAllocation</code> indicates the usage quantity for a specific set of
        *             tags.</p>
        */
    export interface UsageAllocation {
            /**
                * <p>The total quantity allocated to this bucket of usage.</p>
                */
            AllocatedUsageQuantity: number | undefined;
            /**
                * <p>The set of tags that define the bucket of usage. For the bucket of items with no tags,
                *             this parameter can be left out.</p>
                */
            Tags?: Tag[];
    }
    export namespace UsageAllocation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UsageAllocation) => any;
    }
    /**
        * <p>A <code>UsageRecord</code> indicates a quantity of usage for a given product,
        *             customer, dimension and time.</p>
        *         <p>Multiple requests with the same <code>UsageRecords</code> as input will be
        *             de-duplicated to prevent double charges.</p>
        */
    export interface UsageRecord {
            /**
                * <p>Timestamp, in UTC, for which the usage is being reported.</p>
                *         <p>Your application can meter usage for up to one hour in the past. Make sure the
                *                 <code>timestamp</code> value is not before the start of the software usage.</p>
                */
            Timestamp: Date | undefined;
            /**
                * <p>The <code>CustomerIdentifier</code> is obtained through the
                *                 <code>ResolveCustomer</code> operation and represents an individual buyer in your
                *             application.</p>
                */
            CustomerIdentifier: string | undefined;
            /**
                * <p>During the process of registering a product on AWS Marketplace, dimensions are
                *             specified. These represent different units of value in your application.</p>
                */
            Dimension: string | undefined;
            /**
                * <p>The quantity of usage consumed by the customer for the given dimension and time.
                *             Defaults to <code>0</code> if not specified.</p>
                */
            Quantity?: number;
            /**
                * <p>The set of <code>UsageAllocations</code> to submit. The sum of all
                *                 <code>UsageAllocation</code> quantities must equal the Quantity of the
                *                 <code>UsageRecord</code>.</p>
                */
            UsageAllocations?: UsageAllocation[];
    }
    export namespace UsageRecord {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UsageRecord) => any;
    }
    /**
        * <p>A <code>BatchMeterUsageRequest</code> contains <code>UsageRecords</code>, which
        *             indicate quantities of usage within your application.</p>
        */
    export interface BatchMeterUsageRequest {
            /**
                * <p>The set of <code>UsageRecords</code> to submit. <code>BatchMeterUsage</code> accepts
                *             up to 25 <code>UsageRecords</code> at a time.</p>
                */
            UsageRecords: UsageRecord[] | undefined;
            /**
                * <p>Product code is used to uniquely identify a product in AWS Marketplace. The product
                *             code should be the same as the one used during the publishing of a new product.</p>
                */
            ProductCode: string | undefined;
    }
    export namespace BatchMeterUsageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchMeterUsageRequest) => any;
    }
    export enum UsageRecordResultStatus {
            CUSTOMER_NOT_SUBSCRIBED = "CustomerNotSubscribed",
            DUPLICATE_RECORD = "DuplicateRecord",
            SUCCESS = "Success"
    }
    /**
        * <p>A <code>UsageRecordResult</code> indicates the status of a given
        *                 <code>UsageRecord</code> processed by <code>BatchMeterUsage</code>.</p>
        */
    export interface UsageRecordResult {
            /**
                * <p>The <code>UsageRecord</code> that was part of the <code>BatchMeterUsage</code>
                *             request.</p>
                */
            UsageRecord?: UsageRecord;
            /**
                * <p>The <code>MeteringRecordId</code> is a unique identifier for this metering
                *             event.</p>
                */
            MeteringRecordId?: string;
            /**
                * <p>The <code>UsageRecordResult</code>
                *             <code>Status</code> indicates the status of an individual <code>UsageRecord</code>
                *             processed by <code>BatchMeterUsage</code>.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <i>Success</i>- The <code>UsageRecord</code> was accepted and
                *                     honored by <code>BatchMeterUsage</code>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <i>CustomerNotSubscribed</i>- The <code>CustomerIdentifier</code>
                *                     specified is not able to use your product. The <code>UsageRecord</code> was not
                *                     honored. There are three causes for this result:</p>
                *                 <ul>
                *                   <li>
                *                         <p>The customer identifier is invalid.</p>
                *                     </li>
                *                   <li>
                *                         <p>The customer identifier provided in the metering record does not have
                *                             an active agreement or subscription with this product. Future
                *                                 <code>UsageRecords</code> for this customer will fail until the
                *                             customer subscribes to your product.</p>
                *                     </li>
                *                   <li>
                *                         <p>The customer's AWS account was suspended.</p>
                *                     </li>
                *                </ul>
                *             </li>
                *             <li>
                *                 <p>
                *                     <i>DuplicateRecord</i>- Indicates that the
                *                         <code>UsageRecord</code> was invalid and not honored. A previously metered
                *                         <code>UsageRecord</code> had the same customer, dimension, and time, but a
                *                     different quantity.</p>
                *             </li>
                *          </ul>
                */
            Status?: UsageRecordResultStatus | string;
    }
    export namespace UsageRecordResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UsageRecordResult) => any;
    }
    /**
        * <p>Contains the <code>UsageRecords</code> processed by <code>BatchMeterUsage</code> and
        *             any records that have failed due to transient error.</p>
        */
    export interface BatchMeterUsageResult {
            /**
                * <p>Contains all <code>UsageRecords</code> processed by <code>BatchMeterUsage</code>.
                *             These records were either honored by AWS Marketplace Metering Service or were invalid.
                *             Invalid records should be fixed before being resubmitted.</p>
                */
            Results?: UsageRecordResult[];
            /**
                * <p>Contains all <code>UsageRecords</code> that were not processed by
                *                 <code>BatchMeterUsage</code>. This is a list of <code>UsageRecords</code>. You can
                *             retry the failed request by making another <code>BatchMeterUsage</code> call with this
                *             list as input in the <code>BatchMeterUsageRequest</code>.</p>
                */
            UnprocessedRecords?: UsageRecord[];
    }
    export namespace BatchMeterUsageResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchMeterUsageResult) => any;
    }
    /**
        * <p>The API is disabled in the Region.</p>
        */
    export class DisabledApiException extends __BaseException {
            readonly name: "DisabledApiException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DisabledApiException, __BaseException>);
    }
    /**
        * <p>An internal error has occurred. Retry your request. If the problem persists, post a
        *             message with details on the AWS forums.</p>
        */
    export class InternalServiceErrorException extends __BaseException {
            readonly name: "InternalServiceErrorException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServiceErrorException, __BaseException>);
    }
    /**
        * <p>You have metered usage for a <code>CustomerIdentifier</code> that does not
        *             exist.</p>
        */
    export class InvalidCustomerIdentifierException extends __BaseException {
            readonly name: "InvalidCustomerIdentifierException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidCustomerIdentifierException, __BaseException>);
    }
    /**
        * <p>The product code passed does not match the product code used for publishing the
        *             product.</p>
        */
    export class InvalidProductCodeException extends __BaseException {
            readonly name: "InvalidProductCodeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidProductCodeException, __BaseException>);
    }
    /**
        * <p>The tag is invalid, or the number of tags is greater than 5.</p>
        */
    export class InvalidTagException extends __BaseException {
            readonly name: "InvalidTagException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTagException, __BaseException>);
    }
    /**
        * <p>The usage allocation objects are invalid, or the number of allocations is greater than
        *             500 for a single usage record.</p>
        */
    export class InvalidUsageAllocationsException extends __BaseException {
            readonly name: "InvalidUsageAllocationsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidUsageAllocationsException, __BaseException>);
    }
    /**
        * <p>The usage dimension does not match one of the <code>UsageDimensions</code> associated
        *             with products.</p>
        */
    export class InvalidUsageDimensionException extends __BaseException {
            readonly name: "InvalidUsageDimensionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidUsageDimensionException, __BaseException>);
    }
    /**
        * <p>The calls to the API are throttled.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>The <code>timestamp</code> value passed in the <code>UsageRecord</code> is out of
        *             allowed range.</p>
        *         <p>For <code>BatchMeterUsage</code>, if any of the records are outside of the allowed
        *             range, the entire batch is not processed. You must remove invalid records and try
        *             again.</p>
        */
    export class TimestampOutOfBoundsException extends __BaseException {
            readonly name: "TimestampOutOfBoundsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TimestampOutOfBoundsException, __BaseException>);
    }
    /**
        * <p>Exception thrown when the customer does not have a valid subscription for the
        *             product.</p>
        */
    export class CustomerNotEntitledException extends __BaseException {
            readonly name: "CustomerNotEntitledException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CustomerNotEntitledException, __BaseException>);
    }
    /**
        * <p>A metering record has already been emitted by the same EC2 instance, ECS task, or EKS
        *             pod for the given {<code>usageDimension</code>, <code>timestamp</code>} with a different
        *                 <code>usageQuantity</code>.</p>
        */
    export class DuplicateRequestException extends __BaseException {
            readonly name: "DuplicateRequestException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateRequestException, __BaseException>);
    }
    /**
        * <p>The endpoint being called is in a AWS Region different from your EC2 instance, ECS
        *             task, or EKS pod. The Region of the Metering Service endpoint and the AWS Region of the
        *             resource must match.</p>
        */
    export class InvalidEndpointRegionException extends __BaseException {
            readonly name: "InvalidEndpointRegionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidEndpointRegionException, __BaseException>);
    }
    export interface MeterUsageRequest {
            /**
                * <p>Product code is used to uniquely identify a product in AWS Marketplace. The product
                *             code should be the same as the one used during the publishing of a new product.</p>
                */
            ProductCode: string | undefined;
            /**
                * <p>Timestamp, in UTC, for which the usage is being reported. Your application can meter
                *             usage for up to one hour in the past. Make sure the <code>timestamp</code> value is not
                *             before the start of the software usage.</p>
                */
            Timestamp: Date | undefined;
            /**
                * <p>It will be one of the fcp dimension name provided during the publishing of the
                *             product.</p>
                */
            UsageDimension: string | undefined;
            /**
                * <p>Consumption value for the hour. Defaults to <code>0</code> if not specified.</p>
                */
            UsageQuantity?: number;
            /**
                * <p>Checks whether you have the permissions required for the action, but does not make the
                *             request. If you have the permissions, the request returns <code>DryRunOperation</code>;
                *             otherwise, it returns <code>UnauthorizedException</code>. Defaults to <code>false</code>
                *             if not specified.</p>
                */
            DryRun?: boolean;
            /**
                * <p>The set of <code>UsageAllocations</code> to submit.</p>
                *         <p>The sum of all <code>UsageAllocation</code> quantities must equal the
                *                 <code>UsageQuantity</code> of the <code>MeterUsage</code> request, and each
                *                 <code>UsageAllocation</code> must have a unique set of tags (include no
                *             tags).</p>
                */
            UsageAllocations?: UsageAllocation[];
    }
    export namespace MeterUsageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MeterUsageRequest) => any;
    }
    export interface MeterUsageResult {
            /**
                * <p>Metering record id.</p>
                */
            MeteringRecordId?: string;
    }
    export namespace MeterUsageResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MeterUsageResult) => any;
    }
    /**
        * <p>Public Key version is invalid.</p>
        */
    export class InvalidPublicKeyVersionException extends __BaseException {
            readonly name: "InvalidPublicKeyVersionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPublicKeyVersionException, __BaseException>);
    }
    /**
        * <p>
        *             <code>RegisterUsage</code> must be called in the same AWS Region the ECS task was
        *             launched in. This prevents a container from hardcoding a Region (e.g.
        *             withRegion(“us-east-1”) when calling <code>RegisterUsage</code>.</p>
        */
    export class InvalidRegionException extends __BaseException {
            readonly name: "InvalidRegionException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRegionException, __BaseException>);
    }
    /**
        * <p>AWS Marketplace does not support metering usage from the underlying platform.
        *             Currently, Amazon ECS, Amazon EKS, and AWS Fargate are supported.</p>
        */
    export class PlatformNotSupportedException extends __BaseException {
            readonly name: "PlatformNotSupportedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PlatformNotSupportedException, __BaseException>);
    }
    export interface RegisterUsageRequest {
            /**
                * <p>Product code is used to uniquely identify a product in AWS Marketplace. The product
                *             code should be the same as the one used during the publishing of a new product.</p>
                */
            ProductCode: string | undefined;
            /**
                * <p>Public Key Version provided by AWS Marketplace</p>
                */
            PublicKeyVersion: number | undefined;
            /**
                * <p>(Optional) To scope down the registration to a specific running software instance and
                *             guard against replay attacks.</p>
                */
            Nonce?: string;
    }
    export namespace RegisterUsageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterUsageRequest) => any;
    }
    export interface RegisterUsageResult {
            /**
                * <p>(Optional) Only included when public key version has expired</p>
                */
            PublicKeyRotationTimestamp?: Date;
            /**
                * <p>JWT Token</p>
                */
            Signature?: string;
    }
    export namespace RegisterUsageResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterUsageResult) => any;
    }
    /**
        * <p>The submitted registration token has expired. This can happen if the buyer's browser
        *             takes too long to redirect to your page, the buyer has resubmitted the registration
        *             token, or your application has held on to the registration token for too long. Your SaaS
        *             registration website should redeem this token as soon as it is submitted by the buyer's
        *             browser.</p>
        */
    export class ExpiredTokenException extends __BaseException {
            readonly name: "ExpiredTokenException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ExpiredTokenException, __BaseException>);
    }
    /**
        * <p>Registration token is invalid.</p>
        */
    export class InvalidTokenException extends __BaseException {
            readonly name: "InvalidTokenException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTokenException, __BaseException>);
    }
    /**
        * <p>Contains input to the <code>ResolveCustomer</code> operation.</p>
        */
    export interface ResolveCustomerRequest {
            /**
                * <p>When a buyer visits your website during the registration process, the buyer submits a
                *             registration token through the browser. The registration token is resolved to obtain a
                *                 <code>CustomerIdentifier</code>
                *             along with the
                *                 <code>CustomerAWSAccountId</code>
                *             and
                *                 <code>ProductCode</code>.</p>
                */
            RegistrationToken: string | undefined;
    }
    export namespace ResolveCustomerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResolveCustomerRequest) => any;
    }
    /**
        * <p>The result of the <code>ResolveCustomer</code> operation. Contains the
        *                 <code>CustomerIdentifier</code>
        *
        *             along with the <code>CustomerAWSAccountId</code> and
        *             <code>ProductCode</code>.</p>
        */
    export interface ResolveCustomerResult {
            /**
                * <p>The <code>CustomerIdentifier</code> is used to identify an individual customer in your
                *             application. Calls to <code>BatchMeterUsage</code> require
                *                 <code>CustomerIdentifiers</code> for each <code>UsageRecord</code>.</p>
                */
            CustomerIdentifier?: string;
            /**
                * <p>The product code is returned to confirm that the buyer is registering for your
                *             product. Subsequent <code>BatchMeterUsage</code> calls should be made using this product
                *             code.</p>
                */
            ProductCode?: string;
            /**
                * <p>The <code>CustomerAWSAccountId</code> provides the AWS account ID associated with the
                *                 <code>CustomerIdentifier</code> for the individual customer.</p>
                */
            CustomerAWSAccountId?: string;
    }
    export namespace ResolveCustomerResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResolveCustomerResult) => any;
    }
}

declare module '@aws-sdk/client-marketplace-metering/node_modules/@aws-sdk/client-marketplace-metering/dist-types/models/MarketplaceMeteringServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from MarketplaceMetering service.
        */
    export class MarketplaceMeteringServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

