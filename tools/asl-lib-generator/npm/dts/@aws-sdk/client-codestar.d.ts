// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-codestar' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CodeStarClient } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { AssociateTeamMemberCommandInput, AssociateTeamMemberCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/AssociateTeamMemberCommand";
    import { CreateProjectCommandInput, CreateProjectCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/CreateProjectCommand";
    import { CreateUserProfileCommandInput, CreateUserProfileCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/CreateUserProfileCommand";
    import { DeleteProjectCommandInput, DeleteProjectCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DeleteProjectCommand";
    import { DeleteUserProfileCommandInput, DeleteUserProfileCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DeleteUserProfileCommand";
    import { DescribeProjectCommandInput, DescribeProjectCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DescribeProjectCommand";
    import { DescribeUserProfileCommandInput, DescribeUserProfileCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DescribeUserProfileCommand";
    import { DisassociateTeamMemberCommandInput, DisassociateTeamMemberCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DisassociateTeamMemberCommand";
    import { ListProjectsCommandInput, ListProjectsCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListProjectsCommand";
    import { ListResourcesCommandInput, ListResourcesCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListResourcesCommand";
    import { ListTagsForProjectCommandInput, ListTagsForProjectCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListTagsForProjectCommand";
    import { ListTeamMembersCommandInput, ListTeamMembersCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListTeamMembersCommand";
    import { ListUserProfilesCommandInput, ListUserProfilesCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListUserProfilesCommand";
    import { TagProjectCommandInput, TagProjectCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/TagProjectCommand";
    import { UntagProjectCommandInput, UntagProjectCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/UntagProjectCommand";
    import { UpdateProjectCommandInput, UpdateProjectCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/UpdateProjectCommand";
    import { UpdateTeamMemberCommandInput, UpdateTeamMemberCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/UpdateTeamMemberCommand";
    import { UpdateUserProfileCommandInput, UpdateUserProfileCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/UpdateUserProfileCommand";
    /**
        * <fullname>AWS CodeStar</fullname>
        *          <p>This is the API reference for AWS CodeStar. This reference provides descriptions of the
        *       operations and data types for the AWS CodeStar API along with usage examples.</p>
        *          <p>You can use the AWS CodeStar API to work with:</p>
        *          <p>Projects and their resources, by calling the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>DeleteProject</code>, which deletes a project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DescribeProject</code>, which lists the attributes of a project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListProjects</code>, which lists all projects associated with your AWS
        *           account.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListResources</code>, which lists the resources associated with a
        *           project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListTagsForProject</code>, which lists the tags associated with a
        *           project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>TagProject</code>, which adds tags to a project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UntagProject</code>, which removes tags from a project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UpdateProject</code>, which updates the attributes of a project.</p>
        *             </li>
        *          </ul>
        *          <p>Teams and team members, by calling the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>AssociateTeamMember</code>, which adds an IAM user to the team for a
        *           project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DisassociateTeamMember</code>, which removes an IAM user from the team for a
        *           project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListTeamMembers</code>, which lists all the IAM users in the team for a
        *           project, including their roles and attributes.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UpdateTeamMember</code>, which updates a team member's attributes in a
        *           project.</p>
        *             </li>
        *          </ul>
        *          <p>Users, by calling the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>CreateUserProfile</code>, which creates a user profile that contains data
        *           associated with the user across all projects.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DeleteUserProfile</code>, which deletes all user profile information across
        *           all projects.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DescribeUserProfile</code>, which describes the profile of a user.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListUserProfiles</code>, which lists all user profiles.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UpdateUserProfile</code>, which updates the profile for a user.</p>
        *             </li>
        *          </ul>
        */
    export class CodeStar extends CodeStarClient {
            /**
                * <p>Adds an IAM user to the team for an AWS CodeStar project.</p>
                */
            associateTeamMember(args: AssociateTeamMemberCommandInput, options?: __HttpHandlerOptions): Promise<AssociateTeamMemberCommandOutput>;
            associateTeamMember(args: AssociateTeamMemberCommandInput, cb: (err: any, data?: AssociateTeamMemberCommandOutput) => void): void;
            associateTeamMember(args: AssociateTeamMemberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateTeamMemberCommandOutput) => void): void;
            /**
                * <p>Creates a project, including project resources. This action creates a project based on
                *       a submitted project request. A set of source code files and a toolchain template file
                *       can be included with the project request. If these are not provided, an empty project is created.</p>
                */
            createProject(args: CreateProjectCommandInput, options?: __HttpHandlerOptions): Promise<CreateProjectCommandOutput>;
            createProject(args: CreateProjectCommandInput, cb: (err: any, data?: CreateProjectCommandOutput) => void): void;
            createProject(args: CreateProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateProjectCommandOutput) => void): void;
            /**
                * <p>Creates a profile for a user that includes user preferences, such as the display name
                *       and email address assocciated with the user, in AWS CodeStar. The user profile is not
                *       project-specific. Information in the user profile is displayed wherever the user's information
                *       appears to other users in AWS CodeStar.</p>
                */
            createUserProfile(args: CreateUserProfileCommandInput, options?: __HttpHandlerOptions): Promise<CreateUserProfileCommandOutput>;
            createUserProfile(args: CreateUserProfileCommandInput, cb: (err: any, data?: CreateUserProfileCommandOutput) => void): void;
            createUserProfile(args: CreateUserProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUserProfileCommandOutput) => void): void;
            /**
                * <p>Deletes a project, including project resources. Does not delete users associated with
                *       the project, but does delete the IAM roles that allowed access to the project.</p>
                */
            deleteProject(args: DeleteProjectCommandInput, options?: __HttpHandlerOptions): Promise<DeleteProjectCommandOutput>;
            deleteProject(args: DeleteProjectCommandInput, cb: (err: any, data?: DeleteProjectCommandOutput) => void): void;
            deleteProject(args: DeleteProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteProjectCommandOutput) => void): void;
            /**
                * <p>Deletes a user profile in AWS CodeStar, including all personal preference data associated with
                *       that profile, such as display name and email address. It does not delete the history of that
                *       user, for example the history of commits made by that user.</p>
                */
            deleteUserProfile(args: DeleteUserProfileCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserProfileCommandOutput>;
            deleteUserProfile(args: DeleteUserProfileCommandInput, cb: (err: any, data?: DeleteUserProfileCommandOutput) => void): void;
            deleteUserProfile(args: DeleteUserProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserProfileCommandOutput) => void): void;
            /**
                * <p>Describes a project and its resources.</p>
                */
            describeProject(args: DescribeProjectCommandInput, options?: __HttpHandlerOptions): Promise<DescribeProjectCommandOutput>;
            describeProject(args: DescribeProjectCommandInput, cb: (err: any, data?: DescribeProjectCommandOutput) => void): void;
            describeProject(args: DescribeProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeProjectCommandOutput) => void): void;
            /**
                * <p>Describes a user in AWS CodeStar and the user attributes across all projects.</p>
                */
            describeUserProfile(args: DescribeUserProfileCommandInput, options?: __HttpHandlerOptions): Promise<DescribeUserProfileCommandOutput>;
            describeUserProfile(args: DescribeUserProfileCommandInput, cb: (err: any, data?: DescribeUserProfileCommandOutput) => void): void;
            describeUserProfile(args: DescribeUserProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeUserProfileCommandOutput) => void): void;
            /**
                * <p>Removes a user from a project. Removing a user from a project also removes the IAM
                *       policies from that user that allowed access to the project and its resources. Disassociating a
                *       team member does not remove that user's profile from AWS CodeStar. It does not remove the user from
                *       IAM.</p>
                */
            disassociateTeamMember(args: DisassociateTeamMemberCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateTeamMemberCommandOutput>;
            disassociateTeamMember(args: DisassociateTeamMemberCommandInput, cb: (err: any, data?: DisassociateTeamMemberCommandOutput) => void): void;
            disassociateTeamMember(args: DisassociateTeamMemberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateTeamMemberCommandOutput) => void): void;
            /**
                * <p>Lists all projects in AWS CodeStar associated with your AWS account.</p>
                */
            listProjects(args: ListProjectsCommandInput, options?: __HttpHandlerOptions): Promise<ListProjectsCommandOutput>;
            listProjects(args: ListProjectsCommandInput, cb: (err: any, data?: ListProjectsCommandOutput) => void): void;
            listProjects(args: ListProjectsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListProjectsCommandOutput) => void): void;
            /**
                * <p>Lists resources associated with a project in AWS CodeStar.</p>
                */
            listResources(args: ListResourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListResourcesCommandOutput>;
            listResources(args: ListResourcesCommandInput, cb: (err: any, data?: ListResourcesCommandOutput) => void): void;
            listResources(args: ListResourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListResourcesCommandOutput) => void): void;
            /**
                * <p>Gets the tags for a project.</p>
                */
            listTagsForProject(args: ListTagsForProjectCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForProjectCommandOutput>;
            listTagsForProject(args: ListTagsForProjectCommandInput, cb: (err: any, data?: ListTagsForProjectCommandOutput) => void): void;
            listTagsForProject(args: ListTagsForProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForProjectCommandOutput) => void): void;
            /**
                * <p>Lists all team members associated with a project.</p>
                */
            listTeamMembers(args: ListTeamMembersCommandInput, options?: __HttpHandlerOptions): Promise<ListTeamMembersCommandOutput>;
            listTeamMembers(args: ListTeamMembersCommandInput, cb: (err: any, data?: ListTeamMembersCommandOutput) => void): void;
            listTeamMembers(args: ListTeamMembersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTeamMembersCommandOutput) => void): void;
            /**
                * <p>Lists all the user profiles configured for your AWS account in AWS CodeStar.</p>
                */
            listUserProfiles(args: ListUserProfilesCommandInput, options?: __HttpHandlerOptions): Promise<ListUserProfilesCommandOutput>;
            listUserProfiles(args: ListUserProfilesCommandInput, cb: (err: any, data?: ListUserProfilesCommandOutput) => void): void;
            listUserProfiles(args: ListUserProfilesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUserProfilesCommandOutput) => void): void;
            /**
                * <p>Adds tags to a project.</p>
                */
            tagProject(args: TagProjectCommandInput, options?: __HttpHandlerOptions): Promise<TagProjectCommandOutput>;
            tagProject(args: TagProjectCommandInput, cb: (err: any, data?: TagProjectCommandOutput) => void): void;
            tagProject(args: TagProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagProjectCommandOutput) => void): void;
            /**
                * <p>Removes tags from a project.</p>
                */
            untagProject(args: UntagProjectCommandInput, options?: __HttpHandlerOptions): Promise<UntagProjectCommandOutput>;
            untagProject(args: UntagProjectCommandInput, cb: (err: any, data?: UntagProjectCommandOutput) => void): void;
            untagProject(args: UntagProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagProjectCommandOutput) => void): void;
            /**
                * <p>Updates a project in AWS CodeStar.</p>
                */
            updateProject(args: UpdateProjectCommandInput, options?: __HttpHandlerOptions): Promise<UpdateProjectCommandOutput>;
            updateProject(args: UpdateProjectCommandInput, cb: (err: any, data?: UpdateProjectCommandOutput) => void): void;
            updateProject(args: UpdateProjectCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateProjectCommandOutput) => void): void;
            /**
                * <p>Updates a team member's attributes in an AWS CodeStar project. For example, you can change a
                *       team member's role in the project, or change whether they have remote access to project
                *       resources.</p>
                */
            updateTeamMember(args: UpdateTeamMemberCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTeamMemberCommandOutput>;
            updateTeamMember(args: UpdateTeamMemberCommandInput, cb: (err: any, data?: UpdateTeamMemberCommandOutput) => void): void;
            updateTeamMember(args: UpdateTeamMemberCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTeamMemberCommandOutput) => void): void;
            /**
                * <p>Updates a user's profile in AWS CodeStar. The user profile is not project-specific.
                *       Information in the user profile is displayed wherever the user's information appears to other
                *       users in AWS CodeStar. </p>
                */
            updateUserProfile(args: UpdateUserProfileCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUserProfileCommandOutput>;
            updateUserProfile(args: UpdateUserProfileCommandInput, cb: (err: any, data?: UpdateUserProfileCommandOutput) => void): void;
            updateUserProfile(args: UpdateUserProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUserProfileCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateTeamMemberCommandInput, AssociateTeamMemberCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/AssociateTeamMemberCommand";
    import { CreateProjectCommandInput, CreateProjectCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/CreateProjectCommand";
    import { CreateUserProfileCommandInput, CreateUserProfileCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/CreateUserProfileCommand";
    import { DeleteProjectCommandInput, DeleteProjectCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DeleteProjectCommand";
    import { DeleteUserProfileCommandInput, DeleteUserProfileCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DeleteUserProfileCommand";
    import { DescribeProjectCommandInput, DescribeProjectCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DescribeProjectCommand";
    import { DescribeUserProfileCommandInput, DescribeUserProfileCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DescribeUserProfileCommand";
    import { DisassociateTeamMemberCommandInput, DisassociateTeamMemberCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DisassociateTeamMemberCommand";
    import { ListProjectsCommandInput, ListProjectsCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListProjectsCommand";
    import { ListResourcesCommandInput, ListResourcesCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListResourcesCommand";
    import { ListTagsForProjectCommandInput, ListTagsForProjectCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListTagsForProjectCommand";
    import { ListTeamMembersCommandInput, ListTeamMembersCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListTeamMembersCommand";
    import { ListUserProfilesCommandInput, ListUserProfilesCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListUserProfilesCommand";
    import { TagProjectCommandInput, TagProjectCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/TagProjectCommand";
    import { UntagProjectCommandInput, UntagProjectCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/UntagProjectCommand";
    import { UpdateProjectCommandInput, UpdateProjectCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/UpdateProjectCommand";
    import { UpdateTeamMemberCommandInput, UpdateTeamMemberCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/UpdateTeamMemberCommand";
    import { UpdateUserProfileCommandInput, UpdateUserProfileCommandOutput } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/UpdateUserProfileCommand";
    export type ServiceInputTypes = AssociateTeamMemberCommandInput | CreateProjectCommandInput | CreateUserProfileCommandInput | DeleteProjectCommandInput | DeleteUserProfileCommandInput | DescribeProjectCommandInput | DescribeUserProfileCommandInput | DisassociateTeamMemberCommandInput | ListProjectsCommandInput | ListResourcesCommandInput | ListTagsForProjectCommandInput | ListTeamMembersCommandInput | ListUserProfilesCommandInput | TagProjectCommandInput | UntagProjectCommandInput | UpdateProjectCommandInput | UpdateTeamMemberCommandInput | UpdateUserProfileCommandInput;
    export type ServiceOutputTypes = AssociateTeamMemberCommandOutput | CreateProjectCommandOutput | CreateUserProfileCommandOutput | DeleteProjectCommandOutput | DeleteUserProfileCommandOutput | DescribeProjectCommandOutput | DescribeUserProfileCommandOutput | DisassociateTeamMemberCommandOutput | ListProjectsCommandOutput | ListResourcesCommandOutput | ListTagsForProjectCommandOutput | ListTeamMembersCommandOutput | ListUserProfilesCommandOutput | TagProjectCommandOutput | UntagProjectCommandOutput | UpdateProjectCommandOutput | UpdateTeamMemberCommandOutput | UpdateUserProfileCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type CodeStarClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of CodeStarClient class constructor that set the region, credentials and other options.
        */
    export interface CodeStarClientConfig extends CodeStarClientConfigType {
    }
    type CodeStarClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of CodeStarClient class. This is resolved and normalized from the {@link CodeStarClientConfig | constructor configuration interface}.
        */
    export interface CodeStarClientResolvedConfig extends CodeStarClientResolvedConfigType {
    }
    /**
        * <fullname>AWS CodeStar</fullname>
        *          <p>This is the API reference for AWS CodeStar. This reference provides descriptions of the
        *       operations and data types for the AWS CodeStar API along with usage examples.</p>
        *          <p>You can use the AWS CodeStar API to work with:</p>
        *          <p>Projects and their resources, by calling the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>DeleteProject</code>, which deletes a project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DescribeProject</code>, which lists the attributes of a project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListProjects</code>, which lists all projects associated with your AWS
        *           account.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListResources</code>, which lists the resources associated with a
        *           project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListTagsForProject</code>, which lists the tags associated with a
        *           project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>TagProject</code>, which adds tags to a project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UntagProject</code>, which removes tags from a project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UpdateProject</code>, which updates the attributes of a project.</p>
        *             </li>
        *          </ul>
        *          <p>Teams and team members, by calling the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>AssociateTeamMember</code>, which adds an IAM user to the team for a
        *           project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DisassociateTeamMember</code>, which removes an IAM user from the team for a
        *           project.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListTeamMembers</code>, which lists all the IAM users in the team for a
        *           project, including their roles and attributes.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UpdateTeamMember</code>, which updates a team member's attributes in a
        *           project.</p>
        *             </li>
        *          </ul>
        *          <p>Users, by calling the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>CreateUserProfile</code>, which creates a user profile that contains data
        *           associated with the user across all projects.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DeleteUserProfile</code>, which deletes all user profile information across
        *           all projects.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DescribeUserProfile</code>, which describes the profile of a user.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>ListUserProfiles</code>, which lists all user profiles.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UpdateUserProfile</code>, which updates the profile for a user.</p>
        *             </li>
        *          </ul>
        */
    export class CodeStarClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, CodeStarClientResolvedConfig> {
            /**
                * The resolved configuration of CodeStarClient class. This is resolved and normalized from the {@link CodeStarClientConfig | constructor configuration interface}.
                */
            readonly config: CodeStarClientResolvedConfig;
            constructor(configuration: CodeStarClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/AssociateTeamMemberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { AssociateTeamMemberRequest, AssociateTeamMemberResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface AssociateTeamMemberCommandInput extends AssociateTeamMemberRequest {
    }
    export interface AssociateTeamMemberCommandOutput extends AssociateTeamMemberResult, __MetadataBearer {
    }
    /**
        * <p>Adds an IAM user to the team for an AWS CodeStar project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, AssociateTeamMemberCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, AssociateTeamMemberCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new AssociateTeamMemberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateTeamMemberCommandInput} for command's `input` shape.
        * @see {@link AssociateTeamMemberCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class AssociateTeamMemberCommand extends $Command<AssociateTeamMemberCommandInput, AssociateTeamMemberCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: AssociateTeamMemberCommandInput;
            constructor(input: AssociateTeamMemberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateTeamMemberCommandInput, AssociateTeamMemberCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/CreateProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { CreateProjectRequest, CreateProjectResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface CreateProjectCommandInput extends CreateProjectRequest {
    }
    export interface CreateProjectCommandOutput extends CreateProjectResult, __MetadataBearer {
    }
    /**
        * <p>Creates a project, including project resources. This action creates a project based on
        *       a submitted project request. A set of source code files and a toolchain template file
        *       can be included with the project request. If these are not provided, an empty project is created.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, CreateProjectCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, CreateProjectCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new CreateProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateProjectCommandInput} for command's `input` shape.
        * @see {@link CreateProjectCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class CreateProjectCommand extends $Command<CreateProjectCommandInput, CreateProjectCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: CreateProjectCommandInput;
            constructor(input: CreateProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateProjectCommandInput, CreateProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/CreateUserProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { CreateUserProfileRequest, CreateUserProfileResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface CreateUserProfileCommandInput extends CreateUserProfileRequest {
    }
    export interface CreateUserProfileCommandOutput extends CreateUserProfileResult, __MetadataBearer {
    }
    /**
        * <p>Creates a profile for a user that includes user preferences, such as the display name
        *       and email address assocciated with the user, in AWS CodeStar. The user profile is not
        *       project-specific. Information in the user profile is displayed wherever the user's information
        *       appears to other users in AWS CodeStar.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, CreateUserProfileCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, CreateUserProfileCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new CreateUserProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUserProfileCommandInput} for command's `input` shape.
        * @see {@link CreateUserProfileCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class CreateUserProfileCommand extends $Command<CreateUserProfileCommandInput, CreateUserProfileCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: CreateUserProfileCommandInput;
            constructor(input: CreateUserProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUserProfileCommandInput, CreateUserProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DeleteProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { DeleteProjectRequest, DeleteProjectResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface DeleteProjectCommandInput extends DeleteProjectRequest {
    }
    export interface DeleteProjectCommandOutput extends DeleteProjectResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a project, including project resources. Does not delete users associated with
        *       the project, but does delete the IAM roles that allowed access to the project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, DeleteProjectCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, DeleteProjectCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new DeleteProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteProjectCommandInput} for command's `input` shape.
        * @see {@link DeleteProjectCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class DeleteProjectCommand extends $Command<DeleteProjectCommandInput, DeleteProjectCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: DeleteProjectCommandInput;
            constructor(input: DeleteProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteProjectCommandInput, DeleteProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DeleteUserProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { DeleteUserProfileRequest, DeleteUserProfileResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface DeleteUserProfileCommandInput extends DeleteUserProfileRequest {
    }
    export interface DeleteUserProfileCommandOutput extends DeleteUserProfileResult, __MetadataBearer {
    }
    /**
        * <p>Deletes a user profile in AWS CodeStar, including all personal preference data associated with
        *       that profile, such as display name and email address. It does not delete the history of that
        *       user, for example the history of commits made by that user.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, DeleteUserProfileCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, DeleteUserProfileCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new DeleteUserProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserProfileCommandInput} for command's `input` shape.
        * @see {@link DeleteUserProfileCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class DeleteUserProfileCommand extends $Command<DeleteUserProfileCommandInput, DeleteUserProfileCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: DeleteUserProfileCommandInput;
            constructor(input: DeleteUserProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserProfileCommandInput, DeleteUserProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DescribeProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { DescribeProjectRequest, DescribeProjectResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface DescribeProjectCommandInput extends DescribeProjectRequest {
    }
    export interface DescribeProjectCommandOutput extends DescribeProjectResult, __MetadataBearer {
    }
    /**
        * <p>Describes a project and its resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, DescribeProjectCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, DescribeProjectCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new DescribeProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeProjectCommandInput} for command's `input` shape.
        * @see {@link DescribeProjectCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class DescribeProjectCommand extends $Command<DescribeProjectCommandInput, DescribeProjectCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: DescribeProjectCommandInput;
            constructor(input: DescribeProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeProjectCommandInput, DescribeProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DescribeUserProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { DescribeUserProfileRequest, DescribeUserProfileResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface DescribeUserProfileCommandInput extends DescribeUserProfileRequest {
    }
    export interface DescribeUserProfileCommandOutput extends DescribeUserProfileResult, __MetadataBearer {
    }
    /**
        * <p>Describes a user in AWS CodeStar and the user attributes across all projects.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, DescribeUserProfileCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, DescribeUserProfileCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new DescribeUserProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeUserProfileCommandInput} for command's `input` shape.
        * @see {@link DescribeUserProfileCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class DescribeUserProfileCommand extends $Command<DescribeUserProfileCommandInput, DescribeUserProfileCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: DescribeUserProfileCommandInput;
            constructor(input: DescribeUserProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeUserProfileCommandInput, DescribeUserProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/DisassociateTeamMemberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { DisassociateTeamMemberRequest, DisassociateTeamMemberResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface DisassociateTeamMemberCommandInput extends DisassociateTeamMemberRequest {
    }
    export interface DisassociateTeamMemberCommandOutput extends DisassociateTeamMemberResult, __MetadataBearer {
    }
    /**
        * <p>Removes a user from a project. Removing a user from a project also removes the IAM
        *       policies from that user that allowed access to the project and its resources. Disassociating a
        *       team member does not remove that user's profile from AWS CodeStar. It does not remove the user from
        *       IAM.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, DisassociateTeamMemberCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, DisassociateTeamMemberCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new DisassociateTeamMemberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateTeamMemberCommandInput} for command's `input` shape.
        * @see {@link DisassociateTeamMemberCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class DisassociateTeamMemberCommand extends $Command<DisassociateTeamMemberCommandInput, DisassociateTeamMemberCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: DisassociateTeamMemberCommandInput;
            constructor(input: DisassociateTeamMemberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateTeamMemberCommandInput, DisassociateTeamMemberCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListProjectsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { ListProjectsRequest, ListProjectsResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface ListProjectsCommandInput extends ListProjectsRequest {
    }
    export interface ListProjectsCommandOutput extends ListProjectsResult, __MetadataBearer {
    }
    /**
        * <p>Lists all projects in AWS CodeStar associated with your AWS account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, ListProjectsCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, ListProjectsCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new ListProjectsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListProjectsCommandInput} for command's `input` shape.
        * @see {@link ListProjectsCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class ListProjectsCommand extends $Command<ListProjectsCommandInput, ListProjectsCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: ListProjectsCommandInput;
            constructor(input: ListProjectsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListProjectsCommandInput, ListProjectsCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListResourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { ListResourcesRequest, ListResourcesResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface ListResourcesCommandInput extends ListResourcesRequest {
    }
    export interface ListResourcesCommandOutput extends ListResourcesResult, __MetadataBearer {
    }
    /**
        * <p>Lists resources associated with a project in AWS CodeStar.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, ListResourcesCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, ListResourcesCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new ListResourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListResourcesCommandInput} for command's `input` shape.
        * @see {@link ListResourcesCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class ListResourcesCommand extends $Command<ListResourcesCommandInput, ListResourcesCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: ListResourcesCommandInput;
            constructor(input: ListResourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListResourcesCommandInput, ListResourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListTagsForProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { ListTagsForProjectRequest, ListTagsForProjectResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface ListTagsForProjectCommandInput extends ListTagsForProjectRequest {
    }
    export interface ListTagsForProjectCommandOutput extends ListTagsForProjectResult, __MetadataBearer {
    }
    /**
        * <p>Gets the tags for a project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, ListTagsForProjectCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, ListTagsForProjectCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new ListTagsForProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForProjectCommandInput} for command's `input` shape.
        * @see {@link ListTagsForProjectCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class ListTagsForProjectCommand extends $Command<ListTagsForProjectCommandInput, ListTagsForProjectCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: ListTagsForProjectCommandInput;
            constructor(input: ListTagsForProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForProjectCommandInput, ListTagsForProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListTeamMembersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { ListTeamMembersRequest, ListTeamMembersResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface ListTeamMembersCommandInput extends ListTeamMembersRequest {
    }
    export interface ListTeamMembersCommandOutput extends ListTeamMembersResult, __MetadataBearer {
    }
    /**
        * <p>Lists all team members associated with a project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, ListTeamMembersCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, ListTeamMembersCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new ListTeamMembersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTeamMembersCommandInput} for command's `input` shape.
        * @see {@link ListTeamMembersCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class ListTeamMembersCommand extends $Command<ListTeamMembersCommandInput, ListTeamMembersCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: ListTeamMembersCommandInput;
            constructor(input: ListTeamMembersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTeamMembersCommandInput, ListTeamMembersCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/ListUserProfilesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { ListUserProfilesRequest, ListUserProfilesResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface ListUserProfilesCommandInput extends ListUserProfilesRequest {
    }
    export interface ListUserProfilesCommandOutput extends ListUserProfilesResult, __MetadataBearer {
    }
    /**
        * <p>Lists all the user profiles configured for your AWS account in AWS CodeStar.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, ListUserProfilesCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, ListUserProfilesCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new ListUserProfilesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUserProfilesCommandInput} for command's `input` shape.
        * @see {@link ListUserProfilesCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class ListUserProfilesCommand extends $Command<ListUserProfilesCommandInput, ListUserProfilesCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: ListUserProfilesCommandInput;
            constructor(input: ListUserProfilesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUserProfilesCommandInput, ListUserProfilesCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/TagProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { TagProjectRequest, TagProjectResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface TagProjectCommandInput extends TagProjectRequest {
    }
    export interface TagProjectCommandOutput extends TagProjectResult, __MetadataBearer {
    }
    /**
        * <p>Adds tags to a project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, TagProjectCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, TagProjectCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new TagProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagProjectCommandInput} for command's `input` shape.
        * @see {@link TagProjectCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class TagProjectCommand extends $Command<TagProjectCommandInput, TagProjectCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: TagProjectCommandInput;
            constructor(input: TagProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagProjectCommandInput, TagProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/UntagProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { UntagProjectRequest, UntagProjectResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface UntagProjectCommandInput extends UntagProjectRequest {
    }
    export interface UntagProjectCommandOutput extends UntagProjectResult, __MetadataBearer {
    }
    /**
        * <p>Removes tags from a project.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, UntagProjectCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, UntagProjectCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new UntagProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagProjectCommandInput} for command's `input` shape.
        * @see {@link UntagProjectCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class UntagProjectCommand extends $Command<UntagProjectCommandInput, UntagProjectCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: UntagProjectCommandInput;
            constructor(input: UntagProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagProjectCommandInput, UntagProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/UpdateProjectCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { UpdateProjectRequest, UpdateProjectResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface UpdateProjectCommandInput extends UpdateProjectRequest {
    }
    export interface UpdateProjectCommandOutput extends UpdateProjectResult, __MetadataBearer {
    }
    /**
        * <p>Updates a project in AWS CodeStar.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, UpdateProjectCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, UpdateProjectCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new UpdateProjectCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateProjectCommandInput} for command's `input` shape.
        * @see {@link UpdateProjectCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class UpdateProjectCommand extends $Command<UpdateProjectCommandInput, UpdateProjectCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: UpdateProjectCommandInput;
            constructor(input: UpdateProjectCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateProjectCommandInput, UpdateProjectCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/UpdateTeamMemberCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { UpdateTeamMemberRequest, UpdateTeamMemberResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface UpdateTeamMemberCommandInput extends UpdateTeamMemberRequest {
    }
    export interface UpdateTeamMemberCommandOutput extends UpdateTeamMemberResult, __MetadataBearer {
    }
    /**
        * <p>Updates a team member's attributes in an AWS CodeStar project. For example, you can change a
        *       team member's role in the project, or change whether they have remote access to project
        *       resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, UpdateTeamMemberCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, UpdateTeamMemberCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new UpdateTeamMemberCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTeamMemberCommandInput} for command's `input` shape.
        * @see {@link UpdateTeamMemberCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class UpdateTeamMemberCommand extends $Command<UpdateTeamMemberCommandInput, UpdateTeamMemberCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: UpdateTeamMemberCommandInput;
            constructor(input: UpdateTeamMemberCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTeamMemberCommandInput, UpdateTeamMemberCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/commands/UpdateUserProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CodeStarClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/CodeStarClient";
    import { UpdateUserProfileRequest, UpdateUserProfileResult } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0";
    export interface UpdateUserProfileCommandInput extends UpdateUserProfileRequest {
    }
    export interface UpdateUserProfileCommandOutput extends UpdateUserProfileResult, __MetadataBearer {
    }
    /**
        * <p>Updates a user's profile in AWS CodeStar. The user profile is not project-specific.
        *       Information in the user profile is displayed wherever the user's information appears to other
        *       users in AWS CodeStar. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { CodeStarClient, UpdateUserProfileCommand } from "@aws-sdk/client-codestar"; // ES Modules import
        * // const { CodeStarClient, UpdateUserProfileCommand } = require("@aws-sdk/client-codestar"); // CommonJS import
        * const client = new CodeStarClient(config);
        * const command = new UpdateUserProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateUserProfileCommandInput} for command's `input` shape.
        * @see {@link UpdateUserProfileCommandOutput} for command's `response` shape.
        * @see {@link CodeStarClientResolvedConfig | config} for CodeStarClient's `config` shape.
        *
        */
    export class UpdateUserProfileCommand extends $Command<UpdateUserProfileCommandInput, UpdateUserProfileCommandOutput, CodeStarClientResolvedConfig> {
            readonly input: UpdateUserProfileCommandInput;
            constructor(input: UpdateUserProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: CodeStarClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateUserProfileCommandInput, UpdateUserProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { CodeStarServiceException as __BaseException } from "@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/CodeStarServiceException";
    export interface AssociateTeamMemberRequest {
            /**
                * <p>The ID of the project to which you will add the IAM user.</p>
                */
            projectId: string | undefined;
            /**
                * <p>A user- or system-generated token that identifies the entity that requested the team
                *       member association to the project. This token can be used to repeat the request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the IAM user you want to add to the AWS CodeStar
                *       project.</p>
                */
            userArn: string | undefined;
            /**
                * <p>The AWS CodeStar project role that will apply to this user. This role determines what actions
                *       a user can take in an AWS CodeStar project.</p>
                */
            projectRole: string | undefined;
            /**
                * <p>Whether the team member is allowed to use an SSH public/private key pair to remotely
                *       access project resources, for example Amazon EC2 instances.</p>
                */
            remoteAccessAllowed?: boolean;
    }
    export namespace AssociateTeamMemberRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateTeamMemberRequest) => any;
    }
    export interface AssociateTeamMemberResult {
            /**
                * <p>The user- or system-generated token from the initial request that can be used to repeat
                *       the request.</p>
                */
            clientRequestToken?: string;
    }
    export namespace AssociateTeamMemberResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateTeamMemberResult) => any;
    }
    /**
        * <p>Another modification is being made. That modification must complete before you can make
        *       your change.</p>
        */
    export class ConcurrentModificationException extends __BaseException {
            readonly name: "ConcurrentModificationException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
    }
    /**
        * <p>The service role is not valid.</p>
        */
    export class InvalidServiceRoleException extends __BaseException {
            readonly name: "InvalidServiceRoleException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidServiceRoleException, __BaseException>);
    }
    /**
        * <p>A resource limit has been exceeded.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>Project configuration information is required but not specified.</p>
        */
    export class ProjectConfigurationException extends __BaseException {
            readonly name: "ProjectConfigurationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ProjectConfigurationException, __BaseException>);
    }
    /**
        * <p>The specified AWS CodeStar project was not found.</p>
        */
    export class ProjectNotFoundException extends __BaseException {
            readonly name: "ProjectNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ProjectNotFoundException, __BaseException>);
    }
    /**
        * <p>The team member is already associated with a role in this project.</p>
        */
    export class TeamMemberAlreadyAssociatedException extends __BaseException {
            readonly name: "TeamMemberAlreadyAssociatedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TeamMemberAlreadyAssociatedException, __BaseException>);
    }
    /**
        * <p>The specified input is either not valid, or it could not be validated.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    /**
        * <p>Information about the AWS CodeCommit repository to be created in AWS CodeStar. This is where the source code files provided
        *       with the project request will be uploaded after project creation.</p>
        */
    export interface CodeCommitCodeDestination {
            /**
                * <p>The name of the AWS CodeCommit repository to be created in AWS CodeStar.</p>
                */
            name: string | undefined;
    }
    export namespace CodeCommitCodeDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CodeCommitCodeDestination) => any;
    }
    /**
        * <p>Information about the GitHub repository to be created in AWS CodeStar. This is where the source code files provided with the
        *       project request will be uploaded after project creation.</p>
        */
    export interface GitHubCodeDestination {
            /**
                * <p>Name of the GitHub repository to be created in AWS CodeStar.</p>
                */
            name: string | undefined;
            /**
                * <p>Description for the GitHub repository to be created in AWS CodeStar. This description displays in
                *       GitHub after the repository is created.</p>
                */
            description?: string;
            /**
                * <p>The type of GitHub repository to be created in AWS CodeStar. Valid values are User or Organization.</p>
                */
            type: string | undefined;
            /**
                * <p>The GitHub username for the owner of the GitHub repository to be created in AWS CodeStar. If this repository should
                *       be owned by a GitHub organization, provide its name.</p>
                */
            owner: string | undefined;
            /**
                * <p>Whether the GitHub repository is to be a private repository.</p>
                */
            privateRepository: boolean | undefined;
            /**
                * <p>Whether to enable issues for the GitHub repository.</p>
                */
            issuesEnabled: boolean | undefined;
            /**
                * <p>The GitHub user's personal access token for the GitHub repository.</p>
                */
            token: string | undefined;
    }
    export namespace GitHubCodeDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GitHubCodeDestination) => any;
    }
    /**
        * <p>The repository to be created in AWS CodeStar. Valid values are AWS CodeCommit or GitHub. After AWS CodeStar provisions the new repository, the
        *       source code files provided with the project request are placed in the repository.</p>
        */
    export interface CodeDestination {
            /**
                * <p>Information about the AWS CodeCommit repository to be created in AWS CodeStar. This is where the source code files provided
                *       with the project request will be uploaded after project creation.</p>
                */
            codeCommit?: CodeCommitCodeDestination;
            /**
                * <p>Information about the GitHub repository to be created in AWS CodeStar. This is where the source code files provided with the
                *       project request will be uploaded after project creation.</p>
                */
            gitHub?: GitHubCodeDestination;
    }
    export namespace CodeDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CodeDestination) => any;
    }
    /**
        * <p>The Amazon S3 location where the source code files provided with the project
        *       request are stored.</p>
        */
    export interface S3Location {
            /**
                * <p>The Amazon S3 bucket name where the source code files provided with the project
                *       request are stored.</p>
                */
            bucketName?: string;
            /**
                * <p>The Amazon S3 object key where the source code files provided with the project
                *       request are stored.</p>
                */
            bucketKey?: string;
    }
    export namespace S3Location {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3Location) => any;
    }
    /**
        * <p>The location where the source code files provided with the project request are
        *       stored. AWS CodeStar retrieves the files during project creation.</p>
        */
    export interface CodeSource {
            /**
                * <p>Information about the Amazon S3 location where the source code files provided with the
                *       project request are stored. </p>
                */
            s3: S3Location | undefined;
    }
    export namespace CodeSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CodeSource) => any;
    }
    /**
        * <p>Location and destination information about the source code files provided with the
        *       project request. The source code is uploaded to the new project source repository after
        *       project creation.</p>
        */
    export interface Code {
            /**
                * <p>The location where the source code files provided with the project request are
                *       stored. AWS CodeStar retrieves the files during project creation.</p>
                */
            source: CodeSource | undefined;
            /**
                * <p>The repository to be created in AWS CodeStar. Valid values are AWS CodeCommit or GitHub. After AWS CodeStar provisions the new repository, the
                *       source code files provided with the project request are placed in the repository.</p>
                */
            destination: CodeDestination | undefined;
    }
    export namespace Code {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Code) => any;
    }
    /**
        * <p>The Amazon S3 location where the toolchain template file provided with the
        *       project request is stored. AWS CodeStar retrieves the file during project creation.</p>
        */
    export interface ToolchainSource {
            /**
                * <p>The Amazon S3 bucket where the toolchain template file provided with the project
                *       request is stored.</p>
                */
            s3: S3Location | undefined;
    }
    export namespace ToolchainSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ToolchainSource) => any;
    }
    /**
        * <p>The toolchain template file provided with the project request. AWS CodeStar uses
        *       the template to provision the toolchain stack in AWS CloudFormation.</p>
        */
    export interface Toolchain {
            /**
                * <p>The Amazon S3 location where the toolchain template file provided with the
                *       project request is stored. AWS CodeStar retrieves the file during project creation.</p>
                */
            source: ToolchainSource | undefined;
            /**
                * <p>The service role ARN for AWS CodeStar to use for the toolchain template during stack
                *       provisioning.</p>
                */
            roleArn?: string;
            /**
                * <p>The list of parameter overrides to be passed into the toolchain template during stack
                *       provisioning, if any.</p>
                */
            stackParameters?: Record<string, string>;
    }
    export namespace Toolchain {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Toolchain) => any;
    }
    export interface CreateProjectRequest {
            /**
                * <p>The display name for the project to be created in AWS CodeStar.</p>
                */
            name: string | undefined;
            /**
                * <p>The ID of the project to be created in AWS CodeStar.</p>
                */
            id: string | undefined;
            /**
                * <p>The description of the project, if any.</p>
                */
            description?: string;
            /**
                * <p>A user- or system-generated token that identifies the entity that requested project
                *       creation. This token can be used to repeat the request.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>A list of the Code objects submitted with the project request. If this
                *       parameter is specified, the request must also include the toolchain parameter.</p>
                */
            sourceCode?: Code[];
            /**
                * <p>The name of the toolchain template file submitted with the project request. If
                *       this parameter is specified, the request must also include the sourceCode parameter.</p>
                */
            toolchain?: Toolchain;
            /**
                * <p>The tags created for the project.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProjectRequest) => any;
    }
    export interface CreateProjectResult {
            /**
                * <p>The ID of the project.</p>
                */
            id: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the created project.</p>
                */
            arn: string | undefined;
            /**
                * <p>A user- or system-generated token that identifies the entity that requested project
                *       creation.</p>
                */
            clientRequestToken?: string;
            /**
                * <p>Reserved for future use.</p>
                */
            projectTemplateId?: string;
    }
    export namespace CreateProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateProjectResult) => any;
    }
    /**
        * <p>An AWS CodeStar project with the same ID already exists in this region for the AWS account.
        *       AWS CodeStar project IDs must be unique within a region for the AWS account.</p>
        */
    export class ProjectAlreadyExistsException extends __BaseException {
            readonly name: "ProjectAlreadyExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ProjectAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>The project creation request was valid, but a nonspecific exception or error occurred
        *       during project creation. The project could not be created in AWS CodeStar.</p>
        */
    export class ProjectCreationFailedException extends __BaseException {
            readonly name: "ProjectCreationFailedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ProjectCreationFailedException, __BaseException>);
    }
    export interface CreateUserProfileRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the user in IAM.</p>
                */
            userArn: string | undefined;
            /**
                * <p>The name that will be displayed as the friendly name for the user in AWS CodeStar. </p>
                */
            displayName: string | undefined;
            /**
                * <p>The email address that will be displayed as part of the user's profile in
                *       AWS CodeStar.</p>
                */
            emailAddress: string | undefined;
            /**
                * <p>The SSH public key associated with the user in AWS CodeStar. If a project owner allows the
                *       user remote access to project resources, this public key will be used along with the user's
                *       private key for SSH access.</p>
                */
            sshPublicKey?: string;
    }
    export namespace CreateUserProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserProfileRequest) => any;
    }
    export interface CreateUserProfileResult {
            /**
                * <p>The Amazon Resource Name (ARN) of the user in IAM.</p>
                */
            userArn: string | undefined;
            /**
                * <p>The name that is displayed as the friendly name for the user in AWS CodeStar.</p>
                */
            displayName?: string;
            /**
                * <p>The email address that is displayed as part of the user's profile in AWS CodeStar.</p>
                */
            emailAddress?: string;
            /**
                * <p>The SSH public key associated with the user in AWS CodeStar. This is the public portion of the
                *       public/private keypair the user can use to access project resources if a project owner allows
                *       the user remote access to those resources.</p>
                */
            sshPublicKey?: string;
            /**
                * <p>The date the user profile was created, in timestamp format.</p>
                */
            createdTimestamp?: Date;
            /**
                * <p>The date the user profile was last modified, in timestamp format.</p>
                */
            lastModifiedTimestamp?: Date;
    }
    export namespace CreateUserProfileResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserProfileResult) => any;
    }
    /**
        * <p>A user profile with that name already exists in this region for the AWS account. AWS
        *       CodeStar user profile names must be unique within a region for the AWS account. </p>
        */
    export class UserProfileAlreadyExistsException extends __BaseException {
            readonly name: "UserProfileAlreadyExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UserProfileAlreadyExistsException, __BaseException>);
    }
    export interface DeleteProjectRequest {
            /**
                * <p>The ID of the project to be deleted in AWS CodeStar.</p>
                */
            id: string | undefined;
            /**
                * <p>A user- or system-generated token that identifies the entity that requested project
                *       deletion. This token can be used to repeat the request. </p>
                */
            clientRequestToken?: string;
            /**
                * <p>Whether to send a delete request for the primary stack in AWS CloudFormation originally
                *       used to generate the project and its resources. This option will delete all AWS resources for
                *       the project (except for any buckets in Amazon S3) as well as deleting the project itself.
                *       Recommended for most use cases.</p>
                */
            deleteStack?: boolean;
    }
    export namespace DeleteProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProjectRequest) => any;
    }
    export interface DeleteProjectResult {
            /**
                * <p>The ID of the primary stack in AWS CloudFormation that will be deleted as part of
                *       deleting the project and its resources.</p>
                */
            stackId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the deleted project.</p>
                */
            projectArn?: string;
    }
    export namespace DeleteProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteProjectResult) => any;
    }
    export interface DeleteUserProfileRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the user to delete from AWS CodeStar.</p>
                */
            userArn: string | undefined;
    }
    export namespace DeleteUserProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserProfileRequest) => any;
    }
    export interface DeleteUserProfileResult {
            /**
                * <p>The Amazon Resource Name (ARN) of the user deleted from AWS CodeStar.</p>
                */
            userArn: string | undefined;
    }
    export namespace DeleteUserProfileResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserProfileResult) => any;
    }
    export interface DescribeProjectRequest {
            /**
                * <p>The ID of the project.</p>
                */
            id: string | undefined;
    }
    export namespace DescribeProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProjectRequest) => any;
    }
    /**
        * <p>An indication of whether a project creation or deletion is failed or
        *       successful.</p>
        */
    export interface ProjectStatus {
            /**
                * <p>The phase of completion for a project creation or deletion.</p>
                */
            state: string | undefined;
            /**
                * <p>In the case of a project creation or deletion failure, a reason for the
                *       failure.</p>
                */
            reason?: string;
    }
    export namespace ProjectStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProjectStatus) => any;
    }
    export interface DescribeProjectResult {
            /**
                * <p>The display name for the project.</p>
                */
            name?: string;
            /**
                * <p>The ID of the project.</p>
                */
            id?: string;
            /**
                * <p>The Amazon Resource Name (ARN) for the project.</p>
                */
            arn?: string;
            /**
                * <p>The description of the project, if any.</p>
                */
            description?: string;
            /**
                * <p>A user- or system-generated token that identifies the entity that requested project
                *       creation. </p>
                */
            clientRequestToken?: string;
            /**
                * <p>The date and time the project was created, in timestamp format.</p>
                */
            createdTimeStamp?: Date;
            /**
                * <p>The ID of the primary stack in AWS CloudFormation used to generate resources for the
                *       project.</p>
                */
            stackId?: string;
            /**
                * <p>The ID for the AWS CodeStar project template used to create the project.</p>
                */
            projectTemplateId?: string;
            /**
                * <p>The project creation or deletion status.</p>
                */
            status?: ProjectStatus;
    }
    export namespace DescribeProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeProjectResult) => any;
    }
    export interface DescribeUserProfileRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the user.</p>
                */
            userArn: string | undefined;
    }
    export namespace DescribeUserProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserProfileRequest) => any;
    }
    export interface DescribeUserProfileResult {
            /**
                * <p>The Amazon Resource Name (ARN) of the user.</p>
                */
            userArn: string | undefined;
            /**
                * <p>The display name shown for the user in AWS CodeStar projects. For example, this could be set
                *       to both first and last name ("Mary Major") or a single name ("Mary"). The display name is also
                *       used to generate the initial icon associated with the user in AWS CodeStar projects. If spaces are
                *       included in the display name, the first character that appears after the space will be used as
                *       the second character in the user initial icon. The initial icon displays a maximum of two
                *       characters, so a display name with more than one space (for example "Mary Jane Major") would
                *       generate an initial icon using the first character and the first character after the space
                *       ("MJ", not "MM").</p>
                */
            displayName?: string;
            /**
                * <p>The email address for the user. Optional.</p>
                */
            emailAddress?: string;
            /**
                * <p>The SSH public key associated with the user. This SSH public key is associated with the
                *       user profile, and can be used in conjunction with the associated private key for access to
                *       project resources, such as Amazon EC2 instances, if a project owner grants remote access to
                *       those resources.</p>
                */
            sshPublicKey?: string;
            /**
                * <p>The date and time when the user profile was created in AWS CodeStar, in timestamp
                *       format.</p>
                */
            createdTimestamp: Date | undefined;
            /**
                * <p>The date and time when the user profile was last modified, in timestamp
                *       format.</p>
                */
            lastModifiedTimestamp: Date | undefined;
    }
    export namespace DescribeUserProfileResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeUserProfileResult) => any;
    }
    /**
        * <p>The user profile was not found.</p>
        */
    export class UserProfileNotFoundException extends __BaseException {
            readonly name: "UserProfileNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UserProfileNotFoundException, __BaseException>);
    }
    export interface DisassociateTeamMemberRequest {
            /**
                * <p>The ID of the AWS CodeStar project from which you want to remove a team member.</p>
                */
            projectId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM user or group whom you want to remove from
                *       the project.</p>
                */
            userArn: string | undefined;
    }
    export namespace DisassociateTeamMemberRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateTeamMemberRequest) => any;
    }
    export interface DisassociateTeamMemberResult {
    }
    export namespace DisassociateTeamMemberResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateTeamMemberResult) => any;
    }
    /**
        * <p>The next token is not valid.</p>
        */
    export class InvalidNextTokenException extends __BaseException {
            readonly name: "InvalidNextTokenException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>);
    }
    export interface ListProjectsRequest {
            /**
                * <p>The continuation token to be used to return the next set of results, if the results
                *       cannot be returned in one response.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum amount of data that can be contained in a single set of results.</p>
                */
            maxResults?: number;
    }
    export namespace ListProjectsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProjectsRequest) => any;
    }
    /**
        * <p>Information about the metadata for a project.</p>
        */
    export interface ProjectSummary {
            /**
                * <p>The ID of the project.</p>
                */
            projectId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the project.</p>
                */
            projectArn?: string;
    }
    export namespace ProjectSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProjectSummary) => any;
    }
    export interface ListProjectsResult {
            /**
                * <p>A list of projects.</p>
                */
            projects: ProjectSummary[] | undefined;
            /**
                * <p>The continuation token to use when requesting the next set of results, if there are
                *       more results to be returned.</p>
                */
            nextToken?: string;
    }
    export namespace ListProjectsResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListProjectsResult) => any;
    }
    export interface ListResourcesRequest {
            /**
                * <p>The ID of the project.</p>
                */
            projectId: string | undefined;
            /**
                * <p>The continuation token for the next set of results, if the results cannot be returned
                *       in one response.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum amount of data that can be contained in a single set of results.</p>
                */
            maxResults?: number;
    }
    export namespace ListResourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourcesRequest) => any;
    }
    /**
        * <p>Information about a resource for a project.</p>
        */
    export interface Resource {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            id: string | undefined;
    }
    export namespace Resource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Resource) => any;
    }
    export interface ListResourcesResult {
            /**
                * <p>An array of resources associated with the project. </p>
                */
            resources?: Resource[];
            /**
                * <p>The continuation token to use when requesting the next set of results, if there are
                *       more results to be returned.</p>
                */
            nextToken?: string;
    }
    export namespace ListResourcesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResourcesResult) => any;
    }
    export interface ListTagsForProjectRequest {
            /**
                * <p>The ID of the project to get tags for.</p>
                */
            id: string | undefined;
            /**
                * <p>Reserved for future use.</p>
                */
            nextToken?: string;
            /**
                * <p>Reserved for future use.</p>
                */
            maxResults?: number;
    }
    export namespace ListTagsForProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForProjectRequest) => any;
    }
    export interface ListTagsForProjectResult {
            /**
                * <p>The tags for the project.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>Reserved for future use.</p>
                */
            nextToken?: string;
    }
    export namespace ListTagsForProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForProjectResult) => any;
    }
    export interface ListTeamMembersRequest {
            /**
                * <p>The ID of the project for which you want to list team members.</p>
                */
            projectId: string | undefined;
            /**
                * <p>The continuation token for the next set of results, if the results cannot be returned
                *       in one response.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of team members you want returned in a response.</p>
                */
            maxResults?: number;
    }
    export namespace ListTeamMembersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTeamMembersRequest) => any;
    }
    /**
        * <p>Information about a team member in a project.</p>
        */
    export interface TeamMember {
            /**
                * <p>The Amazon Resource Name (ARN) of the user in IAM.</p>
                */
            userArn: string | undefined;
            /**
                * <p>The role assigned to the user in the project. Project roles have different levels of
                *       access. For more information, see <a href="http://docs.aws.amazon.com/codestar/latest/userguide/working-with-teams.html">Working with
                *         Teams</a> in the <i>AWS CodeStar User Guide</i>. </p>
                */
            projectRole: string | undefined;
            /**
                * <p>Whether the user is allowed to remotely access project resources using an SSH
                *       public/private key pair.</p>
                */
            remoteAccessAllowed?: boolean;
    }
    export namespace TeamMember {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TeamMember) => any;
    }
    export interface ListTeamMembersResult {
            /**
                * <p>A list of team member objects for the project.</p>
                */
            teamMembers: TeamMember[] | undefined;
            /**
                * <p>The continuation token to use when requesting the next set of results, if there are
                *       more results to be returned.</p>
                */
            nextToken?: string;
    }
    export namespace ListTeamMembersResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTeamMembersResult) => any;
    }
    export interface ListUserProfilesRequest {
            /**
                * <p>The continuation token for the next set of results, if the results cannot be returned
                *       in one response.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results to return in a response.</p>
                */
            maxResults?: number;
    }
    export namespace ListUserProfilesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserProfilesRequest) => any;
    }
    /**
        * <p>Information about a user's profile in AWS CodeStar.</p>
        */
    export interface UserProfileSummary {
            /**
                * <p>The Amazon Resource Name (ARN) of the user in IAM.</p>
                */
            userArn?: string;
            /**
                * <p>The display name of a user in AWS CodeStar. For example, this could be set to both first and
                *       last name ("Mary Major") or a single name ("Mary"). The display name is also used to generate
                *       the initial icon associated with the user in AWS CodeStar projects. If spaces are included in the
                *       display name, the first character that appears after the space will be used as the second
                *       character in the user initial icon. The initial icon displays a maximum of two characters, so
                *       a display name with more than one space (for example "Mary Jane Major") would generate an
                *       initial icon using the first character and the first character after the space ("MJ", not
                *       "MM").</p>
                */
            displayName?: string;
            /**
                * <p>The email address associated with the user.</p>
                */
            emailAddress?: string;
            /**
                * <p>The SSH public key associated with the user in AWS CodeStar. If a project owner allows the
                *       user remote access to project resources, this public key will be used along with the user's
                *       private key for SSH access.</p>
                */
            sshPublicKey?: string;
    }
    export namespace UserProfileSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserProfileSummary) => any;
    }
    export interface ListUserProfilesResult {
            /**
                * <p>All the user profiles configured in AWS CodeStar for an AWS account.</p>
                */
            userProfiles: UserProfileSummary[] | undefined;
            /**
                * <p>The continuation token to use when requesting the next set of results, if there are
                *       more results to be returned.</p>
                */
            nextToken?: string;
    }
    export namespace ListUserProfilesResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserProfilesResult) => any;
    }
    export interface TagProjectRequest {
            /**
                * <p>The ID of the project you want to add a tag to.</p>
                */
            id: string | undefined;
            /**
                * <p>The tags you want to add to the project.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagProjectRequest) => any;
    }
    export interface TagProjectResult {
            /**
                * <p>The tags for the project.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace TagProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagProjectResult) => any;
    }
    export interface UntagProjectRequest {
            /**
                * <p>The ID of the project to remove tags from.</p>
                */
            id: string | undefined;
            /**
                * <p>The tags to remove from the project.</p>
                */
            tags: string[] | undefined;
    }
    export namespace UntagProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagProjectRequest) => any;
    }
    export interface UntagProjectResult {
    }
    export namespace UntagProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagProjectResult) => any;
    }
    export interface UpdateProjectRequest {
            /**
                * <p>The ID of the project you want to update.</p>
                */
            id: string | undefined;
            /**
                * <p>The name of the project you want to update.</p>
                */
            name?: string;
            /**
                * <p>The description of the project, if any.</p>
                */
            description?: string;
    }
    export namespace UpdateProjectRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProjectRequest) => any;
    }
    export interface UpdateProjectResult {
    }
    export namespace UpdateProjectResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateProjectResult) => any;
    }
    /**
        * <p>The specified team member was not found.</p>
        */
    export class TeamMemberNotFoundException extends __BaseException {
            readonly name: "TeamMemberNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TeamMemberNotFoundException, __BaseException>);
    }
    export interface UpdateTeamMemberRequest {
            /**
                * <p>The ID of the project.</p>
                */
            projectId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the user for whom you want to change team membership
                *       attributes.</p>
                */
            userArn: string | undefined;
            /**
                * <p>The role assigned to the user in the project. Project roles have different levels of
                *       access. For more information, see <a href="http://docs.aws.amazon.com/codestar/latest/userguide/working-with-teams.html">Working with
                *         Teams</a> in the <i>AWS CodeStar User Guide</i>.</p>
                */
            projectRole?: string;
            /**
                * <p>Whether a team member is allowed to remotely access project resources using the SSH
                *       public key associated with the user's profile. Even if this is set to True, the user must
                *       associate a public key with their profile before the user can access resources.</p>
                */
            remoteAccessAllowed?: boolean;
    }
    export namespace UpdateTeamMemberRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTeamMemberRequest) => any;
    }
    export interface UpdateTeamMemberResult {
            /**
                * <p>The Amazon Resource Name (ARN) of the user whose team membership attributes were
                *       updated.</p>
                */
            userArn?: string;
            /**
                * <p>The project role granted to the user.</p>
                */
            projectRole?: string;
            /**
                * <p>Whether a team member is allowed to remotely access project resources using the SSH
                *       public key associated with the user's profile.</p>
                */
            remoteAccessAllowed?: boolean;
    }
    export namespace UpdateTeamMemberResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTeamMemberResult) => any;
    }
    export interface UpdateUserProfileRequest {
            /**
                * <p>The name that will be displayed as the friendly name for the user in AWS
                *       CodeStar.</p>
                */
            userArn: string | undefined;
            /**
                * <p>The name that is displayed as the friendly name for the user in AWS CodeStar.</p>
                */
            displayName?: string;
            /**
                * <p>The email address that is displayed as part of the user's profile in AWS
                *       CodeStar.</p>
                */
            emailAddress?: string;
            /**
                * <p>The SSH public key associated with the user in AWS CodeStar. If a project owner allows the
                *       user remote access to project resources, this public key will be used along with the user's
                *       private key for SSH access.</p>
                */
            sshPublicKey?: string;
    }
    export namespace UpdateUserProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserProfileRequest) => any;
    }
    export interface UpdateUserProfileResult {
            /**
                * <p>The Amazon Resource Name (ARN) of the user in IAM.</p>
                */
            userArn: string | undefined;
            /**
                * <p>The name that is displayed as the friendly name for the user in AWS CodeStar.</p>
                */
            displayName?: string;
            /**
                * <p>The email address that is displayed as part of the user's profile in AWS
                *       CodeStar.</p>
                */
            emailAddress?: string;
            /**
                * <p>The SSH public key associated with the user in AWS CodeStar. This is the public portion of the
                *       public/private keypair the user can use to access project resources if a project owner allows
                *       the user remote access to those resources.</p>
                */
            sshPublicKey?: string;
            /**
                * <p>The date the user profile was created, in timestamp format.</p>
                */
            createdTimestamp?: Date;
            /**
                * <p>The date the user profile was last modified, in timestamp format.</p>
                */
            lastModifiedTimestamp?: Date;
    }
    export namespace UpdateUserProfileResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserProfileResult) => any;
    }
}

declare module '@aws-sdk/client-codestar/node_modules/@aws-sdk/client-codestar/dist-types/models/CodeStarServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from CodeStar service.
        */
    export class CodeStarServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

