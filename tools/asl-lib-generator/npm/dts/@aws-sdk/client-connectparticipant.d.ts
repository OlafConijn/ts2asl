// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-connectparticipant' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CompleteAttachmentUploadCommandInput, CompleteAttachmentUploadCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/CompleteAttachmentUploadCommand";
    import { CreateParticipantConnectionCommandInput, CreateParticipantConnectionCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/CreateParticipantConnectionCommand";
    import { DisconnectParticipantCommandInput, DisconnectParticipantCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/DisconnectParticipantCommand";
    import { GetAttachmentCommandInput, GetAttachmentCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/GetAttachmentCommand";
    import { GetTranscriptCommandInput, GetTranscriptCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/GetTranscriptCommand";
    import { SendEventCommandInput, SendEventCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/SendEventCommand";
    import { SendMessageCommandInput, SendMessageCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/SendMessageCommand";
    import { StartAttachmentUploadCommandInput, StartAttachmentUploadCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/StartAttachmentUploadCommand";
    import { ConnectParticipantClient } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/ConnectParticipantClient";
    /**
        * <p>Amazon Connect is a cloud-based contact center solution that makes it easy to set up and manage
        *             a customer contact center and provide reliable customer engagement at any scale.</p>
        *         <p>Amazon Connect enables customer contacts through voice or chat.</p>
        *
        *         <p>The APIs described here are used by chat participants, such as agents and
        *             customers.</p>
        */
    export class ConnectParticipant extends ConnectParticipantClient {
            /**
                * <p>Allows you to confirm that the attachment has been uploaded using the pre-signed URL
                *             provided in StartAttachmentUpload API. </p>
                *          <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
                *                     authentication</a>.</p>
                */
            completeAttachmentUpload(args: CompleteAttachmentUploadCommandInput, options?: __HttpHandlerOptions): Promise<CompleteAttachmentUploadCommandOutput>;
            completeAttachmentUpload(args: CompleteAttachmentUploadCommandInput, cb: (err: any, data?: CompleteAttachmentUploadCommandOutput) => void): void;
            completeAttachmentUpload(args: CompleteAttachmentUploadCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CompleteAttachmentUploadCommandOutput) => void): void;
            /**
                * <p>Creates the participant's connection.  Note that ParticipantToken is used for invoking this API instead of
                *             ConnectionToken.</p>
                *         <p>The participant token is valid for the lifetime of the participant â€“
                *             until they are part of a contact.</p>
                *         <p>The response URL for <code>WEBSOCKET</code> Type has a connect expiry timeout of 100s.
                *             Clients must manually connect to the returned websocket URL and subscribe to the desired
                *             topic. </p>
                *         <p>For chat, you need to publish the following on the established websocket
                *             connection:</p>
                *         <p>
                *             <code>{"topic":"aws/subscribe","content":{"topics":["aws/chat"]}}</code>
                *          </p>
                *         <p>Upon websocket URL expiry, as specified in the response ConnectionExpiry parameter,
                *             clients need to call this API again to obtain a new websocket URL and perform the same
                *             steps as before.</p>
                *         <p>
                *             <b>Message streaming support</b>: This API can also be used together with the
                *             <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_StartContactStreaming.html">StartContactStreaming</a>
                *             API to create a participant connection for chat contacts that are
                *             not using a websocket. For more information about message streaming, <a href="https://docs.aws.amazon.com/connect/latest/adminguide/chat-message-streaming.html">Enable real-time chat message streaming</a> in the <i>Amazon Connect
                *                     Administrator Guide</i>.</p>
                *         <p>
                *             <b>Feature specifications</b>: For information about feature specifications, such as the allowed number of open
                *             websocket connections per participant, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#feature-limits">Feature specifications</a> in the <i>Amazon Connect Administrator
                *                 Guide</i>. </p>
                *         <note>
                *             <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
                *                     authentication</a>.</p>
                *          </note>
                */
            createParticipantConnection(args: CreateParticipantConnectionCommandInput, options?: __HttpHandlerOptions): Promise<CreateParticipantConnectionCommandOutput>;
            createParticipantConnection(args: CreateParticipantConnectionCommandInput, cb: (err: any, data?: CreateParticipantConnectionCommandOutput) => void): void;
            createParticipantConnection(args: CreateParticipantConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateParticipantConnectionCommandOutput) => void): void;
            /**
                * <p>Disconnects a participant. Note that ConnectionToken is used for invoking this API
                *             instead of ParticipantToken.</p>
                *          <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
                *                     authentication</a>.</p>
                */
            disconnectParticipant(args: DisconnectParticipantCommandInput, options?: __HttpHandlerOptions): Promise<DisconnectParticipantCommandOutput>;
            disconnectParticipant(args: DisconnectParticipantCommandInput, cb: (err: any, data?: DisconnectParticipantCommandOutput) => void): void;
            disconnectParticipant(args: DisconnectParticipantCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisconnectParticipantCommandOutput) => void): void;
            /**
                * <p>Provides a pre-signed URL for download of a completed attachment. This is an
                *             asynchronous API for use with active contacts.</p>
                *          <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
                *                     authentication</a>.</p>
                */
            getAttachment(args: GetAttachmentCommandInput, options?: __HttpHandlerOptions): Promise<GetAttachmentCommandOutput>;
            getAttachment(args: GetAttachmentCommandInput, cb: (err: any, data?: GetAttachmentCommandOutput) => void): void;
            getAttachment(args: GetAttachmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAttachmentCommandOutput) => void): void;
            /**
                * <p>Retrieves a transcript of the session, including details about any attachments. Note
                *             that ConnectionToken is used for invoking this API instead of ParticipantToken.</p>
                *         <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
                *                     authentication</a>.</p>
                */
            getTranscript(args: GetTranscriptCommandInput, options?: __HttpHandlerOptions): Promise<GetTranscriptCommandOutput>;
            getTranscript(args: GetTranscriptCommandInput, cb: (err: any, data?: GetTranscriptCommandOutput) => void): void;
            getTranscript(args: GetTranscriptCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTranscriptCommandOutput) => void): void;
            /**
                * <p>Sends an event. Note that ConnectionToken is used for invoking this API instead of
                *             ParticipantToken.</p>
                *          <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
                *                     authentication</a>.</p>
                */
            sendEvent(args: SendEventCommandInput, options?: __HttpHandlerOptions): Promise<SendEventCommandOutput>;
            sendEvent(args: SendEventCommandInput, cb: (err: any, data?: SendEventCommandOutput) => void): void;
            sendEvent(args: SendEventCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendEventCommandOutput) => void): void;
            /**
                * <p>Sends a message. Note that ConnectionToken is used for invoking this API instead of
                *             ParticipantToken.</p>
                *          <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
                *                     authentication</a>.</p>
                */
            sendMessage(args: SendMessageCommandInput, options?: __HttpHandlerOptions): Promise<SendMessageCommandOutput>;
            sendMessage(args: SendMessageCommandInput, cb: (err: any, data?: SendMessageCommandOutput) => void): void;
            sendMessage(args: SendMessageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendMessageCommandOutput) => void): void;
            /**
                * <p>Provides a pre-signed Amazon S3 URL in response for uploading the file directly to
                *             S3.</p>
                *          <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
                *                     authentication</a>.</p>
                */
            startAttachmentUpload(args: StartAttachmentUploadCommandInput, options?: __HttpHandlerOptions): Promise<StartAttachmentUploadCommandOutput>;
            startAttachmentUpload(args: StartAttachmentUploadCommandInput, cb: (err: any, data?: StartAttachmentUploadCommandOutput) => void): void;
            startAttachmentUpload(args: StartAttachmentUploadCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartAttachmentUploadCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/CompleteAttachmentUploadCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConnectParticipantClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/ConnectParticipantClient";
    import { CompleteAttachmentUploadRequest, CompleteAttachmentUploadResponse } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/models/models_0";
    export interface CompleteAttachmentUploadCommandInput extends CompleteAttachmentUploadRequest {
    }
    export interface CompleteAttachmentUploadCommandOutput extends CompleteAttachmentUploadResponse, __MetadataBearer {
    }
    /**
        * <p>Allows you to confirm that the attachment has been uploaded using the pre-signed URL
        *             provided in StartAttachmentUpload API. </p>
        *          <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
        *                     authentication</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConnectParticipantClient, CompleteAttachmentUploadCommand } from "@aws-sdk/client-connectparticipant"; // ES Modules import
        * // const { ConnectParticipantClient, CompleteAttachmentUploadCommand } = require("@aws-sdk/client-connectparticipant"); // CommonJS import
        * const client = new ConnectParticipantClient(config);
        * const command = new CompleteAttachmentUploadCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CompleteAttachmentUploadCommandInput} for command's `input` shape.
        * @see {@link CompleteAttachmentUploadCommandOutput} for command's `response` shape.
        * @see {@link ConnectParticipantClientResolvedConfig | config} for ConnectParticipantClient's `config` shape.
        *
        */
    export class CompleteAttachmentUploadCommand extends $Command<CompleteAttachmentUploadCommandInput, CompleteAttachmentUploadCommandOutput, ConnectParticipantClientResolvedConfig> {
            readonly input: CompleteAttachmentUploadCommandInput;
            constructor(input: CompleteAttachmentUploadCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConnectParticipantClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CompleteAttachmentUploadCommandInput, CompleteAttachmentUploadCommandOutput>;
    }
}

declare module '@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/CreateParticipantConnectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConnectParticipantClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/ConnectParticipantClient";
    import { CreateParticipantConnectionRequest, CreateParticipantConnectionResponse } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/models/models_0";
    export interface CreateParticipantConnectionCommandInput extends CreateParticipantConnectionRequest {
    }
    export interface CreateParticipantConnectionCommandOutput extends CreateParticipantConnectionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates the participant's connection.  Note that ParticipantToken is used for invoking this API instead of
        *             ConnectionToken.</p>
        *         <p>The participant token is valid for the lifetime of the participant â€“
        *             until they are part of a contact.</p>
        *         <p>The response URL for <code>WEBSOCKET</code> Type has a connect expiry timeout of 100s.
        *             Clients must manually connect to the returned websocket URL and subscribe to the desired
        *             topic. </p>
        *         <p>For chat, you need to publish the following on the established websocket
        *             connection:</p>
        *         <p>
        *             <code>{"topic":"aws/subscribe","content":{"topics":["aws/chat"]}}</code>
        *          </p>
        *         <p>Upon websocket URL expiry, as specified in the response ConnectionExpiry parameter,
        *             clients need to call this API again to obtain a new websocket URL and perform the same
        *             steps as before.</p>
        *         <p>
        *             <b>Message streaming support</b>: This API can also be used together with the
        *             <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_StartContactStreaming.html">StartContactStreaming</a>
        *             API to create a participant connection for chat contacts that are
        *             not using a websocket. For more information about message streaming, <a href="https://docs.aws.amazon.com/connect/latest/adminguide/chat-message-streaming.html">Enable real-time chat message streaming</a> in the <i>Amazon Connect
        *                     Administrator Guide</i>.</p>
        *         <p>
        *             <b>Feature specifications</b>: For information about feature specifications, such as the allowed number of open
        *             websocket connections per participant, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#feature-limits">Feature specifications</a> in the <i>Amazon Connect Administrator
        *                 Guide</i>. </p>
        *         <note>
        *             <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
        *                     authentication</a>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConnectParticipantClient, CreateParticipantConnectionCommand } from "@aws-sdk/client-connectparticipant"; // ES Modules import
        * // const { ConnectParticipantClient, CreateParticipantConnectionCommand } = require("@aws-sdk/client-connectparticipant"); // CommonJS import
        * const client = new ConnectParticipantClient(config);
        * const command = new CreateParticipantConnectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateParticipantConnectionCommandInput} for command's `input` shape.
        * @see {@link CreateParticipantConnectionCommandOutput} for command's `response` shape.
        * @see {@link ConnectParticipantClientResolvedConfig | config} for ConnectParticipantClient's `config` shape.
        *
        */
    export class CreateParticipantConnectionCommand extends $Command<CreateParticipantConnectionCommandInput, CreateParticipantConnectionCommandOutput, ConnectParticipantClientResolvedConfig> {
            readonly input: CreateParticipantConnectionCommandInput;
            constructor(input: CreateParticipantConnectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConnectParticipantClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateParticipantConnectionCommandInput, CreateParticipantConnectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/DisconnectParticipantCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConnectParticipantClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/ConnectParticipantClient";
    import { DisconnectParticipantRequest, DisconnectParticipantResponse } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/models/models_0";
    export interface DisconnectParticipantCommandInput extends DisconnectParticipantRequest {
    }
    export interface DisconnectParticipantCommandOutput extends DisconnectParticipantResponse, __MetadataBearer {
    }
    /**
        * <p>Disconnects a participant. Note that ConnectionToken is used for invoking this API
        *             instead of ParticipantToken.</p>
        *          <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
        *                     authentication</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConnectParticipantClient, DisconnectParticipantCommand } from "@aws-sdk/client-connectparticipant"; // ES Modules import
        * // const { ConnectParticipantClient, DisconnectParticipantCommand } = require("@aws-sdk/client-connectparticipant"); // CommonJS import
        * const client = new ConnectParticipantClient(config);
        * const command = new DisconnectParticipantCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisconnectParticipantCommandInput} for command's `input` shape.
        * @see {@link DisconnectParticipantCommandOutput} for command's `response` shape.
        * @see {@link ConnectParticipantClientResolvedConfig | config} for ConnectParticipantClient's `config` shape.
        *
        */
    export class DisconnectParticipantCommand extends $Command<DisconnectParticipantCommandInput, DisconnectParticipantCommandOutput, ConnectParticipantClientResolvedConfig> {
            readonly input: DisconnectParticipantCommandInput;
            constructor(input: DisconnectParticipantCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConnectParticipantClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisconnectParticipantCommandInput, DisconnectParticipantCommandOutput>;
    }
}

declare module '@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/GetAttachmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConnectParticipantClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/ConnectParticipantClient";
    import { GetAttachmentRequest, GetAttachmentResponse } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/models/models_0";
    export interface GetAttachmentCommandInput extends GetAttachmentRequest {
    }
    export interface GetAttachmentCommandOutput extends GetAttachmentResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a pre-signed URL for download of a completed attachment. This is an
        *             asynchronous API for use with active contacts.</p>
        *          <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
        *                     authentication</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConnectParticipantClient, GetAttachmentCommand } from "@aws-sdk/client-connectparticipant"; // ES Modules import
        * // const { ConnectParticipantClient, GetAttachmentCommand } = require("@aws-sdk/client-connectparticipant"); // CommonJS import
        * const client = new ConnectParticipantClient(config);
        * const command = new GetAttachmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAttachmentCommandInput} for command's `input` shape.
        * @see {@link GetAttachmentCommandOutput} for command's `response` shape.
        * @see {@link ConnectParticipantClientResolvedConfig | config} for ConnectParticipantClient's `config` shape.
        *
        */
    export class GetAttachmentCommand extends $Command<GetAttachmentCommandInput, GetAttachmentCommandOutput, ConnectParticipantClientResolvedConfig> {
            readonly input: GetAttachmentCommandInput;
            constructor(input: GetAttachmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConnectParticipantClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAttachmentCommandInput, GetAttachmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/GetTranscriptCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConnectParticipantClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/ConnectParticipantClient";
    import { GetTranscriptRequest, GetTranscriptResponse } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/models/models_0";
    export interface GetTranscriptCommandInput extends GetTranscriptRequest {
    }
    export interface GetTranscriptCommandOutput extends GetTranscriptResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a transcript of the session, including details about any attachments. Note
        *             that ConnectionToken is used for invoking this API instead of ParticipantToken.</p>
        *         <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
        *                     authentication</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConnectParticipantClient, GetTranscriptCommand } from "@aws-sdk/client-connectparticipant"; // ES Modules import
        * // const { ConnectParticipantClient, GetTranscriptCommand } = require("@aws-sdk/client-connectparticipant"); // CommonJS import
        * const client = new ConnectParticipantClient(config);
        * const command = new GetTranscriptCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTranscriptCommandInput} for command's `input` shape.
        * @see {@link GetTranscriptCommandOutput} for command's `response` shape.
        * @see {@link ConnectParticipantClientResolvedConfig | config} for ConnectParticipantClient's `config` shape.
        *
        */
    export class GetTranscriptCommand extends $Command<GetTranscriptCommandInput, GetTranscriptCommandOutput, ConnectParticipantClientResolvedConfig> {
            readonly input: GetTranscriptCommandInput;
            constructor(input: GetTranscriptCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConnectParticipantClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTranscriptCommandInput, GetTranscriptCommandOutput>;
    }
}

declare module '@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/SendEventCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConnectParticipantClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/ConnectParticipantClient";
    import { SendEventRequest, SendEventResponse } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/models/models_0";
    export interface SendEventCommandInput extends SendEventRequest {
    }
    export interface SendEventCommandOutput extends SendEventResponse, __MetadataBearer {
    }
    /**
        * <p>Sends an event. Note that ConnectionToken is used for invoking this API instead of
        *             ParticipantToken.</p>
        *          <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
        *                     authentication</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConnectParticipantClient, SendEventCommand } from "@aws-sdk/client-connectparticipant"; // ES Modules import
        * // const { ConnectParticipantClient, SendEventCommand } = require("@aws-sdk/client-connectparticipant"); // CommonJS import
        * const client = new ConnectParticipantClient(config);
        * const command = new SendEventCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendEventCommandInput} for command's `input` shape.
        * @see {@link SendEventCommandOutput} for command's `response` shape.
        * @see {@link ConnectParticipantClientResolvedConfig | config} for ConnectParticipantClient's `config` shape.
        *
        */
    export class SendEventCommand extends $Command<SendEventCommandInput, SendEventCommandOutput, ConnectParticipantClientResolvedConfig> {
            readonly input: SendEventCommandInput;
            constructor(input: SendEventCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConnectParticipantClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendEventCommandInput, SendEventCommandOutput>;
    }
}

declare module '@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/SendMessageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConnectParticipantClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/ConnectParticipantClient";
    import { SendMessageRequest, SendMessageResponse } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/models/models_0";
    export interface SendMessageCommandInput extends SendMessageRequest {
    }
    export interface SendMessageCommandOutput extends SendMessageResponse, __MetadataBearer {
    }
    /**
        * <p>Sends a message. Note that ConnectionToken is used for invoking this API instead of
        *             ParticipantToken.</p>
        *          <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
        *                     authentication</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConnectParticipantClient, SendMessageCommand } from "@aws-sdk/client-connectparticipant"; // ES Modules import
        * // const { ConnectParticipantClient, SendMessageCommand } = require("@aws-sdk/client-connectparticipant"); // CommonJS import
        * const client = new ConnectParticipantClient(config);
        * const command = new SendMessageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendMessageCommandInput} for command's `input` shape.
        * @see {@link SendMessageCommandOutput} for command's `response` shape.
        * @see {@link ConnectParticipantClientResolvedConfig | config} for ConnectParticipantClient's `config` shape.
        *
        */
    export class SendMessageCommand extends $Command<SendMessageCommandInput, SendMessageCommandOutput, ConnectParticipantClientResolvedConfig> {
            readonly input: SendMessageCommandInput;
            constructor(input: SendMessageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConnectParticipantClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendMessageCommandInput, SendMessageCommandOutput>;
    }
}

declare module '@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/StartAttachmentUploadCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ConnectParticipantClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/ConnectParticipantClient";
    import { StartAttachmentUploadRequest, StartAttachmentUploadResponse } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/models/models_0";
    export interface StartAttachmentUploadCommandInput extends StartAttachmentUploadRequest {
    }
    export interface StartAttachmentUploadCommandOutput extends StartAttachmentUploadResponse, __MetadataBearer {
    }
    /**
        * <p>Provides a pre-signed Amazon S3 URL in response for uploading the file directly to
        *             S3.</p>
        *          <p>The Amazon Connect Participant Service APIs do not use <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4
        *                     authentication</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ConnectParticipantClient, StartAttachmentUploadCommand } from "@aws-sdk/client-connectparticipant"; // ES Modules import
        * // const { ConnectParticipantClient, StartAttachmentUploadCommand } = require("@aws-sdk/client-connectparticipant"); // CommonJS import
        * const client = new ConnectParticipantClient(config);
        * const command = new StartAttachmentUploadCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartAttachmentUploadCommandInput} for command's `input` shape.
        * @see {@link StartAttachmentUploadCommandOutput} for command's `response` shape.
        * @see {@link ConnectParticipantClientResolvedConfig | config} for ConnectParticipantClient's `config` shape.
        *
        */
    export class StartAttachmentUploadCommand extends $Command<StartAttachmentUploadCommandInput, StartAttachmentUploadCommandOutput, ConnectParticipantClientResolvedConfig> {
            readonly input: StartAttachmentUploadCommandInput;
            constructor(input: StartAttachmentUploadCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ConnectParticipantClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartAttachmentUploadCommandInput, StartAttachmentUploadCommandOutput>;
    }
}

declare module '@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/ConnectParticipantClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CompleteAttachmentUploadCommandInput, CompleteAttachmentUploadCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/CompleteAttachmentUploadCommand";
    import { CreateParticipantConnectionCommandInput, CreateParticipantConnectionCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/CreateParticipantConnectionCommand";
    import { DisconnectParticipantCommandInput, DisconnectParticipantCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/DisconnectParticipantCommand";
    import { GetAttachmentCommandInput, GetAttachmentCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/GetAttachmentCommand";
    import { GetTranscriptCommandInput, GetTranscriptCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/GetTranscriptCommand";
    import { SendEventCommandInput, SendEventCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/SendEventCommand";
    import { SendMessageCommandInput, SendMessageCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/SendMessageCommand";
    import { StartAttachmentUploadCommandInput, StartAttachmentUploadCommandOutput } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/commands/StartAttachmentUploadCommand";
    export type ServiceInputTypes = CompleteAttachmentUploadCommandInput | CreateParticipantConnectionCommandInput | DisconnectParticipantCommandInput | GetAttachmentCommandInput | GetTranscriptCommandInput | SendEventCommandInput | SendMessageCommandInput | StartAttachmentUploadCommandInput;
    export type ServiceOutputTypes = CompleteAttachmentUploadCommandOutput | CreateParticipantConnectionCommandOutput | DisconnectParticipantCommandOutput | GetAttachmentCommandOutput | GetTranscriptCommandOutput | SendEventCommandOutput | SendMessageCommandOutput | StartAttachmentUploadCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type ConnectParticipantClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of ConnectParticipantClient class constructor that set the region, credentials and other options.
        */
    export interface ConnectParticipantClientConfig extends ConnectParticipantClientConfigType {
    }
    type ConnectParticipantClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of ConnectParticipantClient class. This is resolved and normalized from the {@link ConnectParticipantClientConfig | constructor configuration interface}.
        */
    export interface ConnectParticipantClientResolvedConfig extends ConnectParticipantClientResolvedConfigType {
    }
    /**
        * <p>Amazon Connect is a cloud-based contact center solution that makes it easy to set up and manage
        *             a customer contact center and provide reliable customer engagement at any scale.</p>
        *         <p>Amazon Connect enables customer contacts through voice or chat.</p>
        *
        *         <p>The APIs described here are used by chat participants, such as agents and
        *             customers.</p>
        */
    export class ConnectParticipantClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, ConnectParticipantClientResolvedConfig> {
            /**
                * The resolved configuration of ConnectParticipantClient class. This is resolved and normalized from the {@link ConnectParticipantClientConfig | constructor configuration interface}.
                */
            readonly config: ConnectParticipantClientResolvedConfig;
            constructor(configuration: ConnectParticipantClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { ConnectParticipantServiceException as __BaseException } from "@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/models/ConnectParticipantServiceException";
    /**
        * <p>You do not have sufficient access to perform this action.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export interface CompleteAttachmentUploadRequest {
            /**
                * <p>A list of unique identifiers for the attachments.</p>
                */
            AttachmentIds: string[] | undefined;
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request.</p>
                */
            ClientToken?: string;
            /**
                * <p>The authentication token associated with the participant's connection.</p>
                */
            ConnectionToken: string | undefined;
    }
    export namespace CompleteAttachmentUploadRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CompleteAttachmentUploadRequest) => any;
    }
    export interface CompleteAttachmentUploadResponse {
    }
    export namespace CompleteAttachmentUploadResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CompleteAttachmentUploadResponse) => any;
    }
    /**
        * <p>An attachment with that identifier is already being uploaded.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>This exception occurs when there is an internal failure in the Amazon Connect service.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>The number of attachments per contact exceeds the quota.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    /**
        * <p>The request was denied due to request throttling.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>The input fails to satisfy the constraints specified by Amazon Connect.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            Message: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export enum ConnectionType {
            CONNECTION_CREDENTIALS = "CONNECTION_CREDENTIALS",
            WEBSOCKET = "WEBSOCKET"
    }
    export interface CreateParticipantConnectionRequest {
            /**
                * <p>Type of connection information required.</p>
                */
            Type: (ConnectionType | string)[] | undefined;
            /**
                * <p>This is a header parameter.</p>
                *         <p>The ParticipantToken as obtained from <a href="https://docs.aws.amazon.com/connect/latest/APIReference/API_StartChatContact.html">StartChatContact</a>
                *             API response.</p>
                */
            ParticipantToken: string | undefined;
            /**
                * <p>Amazon Connect Participant is used to mark the participant as connected for message
                *             streaming.</p>
                */
            ConnectParticipant?: boolean;
    }
    export namespace CreateParticipantConnectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateParticipantConnectionRequest) => any;
    }
    /**
        * <p>Connection credentials. </p>
        */
    export interface ConnectionCredentials {
            /**
                * <p>The connection token.</p>
                */
            ConnectionToken?: string;
            /**
                * <p>The expiration of the token.</p>
                *         <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example,
                *             2019-11-08T02:41:28.172Z.</p>
                */
            Expiry?: string;
    }
    export namespace ConnectionCredentials {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectionCredentials) => any;
    }
    /**
        * <p>The websocket for the participant's connection.</p>
        */
    export interface Websocket {
            /**
                * <p>The URL of the websocket.</p>
                */
            Url?: string;
            /**
                * <p>The URL expiration timestamp in ISO date format.</p>
                *         <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example,
                *             2019-11-08T02:41:28.172Z.</p>
                */
            ConnectionExpiry?: string;
    }
    export namespace Websocket {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Websocket) => any;
    }
    export interface CreateParticipantConnectionResponse {
            /**
                * <p>Creates the participant's websocket connection.</p>
                */
            Websocket?: Websocket;
            /**
                * <p>Creates the participant's connection credentials. The authentication token associated
                *             with the participant's connection.</p>
                */
            ConnectionCredentials?: ConnectionCredentials;
    }
    export namespace CreateParticipantConnectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateParticipantConnectionResponse) => any;
    }
    export interface DisconnectParticipantRequest {
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request.</p>
                */
            ClientToken?: string;
            /**
                * <p>The authentication token associated with the participant's connection.</p>
                */
            ConnectionToken: string | undefined;
    }
    export namespace DisconnectParticipantRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisconnectParticipantRequest) => any;
    }
    export interface DisconnectParticipantResponse {
    }
    export namespace DisconnectParticipantResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisconnectParticipantResponse) => any;
    }
    export interface GetAttachmentRequest {
            /**
                * <p>A unique identifier for the attachment.</p>
                */
            AttachmentId: string | undefined;
            /**
                * <p>The authentication token associated with the participant's connection.</p>
                */
            ConnectionToken: string | undefined;
    }
    export namespace GetAttachmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAttachmentRequest) => any;
    }
    export interface GetAttachmentResponse {
            /**
                * <p>This is the pre-signed URL that can be used for uploading the file to Amazon S3 when used in response
                * to <a href="https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_StartAttachmentUpload.html">StartAttachmentUpload</a>.</p>
                */
            Url?: string;
            /**
                * <p>The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>
                */
            UrlExpiry?: string;
    }
    export namespace GetAttachmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAttachmentResponse) => any;
    }
    export enum ScanDirection {
            BACKWARD = "BACKWARD",
            FORWARD = "FORWARD"
    }
    export enum SortKey {
            ASCENDING = "ASCENDING",
            DESCENDING = "DESCENDING"
    }
    /**
        * <p>A filtering option for where to start. For example, if you sent 100 messages, start
        *             with message 50. </p>
        */
    export interface StartPosition {
            /**
                * <p>The ID of the message or event where to start. </p>
                */
            Id?: string;
            /**
                * <p>The time in ISO format where to start.</p>
                *         <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example,
                *             2019-11-08T02:41:28.172Z.</p>
                */
            AbsoluteTime?: string;
            /**
                * <p>The start position of the most recent message where you want to start. </p>
                */
            MostRecent?: number;
    }
    export namespace StartPosition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartPosition) => any;
    }
    export interface GetTranscriptRequest {
            /**
                * <p>The contactId from the current contact chain for which transcript is needed.</p>
                */
            ContactId?: string;
            /**
                * <p>The maximum number of results to return in the page. Default: 10. </p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token. Use the value returned previously in the next subsequent request
                *             to retrieve the next set of results.</p>
                */
            NextToken?: string;
            /**
                * <p>The direction from StartPosition from which to retrieve message. Default: BACKWARD
                *             when no StartPosition is provided, FORWARD with StartPosition. </p>
                */
            ScanDirection?: ScanDirection | string;
            /**
                * <p>The sort order for the records. Default: DESCENDING.</p>
                */
            SortOrder?: SortKey | string;
            /**
                * <p>A filtering option for where to start.</p>
                */
            StartPosition?: StartPosition;
            /**
                * <p>The authentication token associated with the participant's connection.</p>
                */
            ConnectionToken: string | undefined;
    }
    export namespace GetTranscriptRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTranscriptRequest) => any;
    }
    export enum ArtifactStatus {
            APPROVED = "APPROVED",
            IN_PROGRESS = "IN_PROGRESS",
            REJECTED = "REJECTED"
    }
    /**
        * <p>The case-insensitive input to indicate standard MIME type that describes the format of the file
        *             that will be uploaded.</p>
        */
    export interface AttachmentItem {
            /**
                * <p>Describes the MIME file type of the attachment. For a list of supported file types, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#feature-limits">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
                */
            ContentType?: string;
            /**
                * <p>A unique identifier for the attachment.</p>
                */
            AttachmentId?: string;
            /**
                * <p>A case-sensitive name of the attachment being uploaded.</p>
                */
            AttachmentName?: string;
            /**
                * <p>Status of the attachment.</p>
                */
            Status?: ArtifactStatus | string;
    }
    export namespace AttachmentItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachmentItem) => any;
    }
    export enum ParticipantRole {
            AGENT = "AGENT",
            CUSTOMER = "CUSTOMER",
            SYSTEM = "SYSTEM"
    }
    export enum ChatItemType {
            ATTACHMENT = "ATTACHMENT",
            CHAT_ENDED = "CHAT_ENDED",
            CONNECTION_ACK = "CONNECTION_ACK",
            EVENT = "EVENT",
            MESSAGE = "MESSAGE",
            PARTICIPANT_JOINED = "PARTICIPANT_JOINED",
            PARTICIPANT_LEFT = "PARTICIPANT_LEFT",
            TRANSFER_FAILED = "TRANSFER_FAILED",
            TRANSFER_SUCCEEDED = "TRANSFER_SUCCEEDED",
            TYPING = "TYPING"
    }
    /**
        * <p>An item - message or event - that has been sent. </p>
        */
    export interface Item {
            /**
                * <p>The time when the message or event was sent.</p>
                *         <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example,
                *             2019-11-08T02:41:28.172Z.</p>
                */
            AbsoluteTime?: string;
            /**
                * <p>The content of the message or event.</p>
                */
            Content?: string;
            /**
                * <p>The type of content of the item.</p>
                */
            ContentType?: string;
            /**
                * <p>The ID of the item.</p>
                */
            Id?: string;
            /**
                * <p>Type of the item: message or event. </p>
                */
            Type?: ChatItemType | string;
            /**
                * <p>The ID of the sender in the session.</p>
                */
            ParticipantId?: string;
            /**
                * <p>The chat display name of the sender.</p>
                */
            DisplayName?: string;
            /**
                * <p>The role of the sender. For example, is it a customer, agent, or system.</p>
                */
            ParticipantRole?: ParticipantRole | string;
            /**
                * <p>Provides information about the attachments.</p>
                */
            Attachments?: AttachmentItem[];
    }
    export namespace Item {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Item) => any;
    }
    export interface GetTranscriptResponse {
            /**
                * <p>The initial contact ID for the contact. </p>
                */
            InitialContactId?: string;
            /**
                * <p>The list of messages in the session.</p>
                */
            Transcript?: Item[];
            /**
                * <p>The pagination token. Use the value returned previously in the next subsequent request
                *             to retrieve the next set of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetTranscriptResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTranscriptResponse) => any;
    }
    export interface SendEventRequest {
            /**
                * <p>The content type of the request. Supported types are:</p>
                *
                *         <ul>
                *             <li>
                *                 <p>application/vnd.amazonaws.connect.event.typing</p>
                *             </li>
                *             <li>
                *                 <p>application/vnd.amazonaws.connect.event.connection.acknowledged</p>
                *             </li>
                *          </ul>
                */
            ContentType: string | undefined;
            /**
                * <p>The content of the event to be sent (for example, message text). This is not yet
                *             supported.</p>
                */
            Content?: string;
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request.</p>
                */
            ClientToken?: string;
            /**
                * <p>The authentication token associated with the participant's connection.</p>
                */
            ConnectionToken: string | undefined;
    }
    export namespace SendEventRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendEventRequest) => any;
    }
    export interface SendEventResponse {
            /**
                * <p>The ID of the response.</p>
                */
            Id?: string;
            /**
                * <p>The time when the event was sent.</p>
                *         <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example,
                *             2019-11-08T02:41:28.172Z.</p>
                */
            AbsoluteTime?: string;
    }
    export namespace SendEventResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendEventResponse) => any;
    }
    export interface SendMessageRequest {
            /**
                * <p>The type of the content. Supported types are text/plain.</p>
                */
            ContentType: string | undefined;
            /**
                * <p>The content of the message.</p>
                */
            Content: string | undefined;
            /**
                * <p>A unique, case-sensitive identifier that you provide to ensure the idempotency of the
                *             request.</p>
                */
            ClientToken?: string;
            /**
                * <p>The authentication token associated with the connection.</p>
                */
            ConnectionToken: string | undefined;
    }
    export namespace SendMessageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendMessageRequest) => any;
    }
    export interface SendMessageResponse {
            /**
                * <p>The ID of the message.</p>
                */
            Id?: string;
            /**
                * <p>The time when the message was sent.</p>
                *         <p>It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example,
                *             2019-11-08T02:41:28.172Z.</p>
                */
            AbsoluteTime?: string;
    }
    export namespace SendMessageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendMessageResponse) => any;
    }
    export interface StartAttachmentUploadRequest {
            /**
                * <p>Describes the MIME file type of the attachment. For a list of supported file types, see <a href="https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#feature-limits">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>.</p>
                */
            ContentType: string | undefined;
            /**
                * <p>The size of the attachment in bytes.</p>
                */
            AttachmentSizeInBytes: number | undefined;
            /**
                * <p>A case-sensitive name of the attachment being uploaded.</p>
                */
            AttachmentName: string | undefined;
            /**
                * <p>A unique case sensitive identifier to support idempotency of request.</p>
                */
            ClientToken?: string;
            /**
                * <p>The authentication token associated with the participant's connection.</p>
                */
            ConnectionToken: string | undefined;
    }
    export namespace StartAttachmentUploadRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartAttachmentUploadRequest) => any;
    }
    /**
        * <p>Fields to be used while uploading the attachment.</p>
        */
    export interface UploadMetadata {
            /**
                * <p>This is the pre-signed URL that can be used for uploading the file to Amazon S3 when used in response
                * to <a href="https://docs.aws.amazon.com/connect-participant/latest/APIReference/API_StartAttachmentUpload.html">StartAttachmentUpload</a>.</p>
                */
            Url?: string;
            /**
                * <p>The expiration time of the URL in ISO timestamp. It's specified in ISO 8601 format: yyyy-MM-ddThh:mm:ss.SSSZ. For example, 2019-11-08T02:41:28.172Z.</p>
                */
            UrlExpiry?: string;
            /**
                * <p>The headers to be provided while uploading the file to the URL.</p>
                */
            HeadersToInclude?: Record<string, string>;
    }
    export namespace UploadMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UploadMetadata) => any;
    }
    export interface StartAttachmentUploadResponse {
            /**
                * <p>A unique identifier for the attachment.</p>
                */
            AttachmentId?: string;
            /**
                * <p>Fields to be used while uploading the attachment.</p>
                */
            UploadMetadata?: UploadMetadata;
    }
    export namespace StartAttachmentUploadResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartAttachmentUploadResponse) => any;
    }
}

declare module '@aws-sdk/client-connectparticipant/node_modules/@aws-sdk/client-connectparticipant/dist-types/models/ConnectParticipantServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from ConnectParticipant service.
        */
    export class ConnectParticipantServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

