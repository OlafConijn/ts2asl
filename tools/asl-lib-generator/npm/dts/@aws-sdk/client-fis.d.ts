// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-fis' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateExperimentTemplateCommandInput, CreateExperimentTemplateCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/CreateExperimentTemplateCommand";
    import { DeleteExperimentTemplateCommandInput, DeleteExperimentTemplateCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/DeleteExperimentTemplateCommand";
    import { GetActionCommandInput, GetActionCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/GetActionCommand";
    import { GetExperimentCommandInput, GetExperimentCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/GetExperimentCommand";
    import { GetExperimentTemplateCommandInput, GetExperimentTemplateCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/GetExperimentTemplateCommand";
    import { GetTargetResourceTypeCommandInput, GetTargetResourceTypeCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/GetTargetResourceTypeCommand";
    import { ListActionsCommandInput, ListActionsCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListActionsCommand";
    import { ListExperimentsCommandInput, ListExperimentsCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListExperimentsCommand";
    import { ListExperimentTemplatesCommandInput, ListExperimentTemplatesCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListExperimentTemplatesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListTagsForResourceCommand";
    import { ListTargetResourceTypesCommandInput, ListTargetResourceTypesCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListTargetResourceTypesCommand";
    import { StartExperimentCommandInput, StartExperimentCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/StartExperimentCommand";
    import { StopExperimentCommandInput, StopExperimentCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/StopExperimentCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/UntagResourceCommand";
    import { UpdateExperimentTemplateCommandInput, UpdateExperimentTemplateCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/UpdateExperimentTemplateCommand";
    import { FisClient } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    /**
        * <p>Fault Injection Simulator is a managed service that enables you to perform fault injection
        *            experiments on your Amazon Web Services workloads. For more information, see the <a href="https://docs.aws.amazon.com/fis/latest/userguide/">Fault Injection Simulator User Guide</a>.</p>
        */
    export class Fis extends FisClient {
            /**
                * <p>Creates an experiment template. </p>
                *          <p>An experiment template includes the following components:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Targets</b>: A target can be a specific resource in
                *                your Amazon Web Services environment, or one or more resources that match criteria that you
                *                specify, for example, resources that have specific tags.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Actions</b>: The actions to carry out on the
                *                target. You can specify multiple actions, the duration of each action, and when to start each action during an experiment.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Stop conditions</b>: If a stop condition is
                *                triggered while an experiment is running, the experiment is automatically
                *                stopped. You can define a stop condition as a CloudWatch alarm.</p>
                *             </li>
                *          </ul>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/fis/latest/userguide/experiment-templates.html">Experiment templates</a>
                *          in the <i>Fault Injection Simulator User Guide</i>.</p>
                */
            createExperimentTemplate(args: CreateExperimentTemplateCommandInput, options?: __HttpHandlerOptions): Promise<CreateExperimentTemplateCommandOutput>;
            createExperimentTemplate(args: CreateExperimentTemplateCommandInput, cb: (err: any, data?: CreateExperimentTemplateCommandOutput) => void): void;
            createExperimentTemplate(args: CreateExperimentTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateExperimentTemplateCommandOutput) => void): void;
            /**
                * <p>Deletes the specified experiment template.</p>
                */
            deleteExperimentTemplate(args: DeleteExperimentTemplateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteExperimentTemplateCommandOutput>;
            deleteExperimentTemplate(args: DeleteExperimentTemplateCommandInput, cb: (err: any, data?: DeleteExperimentTemplateCommandOutput) => void): void;
            deleteExperimentTemplate(args: DeleteExperimentTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteExperimentTemplateCommandOutput) => void): void;
            /**
                * <p>Gets information about the specified FIS action.</p>
                */
            getAction(args: GetActionCommandInput, options?: __HttpHandlerOptions): Promise<GetActionCommandOutput>;
            getAction(args: GetActionCommandInput, cb: (err: any, data?: GetActionCommandOutput) => void): void;
            getAction(args: GetActionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetActionCommandOutput) => void): void;
            /**
                * <p>Gets information about the specified experiment.</p>
                */
            getExperiment(args: GetExperimentCommandInput, options?: __HttpHandlerOptions): Promise<GetExperimentCommandOutput>;
            getExperiment(args: GetExperimentCommandInput, cb: (err: any, data?: GetExperimentCommandOutput) => void): void;
            getExperiment(args: GetExperimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetExperimentCommandOutput) => void): void;
            /**
                * <p>Gets information about the specified experiment template.</p>
                */
            getExperimentTemplate(args: GetExperimentTemplateCommandInput, options?: __HttpHandlerOptions): Promise<GetExperimentTemplateCommandOutput>;
            getExperimentTemplate(args: GetExperimentTemplateCommandInput, cb: (err: any, data?: GetExperimentTemplateCommandOutput) => void): void;
            getExperimentTemplate(args: GetExperimentTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetExperimentTemplateCommandOutput) => void): void;
            /**
                * <p>Gets information about the specified resource type.</p>
                */
            getTargetResourceType(args: GetTargetResourceTypeCommandInput, options?: __HttpHandlerOptions): Promise<GetTargetResourceTypeCommandOutput>;
            getTargetResourceType(args: GetTargetResourceTypeCommandInput, cb: (err: any, data?: GetTargetResourceTypeCommandOutput) => void): void;
            getTargetResourceType(args: GetTargetResourceTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTargetResourceTypeCommandOutput) => void): void;
            /**
                * <p>Lists the available FIS actions.</p>
                */
            listActions(args: ListActionsCommandInput, options?: __HttpHandlerOptions): Promise<ListActionsCommandOutput>;
            listActions(args: ListActionsCommandInput, cb: (err: any, data?: ListActionsCommandOutput) => void): void;
            listActions(args: ListActionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListActionsCommandOutput) => void): void;
            /**
                * <p>Lists your experiments.</p>
                */
            listExperiments(args: ListExperimentsCommandInput, options?: __HttpHandlerOptions): Promise<ListExperimentsCommandOutput>;
            listExperiments(args: ListExperimentsCommandInput, cb: (err: any, data?: ListExperimentsCommandOutput) => void): void;
            listExperiments(args: ListExperimentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListExperimentsCommandOutput) => void): void;
            /**
                * <p>Lists your experiment templates.</p>
                */
            listExperimentTemplates(args: ListExperimentTemplatesCommandInput, options?: __HttpHandlerOptions): Promise<ListExperimentTemplatesCommandOutput>;
            listExperimentTemplates(args: ListExperimentTemplatesCommandInput, cb: (err: any, data?: ListExperimentTemplatesCommandOutput) => void): void;
            listExperimentTemplates(args: ListExperimentTemplatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListExperimentTemplatesCommandOutput) => void): void;
            /**
                * <p>Lists the tags for the specified resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Lists the target resource types.</p>
                */
            listTargetResourceTypes(args: ListTargetResourceTypesCommandInput, options?: __HttpHandlerOptions): Promise<ListTargetResourceTypesCommandOutput>;
            listTargetResourceTypes(args: ListTargetResourceTypesCommandInput, cb: (err: any, data?: ListTargetResourceTypesCommandOutput) => void): void;
            listTargetResourceTypes(args: ListTargetResourceTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTargetResourceTypesCommandOutput) => void): void;
            /**
                * <p>Starts running an experiment from the specified experiment template.</p>
                */
            startExperiment(args: StartExperimentCommandInput, options?: __HttpHandlerOptions): Promise<StartExperimentCommandOutput>;
            startExperiment(args: StartExperimentCommandInput, cb: (err: any, data?: StartExperimentCommandOutput) => void): void;
            startExperiment(args: StartExperimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartExperimentCommandOutput) => void): void;
            /**
                * <p>Stops the specified experiment.</p>
                */
            stopExperiment(args: StopExperimentCommandInput, options?: __HttpHandlerOptions): Promise<StopExperimentCommandOutput>;
            stopExperiment(args: StopExperimentCommandInput, cb: (err: any, data?: StopExperimentCommandOutput) => void): void;
            stopExperiment(args: StopExperimentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StopExperimentCommandOutput) => void): void;
            /**
                * <p>Applies the specified tags to the specified resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the specified resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the specified experiment template.</p>
                */
            updateExperimentTemplate(args: UpdateExperimentTemplateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateExperimentTemplateCommandOutput>;
            updateExperimentTemplate(args: UpdateExperimentTemplateCommandInput, cb: (err: any, data?: UpdateExperimentTemplateCommandOutput) => void): void;
            updateExperimentTemplate(args: UpdateExperimentTemplateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateExperimentTemplateCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/CreateExperimentTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { CreateExperimentTemplateRequest, CreateExperimentTemplateResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface CreateExperimentTemplateCommandInput extends CreateExperimentTemplateRequest {
    }
    export interface CreateExperimentTemplateCommandOutput extends CreateExperimentTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an experiment template. </p>
        *          <p>An experiment template includes the following components:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Targets</b>: A target can be a specific resource in
        *                your Amazon Web Services environment, or one or more resources that match criteria that you
        *                specify, for example, resources that have specific tags.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Actions</b>: The actions to carry out on the
        *                target. You can specify multiple actions, the duration of each action, and when to start each action during an experiment.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Stop conditions</b>: If a stop condition is
        *                triggered while an experiment is running, the experiment is automatically
        *                stopped. You can define a stop condition as a CloudWatch alarm.</p>
        *             </li>
        *          </ul>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/fis/latest/userguide/experiment-templates.html">Experiment templates</a>
        *          in the <i>Fault Injection Simulator User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, CreateExperimentTemplateCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, CreateExperimentTemplateCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new CreateExperimentTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateExperimentTemplateCommandInput} for command's `input` shape.
        * @see {@link CreateExperimentTemplateCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class CreateExperimentTemplateCommand extends $Command<CreateExperimentTemplateCommandInput, CreateExperimentTemplateCommandOutput, FisClientResolvedConfig> {
            readonly input: CreateExperimentTemplateCommandInput;
            constructor(input: CreateExperimentTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateExperimentTemplateCommandInput, CreateExperimentTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/DeleteExperimentTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { DeleteExperimentTemplateRequest, DeleteExperimentTemplateResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface DeleteExperimentTemplateCommandInput extends DeleteExperimentTemplateRequest {
    }
    export interface DeleteExperimentTemplateCommandOutput extends DeleteExperimentTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified experiment template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, DeleteExperimentTemplateCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, DeleteExperimentTemplateCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new DeleteExperimentTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteExperimentTemplateCommandInput} for command's `input` shape.
        * @see {@link DeleteExperimentTemplateCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class DeleteExperimentTemplateCommand extends $Command<DeleteExperimentTemplateCommandInput, DeleteExperimentTemplateCommandOutput, FisClientResolvedConfig> {
            readonly input: DeleteExperimentTemplateCommandInput;
            constructor(input: DeleteExperimentTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteExperimentTemplateCommandInput, DeleteExperimentTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/GetActionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { GetActionRequest, GetActionResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface GetActionCommandInput extends GetActionRequest {
    }
    export interface GetActionCommandOutput extends GetActionResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about the specified FIS action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, GetActionCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, GetActionCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new GetActionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetActionCommandInput} for command's `input` shape.
        * @see {@link GetActionCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class GetActionCommand extends $Command<GetActionCommandInput, GetActionCommandOutput, FisClientResolvedConfig> {
            readonly input: GetActionCommandInput;
            constructor(input: GetActionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetActionCommandInput, GetActionCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/GetExperimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { GetExperimentRequest, GetExperimentResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface GetExperimentCommandInput extends GetExperimentRequest {
    }
    export interface GetExperimentCommandOutput extends GetExperimentResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about the specified experiment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, GetExperimentCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, GetExperimentCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new GetExperimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetExperimentCommandInput} for command's `input` shape.
        * @see {@link GetExperimentCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class GetExperimentCommand extends $Command<GetExperimentCommandInput, GetExperimentCommandOutput, FisClientResolvedConfig> {
            readonly input: GetExperimentCommandInput;
            constructor(input: GetExperimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetExperimentCommandInput, GetExperimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/GetExperimentTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { GetExperimentTemplateRequest, GetExperimentTemplateResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface GetExperimentTemplateCommandInput extends GetExperimentTemplateRequest {
    }
    export interface GetExperimentTemplateCommandOutput extends GetExperimentTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about the specified experiment template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, GetExperimentTemplateCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, GetExperimentTemplateCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new GetExperimentTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetExperimentTemplateCommandInput} for command's `input` shape.
        * @see {@link GetExperimentTemplateCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class GetExperimentTemplateCommand extends $Command<GetExperimentTemplateCommandInput, GetExperimentTemplateCommandOutput, FisClientResolvedConfig> {
            readonly input: GetExperimentTemplateCommandInput;
            constructor(input: GetExperimentTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetExperimentTemplateCommandInput, GetExperimentTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/GetTargetResourceTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { GetTargetResourceTypeRequest, GetTargetResourceTypeResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface GetTargetResourceTypeCommandInput extends GetTargetResourceTypeRequest {
    }
    export interface GetTargetResourceTypeCommandOutput extends GetTargetResourceTypeResponse, __MetadataBearer {
    }
    /**
        * <p>Gets information about the specified resource type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, GetTargetResourceTypeCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, GetTargetResourceTypeCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new GetTargetResourceTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTargetResourceTypeCommandInput} for command's `input` shape.
        * @see {@link GetTargetResourceTypeCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class GetTargetResourceTypeCommand extends $Command<GetTargetResourceTypeCommandInput, GetTargetResourceTypeCommandOutput, FisClientResolvedConfig> {
            readonly input: GetTargetResourceTypeCommandInput;
            constructor(input: GetTargetResourceTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTargetResourceTypeCommandInput, GetTargetResourceTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListActionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { ListActionsRequest, ListActionsResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface ListActionsCommandInput extends ListActionsRequest {
    }
    export interface ListActionsCommandOutput extends ListActionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the available FIS actions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, ListActionsCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, ListActionsCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new ListActionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListActionsCommandInput} for command's `input` shape.
        * @see {@link ListActionsCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class ListActionsCommand extends $Command<ListActionsCommandInput, ListActionsCommandOutput, FisClientResolvedConfig> {
            readonly input: ListActionsCommandInput;
            constructor(input: ListActionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListActionsCommandInput, ListActionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListExperimentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { ListExperimentsRequest, ListExperimentsResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface ListExperimentsCommandInput extends ListExperimentsRequest {
    }
    export interface ListExperimentsCommandOutput extends ListExperimentsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists your experiments.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, ListExperimentsCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, ListExperimentsCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new ListExperimentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListExperimentsCommandInput} for command's `input` shape.
        * @see {@link ListExperimentsCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class ListExperimentsCommand extends $Command<ListExperimentsCommandInput, ListExperimentsCommandOutput, FisClientResolvedConfig> {
            readonly input: ListExperimentsCommandInput;
            constructor(input: ListExperimentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListExperimentsCommandInput, ListExperimentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListExperimentTemplatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { ListExperimentTemplatesRequest, ListExperimentTemplatesResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface ListExperimentTemplatesCommandInput extends ListExperimentTemplatesRequest {
    }
    export interface ListExperimentTemplatesCommandOutput extends ListExperimentTemplatesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists your experiment templates.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, ListExperimentTemplatesCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, ListExperimentTemplatesCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new ListExperimentTemplatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListExperimentTemplatesCommandInput} for command's `input` shape.
        * @see {@link ListExperimentTemplatesCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class ListExperimentTemplatesCommand extends $Command<ListExperimentTemplatesCommandInput, ListExperimentTemplatesCommandOutput, FisClientResolvedConfig> {
            readonly input: ListExperimentTemplatesCommandInput;
            constructor(input: ListExperimentTemplatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListExperimentTemplatesCommandInput, ListExperimentTemplatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags for the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, ListTagsForResourceCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, ListTagsForResourceCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, FisClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListTargetResourceTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { ListTargetResourceTypesRequest, ListTargetResourceTypesResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface ListTargetResourceTypesCommandInput extends ListTargetResourceTypesRequest {
    }
    export interface ListTargetResourceTypesCommandOutput extends ListTargetResourceTypesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the target resource types.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, ListTargetResourceTypesCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, ListTargetResourceTypesCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new ListTargetResourceTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTargetResourceTypesCommandInput} for command's `input` shape.
        * @see {@link ListTargetResourceTypesCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class ListTargetResourceTypesCommand extends $Command<ListTargetResourceTypesCommandInput, ListTargetResourceTypesCommandOutput, FisClientResolvedConfig> {
            readonly input: ListTargetResourceTypesCommandInput;
            constructor(input: ListTargetResourceTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTargetResourceTypesCommandInput, ListTargetResourceTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/StartExperimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { StartExperimentRequest, StartExperimentResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface StartExperimentCommandInput extends StartExperimentRequest {
    }
    export interface StartExperimentCommandOutput extends StartExperimentResponse, __MetadataBearer {
    }
    /**
        * <p>Starts running an experiment from the specified experiment template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, StartExperimentCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, StartExperimentCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new StartExperimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartExperimentCommandInput} for command's `input` shape.
        * @see {@link StartExperimentCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class StartExperimentCommand extends $Command<StartExperimentCommandInput, StartExperimentCommandOutput, FisClientResolvedConfig> {
            readonly input: StartExperimentCommandInput;
            constructor(input: StartExperimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartExperimentCommandInput, StartExperimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/StopExperimentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { StopExperimentRequest, StopExperimentResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface StopExperimentCommandInput extends StopExperimentRequest {
    }
    export interface StopExperimentCommandOutput extends StopExperimentResponse, __MetadataBearer {
    }
    /**
        * <p>Stops the specified experiment.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, StopExperimentCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, StopExperimentCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new StopExperimentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StopExperimentCommandInput} for command's `input` shape.
        * @see {@link StopExperimentCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class StopExperimentCommand extends $Command<StopExperimentCommandInput, StopExperimentCommandOutput, FisClientResolvedConfig> {
            readonly input: StopExperimentCommandInput;
            constructor(input: StopExperimentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StopExperimentCommandInput, StopExperimentCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Applies the specified tags to the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, TagResourceCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, TagResourceCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, FisClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, UntagResourceCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, UntagResourceCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, FisClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/UpdateExperimentTemplateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { FisClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient";
    import { UpdateExperimentTemplateRequest, UpdateExperimentTemplateResponse } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0";
    export interface UpdateExperimentTemplateCommandInput extends UpdateExperimentTemplateRequest {
    }
    export interface UpdateExperimentTemplateCommandOutput extends UpdateExperimentTemplateResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the specified experiment template.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { FisClient, UpdateExperimentTemplateCommand } from "@aws-sdk/client-fis"; // ES Modules import
        * // const { FisClient, UpdateExperimentTemplateCommand } = require("@aws-sdk/client-fis"); // CommonJS import
        * const client = new FisClient(config);
        * const command = new UpdateExperimentTemplateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateExperimentTemplateCommandInput} for command's `input` shape.
        * @see {@link UpdateExperimentTemplateCommandOutput} for command's `response` shape.
        * @see {@link FisClientResolvedConfig | config} for FisClient's `config` shape.
        *
        */
    export class UpdateExperimentTemplateCommand extends $Command<UpdateExperimentTemplateCommandInput, UpdateExperimentTemplateCommandOutput, FisClientResolvedConfig> {
            readonly input: UpdateExperimentTemplateCommandInput;
            constructor(input: UpdateExperimentTemplateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: FisClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateExperimentTemplateCommandInput, UpdateExperimentTemplateCommandOutput>;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/FisClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateExperimentTemplateCommandInput, CreateExperimentTemplateCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/CreateExperimentTemplateCommand";
    import { DeleteExperimentTemplateCommandInput, DeleteExperimentTemplateCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/DeleteExperimentTemplateCommand";
    import { GetActionCommandInput, GetActionCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/GetActionCommand";
    import { GetExperimentCommandInput, GetExperimentCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/GetExperimentCommand";
    import { GetExperimentTemplateCommandInput, GetExperimentTemplateCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/GetExperimentTemplateCommand";
    import { GetTargetResourceTypeCommandInput, GetTargetResourceTypeCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/GetTargetResourceTypeCommand";
    import { ListActionsCommandInput, ListActionsCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListActionsCommand";
    import { ListExperimentsCommandInput, ListExperimentsCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListExperimentsCommand";
    import { ListExperimentTemplatesCommandInput, ListExperimentTemplatesCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListExperimentTemplatesCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListTagsForResourceCommand";
    import { ListTargetResourceTypesCommandInput, ListTargetResourceTypesCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/ListTargetResourceTypesCommand";
    import { StartExperimentCommandInput, StartExperimentCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/StartExperimentCommand";
    import { StopExperimentCommandInput, StopExperimentCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/StopExperimentCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/UntagResourceCommand";
    import { UpdateExperimentTemplateCommandInput, UpdateExperimentTemplateCommandOutput } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/commands/UpdateExperimentTemplateCommand";
    export type ServiceInputTypes = CreateExperimentTemplateCommandInput | DeleteExperimentTemplateCommandInput | GetActionCommandInput | GetExperimentCommandInput | GetExperimentTemplateCommandInput | GetTargetResourceTypeCommandInput | ListActionsCommandInput | ListExperimentTemplatesCommandInput | ListExperimentsCommandInput | ListTagsForResourceCommandInput | ListTargetResourceTypesCommandInput | StartExperimentCommandInput | StopExperimentCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateExperimentTemplateCommandInput;
    export type ServiceOutputTypes = CreateExperimentTemplateCommandOutput | DeleteExperimentTemplateCommandOutput | GetActionCommandOutput | GetExperimentCommandOutput | GetExperimentTemplateCommandOutput | GetTargetResourceTypeCommandOutput | ListActionsCommandOutput | ListExperimentTemplatesCommandOutput | ListExperimentsCommandOutput | ListTagsForResourceCommandOutput | ListTargetResourceTypesCommandOutput | StartExperimentCommandOutput | StopExperimentCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateExperimentTemplateCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type FisClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of FisClient class constructor that set the region, credentials and other options.
        */
    export interface FisClientConfig extends FisClientConfigType {
    }
    type FisClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of FisClient class. This is resolved and normalized from the {@link FisClientConfig | constructor configuration interface}.
        */
    export interface FisClientResolvedConfig extends FisClientResolvedConfigType {
    }
    /**
        * <p>Fault Injection Simulator is a managed service that enables you to perform fault injection
        *            experiments on your Amazon Web Services workloads. For more information, see the <a href="https://docs.aws.amazon.com/fis/latest/userguide/">Fault Injection Simulator User Guide</a>.</p>
        */
    export class FisClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, FisClientResolvedConfig> {
            /**
                * The resolved configuration of FisClient class. This is resolved and normalized from the {@link FisClientConfig | constructor configuration interface}.
                */
            readonly config: FisClientResolvedConfig;
            constructor(configuration: FisClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { FisServiceException as __BaseException } from "@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/FisServiceException";
    /**
        * <p>Describes a parameter for an action.</p>
        */
    export interface ActionParameter {
            /**
                * <p>The parameter description.</p>
                */
            description?: string;
            /**
                * <p>Indicates whether the parameter is required.</p>
                */
            required?: boolean;
    }
    export namespace ActionParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionParameter) => any;
    }
    /**
        * <p>Describes a target for an action.</p>
        */
    export interface ActionTarget {
            /**
                * <p>The resource type of the target.</p>
                */
            resourceType?: string;
    }
    export namespace ActionTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionTarget) => any;
    }
    /**
        * <p>Describes an action. For more information, see <a href="https://docs.aws.amazon.com/fis/latest/userguide/fis-actions-reference.html">FIS actions</a>
        *          in the <i>Fault Injection Simulator User Guide</i>.</p>
        */
    export interface Action {
            /**
                * <p>The ID of the action.</p>
                */
            id?: string;
            /**
                * <p>The description for the action.</p>
                */
            description?: string;
            /**
                * <p>The action parameters, if applicable.</p>
                */
            parameters?: Record<string, ActionParameter>;
            /**
                * <p>The supported targets for the action.</p>
                */
            targets?: Record<string, ActionTarget>;
            /**
                * <p>The tags for the action.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace Action {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Action) => any;
    }
    /**
        * <p>Provides a summary of an action.</p>
        */
    export interface ActionSummary {
            /**
                * <p>The ID of the action.</p>
                */
            id?: string;
            /**
                * <p>The description for the action.</p>
                */
            description?: string;
            /**
                * <p>The targets for the action.</p>
                */
            targets?: Record<string, ActionTarget>;
            /**
                * <p>The tags for the action.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ActionSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionSummary) => any;
    }
    /**
        * <p>The request could not be processed because of a conflict.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>Specifies an action for an experiment template.</p>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/fis/latest/userguide/actions.html">Actions</a>
        *          in the <i>Fault Injection Simulator User Guide</i>.</p>
        */
    export interface CreateExperimentTemplateActionInput {
            /**
                * <p>The ID of the action. The format of the action ID is: aws:<i>service-name</i>:<i>action-type</i>.</p>
                */
            actionId: string | undefined;
            /**
                * <p>A description for the action.</p>
                */
            description?: string;
            /**
                * <p>The parameters for the action, if applicable.</p>
                */
            parameters?: Record<string, string>;
            /**
                * <p>The targets for the action.</p>
                */
            targets?: Record<string, string>;
            /**
                * <p>The name of the action that must be completed before the current action starts. Omit this parameter to run the action at the start of the experiment.</p>
                */
            startAfter?: string[];
    }
    export namespace CreateExperimentTemplateActionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateExperimentTemplateActionInput) => any;
    }
    /**
        * <p>Specifies the configuration for experiment logging to Amazon CloudWatch Logs.</p>
        */
    export interface ExperimentTemplateCloudWatchLogsLogConfigurationInput {
            /**
                * <p>The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group.</p>
                */
            logGroupArn: string | undefined;
    }
    export namespace ExperimentTemplateCloudWatchLogsLogConfigurationInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentTemplateCloudWatchLogsLogConfigurationInput) => any;
    }
    /**
        * <p>Specifies the configuration for experiment logging to Amazon S3.</p>
        */
    export interface ExperimentTemplateS3LogConfigurationInput {
            /**
                * <p>The name of the destination bucket.</p>
                */
            bucketName: string | undefined;
            /**
                * <p>The bucket prefix.</p>
                */
            prefix?: string;
    }
    export namespace ExperimentTemplateS3LogConfigurationInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentTemplateS3LogConfigurationInput) => any;
    }
    /**
        * <p>Specifies the configuration for experiment logging.</p>
        */
    export interface CreateExperimentTemplateLogConfigurationInput {
            /**
                * <p>The configuration for experiment logging to Amazon CloudWatch Logs.</p>
                */
            cloudWatchLogsConfiguration?: ExperimentTemplateCloudWatchLogsLogConfigurationInput;
            /**
                * <p>The configuration for experiment logging to Amazon S3.</p>
                */
            s3Configuration?: ExperimentTemplateS3LogConfigurationInput;
            /**
                * <p>The schema version.</p>
                */
            logSchemaVersion: number | undefined;
    }
    export namespace CreateExperimentTemplateLogConfigurationInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateExperimentTemplateLogConfigurationInput) => any;
    }
    /**
        * <p>Specifies a stop condition for an experiment template.</p>
        */
    export interface CreateExperimentTemplateStopConditionInput {
            /**
                * <p>The source for the stop condition. Specify <code>aws:cloudwatch:alarm</code> if the stop
                *          condition is defined by a CloudWatch alarm. Specify <code>none</code> if there is no stop
                *          condition.</p>
                */
            source: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the CloudWatch alarm. This is required if the source is
                *          a CloudWatch alarm.</p>
                */
            value?: string;
    }
    export namespace CreateExperimentTemplateStopConditionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateExperimentTemplateStopConditionInput) => any;
    }
    /**
        * <p>Specifies a filter used for the target resource input in an experiment template.</p>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/fis/latest/userguide/targets.html#target-filters">Resource filters</a>
        *          in the <i>Fault Injection Simulator User Guide</i>.</p>
        */
    export interface ExperimentTemplateTargetInputFilter {
            /**
                * <p>The attribute path for the filter.</p>
                */
            path: string | undefined;
            /**
                * <p>The attribute values for the filter.</p>
                */
            values: string[] | undefined;
    }
    export namespace ExperimentTemplateTargetInputFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentTemplateTargetInputFilter) => any;
    }
    /**
        * <p>Specifies a target for an experiment. You must specify at least one Amazon Resource Name (ARN) or
        *          at least one resource tag. You cannot specify both ARNs and tags.</p>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/fis/latest/userguide/targets.html">Targets</a>
        *          in the <i>Fault Injection Simulator User Guide</i>.</p>
        */
    export interface CreateExperimentTemplateTargetInput {
            /**
                * <p>The resource type. The resource type must be supported for the specified action.</p>
                */
            resourceType: string | undefined;
            /**
                * <p>The Amazon Resource Names (ARNs) of the resources.</p>
                */
            resourceArns?: string[];
            /**
                * <p>The tags for the target resources.</p>
                */
            resourceTags?: Record<string, string>;
            /**
                * <p>The filters to apply to identify target resources using specific attributes.</p>
                */
            filters?: ExperimentTemplateTargetInputFilter[];
            /**
                * <p>Scopes the identified resources to a specific count of the resources at random, or a percentage of the resources. All identified resources are included in the target.</p>
                *          <ul>
                *             <li>
                *                <p>ALL - Run the action on all identified targets. This is the default.</p>
                *             </li>
                *             <li>
                *                <p>COUNT(n) - Run the action on the specified number of targets, chosen from the identified targets at random.
                *                 For example, COUNT(1) selects one of the targets.</p>
                *             </li>
                *             <li>
                *                <p>PERCENT(n) - Run the action on the specified percentage of targets, chosen from the identified targets
                *                at random. For example, PERCENT(25) selects 25% of the targets.</p>
                *             </li>
                *          </ul>
                */
            selectionMode: string | undefined;
            /**
                * <p>The resource type parameters.</p>
                */
            parameters?: Record<string, string>;
    }
    export namespace CreateExperimentTemplateTargetInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateExperimentTemplateTargetInput) => any;
    }
    export interface CreateExperimentTemplateRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
                */
            clientToken?: string;
            /**
                * <p>A description for the experiment template.</p>
                */
            description: string | undefined;
            /**
                * <p>The stop conditions.</p>
                */
            stopConditions: CreateExperimentTemplateStopConditionInput[] | undefined;
            /**
                * <p>The targets for the experiment.</p>
                */
            targets?: Record<string, CreateExperimentTemplateTargetInput>;
            /**
                * <p>The actions for the experiment.</p>
                */
            actions: Record<string, CreateExperimentTemplateActionInput> | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
                */
            roleArn: string | undefined;
            /**
                * <p>The tags to apply to the experiment template.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The configuration for experiment logging.</p>
                */
            logConfiguration?: CreateExperimentTemplateLogConfigurationInput;
    }
    export namespace CreateExperimentTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateExperimentTemplateRequest) => any;
    }
    /**
        * <p>Describes an action for an experiment template.</p>
        */
    export interface ExperimentTemplateAction {
            /**
                * <p>The ID of the action.</p>
                */
            actionId?: string;
            /**
                * <p>A description for the action.</p>
                */
            description?: string;
            /**
                * <p>The parameters for the action.</p>
                */
            parameters?: Record<string, string>;
            /**
                * <p>The targets for the action.</p>
                */
            targets?: Record<string, string>;
            /**
                * <p>The name of the action that must be completed before the current action starts.</p>
                */
            startAfter?: string[];
    }
    export namespace ExperimentTemplateAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentTemplateAction) => any;
    }
    /**
        * <p>Describes the configuration for experiment logging to Amazon CloudWatch Logs.</p>
        */
    export interface ExperimentTemplateCloudWatchLogsLogConfiguration {
            /**
                * <p>The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group.</p>
                */
            logGroupArn?: string;
    }
    export namespace ExperimentTemplateCloudWatchLogsLogConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentTemplateCloudWatchLogsLogConfiguration) => any;
    }
    /**
        * <p>Describes the configuration for experiment logging to Amazon S3.</p>
        */
    export interface ExperimentTemplateS3LogConfiguration {
            /**
                * <p>The name of the destination bucket.</p>
                */
            bucketName?: string;
            /**
                * <p>The bucket prefix.</p>
                */
            prefix?: string;
    }
    export namespace ExperimentTemplateS3LogConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentTemplateS3LogConfiguration) => any;
    }
    /**
        * <p>Describes the configuration for experiment logging.</p>
        */
    export interface ExperimentTemplateLogConfiguration {
            /**
                * <p>The configuration for experiment logging to Amazon CloudWatch Logs.</p>
                */
            cloudWatchLogsConfiguration?: ExperimentTemplateCloudWatchLogsLogConfiguration;
            /**
                * <p>The configuration for experiment logging to Amazon S3.</p>
                */
            s3Configuration?: ExperimentTemplateS3LogConfiguration;
            /**
                * <p>The schema version.</p>
                */
            logSchemaVersion?: number;
    }
    export namespace ExperimentTemplateLogConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentTemplateLogConfiguration) => any;
    }
    /**
        * <p>Describes a stop condition for an experiment template.</p>
        */
    export interface ExperimentTemplateStopCondition {
            /**
                * <p>The source for the stop condition.</p>
                */
            source?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the CloudWatch alarm, if applicable.</p>
                */
            value?: string;
    }
    export namespace ExperimentTemplateStopCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentTemplateStopCondition) => any;
    }
    /**
        * <p>Describes a filter used for the target resources in an experiment template.</p>
        */
    export interface ExperimentTemplateTargetFilter {
            /**
                * <p>The attribute path for the filter.</p>
                */
            path?: string;
            /**
                * <p>The attribute values for the filter.</p>
                */
            values?: string[];
    }
    export namespace ExperimentTemplateTargetFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentTemplateTargetFilter) => any;
    }
    /**
        * <p>Describes a target for an experiment template.</p>
        */
    export interface ExperimentTemplateTarget {
            /**
                * <p>The resource type.</p>
                */
            resourceType?: string;
            /**
                * <p>The Amazon Resource Names (ARNs) of the targets.</p>
                */
            resourceArns?: string[];
            /**
                * <p>The tags for the target resources.</p>
                */
            resourceTags?: Record<string, string>;
            /**
                * <p>The filters to apply to identify target resources using specific attributes.</p>
                */
            filters?: ExperimentTemplateTargetFilter[];
            /**
                * <p>Scopes the identified resources to a specific count or percentage.</p>
                */
            selectionMode?: string;
            /**
                * <p>The resource type parameters.</p>
                */
            parameters?: Record<string, string>;
    }
    export namespace ExperimentTemplateTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentTemplateTarget) => any;
    }
    /**
        * <p>Describes an experiment template.</p>
        */
    export interface ExperimentTemplate {
            /**
                * <p>The ID of the experiment template.</p>
                */
            id?: string;
            /**
                * <p>The description for the experiment template.</p>
                */
            description?: string;
            /**
                * <p>The targets for the experiment.</p>
                */
            targets?: Record<string, ExperimentTemplateTarget>;
            /**
                * <p>The actions for the experiment.</p>
                */
            actions?: Record<string, ExperimentTemplateAction>;
            /**
                * <p>The stop conditions for the experiment.</p>
                */
            stopConditions?: ExperimentTemplateStopCondition[];
            /**
                * <p>The time the experiment template was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The time the experiment template was last updated.</p>
                */
            lastUpdateTime?: Date;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role.</p>
                */
            roleArn?: string;
            /**
                * <p>The tags for the experiment template.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The configuration for experiment logging.</p>
                */
            logConfiguration?: ExperimentTemplateLogConfiguration;
    }
    export namespace ExperimentTemplate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentTemplate) => any;
    }
    export interface CreateExperimentTemplateResponse {
            /**
                * <p>Information about the experiment template.</p>
                */
            experimentTemplate?: ExperimentTemplate;
    }
    export namespace CreateExperimentTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateExperimentTemplateResponse) => any;
    }
    /**
        * <p>The specified resource cannot be found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>You have exceeded your service quota.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    /**
        * <p>The specified input is not valid, or fails to satisfy the constraints for the request.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface DeleteExperimentTemplateRequest {
            /**
                * <p>The ID of the experiment template.</p>
                */
            id: string | undefined;
    }
    export namespace DeleteExperimentTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteExperimentTemplateRequest) => any;
    }
    export interface DeleteExperimentTemplateResponse {
            /**
                * <p>Information about the experiment template.</p>
                */
            experimentTemplate?: ExperimentTemplate;
    }
    export namespace DeleteExperimentTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteExperimentTemplateResponse) => any;
    }
    export enum ExperimentActionStatus {
            cancelled = "cancelled",
            completed = "completed",
            failed = "failed",
            initiating = "initiating",
            pending = "pending",
            running = "running",
            stopped = "stopped",
            stopping = "stopping"
    }
    /**
        * <p>Describes the state of an action.</p>
        */
    export interface ExperimentActionState {
            /**
                * <p>The state of the action.</p>
                */
            status?: ExperimentActionStatus | string;
            /**
                * <p>The reason for the state.</p>
                */
            reason?: string;
    }
    export namespace ExperimentActionState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentActionState) => any;
    }
    /**
        * <p>Describes the action for an experiment.</p>
        */
    export interface ExperimentAction {
            /**
                * <p>The ID of the action.</p>
                */
            actionId?: string;
            /**
                * <p>The description for the action.</p>
                */
            description?: string;
            /**
                * <p>The parameters for the action.</p>
                */
            parameters?: Record<string, string>;
            /**
                * <p>The targets for the action.</p>
                */
            targets?: Record<string, string>;
            /**
                * <p>The name of the action that must be completed before this action starts.</p>
                */
            startAfter?: string[];
            /**
                * <p>The state of the action.</p>
                */
            state?: ExperimentActionState;
            /**
                * <p>The time that the action started.</p>
                */
            startTime?: Date;
            /**
                * <p>The time that the action ended.</p>
                */
            endTime?: Date;
    }
    export namespace ExperimentAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentAction) => any;
    }
    /**
        * <p>Describes the configuration for experiment logging to Amazon CloudWatch Logs.</p>
        */
    export interface ExperimentCloudWatchLogsLogConfiguration {
            /**
                * <p>The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group.</p>
                */
            logGroupArn?: string;
    }
    export namespace ExperimentCloudWatchLogsLogConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentCloudWatchLogsLogConfiguration) => any;
    }
    /**
        * <p>Describes the configuration for experiment logging to Amazon S3.</p>
        */
    export interface ExperimentS3LogConfiguration {
            /**
                * <p>The name of the destination bucket.</p>
                */
            bucketName?: string;
            /**
                * <p>The bucket prefix.</p>
                */
            prefix?: string;
    }
    export namespace ExperimentS3LogConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentS3LogConfiguration) => any;
    }
    /**
        * <p>Describes the configuration for experiment logging.</p>
        */
    export interface ExperimentLogConfiguration {
            /**
                * <p>The configuration for experiment logging to Amazon CloudWatch Logs.</p>
                */
            cloudWatchLogsConfiguration?: ExperimentCloudWatchLogsLogConfiguration;
            /**
                * <p>The configuration for experiment logging to Amazon S3.</p>
                */
            s3Configuration?: ExperimentS3LogConfiguration;
            /**
                * <p>The schema version.</p>
                */
            logSchemaVersion?: number;
    }
    export namespace ExperimentLogConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentLogConfiguration) => any;
    }
    export enum ExperimentStatus {
            completed = "completed",
            failed = "failed",
            initiating = "initiating",
            pending = "pending",
            running = "running",
            stopped = "stopped",
            stopping = "stopping"
    }
    /**
        * <p>Describes the state of an experiment.</p>
        */
    export interface ExperimentState {
            /**
                * <p>The state of the experiment.</p>
                */
            status?: ExperimentStatus | string;
            /**
                * <p>The reason for the state.</p>
                */
            reason?: string;
    }
    export namespace ExperimentState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentState) => any;
    }
    /**
        * <p>Describes the stop condition for an experiment.</p>
        */
    export interface ExperimentStopCondition {
            /**
                * <p>The source for the stop condition.</p>
                */
            source?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the CloudWatch alarm, if applicable.</p>
                */
            value?: string;
    }
    export namespace ExperimentStopCondition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentStopCondition) => any;
    }
    /**
        * <p>Describes a filter used for the target resources in an experiment.</p>
        */
    export interface ExperimentTargetFilter {
            /**
                * <p>The attribute path for the filter.</p>
                */
            path?: string;
            /**
                * <p>The attribute values for the filter.</p>
                */
            values?: string[];
    }
    export namespace ExperimentTargetFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentTargetFilter) => any;
    }
    /**
        * <p>Describes a target for an experiment.</p>
        */
    export interface ExperimentTarget {
            /**
                * <p>The resource type.</p>
                */
            resourceType?: string;
            /**
                * <p>The Amazon Resource Names (ARNs) of the resources.</p>
                */
            resourceArns?: string[];
            /**
                * <p>The tags for the target resources.</p>
                */
            resourceTags?: Record<string, string>;
            /**
                * <p>The filters to apply to identify target resources using specific attributes.</p>
                */
            filters?: ExperimentTargetFilter[];
            /**
                * <p>Scopes the identified resources to a specific count or percentage.</p>
                */
            selectionMode?: string;
            /**
                * <p>The resource type parameters.</p>
                */
            parameters?: Record<string, string>;
    }
    export namespace ExperimentTarget {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentTarget) => any;
    }
    /**
        * <p>Describes an experiment.</p>
        */
    export interface Experiment {
            /**
                * <p>The ID of the experiment.</p>
                */
            id?: string;
            /**
                * <p>The ID of the experiment template.</p>
                */
            experimentTemplateId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
                */
            roleArn?: string;
            /**
                * <p>The state of the experiment.</p>
                */
            state?: ExperimentState;
            /**
                * <p>The targets for the experiment.</p>
                */
            targets?: Record<string, ExperimentTarget>;
            /**
                * <p>The actions for the experiment.</p>
                */
            actions?: Record<string, ExperimentAction>;
            /**
                * <p>The stop conditions for the experiment.</p>
                */
            stopConditions?: ExperimentStopCondition[];
            /**
                * <p>The time that the experiment was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The time that the experiment started.</p>
                */
            startTime?: Date;
            /**
                * <p>The time that the experiment ended.</p>
                */
            endTime?: Date;
            /**
                * <p>The tags for the experiment.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>The configuration for experiment logging.</p>
                */
            logConfiguration?: ExperimentLogConfiguration;
    }
    export namespace Experiment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Experiment) => any;
    }
    /**
        * <p>Provides a summary of an experiment.</p>
        */
    export interface ExperimentSummary {
            /**
                * <p>The ID of the experiment.</p>
                */
            id?: string;
            /**
                * <p>The ID of the experiment template.</p>
                */
            experimentTemplateId?: string;
            /**
                * <p>The state of the experiment.</p>
                */
            state?: ExperimentState;
            /**
                * <p>The time that the experiment was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The tags for the experiment.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ExperimentSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentSummary) => any;
    }
    /**
        * <p>Provides a summary of an experiment template.</p>
        */
    export interface ExperimentTemplateSummary {
            /**
                * <p>The ID of the experiment template.</p>
                */
            id?: string;
            /**
                * <p>The description of the experiment template.</p>
                */
            description?: string;
            /**
                * <p>The time that the experiment template was created.</p>
                */
            creationTime?: Date;
            /**
                * <p>The time that the experiment template was last updated.</p>
                */
            lastUpdateTime?: Date;
            /**
                * <p>The tags for the experiment template.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ExperimentTemplateSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ExperimentTemplateSummary) => any;
    }
    export interface GetActionRequest {
            /**
                * <p>The ID of the action.</p>
                */
            id: string | undefined;
    }
    export namespace GetActionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetActionRequest) => any;
    }
    export interface GetActionResponse {
            /**
                * <p>Information about the action.</p>
                */
            action?: Action;
    }
    export namespace GetActionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetActionResponse) => any;
    }
    export interface GetExperimentRequest {
            /**
                * <p>The ID of the experiment.</p>
                */
            id: string | undefined;
    }
    export namespace GetExperimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExperimentRequest) => any;
    }
    export interface GetExperimentResponse {
            /**
                * <p>Information about the experiment.</p>
                */
            experiment?: Experiment;
    }
    export namespace GetExperimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExperimentResponse) => any;
    }
    export interface GetExperimentTemplateRequest {
            /**
                * <p>The ID of the experiment template.</p>
                */
            id: string | undefined;
    }
    export namespace GetExperimentTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExperimentTemplateRequest) => any;
    }
    export interface GetExperimentTemplateResponse {
            /**
                * <p>Information about the experiment template.</p>
                */
            experimentTemplate?: ExperimentTemplate;
    }
    export namespace GetExperimentTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetExperimentTemplateResponse) => any;
    }
    export interface GetTargetResourceTypeRequest {
            /**
                * <p>The resource type.</p>
                */
            resourceType: string | undefined;
    }
    export namespace GetTargetResourceTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTargetResourceTypeRequest) => any;
    }
    /**
        * <p>Describes the parameters for a resource type. Use parameters to determine which tasks are
        *           identified during target resolution.</p>
        */
    export interface TargetResourceTypeParameter {
            /**
                * <p>A description of the parameter.</p>
                */
            description?: string;
            /**
                * <p>Indicates whether the parameter is required.</p>
                */
            required?: boolean;
    }
    export namespace TargetResourceTypeParameter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetResourceTypeParameter) => any;
    }
    /**
        * <p>Describes a resource type.</p>
        */
    export interface TargetResourceType {
            /**
                * <p>The resource type.</p>
                */
            resourceType?: string;
            /**
                * <p>A description of the resource type.</p>
                */
            description?: string;
            /**
                * <p>The parameters for the resource type.</p>
                */
            parameters?: Record<string, TargetResourceTypeParameter>;
    }
    export namespace TargetResourceType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetResourceType) => any;
    }
    export interface GetTargetResourceTypeResponse {
            /**
                * <p>Information about the resource type.</p>
                */
            targetResourceType?: TargetResourceType;
    }
    export namespace GetTargetResourceTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTargetResourceTypeResponse) => any;
    }
    export interface ListActionsRequest {
            /**
                * <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
                */
            maxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListActionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListActionsRequest) => any;
    }
    export interface ListActionsResponse {
            /**
                * <p>The actions.</p>
                */
            actions?: ActionSummary[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
                */
            nextToken?: string;
    }
    export namespace ListActionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListActionsResponse) => any;
    }
    export interface ListExperimentsRequest {
            /**
                * <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
                */
            maxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListExperimentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExperimentsRequest) => any;
    }
    export interface ListExperimentsResponse {
            /**
                * <p>The experiments.</p>
                */
            experiments?: ExperimentSummary[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
                */
            nextToken?: string;
    }
    export namespace ListExperimentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExperimentsResponse) => any;
    }
    export interface ListExperimentTemplatesRequest {
            /**
                * <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
                */
            maxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListExperimentTemplatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExperimentTemplatesRequest) => any;
    }
    export interface ListExperimentTemplatesResponse {
            /**
                * <p>The experiment templates.</p>
                */
            experimentTemplates?: ExperimentTemplateSummary[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
                */
            nextToken?: string;
    }
    export namespace ListExperimentTemplatesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListExperimentTemplatesResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tags for the resource.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListTargetResourceTypesRequest {
            /**
                * <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
                */
            maxResults?: number;
            /**
                * <p>The token for the next page of results.</p>
                */
            nextToken?: string;
    }
    export namespace ListTargetResourceTypesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTargetResourceTypesRequest) => any;
    }
    /**
        * <p>Describes a resource type.</p>
        */
    export interface TargetResourceTypeSummary {
            /**
                * <p>The resource type.</p>
                */
            resourceType?: string;
            /**
                * <p>A description of the resource type.</p>
                */
            description?: string;
    }
    export namespace TargetResourceTypeSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TargetResourceTypeSummary) => any;
    }
    export interface ListTargetResourceTypesResponse {
            /**
                * <p>The target resource types.</p>
                */
            targetResourceTypes?: TargetResourceTypeSummary[];
            /**
                * <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
                */
            nextToken?: string;
    }
    export namespace ListTargetResourceTypesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTargetResourceTypesResponse) => any;
    }
    export interface StartExperimentRequest {
            /**
                * <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
                */
            clientToken?: string;
            /**
                * <p>The ID of the experiment template.</p>
                */
            experimentTemplateId: string | undefined;
            /**
                * <p>The tags to apply to the experiment.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace StartExperimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartExperimentRequest) => any;
    }
    export interface StartExperimentResponse {
            /**
                * <p>Information about the experiment.</p>
                */
            experiment?: Experiment;
    }
    export namespace StartExperimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartExperimentResponse) => any;
    }
    export interface StopExperimentRequest {
            /**
                * <p>The ID of the experiment.</p>
                */
            id: string | undefined;
    }
    export namespace StopExperimentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopExperimentRequest) => any;
    }
    export interface StopExperimentResponse {
            /**
                * <p>Information about the experiment.</p>
                */
            experiment?: Experiment;
    }
    export namespace StopExperimentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StopExperimentResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The tags for the resource.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>The tag keys to remove.</p>
                */
            tagKeys?: string[];
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    /**
        * <p>Specifies an action for an experiment template.</p>
        */
    export interface UpdateExperimentTemplateActionInputItem {
            /**
                * <p>The ID of the action.</p>
                */
            actionId?: string;
            /**
                * <p>A description for the action.</p>
                */
            description?: string;
            /**
                * <p>The parameters for the action, if applicable.</p>
                */
            parameters?: Record<string, string>;
            /**
                * <p>The targets for the action.</p>
                */
            targets?: Record<string, string>;
            /**
                * <p>The name of the action that must be completed before the current action starts. Omit this parameter to run the action at the start of the experiment.</p>
                */
            startAfter?: string[];
    }
    export namespace UpdateExperimentTemplateActionInputItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExperimentTemplateActionInputItem) => any;
    }
    /**
        * <p>Specifies the configuration for experiment logging.</p>
        */
    export interface UpdateExperimentTemplateLogConfigurationInput {
            /**
                * <p>The configuration for experiment logging to Amazon CloudWatch Logs.</p>
                */
            cloudWatchLogsConfiguration?: ExperimentTemplateCloudWatchLogsLogConfigurationInput;
            /**
                * <p>The configuration for experiment logging to Amazon S3.</p>
                */
            s3Configuration?: ExperimentTemplateS3LogConfigurationInput;
            /**
                * <p>The schema version.</p>
                */
            logSchemaVersion?: number;
    }
    export namespace UpdateExperimentTemplateLogConfigurationInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExperimentTemplateLogConfigurationInput) => any;
    }
    /**
        * <p>Specifies a stop condition for an experiment. You can define a stop condition as a CloudWatch alarm.</p>
        */
    export interface UpdateExperimentTemplateStopConditionInput {
            /**
                * <p>The source for the stop condition. Specify <code>aws:cloudwatch:alarm</code> if the stop
                *          condition is defined by a CloudWatch alarm. Specify <code>none</code> if there is no stop
                *          condition.</p>
                */
            source: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the CloudWatch alarm.</p>
                */
            value?: string;
    }
    export namespace UpdateExperimentTemplateStopConditionInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExperimentTemplateStopConditionInput) => any;
    }
    /**
        * <p>Specifies a target for an experiment. You must specify at least one Amazon Resource Name (ARN) or at least one resource tag. You cannot specify both.</p>
        */
    export interface UpdateExperimentTemplateTargetInput {
            /**
                * <p>The resource type. The resource type must be supported for the specified action.</p>
                */
            resourceType: string | undefined;
            /**
                * <p>The Amazon Resource Names (ARNs) of the targets.</p>
                */
            resourceArns?: string[];
            /**
                * <p>The tags for the target resources.</p>
                */
            resourceTags?: Record<string, string>;
            /**
                * <p>The filters to apply to identify target resources using specific attributes.</p>
                */
            filters?: ExperimentTemplateTargetInputFilter[];
            /**
                * <p>Scopes the identified resources to a specific count or percentage.</p>
                */
            selectionMode: string | undefined;
            /**
                * <p>The resource type parameters.</p>
                */
            parameters?: Record<string, string>;
    }
    export namespace UpdateExperimentTemplateTargetInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExperimentTemplateTargetInput) => any;
    }
    export interface UpdateExperimentTemplateRequest {
            /**
                * <p>The ID of the experiment template.</p>
                */
            id: string | undefined;
            /**
                * <p>A description for the template.</p>
                */
            description?: string;
            /**
                * <p>The stop conditions for the experiment.</p>
                */
            stopConditions?: UpdateExperimentTemplateStopConditionInput[];
            /**
                * <p>The targets for the experiment.</p>
                */
            targets?: Record<string, UpdateExperimentTemplateTargetInput>;
            /**
                * <p>The actions for the experiment.</p>
                */
            actions?: Record<string, UpdateExperimentTemplateActionInputItem>;
            /**
                * <p>The Amazon Resource Name (ARN) of an IAM role that grants the FIS service permission to perform service actions on your behalf.</p>
                */
            roleArn?: string;
            /**
                * <p>The configuration for experiment logging.</p>
                */
            logConfiguration?: UpdateExperimentTemplateLogConfigurationInput;
    }
    export namespace UpdateExperimentTemplateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExperimentTemplateRequest) => any;
    }
    export interface UpdateExperimentTemplateResponse {
            /**
                * <p>Information about the experiment template.</p>
                */
            experimentTemplate?: ExperimentTemplate;
    }
    export namespace UpdateExperimentTemplateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateExperimentTemplateResponse) => any;
    }
}

declare module '@aws-sdk/client-fis/node_modules/@aws-sdk/client-fis/dist-types/models/FisServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Fis service.
        */
    export class FisServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

