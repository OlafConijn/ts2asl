// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-kafka' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { BatchAssociateScramSecretCommandInput, BatchAssociateScramSecretCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/BatchAssociateScramSecretCommand";
    import { BatchDisassociateScramSecretCommandInput, BatchDisassociateScramSecretCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/BatchDisassociateScramSecretCommand";
    import { CreateClusterCommandInput, CreateClusterCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/CreateClusterCommand";
    import { CreateClusterV2CommandInput, CreateClusterV2CommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/CreateClusterV2Command";
    import { CreateConfigurationCommandInput, CreateConfigurationCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/CreateConfigurationCommand";
    import { DeleteClusterCommandInput, DeleteClusterCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DeleteClusterCommand";
    import { DeleteConfigurationCommandInput, DeleteConfigurationCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DeleteConfigurationCommand";
    import { DescribeClusterCommandInput, DescribeClusterCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeClusterCommand";
    import { DescribeClusterOperationCommandInput, DescribeClusterOperationCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeClusterOperationCommand";
    import { DescribeClusterV2CommandInput, DescribeClusterV2CommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeClusterV2Command";
    import { DescribeConfigurationCommandInput, DescribeConfigurationCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeConfigurationCommand";
    import { DescribeConfigurationRevisionCommandInput, DescribeConfigurationRevisionCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeConfigurationRevisionCommand";
    import { GetBootstrapBrokersCommandInput, GetBootstrapBrokersCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/GetBootstrapBrokersCommand";
    import { GetCompatibleKafkaVersionsCommandInput, GetCompatibleKafkaVersionsCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/GetCompatibleKafkaVersionsCommand";
    import { ListClusterOperationsCommandInput, ListClusterOperationsCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListClusterOperationsCommand";
    import { ListClustersCommandInput, ListClustersCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListClustersCommand";
    import { ListClustersV2CommandInput, ListClustersV2CommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListClustersV2Command";
    import { ListConfigurationRevisionsCommandInput, ListConfigurationRevisionsCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListConfigurationRevisionsCommand";
    import { ListConfigurationsCommandInput, ListConfigurationsCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListConfigurationsCommand";
    import { ListKafkaVersionsCommandInput, ListKafkaVersionsCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListKafkaVersionsCommand";
    import { ListNodesCommandInput, ListNodesCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListNodesCommand";
    import { ListScramSecretsCommandInput, ListScramSecretsCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListScramSecretsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListTagsForResourceCommand";
    import { RebootBrokerCommandInput, RebootBrokerCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/RebootBrokerCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UntagResourceCommand";
    import { UpdateBrokerCountCommandInput, UpdateBrokerCountCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateBrokerCountCommand";
    import { UpdateBrokerStorageCommandInput, UpdateBrokerStorageCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateBrokerStorageCommand";
    import { UpdateBrokerTypeCommandInput, UpdateBrokerTypeCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateBrokerTypeCommand";
    import { UpdateClusterConfigurationCommandInput, UpdateClusterConfigurationCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateClusterConfigurationCommand";
    import { UpdateClusterKafkaVersionCommandInput, UpdateClusterKafkaVersionCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateClusterKafkaVersionCommand";
    import { UpdateConfigurationCommandInput, UpdateConfigurationCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateConfigurationCommand";
    import { UpdateConnectivityCommandInput, UpdateConnectivityCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateConnectivityCommand";
    import { UpdateMonitoringCommandInput, UpdateMonitoringCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateMonitoringCommand";
    import { UpdateSecurityCommandInput, UpdateSecurityCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateSecurityCommand";
    import { KafkaClient } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    /**
        * <p>The operations for managing an Amazon MSK cluster.</p>
        */
    export class Kafka extends KafkaClient {
            /**
                * <p>Associates one or more Scram Secrets with an Amazon MSK cluster.</p>
                */
            batchAssociateScramSecret(args: BatchAssociateScramSecretCommandInput, options?: __HttpHandlerOptions): Promise<BatchAssociateScramSecretCommandOutput>;
            batchAssociateScramSecret(args: BatchAssociateScramSecretCommandInput, cb: (err: any, data?: BatchAssociateScramSecretCommandOutput) => void): void;
            batchAssociateScramSecret(args: BatchAssociateScramSecretCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchAssociateScramSecretCommandOutput) => void): void;
            /**
                * <p>Disassociates one or more Scram Secrets from an Amazon MSK cluster.</p>
                */
            batchDisassociateScramSecret(args: BatchDisassociateScramSecretCommandInput, options?: __HttpHandlerOptions): Promise<BatchDisassociateScramSecretCommandOutput>;
            batchDisassociateScramSecret(args: BatchDisassociateScramSecretCommandInput, cb: (err: any, data?: BatchDisassociateScramSecretCommandOutput) => void): void;
            batchDisassociateScramSecret(args: BatchDisassociateScramSecretCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDisassociateScramSecretCommandOutput) => void): void;
            /**
                * <p>Creates a new MSK cluster.</p>
                */
            createCluster(args: CreateClusterCommandInput, options?: __HttpHandlerOptions): Promise<CreateClusterCommandOutput>;
            createCluster(args: CreateClusterCommandInput, cb: (err: any, data?: CreateClusterCommandOutput) => void): void;
            createCluster(args: CreateClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateClusterCommandOutput) => void): void;
            /**
                * <p>Creates a new MSK cluster.</p>
                */
            createClusterV2(args: CreateClusterV2CommandInput, options?: __HttpHandlerOptions): Promise<CreateClusterV2CommandOutput>;
            createClusterV2(args: CreateClusterV2CommandInput, cb: (err: any, data?: CreateClusterV2CommandOutput) => void): void;
            createClusterV2(args: CreateClusterV2CommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateClusterV2CommandOutput) => void): void;
            /**
                * <p>Creates a new MSK configuration.</p>
                */
            createConfiguration(args: CreateConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<CreateConfigurationCommandOutput>;
            createConfiguration(args: CreateConfigurationCommandInput, cb: (err: any, data?: CreateConfigurationCommandOutput) => void): void;
            createConfiguration(args: CreateConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateConfigurationCommandOutput) => void): void;
            /**
                * <p>Deletes the MSK cluster specified by the Amazon Resource Name (ARN) in the request.</p>
                */
            deleteCluster(args: DeleteClusterCommandInput, options?: __HttpHandlerOptions): Promise<DeleteClusterCommandOutput>;
            deleteCluster(args: DeleteClusterCommandInput, cb: (err: any, data?: DeleteClusterCommandOutput) => void): void;
            deleteCluster(args: DeleteClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteClusterCommandOutput) => void): void;
            /**
                * <p>Deletes an MSK Configuration.</p>
                */
            deleteConfiguration(args: DeleteConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DeleteConfigurationCommandOutput>;
            deleteConfiguration(args: DeleteConfigurationCommandInput, cb: (err: any, data?: DeleteConfigurationCommandOutput) => void): void;
            deleteConfiguration(args: DeleteConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteConfigurationCommandOutput) => void): void;
            /**
                * <p>Returns a description of the MSK cluster whose Amazon Resource Name (ARN) is specified in the request.</p>
                */
            describeCluster(args: DescribeClusterCommandInput, options?: __HttpHandlerOptions): Promise<DescribeClusterCommandOutput>;
            describeCluster(args: DescribeClusterCommandInput, cb: (err: any, data?: DescribeClusterCommandOutput) => void): void;
            describeCluster(args: DescribeClusterCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeClusterCommandOutput) => void): void;
            /**
                * <p>Returns a description of the cluster operation specified by the ARN.</p>
                */
            describeClusterOperation(args: DescribeClusterOperationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeClusterOperationCommandOutput>;
            describeClusterOperation(args: DescribeClusterOperationCommandInput, cb: (err: any, data?: DescribeClusterOperationCommandOutput) => void): void;
            describeClusterOperation(args: DescribeClusterOperationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeClusterOperationCommandOutput) => void): void;
            /**
                * <p>Returns a description of the MSK cluster whose Amazon Resource Name (ARN) is specified in the request.</p>
                */
            describeClusterV2(args: DescribeClusterV2CommandInput, options?: __HttpHandlerOptions): Promise<DescribeClusterV2CommandOutput>;
            describeClusterV2(args: DescribeClusterV2CommandInput, cb: (err: any, data?: DescribeClusterV2CommandOutput) => void): void;
            describeClusterV2(args: DescribeClusterV2CommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeClusterV2CommandOutput) => void): void;
            /**
                * <p>Returns a description of this MSK configuration.</p>
                */
            describeConfiguration(args: DescribeConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConfigurationCommandOutput>;
            describeConfiguration(args: DescribeConfigurationCommandInput, cb: (err: any, data?: DescribeConfigurationCommandOutput) => void): void;
            describeConfiguration(args: DescribeConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConfigurationCommandOutput) => void): void;
            /**
                * <p>Returns a description of this revision of the configuration.</p>
                */
            describeConfigurationRevision(args: DescribeConfigurationRevisionCommandInput, options?: __HttpHandlerOptions): Promise<DescribeConfigurationRevisionCommandOutput>;
            describeConfigurationRevision(args: DescribeConfigurationRevisionCommandInput, cb: (err: any, data?: DescribeConfigurationRevisionCommandOutput) => void): void;
            describeConfigurationRevision(args: DescribeConfigurationRevisionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeConfigurationRevisionCommandOutput) => void): void;
            /**
                * <p>A list of brokers that a client application can use to bootstrap.</p>
                */
            getBootstrapBrokers(args: GetBootstrapBrokersCommandInput, options?: __HttpHandlerOptions): Promise<GetBootstrapBrokersCommandOutput>;
            getBootstrapBrokers(args: GetBootstrapBrokersCommandInput, cb: (err: any, data?: GetBootstrapBrokersCommandOutput) => void): void;
            getBootstrapBrokers(args: GetBootstrapBrokersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetBootstrapBrokersCommandOutput) => void): void;
            /**
                * <p>Gets the Apache Kafka versions to which you can update the MSK cluster.</p>
                */
            getCompatibleKafkaVersions(args: GetCompatibleKafkaVersionsCommandInput, options?: __HttpHandlerOptions): Promise<GetCompatibleKafkaVersionsCommandOutput>;
            getCompatibleKafkaVersions(args: GetCompatibleKafkaVersionsCommandInput, cb: (err: any, data?: GetCompatibleKafkaVersionsCommandOutput) => void): void;
            getCompatibleKafkaVersions(args: GetCompatibleKafkaVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCompatibleKafkaVersionsCommandOutput) => void): void;
            /**
                * <p>Returns a list of all the operations that have been performed on the specified MSK cluster.</p>
                */
            listClusterOperations(args: ListClusterOperationsCommandInput, options?: __HttpHandlerOptions): Promise<ListClusterOperationsCommandOutput>;
            listClusterOperations(args: ListClusterOperationsCommandInput, cb: (err: any, data?: ListClusterOperationsCommandOutput) => void): void;
            listClusterOperations(args: ListClusterOperationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListClusterOperationsCommandOutput) => void): void;
            /**
                * <p>Returns a list of all the MSK clusters in the current Region.</p>
                */
            listClusters(args: ListClustersCommandInput, options?: __HttpHandlerOptions): Promise<ListClustersCommandOutput>;
            listClusters(args: ListClustersCommandInput, cb: (err: any, data?: ListClustersCommandOutput) => void): void;
            listClusters(args: ListClustersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListClustersCommandOutput) => void): void;
            /**
                * <p>Returns a list of all the MSK clusters in the current Region.</p>
                */
            listClustersV2(args: ListClustersV2CommandInput, options?: __HttpHandlerOptions): Promise<ListClustersV2CommandOutput>;
            listClustersV2(args: ListClustersV2CommandInput, cb: (err: any, data?: ListClustersV2CommandOutput) => void): void;
            listClustersV2(args: ListClustersV2CommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListClustersV2CommandOutput) => void): void;
            /**
                * <p>Returns a list of all the MSK configurations in this Region.</p>
                */
            listConfigurationRevisions(args: ListConfigurationRevisionsCommandInput, options?: __HttpHandlerOptions): Promise<ListConfigurationRevisionsCommandOutput>;
            listConfigurationRevisions(args: ListConfigurationRevisionsCommandInput, cb: (err: any, data?: ListConfigurationRevisionsCommandOutput) => void): void;
            listConfigurationRevisions(args: ListConfigurationRevisionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConfigurationRevisionsCommandOutput) => void): void;
            /**
                * <p>Returns a list of all the MSK configurations in this Region.</p>
                */
            listConfigurations(args: ListConfigurationsCommandInput, options?: __HttpHandlerOptions): Promise<ListConfigurationsCommandOutput>;
            listConfigurations(args: ListConfigurationsCommandInput, cb: (err: any, data?: ListConfigurationsCommandOutput) => void): void;
            listConfigurations(args: ListConfigurationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListConfigurationsCommandOutput) => void): void;
            /**
                * <p>Returns a list of Apache Kafka versions.</p>
                */
            listKafkaVersions(args: ListKafkaVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListKafkaVersionsCommandOutput>;
            listKafkaVersions(args: ListKafkaVersionsCommandInput, cb: (err: any, data?: ListKafkaVersionsCommandOutput) => void): void;
            listKafkaVersions(args: ListKafkaVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListKafkaVersionsCommandOutput) => void): void;
            /**
                * <p>Returns a list of the broker nodes in the cluster.</p>
                */
            listNodes(args: ListNodesCommandInput, options?: __HttpHandlerOptions): Promise<ListNodesCommandOutput>;
            listNodes(args: ListNodesCommandInput, cb: (err: any, data?: ListNodesCommandOutput) => void): void;
            listNodes(args: ListNodesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListNodesCommandOutput) => void): void;
            /**
                * <p>Returns a list of the Scram Secrets associated with an Amazon MSK cluster.</p>
                */
            listScramSecrets(args: ListScramSecretsCommandInput, options?: __HttpHandlerOptions): Promise<ListScramSecretsCommandOutput>;
            listScramSecrets(args: ListScramSecretsCommandInput, cb: (err: any, data?: ListScramSecretsCommandOutput) => void): void;
            listScramSecrets(args: ListScramSecretsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListScramSecretsCommandOutput) => void): void;
            /**
                * <p>Returns a list of the tags associated with the specified resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * Reboots brokers.
                */
            rebootBroker(args: RebootBrokerCommandInput, options?: __HttpHandlerOptions): Promise<RebootBrokerCommandOutput>;
            rebootBroker(args: RebootBrokerCommandInput, cb: (err: any, data?: RebootBrokerCommandOutput) => void): void;
            rebootBroker(args: RebootBrokerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RebootBrokerCommandOutput) => void): void;
            /**
                * <p>Adds tags to the specified MSK resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes the tags associated with the keys that are provided in the query.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the number of broker nodes in the cluster.</p>
                */
            updateBrokerCount(args: UpdateBrokerCountCommandInput, options?: __HttpHandlerOptions): Promise<UpdateBrokerCountCommandOutput>;
            updateBrokerCount(args: UpdateBrokerCountCommandInput, cb: (err: any, data?: UpdateBrokerCountCommandOutput) => void): void;
            updateBrokerCount(args: UpdateBrokerCountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateBrokerCountCommandOutput) => void): void;
            /**
                * <p>Updates the EBS storage associated with MSK brokers.</p>
                */
            updateBrokerStorage(args: UpdateBrokerStorageCommandInput, options?: __HttpHandlerOptions): Promise<UpdateBrokerStorageCommandOutput>;
            updateBrokerStorage(args: UpdateBrokerStorageCommandInput, cb: (err: any, data?: UpdateBrokerStorageCommandOutput) => void): void;
            updateBrokerStorage(args: UpdateBrokerStorageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateBrokerStorageCommandOutput) => void): void;
            /**
                * <p>Updates EC2 instance type.</p>
                */
            updateBrokerType(args: UpdateBrokerTypeCommandInput, options?: __HttpHandlerOptions): Promise<UpdateBrokerTypeCommandOutput>;
            updateBrokerType(args: UpdateBrokerTypeCommandInput, cb: (err: any, data?: UpdateBrokerTypeCommandOutput) => void): void;
            updateBrokerType(args: UpdateBrokerTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateBrokerTypeCommandOutput) => void): void;
            /**
                * <p>Updates the cluster with the configuration that is specified in the request body.</p>
                */
            updateClusterConfiguration(args: UpdateClusterConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateClusterConfigurationCommandOutput>;
            updateClusterConfiguration(args: UpdateClusterConfigurationCommandInput, cb: (err: any, data?: UpdateClusterConfigurationCommandOutput) => void): void;
            updateClusterConfiguration(args: UpdateClusterConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateClusterConfigurationCommandOutput) => void): void;
            /**
                * <p>Updates the Apache Kafka version for the cluster.</p>
                */
            updateClusterKafkaVersion(args: UpdateClusterKafkaVersionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateClusterKafkaVersionCommandOutput>;
            updateClusterKafkaVersion(args: UpdateClusterKafkaVersionCommandInput, cb: (err: any, data?: UpdateClusterKafkaVersionCommandOutput) => void): void;
            updateClusterKafkaVersion(args: UpdateClusterKafkaVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateClusterKafkaVersionCommandOutput) => void): void;
            /**
                * <p>Updates an MSK configuration.</p>
                */
            updateConfiguration(args: UpdateConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConfigurationCommandOutput>;
            updateConfiguration(args: UpdateConfigurationCommandInput, cb: (err: any, data?: UpdateConfigurationCommandOutput) => void): void;
            updateConfiguration(args: UpdateConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConfigurationCommandOutput) => void): void;
            /**
                * <p>Updates the cluster's connectivity configuration.</p>
                */
            updateConnectivity(args: UpdateConnectivityCommandInput, options?: __HttpHandlerOptions): Promise<UpdateConnectivityCommandOutput>;
            updateConnectivity(args: UpdateConnectivityCommandInput, cb: (err: any, data?: UpdateConnectivityCommandOutput) => void): void;
            updateConnectivity(args: UpdateConnectivityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateConnectivityCommandOutput) => void): void;
            /**
                * <p>Updates the monitoring settings for the cluster. You can use this operation to specify which Apache Kafka metrics you want Amazon MSK to send to Amazon CloudWatch. You can also specify settings for open monitoring with Prometheus.</p>
                */
            updateMonitoring(args: UpdateMonitoringCommandInput, options?: __HttpHandlerOptions): Promise<UpdateMonitoringCommandOutput>;
            updateMonitoring(args: UpdateMonitoringCommandInput, cb: (err: any, data?: UpdateMonitoringCommandOutput) => void): void;
            updateMonitoring(args: UpdateMonitoringCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateMonitoringCommandOutput) => void): void;
            /**
                * <p>Updates the security settings for the cluster. You can use this operation to specify encryption and authentication on existing clusters.</p>
                */
            updateSecurity(args: UpdateSecurityCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSecurityCommandOutput>;
            updateSecurity(args: UpdateSecurityCommandInput, cb: (err: any, data?: UpdateSecurityCommandOutput) => void): void;
            updateSecurity(args: UpdateSecurityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSecurityCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/BatchAssociateScramSecretCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { BatchAssociateScramSecretRequest, BatchAssociateScramSecretResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface BatchAssociateScramSecretCommandInput extends BatchAssociateScramSecretRequest {
    }
    export interface BatchAssociateScramSecretCommandOutput extends BatchAssociateScramSecretResponse, __MetadataBearer {
    }
    /**
        * <p>Associates one or more Scram Secrets with an Amazon MSK cluster.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, BatchAssociateScramSecretCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, BatchAssociateScramSecretCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new BatchAssociateScramSecretCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchAssociateScramSecretCommandInput} for command's `input` shape.
        * @see {@link BatchAssociateScramSecretCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class BatchAssociateScramSecretCommand extends $Command<BatchAssociateScramSecretCommandInput, BatchAssociateScramSecretCommandOutput, KafkaClientResolvedConfig> {
            readonly input: BatchAssociateScramSecretCommandInput;
            constructor(input: BatchAssociateScramSecretCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchAssociateScramSecretCommandInput, BatchAssociateScramSecretCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/BatchDisassociateScramSecretCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { BatchDisassociateScramSecretRequest, BatchDisassociateScramSecretResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface BatchDisassociateScramSecretCommandInput extends BatchDisassociateScramSecretRequest {
    }
    export interface BatchDisassociateScramSecretCommandOutput extends BatchDisassociateScramSecretResponse, __MetadataBearer {
    }
    /**
        * <p>Disassociates one or more Scram Secrets from an Amazon MSK cluster.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, BatchDisassociateScramSecretCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, BatchDisassociateScramSecretCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new BatchDisassociateScramSecretCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDisassociateScramSecretCommandInput} for command's `input` shape.
        * @see {@link BatchDisassociateScramSecretCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class BatchDisassociateScramSecretCommand extends $Command<BatchDisassociateScramSecretCommandInput, BatchDisassociateScramSecretCommandOutput, KafkaClientResolvedConfig> {
            readonly input: BatchDisassociateScramSecretCommandInput;
            constructor(input: BatchDisassociateScramSecretCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDisassociateScramSecretCommandInput, BatchDisassociateScramSecretCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/CreateClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { CreateClusterRequest, CreateClusterResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface CreateClusterCommandInput extends CreateClusterRequest {
    }
    export interface CreateClusterCommandOutput extends CreateClusterResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new MSK cluster.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, CreateClusterCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, CreateClusterCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new CreateClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateClusterCommandInput} for command's `input` shape.
        * @see {@link CreateClusterCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class CreateClusterCommand extends $Command<CreateClusterCommandInput, CreateClusterCommandOutput, KafkaClientResolvedConfig> {
            readonly input: CreateClusterCommandInput;
            constructor(input: CreateClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateClusterCommandInput, CreateClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/CreateClusterV2Command' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { CreateClusterV2Request, CreateClusterV2Response } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface CreateClusterV2CommandInput extends CreateClusterV2Request {
    }
    export interface CreateClusterV2CommandOutput extends CreateClusterV2Response, __MetadataBearer {
    }
    /**
        * <p>Creates a new MSK cluster.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, CreateClusterV2Command } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, CreateClusterV2Command } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new CreateClusterV2Command(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateClusterV2CommandInput} for command's `input` shape.
        * @see {@link CreateClusterV2CommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class CreateClusterV2Command extends $Command<CreateClusterV2CommandInput, CreateClusterV2CommandOutput, KafkaClientResolvedConfig> {
            readonly input: CreateClusterV2CommandInput;
            constructor(input: CreateClusterV2CommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateClusterV2CommandInput, CreateClusterV2CommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/CreateConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { CreateConfigurationRequest, CreateConfigurationResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface CreateConfigurationCommandInput extends CreateConfigurationRequest {
    }
    export interface CreateConfigurationCommandOutput extends CreateConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new MSK configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, CreateConfigurationCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, CreateConfigurationCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new CreateConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateConfigurationCommandInput} for command's `input` shape.
        * @see {@link CreateConfigurationCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class CreateConfigurationCommand extends $Command<CreateConfigurationCommandInput, CreateConfigurationCommandOutput, KafkaClientResolvedConfig> {
            readonly input: CreateConfigurationCommandInput;
            constructor(input: CreateConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateConfigurationCommandInput, CreateConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DeleteClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { DeleteClusterRequest, DeleteClusterResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface DeleteClusterCommandInput extends DeleteClusterRequest {
    }
    export interface DeleteClusterCommandOutput extends DeleteClusterResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the MSK cluster specified by the Amazon Resource Name (ARN) in the request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, DeleteClusterCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, DeleteClusterCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new DeleteClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteClusterCommandInput} for command's `input` shape.
        * @see {@link DeleteClusterCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class DeleteClusterCommand extends $Command<DeleteClusterCommandInput, DeleteClusterCommandOutput, KafkaClientResolvedConfig> {
            readonly input: DeleteClusterCommandInput;
            constructor(input: DeleteClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteClusterCommandInput, DeleteClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DeleteConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { DeleteConfigurationRequest, DeleteConfigurationResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface DeleteConfigurationCommandInput extends DeleteConfigurationRequest {
    }
    export interface DeleteConfigurationCommandOutput extends DeleteConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an MSK Configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, DeleteConfigurationCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, DeleteConfigurationCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new DeleteConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteConfigurationCommandInput} for command's `input` shape.
        * @see {@link DeleteConfigurationCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class DeleteConfigurationCommand extends $Command<DeleteConfigurationCommandInput, DeleteConfigurationCommandOutput, KafkaClientResolvedConfig> {
            readonly input: DeleteConfigurationCommandInput;
            constructor(input: DeleteConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteConfigurationCommandInput, DeleteConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeClusterCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { DescribeClusterRequest, DescribeClusterResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface DescribeClusterCommandInput extends DescribeClusterRequest {
    }
    export interface DescribeClusterCommandOutput extends DescribeClusterResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a description of the MSK cluster whose Amazon Resource Name (ARN) is specified in the request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, DescribeClusterCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, DescribeClusterCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new DescribeClusterCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeClusterCommandInput} for command's `input` shape.
        * @see {@link DescribeClusterCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class DescribeClusterCommand extends $Command<DescribeClusterCommandInput, DescribeClusterCommandOutput, KafkaClientResolvedConfig> {
            readonly input: DescribeClusterCommandInput;
            constructor(input: DescribeClusterCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeClusterCommandInput, DescribeClusterCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeClusterOperationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { DescribeClusterOperationRequest, DescribeClusterOperationResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface DescribeClusterOperationCommandInput extends DescribeClusterOperationRequest {
    }
    export interface DescribeClusterOperationCommandOutput extends DescribeClusterOperationResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a description of the cluster operation specified by the ARN.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, DescribeClusterOperationCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, DescribeClusterOperationCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new DescribeClusterOperationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeClusterOperationCommandInput} for command's `input` shape.
        * @see {@link DescribeClusterOperationCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class DescribeClusterOperationCommand extends $Command<DescribeClusterOperationCommandInput, DescribeClusterOperationCommandOutput, KafkaClientResolvedConfig> {
            readonly input: DescribeClusterOperationCommandInput;
            constructor(input: DescribeClusterOperationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeClusterOperationCommandInput, DescribeClusterOperationCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeClusterV2Command' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { DescribeClusterV2Request, DescribeClusterV2Response } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface DescribeClusterV2CommandInput extends DescribeClusterV2Request {
    }
    export interface DescribeClusterV2CommandOutput extends DescribeClusterV2Response, __MetadataBearer {
    }
    /**
        * <p>Returns a description of the MSK cluster whose Amazon Resource Name (ARN) is specified in the request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, DescribeClusterV2Command } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, DescribeClusterV2Command } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new DescribeClusterV2Command(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeClusterV2CommandInput} for command's `input` shape.
        * @see {@link DescribeClusterV2CommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class DescribeClusterV2Command extends $Command<DescribeClusterV2CommandInput, DescribeClusterV2CommandOutput, KafkaClientResolvedConfig> {
            readonly input: DescribeClusterV2CommandInput;
            constructor(input: DescribeClusterV2CommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeClusterV2CommandInput, DescribeClusterV2CommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { DescribeConfigurationRequest, DescribeConfigurationResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface DescribeConfigurationCommandInput extends DescribeConfigurationRequest {
    }
    export interface DescribeConfigurationCommandOutput extends DescribeConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a description of this MSK configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, DescribeConfigurationCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, DescribeConfigurationCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new DescribeConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConfigurationCommandInput} for command's `input` shape.
        * @see {@link DescribeConfigurationCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class DescribeConfigurationCommand extends $Command<DescribeConfigurationCommandInput, DescribeConfigurationCommandOutput, KafkaClientResolvedConfig> {
            readonly input: DescribeConfigurationCommandInput;
            constructor(input: DescribeConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConfigurationCommandInput, DescribeConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeConfigurationRevisionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { DescribeConfigurationRevisionRequest, DescribeConfigurationRevisionResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface DescribeConfigurationRevisionCommandInput extends DescribeConfigurationRevisionRequest {
    }
    export interface DescribeConfigurationRevisionCommandOutput extends DescribeConfigurationRevisionResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a description of this revision of the configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, DescribeConfigurationRevisionCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, DescribeConfigurationRevisionCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new DescribeConfigurationRevisionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeConfigurationRevisionCommandInput} for command's `input` shape.
        * @see {@link DescribeConfigurationRevisionCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class DescribeConfigurationRevisionCommand extends $Command<DescribeConfigurationRevisionCommandInput, DescribeConfigurationRevisionCommandOutput, KafkaClientResolvedConfig> {
            readonly input: DescribeConfigurationRevisionCommandInput;
            constructor(input: DescribeConfigurationRevisionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeConfigurationRevisionCommandInput, DescribeConfigurationRevisionCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/GetBootstrapBrokersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { GetBootstrapBrokersRequest, GetBootstrapBrokersResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface GetBootstrapBrokersCommandInput extends GetBootstrapBrokersRequest {
    }
    export interface GetBootstrapBrokersCommandOutput extends GetBootstrapBrokersResponse, __MetadataBearer {
    }
    /**
        * <p>A list of brokers that a client application can use to bootstrap.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, GetBootstrapBrokersCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, GetBootstrapBrokersCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new GetBootstrapBrokersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetBootstrapBrokersCommandInput} for command's `input` shape.
        * @see {@link GetBootstrapBrokersCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class GetBootstrapBrokersCommand extends $Command<GetBootstrapBrokersCommandInput, GetBootstrapBrokersCommandOutput, KafkaClientResolvedConfig> {
            readonly input: GetBootstrapBrokersCommandInput;
            constructor(input: GetBootstrapBrokersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetBootstrapBrokersCommandInput, GetBootstrapBrokersCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/GetCompatibleKafkaVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { GetCompatibleKafkaVersionsRequest, GetCompatibleKafkaVersionsResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface GetCompatibleKafkaVersionsCommandInput extends GetCompatibleKafkaVersionsRequest {
    }
    export interface GetCompatibleKafkaVersionsCommandOutput extends GetCompatibleKafkaVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the Apache Kafka versions to which you can update the MSK cluster.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, GetCompatibleKafkaVersionsCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, GetCompatibleKafkaVersionsCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new GetCompatibleKafkaVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCompatibleKafkaVersionsCommandInput} for command's `input` shape.
        * @see {@link GetCompatibleKafkaVersionsCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class GetCompatibleKafkaVersionsCommand extends $Command<GetCompatibleKafkaVersionsCommandInput, GetCompatibleKafkaVersionsCommandOutput, KafkaClientResolvedConfig> {
            readonly input: GetCompatibleKafkaVersionsCommandInput;
            constructor(input: GetCompatibleKafkaVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCompatibleKafkaVersionsCommandInput, GetCompatibleKafkaVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListClusterOperationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { ListClusterOperationsRequest, ListClusterOperationsResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface ListClusterOperationsCommandInput extends ListClusterOperationsRequest {
    }
    export interface ListClusterOperationsCommandOutput extends ListClusterOperationsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all the operations that have been performed on the specified MSK cluster.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, ListClusterOperationsCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, ListClusterOperationsCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new ListClusterOperationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListClusterOperationsCommandInput} for command's `input` shape.
        * @see {@link ListClusterOperationsCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class ListClusterOperationsCommand extends $Command<ListClusterOperationsCommandInput, ListClusterOperationsCommandOutput, KafkaClientResolvedConfig> {
            readonly input: ListClusterOperationsCommandInput;
            constructor(input: ListClusterOperationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListClusterOperationsCommandInput, ListClusterOperationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListClustersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { ListClustersRequest, ListClustersResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface ListClustersCommandInput extends ListClustersRequest {
    }
    export interface ListClustersCommandOutput extends ListClustersResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all the MSK clusters in the current Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, ListClustersCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, ListClustersCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new ListClustersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListClustersCommandInput} for command's `input` shape.
        * @see {@link ListClustersCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class ListClustersCommand extends $Command<ListClustersCommandInput, ListClustersCommandOutput, KafkaClientResolvedConfig> {
            readonly input: ListClustersCommandInput;
            constructor(input: ListClustersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListClustersCommandInput, ListClustersCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListClustersV2Command' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { ListClustersV2Request, ListClustersV2Response } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface ListClustersV2CommandInput extends ListClustersV2Request {
    }
    export interface ListClustersV2CommandOutput extends ListClustersV2Response, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all the MSK clusters in the current Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, ListClustersV2Command } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, ListClustersV2Command } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new ListClustersV2Command(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListClustersV2CommandInput} for command's `input` shape.
        * @see {@link ListClustersV2CommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class ListClustersV2Command extends $Command<ListClustersV2CommandInput, ListClustersV2CommandOutput, KafkaClientResolvedConfig> {
            readonly input: ListClustersV2CommandInput;
            constructor(input: ListClustersV2CommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListClustersV2CommandInput, ListClustersV2CommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListConfigurationRevisionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { ListConfigurationRevisionsRequest, ListConfigurationRevisionsResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface ListConfigurationRevisionsCommandInput extends ListConfigurationRevisionsRequest {
    }
    export interface ListConfigurationRevisionsCommandOutput extends ListConfigurationRevisionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all the MSK configurations in this Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, ListConfigurationRevisionsCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, ListConfigurationRevisionsCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new ListConfigurationRevisionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListConfigurationRevisionsCommandInput} for command's `input` shape.
        * @see {@link ListConfigurationRevisionsCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class ListConfigurationRevisionsCommand extends $Command<ListConfigurationRevisionsCommandInput, ListConfigurationRevisionsCommandOutput, KafkaClientResolvedConfig> {
            readonly input: ListConfigurationRevisionsCommandInput;
            constructor(input: ListConfigurationRevisionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListConfigurationRevisionsCommandInput, ListConfigurationRevisionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListConfigurationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { ListConfigurationsRequest, ListConfigurationsResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface ListConfigurationsCommandInput extends ListConfigurationsRequest {
    }
    export interface ListConfigurationsCommandOutput extends ListConfigurationsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of all the MSK configurations in this Region.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, ListConfigurationsCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, ListConfigurationsCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new ListConfigurationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListConfigurationsCommandInput} for command's `input` shape.
        * @see {@link ListConfigurationsCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class ListConfigurationsCommand extends $Command<ListConfigurationsCommandInput, ListConfigurationsCommandOutput, KafkaClientResolvedConfig> {
            readonly input: ListConfigurationsCommandInput;
            constructor(input: ListConfigurationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListConfigurationsCommandInput, ListConfigurationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListKafkaVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { ListKafkaVersionsRequest, ListKafkaVersionsResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface ListKafkaVersionsCommandInput extends ListKafkaVersionsRequest {
    }
    export interface ListKafkaVersionsCommandOutput extends ListKafkaVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of Apache Kafka versions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, ListKafkaVersionsCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, ListKafkaVersionsCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new ListKafkaVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListKafkaVersionsCommandInput} for command's `input` shape.
        * @see {@link ListKafkaVersionsCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class ListKafkaVersionsCommand extends $Command<ListKafkaVersionsCommandInput, ListKafkaVersionsCommandOutput, KafkaClientResolvedConfig> {
            readonly input: ListKafkaVersionsCommandInput;
            constructor(input: ListKafkaVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListKafkaVersionsCommandInput, ListKafkaVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListNodesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { ListNodesRequest, ListNodesResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface ListNodesCommandInput extends ListNodesRequest {
    }
    export interface ListNodesCommandOutput extends ListNodesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the broker nodes in the cluster.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, ListNodesCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, ListNodesCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new ListNodesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListNodesCommandInput} for command's `input` shape.
        * @see {@link ListNodesCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class ListNodesCommand extends $Command<ListNodesCommandInput, ListNodesCommandOutput, KafkaClientResolvedConfig> {
            readonly input: ListNodesCommandInput;
            constructor(input: ListNodesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListNodesCommandInput, ListNodesCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListScramSecretsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { ListScramSecretsRequest, ListScramSecretsResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface ListScramSecretsCommandInput extends ListScramSecretsRequest {
    }
    export interface ListScramSecretsCommandOutput extends ListScramSecretsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the Scram Secrets associated with an Amazon MSK cluster.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, ListScramSecretsCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, ListScramSecretsCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new ListScramSecretsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListScramSecretsCommandInput} for command's `input` shape.
        * @see {@link ListScramSecretsCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class ListScramSecretsCommand extends $Command<ListScramSecretsCommandInput, ListScramSecretsCommandOutput, KafkaClientResolvedConfig> {
            readonly input: ListScramSecretsCommandInput;
            constructor(input: ListScramSecretsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListScramSecretsCommandInput, ListScramSecretsCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the tags associated with the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, ListTagsForResourceCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, ListTagsForResourceCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, KafkaClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/RebootBrokerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { RebootBrokerRequest, RebootBrokerResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface RebootBrokerCommandInput extends RebootBrokerRequest {
    }
    export interface RebootBrokerCommandOutput extends RebootBrokerResponse, __MetadataBearer {
    }
    /**
        * Reboots brokers.
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, RebootBrokerCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, RebootBrokerCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new RebootBrokerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RebootBrokerCommandInput} for command's `input` shape.
        * @see {@link RebootBrokerCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class RebootBrokerCommand extends $Command<RebootBrokerCommandInput, RebootBrokerCommandOutput, KafkaClientResolvedConfig> {
            readonly input: RebootBrokerCommandInput;
            constructor(input: RebootBrokerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RebootBrokerCommandInput, RebootBrokerCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { TagResourceRequest } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds tags to the specified MSK resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, TagResourceCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, TagResourceCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, KafkaClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { UntagResourceRequest } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the tags associated with the keys that are provided in the query.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, UntagResourceCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, UntagResourceCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, KafkaClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateBrokerCountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { UpdateBrokerCountRequest, UpdateBrokerCountResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface UpdateBrokerCountCommandInput extends UpdateBrokerCountRequest {
    }
    export interface UpdateBrokerCountCommandOutput extends UpdateBrokerCountResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the number of broker nodes in the cluster.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, UpdateBrokerCountCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, UpdateBrokerCountCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new UpdateBrokerCountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateBrokerCountCommandInput} for command's `input` shape.
        * @see {@link UpdateBrokerCountCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class UpdateBrokerCountCommand extends $Command<UpdateBrokerCountCommandInput, UpdateBrokerCountCommandOutput, KafkaClientResolvedConfig> {
            readonly input: UpdateBrokerCountCommandInput;
            constructor(input: UpdateBrokerCountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateBrokerCountCommandInput, UpdateBrokerCountCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateBrokerStorageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { UpdateBrokerStorageRequest, UpdateBrokerStorageResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface UpdateBrokerStorageCommandInput extends UpdateBrokerStorageRequest {
    }
    export interface UpdateBrokerStorageCommandOutput extends UpdateBrokerStorageResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the EBS storage associated with MSK brokers.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, UpdateBrokerStorageCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, UpdateBrokerStorageCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new UpdateBrokerStorageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateBrokerStorageCommandInput} for command's `input` shape.
        * @see {@link UpdateBrokerStorageCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class UpdateBrokerStorageCommand extends $Command<UpdateBrokerStorageCommandInput, UpdateBrokerStorageCommandOutput, KafkaClientResolvedConfig> {
            readonly input: UpdateBrokerStorageCommandInput;
            constructor(input: UpdateBrokerStorageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateBrokerStorageCommandInput, UpdateBrokerStorageCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateBrokerTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { UpdateBrokerTypeRequest, UpdateBrokerTypeResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface UpdateBrokerTypeCommandInput extends UpdateBrokerTypeRequest {
    }
    export interface UpdateBrokerTypeCommandOutput extends UpdateBrokerTypeResponse, __MetadataBearer {
    }
    /**
        * <p>Updates EC2 instance type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, UpdateBrokerTypeCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, UpdateBrokerTypeCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new UpdateBrokerTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateBrokerTypeCommandInput} for command's `input` shape.
        * @see {@link UpdateBrokerTypeCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class UpdateBrokerTypeCommand extends $Command<UpdateBrokerTypeCommandInput, UpdateBrokerTypeCommandOutput, KafkaClientResolvedConfig> {
            readonly input: UpdateBrokerTypeCommandInput;
            constructor(input: UpdateBrokerTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateBrokerTypeCommandInput, UpdateBrokerTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateClusterConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { UpdateClusterConfigurationRequest, UpdateClusterConfigurationResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface UpdateClusterConfigurationCommandInput extends UpdateClusterConfigurationRequest {
    }
    export interface UpdateClusterConfigurationCommandOutput extends UpdateClusterConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the cluster with the configuration that is specified in the request body.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, UpdateClusterConfigurationCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, UpdateClusterConfigurationCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new UpdateClusterConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateClusterConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateClusterConfigurationCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class UpdateClusterConfigurationCommand extends $Command<UpdateClusterConfigurationCommandInput, UpdateClusterConfigurationCommandOutput, KafkaClientResolvedConfig> {
            readonly input: UpdateClusterConfigurationCommandInput;
            constructor(input: UpdateClusterConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateClusterConfigurationCommandInput, UpdateClusterConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateClusterKafkaVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { UpdateClusterKafkaVersionRequest, UpdateClusterKafkaVersionResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface UpdateClusterKafkaVersionCommandInput extends UpdateClusterKafkaVersionRequest {
    }
    export interface UpdateClusterKafkaVersionCommandOutput extends UpdateClusterKafkaVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the Apache Kafka version for the cluster.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, UpdateClusterKafkaVersionCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, UpdateClusterKafkaVersionCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new UpdateClusterKafkaVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateClusterKafkaVersionCommandInput} for command's `input` shape.
        * @see {@link UpdateClusterKafkaVersionCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class UpdateClusterKafkaVersionCommand extends $Command<UpdateClusterKafkaVersionCommandInput, UpdateClusterKafkaVersionCommandOutput, KafkaClientResolvedConfig> {
            readonly input: UpdateClusterKafkaVersionCommandInput;
            constructor(input: UpdateClusterKafkaVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateClusterKafkaVersionCommandInput, UpdateClusterKafkaVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { UpdateConfigurationRequest, UpdateConfigurationResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface UpdateConfigurationCommandInput extends UpdateConfigurationRequest {
    }
    export interface UpdateConfigurationCommandOutput extends UpdateConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an MSK configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, UpdateConfigurationCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, UpdateConfigurationCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new UpdateConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateConfigurationCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class UpdateConfigurationCommand extends $Command<UpdateConfigurationCommandInput, UpdateConfigurationCommandOutput, KafkaClientResolvedConfig> {
            readonly input: UpdateConfigurationCommandInput;
            constructor(input: UpdateConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConfigurationCommandInput, UpdateConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateConnectivityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { UpdateConnectivityRequest, UpdateConnectivityResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface UpdateConnectivityCommandInput extends UpdateConnectivityRequest {
    }
    export interface UpdateConnectivityCommandOutput extends UpdateConnectivityResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the cluster's connectivity configuration.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, UpdateConnectivityCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, UpdateConnectivityCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new UpdateConnectivityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateConnectivityCommandInput} for command's `input` shape.
        * @see {@link UpdateConnectivityCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class UpdateConnectivityCommand extends $Command<UpdateConnectivityCommandInput, UpdateConnectivityCommandOutput, KafkaClientResolvedConfig> {
            readonly input: UpdateConnectivityCommandInput;
            constructor(input: UpdateConnectivityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateConnectivityCommandInput, UpdateConnectivityCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateMonitoringCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { UpdateMonitoringRequest, UpdateMonitoringResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface UpdateMonitoringCommandInput extends UpdateMonitoringRequest {
    }
    export interface UpdateMonitoringCommandOutput extends UpdateMonitoringResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the monitoring settings for the cluster. You can use this operation to specify which Apache Kafka metrics you want Amazon MSK to send to Amazon CloudWatch. You can also specify settings for open monitoring with Prometheus.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, UpdateMonitoringCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, UpdateMonitoringCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new UpdateMonitoringCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateMonitoringCommandInput} for command's `input` shape.
        * @see {@link UpdateMonitoringCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class UpdateMonitoringCommand extends $Command<UpdateMonitoringCommandInput, UpdateMonitoringCommandOutput, KafkaClientResolvedConfig> {
            readonly input: UpdateMonitoringCommandInput;
            constructor(input: UpdateMonitoringCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateMonitoringCommandInput, UpdateMonitoringCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateSecurityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { KafkaClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient";
    import { UpdateSecurityRequest, UpdateSecurityResponse } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0";
    export interface UpdateSecurityCommandInput extends UpdateSecurityRequest {
    }
    export interface UpdateSecurityCommandOutput extends UpdateSecurityResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the security settings for the cluster. You can use this operation to specify encryption and authentication on existing clusters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { KafkaClient, UpdateSecurityCommand } from "@aws-sdk/client-kafka"; // ES Modules import
        * // const { KafkaClient, UpdateSecurityCommand } = require("@aws-sdk/client-kafka"); // CommonJS import
        * const client = new KafkaClient(config);
        * const command = new UpdateSecurityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSecurityCommandInput} for command's `input` shape.
        * @see {@link UpdateSecurityCommandOutput} for command's `response` shape.
        * @see {@link KafkaClientResolvedConfig | config} for KafkaClient's `config` shape.
        *
        */
    export class UpdateSecurityCommand extends $Command<UpdateSecurityCommandInput, UpdateSecurityCommandOutput, KafkaClientResolvedConfig> {
            readonly input: UpdateSecurityCommandInput;
            constructor(input: UpdateSecurityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: KafkaClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSecurityCommandInput, UpdateSecurityCommandOutput>;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/KafkaClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { BatchAssociateScramSecretCommandInput, BatchAssociateScramSecretCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/BatchAssociateScramSecretCommand";
    import { BatchDisassociateScramSecretCommandInput, BatchDisassociateScramSecretCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/BatchDisassociateScramSecretCommand";
    import { CreateClusterCommandInput, CreateClusterCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/CreateClusterCommand";
    import { CreateClusterV2CommandInput, CreateClusterV2CommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/CreateClusterV2Command";
    import { CreateConfigurationCommandInput, CreateConfigurationCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/CreateConfigurationCommand";
    import { DeleteClusterCommandInput, DeleteClusterCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DeleteClusterCommand";
    import { DeleteConfigurationCommandInput, DeleteConfigurationCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DeleteConfigurationCommand";
    import { DescribeClusterCommandInput, DescribeClusterCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeClusterCommand";
    import { DescribeClusterOperationCommandInput, DescribeClusterOperationCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeClusterOperationCommand";
    import { DescribeClusterV2CommandInput, DescribeClusterV2CommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeClusterV2Command";
    import { DescribeConfigurationCommandInput, DescribeConfigurationCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeConfigurationCommand";
    import { DescribeConfigurationRevisionCommandInput, DescribeConfigurationRevisionCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/DescribeConfigurationRevisionCommand";
    import { GetBootstrapBrokersCommandInput, GetBootstrapBrokersCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/GetBootstrapBrokersCommand";
    import { GetCompatibleKafkaVersionsCommandInput, GetCompatibleKafkaVersionsCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/GetCompatibleKafkaVersionsCommand";
    import { ListClusterOperationsCommandInput, ListClusterOperationsCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListClusterOperationsCommand";
    import { ListClustersCommandInput, ListClustersCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListClustersCommand";
    import { ListClustersV2CommandInput, ListClustersV2CommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListClustersV2Command";
    import { ListConfigurationRevisionsCommandInput, ListConfigurationRevisionsCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListConfigurationRevisionsCommand";
    import { ListConfigurationsCommandInput, ListConfigurationsCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListConfigurationsCommand";
    import { ListKafkaVersionsCommandInput, ListKafkaVersionsCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListKafkaVersionsCommand";
    import { ListNodesCommandInput, ListNodesCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListNodesCommand";
    import { ListScramSecretsCommandInput, ListScramSecretsCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListScramSecretsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/ListTagsForResourceCommand";
    import { RebootBrokerCommandInput, RebootBrokerCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/RebootBrokerCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UntagResourceCommand";
    import { UpdateBrokerCountCommandInput, UpdateBrokerCountCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateBrokerCountCommand";
    import { UpdateBrokerStorageCommandInput, UpdateBrokerStorageCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateBrokerStorageCommand";
    import { UpdateBrokerTypeCommandInput, UpdateBrokerTypeCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateBrokerTypeCommand";
    import { UpdateClusterConfigurationCommandInput, UpdateClusterConfigurationCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateClusterConfigurationCommand";
    import { UpdateClusterKafkaVersionCommandInput, UpdateClusterKafkaVersionCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateClusterKafkaVersionCommand";
    import { UpdateConfigurationCommandInput, UpdateConfigurationCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateConfigurationCommand";
    import { UpdateConnectivityCommandInput, UpdateConnectivityCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateConnectivityCommand";
    import { UpdateMonitoringCommandInput, UpdateMonitoringCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateMonitoringCommand";
    import { UpdateSecurityCommandInput, UpdateSecurityCommandOutput } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/commands/UpdateSecurityCommand";
    export type ServiceInputTypes = BatchAssociateScramSecretCommandInput | BatchDisassociateScramSecretCommandInput | CreateClusterCommandInput | CreateClusterV2CommandInput | CreateConfigurationCommandInput | DeleteClusterCommandInput | DeleteConfigurationCommandInput | DescribeClusterCommandInput | DescribeClusterOperationCommandInput | DescribeClusterV2CommandInput | DescribeConfigurationCommandInput | DescribeConfigurationRevisionCommandInput | GetBootstrapBrokersCommandInput | GetCompatibleKafkaVersionsCommandInput | ListClusterOperationsCommandInput | ListClustersCommandInput | ListClustersV2CommandInput | ListConfigurationRevisionsCommandInput | ListConfigurationsCommandInput | ListKafkaVersionsCommandInput | ListNodesCommandInput | ListScramSecretsCommandInput | ListTagsForResourceCommandInput | RebootBrokerCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateBrokerCountCommandInput | UpdateBrokerStorageCommandInput | UpdateBrokerTypeCommandInput | UpdateClusterConfigurationCommandInput | UpdateClusterKafkaVersionCommandInput | UpdateConfigurationCommandInput | UpdateConnectivityCommandInput | UpdateMonitoringCommandInput | UpdateSecurityCommandInput;
    export type ServiceOutputTypes = BatchAssociateScramSecretCommandOutput | BatchDisassociateScramSecretCommandOutput | CreateClusterCommandOutput | CreateClusterV2CommandOutput | CreateConfigurationCommandOutput | DeleteClusterCommandOutput | DeleteConfigurationCommandOutput | DescribeClusterCommandOutput | DescribeClusterOperationCommandOutput | DescribeClusterV2CommandOutput | DescribeConfigurationCommandOutput | DescribeConfigurationRevisionCommandOutput | GetBootstrapBrokersCommandOutput | GetCompatibleKafkaVersionsCommandOutput | ListClusterOperationsCommandOutput | ListClustersCommandOutput | ListClustersV2CommandOutput | ListConfigurationRevisionsCommandOutput | ListConfigurationsCommandOutput | ListKafkaVersionsCommandOutput | ListNodesCommandOutput | ListScramSecretsCommandOutput | ListTagsForResourceCommandOutput | RebootBrokerCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateBrokerCountCommandOutput | UpdateBrokerStorageCommandOutput | UpdateBrokerTypeCommandOutput | UpdateClusterConfigurationCommandOutput | UpdateClusterKafkaVersionCommandOutput | UpdateConfigurationCommandOutput | UpdateConnectivityCommandOutput | UpdateMonitoringCommandOutput | UpdateSecurityCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type KafkaClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of KafkaClient class constructor that set the region, credentials and other options.
        */
    export interface KafkaClientConfig extends KafkaClientConfigType {
    }
    type KafkaClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of KafkaClient class. This is resolved and normalized from the {@link KafkaClientConfig | constructor configuration interface}.
        */
    export interface KafkaClientResolvedConfig extends KafkaClientResolvedConfigType {
    }
    /**
        * <p>The operations for managing an Amazon MSK cluster.</p>
        */
    export class KafkaClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, KafkaClientResolvedConfig> {
            /**
                * The resolved configuration of KafkaClient class. This is resolved and normalized from the {@link KafkaClientConfig | constructor configuration interface}.
                */
            readonly config: KafkaClientResolvedConfig;
            constructor(configuration: KafkaClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { KafkaServiceException as __BaseException } from "@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/KafkaServiceException";
    /**
        * Contains information about provisioned throughput for EBS storage volumes attached to kafka broker nodes.
        */
    export interface ProvisionedThroughput {
            /**
                * Provisioned throughput is enabled or not.
                */
            Enabled?: boolean;
            /**
                * Throughput value of the EBS volumes for the data drive on each kafka broker node in MiB per second.
                */
            VolumeThroughput?: number;
    }
    export namespace ProvisionedThroughput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProvisionedThroughput) => any;
    }
    /**
        * <p>Specifies the EBS volume upgrade information. The broker identifier must be set to the keyword ALL. This means the changes apply to all the brokers in the cluster.</p>
        */
    export interface BrokerEBSVolumeInfo {
            /**
                * <p>The ID of the broker to update.</p>
                */
            KafkaBrokerNodeId: string | undefined;
            /**
                * EBS volume provisioned throughput information.
                */
            ProvisionedThroughput?: ProvisionedThroughput;
            /**
                * <p>Size of the EBS volume to update.</p>
                */
            VolumeSizeGB?: number;
    }
    export namespace BrokerEBSVolumeInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BrokerEBSVolumeInfo) => any;
    }
    export enum ClusterType {
            PROVISIONED = "PROVISIONED",
            SERVERLESS = "SERVERLESS"
    }
    export enum BrokerAZDistribution {
            DEFAULT = "DEFAULT"
    }
    /**
        * Public access control for brokers.
        */
    export interface PublicAccess {
            /**
                * <p>The value DISABLED indicates that public access is turned off. SERVICE_PROVIDED_EIPS indicates that public access is turned on.</p>
                */
            Type?: string;
    }
    export namespace PublicAccess {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublicAccess) => any;
    }
    /**
        * <p>Information about the broker access configuration.</p>
        */
    export interface ConnectivityInfo {
            /**
                * <p>Public access control for brokers.</p>
                */
            PublicAccess?: PublicAccess;
    }
    export namespace ConnectivityInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConnectivityInfo) => any;
    }
    /**
        * <p>Contains information about the EBS storage volumes attached to Apache Kafka broker nodes.</p>
        */
    export interface EBSStorageInfo {
            /**
                * EBS volume provisioned throughput information.
                */
            ProvisionedThroughput?: ProvisionedThroughput;
            /**
                * <p>The size in GiB of the EBS volume for the data drive on each broker node.</p>
                */
            VolumeSize?: number;
    }
    export namespace EBSStorageInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EBSStorageInfo) => any;
    }
    /**
        * <p>Contains information about storage volumes attached to MSK broker nodes.</p>
        */
    export interface StorageInfo {
            /**
                * <p>EBS volume information.</p>
                */
            EbsStorageInfo?: EBSStorageInfo;
    }
    export namespace StorageInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StorageInfo) => any;
    }
    /**
        * <p>Describes the setup to be used for Apache Kafka broker nodes in the cluster.</p>
        */
    export interface BrokerNodeGroupInfo {
            /**
                * <p>The distribution of broker nodes across Availability Zones. This is an optional parameter. If you don't specify it, Amazon MSK gives it the value DEFAULT. You can also explicitly set this parameter to the value DEFAULT. No other values are currently allowed.</p>
                *          <p>Amazon MSK distributes the broker nodes evenly across the Availability Zones that correspond to the subnets you provide when you create the cluster.</p>
                */
            BrokerAZDistribution?: BrokerAZDistribution | string;
            /**
                * <p>The list of subnets to connect to in the client virtual private cloud (VPC). AWS creates elastic network interfaces inside these subnets. Client applications use elastic network interfaces to produce and consume data. Client subnets can't occupy the Availability Zone with ID use use1-az3.</p>
                */
            ClientSubnets: string[] | undefined;
            /**
                * <p>The type of Amazon EC2 instances to use for Apache Kafka brokers. The following instance types are allowed: kafka.m5.large, kafka.m5.xlarge, kafka.m5.2xlarge,
                * kafka.m5.4xlarge, kafka.m5.12xlarge, and kafka.m5.24xlarge.</p>
                */
            InstanceType: string | undefined;
            /**
                * <p>The AWS security groups to associate with the elastic network interfaces in order to specify who can connect to and communicate with the Amazon MSK cluster. If you don't specify a security group, Amazon MSK uses the default security group associated with the VPC.</p>
                */
            SecurityGroups?: string[];
            /**
                * <p>Contains information about storage volumes attached to MSK broker nodes.</p>
                */
            StorageInfo?: StorageInfo;
            /**
                * <p>Information about the broker access configuration.</p>
                */
            ConnectivityInfo?: ConnectivityInfo;
    }
    export namespace BrokerNodeGroupInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BrokerNodeGroupInfo) => any;
    }
    /**
        * <p>Details for IAM access control.</p>
        */
    export interface Iam {
            /**
                * <p>Indicates whether IAM access control is enabled.</p>
                */
            Enabled?: boolean;
    }
    export namespace Iam {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Iam) => any;
    }
    /**
        * <p>Details for SASL/SCRAM client authentication.</p>
        */
    export interface Scram {
            /**
                * <p>SASL/SCRAM authentication is enabled or not.</p>
                */
            Enabled?: boolean;
    }
    export namespace Scram {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Scram) => any;
    }
    /**
        * <p>Details for client authentication using SASL.</p>
        */
    export interface Sasl {
            /**
                * <p>Details for SASL/SCRAM client authentication.</p>
                */
            Scram?: Scram;
            /**
                * <p>Indicates whether IAM access control is enabled.</p>
                */
            Iam?: Iam;
    }
    export namespace Sasl {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Sasl) => any;
    }
    /**
        * <p>Details for client authentication using TLS.</p>
        */
    export interface Tls {
            /**
                * <p>List of ACM Certificate Authority ARNs.</p>
                */
            CertificateAuthorityArnList?: string[];
            /**
                * <p>Specifies whether you want to turn on or turn off TLS authentication.</p>
                */
            Enabled?: boolean;
    }
    export namespace Tls {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tls) => any;
    }
    export interface Unauthenticated {
            /**
                * <p>Specifies whether you want to turn on or turn off unauthenticated traffic to your cluster.</p>
                */
            Enabled?: boolean;
    }
    export namespace Unauthenticated {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Unauthenticated) => any;
    }
    /**
        * <p>Includes all client authentication information.</p>
        */
    export interface ClientAuthentication {
            /**
                * <p>Details for ClientAuthentication using SASL.</p>
                */
            Sasl?: Sasl;
            /**
                * <p>Details for ClientAuthentication using TLS.</p>
                */
            Tls?: Tls;
            /**
                * <p>Contains information about unauthenticated traffic to the cluster.</p>
                */
            Unauthenticated?: Unauthenticated;
    }
    export namespace ClientAuthentication {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClientAuthentication) => any;
    }
    /**
        * <p>Information about the current software installed on the cluster.</p>
        */
    export interface BrokerSoftwareInfo {
            /**
                * <p>The Amazon Resource Name (ARN) of the configuration used for the cluster. This field isn't visible in this preview release.</p>
                */
            ConfigurationArn?: string;
            /**
                * <p>The revision of the configuration to use. This field isn't visible in this preview release.</p>
                */
            ConfigurationRevision?: number;
            /**
                * <p>The version of Apache Kafka.</p>
                */
            KafkaVersion?: string;
    }
    export namespace BrokerSoftwareInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BrokerSoftwareInfo) => any;
    }
    /**
        * <p>The data-volume encryption details.</p>
        */
    export interface EncryptionAtRest {
            /**
                * <p>The ARN of the AWS KMS key for encrypting data at rest. If you don't specify a KMS key, MSK creates one for you and uses it.</p>
                */
            DataVolumeKMSKeyId: string | undefined;
    }
    export namespace EncryptionAtRest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EncryptionAtRest) => any;
    }
    export enum ClientBroker {
            PLAINTEXT = "PLAINTEXT",
            TLS = "TLS",
            TLS_PLAINTEXT = "TLS_PLAINTEXT"
    }
    /**
        * <p>The settings for encrypting data in transit.</p>
        */
    export interface EncryptionInTransit {
            /**
                * <p>Indicates the encryption setting for data in transit between clients and brokers. The following are the possible values.</p>
                *             <p>
                *                TLS means that client-broker communication is enabled with TLS only.</p>
                *             <p>
                *                TLS_PLAINTEXT means that client-broker communication is enabled for both TLS-encrypted, as well as plaintext data.</p>
                *             <p>
                *                PLAINTEXT means that client-broker communication is enabled in plaintext only.</p>
                *             <p>The default value is TLS_PLAINTEXT.</p>
                */
            ClientBroker?: ClientBroker | string;
            /**
                * <p>When set to true, it indicates that data communication among the broker nodes of the cluster is encrypted. When set to false, the communication happens in plaintext.</p>
                *             <p>The default value is true.</p>
                */
            InCluster?: boolean;
    }
    export namespace EncryptionInTransit {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EncryptionInTransit) => any;
    }
    /**
        * <p>Includes encryption-related information, such as the AWS KMS key used for encrypting data at rest and whether you want MSK to encrypt your data in transit.</p>
        */
    export interface EncryptionInfo {
            /**
                * <p>The data-volume encryption details.</p>
                */
            EncryptionAtRest?: EncryptionAtRest;
            /**
                * <p>The details for encryption in transit.</p>
                */
            EncryptionInTransit?: EncryptionInTransit;
    }
    export namespace EncryptionInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EncryptionInfo) => any;
    }
    export enum EnhancedMonitoring {
            DEFAULT = "DEFAULT",
            PER_BROKER = "PER_BROKER",
            PER_TOPIC_PER_BROKER = "PER_TOPIC_PER_BROKER",
            PER_TOPIC_PER_PARTITION = "PER_TOPIC_PER_PARTITION"
    }
    export interface CloudWatchLogs {
            Enabled: boolean | undefined;
            LogGroup?: string;
    }
    export namespace CloudWatchLogs {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CloudWatchLogs) => any;
    }
    export interface Firehose {
            DeliveryStream?: string;
            Enabled: boolean | undefined;
    }
    export namespace Firehose {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Firehose) => any;
    }
    export interface S3 {
            Bucket?: string;
            Enabled: boolean | undefined;
            Prefix?: string;
    }
    export namespace S3 {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: S3) => any;
    }
    export interface BrokerLogs {
            CloudWatchLogs?: CloudWatchLogs;
            Firehose?: Firehose;
            S3?: S3;
    }
    export namespace BrokerLogs {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BrokerLogs) => any;
    }
    export interface LoggingInfo {
            BrokerLogs: BrokerLogs | undefined;
    }
    export namespace LoggingInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoggingInfo) => any;
    }
    /**
        * <p>Indicates whether you want to turn on or turn off the JMX Exporter.</p>
        */
    export interface JmxExporterInfo {
            /**
                * <p>Indicates whether you want to turn on or turn off the JMX Exporter.</p>
                */
            EnabledInBroker: boolean | undefined;
    }
    export namespace JmxExporterInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JmxExporterInfo) => any;
    }
    /**
        * <p>Indicates whether you want to turn on or turn off the Node Exporter.</p>
        */
    export interface NodeExporterInfo {
            /**
                * <p>Indicates whether you want to turn on or turn off the Node Exporter.</p>
                */
            EnabledInBroker: boolean | undefined;
    }
    export namespace NodeExporterInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NodeExporterInfo) => any;
    }
    /**
        * <p>Prometheus settings.</p>
        */
    export interface PrometheusInfo {
            /**
                * <p>Indicates whether you want to turn on or turn off the JMX Exporter.</p>
                */
            JmxExporter?: JmxExporterInfo;
            /**
                * <p>Indicates whether you want to turn on or turn off the Node Exporter.</p>
                */
            NodeExporter?: NodeExporterInfo;
    }
    export namespace PrometheusInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PrometheusInfo) => any;
    }
    /**
        * <p>JMX and Node monitoring for the MSK cluster.</p>
        */
    export interface OpenMonitoringInfo {
            /**
                * <p>Prometheus settings.</p>
                */
            Prometheus: PrometheusInfo | undefined;
    }
    export namespace OpenMonitoringInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpenMonitoringInfo) => any;
    }
    /**
        * <p>Provisioned cluster.</p>
        */
    export interface Provisioned {
            /**
                * <p>Information about the brokers.</p>
                */
            BrokerNodeGroupInfo: BrokerNodeGroupInfo | undefined;
            /**
                * <p>Information about the Apache Kafka version deployed on the brokers.</p>
                */
            CurrentBrokerSoftwareInfo?: BrokerSoftwareInfo;
            /**
                * <p>Includes all client authentication information.</p>
                */
            ClientAuthentication?: ClientAuthentication;
            /**
                * <p>Includes all encryption-related information.</p>
                */
            EncryptionInfo?: EncryptionInfo;
            /**
                * <p>Specifies the level of monitoring for the MSK cluster. The possible values are DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION.</p>
                */
            EnhancedMonitoring?: EnhancedMonitoring | string;
            /**
                * <p>The settings for open monitoring.</p>
                */
            OpenMonitoring?: OpenMonitoringInfo;
            /**
                * <p>Log delivery information for the cluster.</p>
                */
            LoggingInfo?: LoggingInfo;
            /**
                * <p>The number of broker nodes in the cluster.</p>
                */
            NumberOfBrokerNodes: number | undefined;
            /**
                * <p>The connection string to use to connect to the Apache ZooKeeper cluster.</p>
                */
            ZookeeperConnectString?: string;
            /**
                * <p>The connection string to use to connect to the Apache ZooKeeper cluster on a TLS port.</p>
                */
            ZookeeperConnectStringTls?: string;
    }
    export namespace Provisioned {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Provisioned) => any;
    }
    /**
        * <p>Details for client authentication using SASL.</p>
        */
    export interface ServerlessSasl {
            /**
                * <p>Indicates whether IAM access control is enabled.</p>
                */
            Iam?: Iam;
    }
    export namespace ServerlessSasl {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerlessSasl) => any;
    }
    /**
        * <p>Includes all client authentication information.</p>
        */
    export interface ServerlessClientAuthentication {
            /**
                * <p>Details for ClientAuthentication using SASL.</p>
                */
            Sasl?: ServerlessSasl;
    }
    export namespace ServerlessClientAuthentication {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerlessClientAuthentication) => any;
    }
    /**
        * <p>The configuration of the Amazon VPCs for the cluster.</p>
        */
    export interface VpcConfig {
            /**
                * <p>The IDs of the subnets associated with the cluster.</p>
                */
            SubnetIds: string[] | undefined;
            /**
                * <p>The IDs of the security groups associated with the cluster.</p>
                */
            SecurityGroupIds?: string[];
    }
    export namespace VpcConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VpcConfig) => any;
    }
    /**
        * <p>Serverless cluster.</p>
        */
    export interface Serverless {
            /**
                * <p>The configuration of the Amazon VPCs for the cluster.</p>
                */
            VpcConfigs: VpcConfig[] | undefined;
            /**
                * <p>Includes all client authentication information.</p>
                */
            ClientAuthentication?: ServerlessClientAuthentication;
    }
    export namespace Serverless {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Serverless) => any;
    }
    export enum ClusterState {
            ACTIVE = "ACTIVE",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED",
            HEALING = "HEALING",
            MAINTENANCE = "MAINTENANCE",
            REBOOTING_BROKER = "REBOOTING_BROKER",
            UPDATING = "UPDATING"
    }
    export interface StateInfo {
            Code?: string;
            Message?: string;
    }
    export namespace StateInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StateInfo) => any;
    }
    /**
        * <p>Returns information about a cluster.</p>
        */
    export interface Cluster {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies a cluster operation.</p>
                */
            ActiveOperationArn?: string;
            /**
                * <p>Cluster Type.</p>
                */
            ClusterType?: ClusterType | string;
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The name of the cluster.</p>
                */
            ClusterName?: string;
            /**
                * <p>The time when the cluster was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The current version of the MSK cluster.</p>
                */
            CurrentVersion?: string;
            /**
                * <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
                */
            State?: ClusterState | string;
            /**
                * <p>State Info for the Amazon MSK cluster.</p>
                */
            StateInfo?: StateInfo;
            /**
                * <p>Tags attached to the cluster.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>Information about the provisioned cluster.</p>
                */
            Provisioned?: Provisioned;
            /**
                * <p>Information about the serverless cluster.</p>
                */
            Serverless?: Serverless;
    }
    export namespace Cluster {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Cluster) => any;
    }
    /**
        * <p>Indicates whether you want to turn on or turn off the JMX Exporter.</p>
        */
    export interface JmxExporter {
            /**
                * <p>Indicates whether you want to turn on or turn off the JMX Exporter.</p>
                */
            EnabledInBroker: boolean | undefined;
    }
    export namespace JmxExporter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: JmxExporter) => any;
    }
    /**
        * <p>Indicates whether you want to turn on or turn off the Node Exporter.</p>
        */
    export interface NodeExporter {
            /**
                * <p>Indicates whether you want to turn on or turn off the Node Exporter.</p>
                */
            EnabledInBroker: boolean | undefined;
    }
    export namespace NodeExporter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NodeExporter) => any;
    }
    /**
        * <p>Prometheus settings.</p>
        */
    export interface Prometheus {
            /**
                * <p>Indicates whether you want to turn on or turn off the JMX Exporter.</p>
                */
            JmxExporter?: JmxExporter;
            /**
                * <p>Indicates whether you want to turn on or turn off the Node Exporter.</p>
                */
            NodeExporter?: NodeExporter;
    }
    export namespace Prometheus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Prometheus) => any;
    }
    /**
        * <p>JMX and Node monitoring for the MSK cluster.</p>
        */
    export interface OpenMonitoring {
            /**
                * <p>Prometheus settings.</p>
                */
            Prometheus: Prometheus | undefined;
    }
    export namespace OpenMonitoring {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpenMonitoring) => any;
    }
    /**
        * <p>Returns information about a cluster.</p>
        */
    export interface ClusterInfo {
            /**
                * <p>Arn of active cluster operation.</p>
                */
            ActiveOperationArn?: string;
            /**
                * <p>Information about the broker nodes.</p>
                */
            BrokerNodeGroupInfo?: BrokerNodeGroupInfo;
            /**
                * <p>Includes all client authentication information.</p>
                */
            ClientAuthentication?: ClientAuthentication;
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The name of the cluster.</p>
                */
            ClusterName?: string;
            /**
                * <p>The time when the cluster was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Information about the version of software currently deployed on the Apache Kafka brokers in the cluster.</p>
                */
            CurrentBrokerSoftwareInfo?: BrokerSoftwareInfo;
            /**
                * <p>The current version of the MSK cluster.</p>
                */
            CurrentVersion?: string;
            /**
                * <p>Includes all encryption-related information.</p>
                */
            EncryptionInfo?: EncryptionInfo;
            /**
                * <p>Specifies which metrics are gathered for the MSK cluster. This property has the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each of these levels of monitoring, see <a href="https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html">Monitoring</a>.</p>
                */
            EnhancedMonitoring?: EnhancedMonitoring | string;
            /**
                * <p>Settings for open monitoring using Prometheus.</p>
                */
            OpenMonitoring?: OpenMonitoring;
            LoggingInfo?: LoggingInfo;
            /**
                * <p>The number of broker nodes in the cluster.</p>
                */
            NumberOfBrokerNodes?: number;
            /**
                * <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
                */
            State?: ClusterState | string;
            StateInfo?: StateInfo;
            /**
                * <p>Tags attached to the cluster.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The connection string to use to connect to the Apache ZooKeeper cluster.</p>
                */
            ZookeeperConnectString?: string;
            /**
                * <p>The connection string to use to connect to zookeeper cluster on Tls port.</p>
                */
            ZookeeperConnectStringTls?: string;
    }
    export namespace ClusterInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClusterInfo) => any;
    }
    /**
        * <p>Returns information about an error state of the cluster.</p>
        */
    export interface ErrorInfo {
            /**
                * <p>A number describing the error programmatically.</p>
                */
            ErrorCode?: string;
            /**
                * <p>An optional field to provide more details about the error.</p>
                */
            ErrorString?: string;
    }
    export namespace ErrorInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ErrorInfo) => any;
    }
    /**
        * <p>State information about the operation step.</p>
        */
    export interface ClusterOperationStepInfo {
            /**
                * <p>The steps current status.</p>
                */
            StepStatus?: string;
    }
    export namespace ClusterOperationStepInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClusterOperationStepInfo) => any;
    }
    /**
        * <p>Step taken during a cluster operation.</p>
        */
    export interface ClusterOperationStep {
            /**
                * <p>Information about the step and its status.</p>
                */
            StepInfo?: ClusterOperationStepInfo;
            /**
                * <p>The name of the step.</p>
                */
            StepName?: string;
    }
    export namespace ClusterOperationStep {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClusterOperationStep) => any;
    }
    /**
        * <p>Specifies the configuration to use for the brokers.</p>
        */
    export interface ConfigurationInfo {
            /**
                * <p>ARN of the configuration to use.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The revision of the configuration to use.</p>
                */
            Revision: number | undefined;
    }
    export namespace ConfigurationInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationInfo) => any;
    }
    /**
        * <p>Information about cluster attributes that can be updated via update APIs.</p>
        */
    export interface MutableClusterInfo {
            /**
                * <p>Specifies the size of the EBS volume and the ID of the associated broker.</p>
                */
            BrokerEBSVolumeInfo?: BrokerEBSVolumeInfo[];
            /**
                * <p>Information about the changes in the configuration of the brokers.</p>
                */
            ConfigurationInfo?: ConfigurationInfo;
            /**
                * <p>The number of broker nodes in the cluster.</p>
                */
            NumberOfBrokerNodes?: number;
            /**
                * <p>Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.</p>
                */
            EnhancedMonitoring?: EnhancedMonitoring | string;
            /**
                * <p>The settings for open monitoring.</p>
                */
            OpenMonitoring?: OpenMonitoring;
            /**
                * <p>The Apache Kafka version.</p>
                */
            KafkaVersion?: string;
            /**
                * <p>You can configure your MSK cluster to send broker logs to different destination types. This is a container for the configuration details related to broker logs.</p>
                */
            LoggingInfo?: LoggingInfo;
            /**
                * <p>Information about the Amazon MSK broker type.</p>
                */
            InstanceType?: string;
            /**
                * <p>Includes all client authentication information.</p>
                */
            ClientAuthentication?: ClientAuthentication;
            /**
                * <p>Includes all encryption-related information.</p>
                */
            EncryptionInfo?: EncryptionInfo;
            /**
                * <p>Information about the broker access configuration.</p>
                */
            ConnectivityInfo?: ConnectivityInfo;
    }
    export namespace MutableClusterInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MutableClusterInfo) => any;
    }
    /**
        * <p>Returns information about a cluster operation.</p>
        */
    export interface ClusterOperationInfo {
            /**
                * <p>The ID of the API request that triggered this operation.</p>
                */
            ClientRequestId?: string;
            /**
                * <p>ARN of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The time that the operation was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The time at which the operation finished.</p>
                */
            EndTime?: Date;
            /**
                * <p>Describes the error if the operation fails.</p>
                */
            ErrorInfo?: ErrorInfo;
            /**
                * <p>ARN of the cluster operation.</p>
                */
            OperationArn?: string;
            /**
                * <p>State of the cluster operation.</p>
                */
            OperationState?: string;
            /**
                * <p>Steps completed during the operation.</p>
                */
            OperationSteps?: ClusterOperationStep[];
            /**
                * <p>Type of the cluster operation.</p>
                */
            OperationType?: string;
            /**
                * <p>Information about cluster attributes before a cluster is updated.</p>
                */
            SourceClusterInfo?: MutableClusterInfo;
            /**
                * <p>Information about cluster attributes after a cluster is updated.</p>
                */
            TargetClusterInfo?: MutableClusterInfo;
    }
    export namespace ClusterOperationInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ClusterOperationInfo) => any;
    }
    /**
        * <p>Contains source Apache Kafka versions and compatible target Apache Kafka versions.</p>
        */
    export interface CompatibleKafkaVersion {
            /**
                * <p>An Apache Kafka version.</p>
                */
            SourceVersion?: string;
            /**
                * <p>A list of Apache Kafka versions.</p>
                */
            TargetVersions?: string[];
    }
    export namespace CompatibleKafkaVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CompatibleKafkaVersion) => any;
    }
    /**
        * <p>Describes a configuration revision.</p>
        */
    export interface ConfigurationRevision {
            /**
                * <p>The time when the configuration revision was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The description of the configuration revision.</p>
                */
            Description?: string;
            /**
                * <p>The revision number.</p>
                */
            Revision: number | undefined;
    }
    export namespace ConfigurationRevision {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ConfigurationRevision) => any;
    }
    export enum ConfigurationState {
            ACTIVE = "ACTIVE",
            DELETE_FAILED = "DELETE_FAILED",
            DELETING = "DELETING"
    }
    /**
        * <p>Represents an MSK Configuration.</p>
        */
    export interface Configuration {
            /**
                * <p>The Amazon Resource Name (ARN) of the configuration.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The time when the configuration was created.</p>
                */
            CreationTime: Date | undefined;
            /**
                * <p>The description of the configuration.</p>
                */
            Description: string | undefined;
            /**
                * <p>An array of the versions of Apache Kafka with which you can use this MSK configuration. You can use this configuration for an MSK cluster only if the Apache Kafka version specified for the cluster appears in this array.</p>
                */
            KafkaVersions: string[] | undefined;
            /**
                * <p>Latest revision of the configuration.</p>
                */
            LatestRevision: ConfigurationRevision | undefined;
            /**
                * <p>The name of the configuration.</p>
                */
            Name: string | undefined;
            /**
                * <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
                */
            State: ConfigurationState | string | undefined;
    }
    export namespace Configuration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Configuration) => any;
    }
    export enum KafkaVersionStatus {
            ACTIVE = "ACTIVE",
            DEPRECATED = "DEPRECATED"
    }
    export interface KafkaVersion {
            Version?: string;
            Status?: KafkaVersionStatus | string;
    }
    export namespace KafkaVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: KafkaVersion) => any;
    }
    /**
        * <p>BrokerNodeInfo</p>
        */
    export interface BrokerNodeInfo {
            /**
                * <p>The attached elastic network interface of the broker.</p>
                */
            AttachedENIId?: string;
            /**
                * <p>The ID of the broker.</p>
                */
            BrokerId?: number;
            /**
                * <p>The client subnet to which this broker node belongs.</p>
                */
            ClientSubnet?: string;
            /**
                * <p>The virtual private cloud (VPC) of the client.</p>
                */
            ClientVpcIpAddress?: string;
            /**
                * <p>Information about the version of software currently deployed on the Apache Kafka brokers in the cluster.</p>
                */
            CurrentBrokerSoftwareInfo?: BrokerSoftwareInfo;
            /**
                * <p>Endpoints for accessing the broker.</p>
                */
            Endpoints?: string[];
    }
    export namespace BrokerNodeInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BrokerNodeInfo) => any;
    }
    export enum NodeType {
            BROKER = "BROKER"
    }
    /**
        * <p>Zookeeper node information.</p>
        */
    export interface ZookeeperNodeInfo {
            /**
                * <p>The attached elastic network interface of the broker.</p>
                */
            AttachedENIId?: string;
            /**
                * <p>The virtual private cloud (VPC) IP address of the client.</p>
                */
            ClientVpcIpAddress?: string;
            /**
                * <p>Endpoints for accessing the ZooKeeper.</p>
                */
            Endpoints?: string[];
            /**
                * <p>The role-specific ID for Zookeeper.</p>
                */
            ZookeeperId?: number;
            /**
                * <p>The version of Zookeeper.</p>
                */
            ZookeeperVersion?: string;
    }
    export namespace ZookeeperNodeInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ZookeeperNodeInfo) => any;
    }
    /**
        * <p>The node information object.</p>
        */
    export interface NodeInfo {
            /**
                * <p>The start time.</p>
                */
            AddedToClusterTime?: string;
            /**
                * <p>The broker node info.</p>
                */
            BrokerNodeInfo?: BrokerNodeInfo;
            /**
                * <p>The instance type.</p>
                */
            InstanceType?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the node.</p>
                */
            NodeARN?: string;
            /**
                * <p>The node type.</p>
                */
            NodeType?: NodeType | string;
            /**
                * <p>The ZookeeperNodeInfo.</p>
                */
            ZookeeperNodeInfo?: ZookeeperNodeInfo;
    }
    export namespace NodeInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: NodeInfo) => any;
    }
    /**
        * <p>Error info for scram secret associate/disassociate failure.</p>
        */
    export interface UnprocessedScramSecret {
            /**
                * <p>Error code for associate/disassociate failure.</p>
                */
            ErrorCode?: string;
            /**
                * <p>Error message for associate/disassociate failure.</p>
                */
            ErrorMessage?: string;
            /**
                * <p>AWS Secrets Manager secret ARN.</p>
                */
            SecretArn?: string;
    }
    export namespace UnprocessedScramSecret {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UnprocessedScramSecret) => any;
    }
    /**
        * <p>Returns information about an error.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            /**
                * <p>The parameter that caused the error.</p>
                */
            InvalidParameter?: string;
            /**
                * <p>The description of the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    /**
        * <p>Associates sasl scram secrets to cluster.</p>
        */
    export interface BatchAssociateScramSecretRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
                */
            ClusterArn: string | undefined;
            /**
                * <p>List of AWS Secrets Manager secret ARNs.</p>
                */
            SecretArnList: string[] | undefined;
    }
    export namespace BatchAssociateScramSecretRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAssociateScramSecretRequest) => any;
    }
    export interface BatchAssociateScramSecretResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>List of errors when associating secrets to cluster.</p>
                */
            UnprocessedScramSecrets?: UnprocessedScramSecret[];
    }
    export namespace BatchAssociateScramSecretResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAssociateScramSecretResponse) => any;
    }
    /**
        * <p>Returns information about an error.</p>
        */
    export class ForbiddenException extends __BaseException {
            readonly name: "ForbiddenException";
            readonly $fault: "client";
            /**
                * <p>The parameter that caused the error.</p>
                */
            InvalidParameter?: string;
            /**
                * <p>The description of the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
    }
    /**
        * <p>Returns information about an error.</p>
        */
    export class InternalServerErrorException extends __BaseException {
            readonly name: "InternalServerErrorException";
            readonly $fault: "server";
            /**
                * <p>The parameter that caused the error.</p>
                */
            InvalidParameter?: string;
            /**
                * <p>The description of the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerErrorException, __BaseException>);
    }
    /**
        * <p>Returns information about an error.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            /**
                * <p>The parameter that caused the error.</p>
                */
            InvalidParameter?: string;
            /**
                * <p>The description of the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * <p>Returns information about an error.</p>
        */
    export class ServiceUnavailableException extends __BaseException {
            readonly name: "ServiceUnavailableException";
            readonly $fault: "server";
            /**
                * <p>The parameter that caused the error.</p>
                */
            InvalidParameter?: string;
            /**
                * <p>The description of the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
    }
    /**
        * <p>Returns information about an error.</p>
        */
    export class TooManyRequestsException extends __BaseException {
            readonly name: "TooManyRequestsException";
            readonly $fault: "client";
            /**
                * <p>The parameter that caused the error.</p>
                */
            InvalidParameter?: string;
            /**
                * <p>The description of the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
    }
    /**
        * <p>Returns information about an error.</p>
        */
    export class UnauthorizedException extends __BaseException {
            readonly name: "UnauthorizedException";
            readonly $fault: "client";
            /**
                * <p>The parameter that caused the error.</p>
                */
            InvalidParameter?: string;
            /**
                * <p>The description of the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnauthorizedException, __BaseException>);
    }
    /**
        * <p>Disassociates sasl scram secrets to cluster.</p>
        */
    export interface BatchDisassociateScramSecretRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
                */
            ClusterArn: string | undefined;
            /**
                * <p>List of AWS Secrets Manager secret ARNs.</p>
                */
            SecretArnList: string[] | undefined;
    }
    export namespace BatchDisassociateScramSecretRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDisassociateScramSecretRequest) => any;
    }
    export interface BatchDisassociateScramSecretResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>List of errors when disassociating secrets to cluster.</p>
                */
            UnprocessedScramSecrets?: UnprocessedScramSecret[];
    }
    export namespace BatchDisassociateScramSecretResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDisassociateScramSecretResponse) => any;
    }
    /**
        * <p>Returns information about an error.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>The parameter that caused the error.</p>
                */
            InvalidParameter?: string;
            /**
                * <p>The description of the error.</p>
                */
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    export interface CreateClusterRequest {
            /**
                * <p>Information about the broker nodes in the cluster.</p>
                */
            BrokerNodeGroupInfo: BrokerNodeGroupInfo | undefined;
            /**
                * <p>Includes all client authentication related information.</p>
                */
            ClientAuthentication?: ClientAuthentication;
            /**
                * <p>The name of the cluster.</p>
                */
            ClusterName: string | undefined;
            /**
                * <p>Represents the configuration that you want MSK to use for the brokers in a cluster.</p>
                */
            ConfigurationInfo?: ConfigurationInfo;
            /**
                * <p>Includes all encryption-related information.</p>
                */
            EncryptionInfo?: EncryptionInfo;
            /**
                * <p>Specifies the level of monitoring for the MSK cluster. The possible values are DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION.</p>
                */
            EnhancedMonitoring?: EnhancedMonitoring | string;
            /**
                * <p>The settings for open monitoring.</p>
                */
            OpenMonitoring?: OpenMonitoringInfo;
            /**
                * <p>The version of Apache Kafka.</p>
                */
            KafkaVersion: string | undefined;
            LoggingInfo?: LoggingInfo;
            /**
                * <p>The number of broker nodes in the cluster.</p>
                */
            NumberOfBrokerNodes: number | undefined;
            /**
                * <p>Create tags when creating the cluster.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace CreateClusterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateClusterRequest) => any;
    }
    export interface CreateClusterResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The name of the MSK cluster.</p>
                */
            ClusterName?: string;
            /**
                * <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
                */
            State?: ClusterState | string;
    }
    export namespace CreateClusterResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateClusterResponse) => any;
    }
    /**
        * <p>Provisioned cluster request.</p>
        */
    export interface ProvisionedRequest {
            /**
                * <p>Information about the brokers.</p>
                */
            BrokerNodeGroupInfo: BrokerNodeGroupInfo | undefined;
            /**
                * <p>Includes all client authentication information.</p>
                */
            ClientAuthentication?: ClientAuthentication;
            /**
                * <p>Represents the configuration that you want Amazon MSK to use for the brokers in a cluster.</p>
                */
            ConfigurationInfo?: ConfigurationInfo;
            /**
                * <p>Includes all encryption-related information.</p>
                */
            EncryptionInfo?: EncryptionInfo;
            /**
                * <p>Specifies the level of monitoring for the MSK cluster. The possible values are DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION.</p>
                */
            EnhancedMonitoring?: EnhancedMonitoring | string;
            /**
                * <p>The settings for open monitoring.</p>
                */
            OpenMonitoring?: OpenMonitoringInfo;
            /**
                * <p>The Apache Kafka version that you want for the cluster.</p>
                */
            KafkaVersion: string | undefined;
            /**
                * <p>Log delivery information for the cluster.</p>
                */
            LoggingInfo?: LoggingInfo;
            /**
                * <p>The number of broker nodes in the cluster.</p>
                */
            NumberOfBrokerNodes: number | undefined;
    }
    export namespace ProvisionedRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProvisionedRequest) => any;
    }
    /**
        * <p>Serverless cluster request.</p>
        */
    export interface ServerlessRequest {
            /**
                * <p>The configuration of the Amazon VPCs for the cluster.</p>
                */
            VpcConfigs: VpcConfig[] | undefined;
            /**
                * <p>Includes all client authentication information.</p>
                */
            ClientAuthentication?: ServerlessClientAuthentication;
    }
    export namespace ServerlessRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerlessRequest) => any;
    }
    export interface CreateClusterV2Request {
            /**
                * <p>The name of the cluster.</p>
                */
            ClusterName: string | undefined;
            /**
                * <p>A map of tags that you want the cluster to have.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>Information about the provisioned cluster.</p>
                */
            Provisioned?: ProvisionedRequest;
            /**
                * <p>Information about the serverless cluster.</p>
                */
            Serverless?: ServerlessRequest;
    }
    export namespace CreateClusterV2Request {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateClusterV2Request) => any;
    }
    export interface CreateClusterV2Response {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The name of the MSK cluster.</p>
                */
            ClusterName?: string;
            /**
                * <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
                */
            State?: ClusterState | string;
            /**
                * <p>The type of the cluster. The possible states are PROVISIONED or SERVERLESS.</p>
                */
            ClusterType?: ClusterType | string;
    }
    export namespace CreateClusterV2Response {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateClusterV2Response) => any;
    }
    export interface CreateConfigurationRequest {
            /**
                * <p>The description of the configuration.</p>
                */
            Description?: string;
            /**
                * <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
                */
            KafkaVersions?: string[];
            /**
                * <p>The name of the configuration.</p>
                */
            Name: string | undefined;
            /**
                * <p>Contents of the <filename>server.properties</filename> file. When using the API, you must ensure that the contents of the file are base64 encoded.
                *                When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>server.properties</filename> can be in plaintext.</p>
                */
            ServerProperties: Uint8Array | undefined;
    }
    export namespace CreateConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationRequest) => any;
    }
    export interface CreateConfigurationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the configuration.</p>
                */
            Arn?: string;
            /**
                * <p>The time when the configuration was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Latest revision of the configuration.</p>
                */
            LatestRevision?: ConfigurationRevision;
            /**
                * <p>The name of the configuration.</p>
                */
            Name?: string;
            /**
                * <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
                */
            State?: ConfigurationState | string;
    }
    export namespace CreateConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateConfigurationResponse) => any;
    }
    export interface DeleteClusterRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
                */
            ClusterArn: string | undefined;
            /**
                * <p>The current version of the MSK cluster.</p>
                */
            CurrentVersion?: string;
    }
    export namespace DeleteClusterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteClusterRequest) => any;
    }
    export interface DeleteClusterResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
                */
            State?: ClusterState | string;
    }
    export namespace DeleteClusterResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteClusterResponse) => any;
    }
    export interface DeleteConfigurationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.</p>
                */
            Arn: string | undefined;
    }
    export namespace DeleteConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationRequest) => any;
    }
    export interface DeleteConfigurationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.</p>
                */
            Arn?: string;
            /**
                * <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
                */
            State?: ConfigurationState | string;
    }
    export namespace DeleteConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteConfigurationResponse) => any;
    }
    export interface DescribeClusterRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
                */
            ClusterArn: string | undefined;
    }
    export namespace DescribeClusterRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeClusterRequest) => any;
    }
    export interface DescribeClusterResponse {
            /**
                * <p>The cluster information.</p>
                */
            ClusterInfo?: ClusterInfo;
    }
    export namespace DescribeClusterResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeClusterResponse) => any;
    }
    export interface DescribeClusterOperationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the MSK cluster operation.</p>
                */
            ClusterOperationArn: string | undefined;
    }
    export namespace DescribeClusterOperationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeClusterOperationRequest) => any;
    }
    export interface DescribeClusterOperationResponse {
            /**
                * <p>Cluster operation information</p>
                */
            ClusterOperationInfo?: ClusterOperationInfo;
    }
    export namespace DescribeClusterOperationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeClusterOperationResponse) => any;
    }
    export interface DescribeClusterV2Request {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
                */
            ClusterArn: string | undefined;
    }
    export namespace DescribeClusterV2Request {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeClusterV2Request) => any;
    }
    export interface DescribeClusterV2Response {
            /**
                * <p>The cluster information.</p>
                */
            ClusterInfo?: Cluster;
    }
    export namespace DescribeClusterV2Response {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeClusterV2Response) => any;
    }
    export interface DescribeConfigurationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>
                */
            Arn: string | undefined;
    }
    export namespace DescribeConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationRequest) => any;
    }
    export interface DescribeConfigurationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the configuration.</p>
                */
            Arn?: string;
            /**
                * <p>The time when the configuration was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The description of the configuration.</p>
                */
            Description?: string;
            /**
                * <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
                */
            KafkaVersions?: string[];
            /**
                * <p>Latest revision of the configuration.</p>
                */
            LatestRevision?: ConfigurationRevision;
            /**
                * <p>The name of the configuration.</p>
                */
            Name?: string;
            /**
                * <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
                */
            State?: ConfigurationState | string;
    }
    export namespace DescribeConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationResponse) => any;
    }
    export interface DescribeConfigurationRevisionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>
                */
            Arn: string | undefined;
            /**
                * <p>A string that uniquely identifies a revision of an MSK configuration.</p>
                */
            Revision: number | undefined;
    }
    export namespace DescribeConfigurationRevisionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationRevisionRequest) => any;
    }
    export interface DescribeConfigurationRevisionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the configuration.</p>
                */
            Arn?: string;
            /**
                * <p>The time when the configuration was created.</p>
                */
            CreationTime?: Date;
            /**
                * <p>The description of the configuration.</p>
                */
            Description?: string;
            /**
                * <p>The revision number.</p>
                */
            Revision?: number;
            /**
                * <p>Contents of the <filename>server.properties</filename> file. When using the API, you must ensure that the contents of the file are base64 encoded.
                *                When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>server.properties</filename> can be in plaintext.</p>
                */
            ServerProperties?: Uint8Array;
    }
    export namespace DescribeConfigurationRevisionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeConfigurationRevisionResponse) => any;
    }
    export interface GetBootstrapBrokersRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
                */
            ClusterArn: string | undefined;
    }
    export namespace GetBootstrapBrokersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBootstrapBrokersRequest) => any;
    }
    export interface GetBootstrapBrokersResponse {
            /**
                * <p>A string containing one or more hostname:port pairs.</p>
                */
            BootstrapBrokerString?: string;
            /**
                * <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
                */
            BootstrapBrokerStringTls?: string;
            /**
                * <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
                */
            BootstrapBrokerStringSaslScram?: string;
            /**
                * <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
                */
            BootstrapBrokerStringSaslIam?: string;
            /**
                * <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
                */
            BootstrapBrokerStringPublicTls?: string;
            /**
                * <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
                */
            BootstrapBrokerStringPublicSaslScram?: string;
            /**
                * <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
                */
            BootstrapBrokerStringPublicSaslIam?: string;
    }
    export namespace GetBootstrapBrokersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetBootstrapBrokersResponse) => any;
    }
    export interface GetCompatibleKafkaVersionsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster check.</p>
                */
            ClusterArn?: string;
    }
    export namespace GetCompatibleKafkaVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCompatibleKafkaVersionsRequest) => any;
    }
    export interface GetCompatibleKafkaVersionsResponse {
            /**
                * <p>A list of CompatibleKafkaVersion objects.</p>
                */
            CompatibleKafkaVersions?: CompatibleKafkaVersion[];
    }
    export namespace GetCompatibleKafkaVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCompatibleKafkaVersionsResponse) => any;
    }
    export interface ListClusterOperationsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
                */
            ClusterArn: string | undefined;
            /**
                * <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
                */
            MaxResults?: number;
            /**
                * <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response.
                *             To get the next batch, provide this token in your next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListClusterOperationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListClusterOperationsRequest) => any;
    }
    export interface ListClusterOperationsResponse {
            /**
                * <p>An array of cluster operation information objects.</p>
                */
            ClusterOperationInfoList?: ClusterOperationInfo[];
            /**
                * <p>If the response of ListClusterOperations is truncated, it returns a NextToken in the response. This Nexttoken should be sent in the subsequent request to ListClusterOperations.</p>
                */
            NextToken?: string;
    }
    export namespace ListClusterOperationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListClusterOperationsResponse) => any;
    }
    export interface ListClustersRequest {
            /**
                * <p>Specify a prefix of the name of the clusters that you want to list. The service lists all the clusters whose names start with this prefix.</p>
                */
            ClusterNameFilter?: string;
            /**
                * <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
                */
            MaxResults?: number;
            /**
                * <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response.
                *             To get the next batch, provide this token in your next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListClustersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListClustersRequest) => any;
    }
    export interface ListClustersResponse {
            /**
                * <p>Information on each of the MSK clusters in the response.</p>
                */
            ClusterInfoList?: ClusterInfo[];
            /**
                * <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response.
                *                To get another batch of clusters, provide this token in your next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListClustersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListClustersResponse) => any;
    }
    export interface ListClustersV2Request {
            /**
                * <p>Specify a prefix of the names of the clusters that you want to list. The service lists all the clusters whose names start with this prefix.</p>
                */
            ClusterNameFilter?: string;
            /**
                * <p>Specify either PROVISIONED or SERVERLESS.</p>
                */
            ClusterTypeFilter?: string;
            /**
                * <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
                */
            MaxResults?: number;
            /**
                * <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response.
                *             To get the next batch, provide this token in your next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListClustersV2Request {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListClustersV2Request) => any;
    }
    export interface ListClustersV2Response {
            /**
                * <p>Information on each of the MSK clusters in the response.</p>
                */
            ClusterInfoList?: Cluster[];
            /**
                * <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response.
                *                To get another batch of clusters, provide this token in your next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListClustersV2Response {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListClustersV2Response) => any;
    }
    export interface ListConfigurationRevisionsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
                */
            MaxResults?: number;
            /**
                * <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response.
                *             To get the next batch, provide this token in your next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListConfigurationRevisionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigurationRevisionsRequest) => any;
    }
    export interface ListConfigurationRevisionsResponse {
            /**
                * <p>Paginated results marker.</p>
                */
            NextToken?: string;
            /**
                * <p>List of ConfigurationRevision objects.</p>
                */
            Revisions?: ConfigurationRevision[];
    }
    export namespace ListConfigurationRevisionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigurationRevisionsResponse) => any;
    }
    export interface ListConfigurationsRequest {
            /**
                * <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
                */
            MaxResults?: number;
            /**
                * <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response.
                *             To get the next batch, provide this token in your next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListConfigurationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigurationsRequest) => any;
    }
    export interface ListConfigurationsResponse {
            /**
                * <p>An array of MSK configurations.</p>
                */
            Configurations?: Configuration[];
            /**
                * <p>The paginated results marker. When the result of a ListConfigurations operation is truncated, the call returns NextToken in the response.
                *                To get another batch of configurations, provide this token in your next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListConfigurationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListConfigurationsResponse) => any;
    }
    export interface ListKafkaVersionsRequest {
            /**
                * <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
                */
            MaxResults?: number;
            /**
                * <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListKafkaVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListKafkaVersionsRequest) => any;
    }
    export interface ListKafkaVersionsResponse {
            KafkaVersions?: KafkaVersion[];
            NextToken?: string;
    }
    export namespace ListKafkaVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListKafkaVersionsResponse) => any;
    }
    export interface ListNodesRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
                */
            ClusterArn: string | undefined;
            /**
                * <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
                */
            MaxResults?: number;
            /**
                * <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response.
                *             To get the next batch, provide this token in your next request.</p>
                */
            NextToken?: string;
    }
    export namespace ListNodesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNodesRequest) => any;
    }
    export interface ListNodesResponse {
            /**
                * <p>The paginated results marker. When the result of a ListNodes operation is truncated, the call returns NextToken in the response.
                *                To get another batch of nodes, provide this token in your next request.</p>
                */
            NextToken?: string;
            /**
                * <p>List containing a NodeInfo object.</p>
                */
            NodeInfoList?: NodeInfo[];
    }
    export namespace ListNodesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNodesResponse) => any;
    }
    export interface ListScramSecretsRequest {
            /**
                * <p>The arn of the cluster.</p>
                */
            ClusterArn: string | undefined;
            /**
                * <p>The maxResults of the query.</p>
                */
            MaxResults?: number;
            /**
                * <p>The nextToken of the query.</p>
                */
            NextToken?: string;
    }
    export namespace ListScramSecretsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListScramSecretsRequest) => any;
    }
    export interface ListScramSecretsResponse {
            /**
                * <p>Paginated results marker.</p>
                */
            NextToken?: string;
            /**
                * <p>The list of scram secrets associated with the cluster.</p>
                */
            SecretArnList?: string[];
    }
    export namespace ListScramSecretsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListScramSecretsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The key-value pair for the resource tag.</p>
                */
            Tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * Reboots a node.
        */
    export interface RebootBrokerRequest {
            /**
                * <p>The list of broker IDs to be rebooted. The reboot-broker operation supports rebooting one broker at a time.</p>
                */
            BrokerIds: string[] | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
                */
            ClusterArn: string | undefined;
    }
    export namespace RebootBrokerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootBrokerRequest) => any;
    }
    export interface RebootBrokerResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
                */
            ClusterOperationArn?: string;
    }
    export namespace RebootBrokerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RebootBrokerResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The key-value pair for the resource tag.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Tag keys must be unique for a given cluster. In addition, the following restrictions apply:</p>
                *             <ul>
                *                <li>
                *                   <p>Each tag key must be unique. If you add a tag with a key that's already in
                *                   use, your new tag overwrites the existing key-value pair. </p>
                *                </li>
                *                <li>
                *                   <p>You can't start a tag key with aws: because this prefix is reserved for use
                *                   by  AWS.  AWS creates tags that begin with this prefix on your behalf, but
                *                   you can't edit or delete them.</p>
                *                </li>
                *                <li>
                *                   <p>Tag keys must be between 1 and 128 Unicode characters in length.</p>
                *                </li>
                *                <li>
                *                   <p>Tag keys must consist of the following characters: Unicode letters, digits,
                *                   white space, and the following special characters: _ . / = + -
                *                      @.</p>
                *                </li>
                *             </ul>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UpdateBrokerCountRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
                */
            ClusterArn: string | undefined;
            /**
                * <p>The version of cluster to update from. A successful operation will then generate a new version.</p>
                */
            CurrentVersion: string | undefined;
            /**
                * <p>The number of broker nodes that you want the cluster to have after this operation completes successfully.</p>
                */
            TargetNumberOfBrokerNodes: number | undefined;
    }
    export namespace UpdateBrokerCountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBrokerCountRequest) => any;
    }
    export interface UpdateBrokerCountResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
                */
            ClusterOperationArn?: string;
    }
    export namespace UpdateBrokerCountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBrokerCountResponse) => any;
    }
    export interface UpdateBrokerStorageRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
                */
            ClusterArn: string | undefined;
            /**
                * <p>The version of cluster to update from. A successful operation will then generate a new version.</p>
                */
            CurrentVersion: string | undefined;
            /**
                * <p>Describes the target volume size and the ID of the broker to apply the update to.</p>
                */
            TargetBrokerEBSVolumeInfo: BrokerEBSVolumeInfo[] | undefined;
    }
    export namespace UpdateBrokerStorageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBrokerStorageRequest) => any;
    }
    export interface UpdateBrokerStorageResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
                */
            ClusterOperationArn?: string;
    }
    export namespace UpdateBrokerStorageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBrokerStorageResponse) => any;
    }
    export interface UpdateBrokerTypeRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
                */
            ClusterArn: string | undefined;
            /**
                * <p>The cluster version that you want to change. After this operation completes successfully, the cluster will have a new version.</p>
                */
            CurrentVersion: string | undefined;
            /**
                * <p>The Amazon MSK broker type that you want all of the brokers in this cluster to be.</p>
                */
            TargetInstanceType: string | undefined;
    }
    export namespace UpdateBrokerTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBrokerTypeRequest) => any;
    }
    export interface UpdateBrokerTypeResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
                */
            ClusterOperationArn?: string;
    }
    export namespace UpdateBrokerTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateBrokerTypeResponse) => any;
    }
    export interface UpdateClusterConfigurationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
                */
            ClusterArn: string | undefined;
            /**
                * <p>Represents the configuration that you want MSK to use for the brokers in a cluster.</p>
                */
            ConfigurationInfo: ConfigurationInfo | undefined;
            /**
                * <p>The version of the cluster that needs to be updated.</p>
                */
            CurrentVersion: string | undefined;
    }
    export namespace UpdateClusterConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateClusterConfigurationRequest) => any;
    }
    export interface UpdateClusterConfigurationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
                */
            ClusterOperationArn?: string;
    }
    export namespace UpdateClusterConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateClusterConfigurationResponse) => any;
    }
    export interface UpdateClusterKafkaVersionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
                */
            ClusterArn: string | undefined;
            /**
                * <p>The custom configuration that should be applied on the new version of cluster.</p>
                */
            ConfigurationInfo?: ConfigurationInfo;
            /**
                * <p>Current cluster version.</p>
                */
            CurrentVersion: string | undefined;
            /**
                * <p>Target Kafka version.</p>
                */
            TargetKafkaVersion: string | undefined;
    }
    export namespace UpdateClusterKafkaVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateClusterKafkaVersionRequest) => any;
    }
    export interface UpdateClusterKafkaVersionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
                */
            ClusterOperationArn?: string;
    }
    export namespace UpdateClusterKafkaVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateClusterKafkaVersionResponse) => any;
    }
    export interface UpdateConfigurationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the configuration.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The description of the configuration revision.</p>
                */
            Description?: string;
            /**
                * <p>Contents of the <filename>server.properties</filename> file. When using the API, you must ensure that the contents of the file are base64 encoded.
                *                When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>server.properties</filename> can be in plaintext.</p>
                */
            ServerProperties: Uint8Array | undefined;
    }
    export namespace UpdateConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationRequest) => any;
    }
    export interface UpdateConfigurationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the configuration.</p>
                */
            Arn?: string;
            /**
                * <p>Latest revision of the configuration.</p>
                */
            LatestRevision?: ConfigurationRevision;
    }
    export namespace UpdateConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConfigurationResponse) => any;
    }
    /**
        * Request body for UpdateConnectivity.
        */
    export interface UpdateConnectivityRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the configuration.</p>
                */
            ClusterArn: string | undefined;
            /**
                * <p>Information about the broker access configuration.</p>
                */
            ConnectivityInfo: ConnectivityInfo | undefined;
            /**
                * <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
                */
            CurrentVersion: string | undefined;
    }
    export namespace UpdateConnectivityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectivityRequest) => any;
    }
    export interface UpdateConnectivityResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
                */
            ClusterOperationArn?: string;
    }
    export namespace UpdateConnectivityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateConnectivityResponse) => any;
    }
    /**
        * Request body for UpdateMonitoring.
        */
    export interface UpdateMonitoringRequest {
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
                */
            ClusterArn: string | undefined;
            /**
                * <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
                */
            CurrentVersion: string | undefined;
            /**
                * <p>Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.</p>
                */
            EnhancedMonitoring?: EnhancedMonitoring | string;
            /**
                * <p>The settings for open monitoring.</p>
                */
            OpenMonitoring?: OpenMonitoringInfo;
            LoggingInfo?: LoggingInfo;
    }
    export namespace UpdateMonitoringRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMonitoringRequest) => any;
    }
    export interface UpdateMonitoringResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
                */
            ClusterOperationArn?: string;
    }
    export namespace UpdateMonitoringResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateMonitoringResponse) => any;
    }
    export interface UpdateSecurityRequest {
            /**
                * <p>Includes all client authentication related information.</p>
                */
            ClientAuthentication?: ClientAuthentication;
            /**
                * <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
                */
            ClusterArn: string | undefined;
            /**
                * <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
                */
            CurrentVersion: string | undefined;
            /**
                * <p>Includes all encryption-related information.</p>
                */
            EncryptionInfo?: EncryptionInfo;
    }
    export namespace UpdateSecurityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSecurityRequest) => any;
    }
    export interface UpdateSecurityResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster.</p>
                */
            ClusterArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
                */
            ClusterOperationArn?: string;
    }
    export namespace UpdateSecurityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSecurityResponse) => any;
    }
}

declare module '@aws-sdk/client-kafka/node_modules/@aws-sdk/client-kafka/dist-types/models/KafkaServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Kafka service.
        */
    export class KafkaServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

