// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-rum' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { CreateAppMonitorCommandInput, CreateAppMonitorCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/CreateAppMonitorCommand";
    import { DeleteAppMonitorCommandInput, DeleteAppMonitorCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/DeleteAppMonitorCommand";
    import { GetAppMonitorCommandInput, GetAppMonitorCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/GetAppMonitorCommand";
    import { GetAppMonitorDataCommandInput, GetAppMonitorDataCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/GetAppMonitorDataCommand";
    import { ListAppMonitorsCommandInput, ListAppMonitorsCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/ListAppMonitorsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/ListTagsForResourceCommand";
    import { PutRumEventsCommandInput, PutRumEventsCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/PutRumEventsCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/UntagResourceCommand";
    import { UpdateAppMonitorCommandInput, UpdateAppMonitorCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/UpdateAppMonitorCommand";
    import { RUMClient } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/RUMClient";
    /**
        * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about
        *        your web application performance from actual user sessions in real time. The data collected includes page load
        *        times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and
        *        also see breakdowns by the browsers and devices that your customers use.</p>
        *
        *          <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch
        *        RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error
        *        messages, stack traces, and user sessions. You can also use RUM to
        *        understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
        */
    export class RUM extends RUMClient {
            /**
                * <p>Creates a Amazon CloudWatch RUM app monitor, which collects telemetry data from your application and sends that
                *       data to RUM. The data includes performance and reliability information such as page load time, client-side errors,
                *       and user behavior.</p>
                *          <p>You use this operation only to create a new app monitor. To update an existing app monitor, use <a href="https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_UpdateAppMonitor.html">UpdateAppMonitor</a> instead.</p>
                *          <p>After you create an app monitor, sign in to the CloudWatch RUM console to get
                *          the JavaScript code snippet to add to your web application. For more information, see
                *          <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-find-code-snippet.html">How do I find a code snippet
                *          that I've already generated?</a>
                *          </p>
                */
            createAppMonitor(args: CreateAppMonitorCommandInput, options?: __HttpHandlerOptions): Promise<CreateAppMonitorCommandOutput>;
            createAppMonitor(args: CreateAppMonitorCommandInput, cb: (err: any, data?: CreateAppMonitorCommandOutput) => void): void;
            createAppMonitor(args: CreateAppMonitorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAppMonitorCommandOutput) => void): void;
            /**
                * <p>Deletes an existing app monitor. This immediately stops the collection of data.</p>
                */
            deleteAppMonitor(args: DeleteAppMonitorCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAppMonitorCommandOutput>;
            deleteAppMonitor(args: DeleteAppMonitorCommandInput, cb: (err: any, data?: DeleteAppMonitorCommandOutput) => void): void;
            deleteAppMonitor(args: DeleteAppMonitorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAppMonitorCommandOutput) => void): void;
            /**
                * <p>Retrieves the complete configuration information for one app monitor.</p>
                */
            getAppMonitor(args: GetAppMonitorCommandInput, options?: __HttpHandlerOptions): Promise<GetAppMonitorCommandOutput>;
            getAppMonitor(args: GetAppMonitorCommandInput, cb: (err: any, data?: GetAppMonitorCommandOutput) => void): void;
            getAppMonitor(args: GetAppMonitorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAppMonitorCommandOutput) => void): void;
            /**
                * <p>Retrieves the raw performance events that RUM has collected from your web application,
                *          so that you can do your own processing or analysis of this data.</p>
                */
            getAppMonitorData(args: GetAppMonitorDataCommandInput, options?: __HttpHandlerOptions): Promise<GetAppMonitorDataCommandOutput>;
            getAppMonitorData(args: GetAppMonitorDataCommandInput, cb: (err: any, data?: GetAppMonitorDataCommandOutput) => void): void;
            getAppMonitorData(args: GetAppMonitorDataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAppMonitorDataCommandOutput) => void): void;
            /**
                * <p>Returns a list of the Amazon CloudWatch RUM app monitors in the account.</p>
                */
            listAppMonitors(args: ListAppMonitorsCommandInput, options?: __HttpHandlerOptions): Promise<ListAppMonitorsCommandOutput>;
            listAppMonitors(args: ListAppMonitorsCommandInput, cb: (err: any, data?: ListAppMonitorsCommandOutput) => void): void;
            listAppMonitors(args: ListAppMonitorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAppMonitorsCommandOutput) => void): void;
            /**
                * <p>Displays the tags associated with a CloudWatch RUM resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Sends telemetry events about your application performance and user behavior to CloudWatch RUM. The code
                *       snippet that RUM generates for you to add to your application includes <code>PutRumEvents</code> operations to
                *       send this data to RUM.</p>
                *          <p>Each <code>PutRumEvents</code> operation can send a batch of events from one user session.</p>
                */
            putRumEvents(args: PutRumEventsCommandInput, options?: __HttpHandlerOptions): Promise<PutRumEventsCommandOutput>;
            putRumEvents(args: PutRumEventsCommandInput, cb: (err: any, data?: PutRumEventsCommandOutput) => void): void;
            putRumEvents(args: PutRumEventsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutRumEventsCommandOutput) => void): void;
            /**
                * <p>Assigns one or more tags (key-value pairs) to the specified CloudWatch RUM resource. Currently,
                *        the only resources that
                *        can be tagged app monitors.</p>
                *          <p>Tags can help you organize and categorize your resources. You can also use them to scope user
                *        permissions by granting a user
                *        permission to access or change only resources with certain tag values.</p>
                *          <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
                *          <p>You can use the <code>TagResource</code> action with a resource that already has tags.
                *        If you specify a new tag key for the resource,
                *        this tag is appended to the list of tags associated
                *        with the alarm. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces
                *        the previous value for that tag.</p>
                *          <p>You can associate as many as 50 tags with a resource.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes one or more tags from the specified resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the configuration of an existing app monitor. When you use this operation, only the parts of the app monitor
                *          configuration that you specify in this operation are changed. For any parameters that you omit, the existing
                *          values are kept.</p>
                *          <p>You can't use this operation to change the tags of an existing app monitor. To change the tags of an existing app monitor, use
                *          <a href="https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_TagResource.html">TagResource</a>.</p>
                *          <p>To create a new app monitor, use <a href="https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_CreateAppMonitor.html">CreateAppMonitor</a>.</p>
                *          <p>After you update an app monitor, sign in to the CloudWatch RUM console to get
                *          the updated JavaScript code snippet to add to your web application. For more information, see
                *          <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-find-code-snippet.html">How do I find a code snippet
                *             that I've already generated?</a>
                *          </p>
                */
            updateAppMonitor(args: UpdateAppMonitorCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAppMonitorCommandOutput>;
            updateAppMonitor(args: UpdateAppMonitorCommandInput, cb: (err: any, data?: UpdateAppMonitorCommandOutput) => void): void;
            updateAppMonitor(args: UpdateAppMonitorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAppMonitorCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/CreateAppMonitorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateAppMonitorRequest, CreateAppMonitorResponse } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/models/models_0";
    import { RUMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/RUMClient";
    export interface CreateAppMonitorCommandInput extends CreateAppMonitorRequest {
    }
    export interface CreateAppMonitorCommandOutput extends CreateAppMonitorResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a Amazon CloudWatch RUM app monitor, which collects telemetry data from your application and sends that
        *       data to RUM. The data includes performance and reliability information such as page load time, client-side errors,
        *       and user behavior.</p>
        *          <p>You use this operation only to create a new app monitor. To update an existing app monitor, use <a href="https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_UpdateAppMonitor.html">UpdateAppMonitor</a> instead.</p>
        *          <p>After you create an app monitor, sign in to the CloudWatch RUM console to get
        *          the JavaScript code snippet to add to your web application. For more information, see
        *          <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-find-code-snippet.html">How do I find a code snippet
        *          that I've already generated?</a>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RUMClient, CreateAppMonitorCommand } from "@aws-sdk/client-rum"; // ES Modules import
        * // const { RUMClient, CreateAppMonitorCommand } = require("@aws-sdk/client-rum"); // CommonJS import
        * const client = new RUMClient(config);
        * const command = new CreateAppMonitorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAppMonitorCommandInput} for command's `input` shape.
        * @see {@link CreateAppMonitorCommandOutput} for command's `response` shape.
        * @see {@link RUMClientResolvedConfig | config} for RUMClient's `config` shape.
        *
        */
    export class CreateAppMonitorCommand extends $Command<CreateAppMonitorCommandInput, CreateAppMonitorCommandOutput, RUMClientResolvedConfig> {
            readonly input: CreateAppMonitorCommandInput;
            constructor(input: CreateAppMonitorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RUMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAppMonitorCommandInput, CreateAppMonitorCommandOutput>;
    }
}

declare module '@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/DeleteAppMonitorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteAppMonitorRequest, DeleteAppMonitorResponse } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/models/models_0";
    import { RUMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/RUMClient";
    export interface DeleteAppMonitorCommandInput extends DeleteAppMonitorRequest {
    }
    export interface DeleteAppMonitorCommandOutput extends DeleteAppMonitorResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an existing app monitor. This immediately stops the collection of data.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RUMClient, DeleteAppMonitorCommand } from "@aws-sdk/client-rum"; // ES Modules import
        * // const { RUMClient, DeleteAppMonitorCommand } = require("@aws-sdk/client-rum"); // CommonJS import
        * const client = new RUMClient(config);
        * const command = new DeleteAppMonitorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAppMonitorCommandInput} for command's `input` shape.
        * @see {@link DeleteAppMonitorCommandOutput} for command's `response` shape.
        * @see {@link RUMClientResolvedConfig | config} for RUMClient's `config` shape.
        *
        */
    export class DeleteAppMonitorCommand extends $Command<DeleteAppMonitorCommandInput, DeleteAppMonitorCommandOutput, RUMClientResolvedConfig> {
            readonly input: DeleteAppMonitorCommandInput;
            constructor(input: DeleteAppMonitorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RUMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAppMonitorCommandInput, DeleteAppMonitorCommandOutput>;
    }
}

declare module '@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/GetAppMonitorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAppMonitorRequest, GetAppMonitorResponse } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/models/models_0";
    import { RUMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/RUMClient";
    export interface GetAppMonitorCommandInput extends GetAppMonitorRequest {
    }
    export interface GetAppMonitorCommandOutput extends GetAppMonitorResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the complete configuration information for one app monitor.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RUMClient, GetAppMonitorCommand } from "@aws-sdk/client-rum"; // ES Modules import
        * // const { RUMClient, GetAppMonitorCommand } = require("@aws-sdk/client-rum"); // CommonJS import
        * const client = new RUMClient(config);
        * const command = new GetAppMonitorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAppMonitorCommandInput} for command's `input` shape.
        * @see {@link GetAppMonitorCommandOutput} for command's `response` shape.
        * @see {@link RUMClientResolvedConfig | config} for RUMClient's `config` shape.
        *
        */
    export class GetAppMonitorCommand extends $Command<GetAppMonitorCommandInput, GetAppMonitorCommandOutput, RUMClientResolvedConfig> {
            readonly input: GetAppMonitorCommandInput;
            constructor(input: GetAppMonitorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RUMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAppMonitorCommandInput, GetAppMonitorCommandOutput>;
    }
}

declare module '@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/GetAppMonitorDataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetAppMonitorDataRequest, GetAppMonitorDataResponse } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/models/models_0";
    import { RUMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/RUMClient";
    export interface GetAppMonitorDataCommandInput extends GetAppMonitorDataRequest {
    }
    export interface GetAppMonitorDataCommandOutput extends GetAppMonitorDataResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the raw performance events that RUM has collected from your web application,
        *          so that you can do your own processing or analysis of this data.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RUMClient, GetAppMonitorDataCommand } from "@aws-sdk/client-rum"; // ES Modules import
        * // const { RUMClient, GetAppMonitorDataCommand } = require("@aws-sdk/client-rum"); // CommonJS import
        * const client = new RUMClient(config);
        * const command = new GetAppMonitorDataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAppMonitorDataCommandInput} for command's `input` shape.
        * @see {@link GetAppMonitorDataCommandOutput} for command's `response` shape.
        * @see {@link RUMClientResolvedConfig | config} for RUMClient's `config` shape.
        *
        */
    export class GetAppMonitorDataCommand extends $Command<GetAppMonitorDataCommandInput, GetAppMonitorDataCommandOutput, RUMClientResolvedConfig> {
            readonly input: GetAppMonitorDataCommandInput;
            constructor(input: GetAppMonitorDataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RUMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAppMonitorDataCommandInput, GetAppMonitorDataCommandOutput>;
    }
}

declare module '@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/ListAppMonitorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListAppMonitorsRequest, ListAppMonitorsResponse } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/models/models_0";
    import { RUMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/RUMClient";
    export interface ListAppMonitorsCommandInput extends ListAppMonitorsRequest {
    }
    export interface ListAppMonitorsCommandOutput extends ListAppMonitorsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a list of the Amazon CloudWatch RUM app monitors in the account.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RUMClient, ListAppMonitorsCommand } from "@aws-sdk/client-rum"; // ES Modules import
        * // const { RUMClient, ListAppMonitorsCommand } = require("@aws-sdk/client-rum"); // CommonJS import
        * const client = new RUMClient(config);
        * const command = new ListAppMonitorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAppMonitorsCommandInput} for command's `input` shape.
        * @see {@link ListAppMonitorsCommandOutput} for command's `response` shape.
        * @see {@link RUMClientResolvedConfig | config} for RUMClient's `config` shape.
        *
        */
    export class ListAppMonitorsCommand extends $Command<ListAppMonitorsCommandInput, ListAppMonitorsCommandOutput, RUMClientResolvedConfig> {
            readonly input: ListAppMonitorsCommandInput;
            constructor(input: ListAppMonitorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RUMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAppMonitorsCommandInput, ListAppMonitorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/models/models_0";
    import { RUMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/RUMClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Displays the tags associated with a CloudWatch RUM resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RUMClient, ListTagsForResourceCommand } from "@aws-sdk/client-rum"; // ES Modules import
        * // const { RUMClient, ListTagsForResourceCommand } = require("@aws-sdk/client-rum"); // CommonJS import
        * const client = new RUMClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link RUMClientResolvedConfig | config} for RUMClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, RUMClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RUMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/PutRumEventsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutRumEventsRequest, PutRumEventsResponse } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/models/models_0";
    import { RUMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/RUMClient";
    export interface PutRumEventsCommandInput extends PutRumEventsRequest {
    }
    export interface PutRumEventsCommandOutput extends PutRumEventsResponse, __MetadataBearer {
    }
    /**
        * <p>Sends telemetry events about your application performance and user behavior to CloudWatch RUM. The code
        *       snippet that RUM generates for you to add to your application includes <code>PutRumEvents</code> operations to
        *       send this data to RUM.</p>
        *          <p>Each <code>PutRumEvents</code> operation can send a batch of events from one user session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RUMClient, PutRumEventsCommand } from "@aws-sdk/client-rum"; // ES Modules import
        * // const { RUMClient, PutRumEventsCommand } = require("@aws-sdk/client-rum"); // CommonJS import
        * const client = new RUMClient(config);
        * const command = new PutRumEventsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutRumEventsCommandInput} for command's `input` shape.
        * @see {@link PutRumEventsCommandOutput} for command's `response` shape.
        * @see {@link RUMClientResolvedConfig | config} for RUMClient's `config` shape.
        *
        */
    export class PutRumEventsCommand extends $Command<PutRumEventsCommandInput, PutRumEventsCommandOutput, RUMClientResolvedConfig> {
            readonly input: PutRumEventsCommandInput;
            constructor(input: PutRumEventsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RUMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutRumEventsCommandInput, PutRumEventsCommandOutput>;
    }
}

declare module '@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/models/models_0";
    import { RUMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/RUMClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Assigns one or more tags (key-value pairs) to the specified CloudWatch RUM resource. Currently,
        *        the only resources that
        *        can be tagged app monitors.</p>
        *          <p>Tags can help you organize and categorize your resources. You can also use them to scope user
        *        permissions by granting a user
        *        permission to access or change only resources with certain tag values.</p>
        *          <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
        *          <p>You can use the <code>TagResource</code> action with a resource that already has tags.
        *        If you specify a new tag key for the resource,
        *        this tag is appended to the list of tags associated
        *        with the alarm. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces
        *        the previous value for that tag.</p>
        *          <p>You can associate as many as 50 tags with a resource.</p>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RUMClient, TagResourceCommand } from "@aws-sdk/client-rum"; // ES Modules import
        * // const { RUMClient, TagResourceCommand } = require("@aws-sdk/client-rum"); // CommonJS import
        * const client = new RUMClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link RUMClientResolvedConfig | config} for RUMClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, RUMClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RUMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/models/models_0";
    import { RUMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/RUMClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes one or more tags from the specified resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RUMClient, UntagResourceCommand } from "@aws-sdk/client-rum"; // ES Modules import
        * // const { RUMClient, UntagResourceCommand } = require("@aws-sdk/client-rum"); // CommonJS import
        * const client = new RUMClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link RUMClientResolvedConfig | config} for RUMClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, RUMClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RUMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/UpdateAppMonitorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateAppMonitorRequest, UpdateAppMonitorResponse } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/models/models_0";
    import { RUMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/RUMClient";
    export interface UpdateAppMonitorCommandInput extends UpdateAppMonitorRequest {
    }
    export interface UpdateAppMonitorCommandOutput extends UpdateAppMonitorResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the configuration of an existing app monitor. When you use this operation, only the parts of the app monitor
        *          configuration that you specify in this operation are changed. For any parameters that you omit, the existing
        *          values are kept.</p>
        *          <p>You can't use this operation to change the tags of an existing app monitor. To change the tags of an existing app monitor, use
        *          <a href="https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_TagResource.html">TagResource</a>.</p>
        *          <p>To create a new app monitor, use <a href="https://docs.aws.amazon.com/cloudwatchrum/latest/APIReference/API_CreateAppMonitor.html">CreateAppMonitor</a>.</p>
        *          <p>After you update an app monitor, sign in to the CloudWatch RUM console to get
        *          the updated JavaScript code snippet to add to your web application. For more information, see
        *          <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-RUM-find-code-snippet.html">How do I find a code snippet
        *             that I've already generated?</a>
        *          </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { RUMClient, UpdateAppMonitorCommand } from "@aws-sdk/client-rum"; // ES Modules import
        * // const { RUMClient, UpdateAppMonitorCommand } = require("@aws-sdk/client-rum"); // CommonJS import
        * const client = new RUMClient(config);
        * const command = new UpdateAppMonitorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAppMonitorCommandInput} for command's `input` shape.
        * @see {@link UpdateAppMonitorCommandOutput} for command's `response` shape.
        * @see {@link RUMClientResolvedConfig | config} for RUMClient's `config` shape.
        *
        */
    export class UpdateAppMonitorCommand extends $Command<UpdateAppMonitorCommandInput, UpdateAppMonitorCommandOutput, RUMClientResolvedConfig> {
            readonly input: UpdateAppMonitorCommandInput;
            constructor(input: UpdateAppMonitorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: RUMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAppMonitorCommandInput, UpdateAppMonitorCommandOutput>;
    }
}

declare module '@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/RUMClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { CreateAppMonitorCommandInput, CreateAppMonitorCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/CreateAppMonitorCommand";
    import { DeleteAppMonitorCommandInput, DeleteAppMonitorCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/DeleteAppMonitorCommand";
    import { GetAppMonitorCommandInput, GetAppMonitorCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/GetAppMonitorCommand";
    import { GetAppMonitorDataCommandInput, GetAppMonitorDataCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/GetAppMonitorDataCommand";
    import { ListAppMonitorsCommandInput, ListAppMonitorsCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/ListAppMonitorsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/ListTagsForResourceCommand";
    import { PutRumEventsCommandInput, PutRumEventsCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/PutRumEventsCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/UntagResourceCommand";
    import { UpdateAppMonitorCommandInput, UpdateAppMonitorCommandOutput } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/commands/UpdateAppMonitorCommand";
    export type ServiceInputTypes = CreateAppMonitorCommandInput | DeleteAppMonitorCommandInput | GetAppMonitorCommandInput | GetAppMonitorDataCommandInput | ListAppMonitorsCommandInput | ListTagsForResourceCommandInput | PutRumEventsCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateAppMonitorCommandInput;
    export type ServiceOutputTypes = CreateAppMonitorCommandOutput | DeleteAppMonitorCommandOutput | GetAppMonitorCommandOutput | GetAppMonitorDataCommandOutput | ListAppMonitorsCommandOutput | ListTagsForResourceCommandOutput | PutRumEventsCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateAppMonitorCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type RUMClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of RUMClient class constructor that set the region, credentials and other options.
        */
    export interface RUMClientConfig extends RUMClientConfigType {
    }
    type RUMClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of RUMClient class. This is resolved and normalized from the {@link RUMClientConfig | constructor configuration interface}.
        */
    export interface RUMClientResolvedConfig extends RUMClientResolvedConfigType {
    }
    /**
        * <p>With Amazon CloudWatch RUM, you can perform real-user monitoring to collect client-side data about
        *        your web application performance from actual user sessions in real time. The data collected includes page load
        *        times, client-side errors, and user behavior. When you view this data, you can see it all aggregated together and
        *        also see breakdowns by the browsers and devices that your customers use.</p>
        *
        *          <p>You can use the collected data to quickly identify and debug client-side performance issues. CloudWatch
        *        RUM helps you visualize anomalies in your application performance and find relevant debugging data such as error
        *        messages, stack traces, and user sessions. You can also use RUM to
        *        understand the range of end-user impact including the number of users, geolocations, and browsers used.</p>
        */
    export class RUMClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, RUMClientResolvedConfig> {
            /**
                * The resolved configuration of RUMClient class. This is resolved and normalized from the {@link RUMClientConfig | constructor configuration interface}.
                */
            readonly config: RUMClientResolvedConfig;
            constructor(configuration: RUMClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType, LazyJsonString as __LazyJsonString } from "@aws-sdk/smithy-client";
    import { RUMServiceException as __BaseException } from "@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/models/RUMServiceException";
    /**
        * <p>You don't have sufficient permissions to perform this action.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export enum Telemetry {
            /**
                * Includes JS error event plugin
                */
            ERRORS = "errors",
            /**
                * Includes X-Ray Xhr and X-Ray Fetch plugin
                */
            HTTP = "http",
            /**
                * Includes navigation, paint, resource and web vital event plugins
                */
            PERFORMANCE = "performance"
    }
    /**
        * <p>This structure contains much of the configuration data for the app monitor.</p>
        */
    export interface AppMonitorConfiguration {
            /**
                * <p>The ID of the Amazon Cognito identity pool
                *          that is used to authorize the sending of data to RUM.</p>
                */
            IdentityPoolId?: string;
            /**
                * <p>A list of URLs in your website or application to exclude from RUM data collection.</p>
                *          <p>You can't include both <code>ExcludedPages</code> and <code>IncludedPages</code> in the same operation.</p>
                */
            ExcludedPages?: string[];
            /**
                * <p>If this app monitor is to collect data from only certain pages in your application, this structure lists those pages. </p>
                *
                *          <p>You can't include both <code>ExcludedPages</code> and <code>IncludedPages</code> in the same operation.</p>
                */
            IncludedPages?: string[];
            /**
                * <p>A list of pages in the CloudWatch RUM console that are to be displayed with a "favorite" icon.</p>
                */
            FavoritePages?: string[];
            /**
                * <p>Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you
                *       more data but also incurs more costs.</p>
                *          <p>The number you specify is the percentage of user sessions that will be used.</p>
                *          <p>If you omit this parameter, the default of 10 is used.</p>
                */
            SessionSampleRate?: number;
            /**
                * <p>The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool
                *       that is used to authorize the sending of data to RUM.</p>
                */
            GuestRoleArn?: string;
            /**
                * <p>If you set this to <code>true</code>, the RUM web client sets two cookies, a session
                *          cookie and a user cookie. The cookies allow the RUM web client to collect data relating to
                *          the number of users an application has and the behavior of the application across a
                *          sequence of events. Cookies are stored in the top-level domain of the current page.</p>
                */
            AllowCookies?: boolean;
            /**
                * <p>An array that lists the types of telemetry data that this app monitor is to collect.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>errors</code> indicates that RUM collects data about unhandled JavaScript errors raised
                *          by your application.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>performance</code> indicates that RUM collects performance data about how your application
                *             and its resources are loaded and rendered. This includes Core Web Vitals.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>http</code> indicates that RUM collects data about HTTP errors thrown by your application.</p>
                *             </li>
                *          </ul>
                */
            Telemetries?: (Telemetry | string)[];
            /**
                * <p>If you set this to <code>true</code>, RUM enables X-Ray tracing for
                *          the user sessions that RUM samples. RUM adds an X-Ray trace header to allowed
                *          HTTP requests. It also records an X-Ray segment for allowed HTTP requests.
                *          You can see traces and segments from these user sessions in the X-Ray console
                *          and the CloudWatch ServiceLens console. For more information, see <a href="https://docs.aws.amazon.com/xray/latest/devguide/aws-xray.html">What is X-Ray?</a>
                *          </p>
                */
            EnableXRay?: boolean;
    }
    export namespace AppMonitorConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppMonitorConfiguration) => any;
    }
    /**
        * <p>A structure that contains the information about whether the app monitor stores copies of the data
        *       that RUM collects in CloudWatch Logs. If it does, this structure also contains the name of the log group.</p>
        */
    export interface CwLog {
            /**
                * <p>Indicated whether the app monitor stores copies of the data
                *          that RUM collects in CloudWatch Logs.</p>
                */
            CwLogEnabled?: boolean;
            /**
                * <p>The name of the log group where the copies are stored.</p>
                */
            CwLogGroup?: string;
    }
    export namespace CwLog {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CwLog) => any;
    }
    /**
        * <p>A structure that contains information about whether this app monitor stores a copy of
        *          the telemetry data that RUM collects using CloudWatch Logs.</p>
        */
    export interface DataStorage {
            /**
                * <p>A structure that contains the information about whether the app monitor stores copies of the data
                *          that RUM collects in CloudWatch Logs. If it does, this structure also contains the name of the log group.</p>
                */
            CwLog?: CwLog;
    }
    export namespace DataStorage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataStorage) => any;
    }
    export enum StateEnum {
            ACTIVE = "ACTIVE",
            CREATED = "CREATED",
            DELETING = "DELETING"
    }
    /**
        * <p>A RUM app monitor collects telemetry data from your application and sends that
        *          data to RUM. The data includes performance and reliability information such as page load time, client-side errors,
        *          and user behavior.</p>
        */
    export interface AppMonitor {
            /**
                * <p>The name of the app monitor.</p>
                */
            Name?: string;
            /**
                * <p>The top-level internet domain name for which your application has administrative authority.</p>
                */
            Domain?: string;
            /**
                * <p>The unique ID of this app monitor.</p>
                */
            Id?: string;
            /**
                * <p>The date and time that this app monitor was created.</p>
                */
            Created?: string;
            /**
                * <p>The date and time of the most recent changes to this app monitor's configuration.</p>
                */
            LastModified?: string;
            /**
                * <p>The list of tag keys and values associated with this app monitor.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>The current state of the app monitor.</p>
                */
            State?: StateEnum | string;
            /**
                * <p>A structure that contains much of the configuration data for the app monitor.</p>
                */
            AppMonitorConfiguration?: AppMonitorConfiguration;
            /**
                * <p>A structure that contains information about whether this app monitor stores a copy of
                *          the telemetry data that RUM collects using CloudWatch Logs.</p>
                */
            DataStorage?: DataStorage;
    }
    export namespace AppMonitor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppMonitor) => any;
    }
    /**
        * <p>A structure that contains information about the RUM app monitor.</p>
        */
    export interface AppMonitorDetails {
            /**
                * <p>The name of the app monitor.</p>
                */
            name?: string;
            /**
                * <p>The unique ID of the app monitor.</p>
                */
            id?: string;
            /**
                * <p>The version of the app monitor.</p>
                */
            version?: string;
    }
    export namespace AppMonitorDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppMonitorDetails) => any;
    }
    /**
        * <p>This operation attempted to create a resource that already exists.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            /**
                * <p>The name of the resource that is associated with the error.</p>
                */
            resourceName: string | undefined;
            /**
                * <p>The type of the resource that is associated with the error.</p>
                */
            resourceType?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    export interface CreateAppMonitorRequest {
            /**
                * <p>A name for the app monitor.</p>
                */
            Name: string | undefined;
            /**
                * <p>The top-level internet domain name for which your application has administrative authority.</p>
                */
            Domain: string | undefined;
            /**
                * <p>Assigns one or more tags (key-value pairs) to the app monitor.</p>
                *          <p>Tags can help you organize and categorize your resources. You can also use them to scope user
                *          permissions by granting a user
                *          permission to access or change only resources with certain tag values.</p>
                *          <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p>
                *
                *          <p>You can associate as many as 50 tags with an app monitor.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
                */
            Tags?: Record<string, string>;
            /**
                * <p>A structure that contains much of the configuration data for the app monitor. If you are using
                *          Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the
                *          Amazon Cognito identity pool to use for authorization. If you don't include <code>AppMonitorConfiguration</code>, you must set up your own
                *          authorization method. For more information, see
                *          <a href="https://docs.aws.amazon.com/monitoring/CloudWatch-RUM-get-started-authorization.html">Authorize your application
                *             to send data to Amazon Web Services</a>.</p>
                *          <p>If you omit this argument, the sample rate used for RUM is set to 10% of the user sessions.</p>
                */
            AppMonitorConfiguration?: AppMonitorConfiguration;
            /**
                * <p>Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM
                *          sends a copy of this telemetry data to Amazon CloudWatch Logs
                *          in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur
                *          Amazon CloudWatch Logs charges.</p>
                *          <p>If you omit this parameter, the default is <code>false</code>.</p>
                */
            CwLogEnabled?: boolean;
    }
    export namespace CreateAppMonitorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAppMonitorRequest) => any;
    }
    export interface CreateAppMonitorResponse {
            /**
                * <p>The unique ID of the new app monitor.</p>
                */
            Id?: string;
    }
    export namespace CreateAppMonitorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAppMonitorResponse) => any;
    }
    /**
        * <p>Internal service exception.</p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            $retryable: {};
            /**
                * <p>The value of a parameter in the request caused an error.</p>
                */
            retryAfterSeconds?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p>This request exceeds a service quota.</p>
        */
    export class ServiceQuotaExceededException extends __BaseException {
            readonly name: "ServiceQuotaExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>);
    }
    /**
        * <p>The request was throttled because of quota limits.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            $retryable: {
                    throttling: boolean;
            };
            /**
                * <p>The ID of the service that is associated with the error.</p>
                */
            serviceCode?: string;
            /**
                * <p>The ID of the service quota that was exceeded.</p>
                */
            quotaCode?: string;
            /**
                * <p>The value of a parameter in the request caused an error.</p>
                */
            retryAfterSeconds?: number;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>One of the arguments for the request is not valid.</p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface DeleteAppMonitorRequest {
            /**
                * <p>The name of the app monitor to delete.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteAppMonitorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppMonitorRequest) => any;
    }
    export interface DeleteAppMonitorResponse {
    }
    export namespace DeleteAppMonitorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAppMonitorResponse) => any;
    }
    /**
        * <p>Resource not found.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * <p>The name of the resource that is associated with the error.</p>
                */
            resourceName: string | undefined;
            /**
                * <p>The type of the resource that is associated with the error.</p>
                */
            resourceType?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    export interface GetAppMonitorRequest {
            /**
                * <p>The app monitor to retrieve information for.</p>
                */
            Name: string | undefined;
    }
    export namespace GetAppMonitorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppMonitorRequest) => any;
    }
    export interface GetAppMonitorResponse {
            /**
                * <p>A structure containing all the configuration information for the app monitor.</p>
                */
            AppMonitor?: AppMonitor;
    }
    export namespace GetAppMonitorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppMonitorResponse) => any;
    }
    /**
        * <p>A structure that defines a key and values that you can use to filter the results. The
        *          only performance events that are returned are those that have values matching the ones that
        *          you specify in one of your <code>QueryFilter</code> structures.</p>
        *          <p>For example, you could specify <code>Browser</code> as the <code>Name</code>
        *       and specify <code>Chrome,Firefox</code> as the <code>Values</code> to return
        *       events generated only from those browsers.</p>
        *          <p>Specifying <code>Invert</code> as the <code>Name</code>
        *          works as a "not equal to" filter. For example, specify <code>Invert</code> as the <code>Name</code>
        *          and specify <code>Chrome</code> as the value to return all events except events from
        *          user sessions with the Chrome browser.</p>
        */
    export interface QueryFilter {
            /**
                * <p>The name of a key to search for.
                *       The filter returns only the events that match the <code>Name</code>
                *          and <code>Values</code> that you specify.
                *       </p>
                *          <p>Valid values for <code>Name</code> are <code>Browser</code> | <code>Device</code> | <code>Country</code> |
                *          <code>Page</code> | <code>OS</code> | <code>EventType</code> | <code>Invert</code>
                *          </p>
                */
            Name?: string;
            /**
                * <p>The values of the <code>Name</code> that are to be be included in the returned results.</p>
                */
            Values?: string[];
    }
    export namespace QueryFilter {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: QueryFilter) => any;
    }
    /**
        * <p>A structure that defines the time range that you want to retrieve results from.</p>
        */
    export interface TimeRange {
            /**
                * <p>The beginning of the time range to retrieve performance events from.</p>
                */
            After: number | undefined;
            /**
                * <p>The end of the time range to retrieve performance events from. If you omit this, the time
                *       range extends to the time that this operation is performed.</p>
                */
            Before?: number;
    }
    export namespace TimeRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TimeRange) => any;
    }
    export interface GetAppMonitorDataRequest {
            /**
                * <p>The name of the app monitor that collected the data that you want to retrieve.</p>
                */
            Name: string | undefined;
            /**
                * <p>A structure that defines the time range that you want to retrieve results from.</p>
                */
            TimeRange: TimeRange | undefined;
            /**
                * <p>An array of structures that you can use to filter the results to those that match one or
                *          more sets of key-value pairs that you specify.</p>
                */
            Filters?: QueryFilter[];
            /**
                * <p>The maximum number of results to return in one operation. </p>
                */
            MaxResults?: number;
            /**
                * <p>Use the token returned by the previous operation to request the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace GetAppMonitorDataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppMonitorDataRequest) => any;
    }
    export interface GetAppMonitorDataResponse {
            /**
                * <p>The events that RUM collected that match your request.</p>
                */
            Events?: string[];
            /**
                * <p>A token that you can use in a subsequent operation to retrieve the next set of
                *          results.</p>
                */
            NextToken?: string;
    }
    export namespace GetAppMonitorDataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAppMonitorDataResponse) => any;
    }
    export interface ListAppMonitorsRequest {
            /**
                * <p>The maximum number of results to return in one operation. </p>
                */
            MaxResults?: number;
            /**
                * <p>Use the token returned by the previous operation to request the next page of results.</p>
                */
            NextToken?: string;
    }
    export namespace ListAppMonitorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAppMonitorsRequest) => any;
    }
    /**
        * <p>A structure that includes some data about app monitors and their settings.</p>
        */
    export interface AppMonitorSummary {
            /**
                * <p>The name of this app monitor.</p>
                */
            Name?: string;
            /**
                * <p>The unique ID of this app monitor.</p>
                */
            Id?: string;
            /**
                * <p>The date and time that the app monitor was created.</p>
                */
            Created?: string;
            /**
                * <p>The date and time of the most recent changes to this app monitor's configuration.</p>
                */
            LastModified?: string;
            /**
                * <p>The current state of this app monitor.</p>
                */
            State?: StateEnum | string;
    }
    export namespace AppMonitorSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppMonitorSummary) => any;
    }
    export interface ListAppMonitorsResponse {
            /**
                * <p>A token that you can use in a subsequent operation to retrieve the next set of
                *          results.</p>
                */
            NextToken?: string;
            /**
                * <p>An array of structures that contain information about the returned app monitors.</p>
                */
            AppMonitorSummaries?: AppMonitorSummary[];
    }
    export namespace ListAppMonitorsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAppMonitorsResponse) => any;
    }
    export interface UpdateAppMonitorRequest {
            /**
                * <p>The name of the app monitor to update.</p>
                */
            Name: string | undefined;
            /**
                * <p>The top-level internet domain name for which your application has administrative authority.</p>
                */
            Domain?: string;
            /**
                * <p>A structure that contains much of the configuration data for the app monitor. If you are using
                *          Amazon Cognito for authorization, you must include this structure in your request, and it must include the ID of the
                *          Amazon Cognito identity pool to use for authorization. If you don't include <code>AppMonitorConfiguration</code>, you must set up your own
                *          authorization method. For more information, see
                *          <a href="https://docs.aws.amazon.com/monitoring/CloudWatch-RUM-get-started-authorization.html">Authorize your application
                *             to send data to Amazon Web Services</a>.</p>
                */
            AppMonitorConfiguration?: AppMonitorConfiguration;
            /**
                * <p>Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter specifies whether RUM
                *          sends a copy of this telemetry data to Amazon CloudWatch Logs
                *          in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur
                *          Amazon CloudWatch Logs charges.</p>
                */
            CwLogEnabled?: boolean;
    }
    export namespace UpdateAppMonitorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAppMonitorRequest) => any;
    }
    export interface UpdateAppMonitorResponse {
    }
    export namespace UpdateAppMonitorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAppMonitorResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The ARN of the resource that you want to see the tags of.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The ARN of the resource that you are viewing.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The list of tag keys and values associated with the resource you specified.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * <p>A structure that contains the information for one performance event that RUM collects from a user session with your
        *       application.</p>
        */
    export interface RumEvent {
            /**
                * <p>A unique ID for this event.</p>
                */
            id: string | undefined;
            /**
                * <p>The exact time that this event occurred.</p>
                */
            timestamp: Date | undefined;
            /**
                * <p>The JSON schema that denotes the type of event this is, such as a page load or a new session.</p>
                */
            type: string | undefined;
            /**
                * <p>Metadata about this event, which contains a JSON serialization of the identity of the user for
                *          this session. The user information comes from information such as the HTTP user-agent request header
                *          and document interface.</p>
                */
            metadata?: __LazyJsonString | string;
            /**
                * <p>A string containing details about the event.</p>
                */
            details: __LazyJsonString | string | undefined;
    }
    export namespace RumEvent {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RumEvent) => any;
    }
    /**
        * <p>A structure that contains information about the user session that this batch of events was collected from.</p>
        */
    export interface UserDetails {
            /**
                * <p>The ID of the user for this user session. This ID is generated by RUM and does not include any
                *       personally identifiable information about the user.</p>
                */
            userId?: string;
            /**
                * <p>The session ID that the performance events are from.</p>
                */
            sessionId?: string;
    }
    export namespace UserDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserDetails) => any;
    }
    export interface PutRumEventsRequest {
            /**
                * <p>The ID of the app monitor that is sending this data.</p>
                */
            Id: string | undefined;
            /**
                * <p>A unique identifier for this batch of RUM event data.</p>
                */
            BatchId: string | undefined;
            /**
                * <p>A structure that contains information about the app monitor that collected this telemetry information.</p>
                */
            AppMonitorDetails: AppMonitorDetails | undefined;
            /**
                * <p>A structure that contains information about the user session that this batch of events was collected from.</p>
                */
            UserDetails: UserDetails | undefined;
            /**
                * <p>An array of structures that contain the telemetry event data.</p>
                */
            RumEvents: RumEvent[] | undefined;
    }
    export namespace PutRumEventsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRumEventsRequest) => any;
    }
    export interface PutRumEventsResponse {
    }
    export namespace PutRumEventsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRumEventsResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The ARN of the CloudWatch RUM resource that you're adding tags to.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The list of key-value pairs to associate with the resource.</p>
                */
            Tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The ARN of the CloudWatch RUM resource that you're removing tags from.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The list of tag keys to remove from the resource.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
}

declare module '@aws-sdk/client-rum/node_modules/@aws-sdk/client-rum/dist-types/models/RUMServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from RUM service.
        */
    export class RUMServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

