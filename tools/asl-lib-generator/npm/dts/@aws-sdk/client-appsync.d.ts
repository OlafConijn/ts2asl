// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-appsync' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AppSyncClient } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { AssociateApiCommandInput, AssociateApiCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/AssociateApiCommand";
    import { CreateApiCacheCommandInput, CreateApiCacheCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateApiCacheCommand";
    import { CreateApiKeyCommandInput, CreateApiKeyCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateApiKeyCommand";
    import { CreateDataSourceCommandInput, CreateDataSourceCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateDataSourceCommand";
    import { CreateDomainNameCommandInput, CreateDomainNameCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateDomainNameCommand";
    import { CreateFunctionCommandInput, CreateFunctionCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateFunctionCommand";
    import { CreateGraphqlApiCommandInput, CreateGraphqlApiCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateGraphqlApiCommand";
    import { CreateResolverCommandInput, CreateResolverCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateResolverCommand";
    import { CreateTypeCommandInput, CreateTypeCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateTypeCommand";
    import { DeleteApiCacheCommandInput, DeleteApiCacheCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteApiCacheCommand";
    import { DeleteApiKeyCommandInput, DeleteApiKeyCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteApiKeyCommand";
    import { DeleteDataSourceCommandInput, DeleteDataSourceCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteDataSourceCommand";
    import { DeleteDomainNameCommandInput, DeleteDomainNameCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteDomainNameCommand";
    import { DeleteFunctionCommandInput, DeleteFunctionCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteFunctionCommand";
    import { DeleteGraphqlApiCommandInput, DeleteGraphqlApiCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteGraphqlApiCommand";
    import { DeleteResolverCommandInput, DeleteResolverCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteResolverCommand";
    import { DeleteTypeCommandInput, DeleteTypeCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteTypeCommand";
    import { DisassociateApiCommandInput, DisassociateApiCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DisassociateApiCommand";
    import { FlushApiCacheCommandInput, FlushApiCacheCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/FlushApiCacheCommand";
    import { GetApiAssociationCommandInput, GetApiAssociationCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetApiAssociationCommand";
    import { GetApiCacheCommandInput, GetApiCacheCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetApiCacheCommand";
    import { GetDataSourceCommandInput, GetDataSourceCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetDataSourceCommand";
    import { GetDomainNameCommandInput, GetDomainNameCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetDomainNameCommand";
    import { GetFunctionCommandInput, GetFunctionCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetFunctionCommand";
    import { GetGraphqlApiCommandInput, GetGraphqlApiCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetGraphqlApiCommand";
    import { GetIntrospectionSchemaCommandInput, GetIntrospectionSchemaCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetIntrospectionSchemaCommand";
    import { GetResolverCommandInput, GetResolverCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetResolverCommand";
    import { GetSchemaCreationStatusCommandInput, GetSchemaCreationStatusCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetSchemaCreationStatusCommand";
    import { GetTypeCommandInput, GetTypeCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetTypeCommand";
    import { ListApiKeysCommandInput, ListApiKeysCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListApiKeysCommand";
    import { ListDataSourcesCommandInput, ListDataSourcesCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListDataSourcesCommand";
    import { ListDomainNamesCommandInput, ListDomainNamesCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListDomainNamesCommand";
    import { ListFunctionsCommandInput, ListFunctionsCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListFunctionsCommand";
    import { ListGraphqlApisCommandInput, ListGraphqlApisCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListGraphqlApisCommand";
    import { ListResolversByFunctionCommandInput, ListResolversByFunctionCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListResolversByFunctionCommand";
    import { ListResolversCommandInput, ListResolversCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListResolversCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListTagsForResourceCommand";
    import { ListTypesCommandInput, ListTypesCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListTypesCommand";
    import { StartSchemaCreationCommandInput, StartSchemaCreationCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/StartSchemaCreationCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UntagResourceCommand";
    import { UpdateApiCacheCommandInput, UpdateApiCacheCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateApiCacheCommand";
    import { UpdateApiKeyCommandInput, UpdateApiKeyCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateApiKeyCommand";
    import { UpdateDataSourceCommandInput, UpdateDataSourceCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateDataSourceCommand";
    import { UpdateDomainNameCommandInput, UpdateDomainNameCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateDomainNameCommand";
    import { UpdateFunctionCommandInput, UpdateFunctionCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateFunctionCommand";
    import { UpdateGraphqlApiCommandInput, UpdateGraphqlApiCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateGraphqlApiCommand";
    import { UpdateResolverCommandInput, UpdateResolverCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateResolverCommand";
    import { UpdateTypeCommandInput, UpdateTypeCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateTypeCommand";
    /**
        * <p>AppSync provides API actions for creating and interacting with data
        *          sources using GraphQL from your application.</p>
        */
    export class AppSync extends AppSyncClient {
            /**
                * <p>Maps an endpoint to your custom domain.</p>
                */
            associateApi(args: AssociateApiCommandInput, options?: __HttpHandlerOptions): Promise<AssociateApiCommandOutput>;
            associateApi(args: AssociateApiCommandInput, cb: (err: any, data?: AssociateApiCommandOutput) => void): void;
            associateApi(args: AssociateApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateApiCommandOutput) => void): void;
            /**
                * <p>Creates a cache for the GraphQL API.</p>
                */
            createApiCache(args: CreateApiCacheCommandInput, options?: __HttpHandlerOptions): Promise<CreateApiCacheCommandOutput>;
            createApiCache(args: CreateApiCacheCommandInput, cb: (err: any, data?: CreateApiCacheCommandOutput) => void): void;
            createApiCache(args: CreateApiCacheCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateApiCacheCommandOutput) => void): void;
            /**
                * <p>Creates a unique key that you can distribute to clients who invoke your API.</p>
                */
            createApiKey(args: CreateApiKeyCommandInput, options?: __HttpHandlerOptions): Promise<CreateApiKeyCommandOutput>;
            createApiKey(args: CreateApiKeyCommandInput, cb: (err: any, data?: CreateApiKeyCommandOutput) => void): void;
            createApiKey(args: CreateApiKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateApiKeyCommandOutput) => void): void;
            /**
                * <p>Creates a <code>DataSource</code> object.</p>
                */
            createDataSource(args: CreateDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<CreateDataSourceCommandOutput>;
            createDataSource(args: CreateDataSourceCommandInput, cb: (err: any, data?: CreateDataSourceCommandOutput) => void): void;
            createDataSource(args: CreateDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDataSourceCommandOutput) => void): void;
            /**
                * <p>Creates a custom <code>DomainName</code> object.</p>
                */
            createDomainName(args: CreateDomainNameCommandInput, options?: __HttpHandlerOptions): Promise<CreateDomainNameCommandOutput>;
            createDomainName(args: CreateDomainNameCommandInput, cb: (err: any, data?: CreateDomainNameCommandOutput) => void): void;
            createDomainName(args: CreateDomainNameCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDomainNameCommandOutput) => void): void;
            /**
                * <p>Creates a <code>Function</code> object.</p>
                *          <p>A function is a reusable entity. You can use multiple functions to compose the resolver
                *          logic.</p>
                */
            createFunction(args: CreateFunctionCommandInput, options?: __HttpHandlerOptions): Promise<CreateFunctionCommandOutput>;
            createFunction(args: CreateFunctionCommandInput, cb: (err: any, data?: CreateFunctionCommandOutput) => void): void;
            createFunction(args: CreateFunctionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFunctionCommandOutput) => void): void;
            /**
                * <p>Creates a <code>GraphqlApi</code> object.</p>
                */
            createGraphqlApi(args: CreateGraphqlApiCommandInput, options?: __HttpHandlerOptions): Promise<CreateGraphqlApiCommandOutput>;
            createGraphqlApi(args: CreateGraphqlApiCommandInput, cb: (err: any, data?: CreateGraphqlApiCommandOutput) => void): void;
            createGraphqlApi(args: CreateGraphqlApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGraphqlApiCommandOutput) => void): void;
            /**
                * <p>Creates a <code>Resolver</code> object.</p>
                *          <p>A resolver converts incoming requests into a format that a data source can understand,
                *          and converts the data source's responses into GraphQL.</p>
                */
            createResolver(args: CreateResolverCommandInput, options?: __HttpHandlerOptions): Promise<CreateResolverCommandOutput>;
            createResolver(args: CreateResolverCommandInput, cb: (err: any, data?: CreateResolverCommandOutput) => void): void;
            createResolver(args: CreateResolverCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateResolverCommandOutput) => void): void;
            /**
                * <p>Creates a <code>Type</code> object.</p>
                */
            createType(args: CreateTypeCommandInput, options?: __HttpHandlerOptions): Promise<CreateTypeCommandOutput>;
            createType(args: CreateTypeCommandInput, cb: (err: any, data?: CreateTypeCommandOutput) => void): void;
            createType(args: CreateTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateTypeCommandOutput) => void): void;
            /**
                * <p>Deletes an <code>ApiCache</code> object.</p>
                */
            deleteApiCache(args: DeleteApiCacheCommandInput, options?: __HttpHandlerOptions): Promise<DeleteApiCacheCommandOutput>;
            deleteApiCache(args: DeleteApiCacheCommandInput, cb: (err: any, data?: DeleteApiCacheCommandOutput) => void): void;
            deleteApiCache(args: DeleteApiCacheCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteApiCacheCommandOutput) => void): void;
            /**
                * <p>Deletes an API key.</p>
                */
            deleteApiKey(args: DeleteApiKeyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteApiKeyCommandOutput>;
            deleteApiKey(args: DeleteApiKeyCommandInput, cb: (err: any, data?: DeleteApiKeyCommandOutput) => void): void;
            deleteApiKey(args: DeleteApiKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteApiKeyCommandOutput) => void): void;
            /**
                * <p>Deletes a <code>DataSource</code> object.</p>
                */
            deleteDataSource(args: DeleteDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDataSourceCommandOutput>;
            deleteDataSource(args: DeleteDataSourceCommandInput, cb: (err: any, data?: DeleteDataSourceCommandOutput) => void): void;
            deleteDataSource(args: DeleteDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDataSourceCommandOutput) => void): void;
            /**
                * <p>Deletes a custom <code>DomainName</code> object.</p>
                */
            deleteDomainName(args: DeleteDomainNameCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDomainNameCommandOutput>;
            deleteDomainName(args: DeleteDomainNameCommandInput, cb: (err: any, data?: DeleteDomainNameCommandOutput) => void): void;
            deleteDomainName(args: DeleteDomainNameCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDomainNameCommandOutput) => void): void;
            /**
                * <p>Deletes a <code>Function</code>.</p>
                */
            deleteFunction(args: DeleteFunctionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFunctionCommandOutput>;
            deleteFunction(args: DeleteFunctionCommandInput, cb: (err: any, data?: DeleteFunctionCommandOutput) => void): void;
            deleteFunction(args: DeleteFunctionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFunctionCommandOutput) => void): void;
            /**
                * <p>Deletes a <code>GraphqlApi</code> object.</p>
                */
            deleteGraphqlApi(args: DeleteGraphqlApiCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGraphqlApiCommandOutput>;
            deleteGraphqlApi(args: DeleteGraphqlApiCommandInput, cb: (err: any, data?: DeleteGraphqlApiCommandOutput) => void): void;
            deleteGraphqlApi(args: DeleteGraphqlApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGraphqlApiCommandOutput) => void): void;
            /**
                * <p>Deletes a <code>Resolver</code> object.</p>
                */
            deleteResolver(args: DeleteResolverCommandInput, options?: __HttpHandlerOptions): Promise<DeleteResolverCommandOutput>;
            deleteResolver(args: DeleteResolverCommandInput, cb: (err: any, data?: DeleteResolverCommandOutput) => void): void;
            deleteResolver(args: DeleteResolverCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteResolverCommandOutput) => void): void;
            /**
                * <p>Deletes a <code>Type</code> object.</p>
                */
            deleteType(args: DeleteTypeCommandInput, options?: __HttpHandlerOptions): Promise<DeleteTypeCommandOutput>;
            deleteType(args: DeleteTypeCommandInput, cb: (err: any, data?: DeleteTypeCommandOutput) => void): void;
            deleteType(args: DeleteTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteTypeCommandOutput) => void): void;
            /**
                * <p>Removes an <code>ApiAssociation</code> object from a custom domain.</p>
                */
            disassociateApi(args: DisassociateApiCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateApiCommandOutput>;
            disassociateApi(args: DisassociateApiCommandInput, cb: (err: any, data?: DisassociateApiCommandOutput) => void): void;
            disassociateApi(args: DisassociateApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateApiCommandOutput) => void): void;
            /**
                * <p>Flushes an <code>ApiCache</code> object.</p>
                */
            flushApiCache(args: FlushApiCacheCommandInput, options?: __HttpHandlerOptions): Promise<FlushApiCacheCommandOutput>;
            flushApiCache(args: FlushApiCacheCommandInput, cb: (err: any, data?: FlushApiCacheCommandOutput) => void): void;
            flushApiCache(args: FlushApiCacheCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: FlushApiCacheCommandOutput) => void): void;
            /**
                * <p>Retrieves an <code>ApiAssociation</code> object.</p>
                */
            getApiAssociation(args: GetApiAssociationCommandInput, options?: __HttpHandlerOptions): Promise<GetApiAssociationCommandOutput>;
            getApiAssociation(args: GetApiAssociationCommandInput, cb: (err: any, data?: GetApiAssociationCommandOutput) => void): void;
            getApiAssociation(args: GetApiAssociationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetApiAssociationCommandOutput) => void): void;
            /**
                * <p>Retrieves an <code>ApiCache</code> object.</p>
                */
            getApiCache(args: GetApiCacheCommandInput, options?: __HttpHandlerOptions): Promise<GetApiCacheCommandOutput>;
            getApiCache(args: GetApiCacheCommandInput, cb: (err: any, data?: GetApiCacheCommandOutput) => void): void;
            getApiCache(args: GetApiCacheCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetApiCacheCommandOutput) => void): void;
            /**
                * <p>Retrieves a <code>DataSource</code> object.</p>
                */
            getDataSource(args: GetDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<GetDataSourceCommandOutput>;
            getDataSource(args: GetDataSourceCommandInput, cb: (err: any, data?: GetDataSourceCommandOutput) => void): void;
            getDataSource(args: GetDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDataSourceCommandOutput) => void): void;
            /**
                * <p>Retrieves a custom <code>DomainName</code> object.</p>
                */
            getDomainName(args: GetDomainNameCommandInput, options?: __HttpHandlerOptions): Promise<GetDomainNameCommandOutput>;
            getDomainName(args: GetDomainNameCommandInput, cb: (err: any, data?: GetDomainNameCommandOutput) => void): void;
            getDomainName(args: GetDomainNameCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDomainNameCommandOutput) => void): void;
            /**
                * <p>Get a <code>Function</code>.</p>
                */
            getFunction(args: GetFunctionCommandInput, options?: __HttpHandlerOptions): Promise<GetFunctionCommandOutput>;
            getFunction(args: GetFunctionCommandInput, cb: (err: any, data?: GetFunctionCommandOutput) => void): void;
            getFunction(args: GetFunctionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetFunctionCommandOutput) => void): void;
            /**
                * <p>Retrieves a <code>GraphqlApi</code> object.</p>
                */
            getGraphqlApi(args: GetGraphqlApiCommandInput, options?: __HttpHandlerOptions): Promise<GetGraphqlApiCommandOutput>;
            getGraphqlApi(args: GetGraphqlApiCommandInput, cb: (err: any, data?: GetGraphqlApiCommandOutput) => void): void;
            getGraphqlApi(args: GetGraphqlApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGraphqlApiCommandOutput) => void): void;
            /**
                * <p>Retrieves the introspection schema for a GraphQL API.</p>
                */
            getIntrospectionSchema(args: GetIntrospectionSchemaCommandInput, options?: __HttpHandlerOptions): Promise<GetIntrospectionSchemaCommandOutput>;
            getIntrospectionSchema(args: GetIntrospectionSchemaCommandInput, cb: (err: any, data?: GetIntrospectionSchemaCommandOutput) => void): void;
            getIntrospectionSchema(args: GetIntrospectionSchemaCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetIntrospectionSchemaCommandOutput) => void): void;
            /**
                * <p>Retrieves a <code>Resolver</code> object.</p>
                */
            getResolver(args: GetResolverCommandInput, options?: __HttpHandlerOptions): Promise<GetResolverCommandOutput>;
            getResolver(args: GetResolverCommandInput, cb: (err: any, data?: GetResolverCommandOutput) => void): void;
            getResolver(args: GetResolverCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetResolverCommandOutput) => void): void;
            /**
                * <p>Retrieves the current status of a schema creation operation.</p>
                */
            getSchemaCreationStatus(args: GetSchemaCreationStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetSchemaCreationStatusCommandOutput>;
            getSchemaCreationStatus(args: GetSchemaCreationStatusCommandInput, cb: (err: any, data?: GetSchemaCreationStatusCommandOutput) => void): void;
            getSchemaCreationStatus(args: GetSchemaCreationStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSchemaCreationStatusCommandOutput) => void): void;
            /**
                * <p>Retrieves a <code>Type</code> object.</p>
                */
            getType(args: GetTypeCommandInput, options?: __HttpHandlerOptions): Promise<GetTypeCommandOutput>;
            getType(args: GetTypeCommandInput, cb: (err: any, data?: GetTypeCommandOutput) => void): void;
            getType(args: GetTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetTypeCommandOutput) => void): void;
            /**
                * <p>Lists the API keys for a given API.</p>
                *          <note>
                *             <p>API keys are deleted automatically 60 days after they expire. However, they may still
                *             be included in the response until they have actually been deleted. You can safely call
                *                <code>DeleteApiKey</code> to manually delete a key before it's automatically
                *             deleted.</p>
                *          </note>
                */
            listApiKeys(args: ListApiKeysCommandInput, options?: __HttpHandlerOptions): Promise<ListApiKeysCommandOutput>;
            listApiKeys(args: ListApiKeysCommandInput, cb: (err: any, data?: ListApiKeysCommandOutput) => void): void;
            listApiKeys(args: ListApiKeysCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListApiKeysCommandOutput) => void): void;
            /**
                * <p>Lists the data sources for a given API.</p>
                */
            listDataSources(args: ListDataSourcesCommandInput, options?: __HttpHandlerOptions): Promise<ListDataSourcesCommandOutput>;
            listDataSources(args: ListDataSourcesCommandInput, cb: (err: any, data?: ListDataSourcesCommandOutput) => void): void;
            listDataSources(args: ListDataSourcesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDataSourcesCommandOutput) => void): void;
            /**
                * <p>Lists multiple custom domain names.</p>
                */
            listDomainNames(args: ListDomainNamesCommandInput, options?: __HttpHandlerOptions): Promise<ListDomainNamesCommandOutput>;
            listDomainNames(args: ListDomainNamesCommandInput, cb: (err: any, data?: ListDomainNamesCommandOutput) => void): void;
            listDomainNames(args: ListDomainNamesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDomainNamesCommandOutput) => void): void;
            /**
                * <p>List multiple functions.</p>
                */
            listFunctions(args: ListFunctionsCommandInput, options?: __HttpHandlerOptions): Promise<ListFunctionsCommandOutput>;
            listFunctions(args: ListFunctionsCommandInput, cb: (err: any, data?: ListFunctionsCommandOutput) => void): void;
            listFunctions(args: ListFunctionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFunctionsCommandOutput) => void): void;
            /**
                * <p>Lists your GraphQL APIs.</p>
                */
            listGraphqlApis(args: ListGraphqlApisCommandInput, options?: __HttpHandlerOptions): Promise<ListGraphqlApisCommandOutput>;
            listGraphqlApis(args: ListGraphqlApisCommandInput, cb: (err: any, data?: ListGraphqlApisCommandOutput) => void): void;
            listGraphqlApis(args: ListGraphqlApisCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGraphqlApisCommandOutput) => void): void;
            /**
                * <p>Lists the resolvers for a given API and type.</p>
                */
            listResolvers(args: ListResolversCommandInput, options?: __HttpHandlerOptions): Promise<ListResolversCommandOutput>;
            listResolvers(args: ListResolversCommandInput, cb: (err: any, data?: ListResolversCommandOutput) => void): void;
            listResolvers(args: ListResolversCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListResolversCommandOutput) => void): void;
            /**
                * <p>List the resolvers that are associated with a specific function.</p>
                */
            listResolversByFunction(args: ListResolversByFunctionCommandInput, options?: __HttpHandlerOptions): Promise<ListResolversByFunctionCommandOutput>;
            listResolversByFunction(args: ListResolversByFunctionCommandInput, cb: (err: any, data?: ListResolversByFunctionCommandOutput) => void): void;
            listResolversByFunction(args: ListResolversByFunctionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListResolversByFunctionCommandOutput) => void): void;
            /**
                * <p>Lists the tags for a resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Lists the types for a given API.</p>
                */
            listTypes(args: ListTypesCommandInput, options?: __HttpHandlerOptions): Promise<ListTypesCommandOutput>;
            listTypes(args: ListTypesCommandInput, cb: (err: any, data?: ListTypesCommandOutput) => void): void;
            listTypes(args: ListTypesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTypesCommandOutput) => void): void;
            /**
                * <p>Adds a new schema to your GraphQL API.</p>
                *          <p>This operation is asynchronous. Use  to
                *          determine when it has completed.</p>
                */
            startSchemaCreation(args: StartSchemaCreationCommandInput, options?: __HttpHandlerOptions): Promise<StartSchemaCreationCommandOutput>;
            startSchemaCreation(args: StartSchemaCreationCommandInput, cb: (err: any, data?: StartSchemaCreationCommandOutput) => void): void;
            startSchemaCreation(args: StartSchemaCreationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartSchemaCreationCommandOutput) => void): void;
            /**
                * <p>Tags a resource with user-supplied tags.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Untags a resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Updates the cache for the GraphQL API.</p>
                */
            updateApiCache(args: UpdateApiCacheCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApiCacheCommandOutput>;
            updateApiCache(args: UpdateApiCacheCommandInput, cb: (err: any, data?: UpdateApiCacheCommandOutput) => void): void;
            updateApiCache(args: UpdateApiCacheCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApiCacheCommandOutput) => void): void;
            /**
                * <p>Updates an API key. You can update the key as long as it's not deleted.</p>
                */
            updateApiKey(args: UpdateApiKeyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateApiKeyCommandOutput>;
            updateApiKey(args: UpdateApiKeyCommandInput, cb: (err: any, data?: UpdateApiKeyCommandOutput) => void): void;
            updateApiKey(args: UpdateApiKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateApiKeyCommandOutput) => void): void;
            /**
                * <p>Updates a <code>DataSource</code> object.</p>
                */
            updateDataSource(args: UpdateDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDataSourceCommandOutput>;
            updateDataSource(args: UpdateDataSourceCommandInput, cb: (err: any, data?: UpdateDataSourceCommandOutput) => void): void;
            updateDataSource(args: UpdateDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDataSourceCommandOutput) => void): void;
            /**
                * <p>Updates a custom <code>DomainName</code> object.</p>
                */
            updateDomainName(args: UpdateDomainNameCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDomainNameCommandOutput>;
            updateDomainName(args: UpdateDomainNameCommandInput, cb: (err: any, data?: UpdateDomainNameCommandOutput) => void): void;
            updateDomainName(args: UpdateDomainNameCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDomainNameCommandOutput) => void): void;
            /**
                * <p>Updates a <code>Function</code> object.</p>
                */
            updateFunction(args: UpdateFunctionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFunctionCommandOutput>;
            updateFunction(args: UpdateFunctionCommandInput, cb: (err: any, data?: UpdateFunctionCommandOutput) => void): void;
            updateFunction(args: UpdateFunctionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFunctionCommandOutput) => void): void;
            /**
                * <p>Updates a <code>GraphqlApi</code> object.</p>
                */
            updateGraphqlApi(args: UpdateGraphqlApiCommandInput, options?: __HttpHandlerOptions): Promise<UpdateGraphqlApiCommandOutput>;
            updateGraphqlApi(args: UpdateGraphqlApiCommandInput, cb: (err: any, data?: UpdateGraphqlApiCommandOutput) => void): void;
            updateGraphqlApi(args: UpdateGraphqlApiCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateGraphqlApiCommandOutput) => void): void;
            /**
                * <p>Updates a <code>Resolver</code> object.</p>
                */
            updateResolver(args: UpdateResolverCommandInput, options?: __HttpHandlerOptions): Promise<UpdateResolverCommandOutput>;
            updateResolver(args: UpdateResolverCommandInput, cb: (err: any, data?: UpdateResolverCommandOutput) => void): void;
            updateResolver(args: UpdateResolverCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateResolverCommandOutput) => void): void;
            /**
                * <p>Updates a <code>Type</code> object.</p>
                */
            updateType(args: UpdateTypeCommandInput, options?: __HttpHandlerOptions): Promise<UpdateTypeCommandOutput>;
            updateType(args: UpdateTypeCommandInput, cb: (err: any, data?: UpdateTypeCommandOutput) => void): void;
            updateType(args: UpdateTypeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateTypeCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateApiCommandInput, AssociateApiCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/AssociateApiCommand";
    import { CreateApiCacheCommandInput, CreateApiCacheCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateApiCacheCommand";
    import { CreateApiKeyCommandInput, CreateApiKeyCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateApiKeyCommand";
    import { CreateDataSourceCommandInput, CreateDataSourceCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateDataSourceCommand";
    import { CreateDomainNameCommandInput, CreateDomainNameCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateDomainNameCommand";
    import { CreateFunctionCommandInput, CreateFunctionCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateFunctionCommand";
    import { CreateGraphqlApiCommandInput, CreateGraphqlApiCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateGraphqlApiCommand";
    import { CreateResolverCommandInput, CreateResolverCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateResolverCommand";
    import { CreateTypeCommandInput, CreateTypeCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateTypeCommand";
    import { DeleteApiCacheCommandInput, DeleteApiCacheCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteApiCacheCommand";
    import { DeleteApiKeyCommandInput, DeleteApiKeyCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteApiKeyCommand";
    import { DeleteDataSourceCommandInput, DeleteDataSourceCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteDataSourceCommand";
    import { DeleteDomainNameCommandInput, DeleteDomainNameCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteDomainNameCommand";
    import { DeleteFunctionCommandInput, DeleteFunctionCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteFunctionCommand";
    import { DeleteGraphqlApiCommandInput, DeleteGraphqlApiCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteGraphqlApiCommand";
    import { DeleteResolverCommandInput, DeleteResolverCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteResolverCommand";
    import { DeleteTypeCommandInput, DeleteTypeCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteTypeCommand";
    import { DisassociateApiCommandInput, DisassociateApiCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DisassociateApiCommand";
    import { FlushApiCacheCommandInput, FlushApiCacheCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/FlushApiCacheCommand";
    import { GetApiAssociationCommandInput, GetApiAssociationCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetApiAssociationCommand";
    import { GetApiCacheCommandInput, GetApiCacheCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetApiCacheCommand";
    import { GetDataSourceCommandInput, GetDataSourceCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetDataSourceCommand";
    import { GetDomainNameCommandInput, GetDomainNameCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetDomainNameCommand";
    import { GetFunctionCommandInput, GetFunctionCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetFunctionCommand";
    import { GetGraphqlApiCommandInput, GetGraphqlApiCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetGraphqlApiCommand";
    import { GetIntrospectionSchemaCommandInput, GetIntrospectionSchemaCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetIntrospectionSchemaCommand";
    import { GetResolverCommandInput, GetResolverCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetResolverCommand";
    import { GetSchemaCreationStatusCommandInput, GetSchemaCreationStatusCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetSchemaCreationStatusCommand";
    import { GetTypeCommandInput, GetTypeCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetTypeCommand";
    import { ListApiKeysCommandInput, ListApiKeysCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListApiKeysCommand";
    import { ListDataSourcesCommandInput, ListDataSourcesCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListDataSourcesCommand";
    import { ListDomainNamesCommandInput, ListDomainNamesCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListDomainNamesCommand";
    import { ListFunctionsCommandInput, ListFunctionsCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListFunctionsCommand";
    import { ListGraphqlApisCommandInput, ListGraphqlApisCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListGraphqlApisCommand";
    import { ListResolversByFunctionCommandInput, ListResolversByFunctionCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListResolversByFunctionCommand";
    import { ListResolversCommandInput, ListResolversCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListResolversCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListTagsForResourceCommand";
    import { ListTypesCommandInput, ListTypesCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListTypesCommand";
    import { StartSchemaCreationCommandInput, StartSchemaCreationCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/StartSchemaCreationCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UntagResourceCommand";
    import { UpdateApiCacheCommandInput, UpdateApiCacheCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateApiCacheCommand";
    import { UpdateApiKeyCommandInput, UpdateApiKeyCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateApiKeyCommand";
    import { UpdateDataSourceCommandInput, UpdateDataSourceCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateDataSourceCommand";
    import { UpdateDomainNameCommandInput, UpdateDomainNameCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateDomainNameCommand";
    import { UpdateFunctionCommandInput, UpdateFunctionCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateFunctionCommand";
    import { UpdateGraphqlApiCommandInput, UpdateGraphqlApiCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateGraphqlApiCommand";
    import { UpdateResolverCommandInput, UpdateResolverCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateResolverCommand";
    import { UpdateTypeCommandInput, UpdateTypeCommandOutput } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateTypeCommand";
    export type ServiceInputTypes = AssociateApiCommandInput | CreateApiCacheCommandInput | CreateApiKeyCommandInput | CreateDataSourceCommandInput | CreateDomainNameCommandInput | CreateFunctionCommandInput | CreateGraphqlApiCommandInput | CreateResolverCommandInput | CreateTypeCommandInput | DeleteApiCacheCommandInput | DeleteApiKeyCommandInput | DeleteDataSourceCommandInput | DeleteDomainNameCommandInput | DeleteFunctionCommandInput | DeleteGraphqlApiCommandInput | DeleteResolverCommandInput | DeleteTypeCommandInput | DisassociateApiCommandInput | FlushApiCacheCommandInput | GetApiAssociationCommandInput | GetApiCacheCommandInput | GetDataSourceCommandInput | GetDomainNameCommandInput | GetFunctionCommandInput | GetGraphqlApiCommandInput | GetIntrospectionSchemaCommandInput | GetResolverCommandInput | GetSchemaCreationStatusCommandInput | GetTypeCommandInput | ListApiKeysCommandInput | ListDataSourcesCommandInput | ListDomainNamesCommandInput | ListFunctionsCommandInput | ListGraphqlApisCommandInput | ListResolversByFunctionCommandInput | ListResolversCommandInput | ListTagsForResourceCommandInput | ListTypesCommandInput | StartSchemaCreationCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateApiCacheCommandInput | UpdateApiKeyCommandInput | UpdateDataSourceCommandInput | UpdateDomainNameCommandInput | UpdateFunctionCommandInput | UpdateGraphqlApiCommandInput | UpdateResolverCommandInput | UpdateTypeCommandInput;
    export type ServiceOutputTypes = AssociateApiCommandOutput | CreateApiCacheCommandOutput | CreateApiKeyCommandOutput | CreateDataSourceCommandOutput | CreateDomainNameCommandOutput | CreateFunctionCommandOutput | CreateGraphqlApiCommandOutput | CreateResolverCommandOutput | CreateTypeCommandOutput | DeleteApiCacheCommandOutput | DeleteApiKeyCommandOutput | DeleteDataSourceCommandOutput | DeleteDomainNameCommandOutput | DeleteFunctionCommandOutput | DeleteGraphqlApiCommandOutput | DeleteResolverCommandOutput | DeleteTypeCommandOutput | DisassociateApiCommandOutput | FlushApiCacheCommandOutput | GetApiAssociationCommandOutput | GetApiCacheCommandOutput | GetDataSourceCommandOutput | GetDomainNameCommandOutput | GetFunctionCommandOutput | GetGraphqlApiCommandOutput | GetIntrospectionSchemaCommandOutput | GetResolverCommandOutput | GetSchemaCreationStatusCommandOutput | GetTypeCommandOutput | ListApiKeysCommandOutput | ListDataSourcesCommandOutput | ListDomainNamesCommandOutput | ListFunctionsCommandOutput | ListGraphqlApisCommandOutput | ListResolversByFunctionCommandOutput | ListResolversCommandOutput | ListTagsForResourceCommandOutput | ListTypesCommandOutput | StartSchemaCreationCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateApiCacheCommandOutput | UpdateApiKeyCommandOutput | UpdateDataSourceCommandOutput | UpdateDomainNameCommandOutput | UpdateFunctionCommandOutput | UpdateGraphqlApiCommandOutput | UpdateResolverCommandOutput | UpdateTypeCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type AppSyncClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of AppSyncClient class constructor that set the region, credentials and other options.
        */
    export interface AppSyncClientConfig extends AppSyncClientConfigType {
    }
    type AppSyncClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of AppSyncClient class. This is resolved and normalized from the {@link AppSyncClientConfig | constructor configuration interface}.
        */
    export interface AppSyncClientResolvedConfig extends AppSyncClientResolvedConfigType {
    }
    /**
        * <p>AppSync provides API actions for creating and interacting with data
        *          sources using GraphQL from your application.</p>
        */
    export class AppSyncClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, AppSyncClientResolvedConfig> {
            /**
                * The resolved configuration of AppSyncClient class. This is resolved and normalized from the {@link AppSyncClientConfig | constructor configuration interface}.
                */
            readonly config: AppSyncClientResolvedConfig;
            constructor(configuration: AppSyncClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/AssociateApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { AssociateApiRequest, AssociateApiResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface AssociateApiCommandInput extends AssociateApiRequest {
    }
    export interface AssociateApiCommandOutput extends AssociateApiResponse, __MetadataBearer {
    }
    /**
        * <p>Maps an endpoint to your custom domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, AssociateApiCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, AssociateApiCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new AssociateApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateApiCommandInput} for command's `input` shape.
        * @see {@link AssociateApiCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class AssociateApiCommand extends $Command<AssociateApiCommandInput, AssociateApiCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: AssociateApiCommandInput;
            constructor(input: AssociateApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateApiCommandInput, AssociateApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateApiCacheCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { CreateApiCacheRequest, CreateApiCacheResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface CreateApiCacheCommandInput extends CreateApiCacheRequest {
    }
    export interface CreateApiCacheCommandOutput extends CreateApiCacheResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a cache for the GraphQL API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, CreateApiCacheCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, CreateApiCacheCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new CreateApiCacheCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateApiCacheCommandInput} for command's `input` shape.
        * @see {@link CreateApiCacheCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class CreateApiCacheCommand extends $Command<CreateApiCacheCommandInput, CreateApiCacheCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: CreateApiCacheCommandInput;
            constructor(input: CreateApiCacheCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateApiCacheCommandInput, CreateApiCacheCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateApiKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { CreateApiKeyRequest, CreateApiKeyResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface CreateApiKeyCommandInput extends CreateApiKeyRequest {
    }
    export interface CreateApiKeyCommandOutput extends CreateApiKeyResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a unique key that you can distribute to clients who invoke your API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, CreateApiKeyCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, CreateApiKeyCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new CreateApiKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateApiKeyCommandInput} for command's `input` shape.
        * @see {@link CreateApiKeyCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class CreateApiKeyCommand extends $Command<CreateApiKeyCommandInput, CreateApiKeyCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: CreateApiKeyCommandInput;
            constructor(input: CreateApiKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateApiKeyCommandInput, CreateApiKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateDataSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { CreateDataSourceRequest, CreateDataSourceResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface CreateDataSourceCommandInput extends CreateDataSourceRequest {
    }
    export interface CreateDataSourceCommandOutput extends CreateDataSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <code>DataSource</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, CreateDataSourceCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, CreateDataSourceCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new CreateDataSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDataSourceCommandInput} for command's `input` shape.
        * @see {@link CreateDataSourceCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class CreateDataSourceCommand extends $Command<CreateDataSourceCommandInput, CreateDataSourceCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: CreateDataSourceCommandInput;
            constructor(input: CreateDataSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDataSourceCommandInput, CreateDataSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateDomainNameCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { CreateDomainNameRequest, CreateDomainNameResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface CreateDomainNameCommandInput extends CreateDomainNameRequest {
    }
    export interface CreateDomainNameCommandOutput extends CreateDomainNameResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a custom <code>DomainName</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, CreateDomainNameCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, CreateDomainNameCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new CreateDomainNameCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateDomainNameCommandInput} for command's `input` shape.
        * @see {@link CreateDomainNameCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class CreateDomainNameCommand extends $Command<CreateDomainNameCommandInput, CreateDomainNameCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: CreateDomainNameCommandInput;
            constructor(input: CreateDomainNameCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateDomainNameCommandInput, CreateDomainNameCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateFunctionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { CreateFunctionRequest, CreateFunctionResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface CreateFunctionCommandInput extends CreateFunctionRequest {
    }
    export interface CreateFunctionCommandOutput extends CreateFunctionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <code>Function</code> object.</p>
        *          <p>A function is a reusable entity. You can use multiple functions to compose the resolver
        *          logic.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, CreateFunctionCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, CreateFunctionCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new CreateFunctionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFunctionCommandInput} for command's `input` shape.
        * @see {@link CreateFunctionCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class CreateFunctionCommand extends $Command<CreateFunctionCommandInput, CreateFunctionCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: CreateFunctionCommandInput;
            constructor(input: CreateFunctionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFunctionCommandInput, CreateFunctionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateGraphqlApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { CreateGraphqlApiRequest, CreateGraphqlApiResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface CreateGraphqlApiCommandInput extends CreateGraphqlApiRequest {
    }
    export interface CreateGraphqlApiCommandOutput extends CreateGraphqlApiResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <code>GraphqlApi</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, CreateGraphqlApiCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, CreateGraphqlApiCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new CreateGraphqlApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateGraphqlApiCommandInput} for command's `input` shape.
        * @see {@link CreateGraphqlApiCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class CreateGraphqlApiCommand extends $Command<CreateGraphqlApiCommandInput, CreateGraphqlApiCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: CreateGraphqlApiCommandInput;
            constructor(input: CreateGraphqlApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGraphqlApiCommandInput, CreateGraphqlApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateResolverCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { CreateResolverRequest, CreateResolverResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface CreateResolverCommandInput extends CreateResolverRequest {
    }
    export interface CreateResolverCommandOutput extends CreateResolverResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <code>Resolver</code> object.</p>
        *          <p>A resolver converts incoming requests into a format that a data source can understand,
        *          and converts the data source's responses into GraphQL.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, CreateResolverCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, CreateResolverCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new CreateResolverCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateResolverCommandInput} for command's `input` shape.
        * @see {@link CreateResolverCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class CreateResolverCommand extends $Command<CreateResolverCommandInput, CreateResolverCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: CreateResolverCommandInput;
            constructor(input: CreateResolverCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateResolverCommandInput, CreateResolverCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/CreateTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { CreateTypeRequest, CreateTypeResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface CreateTypeCommandInput extends CreateTypeRequest {
    }
    export interface CreateTypeCommandOutput extends CreateTypeResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a <code>Type</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, CreateTypeCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, CreateTypeCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new CreateTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateTypeCommandInput} for command's `input` shape.
        * @see {@link CreateTypeCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class CreateTypeCommand extends $Command<CreateTypeCommandInput, CreateTypeCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: CreateTypeCommandInput;
            constructor(input: CreateTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateTypeCommandInput, CreateTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteApiCacheCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { DeleteApiCacheRequest, DeleteApiCacheResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface DeleteApiCacheCommandInput extends DeleteApiCacheRequest {
    }
    export interface DeleteApiCacheCommandOutput extends DeleteApiCacheResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an <code>ApiCache</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, DeleteApiCacheCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, DeleteApiCacheCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new DeleteApiCacheCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteApiCacheCommandInput} for command's `input` shape.
        * @see {@link DeleteApiCacheCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class DeleteApiCacheCommand extends $Command<DeleteApiCacheCommandInput, DeleteApiCacheCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: DeleteApiCacheCommandInput;
            constructor(input: DeleteApiCacheCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteApiCacheCommandInput, DeleteApiCacheCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteApiKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { DeleteApiKeyRequest, DeleteApiKeyResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface DeleteApiKeyCommandInput extends DeleteApiKeyRequest {
    }
    export interface DeleteApiKeyCommandOutput extends DeleteApiKeyResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an API key.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, DeleteApiKeyCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, DeleteApiKeyCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new DeleteApiKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteApiKeyCommandInput} for command's `input` shape.
        * @see {@link DeleteApiKeyCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class DeleteApiKeyCommand extends $Command<DeleteApiKeyCommandInput, DeleteApiKeyCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: DeleteApiKeyCommandInput;
            constructor(input: DeleteApiKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteApiKeyCommandInput, DeleteApiKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteDataSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { DeleteDataSourceRequest, DeleteDataSourceResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface DeleteDataSourceCommandInput extends DeleteDataSourceRequest {
    }
    export interface DeleteDataSourceCommandOutput extends DeleteDataSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a <code>DataSource</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, DeleteDataSourceCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, DeleteDataSourceCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new DeleteDataSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDataSourceCommandInput} for command's `input` shape.
        * @see {@link DeleteDataSourceCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class DeleteDataSourceCommand extends $Command<DeleteDataSourceCommandInput, DeleteDataSourceCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: DeleteDataSourceCommandInput;
            constructor(input: DeleteDataSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDataSourceCommandInput, DeleteDataSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteDomainNameCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { DeleteDomainNameRequest, DeleteDomainNameResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface DeleteDomainNameCommandInput extends DeleteDomainNameRequest {
    }
    export interface DeleteDomainNameCommandOutput extends DeleteDomainNameResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a custom <code>DomainName</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, DeleteDomainNameCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, DeleteDomainNameCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new DeleteDomainNameCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteDomainNameCommandInput} for command's `input` shape.
        * @see {@link DeleteDomainNameCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class DeleteDomainNameCommand extends $Command<DeleteDomainNameCommandInput, DeleteDomainNameCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: DeleteDomainNameCommandInput;
            constructor(input: DeleteDomainNameCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteDomainNameCommandInput, DeleteDomainNameCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteFunctionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { DeleteFunctionRequest, DeleteFunctionResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface DeleteFunctionCommandInput extends DeleteFunctionRequest {
    }
    export interface DeleteFunctionCommandOutput extends DeleteFunctionResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a <code>Function</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, DeleteFunctionCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, DeleteFunctionCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new DeleteFunctionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFunctionCommandInput} for command's `input` shape.
        * @see {@link DeleteFunctionCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class DeleteFunctionCommand extends $Command<DeleteFunctionCommandInput, DeleteFunctionCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: DeleteFunctionCommandInput;
            constructor(input: DeleteFunctionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFunctionCommandInput, DeleteFunctionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteGraphqlApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { DeleteGraphqlApiRequest, DeleteGraphqlApiResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface DeleteGraphqlApiCommandInput extends DeleteGraphqlApiRequest {
    }
    export interface DeleteGraphqlApiCommandOutput extends DeleteGraphqlApiResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a <code>GraphqlApi</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, DeleteGraphqlApiCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, DeleteGraphqlApiCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new DeleteGraphqlApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteGraphqlApiCommandInput} for command's `input` shape.
        * @see {@link DeleteGraphqlApiCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class DeleteGraphqlApiCommand extends $Command<DeleteGraphqlApiCommandInput, DeleteGraphqlApiCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: DeleteGraphqlApiCommandInput;
            constructor(input: DeleteGraphqlApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteGraphqlApiCommandInput, DeleteGraphqlApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteResolverCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { DeleteResolverRequest, DeleteResolverResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface DeleteResolverCommandInput extends DeleteResolverRequest {
    }
    export interface DeleteResolverCommandOutput extends DeleteResolverResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a <code>Resolver</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, DeleteResolverCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, DeleteResolverCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new DeleteResolverCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteResolverCommandInput} for command's `input` shape.
        * @see {@link DeleteResolverCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class DeleteResolverCommand extends $Command<DeleteResolverCommandInput, DeleteResolverCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: DeleteResolverCommandInput;
            constructor(input: DeleteResolverCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteResolverCommandInput, DeleteResolverCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DeleteTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { DeleteTypeRequest, DeleteTypeResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface DeleteTypeCommandInput extends DeleteTypeRequest {
    }
    export interface DeleteTypeCommandOutput extends DeleteTypeResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a <code>Type</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, DeleteTypeCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, DeleteTypeCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new DeleteTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteTypeCommandInput} for command's `input` shape.
        * @see {@link DeleteTypeCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class DeleteTypeCommand extends $Command<DeleteTypeCommandInput, DeleteTypeCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: DeleteTypeCommandInput;
            constructor(input: DeleteTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteTypeCommandInput, DeleteTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/DisassociateApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { DisassociateApiRequest, DisassociateApiResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface DisassociateApiCommandInput extends DisassociateApiRequest {
    }
    export interface DisassociateApiCommandOutput extends DisassociateApiResponse, __MetadataBearer {
    }
    /**
        * <p>Removes an <code>ApiAssociation</code> object from a custom domain.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, DisassociateApiCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, DisassociateApiCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new DisassociateApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateApiCommandInput} for command's `input` shape.
        * @see {@link DisassociateApiCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class DisassociateApiCommand extends $Command<DisassociateApiCommandInput, DisassociateApiCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: DisassociateApiCommandInput;
            constructor(input: DisassociateApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateApiCommandInput, DisassociateApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/FlushApiCacheCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { FlushApiCacheRequest, FlushApiCacheResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface FlushApiCacheCommandInput extends FlushApiCacheRequest {
    }
    export interface FlushApiCacheCommandOutput extends FlushApiCacheResponse, __MetadataBearer {
    }
    /**
        * <p>Flushes an <code>ApiCache</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, FlushApiCacheCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, FlushApiCacheCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new FlushApiCacheCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link FlushApiCacheCommandInput} for command's `input` shape.
        * @see {@link FlushApiCacheCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class FlushApiCacheCommand extends $Command<FlushApiCacheCommandInput, FlushApiCacheCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: FlushApiCacheCommandInput;
            constructor(input: FlushApiCacheCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<FlushApiCacheCommandInput, FlushApiCacheCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetApiAssociationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { GetApiAssociationRequest, GetApiAssociationResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface GetApiAssociationCommandInput extends GetApiAssociationRequest {
    }
    export interface GetApiAssociationCommandOutput extends GetApiAssociationResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves an <code>ApiAssociation</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, GetApiAssociationCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, GetApiAssociationCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new GetApiAssociationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetApiAssociationCommandInput} for command's `input` shape.
        * @see {@link GetApiAssociationCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class GetApiAssociationCommand extends $Command<GetApiAssociationCommandInput, GetApiAssociationCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: GetApiAssociationCommandInput;
            constructor(input: GetApiAssociationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetApiAssociationCommandInput, GetApiAssociationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetApiCacheCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { GetApiCacheRequest, GetApiCacheResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface GetApiCacheCommandInput extends GetApiCacheRequest {
    }
    export interface GetApiCacheCommandOutput extends GetApiCacheResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves an <code>ApiCache</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, GetApiCacheCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, GetApiCacheCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new GetApiCacheCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetApiCacheCommandInput} for command's `input` shape.
        * @see {@link GetApiCacheCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class GetApiCacheCommand extends $Command<GetApiCacheCommandInput, GetApiCacheCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: GetApiCacheCommandInput;
            constructor(input: GetApiCacheCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetApiCacheCommandInput, GetApiCacheCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetDataSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { GetDataSourceRequest, GetDataSourceResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface GetDataSourceCommandInput extends GetDataSourceRequest {
    }
    export interface GetDataSourceCommandOutput extends GetDataSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a <code>DataSource</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, GetDataSourceCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, GetDataSourceCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new GetDataSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDataSourceCommandInput} for command's `input` shape.
        * @see {@link GetDataSourceCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class GetDataSourceCommand extends $Command<GetDataSourceCommandInput, GetDataSourceCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: GetDataSourceCommandInput;
            constructor(input: GetDataSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDataSourceCommandInput, GetDataSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetDomainNameCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { GetDomainNameRequest, GetDomainNameResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface GetDomainNameCommandInput extends GetDomainNameRequest {
    }
    export interface GetDomainNameCommandOutput extends GetDomainNameResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a custom <code>DomainName</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, GetDomainNameCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, GetDomainNameCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new GetDomainNameCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDomainNameCommandInput} for command's `input` shape.
        * @see {@link GetDomainNameCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class GetDomainNameCommand extends $Command<GetDomainNameCommandInput, GetDomainNameCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: GetDomainNameCommandInput;
            constructor(input: GetDomainNameCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDomainNameCommandInput, GetDomainNameCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetFunctionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { GetFunctionRequest, GetFunctionResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface GetFunctionCommandInput extends GetFunctionRequest {
    }
    export interface GetFunctionCommandOutput extends GetFunctionResponse, __MetadataBearer {
    }
    /**
        * <p>Get a <code>Function</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, GetFunctionCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, GetFunctionCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new GetFunctionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetFunctionCommandInput} for command's `input` shape.
        * @see {@link GetFunctionCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class GetFunctionCommand extends $Command<GetFunctionCommandInput, GetFunctionCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: GetFunctionCommandInput;
            constructor(input: GetFunctionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetFunctionCommandInput, GetFunctionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetGraphqlApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { GetGraphqlApiRequest, GetGraphqlApiResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface GetGraphqlApiCommandInput extends GetGraphqlApiRequest {
    }
    export interface GetGraphqlApiCommandOutput extends GetGraphqlApiResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a <code>GraphqlApi</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, GetGraphqlApiCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, GetGraphqlApiCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new GetGraphqlApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGraphqlApiCommandInput} for command's `input` shape.
        * @see {@link GetGraphqlApiCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class GetGraphqlApiCommand extends $Command<GetGraphqlApiCommandInput, GetGraphqlApiCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: GetGraphqlApiCommandInput;
            constructor(input: GetGraphqlApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGraphqlApiCommandInput, GetGraphqlApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetIntrospectionSchemaCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { GetIntrospectionSchemaRequest, GetIntrospectionSchemaResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface GetIntrospectionSchemaCommandInput extends GetIntrospectionSchemaRequest {
    }
    export interface GetIntrospectionSchemaCommandOutput extends GetIntrospectionSchemaResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the introspection schema for a GraphQL API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, GetIntrospectionSchemaCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, GetIntrospectionSchemaCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new GetIntrospectionSchemaCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetIntrospectionSchemaCommandInput} for command's `input` shape.
        * @see {@link GetIntrospectionSchemaCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class GetIntrospectionSchemaCommand extends $Command<GetIntrospectionSchemaCommandInput, GetIntrospectionSchemaCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: GetIntrospectionSchemaCommandInput;
            constructor(input: GetIntrospectionSchemaCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetIntrospectionSchemaCommandInput, GetIntrospectionSchemaCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetResolverCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { GetResolverRequest, GetResolverResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface GetResolverCommandInput extends GetResolverRequest {
    }
    export interface GetResolverCommandOutput extends GetResolverResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a <code>Resolver</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, GetResolverCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, GetResolverCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new GetResolverCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetResolverCommandInput} for command's `input` shape.
        * @see {@link GetResolverCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class GetResolverCommand extends $Command<GetResolverCommandInput, GetResolverCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: GetResolverCommandInput;
            constructor(input: GetResolverCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetResolverCommandInput, GetResolverCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetSchemaCreationStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { GetSchemaCreationStatusRequest, GetSchemaCreationStatusResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface GetSchemaCreationStatusCommandInput extends GetSchemaCreationStatusRequest {
    }
    export interface GetSchemaCreationStatusCommandOutput extends GetSchemaCreationStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the current status of a schema creation operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, GetSchemaCreationStatusCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, GetSchemaCreationStatusCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new GetSchemaCreationStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSchemaCreationStatusCommandInput} for command's `input` shape.
        * @see {@link GetSchemaCreationStatusCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class GetSchemaCreationStatusCommand extends $Command<GetSchemaCreationStatusCommandInput, GetSchemaCreationStatusCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: GetSchemaCreationStatusCommandInput;
            constructor(input: GetSchemaCreationStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSchemaCreationStatusCommandInput, GetSchemaCreationStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/GetTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { GetTypeRequest, GetTypeResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface GetTypeCommandInput extends GetTypeRequest {
    }
    export interface GetTypeCommandOutput extends GetTypeResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a <code>Type</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, GetTypeCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, GetTypeCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new GetTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetTypeCommandInput} for command's `input` shape.
        * @see {@link GetTypeCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class GetTypeCommand extends $Command<GetTypeCommandInput, GetTypeCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: GetTypeCommandInput;
            constructor(input: GetTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetTypeCommandInput, GetTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListApiKeysCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { ListApiKeysRequest, ListApiKeysResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface ListApiKeysCommandInput extends ListApiKeysRequest {
    }
    export interface ListApiKeysCommandOutput extends ListApiKeysResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the API keys for a given API.</p>
        *          <note>
        *             <p>API keys are deleted automatically 60 days after they expire. However, they may still
        *             be included in the response until they have actually been deleted. You can safely call
        *                <code>DeleteApiKey</code> to manually delete a key before it's automatically
        *             deleted.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, ListApiKeysCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, ListApiKeysCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new ListApiKeysCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListApiKeysCommandInput} for command's `input` shape.
        * @see {@link ListApiKeysCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class ListApiKeysCommand extends $Command<ListApiKeysCommandInput, ListApiKeysCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: ListApiKeysCommandInput;
            constructor(input: ListApiKeysCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListApiKeysCommandInput, ListApiKeysCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListDataSourcesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { ListDataSourcesRequest, ListDataSourcesResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface ListDataSourcesCommandInput extends ListDataSourcesRequest {
    }
    export interface ListDataSourcesCommandOutput extends ListDataSourcesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the data sources for a given API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, ListDataSourcesCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, ListDataSourcesCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new ListDataSourcesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDataSourcesCommandInput} for command's `input` shape.
        * @see {@link ListDataSourcesCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class ListDataSourcesCommand extends $Command<ListDataSourcesCommandInput, ListDataSourcesCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: ListDataSourcesCommandInput;
            constructor(input: ListDataSourcesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDataSourcesCommandInput, ListDataSourcesCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListDomainNamesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { ListDomainNamesRequest, ListDomainNamesResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface ListDomainNamesCommandInput extends ListDomainNamesRequest {
    }
    export interface ListDomainNamesCommandOutput extends ListDomainNamesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists multiple custom domain names.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, ListDomainNamesCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, ListDomainNamesCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new ListDomainNamesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListDomainNamesCommandInput} for command's `input` shape.
        * @see {@link ListDomainNamesCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class ListDomainNamesCommand extends $Command<ListDomainNamesCommandInput, ListDomainNamesCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: ListDomainNamesCommandInput;
            constructor(input: ListDomainNamesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListDomainNamesCommandInput, ListDomainNamesCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListFunctionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { ListFunctionsRequest, ListFunctionsResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface ListFunctionsCommandInput extends ListFunctionsRequest {
    }
    export interface ListFunctionsCommandOutput extends ListFunctionsResponse, __MetadataBearer {
    }
    /**
        * <p>List multiple functions.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, ListFunctionsCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, ListFunctionsCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new ListFunctionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFunctionsCommandInput} for command's `input` shape.
        * @see {@link ListFunctionsCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class ListFunctionsCommand extends $Command<ListFunctionsCommandInput, ListFunctionsCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: ListFunctionsCommandInput;
            constructor(input: ListFunctionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFunctionsCommandInput, ListFunctionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListGraphqlApisCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { ListGraphqlApisRequest, ListGraphqlApisResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface ListGraphqlApisCommandInput extends ListGraphqlApisRequest {
    }
    export interface ListGraphqlApisCommandOutput extends ListGraphqlApisResponse, __MetadataBearer {
    }
    /**
        * <p>Lists your GraphQL APIs.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, ListGraphqlApisCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, ListGraphqlApisCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new ListGraphqlApisCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGraphqlApisCommandInput} for command's `input` shape.
        * @see {@link ListGraphqlApisCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class ListGraphqlApisCommand extends $Command<ListGraphqlApisCommandInput, ListGraphqlApisCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: ListGraphqlApisCommandInput;
            constructor(input: ListGraphqlApisCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGraphqlApisCommandInput, ListGraphqlApisCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListResolversByFunctionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { ListResolversByFunctionRequest, ListResolversByFunctionResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface ListResolversByFunctionCommandInput extends ListResolversByFunctionRequest {
    }
    export interface ListResolversByFunctionCommandOutput extends ListResolversByFunctionResponse, __MetadataBearer {
    }
    /**
        * <p>List the resolvers that are associated with a specific function.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, ListResolversByFunctionCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, ListResolversByFunctionCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new ListResolversByFunctionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListResolversByFunctionCommandInput} for command's `input` shape.
        * @see {@link ListResolversByFunctionCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class ListResolversByFunctionCommand extends $Command<ListResolversByFunctionCommandInput, ListResolversByFunctionCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: ListResolversByFunctionCommandInput;
            constructor(input: ListResolversByFunctionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListResolversByFunctionCommandInput, ListResolversByFunctionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListResolversCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { ListResolversRequest, ListResolversResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface ListResolversCommandInput extends ListResolversRequest {
    }
    export interface ListResolversCommandOutput extends ListResolversResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the resolvers for a given API and type.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, ListResolversCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, ListResolversCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new ListResolversCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListResolversCommandInput} for command's `input` shape.
        * @see {@link ListResolversCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class ListResolversCommand extends $Command<ListResolversCommandInput, ListResolversCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: ListResolversCommandInput;
            constructor(input: ListResolversCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListResolversCommandInput, ListResolversCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags for a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, ListTagsForResourceCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, ListTagsForResourceCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/ListTypesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { ListTypesRequest, ListTypesResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface ListTypesCommandInput extends ListTypesRequest {
    }
    export interface ListTypesCommandOutput extends ListTypesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the types for a given API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, ListTypesCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, ListTypesCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new ListTypesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTypesCommandInput} for command's `input` shape.
        * @see {@link ListTypesCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class ListTypesCommand extends $Command<ListTypesCommandInput, ListTypesCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: ListTypesCommandInput;
            constructor(input: ListTypesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTypesCommandInput, ListTypesCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/StartSchemaCreationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { StartSchemaCreationRequest, StartSchemaCreationResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface StartSchemaCreationCommandInput extends StartSchemaCreationRequest {
    }
    export interface StartSchemaCreationCommandOutput extends StartSchemaCreationResponse, __MetadataBearer {
    }
    /**
        * <p>Adds a new schema to your GraphQL API.</p>
        *          <p>This operation is asynchronous. Use  to
        *          determine when it has completed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, StartSchemaCreationCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, StartSchemaCreationCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new StartSchemaCreationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartSchemaCreationCommandInput} for command's `input` shape.
        * @see {@link StartSchemaCreationCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class StartSchemaCreationCommand extends $Command<StartSchemaCreationCommandInput, StartSchemaCreationCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: StartSchemaCreationCommandInput;
            constructor(input: StartSchemaCreationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartSchemaCreationCommandInput, StartSchemaCreationCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Tags a resource with user-supplied tags.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, TagResourceCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, TagResourceCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Untags a resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, UntagResourceCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, UntagResourceCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateApiCacheCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { UpdateApiCacheRequest, UpdateApiCacheResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface UpdateApiCacheCommandInput extends UpdateApiCacheRequest {
    }
    export interface UpdateApiCacheCommandOutput extends UpdateApiCacheResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the cache for the GraphQL API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, UpdateApiCacheCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, UpdateApiCacheCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new UpdateApiCacheCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateApiCacheCommandInput} for command's `input` shape.
        * @see {@link UpdateApiCacheCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class UpdateApiCacheCommand extends $Command<UpdateApiCacheCommandInput, UpdateApiCacheCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: UpdateApiCacheCommandInput;
            constructor(input: UpdateApiCacheCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateApiCacheCommandInput, UpdateApiCacheCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateApiKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { UpdateApiKeyRequest, UpdateApiKeyResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface UpdateApiKeyCommandInput extends UpdateApiKeyRequest {
    }
    export interface UpdateApiKeyCommandOutput extends UpdateApiKeyResponse, __MetadataBearer {
    }
    /**
        * <p>Updates an API key. You can update the key as long as it's not deleted.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, UpdateApiKeyCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, UpdateApiKeyCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new UpdateApiKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateApiKeyCommandInput} for command's `input` shape.
        * @see {@link UpdateApiKeyCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class UpdateApiKeyCommand extends $Command<UpdateApiKeyCommandInput, UpdateApiKeyCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: UpdateApiKeyCommandInput;
            constructor(input: UpdateApiKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateApiKeyCommandInput, UpdateApiKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateDataSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { UpdateDataSourceRequest, UpdateDataSourceResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface UpdateDataSourceCommandInput extends UpdateDataSourceRequest {
    }
    export interface UpdateDataSourceCommandOutput extends UpdateDataSourceResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a <code>DataSource</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, UpdateDataSourceCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, UpdateDataSourceCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new UpdateDataSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDataSourceCommandInput} for command's `input` shape.
        * @see {@link UpdateDataSourceCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class UpdateDataSourceCommand extends $Command<UpdateDataSourceCommandInput, UpdateDataSourceCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: UpdateDataSourceCommandInput;
            constructor(input: UpdateDataSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDataSourceCommandInput, UpdateDataSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateDomainNameCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { UpdateDomainNameRequest, UpdateDomainNameResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface UpdateDomainNameCommandInput extends UpdateDomainNameRequest {
    }
    export interface UpdateDomainNameCommandOutput extends UpdateDomainNameResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a custom <code>DomainName</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, UpdateDomainNameCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, UpdateDomainNameCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new UpdateDomainNameCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateDomainNameCommandInput} for command's `input` shape.
        * @see {@link UpdateDomainNameCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class UpdateDomainNameCommand extends $Command<UpdateDomainNameCommandInput, UpdateDomainNameCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: UpdateDomainNameCommandInput;
            constructor(input: UpdateDomainNameCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateDomainNameCommandInput, UpdateDomainNameCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateFunctionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { UpdateFunctionRequest, UpdateFunctionResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface UpdateFunctionCommandInput extends UpdateFunctionRequest {
    }
    export interface UpdateFunctionCommandOutput extends UpdateFunctionResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a <code>Function</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, UpdateFunctionCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, UpdateFunctionCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new UpdateFunctionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFunctionCommandInput} for command's `input` shape.
        * @see {@link UpdateFunctionCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class UpdateFunctionCommand extends $Command<UpdateFunctionCommandInput, UpdateFunctionCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: UpdateFunctionCommandInput;
            constructor(input: UpdateFunctionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFunctionCommandInput, UpdateFunctionCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateGraphqlApiCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { UpdateGraphqlApiRequest, UpdateGraphqlApiResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface UpdateGraphqlApiCommandInput extends UpdateGraphqlApiRequest {
    }
    export interface UpdateGraphqlApiCommandOutput extends UpdateGraphqlApiResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a <code>GraphqlApi</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, UpdateGraphqlApiCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, UpdateGraphqlApiCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new UpdateGraphqlApiCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateGraphqlApiCommandInput} for command's `input` shape.
        * @see {@link UpdateGraphqlApiCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class UpdateGraphqlApiCommand extends $Command<UpdateGraphqlApiCommandInput, UpdateGraphqlApiCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: UpdateGraphqlApiCommandInput;
            constructor(input: UpdateGraphqlApiCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateGraphqlApiCommandInput, UpdateGraphqlApiCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateResolverCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { UpdateResolverRequest, UpdateResolverResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface UpdateResolverCommandInput extends UpdateResolverRequest {
    }
    export interface UpdateResolverCommandOutput extends UpdateResolverResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a <code>Resolver</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, UpdateResolverCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, UpdateResolverCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new UpdateResolverCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateResolverCommandInput} for command's `input` shape.
        * @see {@link UpdateResolverCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class UpdateResolverCommand extends $Command<UpdateResolverCommandInput, UpdateResolverCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: UpdateResolverCommandInput;
            constructor(input: UpdateResolverCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateResolverCommandInput, UpdateResolverCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/commands/UpdateTypeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AppSyncClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/AppSyncClient";
    import { UpdateTypeRequest, UpdateTypeResponse } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0";
    export interface UpdateTypeCommandInput extends UpdateTypeRequest {
    }
    export interface UpdateTypeCommandOutput extends UpdateTypeResponse, __MetadataBearer {
    }
    /**
        * <p>Updates a <code>Type</code> object.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AppSyncClient, UpdateTypeCommand } from "@aws-sdk/client-appsync"; // ES Modules import
        * // const { AppSyncClient, UpdateTypeCommand } = require("@aws-sdk/client-appsync"); // CommonJS import
        * const client = new AppSyncClient(config);
        * const command = new UpdateTypeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateTypeCommandInput} for command's `input` shape.
        * @see {@link UpdateTypeCommandOutput} for command's `response` shape.
        * @see {@link AppSyncClientResolvedConfig | config} for AppSyncClient's `config` shape.
        *
        */
    export class UpdateTypeCommand extends $Command<UpdateTypeCommandInput, UpdateTypeCommandOutput, AppSyncClientResolvedConfig> {
            readonly input: UpdateTypeCommandInput;
            constructor(input: UpdateTypeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AppSyncClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateTypeCommandInput, UpdateTypeCommandOutput>;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { AppSyncServiceException as __BaseException } from "@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/AppSyncServiceException";
    /**
        * <p>You don't have access to perform this operation on this resource.</p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export enum AuthenticationType {
            AMAZON_COGNITO_USER_POOLS = "AMAZON_COGNITO_USER_POOLS",
            API_KEY = "API_KEY",
            AWS_IAM = "AWS_IAM",
            AWS_LAMBDA = "AWS_LAMBDA",
            OPENID_CONNECT = "OPENID_CONNECT"
    }
    /**
        * <p>A <code>LambdaAuthorizerConfig</code> specifies how to authorize AppSync
        *          API access when using the <code>AWS_LAMBDA</code> authorizer mode. Be aware that an AppSync API can have only one Lambda authorizer configured at a
        *          time.</p>
        */
    export interface LambdaAuthorizerConfig {
            /**
                * <p>The number of seconds a response should be cached for. The default is 5 minutes (300
                *          seconds). The Lambda function can override this by returning a
                *             <code>ttlOverride</code> key in its response. A value of 0 disables caching of
                *          responses.</p>
                */
            authorizerResultTtlInSeconds?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the Lambda function to be called for
                *          authorization. This can be a standard Lambda ARN, a version ARN
                *             (<code>.../v3</code>), or an alias ARN. </p>
                *          <p>
                *             <b>Note</b>: This Lambda function must have the
                *          following resource-based policy assigned to it. When configuring Lambda
                *          authorizers in the console, this is done for you. To use the Command Line Interface
                *             (CLI), run the following:</p>
                *          <p>
                *             <code>aws lambda add-permission --function-name
                *             "arn:aws:lambda:us-east-2:111122223333:function:my-function" --statement-id "appsync"
                *             --principal appsync.amazonaws.com --action lambda:InvokeFunction</code>
                *          </p>
                */
            authorizerUri: string | undefined;
            /**
                * <p>A regular expression for validation of tokens before the Lambda function is
                *          called.</p>
                */
            identityValidationExpression?: string;
    }
    export namespace LambdaAuthorizerConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaAuthorizerConfig) => any;
    }
    /**
        * <p>Describes an OpenID Connect (OIDC) configuration.</p>
        */
    export interface OpenIDConnectConfig {
            /**
                * <p>The issuer for the OIDC configuration. The issuer returned by discovery must exactly
                *          match the value of <code>iss</code> in the ID token.</p>
                */
            issuer: string | undefined;
            /**
                * <p>The client identifier of the relying party at the OpenID identity provider. This
                *          identifier is typically obtained when the relying party is registered with the OpenID
                *          identity provider. You can specify a regular expression so that AppSync can
                *          validate against multiple client identifiers at a time.</p>
                */
            clientId?: string;
            /**
                * <p>The number of milliseconds that a token is valid after it's issued to a user.</p>
                */
            iatTTL?: number;
            /**
                * <p>The number of milliseconds that a token is valid after being authenticated.</p>
                */
            authTTL?: number;
    }
    export namespace OpenIDConnectConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpenIDConnectConfig) => any;
    }
    /**
        * <p>Describes an Amazon Cognito user pool configuration.</p>
        */
    export interface CognitoUserPoolConfig {
            /**
                * <p>The user pool ID.</p>
                */
            userPoolId: string | undefined;
            /**
                * <p>The Amazon Web Services Region in which the user pool was created.</p>
                */
            awsRegion: string | undefined;
            /**
                * <p>A regular expression for validating the incoming Amazon Cognito user pool app client
                *          ID.</p>
                */
            appIdClientRegex?: string;
    }
    export namespace CognitoUserPoolConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CognitoUserPoolConfig) => any;
    }
    /**
        * <p>Describes an additional authentication provider.</p>
        */
    export interface AdditionalAuthenticationProvider {
            /**
                * <p>The authentication type: API key, Identity and Access Management (IAM), OpenID
                *          Connect (OIDC), Amazon Cognito user pools, or Lambda.</p>
                */
            authenticationType?: AuthenticationType | string;
            /**
                * <p>The OIDC configuration.</p>
                */
            openIDConnectConfig?: OpenIDConnectConfig;
            /**
                * <p>The Amazon Cognito user pool configuration.</p>
                */
            userPoolConfig?: CognitoUserPoolConfig;
            /**
                * <p>Configuration for Lambda function authorization.</p>
                */
            lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
    }
    export namespace AdditionalAuthenticationProvider {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AdditionalAuthenticationProvider) => any;
    }
    export enum AssociationStatus {
            Failed = "FAILED",
            Processing = "PROCESSING",
            Success = "SUCCESS"
    }
    /**
        * <p>Describes an <code>ApiAssociation</code> object.</p>
        */
    export interface ApiAssociation {
            /**
                * <p>The domain name.</p>
                */
            domainName?: string;
            /**
                * <p>The API ID.</p>
                */
            apiId?: string;
            /**
                * <p>Identifies the status of an association.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>PROCESSING</b>: The API association is being
                *                created. You cannot modify association requests during processing.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>SUCCESS</b>: The API association was successful.
                *                You can modify associations after success.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>FAILED</b>: The API association has failed. You
                *                can modify associations after failure.</p>
                *             </li>
                *          </ul>
                */
            associationStatus?: AssociationStatus | string;
            /**
                * <p>Details about the last deployment status.</p>
                */
            deploymentDetail?: string;
    }
    export namespace ApiAssociation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApiAssociation) => any;
    }
    export enum ApiCachingBehavior {
            FULL_REQUEST_CACHING = "FULL_REQUEST_CACHING",
            PER_RESOLVER_CACHING = "PER_RESOLVER_CACHING"
    }
    export enum ApiCacheStatus {
            AVAILABLE = "AVAILABLE",
            CREATING = "CREATING",
            DELETING = "DELETING",
            FAILED = "FAILED",
            MODIFYING = "MODIFYING"
    }
    export enum ApiCacheType {
            LARGE = "LARGE",
            LARGE_12X = "LARGE_12X",
            LARGE_2X = "LARGE_2X",
            LARGE_4X = "LARGE_4X",
            LARGE_8X = "LARGE_8X",
            MEDIUM = "MEDIUM",
            R4_2XLARGE = "R4_2XLARGE",
            R4_4XLARGE = "R4_4XLARGE",
            R4_8XLARGE = "R4_8XLARGE",
            R4_LARGE = "R4_LARGE",
            R4_XLARGE = "R4_XLARGE",
            SMALL = "SMALL",
            T2_MEDIUM = "T2_MEDIUM",
            T2_SMALL = "T2_SMALL",
            XLARGE = "XLARGE"
    }
    /**
        * <p>The <code>ApiCache</code> object.</p>
        */
    export interface ApiCache {
            /**
                * <p>TTL in seconds for cache entries.</p>
                *          <p>Valid values are 1–3,600 seconds.</p>
                */
            ttl?: number;
            /**
                * <p>Caching behavior.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>FULL_REQUEST_CACHING</b>: All requests are fully
                *                cached.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>PER_RESOLVER_CACHING</b>: Individual resolvers
                *                that you specify are cached.</p>
                *             </li>
                *          </ul>
                */
            apiCachingBehavior?: ApiCachingBehavior | string;
            /**
                * <p>Transit encryption flag when connecting to cache. You cannot update this setting after
                *          creation.</p>
                */
            transitEncryptionEnabled?: boolean;
            /**
                * <p>At-rest encryption flag for cache. You cannot update this setting after creation.</p>
                */
            atRestEncryptionEnabled?: boolean;
            /**
                * <p>The cache instance type. Valid values are </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>SMALL</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MEDIUM</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>XLARGE</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE_2X</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE_4X</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE_8X</code> (not available in all regions)</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE_12X</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p>
                *          <p>The following legacy instance types are available, but their use is discouraged:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>T2_SMALL</b>: A t2.small instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>T2_MEDIUM</b>: A t2.medium instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_LARGE</b>: A r4.large instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_XLARGE</b>: A r4.xlarge instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p>
                *             </li>
                *          </ul>
                */
            type?: ApiCacheType | string;
            /**
                * <p>The cache instance status.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>AVAILABLE</b>: The instance is available for
                *                use.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>CREATING</b>: The instance is currently
                *                creating.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>DELETING</b>: The instance is currently
                *                deleting.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>MODIFYING</b>: The instance is currently
                *                modifying.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>FAILED</b>: The instance has failed
                *                creation.</p>
                *             </li>
                *          </ul>
                */
            status?: ApiCacheStatus | string;
    }
    export namespace ApiCache {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApiCache) => any;
    }
    /**
        * <p>Describes an API key.</p>
        *          <p>Customers invoke AppSync GraphQL API operations with API keys as an
        *          identity mechanism. There are two key versions:</p>
        *          <p>
        *             <b>da1</b>: We introduced this version at launch in November
        *          2017. These keys always expire after 7 days. Amazon DynamoDB TTL manages key
        *          expiration. These keys ceased to be valid after February 21, 2018, and they should no
        *          longer be used.</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>ListApiKeys</code> returns the expiration time in milliseconds.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>CreateApiKey</code> returns the expiration time in
        *                milliseconds.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UpdateApiKey</code> is not available for this key version.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DeleteApiKey</code> deletes the item from the table.</p>
        *             </li>
        *             <li>
        *                <p>Expiration is stored in DynamoDB as milliseconds. This results in a
        *                bug where keys are not automatically deleted because DynamoDB expects the
        *                TTL to be stored in seconds. As a one-time action, we deleted these keys from the
        *                table on February 21, 2018.</p>
        *             </li>
        *          </ul>
        *          <p>
        *             <b>da2</b>: We introduced this version in February 2018 when
        *             AppSync added support to extend key expiration.</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <code>ListApiKeys</code> returns the expiration time and deletion time in
        *                seconds.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>CreateApiKey</code> returns the expiration time and deletion time in
        *                seconds and accepts a user-provided expiration time in seconds.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>UpdateApiKey</code> returns the expiration time and and deletion time in
        *                seconds and accepts a user-provided expiration time in seconds. Expired API keys are
        *                kept for 60 days after the expiration time. You can update the key expiration time as
        *                long as the key isn't deleted.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <code>DeleteApiKey</code> deletes the item from the table.</p>
        *             </li>
        *             <li>
        *                <p>Expiration is stored in DynamoDB as seconds. After the expiration
        *                time, using the key to authenticate will fail. However, you can reinstate the key
        *                before deletion.</p>
        *             </li>
        *             <li>
        *                <p>Deletion is stored in DynamoDB as seconds. The key is deleted after
        *                deletion time.</p>
        *             </li>
        *          </ul>
        */
    export interface ApiKey {
            /**
                * <p>The API key ID.</p>
                */
            id?: string;
            /**
                * <p>A description of the purpose of the API key.</p>
                */
            description?: string;
            /**
                * <p>The time after which the API key expires. The date is represented as seconds since the
                *          epoch, rounded down to the nearest hour.</p>
                */
            expires?: number;
            /**
                * <p>The time after which the API key is deleted. The date is represented as seconds since
                *          the epoch, rounded down to the nearest hour.</p>
                */
            deletes?: number;
    }
    export namespace ApiKey {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ApiKey) => any;
    }
    /**
        * <p>The API key exceeded a limit. Try your request again.</p>
        */
    export class ApiKeyLimitExceededException extends __BaseException {
            readonly name: "ApiKeyLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ApiKeyLimitExceededException, __BaseException>);
    }
    /**
        * <p>The API key expiration must be set to a value between 1 and 365 days from creation (for
        *             <code>CreateApiKey</code>) or from update (for <code>UpdateApiKey</code>).</p>
        */
    export class ApiKeyValidityOutOfBoundsException extends __BaseException {
            readonly name: "ApiKeyValidityOutOfBoundsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ApiKeyValidityOutOfBoundsException, __BaseException>);
    }
    /**
        * <p>The GraphQL API exceeded a limit. Try your request again.</p>
        */
    export class ApiLimitExceededException extends __BaseException {
            readonly name: "ApiLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ApiLimitExceededException, __BaseException>);
    }
    export interface AssociateApiRequest {
            /**
                * <p>The domain name.</p>
                */
            domainName: string | undefined;
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
    }
    export namespace AssociateApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateApiRequest) => any;
    }
    export interface AssociateApiResponse {
            /**
                * <p>The <code>ApiAssociation</code> object.</p>
                */
            apiAssociation?: ApiAssociation;
    }
    export namespace AssociateApiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateApiResponse) => any;
    }
    /**
        * <p>The request is not well formed. For example, a value is invalid or a required field is
        *          missing. Check the field values, and then try again.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    /**
        * <p>An internal AppSync error occurred. Try your request again.</p>
        */
    export class InternalFailureException extends __BaseException {
            readonly name: "InternalFailureException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalFailureException, __BaseException>);
    }
    /**
        * <p>The resource specified in the request was not found. Check the resource, and then try
        *          again.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    export enum AuthorizationType {
            AWS_IAM = "AWS_IAM"
    }
    /**
        * <p>The Identity and Access Management (IAM) configuration.</p>
        */
    export interface AwsIamConfig {
            /**
                * <p>The signing Amazon Web Services Region for IAM authorization.</p>
                */
            signingRegion?: string;
            /**
                * <p>The signing service name for IAM authorization.</p>
                */
            signingServiceName?: string;
    }
    export namespace AwsIamConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AwsIamConfig) => any;
    }
    /**
        * <p>The authorization configuration in case the HTTP endpoint requires authorization.</p>
        */
    export interface AuthorizationConfig {
            /**
                * <p>The authorization type that the HTTP endpoint requires.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>AWS_IAM</b>: The authorization type is Signature
                *                Version 4 (SigV4).</p>
                *             </li>
                *          </ul>
                */
            authorizationType: AuthorizationType | string | undefined;
            /**
                * <p>The Identity and Access Management (IAM) settings.</p>
                */
            awsIamConfig?: AwsIamConfig;
    }
    export namespace AuthorizationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AuthorizationConfig) => any;
    }
    /**
        * <p>Another modification is in progress at this time and it must complete before you can
        *          make your change.</p>
        */
    export class ConcurrentModificationException extends __BaseException {
            readonly name: "ConcurrentModificationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
    }
    /**
        * <p>Represents the input of a <code>CreateApiCache</code> operation.</p>
        */
    export interface CreateApiCacheRequest {
            /**
                * <p>The GraphQL API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>TTL in seconds for cache entries.</p>
                *          <p>Valid values are 1–3,600 seconds.</p>
                */
            ttl: number | undefined;
            /**
                * <p>Transit encryption flag when connecting to cache. You cannot update this setting after
                *          creation.</p>
                */
            transitEncryptionEnabled?: boolean;
            /**
                * <p>At-rest encryption flag for cache. You cannot update this setting after creation.</p>
                */
            atRestEncryptionEnabled?: boolean;
            /**
                * <p>Caching behavior.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>FULL_REQUEST_CACHING</b>: All requests are fully
                *                cached.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>PER_RESOLVER_CACHING</b>: Individual resolvers
                *                that you specify are cached.</p>
                *             </li>
                *          </ul>
                */
            apiCachingBehavior: ApiCachingBehavior | string | undefined;
            /**
                * <p>The cache instance type. Valid values are </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>SMALL</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MEDIUM</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>XLARGE</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE_2X</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE_4X</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE_8X</code> (not available in all regions)</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE_12X</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p>
                *          <p>The following legacy instance types are available, but their use is discouraged:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>T2_SMALL</b>: A t2.small instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>T2_MEDIUM</b>: A t2.medium instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_LARGE</b>: A r4.large instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_XLARGE</b>: A r4.xlarge instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p>
                *             </li>
                *          </ul>
                */
            type: ApiCacheType | string | undefined;
    }
    export namespace CreateApiCacheRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApiCacheRequest) => any;
    }
    /**
        * <p>Represents the output of a <code>CreateApiCache</code> operation.</p>
        */
    export interface CreateApiCacheResponse {
            /**
                * <p>The <code>ApiCache</code> object.</p>
                */
            apiCache?: ApiCache;
    }
    export namespace CreateApiCacheResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApiCacheResponse) => any;
    }
    /**
        * <p>You aren't authorized to perform this operation.</p>
        */
    export class UnauthorizedException extends __BaseException {
            readonly name: "UnauthorizedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnauthorizedException, __BaseException>);
    }
    export interface CreateApiKeyRequest {
            /**
                * <p>The ID for your GraphQL API.</p>
                */
            apiId: string | undefined;
            /**
                * <p>A description of the purpose of the API key.</p>
                */
            description?: string;
            /**
                * <p>From the creation time, the time after which the API key expires. The date is
                *          represented as seconds since the epoch, rounded down to the nearest hour. The default value
                *          for this parameter is 7 days from creation time. For more information, see .</p>
                */
            expires?: number;
    }
    export namespace CreateApiKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApiKeyRequest) => any;
    }
    export interface CreateApiKeyResponse {
            /**
                * <p>The API key.</p>
                */
            apiKey?: ApiKey;
    }
    export namespace CreateApiKeyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateApiKeyResponse) => any;
    }
    /**
        * <p>The request exceeded a limit. Try your request again.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>Describes a Delta Sync configuration.</p>
        */
    export interface DeltaSyncConfig {
            /**
                * <p>The number of minutes that an Item is stored in the data source.</p>
                */
            baseTableTTL?: number;
            /**
                * <p>The Delta Sync table name.</p>
                */
            deltaSyncTableName?: string;
            /**
                * <p>The number of minutes that a Delta Sync log entry is stored in the Delta Sync
                *          table.</p>
                */
            deltaSyncTableTTL?: number;
    }
    export namespace DeltaSyncConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeltaSyncConfig) => any;
    }
    /**
        * <p>Describes an Amazon DynamoDB data source configuration.</p>
        */
    export interface DynamodbDataSourceConfig {
            /**
                * <p>The table name.</p>
                */
            tableName: string | undefined;
            /**
                * <p>The Amazon Web Services Region.</p>
                */
            awsRegion: string | undefined;
            /**
                * <p>Set to TRUE to use Amazon Cognito credentials with this data source.</p>
                */
            useCallerCredentials?: boolean;
            /**
                * <p>The <code>DeltaSyncConfig</code> for a versioned data source.</p>
                */
            deltaSyncConfig?: DeltaSyncConfig;
            /**
                * <p>Set to TRUE to use Conflict Detection and Resolution with this data source.</p>
                */
            versioned?: boolean;
    }
    export namespace DynamodbDataSourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DynamodbDataSourceConfig) => any;
    }
    /**
        * <p>Describes an OpenSearch data source configuration.</p>
        *          <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This
        *          configuration is deprecated. For new data sources, use <a>OpenSearchServiceDataSourceConfig</a> to specify an OpenSearch data
        *          source.</p>
        */
    export interface ElasticsearchDataSourceConfig {
            /**
                * <p>The endpoint.</p>
                */
            endpoint: string | undefined;
            /**
                * <p>The Amazon Web Services Region.</p>
                */
            awsRegion: string | undefined;
    }
    export namespace ElasticsearchDataSourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ElasticsearchDataSourceConfig) => any;
    }
    /**
        * <p>Describes an HTTP data source configuration.</p>
        */
    export interface HttpDataSourceConfig {
            /**
                * <p>The HTTP URL endpoint. You can specify either the domain name or IP, and port
                *          combination, and the URL scheme must be HTTP or HTTPS. If you don't specify the port,
                *             AppSync uses the default port 80 for the HTTP endpoint and port 443 for
                *          HTTPS endpoints.</p>
                */
            endpoint?: string;
            /**
                * <p>The authorization configuration in case the HTTP endpoint requires authorization.</p>
                */
            authorizationConfig?: AuthorizationConfig;
    }
    export namespace HttpDataSourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: HttpDataSourceConfig) => any;
    }
    /**
        * <p>Describes an Lambda data source configuration.</p>
        */
    export interface LambdaDataSourceConfig {
            /**
                * <p>The Amazon Resource Name (ARN) for the Lambda function.</p>
                */
            lambdaFunctionArn: string | undefined;
    }
    export namespace LambdaDataSourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaDataSourceConfig) => any;
    }
    /**
        * <p>Describes an OpenSearch data source configuration.</p>
        */
    export interface OpenSearchServiceDataSourceConfig {
            /**
                * <p>The endpoint.</p>
                */
            endpoint: string | undefined;
            /**
                * <p>The Amazon Web Services Region.</p>
                */
            awsRegion: string | undefined;
    }
    export namespace OpenSearchServiceDataSourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpenSearchServiceDataSourceConfig) => any;
    }
    /**
        * <p>The Amazon Relational Database Service (Amazon RDS) HTTP endpoint configuration.</p>
        */
    export interface RdsHttpEndpointConfig {
            /**
                * <p>Amazon Web Services Region for Amazon RDS HTTP endpoint.</p>
                */
            awsRegion?: string;
            /**
                * <p>Amazon RDS cluster Amazon Resource Name (ARN).</p>
                */
            dbClusterIdentifier?: string;
            /**
                * <p>Logical database name.</p>
                */
            databaseName?: string;
            /**
                * <p>Logical schema name.</p>
                */
            schema?: string;
            /**
                * <p>Amazon Web Services secret store Amazon Resource Name (ARN) for database
                *          credentials.</p>
                */
            awsSecretStoreArn?: string;
    }
    export namespace RdsHttpEndpointConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RdsHttpEndpointConfig) => any;
    }
    export enum RelationalDatabaseSourceType {
            RDS_HTTP_ENDPOINT = "RDS_HTTP_ENDPOINT"
    }
    /**
        * <p>Describes a relational database data source configuration.</p>
        */
    export interface RelationalDatabaseDataSourceConfig {
            /**
                * <p>Source type for the relational database.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>RDS_HTTP_ENDPOINT</b>: The relational database
                *                source type is an Amazon Relational Database Service (Amazon RDS) HTTP
                *                endpoint.</p>
                *             </li>
                *          </ul>
                */
            relationalDatabaseSourceType?: RelationalDatabaseSourceType | string;
            /**
                * <p>Amazon RDS HTTP endpoint settings.</p>
                */
            rdsHttpEndpointConfig?: RdsHttpEndpointConfig;
    }
    export namespace RelationalDatabaseDataSourceConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RelationalDatabaseDataSourceConfig) => any;
    }
    export enum DataSourceType {
            AMAZON_DYNAMODB = "AMAZON_DYNAMODB",
            AMAZON_ELASTICSEARCH = "AMAZON_ELASTICSEARCH",
            AMAZON_OPENSEARCH_SERVICE = "AMAZON_OPENSEARCH_SERVICE",
            AWS_LAMBDA = "AWS_LAMBDA",
            HTTP = "HTTP",
            NONE = "NONE",
            RELATIONAL_DATABASE = "RELATIONAL_DATABASE"
    }
    export interface CreateDataSourceRequest {
            /**
                * <p>The API ID for the GraphQL API for the <code>DataSource</code>.</p>
                */
            apiId: string | undefined;
            /**
                * <p>A user-supplied name for the <code>DataSource</code>.</p>
                */
            name: string | undefined;
            /**
                * <p>A description of the <code>DataSource</code>.</p>
                */
            description?: string;
            /**
                * <p>The type of the <code>DataSource</code>.</p>
                */
            type: DataSourceType | string | undefined;
            /**
                * <p>The Identity and Access Management (IAM) service role Amazon Resource Name (ARN)
                *          for the data source. The system assumes this role when accessing the data source.</p>
                */
            serviceRoleArn?: string;
            /**
                * <p>Amazon DynamoDB settings.</p>
                */
            dynamodbConfig?: DynamodbDataSourceConfig;
            /**
                * <p>Lambda settings.</p>
                */
            lambdaConfig?: LambdaDataSourceConfig;
            /**
                * <p>Amazon OpenSearch Service settings.</p>
                *          <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This
                *          configuration is deprecated. For new data sources, use <a>CreateDataSourceRequest$openSearchServiceConfig</a> to create an OpenSearch data source.</p>
                */
            elasticsearchConfig?: ElasticsearchDataSourceConfig;
            /**
                * <p>Amazon OpenSearch Service settings.</p>
                */
            openSearchServiceConfig?: OpenSearchServiceDataSourceConfig;
            /**
                * <p>HTTP endpoint settings.</p>
                */
            httpConfig?: HttpDataSourceConfig;
            /**
                * <p>Relational database settings.</p>
                */
            relationalDatabaseConfig?: RelationalDatabaseDataSourceConfig;
    }
    export namespace CreateDataSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataSourceRequest) => any;
    }
    /**
        * <p>Describes a data source.</p>
        */
    export interface DataSource {
            /**
                * <p>The data source Amazon Resource Name (ARN).</p>
                */
            dataSourceArn?: string;
            /**
                * <p>The name of the data source.</p>
                */
            name?: string;
            /**
                * <p>The description of the data source.</p>
                */
            description?: string;
            /**
                * <p>The type of the data source.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>AWS_LAMBDA</b>: The data source is an Lambda function.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>AMAZON_DYNAMODB</b>: The data source is an Amazon DynamoDB table.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>AMAZON_ELASTICSEARCH</b>: The data source is an
                *                   Amazon OpenSearch Service domain.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>AMAZON_OPENSEARCH_SERVICE</b>: The data source is
                *                an Amazon OpenSearch Service domain.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>NONE</b>: There is no data source. Use this type
                *                when you want to invoke a GraphQL operation without connecting to a data source, such
                *                as when you're performing data transformation with resolvers or invoking a
                *                subscription from a mutation.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>HTTP</b>: The data source is an HTTP
                *                endpoint.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>RELATIONAL_DATABASE</b>: The data source is a
                *                relational database.</p>
                *             </li>
                *          </ul>
                */
            type?: DataSourceType | string;
            /**
                * <p>The Identity and Access Management (IAM) service role Amazon Resource Name (ARN)
                *          for the data source. The system assumes this role when accessing the data source.</p>
                */
            serviceRoleArn?: string;
            /**
                * <p>DynamoDB settings.</p>
                */
            dynamodbConfig?: DynamodbDataSourceConfig;
            /**
                * <p>Lambda settings.</p>
                */
            lambdaConfig?: LambdaDataSourceConfig;
            /**
                * <p>Amazon OpenSearch Service settings.</p>
                */
            elasticsearchConfig?: ElasticsearchDataSourceConfig;
            /**
                * <p>Amazon OpenSearch Service settings.</p>
                */
            openSearchServiceConfig?: OpenSearchServiceDataSourceConfig;
            /**
                * <p>HTTP endpoint settings.</p>
                */
            httpConfig?: HttpDataSourceConfig;
            /**
                * <p>Relational database settings.</p>
                */
            relationalDatabaseConfig?: RelationalDatabaseDataSourceConfig;
    }
    export namespace DataSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DataSource) => any;
    }
    export interface CreateDataSourceResponse {
            /**
                * <p>The <code>DataSource</code> object.</p>
                */
            dataSource?: DataSource;
    }
    export namespace CreateDataSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDataSourceResponse) => any;
    }
    export interface CreateDomainNameRequest {
            /**
                * <p>The domain name.</p>
                */
            domainName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager
                *             (ACM) certificate or an Identity and Access Management (IAM)
                *          server certificate.</p>
                */
            certificateArn: string | undefined;
            /**
                * <p>A description of the <code>DomainName</code>.</p>
                */
            description?: string;
    }
    export namespace CreateDomainNameRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDomainNameRequest) => any;
    }
    /**
        * <p>Describes a configuration for a custom domain.</p>
        */
    export interface DomainNameConfig {
            /**
                * <p>The domain name.</p>
                */
            domainName?: string;
            /**
                * <p>A description of the <code>DomainName</code> configuration.</p>
                */
            description?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the certificate. This can be an Certificate Manager
                *             (ACM) certificate or an Identity and Access Management (IAM)
                *          server certificate.</p>
                */
            certificateArn?: string;
            /**
                * <p>The domain name that AppSync provides.</p>
                */
            appsyncDomainName?: string;
            /**
                * <p>The ID of your Amazon Route 53 hosted zone.</p>
                */
            hostedZoneId?: string;
    }
    export namespace DomainNameConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DomainNameConfig) => any;
    }
    export interface CreateDomainNameResponse {
            /**
                * <p>The configuration for the <code>DomainName</code>.</p>
                */
            domainNameConfig?: DomainNameConfig;
    }
    export namespace CreateDomainNameResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDomainNameResponse) => any;
    }
    export enum ConflictDetectionType {
            NONE = "NONE",
            VERSION = "VERSION"
    }
    export enum ConflictHandlerType {
            AUTOMERGE = "AUTOMERGE",
            LAMBDA = "LAMBDA",
            NONE = "NONE",
            OPTIMISTIC_CONCURRENCY = "OPTIMISTIC_CONCURRENCY"
    }
    /**
        * <p>The <code>LambdaConflictHandlerConfig</code> object when configuring <code>LAMBDA</code>
        *          as the Conflict Handler.</p>
        */
    export interface LambdaConflictHandlerConfig {
            /**
                * <p>The Amazon Resource Name (ARN) for the Lambda function to use as the
                *          Conflict Handler.</p>
                */
            lambdaConflictHandlerArn?: string;
    }
    export namespace LambdaConflictHandlerConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaConflictHandlerConfig) => any;
    }
    /**
        * <p>Describes a Sync configuration for a resolver.</p>
        *          <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the
        *          resolver is invoked.</p>
        */
    export interface SyncConfig {
            /**
                * <p>The Conflict Resolution strategy to perform in the event of a conflict.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>OPTIMISTIC_CONCURRENCY</b>: Resolve conflicts by
                *                rejecting mutations when versions don't match the latest version at the
                *                server.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>AUTOMERGE</b>: Resolve conflicts with the
                *                Automerge conflict resolution strategy.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>LAMBDA</b>: Resolve conflicts with an Lambda function supplied in the
                *                <code>LambdaConflictHandlerConfig</code>.</p>
                *             </li>
                *          </ul>
                */
            conflictHandler?: ConflictHandlerType | string;
            /**
                * <p>The Conflict Detection strategy to use.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>VERSION</b>: Detect conflicts based on object
                *                versions for this resolver.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>NONE</b>: Do not detect conflicts when invoking
                *                this resolver.</p>
                *             </li>
                *          </ul>
                */
            conflictDetection?: ConflictDetectionType | string;
            /**
                * <p>The <code>LambdaConflictHandlerConfig</code> when configuring <code>LAMBDA</code> as the
                *          Conflict Handler.</p>
                */
            lambdaConflictHandlerConfig?: LambdaConflictHandlerConfig;
    }
    export namespace SyncConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SyncConfig) => any;
    }
    export interface CreateFunctionRequest {
            /**
                * <p>The GraphQL API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The <code>Function</code> name. The function name does not have to be unique.</p>
                */
            name: string | undefined;
            /**
                * <p>The <code>Function</code> description.</p>
                */
            description?: string;
            /**
                * <p>The <code>Function</code>
                *             <code>DataSource</code> name.</p>
                */
            dataSourceName: string | undefined;
            /**
                * <p>The <code>Function</code> request mapping template. Functions support only the
                *          2018-05-29 version of the request mapping template.</p>
                */
            requestMappingTemplate?: string;
            /**
                * <p>The <code>Function</code> response mapping template.</p>
                */
            responseMappingTemplate?: string;
            /**
                * <p>The <code>version</code> of the request mapping template. Currently, the supported value
                *          is 2018-05-29.</p>
                */
            functionVersion: string | undefined;
            /**
                * <p>Describes a Sync configuration for a resolver.</p>
                *          <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the
                *          resolver is invoked.</p>
                */
            syncConfig?: SyncConfig;
            /**
                * <p>The maximum batching size for a resolver.</p>
                */
            maxBatchSize?: number;
    }
    export namespace CreateFunctionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFunctionRequest) => any;
    }
    /**
        * <p>A function is a reusable entity. You can use multiple functions to compose the resolver
        *          logic.</p>
        */
    export interface FunctionConfiguration {
            /**
                * <p>A unique ID representing the <code>Function</code> object.</p>
                */
            functionId?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the <code>Function</code> object.</p>
                */
            functionArn?: string;
            /**
                * <p>The name of the <code>Function</code> object.</p>
                */
            name?: string;
            /**
                * <p>The <code>Function</code> description.</p>
                */
            description?: string;
            /**
                * <p>The name of the <code>DataSource</code>.</p>
                */
            dataSourceName?: string;
            /**
                * <p>The <code>Function</code> request mapping template. Functions support only the
                *          2018-05-29 version of the request mapping template.</p>
                */
            requestMappingTemplate?: string;
            /**
                * <p>The <code>Function</code> response mapping template.</p>
                */
            responseMappingTemplate?: string;
            /**
                * <p>The version of the request mapping template. Currently, only the 2018-05-29 version of
                *          the template is supported.</p>
                */
            functionVersion?: string;
            /**
                * <p>Describes a Sync configuration for a resolver.</p>
                *          <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the
                *          resolver is invoked.</p>
                */
            syncConfig?: SyncConfig;
            /**
                * <p>The maximum batching size for a resolver.</p>
                */
            maxBatchSize?: number;
    }
    export namespace FunctionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FunctionConfiguration) => any;
    }
    export interface CreateFunctionResponse {
            /**
                * <p>The <code>Function</code> object.</p>
                */
            functionConfiguration?: FunctionConfiguration;
    }
    export namespace CreateFunctionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFunctionResponse) => any;
    }
    export enum FieldLogLevel {
            ALL = "ALL",
            ERROR = "ERROR",
            NONE = "NONE"
    }
    /**
        * <p>The Amazon CloudWatch Logs configuration.</p>
        */
    export interface LogConfig {
            /**
                * <p>The field logging level. Values can be NONE, ERROR, or ALL.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>NONE</b>: No field-level logs are
                *                captured.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>ERROR</b>: Logs the following information only for
                *                the fields that are in error:</p>
                *                <ul>
                *                   <li>
                *                      <p>The error section in the server response.</p>
                *                   </li>
                *                   <li>
                *                      <p>Field-level errors.</p>
                *                   </li>
                *                   <li>
                *                      <p>The generated request/response functions that got resolved for error
                *                      fields.</p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>ALL</b>: The following information is logged for
                *                all fields in the query:</p>
                *                <ul>
                *                   <li>
                *                      <p>Field-level tracing information.</p>
                *                   </li>
                *                   <li>
                *                      <p>The generated request/response functions that got resolved for each
                *                      field.</p>
                *                   </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            fieldLogLevel: FieldLogLevel | string | undefined;
            /**
                * <p>The service role that AppSync assumes to publish to CloudWatch
                *          logs in your account.</p>
                */
            cloudWatchLogsRoleArn: string | undefined;
            /**
                * <p>Set to TRUE to exclude sections that contain information such as headers, context, and
                *          evaluated mapping templates, regardless of logging level.</p>
                */
            excludeVerboseContent?: boolean;
    }
    export namespace LogConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LogConfig) => any;
    }
    export enum DefaultAction {
            ALLOW = "ALLOW",
            DENY = "DENY"
    }
    /**
        * <p>Describes an Amazon Cognito user pool configuration.</p>
        */
    export interface UserPoolConfig {
            /**
                * <p>The user pool ID.</p>
                */
            userPoolId: string | undefined;
            /**
                * <p>The Amazon Web Services Region in which the user pool was created.</p>
                */
            awsRegion: string | undefined;
            /**
                * <p>The action that you want your GraphQL API to take when a request that uses Amazon Cognito user pool authentication doesn't match the Amazon Cognito user pool
                *          configuration.</p>
                */
            defaultAction: DefaultAction | string | undefined;
            /**
                * <p>A regular expression for validating the incoming Amazon Cognito user pool app client
                *          ID.</p>
                */
            appIdClientRegex?: string;
    }
    export namespace UserPoolConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserPoolConfig) => any;
    }
    export interface CreateGraphqlApiRequest {
            /**
                * <p>A user-supplied name for the <code>GraphqlApi</code>.</p>
                */
            name: string | undefined;
            /**
                * <p>The Amazon CloudWatch Logs configuration.</p>
                */
            logConfig?: LogConfig;
            /**
                * <p>The authentication type: API key, Identity and Access Management (IAM), OpenID
                *          Connect (OIDC), Amazon Cognito user pools, or Lambda.</p>
                */
            authenticationType: AuthenticationType | string | undefined;
            /**
                * <p>The Amazon Cognito user pool configuration.</p>
                */
            userPoolConfig?: UserPoolConfig;
            /**
                * <p>The OIDC configuration.</p>
                */
            openIDConnectConfig?: OpenIDConnectConfig;
            /**
                * <p>A <code>TagMap</code> object.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>A list of additional authentication providers for the <code>GraphqlApi</code>
                *          API.</p>
                */
            additionalAuthenticationProviders?: AdditionalAuthenticationProvider[];
            /**
                * <p>A flag indicating whether to use X-Ray tracing for the
                *             <code>GraphqlApi</code>.</p>
                */
            xrayEnabled?: boolean;
            /**
                * <p>Configuration for Lambda function authorization.</p>
                */
            lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
    }
    export namespace CreateGraphqlApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGraphqlApiRequest) => any;
    }
    /**
        * <p>Describes a GraphQL API.</p>
        */
    export interface GraphqlApi {
            /**
                * <p>The API name.</p>
                */
            name?: string;
            /**
                * <p>The API ID.</p>
                */
            apiId?: string;
            /**
                * <p>The authentication type.</p>
                */
            authenticationType?: AuthenticationType | string;
            /**
                * <p>The Amazon CloudWatch Logs configuration.</p>
                */
            logConfig?: LogConfig;
            /**
                * <p>The Amazon Cognito user pool configuration.</p>
                */
            userPoolConfig?: UserPoolConfig;
            /**
                * <p>The OpenID Connect configuration.</p>
                */
            openIDConnectConfig?: OpenIDConnectConfig;
            /**
                * <p>The Amazon Resource Name (ARN).</p>
                */
            arn?: string;
            /**
                * <p>The URIs.</p>
                */
            uris?: Record<string, string>;
            /**
                * <p>The tags.</p>
                */
            tags?: Record<string, string>;
            /**
                * <p>A list of additional authentication providers for the <code>GraphqlApi</code>
                *          API.</p>
                */
            additionalAuthenticationProviders?: AdditionalAuthenticationProvider[];
            /**
                * <p>A flag indicating whether to use X-Ray tracing for this
                *             <code>GraphqlApi</code>.</p>
                */
            xrayEnabled?: boolean;
            /**
                * <p>The ARN of the WAF access control list (ACL) associated with this
                *             <code>GraphqlApi</code>, if one exists.</p>
                */
            wafWebAclArn?: string;
            /**
                * <p>Configuration for Lambda function authorization.</p>
                */
            lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
    }
    export namespace GraphqlApi {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GraphqlApi) => any;
    }
    export interface CreateGraphqlApiResponse {
            /**
                * <p>The <code>GraphqlApi</code>.</p>
                */
            graphqlApi?: GraphqlApi;
    }
    export namespace CreateGraphqlApiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGraphqlApiResponse) => any;
    }
    /**
        * <p>The caching configuration for a resolver that has caching activated.</p>
        */
    export interface CachingConfig {
            /**
                * <p>The TTL in seconds for a resolver that has caching activated.</p>
                *          <p>Valid values are 1–3,600 seconds.</p>
                */
            ttl?: number;
            /**
                * <p>The caching keys for a resolver that has caching activated.</p>
                *          <p>Valid values are entries from the <code>$context.arguments</code>,
                *             <code>$context.source</code>, and <code>$context.identity</code> maps.</p>
                */
            cachingKeys?: string[];
    }
    export namespace CachingConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CachingConfig) => any;
    }
    export enum ResolverKind {
            PIPELINE = "PIPELINE",
            UNIT = "UNIT"
    }
    /**
        * <p>The pipeline configuration for a resolver of kind <code>PIPELINE</code>.</p>
        */
    export interface PipelineConfig {
            /**
                * <p>A list of <code>Function</code> objects.</p>
                */
            functions?: string[];
    }
    export namespace PipelineConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PipelineConfig) => any;
    }
    export interface CreateResolverRequest {
            /**
                * <p>The ID for the GraphQL API for which the resolver is being created.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The name of the <code>Type</code>.</p>
                */
            typeName: string | undefined;
            /**
                * <p>The name of the field to attach the resolver to.</p>
                */
            fieldName: string | undefined;
            /**
                * <p>The name of the data source for which the resolver is being created.</p>
                */
            dataSourceName?: string;
            /**
                * <p>The mapping template to use for requests.</p>
                *          <p>A resolver uses a request mapping template to convert a GraphQL expression into a format
                *          that a data source can understand. Mapping templates are written in Apache Velocity
                *          Template Language (VTL).</p>
                *          <p>VTL request mapping templates are optional when using an Lambda data
                *          source. For all other data sources, VTL request and response mapping templates are
                *          required.</p>
                */
            requestMappingTemplate?: string;
            /**
                * <p>The mapping template to use for responses from the data source.</p>
                */
            responseMappingTemplate?: string;
            /**
                * <p>The resolver type.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is
                *                the default resolver type. You can use a UNIT resolver to run a GraphQL query against
                *                a single data source.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>PIPELINE</b>: A PIPELINE resolver type. You can
                *                use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a
                *                serial manner. You can use a pipeline resolver to run a GraphQL query against
                *                multiple data sources.</p>
                *             </li>
                *          </ul>
                */
            kind?: ResolverKind | string;
            /**
                * <p>The <code>PipelineConfig</code>.</p>
                */
            pipelineConfig?: PipelineConfig;
            /**
                * <p>The <code>SyncConfig</code> for a resolver attached to a versioned data source.</p>
                */
            syncConfig?: SyncConfig;
            /**
                * <p>The caching configuration for the resolver.</p>
                */
            cachingConfig?: CachingConfig;
            /**
                * <p>The maximum batching size for a resolver.</p>
                */
            maxBatchSize?: number;
    }
    export namespace CreateResolverRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateResolverRequest) => any;
    }
    /**
        * <p>Describes a resolver.</p>
        */
    export interface Resolver {
            /**
                * <p>The resolver type name.</p>
                */
            typeName?: string;
            /**
                * <p>The resolver field name.</p>
                */
            fieldName?: string;
            /**
                * <p>The resolver data source name.</p>
                */
            dataSourceName?: string;
            /**
                * <p>The resolver Amazon Resource Name (ARN).</p>
                */
            resolverArn?: string;
            /**
                * <p>The request mapping template.</p>
                */
            requestMappingTemplate?: string;
            /**
                * <p>The response mapping template.</p>
                */
            responseMappingTemplate?: string;
            /**
                * <p>The resolver type.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is
                *                the default resolver type. You can use a UNIT resolver to run a GraphQL query against
                *                a single data source.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>PIPELINE</b>: A PIPELINE resolver type. You can
                *                use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a
                *                serial manner. You can use a pipeline resolver to run a GraphQL query against
                *                multiple data sources.</p>
                *             </li>
                *          </ul>
                */
            kind?: ResolverKind | string;
            /**
                * <p>The <code>PipelineConfig</code>.</p>
                */
            pipelineConfig?: PipelineConfig;
            /**
                * <p>The <code>SyncConfig</code> for a resolver attached to a versioned data source.</p>
                */
            syncConfig?: SyncConfig;
            /**
                * <p>The caching configuration for the resolver.</p>
                */
            cachingConfig?: CachingConfig;
            /**
                * <p>The maximum batching size for a resolver.</p>
                */
            maxBatchSize?: number;
    }
    export namespace Resolver {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Resolver) => any;
    }
    export interface CreateResolverResponse {
            /**
                * <p>The <code>Resolver</code> object.</p>
                */
            resolver?: Resolver;
    }
    export namespace CreateResolverResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateResolverResponse) => any;
    }
    export enum TypeDefinitionFormat {
            JSON = "JSON",
            SDL = "SDL"
    }
    export interface CreateTypeRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The type definition, in GraphQL Schema Definition Language (SDL) format.</p>
                *          <p>For more information, see the <a href="http://graphql.org/learn/schema/">GraphQL SDL
                *             documentation</a>.</p>
                */
            definition: string | undefined;
            /**
                * <p>The type format: SDL or JSON.</p>
                */
            format: TypeDefinitionFormat | string | undefined;
    }
    export namespace CreateTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTypeRequest) => any;
    }
    /**
        * <p>Describes a type.</p>
        */
    export interface Type {
            /**
                * <p>The type name.</p>
                */
            name?: string;
            /**
                * <p>The type description.</p>
                */
            description?: string;
            /**
                * <p>The type Amazon Resource Name (ARN).</p>
                */
            arn?: string;
            /**
                * <p>The type definition.</p>
                */
            definition?: string;
            /**
                * <p>The type format: SDL or JSON.</p>
                */
            format?: TypeDefinitionFormat | string;
    }
    export namespace Type {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Type) => any;
    }
    export interface CreateTypeResponse {
            /**
                * <p>The <code>Type</code> object.</p>
                */
            type?: Type;
    }
    export namespace CreateTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateTypeResponse) => any;
    }
    /**
        * <p>Represents the input of a <code>DeleteApiCache</code> operation.</p>
        */
    export interface DeleteApiCacheRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
    }
    export namespace DeleteApiCacheRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApiCacheRequest) => any;
    }
    /**
        * <p>Represents the output of a <code>DeleteApiCache</code> operation.</p>
        */
    export interface DeleteApiCacheResponse {
    }
    export namespace DeleteApiCacheResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApiCacheResponse) => any;
    }
    export interface DeleteApiKeyRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The ID for the API key.</p>
                */
            id: string | undefined;
    }
    export namespace DeleteApiKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApiKeyRequest) => any;
    }
    export interface DeleteApiKeyResponse {
    }
    export namespace DeleteApiKeyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteApiKeyResponse) => any;
    }
    export interface DeleteDataSourceRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The name of the data source.</p>
                */
            name: string | undefined;
    }
    export namespace DeleteDataSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDataSourceRequest) => any;
    }
    export interface DeleteDataSourceResponse {
    }
    export namespace DeleteDataSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDataSourceResponse) => any;
    }
    export interface DeleteDomainNameRequest {
            /**
                * <p>The domain name.</p>
                */
            domainName: string | undefined;
    }
    export namespace DeleteDomainNameRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainNameRequest) => any;
    }
    export interface DeleteDomainNameResponse {
    }
    export namespace DeleteDomainNameResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteDomainNameResponse) => any;
    }
    export interface DeleteFunctionRequest {
            /**
                * <p>The GraphQL API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The <code>Function</code> ID.</p>
                */
            functionId: string | undefined;
    }
    export namespace DeleteFunctionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFunctionRequest) => any;
    }
    export interface DeleteFunctionResponse {
    }
    export namespace DeleteFunctionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFunctionResponse) => any;
    }
    export interface DeleteGraphqlApiRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
    }
    export namespace DeleteGraphqlApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGraphqlApiRequest) => any;
    }
    export interface DeleteGraphqlApiResponse {
    }
    export namespace DeleteGraphqlApiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGraphqlApiResponse) => any;
    }
    export interface DeleteResolverRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The name of the resolver type.</p>
                */
            typeName: string | undefined;
            /**
                * <p>The resolver field name.</p>
                */
            fieldName: string | undefined;
    }
    export namespace DeleteResolverRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResolverRequest) => any;
    }
    export interface DeleteResolverResponse {
    }
    export namespace DeleteResolverResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResolverResponse) => any;
    }
    export interface DeleteTypeRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The type name.</p>
                */
            typeName: string | undefined;
    }
    export namespace DeleteTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTypeRequest) => any;
    }
    export interface DeleteTypeResponse {
    }
    export namespace DeleteTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteTypeResponse) => any;
    }
    export interface DisassociateApiRequest {
            /**
                * <p>The domain name.</p>
                */
            domainName: string | undefined;
    }
    export namespace DisassociateApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateApiRequest) => any;
    }
    export interface DisassociateApiResponse {
    }
    export namespace DisassociateApiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateApiResponse) => any;
    }
    /**
        * <p>Represents the input of a <code>FlushApiCache</code> operation.</p>
        */
    export interface FlushApiCacheRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
    }
    export namespace FlushApiCacheRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FlushApiCacheRequest) => any;
    }
    /**
        * <p>Represents the output of a <code>FlushApiCache</code> operation.</p>
        */
    export interface FlushApiCacheResponse {
    }
    export namespace FlushApiCacheResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FlushApiCacheResponse) => any;
    }
    export interface GetApiAssociationRequest {
            /**
                * <p>The domain name.</p>
                */
            domainName: string | undefined;
    }
    export namespace GetApiAssociationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApiAssociationRequest) => any;
    }
    export interface GetApiAssociationResponse {
            /**
                * <p>The <code>ApiAssociation</code> object.</p>
                */
            apiAssociation?: ApiAssociation;
    }
    export namespace GetApiAssociationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApiAssociationResponse) => any;
    }
    /**
        * <p>Represents the input of a <code>GetApiCache</code> operation.</p>
        */
    export interface GetApiCacheRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
    }
    export namespace GetApiCacheRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApiCacheRequest) => any;
    }
    /**
        * <p>Represents the output of a <code>GetApiCache</code> operation.</p>
        */
    export interface GetApiCacheResponse {
            /**
                * <p>The <code>ApiCache</code> object.</p>
                */
            apiCache?: ApiCache;
    }
    export namespace GetApiCacheResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetApiCacheResponse) => any;
    }
    export interface GetDataSourceRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The name of the data source.</p>
                */
            name: string | undefined;
    }
    export namespace GetDataSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDataSourceRequest) => any;
    }
    export interface GetDataSourceResponse {
            /**
                * <p>The <code>DataSource</code> object.</p>
                */
            dataSource?: DataSource;
    }
    export namespace GetDataSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDataSourceResponse) => any;
    }
    export interface GetDomainNameRequest {
            /**
                * <p>The domain name.</p>
                */
            domainName: string | undefined;
    }
    export namespace GetDomainNameRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainNameRequest) => any;
    }
    export interface GetDomainNameResponse {
            /**
                * <p>The configuration for the <code>DomainName</code>.</p>
                */
            domainNameConfig?: DomainNameConfig;
    }
    export namespace GetDomainNameResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDomainNameResponse) => any;
    }
    export interface GetFunctionRequest {
            /**
                * <p>The GraphQL API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The <code>Function</code> ID.</p>
                */
            functionId: string | undefined;
    }
    export namespace GetFunctionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionRequest) => any;
    }
    export interface GetFunctionResponse {
            /**
                * <p>The <code>Function</code> object.</p>
                */
            functionConfiguration?: FunctionConfiguration;
    }
    export namespace GetFunctionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetFunctionResponse) => any;
    }
    export interface GetGraphqlApiRequest {
            /**
                * <p>The API ID for the GraphQL API.</p>
                */
            apiId: string | undefined;
    }
    export namespace GetGraphqlApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGraphqlApiRequest) => any;
    }
    export interface GetGraphqlApiResponse {
            /**
                * <p>The <code>GraphqlApi</code> object.</p>
                */
            graphqlApi?: GraphqlApi;
    }
    export namespace GetGraphqlApiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGraphqlApiResponse) => any;
    }
    export enum OutputType {
            JSON = "JSON",
            SDL = "SDL"
    }
    export interface GetIntrospectionSchemaRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The schema format: SDL or JSON.</p>
                */
            format: OutputType | string | undefined;
            /**
                * <p>A flag that specifies whether the schema introspection should contain directives.</p>
                */
            includeDirectives?: boolean;
    }
    export namespace GetIntrospectionSchemaRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIntrospectionSchemaRequest) => any;
    }
    export interface GetIntrospectionSchemaResponse {
            /**
                * <p>The schema, in GraphQL Schema Definition Language (SDL) format.</p>
                *          <p>For more information, see the <a href="http://graphql.org/learn/schema/">GraphQL SDL
                *             documentation</a>.</p>
                */
            schema?: Uint8Array;
    }
    export namespace GetIntrospectionSchemaResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetIntrospectionSchemaResponse) => any;
    }
    /**
        * <p>The GraphQL schema is not valid.</p>
        */
    export class GraphQLSchemaException extends __BaseException {
            readonly name: "GraphQLSchemaException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<GraphQLSchemaException, __BaseException>);
    }
    export interface GetResolverRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The resolver type name.</p>
                */
            typeName: string | undefined;
            /**
                * <p>The resolver field name.</p>
                */
            fieldName: string | undefined;
    }
    export namespace GetResolverRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResolverRequest) => any;
    }
    export interface GetResolverResponse {
            /**
                * <p>The <code>Resolver</code> object.</p>
                */
            resolver?: Resolver;
    }
    export namespace GetResolverResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetResolverResponse) => any;
    }
    export interface GetSchemaCreationStatusRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
    }
    export namespace GetSchemaCreationStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSchemaCreationStatusRequest) => any;
    }
    export enum SchemaStatus {
            Active = "ACTIVE",
            Deleting = "DELETING",
            Failed = "FAILED",
            NotApplicable = "NOT_APPLICABLE",
            Processing = "PROCESSING",
            Success = "SUCCESS"
    }
    export interface GetSchemaCreationStatusResponse {
            /**
                * <p>The current state of the schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When
                *          the schema is in the ACTIVE state, you can add data.</p>
                */
            status?: SchemaStatus | string;
            /**
                * <p>Detailed information about the status of the schema creation operation.</p>
                */
            details?: string;
    }
    export namespace GetSchemaCreationStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSchemaCreationStatusResponse) => any;
    }
    export interface GetTypeRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The type name.</p>
                */
            typeName: string | undefined;
            /**
                * <p>The type format: SDL or JSON.</p>
                */
            format: TypeDefinitionFormat | string | undefined;
    }
    export namespace GetTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTypeRequest) => any;
    }
    export interface GetTypeResponse {
            /**
                * <p>The <code>Type</code> object.</p>
                */
            type?: Type;
    }
    export namespace GetTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetTypeResponse) => any;
    }
    export interface ListApiKeysRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which you can
                *          use to return the next set of items in the list.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results that you want the request to return.</p>
                */
            maxResults?: number;
    }
    export namespace ListApiKeysRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListApiKeysRequest) => any;
    }
    export interface ListApiKeysResponse {
            /**
                * <p>The <code>ApiKey</code> objects.</p>
                */
            apiKeys?: ApiKey[];
            /**
                * <p>An identifier to pass in the next request to this operation to return the next set of
                *          items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListApiKeysResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListApiKeysResponse) => any;
    }
    export interface ListDataSourcesRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which you can
                *          use to return the next set of items in the list.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results that you want the request to return.</p>
                */
            maxResults?: number;
    }
    export namespace ListDataSourcesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataSourcesRequest) => any;
    }
    export interface ListDataSourcesResponse {
            /**
                * <p>The <code>DataSource</code> objects.</p>
                */
            dataSources?: DataSource[];
            /**
                * <p>An identifier to pass in the next request to this operation to return the next set of
                *          items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListDataSourcesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDataSourcesResponse) => any;
    }
    export interface ListDomainNamesRequest {
            /**
                * <p>The API token.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results that you want the request to return.</p>
                */
            maxResults?: number;
    }
    export namespace ListDomainNamesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDomainNamesRequest) => any;
    }
    export interface ListDomainNamesResponse {
            /**
                * <p>Lists configurations for multiple domain names.</p>
                */
            domainNameConfigs?: DomainNameConfig[];
            /**
                * <p>The API token.</p>
                */
            nextToken?: string;
    }
    export namespace ListDomainNamesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListDomainNamesResponse) => any;
    }
    export interface ListFunctionsRequest {
            /**
                * <p>The GraphQL API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which you can
                *          use to return the next set of items in the list.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results that you want the request to return.</p>
                */
            maxResults?: number;
    }
    export namespace ListFunctionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFunctionsRequest) => any;
    }
    export interface ListFunctionsResponse {
            /**
                * <p>A list of <code>Function</code> objects.</p>
                */
            functions?: FunctionConfiguration[];
            /**
                * <p>An identifier that was returned from the previous call to this operation, which you can
                *          use to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListFunctionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFunctionsResponse) => any;
    }
    export interface ListGraphqlApisRequest {
            /**
                * <p>An identifier that was returned from the previous call to this operation, which you can
                *          use to return the next set of items in the list.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results that you want the request to return.</p>
                */
            maxResults?: number;
    }
    export namespace ListGraphqlApisRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGraphqlApisRequest) => any;
    }
    export interface ListGraphqlApisResponse {
            /**
                * <p>The <code>GraphqlApi</code> objects.</p>
                */
            graphqlApis?: GraphqlApi[];
            /**
                * <p>An identifier to pass in the next request to this operation to return the next set of
                *          items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListGraphqlApisResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGraphqlApisResponse) => any;
    }
    export interface ListResolversRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The type name.</p>
                */
            typeName: string | undefined;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which you can
                *          use to return the next set of items in the list.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results that you want the request to return.</p>
                */
            maxResults?: number;
    }
    export namespace ListResolversRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResolversRequest) => any;
    }
    export interface ListResolversResponse {
            /**
                * <p>The <code>Resolver</code> objects.</p>
                */
            resolvers?: Resolver[];
            /**
                * <p>An identifier to pass in the next request to this operation to return the next set of
                *          items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListResolversResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResolversResponse) => any;
    }
    export interface ListResolversByFunctionRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The function ID.</p>
                */
            functionId: string | undefined;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which you can
                *          use to return the next set of items in the list.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results that you want the request to return.</p>
                */
            maxResults?: number;
    }
    export namespace ListResolversByFunctionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResolversByFunctionRequest) => any;
    }
    export interface ListResolversByFunctionResponse {
            /**
                * <p>The list of resolvers.</p>
                */
            resolvers?: Resolver[];
            /**
                * <p>An identifier that you can use to return the next set of items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListResolversByFunctionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListResolversByFunctionResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The <code>GraphqlApi</code> Amazon Resource Name (ARN).</p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>A <code>TagMap</code> object.</p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface ListTypesRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The type format: SDL or JSON.</p>
                */
            format: TypeDefinitionFormat | string | undefined;
            /**
                * <p>An identifier that was returned from the previous call to this operation, which you can
                *          use to return the next set of items in the list.</p>
                */
            nextToken?: string;
            /**
                * <p>The maximum number of results that you want the request to return.</p>
                */
            maxResults?: number;
    }
    export namespace ListTypesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTypesRequest) => any;
    }
    export interface ListTypesResponse {
            /**
                * <p>The <code>Type</code> objects.</p>
                */
            types?: Type[];
            /**
                * <p>An identifier to pass in the next request to this operation to return the next set of
                *          items in the list.</p>
                */
            nextToken?: string;
    }
    export namespace ListTypesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTypesResponse) => any;
    }
    export interface StartSchemaCreationRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The schema definition, in GraphQL schema language format.</p>
                */
            definition: Uint8Array | undefined;
    }
    export namespace StartSchemaCreationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSchemaCreationRequest) => any;
    }
    export interface StartSchemaCreationResponse {
            /**
                * <p>The current state of the schema (PROCESSING, FAILED, SUCCESS, or NOT_APPLICABLE). When
                *          the schema is in the ACTIVE state, you can add data.</p>
                */
            status?: SchemaStatus | string;
    }
    export namespace StartSchemaCreationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSchemaCreationResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The <code>GraphqlApi</code> Amazon Resource Name (ARN).</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>A <code>TagMap</code> object.</p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The <code>GraphqlApi</code> Amazon Resource Name (ARN).</p>
                */
            resourceArn: string | undefined;
            /**
                * <p>A list of <code>TagKey</code> objects.</p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    /**
        * <p>Represents the input of a <code>UpdateApiCache</code> operation.</p>
        */
    export interface UpdateApiCacheRequest {
            /**
                * <p>The GraphQL API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>TTL in seconds for cache entries.</p>
                *          <p>Valid values are 1–3,600 seconds.</p>
                */
            ttl: number | undefined;
            /**
                * <p>Caching behavior.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>FULL_REQUEST_CACHING</b>: All requests are fully
                *                cached.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>PER_RESOLVER_CACHING</b>: Individual resolvers
                *                that you specify are cached.</p>
                *             </li>
                *          </ul>
                */
            apiCachingBehavior: ApiCachingBehavior | string | undefined;
            /**
                * <p>The cache instance type. Valid values are </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <code>SMALL</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>MEDIUM</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>XLARGE</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE_2X</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE_4X</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE_8X</code> (not available in all regions)</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <code>LARGE_12X</code>
                *                </p>
                *             </li>
                *          </ul>
                *          <p>Historically, instance types were identified by an EC2-style value. As of July 2020, this is deprecated, and the generic identifiers above should be used.</p>
                *          <p>The following legacy instance types are available, but their use is discouraged:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>T2_SMALL</b>: A t2.small instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>T2_MEDIUM</b>: A t2.medium instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_LARGE</b>: A r4.large instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_XLARGE</b>: A r4.xlarge instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_2XLARGE</b>: A r4.2xlarge instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_4XLARGE</b>: A r4.4xlarge instance type.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>R4_8XLARGE</b>: A r4.8xlarge instance type.</p>
                *             </li>
                *          </ul>
                */
            type: ApiCacheType | string | undefined;
    }
    export namespace UpdateApiCacheRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApiCacheRequest) => any;
    }
    /**
        * <p>Represents the output of a <code>UpdateApiCache</code> operation.</p>
        */
    export interface UpdateApiCacheResponse {
            /**
                * <p>The <code>ApiCache</code> object.</p>
                */
            apiCache?: ApiCache;
    }
    export namespace UpdateApiCacheResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApiCacheResponse) => any;
    }
    export interface UpdateApiKeyRequest {
            /**
                * <p>The ID for the GraphQL API.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The API key ID.</p>
                */
            id: string | undefined;
            /**
                * <p>A description of the purpose of the API key.</p>
                */
            description?: string;
            /**
                * <p>From the update time, the time after which the API key expires. The date is represented
                *          as seconds since the epoch. For more information, see .</p>
                */
            expires?: number;
    }
    export namespace UpdateApiKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApiKeyRequest) => any;
    }
    export interface UpdateApiKeyResponse {
            /**
                * <p>The API key.</p>
                */
            apiKey?: ApiKey;
    }
    export namespace UpdateApiKeyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateApiKeyResponse) => any;
    }
    export interface UpdateDataSourceRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The new name for the data source.</p>
                */
            name: string | undefined;
            /**
                * <p>The new description for the data source.</p>
                */
            description?: string;
            /**
                * <p>The new data source type.</p>
                */
            type: DataSourceType | string | undefined;
            /**
                * <p>The new service role Amazon Resource Name (ARN) for the data source.</p>
                */
            serviceRoleArn?: string;
            /**
                * <p>The new Amazon DynamoDB configuration.</p>
                */
            dynamodbConfig?: DynamodbDataSourceConfig;
            /**
                * <p>The new Lambda configuration.</p>
                */
            lambdaConfig?: LambdaDataSourceConfig;
            /**
                * <p>The new OpenSearch configuration.</p>
                *          <p>As of September 2021, Amazon Elasticsearch service is Amazon OpenSearch Service. This
                *          configuration is deprecated. Instead, use <a>UpdateDataSourceRequest$openSearchServiceConfig</a> to update an OpenSearch data source.</p>
                */
            elasticsearchConfig?: ElasticsearchDataSourceConfig;
            /**
                * <p>The new OpenSearch configuration.</p>
                */
            openSearchServiceConfig?: OpenSearchServiceDataSourceConfig;
            /**
                * <p>The new HTTP endpoint configuration.</p>
                */
            httpConfig?: HttpDataSourceConfig;
            /**
                * <p>The new relational database configuration.</p>
                */
            relationalDatabaseConfig?: RelationalDatabaseDataSourceConfig;
    }
    export namespace UpdateDataSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDataSourceRequest) => any;
    }
    export interface UpdateDataSourceResponse {
            /**
                * <p>The updated <code>DataSource</code> object.</p>
                */
            dataSource?: DataSource;
    }
    export namespace UpdateDataSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDataSourceResponse) => any;
    }
    export interface UpdateDomainNameRequest {
            /**
                * <p>The domain name.</p>
                */
            domainName: string | undefined;
            /**
                * <p>A description of the <code>DomainName</code>.</p>
                */
            description?: string;
    }
    export namespace UpdateDomainNameRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainNameRequest) => any;
    }
    export interface UpdateDomainNameResponse {
            /**
                * <p>The configuration for the <code>DomainName</code>.</p>
                */
            domainNameConfig?: DomainNameConfig;
    }
    export namespace UpdateDomainNameResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateDomainNameResponse) => any;
    }
    export interface UpdateFunctionRequest {
            /**
                * <p>The GraphQL API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The <code>Function</code> name.</p>
                */
            name: string | undefined;
            /**
                * <p>The <code>Function</code> description.</p>
                */
            description?: string;
            /**
                * <p>The function ID.</p>
                */
            functionId: string | undefined;
            /**
                * <p>The <code>Function</code>
                *             <code>DataSource</code> name.</p>
                */
            dataSourceName: string | undefined;
            /**
                * <p>The <code>Function</code> request mapping template. Functions support only the
                *          2018-05-29 version of the request mapping template.</p>
                */
            requestMappingTemplate?: string;
            /**
                * <p>The <code>Function</code> request mapping template.</p>
                */
            responseMappingTemplate?: string;
            /**
                * <p>The <code>version</code> of the request mapping template. Currently, the supported value
                *          is 2018-05-29.</p>
                */
            functionVersion: string | undefined;
            /**
                * <p>Describes a Sync configuration for a resolver.</p>
                *          <p>Specifies which Conflict Detection strategy and Resolution strategy to use when the
                *          resolver is invoked.</p>
                */
            syncConfig?: SyncConfig;
            /**
                * <p>The maximum batching size for a resolver.</p>
                */
            maxBatchSize?: number;
    }
    export namespace UpdateFunctionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFunctionRequest) => any;
    }
    export interface UpdateFunctionResponse {
            /**
                * <p>The <code>Function</code> object.</p>
                */
            functionConfiguration?: FunctionConfiguration;
    }
    export namespace UpdateFunctionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFunctionResponse) => any;
    }
    export interface UpdateGraphqlApiRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The new name for the <code>GraphqlApi</code> object.</p>
                */
            name: string | undefined;
            /**
                * <p>The Amazon CloudWatch Logs configuration for the <code>GraphqlApi</code> object.</p>
                */
            logConfig?: LogConfig;
            /**
                * <p>The new authentication type for the <code>GraphqlApi</code> object.</p>
                */
            authenticationType?: AuthenticationType | string;
            /**
                * <p>The new Amazon Cognito user pool configuration for the <code>~GraphqlApi</code>
                *          object.</p>
                */
            userPoolConfig?: UserPoolConfig;
            /**
                * <p>The OpenID Connect configuration for the <code>GraphqlApi</code> object.</p>
                */
            openIDConnectConfig?: OpenIDConnectConfig;
            /**
                * <p>A list of additional authentication providers for the <code>GraphqlApi</code>
                *          API.</p>
                */
            additionalAuthenticationProviders?: AdditionalAuthenticationProvider[];
            /**
                * <p>A flag indicating whether to use X-Ray tracing for the
                *             <code>GraphqlApi</code>.</p>
                */
            xrayEnabled?: boolean;
            /**
                * <p>Configuration for Lambda function authorization.</p>
                */
            lambdaAuthorizerConfig?: LambdaAuthorizerConfig;
    }
    export namespace UpdateGraphqlApiRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGraphqlApiRequest) => any;
    }
    export interface UpdateGraphqlApiResponse {
            /**
                * <p>The updated <code>GraphqlApi</code> object.</p>
                */
            graphqlApi?: GraphqlApi;
    }
    export namespace UpdateGraphqlApiResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGraphqlApiResponse) => any;
    }
    export interface UpdateResolverRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The new type name.</p>
                */
            typeName: string | undefined;
            /**
                * <p>The new field name.</p>
                */
            fieldName: string | undefined;
            /**
                * <p>The new data source name.</p>
                */
            dataSourceName?: string;
            /**
                * <p>The new request mapping template.</p>
                *          <p>A resolver uses a request mapping template to convert a GraphQL expression into a format
                *          that a data source can understand. Mapping templates are written in Apache Velocity
                *          Template Language (VTL).</p>
                *          <p>VTL request mapping templates are optional when using an Lambda data
                *          source. For all other data sources, VTL request and response mapping templates are
                *          required.</p>
                */
            requestMappingTemplate?: string;
            /**
                * <p>The new response mapping template.</p>
                */
            responseMappingTemplate?: string;
            /**
                * <p>The resolver type.</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>UNIT</b>: A UNIT resolver type. A UNIT resolver is
                *                the default resolver type. You can use a UNIT resolver to run a GraphQL query against
                *                a single data source.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>PIPELINE</b>: A PIPELINE resolver type. You can
                *                use a PIPELINE resolver to invoke a series of <code>Function</code> objects in a
                *                serial manner. You can use a pipeline resolver to run a GraphQL query against
                *                multiple data sources.</p>
                *             </li>
                *          </ul>
                */
            kind?: ResolverKind | string;
            /**
                * <p>The <code>PipelineConfig</code>.</p>
                */
            pipelineConfig?: PipelineConfig;
            /**
                * <p>The <code>SyncConfig</code> for a resolver attached to a versioned data source.</p>
                */
            syncConfig?: SyncConfig;
            /**
                * <p>The caching configuration for the resolver.</p>
                */
            cachingConfig?: CachingConfig;
            /**
                * <p>The maximum batching size for a resolver.</p>
                */
            maxBatchSize?: number;
    }
    export namespace UpdateResolverRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateResolverRequest) => any;
    }
    export interface UpdateResolverResponse {
            /**
                * <p>The updated <code>Resolver</code> object.</p>
                */
            resolver?: Resolver;
    }
    export namespace UpdateResolverResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateResolverResponse) => any;
    }
    export interface UpdateTypeRequest {
            /**
                * <p>The API ID.</p>
                */
            apiId: string | undefined;
            /**
                * <p>The new type name.</p>
                */
            typeName: string | undefined;
            /**
                * <p>The new definition.</p>
                */
            definition?: string;
            /**
                * <p>The new type format: SDL or JSON.</p>
                */
            format: TypeDefinitionFormat | string | undefined;
    }
    export namespace UpdateTypeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTypeRequest) => any;
    }
    export interface UpdateTypeResponse {
            /**
                * <p>The updated <code>Type</code> object.</p>
                */
            type?: Type;
    }
    export namespace UpdateTypeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateTypeResponse) => any;
    }
}

declare module '@aws-sdk/client-appsync/node_modules/@aws-sdk/client-appsync/dist-types/models/AppSyncServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from AppSync service.
        */
    export class AppSyncServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

