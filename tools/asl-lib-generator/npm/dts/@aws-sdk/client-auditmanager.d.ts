// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-auditmanager' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AuditManagerClient } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { AssociateAssessmentReportEvidenceFolderCommandInput, AssociateAssessmentReportEvidenceFolderCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/AssociateAssessmentReportEvidenceFolderCommand";
    import { BatchAssociateAssessmentReportEvidenceCommandInput, BatchAssociateAssessmentReportEvidenceCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchAssociateAssessmentReportEvidenceCommand";
    import { BatchCreateDelegationByAssessmentCommandInput, BatchCreateDelegationByAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchCreateDelegationByAssessmentCommand";
    import { BatchDeleteDelegationByAssessmentCommandInput, BatchDeleteDelegationByAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchDeleteDelegationByAssessmentCommand";
    import { BatchDisassociateAssessmentReportEvidenceCommandInput, BatchDisassociateAssessmentReportEvidenceCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchDisassociateAssessmentReportEvidenceCommand";
    import { BatchImportEvidenceToAssessmentControlCommandInput, BatchImportEvidenceToAssessmentControlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchImportEvidenceToAssessmentControlCommand";
    import { CreateAssessmentCommandInput, CreateAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/CreateAssessmentCommand";
    import { CreateAssessmentFrameworkCommandInput, CreateAssessmentFrameworkCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/CreateAssessmentFrameworkCommand";
    import { CreateAssessmentReportCommandInput, CreateAssessmentReportCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/CreateAssessmentReportCommand";
    import { CreateControlCommandInput, CreateControlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/CreateControlCommand";
    import { DeleteAssessmentCommandInput, DeleteAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteAssessmentCommand";
    import { DeleteAssessmentFrameworkCommandInput, DeleteAssessmentFrameworkCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteAssessmentFrameworkCommand";
    import { DeleteAssessmentFrameworkShareCommandInput, DeleteAssessmentFrameworkShareCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteAssessmentFrameworkShareCommand";
    import { DeleteAssessmentReportCommandInput, DeleteAssessmentReportCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteAssessmentReportCommand";
    import { DeleteControlCommandInput, DeleteControlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteControlCommand";
    import { DeregisterAccountCommandInput, DeregisterAccountCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeregisterAccountCommand";
    import { DeregisterOrganizationAdminAccountCommandInput, DeregisterOrganizationAdminAccountCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeregisterOrganizationAdminAccountCommand";
    import { DisassociateAssessmentReportEvidenceFolderCommandInput, DisassociateAssessmentReportEvidenceFolderCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DisassociateAssessmentReportEvidenceFolderCommand";
    import { GetAccountStatusCommandInput, GetAccountStatusCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetAccountStatusCommand";
    import { GetAssessmentCommandInput, GetAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetAssessmentCommand";
    import { GetAssessmentFrameworkCommandInput, GetAssessmentFrameworkCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetAssessmentFrameworkCommand";
    import { GetAssessmentReportUrlCommandInput, GetAssessmentReportUrlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetAssessmentReportUrlCommand";
    import { GetChangeLogsCommandInput, GetChangeLogsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetChangeLogsCommand";
    import { GetControlCommandInput, GetControlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetControlCommand";
    import { GetDelegationsCommandInput, GetDelegationsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetDelegationsCommand";
    import { GetEvidenceByEvidenceFolderCommandInput, GetEvidenceByEvidenceFolderCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceByEvidenceFolderCommand";
    import { GetEvidenceCommandInput, GetEvidenceCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceCommand";
    import { GetEvidenceFolderCommandInput, GetEvidenceFolderCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceFolderCommand";
    import { GetEvidenceFoldersByAssessmentCommandInput, GetEvidenceFoldersByAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceFoldersByAssessmentCommand";
    import { GetEvidenceFoldersByAssessmentControlCommandInput, GetEvidenceFoldersByAssessmentControlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceFoldersByAssessmentControlCommand";
    import { GetInsightsByAssessmentCommandInput, GetInsightsByAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetInsightsByAssessmentCommand";
    import { GetInsightsCommandInput, GetInsightsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetInsightsCommand";
    import { GetOrganizationAdminAccountCommandInput, GetOrganizationAdminAccountCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetOrganizationAdminAccountCommand";
    import { GetServicesInScopeCommandInput, GetServicesInScopeCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetServicesInScopeCommand";
    import { GetSettingsCommandInput, GetSettingsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetSettingsCommand";
    import { ListAssessmentControlInsightsByControlDomainCommandInput, ListAssessmentControlInsightsByControlDomainCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentControlInsightsByControlDomainCommand";
    import { ListAssessmentFrameworksCommandInput, ListAssessmentFrameworksCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentFrameworksCommand";
    import { ListAssessmentFrameworkShareRequestsCommandInput, ListAssessmentFrameworkShareRequestsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentFrameworkShareRequestsCommand";
    import { ListAssessmentReportsCommandInput, ListAssessmentReportsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentReportsCommand";
    import { ListAssessmentsCommandInput, ListAssessmentsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentsCommand";
    import { ListControlDomainInsightsByAssessmentCommandInput, ListControlDomainInsightsByAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListControlDomainInsightsByAssessmentCommand";
    import { ListControlDomainInsightsCommandInput, ListControlDomainInsightsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListControlDomainInsightsCommand";
    import { ListControlInsightsByControlDomainCommandInput, ListControlInsightsByControlDomainCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListControlInsightsByControlDomainCommand";
    import { ListControlsCommandInput, ListControlsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListControlsCommand";
    import { ListKeywordsForDataSourceCommandInput, ListKeywordsForDataSourceCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListKeywordsForDataSourceCommand";
    import { ListNotificationsCommandInput, ListNotificationsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListNotificationsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListTagsForResourceCommand";
    import { RegisterAccountCommandInput, RegisterAccountCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/RegisterAccountCommand";
    import { RegisterOrganizationAdminAccountCommandInput, RegisterOrganizationAdminAccountCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/RegisterOrganizationAdminAccountCommand";
    import { StartAssessmentFrameworkShareCommandInput, StartAssessmentFrameworkShareCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/StartAssessmentFrameworkShareCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UntagResourceCommand";
    import { UpdateAssessmentCommandInput, UpdateAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentCommand";
    import { UpdateAssessmentControlCommandInput, UpdateAssessmentControlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentControlCommand";
    import { UpdateAssessmentControlSetStatusCommandInput, UpdateAssessmentControlSetStatusCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentControlSetStatusCommand";
    import { UpdateAssessmentFrameworkCommandInput, UpdateAssessmentFrameworkCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentFrameworkCommand";
    import { UpdateAssessmentFrameworkShareCommandInput, UpdateAssessmentFrameworkShareCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentFrameworkShareCommand";
    import { UpdateAssessmentStatusCommandInput, UpdateAssessmentStatusCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentStatusCommand";
    import { UpdateControlCommandInput, UpdateControlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateControlCommand";
    import { UpdateSettingsCommandInput, UpdateSettingsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateSettingsCommand";
    import { ValidateAssessmentReportIntegrityCommandInput, ValidateAssessmentReportIntegrityCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ValidateAssessmentReportIntegrityCommand";
    /**
        * <p>Welcome to the Audit Manager API reference. This guide is for developers who
        *          need detailed information about the Audit Manager API operations, data types, and
        *          errors. </p>
        *          <p>Audit Manager is a service that provides automated evidence collection so that
        *          you can continually audit your Amazon Web Services usage. You can use it to assess the
        *          effectiveness of your controls, manage risk, and simplify compliance.</p>
        *          <p>Audit Manager provides prebuilt frameworks that structure and automate
        *          assessments for a given compliance standard. Frameworks include a prebuilt collection of
        *          controls with descriptions and testing procedures. These controls are grouped according to
        *          the requirements of the specified compliance standard or regulation. You can also customize
        *          frameworks and controls to support internal audits with specific requirements. </p>
        *          <p>Use the following links to get started with the Audit Manager API:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html">Actions</a>: An
        *                alphabetical list of all Audit Manager API operations.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html">Data types</a>: An alphabetical list of all Audit Manager data
        *                types.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html">Common
        *                   parameters</a>: Parameters that all Query operations can use.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html">Common errors</a>:
        *                Client and server errors that all operations can return.</p>
        *             </li>
        *          </ul>
        *          <p>If you're new to Audit Manager, we recommend that you review the <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html">
        *             Audit Manager User Guide</a>.</p>
        */
    export class AuditManager extends AuditManagerClient {
            /**
                * <p> Associates an evidence folder to an assessment report in a Audit Manager
                *          assessment. </p>
                */
            associateAssessmentReportEvidenceFolder(args: AssociateAssessmentReportEvidenceFolderCommandInput, options?: __HttpHandlerOptions): Promise<AssociateAssessmentReportEvidenceFolderCommandOutput>;
            associateAssessmentReportEvidenceFolder(args: AssociateAssessmentReportEvidenceFolderCommandInput, cb: (err: any, data?: AssociateAssessmentReportEvidenceFolderCommandOutput) => void): void;
            associateAssessmentReportEvidenceFolder(args: AssociateAssessmentReportEvidenceFolderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateAssessmentReportEvidenceFolderCommandOutput) => void): void;
            /**
                * <p> Associates a list of evidence to an assessment report in an Audit Manager
                *          assessment. </p>
                */
            batchAssociateAssessmentReportEvidence(args: BatchAssociateAssessmentReportEvidenceCommandInput, options?: __HttpHandlerOptions): Promise<BatchAssociateAssessmentReportEvidenceCommandOutput>;
            batchAssociateAssessmentReportEvidence(args: BatchAssociateAssessmentReportEvidenceCommandInput, cb: (err: any, data?: BatchAssociateAssessmentReportEvidenceCommandOutput) => void): void;
            batchAssociateAssessmentReportEvidence(args: BatchAssociateAssessmentReportEvidenceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchAssociateAssessmentReportEvidenceCommandOutput) => void): void;
            /**
                * <p> Creates a batch of delegations for an assessment in Audit Manager. </p>
                */
            batchCreateDelegationByAssessment(args: BatchCreateDelegationByAssessmentCommandInput, options?: __HttpHandlerOptions): Promise<BatchCreateDelegationByAssessmentCommandOutput>;
            batchCreateDelegationByAssessment(args: BatchCreateDelegationByAssessmentCommandInput, cb: (err: any, data?: BatchCreateDelegationByAssessmentCommandOutput) => void): void;
            batchCreateDelegationByAssessment(args: BatchCreateDelegationByAssessmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchCreateDelegationByAssessmentCommandOutput) => void): void;
            /**
                * <p> Deletes a batch of delegations for an assessment in Audit Manager. </p>
                */
            batchDeleteDelegationByAssessment(args: BatchDeleteDelegationByAssessmentCommandInput, options?: __HttpHandlerOptions): Promise<BatchDeleteDelegationByAssessmentCommandOutput>;
            batchDeleteDelegationByAssessment(args: BatchDeleteDelegationByAssessmentCommandInput, cb: (err: any, data?: BatchDeleteDelegationByAssessmentCommandOutput) => void): void;
            batchDeleteDelegationByAssessment(args: BatchDeleteDelegationByAssessmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDeleteDelegationByAssessmentCommandOutput) => void): void;
            /**
                * <p> Disassociates a list of evidence from an assessment report in Audit Manager.
                *       </p>
                */
            batchDisassociateAssessmentReportEvidence(args: BatchDisassociateAssessmentReportEvidenceCommandInput, options?: __HttpHandlerOptions): Promise<BatchDisassociateAssessmentReportEvidenceCommandOutput>;
            batchDisassociateAssessmentReportEvidence(args: BatchDisassociateAssessmentReportEvidenceCommandInput, cb: (err: any, data?: BatchDisassociateAssessmentReportEvidenceCommandOutput) => void): void;
            batchDisassociateAssessmentReportEvidence(args: BatchDisassociateAssessmentReportEvidenceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchDisassociateAssessmentReportEvidenceCommandOutput) => void): void;
            /**
                * <p> Uploads one or more pieces of evidence to a control in an Audit Manager
                *          assessment. </p>
                */
            batchImportEvidenceToAssessmentControl(args: BatchImportEvidenceToAssessmentControlCommandInput, options?: __HttpHandlerOptions): Promise<BatchImportEvidenceToAssessmentControlCommandOutput>;
            batchImportEvidenceToAssessmentControl(args: BatchImportEvidenceToAssessmentControlCommandInput, cb: (err: any, data?: BatchImportEvidenceToAssessmentControlCommandOutput) => void): void;
            batchImportEvidenceToAssessmentControl(args: BatchImportEvidenceToAssessmentControlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchImportEvidenceToAssessmentControlCommandOutput) => void): void;
            /**
                * <p> Creates an assessment in Audit Manager. </p>
                */
            createAssessment(args: CreateAssessmentCommandInput, options?: __HttpHandlerOptions): Promise<CreateAssessmentCommandOutput>;
            createAssessment(args: CreateAssessmentCommandInput, cb: (err: any, data?: CreateAssessmentCommandOutput) => void): void;
            createAssessment(args: CreateAssessmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAssessmentCommandOutput) => void): void;
            /**
                * <p> Creates a custom framework in Audit Manager. </p>
                */
            createAssessmentFramework(args: CreateAssessmentFrameworkCommandInput, options?: __HttpHandlerOptions): Promise<CreateAssessmentFrameworkCommandOutput>;
            createAssessmentFramework(args: CreateAssessmentFrameworkCommandInput, cb: (err: any, data?: CreateAssessmentFrameworkCommandOutput) => void): void;
            createAssessmentFramework(args: CreateAssessmentFrameworkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAssessmentFrameworkCommandOutput) => void): void;
            /**
                * <p> Creates an assessment report for the specified assessment. </p>
                */
            createAssessmentReport(args: CreateAssessmentReportCommandInput, options?: __HttpHandlerOptions): Promise<CreateAssessmentReportCommandOutput>;
            createAssessmentReport(args: CreateAssessmentReportCommandInput, cb: (err: any, data?: CreateAssessmentReportCommandOutput) => void): void;
            createAssessmentReport(args: CreateAssessmentReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAssessmentReportCommandOutput) => void): void;
            /**
                * <p> Creates a new custom control in Audit Manager. </p>
                */
            createControl(args: CreateControlCommandInput, options?: __HttpHandlerOptions): Promise<CreateControlCommandOutput>;
            createControl(args: CreateControlCommandInput, cb: (err: any, data?: CreateControlCommandOutput) => void): void;
            createControl(args: CreateControlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateControlCommandOutput) => void): void;
            /**
                * <p> Deletes an assessment in Audit Manager. </p>
                */
            deleteAssessment(args: DeleteAssessmentCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAssessmentCommandOutput>;
            deleteAssessment(args: DeleteAssessmentCommandInput, cb: (err: any, data?: DeleteAssessmentCommandOutput) => void): void;
            deleteAssessment(args: DeleteAssessmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAssessmentCommandOutput) => void): void;
            /**
                * <p> Deletes a custom framework in Audit Manager. </p>
                */
            deleteAssessmentFramework(args: DeleteAssessmentFrameworkCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAssessmentFrameworkCommandOutput>;
            deleteAssessmentFramework(args: DeleteAssessmentFrameworkCommandInput, cb: (err: any, data?: DeleteAssessmentFrameworkCommandOutput) => void): void;
            deleteAssessmentFramework(args: DeleteAssessmentFrameworkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAssessmentFrameworkCommandOutput) => void): void;
            /**
                * <p>
                *          Deletes a share request for a custom framework in Audit Manager.
                *       </p>
                */
            deleteAssessmentFrameworkShare(args: DeleteAssessmentFrameworkShareCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAssessmentFrameworkShareCommandOutput>;
            deleteAssessmentFrameworkShare(args: DeleteAssessmentFrameworkShareCommandInput, cb: (err: any, data?: DeleteAssessmentFrameworkShareCommandOutput) => void): void;
            deleteAssessmentFrameworkShare(args: DeleteAssessmentFrameworkShareCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAssessmentFrameworkShareCommandOutput) => void): void;
            /**
                * <p>Deletes an assessment report in Audit Manager. </p>
                *          <p>When you run the <code>DeleteAssessmentReport</code> operation, Audit Manager attempts to delete the following data:</p>
                *          <ol>
                *             <li>
                *                <p>The specified assessment report that’s stored in your S3 bucket</p>
                *             </li>
                *             <li>
                *                <p>The associated metadata that’s stored in Audit Manager</p>
                *             </li>
                *          </ol>
                *          <p>If Audit Manager can’t access the assessment report in your S3 bucket, the report
                *          isn’t deleted. In this event, the <code>DeleteAssessmentReport</code> operation doesn’t
                *          fail. Instead, it proceeds to delete the associated metadata only. You must then delete the
                *          assessment report from the S3 bucket yourself. </p>
                *          <p>This scenario happens when Audit Manager receives a <code>403 (Forbidden)</code> or
                *             <code>404 (Not Found)</code> error from Amazon S3. To avoid this, make sure that
                *          your S3 bucket is available, and that you configured the correct permissions for Audit Manager to delete resources in your S3 bucket. For an example permissions policy that
                *          you can use, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/security_iam_id-based-policy-examples.html#full-administrator-access-assessment-report-destination">Assessment report destination permissions</a> in the <i>Audit Manager User Guide</i>. For information about the issues that could cause a <code>403
                *             (Forbidden)</code> or <code>404 (Not Found</code>) error from Amazon S3, see
                *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List of Error Codes</a> in the <i>Amazon Simple Storage Service API
                *             Reference</i>. </p>
                */
            deleteAssessmentReport(args: DeleteAssessmentReportCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAssessmentReportCommandOutput>;
            deleteAssessmentReport(args: DeleteAssessmentReportCommandInput, cb: (err: any, data?: DeleteAssessmentReportCommandOutput) => void): void;
            deleteAssessmentReport(args: DeleteAssessmentReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAssessmentReportCommandOutput) => void): void;
            /**
                * <p> Deletes a custom control in Audit Manager. </p>
                */
            deleteControl(args: DeleteControlCommandInput, options?: __HttpHandlerOptions): Promise<DeleteControlCommandOutput>;
            deleteControl(args: DeleteControlCommandInput, cb: (err: any, data?: DeleteControlCommandOutput) => void): void;
            deleteControl(args: DeleteControlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteControlCommandOutput) => void): void;
            /**
                * <p> Deregisters an account in Audit Manager. </p>
                *          <note>
                *             <p>When you deregister your account from Audit Manager, your data isn’t deleted. If you want
                *             to delete your resource data, you must perform that task separately before you
                *             deregister your account. Either, you can do this in the Audit Manager console. Or,
                *             you can use one of the delete API operations that are provided by Audit Manager. </p>
                *             <p>To delete your Audit Manager resource data, see the following instructions: </p>
                *             <ul>
                *                <li>
                *                   <p>
                *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessment.html">DeleteAssessment</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-assessment.html">Deleting an
                *                      assessment</a> in the <i>Audit Manager User
                *                   Guide</i>)</p>
                *                </li>
                *                <li>
                *                   <p>
                *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentFramework.html">DeleteAssessmentFramework</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-custom-framework.html">Deleting a
                *                      custom framework</a> in the <i>Audit Manager User
                *                      Guide</i>)</p>
                *                </li>
                *                <li>
                *                   <p>
                *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentFrameworkShare.html">DeleteAssessmentFrameworkShare</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/deleting-shared-framework-requests.html">Deleting a share request</a> in the <i>Audit Manager User
                *                      Guide</i>)</p>
                *                </li>
                *                <li>
                *                   <p>
                *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentReport.html">DeleteAssessmentReport</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/generate-assessment-report.html#delete-assessment-report-steps">Deleting an assessment report</a> in the <i>Audit Manager
                *                      User Guide</i>)</p>
                *                </li>
                *                <li>
                *                   <p>
                *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteControl.html">DeleteControl</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-controls.html">Deleting a custom
                *                      control</a> in the <i>Audit Manager User
                *                   Guide</i>)</p>
                *                </li>
                *             </ul>
                *             <p>At this time, Audit Manager doesn't provide an option to delete evidence. All
                *             available delete operations are listed above.</p>
                *          </note>
                */
            deregisterAccount(args: DeregisterAccountCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterAccountCommandOutput>;
            deregisterAccount(args: DeregisterAccountCommandInput, cb: (err: any, data?: DeregisterAccountCommandOutput) => void): void;
            deregisterAccount(args: DeregisterAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterAccountCommandOutput) => void): void;
            /**
                * <p>Removes the specified Amazon Web Services account as a delegated administrator for
                *             Audit Manager. </p>
                *          <important>
                *             <p>When you remove a delegated administrator from your Audit Manager settings, you
                *             continue to have access to the evidence that you previously collected under that
                *             account. This is also the case when you deregister a delegated administrator from
                *                Organizations. However, Audit Manager will stop collecting and attaching
                *             evidence to that delegated administrator account moving forward.</p>
                *          </important>
                *          <note>
                *             <p>When you deregister a delegated administrator account for Audit Manager, the data for that
                *             account isn’t deleted. If you want to delete resource data for a delegated administrator
                *             account, you must perform that task separately before you deregister the account.
                *             Either, you can do this in the Audit Manager console. Or, you can use one of the
                *             delete API operations that are provided by Audit Manager. </p>
                *             <p>To delete your Audit Manager resource data, see the following instructions: </p>
                *             <ul>
                *                <li>
                *                   <p>
                *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessment.html">DeleteAssessment</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-assessment.html">Deleting an
                *                      assessment</a> in the <i>Audit Manager User
                *                   Guide</i>)</p>
                *                </li>
                *                <li>
                *                   <p>
                *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentFramework.html">DeleteAssessmentFramework</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-custom-framework.html">Deleting a
                *                      custom framework</a> in the <i>Audit Manager User
                *                      Guide</i>)</p>
                *                </li>
                *                <li>
                *                   <p>
                *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentFrameworkShare.html">DeleteAssessmentFrameworkShare</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/deleting-shared-framework-requests.html">Deleting a share request</a> in the <i>Audit Manager User
                *                      Guide</i>)</p>
                *                </li>
                *                <li>
                *                   <p>
                *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentReport.html">DeleteAssessmentReport</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/generate-assessment-report.html#delete-assessment-report-steps">Deleting an assessment report</a> in the <i>Audit Manager
                *                      User Guide</i>)</p>
                *                </li>
                *                <li>
                *                   <p>
                *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteControl.html">DeleteControl</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-controls.html">Deleting a custom
                *                      control</a> in the <i>Audit Manager User
                *                   Guide</i>)</p>
                *                </li>
                *             </ul>
                *             <p>At this time, Audit Manager doesn't provide an option to delete evidence. All
                *             available delete operations are listed above.</p>
                *          </note>
                */
            deregisterOrganizationAdminAccount(args: DeregisterOrganizationAdminAccountCommandInput, options?: __HttpHandlerOptions): Promise<DeregisterOrganizationAdminAccountCommandOutput>;
            deregisterOrganizationAdminAccount(args: DeregisterOrganizationAdminAccountCommandInput, cb: (err: any, data?: DeregisterOrganizationAdminAccountCommandOutput) => void): void;
            deregisterOrganizationAdminAccount(args: DeregisterOrganizationAdminAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeregisterOrganizationAdminAccountCommandOutput) => void): void;
            /**
                * <p> Disassociates an evidence folder from the specified assessment report in Audit Manager. </p>
                */
            disassociateAssessmentReportEvidenceFolder(args: DisassociateAssessmentReportEvidenceFolderCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateAssessmentReportEvidenceFolderCommandOutput>;
            disassociateAssessmentReportEvidenceFolder(args: DisassociateAssessmentReportEvidenceFolderCommandInput, cb: (err: any, data?: DisassociateAssessmentReportEvidenceFolderCommandOutput) => void): void;
            disassociateAssessmentReportEvidenceFolder(args: DisassociateAssessmentReportEvidenceFolderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateAssessmentReportEvidenceFolderCommandOutput) => void): void;
            /**
                * <p> Returns the registration status of an account in Audit Manager. </p>
                */
            getAccountStatus(args: GetAccountStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetAccountStatusCommandOutput>;
            getAccountStatus(args: GetAccountStatusCommandInput, cb: (err: any, data?: GetAccountStatusCommandOutput) => void): void;
            getAccountStatus(args: GetAccountStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAccountStatusCommandOutput) => void): void;
            /**
                * <p>Returns an assessment from Audit Manager. </p>
                */
            getAssessment(args: GetAssessmentCommandInput, options?: __HttpHandlerOptions): Promise<GetAssessmentCommandOutput>;
            getAssessment(args: GetAssessmentCommandInput, cb: (err: any, data?: GetAssessmentCommandOutput) => void): void;
            getAssessment(args: GetAssessmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAssessmentCommandOutput) => void): void;
            /**
                * <p>Returns a framework from Audit Manager. </p>
                */
            getAssessmentFramework(args: GetAssessmentFrameworkCommandInput, options?: __HttpHandlerOptions): Promise<GetAssessmentFrameworkCommandOutput>;
            getAssessmentFramework(args: GetAssessmentFrameworkCommandInput, cb: (err: any, data?: GetAssessmentFrameworkCommandOutput) => void): void;
            getAssessmentFramework(args: GetAssessmentFrameworkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAssessmentFrameworkCommandOutput) => void): void;
            /**
                * <p> Returns the URL of an assessment report in Audit Manager. </p>
                */
            getAssessmentReportUrl(args: GetAssessmentReportUrlCommandInput, options?: __HttpHandlerOptions): Promise<GetAssessmentReportUrlCommandOutput>;
            getAssessmentReportUrl(args: GetAssessmentReportUrlCommandInput, cb: (err: any, data?: GetAssessmentReportUrlCommandOutput) => void): void;
            getAssessmentReportUrl(args: GetAssessmentReportUrlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAssessmentReportUrlCommandOutput) => void): void;
            /**
                * <p> Returns a list of changelogs from Audit Manager. </p>
                */
            getChangeLogs(args: GetChangeLogsCommandInput, options?: __HttpHandlerOptions): Promise<GetChangeLogsCommandOutput>;
            getChangeLogs(args: GetChangeLogsCommandInput, cb: (err: any, data?: GetChangeLogsCommandOutput) => void): void;
            getChangeLogs(args: GetChangeLogsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetChangeLogsCommandOutput) => void): void;
            /**
                * <p> Returns a control from Audit Manager. </p>
                */
            getControl(args: GetControlCommandInput, options?: __HttpHandlerOptions): Promise<GetControlCommandOutput>;
            getControl(args: GetControlCommandInput, cb: (err: any, data?: GetControlCommandOutput) => void): void;
            getControl(args: GetControlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetControlCommandOutput) => void): void;
            /**
                * <p> Returns a list of delegations from an audit owner to a delegate. </p>
                */
            getDelegations(args: GetDelegationsCommandInput, options?: __HttpHandlerOptions): Promise<GetDelegationsCommandOutput>;
            getDelegations(args: GetDelegationsCommandInput, cb: (err: any, data?: GetDelegationsCommandOutput) => void): void;
            getDelegations(args: GetDelegationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetDelegationsCommandOutput) => void): void;
            /**
                * <p> Returns evidence from Audit Manager. </p>
                */
            getEvidence(args: GetEvidenceCommandInput, options?: __HttpHandlerOptions): Promise<GetEvidenceCommandOutput>;
            getEvidence(args: GetEvidenceCommandInput, cb: (err: any, data?: GetEvidenceCommandOutput) => void): void;
            getEvidence(args: GetEvidenceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEvidenceCommandOutput) => void): void;
            /**
                * <p> Returns all evidence from a specified evidence folder in Audit Manager. </p>
                */
            getEvidenceByEvidenceFolder(args: GetEvidenceByEvidenceFolderCommandInput, options?: __HttpHandlerOptions): Promise<GetEvidenceByEvidenceFolderCommandOutput>;
            getEvidenceByEvidenceFolder(args: GetEvidenceByEvidenceFolderCommandInput, cb: (err: any, data?: GetEvidenceByEvidenceFolderCommandOutput) => void): void;
            getEvidenceByEvidenceFolder(args: GetEvidenceByEvidenceFolderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEvidenceByEvidenceFolderCommandOutput) => void): void;
            /**
                * <p> Returns an evidence folder from the specified assessment in Audit Manager.
                *       </p>
                */
            getEvidenceFolder(args: GetEvidenceFolderCommandInput, options?: __HttpHandlerOptions): Promise<GetEvidenceFolderCommandOutput>;
            getEvidenceFolder(args: GetEvidenceFolderCommandInput, cb: (err: any, data?: GetEvidenceFolderCommandOutput) => void): void;
            getEvidenceFolder(args: GetEvidenceFolderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEvidenceFolderCommandOutput) => void): void;
            /**
                * <p> Returns the evidence folders from a specified assessment in Audit Manager.
                *       </p>
                */
            getEvidenceFoldersByAssessment(args: GetEvidenceFoldersByAssessmentCommandInput, options?: __HttpHandlerOptions): Promise<GetEvidenceFoldersByAssessmentCommandOutput>;
            getEvidenceFoldersByAssessment(args: GetEvidenceFoldersByAssessmentCommandInput, cb: (err: any, data?: GetEvidenceFoldersByAssessmentCommandOutput) => void): void;
            getEvidenceFoldersByAssessment(args: GetEvidenceFoldersByAssessmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEvidenceFoldersByAssessmentCommandOutput) => void): void;
            /**
                * <p> Returns a list of evidence folders that are associated with a specified control of an
                *          assessment in Audit Manager. </p>
                */
            getEvidenceFoldersByAssessmentControl(args: GetEvidenceFoldersByAssessmentControlCommandInput, options?: __HttpHandlerOptions): Promise<GetEvidenceFoldersByAssessmentControlCommandOutput>;
            getEvidenceFoldersByAssessmentControl(args: GetEvidenceFoldersByAssessmentControlCommandInput, cb: (err: any, data?: GetEvidenceFoldersByAssessmentControlCommandOutput) => void): void;
            getEvidenceFoldersByAssessmentControl(args: GetEvidenceFoldersByAssessmentControlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetEvidenceFoldersByAssessmentControlCommandOutput) => void): void;
            /**
                * <p>Gets the latest analytics data for all your current active assessments. </p>
                */
            getInsights(args: GetInsightsCommandInput, options?: __HttpHandlerOptions): Promise<GetInsightsCommandOutput>;
            getInsights(args: GetInsightsCommandInput, cb: (err: any, data?: GetInsightsCommandOutput) => void): void;
            getInsights(args: GetInsightsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInsightsCommandOutput) => void): void;
            /**
                * <p>Gets the latest analytics data for a specific active assessment. </p>
                */
            getInsightsByAssessment(args: GetInsightsByAssessmentCommandInput, options?: __HttpHandlerOptions): Promise<GetInsightsByAssessmentCommandOutput>;
            getInsightsByAssessment(args: GetInsightsByAssessmentCommandInput, cb: (err: any, data?: GetInsightsByAssessmentCommandOutput) => void): void;
            getInsightsByAssessment(args: GetInsightsByAssessmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInsightsByAssessmentCommandOutput) => void): void;
            /**
                * <p> Returns the name of the delegated Amazon Web Services administrator account for the
                *          organization. </p>
                */
            getOrganizationAdminAccount(args: GetOrganizationAdminAccountCommandInput, options?: __HttpHandlerOptions): Promise<GetOrganizationAdminAccountCommandOutput>;
            getOrganizationAdminAccount(args: GetOrganizationAdminAccountCommandInput, cb: (err: any, data?: GetOrganizationAdminAccountCommandOutput) => void): void;
            getOrganizationAdminAccount(args: GetOrganizationAdminAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOrganizationAdminAccountCommandOutput) => void): void;
            /**
                * <p> Returns a list of the in-scope Amazon Web Services for the specified
                *          assessment. </p>
                */
            getServicesInScope(args: GetServicesInScopeCommandInput, options?: __HttpHandlerOptions): Promise<GetServicesInScopeCommandOutput>;
            getServicesInScope(args: GetServicesInScopeCommandInput, cb: (err: any, data?: GetServicesInScopeCommandOutput) => void): void;
            getServicesInScope(args: GetServicesInScopeCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetServicesInScopeCommandOutput) => void): void;
            /**
                * <p> Returns the settings for the specified Amazon Web Services account. </p>
                */
            getSettings(args: GetSettingsCommandInput, options?: __HttpHandlerOptions): Promise<GetSettingsCommandOutput>;
            getSettings(args: GetSettingsCommandInput, cb: (err: any, data?: GetSettingsCommandOutput) => void): void;
            getSettings(args: GetSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSettingsCommandOutput) => void): void;
            /**
                * <p>Lists the latest analytics data for controls within a specific control domain and a
                *          specific active assessment.</p>
                *          <note>
                *             <p>Control insights are listed only if the control belongs to the control domain and assessment
                *          that was specified. Moreover, the control must have collected evidence on the
                *          <code>lastUpdated</code> date of <code>controlInsightsByAssessment</code>. If neither
                *          of these conditions are met, no data is listed for that control. </p>
                *          </note>
                */
            listAssessmentControlInsightsByControlDomain(args: ListAssessmentControlInsightsByControlDomainCommandInput, options?: __HttpHandlerOptions): Promise<ListAssessmentControlInsightsByControlDomainCommandOutput>;
            listAssessmentControlInsightsByControlDomain(args: ListAssessmentControlInsightsByControlDomainCommandInput, cb: (err: any, data?: ListAssessmentControlInsightsByControlDomainCommandOutput) => void): void;
            listAssessmentControlInsightsByControlDomain(args: ListAssessmentControlInsightsByControlDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssessmentControlInsightsByControlDomainCommandOutput) => void): void;
            /**
                * <p> Returns a list of the frameworks that are available in the Audit Manager
                *          framework library. </p>
                */
            listAssessmentFrameworks(args: ListAssessmentFrameworksCommandInput, options?: __HttpHandlerOptions): Promise<ListAssessmentFrameworksCommandOutput>;
            listAssessmentFrameworks(args: ListAssessmentFrameworksCommandInput, cb: (err: any, data?: ListAssessmentFrameworksCommandOutput) => void): void;
            listAssessmentFrameworks(args: ListAssessmentFrameworksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssessmentFrameworksCommandOutput) => void): void;
            /**
                * <p> Returns a list of sent or received share requests for custom frameworks in Audit Manager. </p>
                */
            listAssessmentFrameworkShareRequests(args: ListAssessmentFrameworkShareRequestsCommandInput, options?: __HttpHandlerOptions): Promise<ListAssessmentFrameworkShareRequestsCommandOutput>;
            listAssessmentFrameworkShareRequests(args: ListAssessmentFrameworkShareRequestsCommandInput, cb: (err: any, data?: ListAssessmentFrameworkShareRequestsCommandOutput) => void): void;
            listAssessmentFrameworkShareRequests(args: ListAssessmentFrameworkShareRequestsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssessmentFrameworkShareRequestsCommandOutput) => void): void;
            /**
                * <p> Returns a list of assessment reports created in Audit Manager. </p>
                */
            listAssessmentReports(args: ListAssessmentReportsCommandInput, options?: __HttpHandlerOptions): Promise<ListAssessmentReportsCommandOutput>;
            listAssessmentReports(args: ListAssessmentReportsCommandInput, cb: (err: any, data?: ListAssessmentReportsCommandOutput) => void): void;
            listAssessmentReports(args: ListAssessmentReportsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssessmentReportsCommandOutput) => void): void;
            /**
                * <p> Returns a list of current and past assessments from Audit Manager. </p>
                */
            listAssessments(args: ListAssessmentsCommandInput, options?: __HttpHandlerOptions): Promise<ListAssessmentsCommandOutput>;
            listAssessments(args: ListAssessmentsCommandInput, cb: (err: any, data?: ListAssessmentsCommandOutput) => void): void;
            listAssessments(args: ListAssessmentsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAssessmentsCommandOutput) => void): void;
            /**
                * <p>Lists the latest analytics data for control domains across all of your active
                *          assessments. </p>
                *          <note>
                *             <p>A control domain is listed only if at least one of the controls within that domain collected
                *          evidence on the <code>lastUpdated</code> date of <code>controlDomainInsights</code>. If
                *          this condition isn’t met, no data is listed for that control domain.</p>
                *          </note>
                */
            listControlDomainInsights(args: ListControlDomainInsightsCommandInput, options?: __HttpHandlerOptions): Promise<ListControlDomainInsightsCommandOutput>;
            listControlDomainInsights(args: ListControlDomainInsightsCommandInput, cb: (err: any, data?: ListControlDomainInsightsCommandOutput) => void): void;
            listControlDomainInsights(args: ListControlDomainInsightsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListControlDomainInsightsCommandOutput) => void): void;
            /**
                * <p>Lists analytics data for control domains within a specified active assessment.</p>
                *          <note>
                *             <p>A control domain is listed only if at least one of the controls within that domain collected
                *          evidence on the <code>lastUpdated</code> date of <code>controlDomainInsights</code>. If
                *          this condition isn’t met, no data is listed for that domain.</p>
                *          </note>
                */
            listControlDomainInsightsByAssessment(args: ListControlDomainInsightsByAssessmentCommandInput, options?: __HttpHandlerOptions): Promise<ListControlDomainInsightsByAssessmentCommandOutput>;
            listControlDomainInsightsByAssessment(args: ListControlDomainInsightsByAssessmentCommandInput, cb: (err: any, data?: ListControlDomainInsightsByAssessmentCommandOutput) => void): void;
            listControlDomainInsightsByAssessment(args: ListControlDomainInsightsByAssessmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListControlDomainInsightsByAssessmentCommandOutput) => void): void;
            /**
                * <p>Lists the latest analytics data for controls within a specific control domain across all
                *          active assessments.</p>
                *          <note>
                *             <p>Control insights are listed only if the control belongs to the control domain that was
                *          specified and the control collected evidence on the <code>lastUpdated</code> date of
                *          <code>controlInsightsMetadata</code>. If neither of these conditions are met, no data
                *          is listed for that control. </p>
                *          </note>
                */
            listControlInsightsByControlDomain(args: ListControlInsightsByControlDomainCommandInput, options?: __HttpHandlerOptions): Promise<ListControlInsightsByControlDomainCommandOutput>;
            listControlInsightsByControlDomain(args: ListControlInsightsByControlDomainCommandInput, cb: (err: any, data?: ListControlInsightsByControlDomainCommandOutput) => void): void;
            listControlInsightsByControlDomain(args: ListControlInsightsByControlDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListControlInsightsByControlDomainCommandOutput) => void): void;
            /**
                * <p> Returns a list of controls from Audit Manager. </p>
                */
            listControls(args: ListControlsCommandInput, options?: __HttpHandlerOptions): Promise<ListControlsCommandOutput>;
            listControls(args: ListControlsCommandInput, cb: (err: any, data?: ListControlsCommandOutput) => void): void;
            listControls(args: ListControlsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListControlsCommandOutput) => void): void;
            /**
                * <p> Returns a list of keywords that are pre-mapped to the specified control data source. </p>
                */
            listKeywordsForDataSource(args: ListKeywordsForDataSourceCommandInput, options?: __HttpHandlerOptions): Promise<ListKeywordsForDataSourceCommandOutput>;
            listKeywordsForDataSource(args: ListKeywordsForDataSourceCommandInput, cb: (err: any, data?: ListKeywordsForDataSourceCommandOutput) => void): void;
            listKeywordsForDataSource(args: ListKeywordsForDataSourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListKeywordsForDataSourceCommandOutput) => void): void;
            /**
                * <p> Returns a list of all Audit Manager notifications. </p>
                */
            listNotifications(args: ListNotificationsCommandInput, options?: __HttpHandlerOptions): Promise<ListNotificationsCommandOutput>;
            listNotifications(args: ListNotificationsCommandInput, cb: (err: any, data?: ListNotificationsCommandOutput) => void): void;
            listNotifications(args: ListNotificationsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListNotificationsCommandOutput) => void): void;
            /**
                * <p> Returns a list of tags for the specified resource in Audit Manager. </p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p> Enables Audit Manager for the specified Amazon Web Services account. </p>
                */
            registerAccount(args: RegisterAccountCommandInput, options?: __HttpHandlerOptions): Promise<RegisterAccountCommandOutput>;
            registerAccount(args: RegisterAccountCommandInput, cb: (err: any, data?: RegisterAccountCommandOutput) => void): void;
            registerAccount(args: RegisterAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterAccountCommandOutput) => void): void;
            /**
                * <p> Enables an Amazon Web Services account within the organization as the delegated
                *          administrator for Audit Manager. </p>
                */
            registerOrganizationAdminAccount(args: RegisterOrganizationAdminAccountCommandInput, options?: __HttpHandlerOptions): Promise<RegisterOrganizationAdminAccountCommandOutput>;
            registerOrganizationAdminAccount(args: RegisterOrganizationAdminAccountCommandInput, cb: (err: any, data?: RegisterOrganizationAdminAccountCommandOutput) => void): void;
            registerOrganizationAdminAccount(args: RegisterOrganizationAdminAccountCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RegisterOrganizationAdminAccountCommandOutput) => void): void;
            /**
                * <p> Creates a share request for a custom framework in Audit Manager. </p>
                *          <p>The share request specifies a recipient and notifies them that a custom framework is available. Recipients have 120 days to accept or decline the request. If no action is taken, the share request expires.</p>
                *          <p>When you create a share request, Audit Manager stores a snapshot of your custom
                *          framework in the US East (N. Virginia) Amazon Web Services Region. Audit Manager also
                *          stores a backup of the same snapshot in the US West (Oregon) Amazon Web Services Region.</p>
                *          <p>Audit Manager deletes the snapshot and the backup snapshot when one of the following
                *          events occurs:</p>
                *          <ul>
                *             <li>
                *                <p>The sender revokes the share request.</p>
                *             </li>
                *             <li>
                *                <p>The recipient declines the share request.</p>
                *             </li>
                *             <li>
                *                <p>The recipient encounters an error and doesn't successfully accept the share
                *                request.</p>
                *             </li>
                *             <li>
                *                <p>The share request expires before the recipient responds to the request.</p>
                *             </li>
                *          </ul>
                *          <p>When a sender <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/framework-sharing.html#framework-sharing-resend">resends a share request</a>, the snapshot is replaced with an updated version that
                *          corresponds with the latest version of the custom framework. </p>
                *          <p>When a recipient accepts a share request, the snapshot is replicated into their
                *             Amazon Web Services account under the Amazon Web Services Region that was specified in the share request. </p>
                *          <important>
                *             <p>When you invoke the <code>StartAssessmentFrameworkShare</code> API, you are about to
                *             share a custom framework with another Amazon Web Services account. You may not share a
                *             custom framework that is derived from a standard framework if the standard framework is
                *             designated as not eligible for sharing by Amazon Web Services, unless you have obtained
                *             permission to do so from the owner of the standard framework. To learn more about which
                *             standard frameworks are eligible for sharing, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/share-custom-framework-concepts-and-terminology.html#eligibility">Framework sharing eligibility</a> in the <i>Audit Manager User
                *                Guide</i>.</p>
                *          </important>
                */
            startAssessmentFrameworkShare(args: StartAssessmentFrameworkShareCommandInput, options?: __HttpHandlerOptions): Promise<StartAssessmentFrameworkShareCommandOutput>;
            startAssessmentFrameworkShare(args: StartAssessmentFrameworkShareCommandInput, cb: (err: any, data?: StartAssessmentFrameworkShareCommandOutput) => void): void;
            startAssessmentFrameworkShare(args: StartAssessmentFrameworkShareCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartAssessmentFrameworkShareCommandOutput) => void): void;
            /**
                * <p> Tags the specified resource in Audit Manager. </p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p> Removes a tag from a resource in Audit Manager. </p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p> Edits an Audit Manager assessment. </p>
                */
            updateAssessment(args: UpdateAssessmentCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAssessmentCommandOutput>;
            updateAssessment(args: UpdateAssessmentCommandInput, cb: (err: any, data?: UpdateAssessmentCommandOutput) => void): void;
            updateAssessment(args: UpdateAssessmentCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAssessmentCommandOutput) => void): void;
            /**
                * <p> Updates a control within an assessment in Audit Manager. </p>
                */
            updateAssessmentControl(args: UpdateAssessmentControlCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAssessmentControlCommandOutput>;
            updateAssessmentControl(args: UpdateAssessmentControlCommandInput, cb: (err: any, data?: UpdateAssessmentControlCommandOutput) => void): void;
            updateAssessmentControl(args: UpdateAssessmentControlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAssessmentControlCommandOutput) => void): void;
            /**
                * <p> Updates the status of a control set in an Audit Manager assessment. </p>
                */
            updateAssessmentControlSetStatus(args: UpdateAssessmentControlSetStatusCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAssessmentControlSetStatusCommandOutput>;
            updateAssessmentControlSetStatus(args: UpdateAssessmentControlSetStatusCommandInput, cb: (err: any, data?: UpdateAssessmentControlSetStatusCommandOutput) => void): void;
            updateAssessmentControlSetStatus(args: UpdateAssessmentControlSetStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAssessmentControlSetStatusCommandOutput) => void): void;
            /**
                * <p> Updates a custom framework in Audit Manager. </p>
                */
            updateAssessmentFramework(args: UpdateAssessmentFrameworkCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAssessmentFrameworkCommandOutput>;
            updateAssessmentFramework(args: UpdateAssessmentFrameworkCommandInput, cb: (err: any, data?: UpdateAssessmentFrameworkCommandOutput) => void): void;
            updateAssessmentFramework(args: UpdateAssessmentFrameworkCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAssessmentFrameworkCommandOutput) => void): void;
            /**
                * <p> Updates a share request for a custom framework in Audit Manager. </p>
                */
            updateAssessmentFrameworkShare(args: UpdateAssessmentFrameworkShareCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAssessmentFrameworkShareCommandOutput>;
            updateAssessmentFrameworkShare(args: UpdateAssessmentFrameworkShareCommandInput, cb: (err: any, data?: UpdateAssessmentFrameworkShareCommandOutput) => void): void;
            updateAssessmentFrameworkShare(args: UpdateAssessmentFrameworkShareCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAssessmentFrameworkShareCommandOutput) => void): void;
            /**
                * <p> Updates the status of an assessment in Audit Manager. </p>
                */
            updateAssessmentStatus(args: UpdateAssessmentStatusCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAssessmentStatusCommandOutput>;
            updateAssessmentStatus(args: UpdateAssessmentStatusCommandInput, cb: (err: any, data?: UpdateAssessmentStatusCommandOutput) => void): void;
            updateAssessmentStatus(args: UpdateAssessmentStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAssessmentStatusCommandOutput) => void): void;
            /**
                * <p> Updates a custom control in Audit Manager. </p>
                */
            updateControl(args: UpdateControlCommandInput, options?: __HttpHandlerOptions): Promise<UpdateControlCommandOutput>;
            updateControl(args: UpdateControlCommandInput, cb: (err: any, data?: UpdateControlCommandOutput) => void): void;
            updateControl(args: UpdateControlCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateControlCommandOutput) => void): void;
            /**
                * <p> Updates Audit Manager settings for the current user account. </p>
                */
            updateSettings(args: UpdateSettingsCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSettingsCommandOutput>;
            updateSettings(args: UpdateSettingsCommandInput, cb: (err: any, data?: UpdateSettingsCommandOutput) => void): void;
            updateSettings(args: UpdateSettingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSettingsCommandOutput) => void): void;
            /**
                * <p> Validates the integrity of an assessment report in Audit Manager. </p>
                */
            validateAssessmentReportIntegrity(args: ValidateAssessmentReportIntegrityCommandInput, options?: __HttpHandlerOptions): Promise<ValidateAssessmentReportIntegrityCommandOutput>;
            validateAssessmentReportIntegrity(args: ValidateAssessmentReportIntegrityCommandInput, cb: (err: any, data?: ValidateAssessmentReportIntegrityCommandOutput) => void): void;
            validateAssessmentReportIntegrity(args: ValidateAssessmentReportIntegrityCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ValidateAssessmentReportIntegrityCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateAssessmentReportEvidenceFolderCommandInput, AssociateAssessmentReportEvidenceFolderCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/AssociateAssessmentReportEvidenceFolderCommand";
    import { BatchAssociateAssessmentReportEvidenceCommandInput, BatchAssociateAssessmentReportEvidenceCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchAssociateAssessmentReportEvidenceCommand";
    import { BatchCreateDelegationByAssessmentCommandInput, BatchCreateDelegationByAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchCreateDelegationByAssessmentCommand";
    import { BatchDeleteDelegationByAssessmentCommandInput, BatchDeleteDelegationByAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchDeleteDelegationByAssessmentCommand";
    import { BatchDisassociateAssessmentReportEvidenceCommandInput, BatchDisassociateAssessmentReportEvidenceCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchDisassociateAssessmentReportEvidenceCommand";
    import { BatchImportEvidenceToAssessmentControlCommandInput, BatchImportEvidenceToAssessmentControlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchImportEvidenceToAssessmentControlCommand";
    import { CreateAssessmentCommandInput, CreateAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/CreateAssessmentCommand";
    import { CreateAssessmentFrameworkCommandInput, CreateAssessmentFrameworkCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/CreateAssessmentFrameworkCommand";
    import { CreateAssessmentReportCommandInput, CreateAssessmentReportCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/CreateAssessmentReportCommand";
    import { CreateControlCommandInput, CreateControlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/CreateControlCommand";
    import { DeleteAssessmentCommandInput, DeleteAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteAssessmentCommand";
    import { DeleteAssessmentFrameworkCommandInput, DeleteAssessmentFrameworkCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteAssessmentFrameworkCommand";
    import { DeleteAssessmentFrameworkShareCommandInput, DeleteAssessmentFrameworkShareCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteAssessmentFrameworkShareCommand";
    import { DeleteAssessmentReportCommandInput, DeleteAssessmentReportCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteAssessmentReportCommand";
    import { DeleteControlCommandInput, DeleteControlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteControlCommand";
    import { DeregisterAccountCommandInput, DeregisterAccountCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeregisterAccountCommand";
    import { DeregisterOrganizationAdminAccountCommandInput, DeregisterOrganizationAdminAccountCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeregisterOrganizationAdminAccountCommand";
    import { DisassociateAssessmentReportEvidenceFolderCommandInput, DisassociateAssessmentReportEvidenceFolderCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DisassociateAssessmentReportEvidenceFolderCommand";
    import { GetAccountStatusCommandInput, GetAccountStatusCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetAccountStatusCommand";
    import { GetAssessmentCommandInput, GetAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetAssessmentCommand";
    import { GetAssessmentFrameworkCommandInput, GetAssessmentFrameworkCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetAssessmentFrameworkCommand";
    import { GetAssessmentReportUrlCommandInput, GetAssessmentReportUrlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetAssessmentReportUrlCommand";
    import { GetChangeLogsCommandInput, GetChangeLogsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetChangeLogsCommand";
    import { GetControlCommandInput, GetControlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetControlCommand";
    import { GetDelegationsCommandInput, GetDelegationsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetDelegationsCommand";
    import { GetEvidenceByEvidenceFolderCommandInput, GetEvidenceByEvidenceFolderCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceByEvidenceFolderCommand";
    import { GetEvidenceCommandInput, GetEvidenceCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceCommand";
    import { GetEvidenceFolderCommandInput, GetEvidenceFolderCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceFolderCommand";
    import { GetEvidenceFoldersByAssessmentCommandInput, GetEvidenceFoldersByAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceFoldersByAssessmentCommand";
    import { GetEvidenceFoldersByAssessmentControlCommandInput, GetEvidenceFoldersByAssessmentControlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceFoldersByAssessmentControlCommand";
    import { GetInsightsByAssessmentCommandInput, GetInsightsByAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetInsightsByAssessmentCommand";
    import { GetInsightsCommandInput, GetInsightsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetInsightsCommand";
    import { GetOrganizationAdminAccountCommandInput, GetOrganizationAdminAccountCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetOrganizationAdminAccountCommand";
    import { GetServicesInScopeCommandInput, GetServicesInScopeCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetServicesInScopeCommand";
    import { GetSettingsCommandInput, GetSettingsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetSettingsCommand";
    import { ListAssessmentControlInsightsByControlDomainCommandInput, ListAssessmentControlInsightsByControlDomainCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentControlInsightsByControlDomainCommand";
    import { ListAssessmentFrameworksCommandInput, ListAssessmentFrameworksCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentFrameworksCommand";
    import { ListAssessmentFrameworkShareRequestsCommandInput, ListAssessmentFrameworkShareRequestsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentFrameworkShareRequestsCommand";
    import { ListAssessmentReportsCommandInput, ListAssessmentReportsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentReportsCommand";
    import { ListAssessmentsCommandInput, ListAssessmentsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentsCommand";
    import { ListControlDomainInsightsByAssessmentCommandInput, ListControlDomainInsightsByAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListControlDomainInsightsByAssessmentCommand";
    import { ListControlDomainInsightsCommandInput, ListControlDomainInsightsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListControlDomainInsightsCommand";
    import { ListControlInsightsByControlDomainCommandInput, ListControlInsightsByControlDomainCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListControlInsightsByControlDomainCommand";
    import { ListControlsCommandInput, ListControlsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListControlsCommand";
    import { ListKeywordsForDataSourceCommandInput, ListKeywordsForDataSourceCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListKeywordsForDataSourceCommand";
    import { ListNotificationsCommandInput, ListNotificationsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListNotificationsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListTagsForResourceCommand";
    import { RegisterAccountCommandInput, RegisterAccountCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/RegisterAccountCommand";
    import { RegisterOrganizationAdminAccountCommandInput, RegisterOrganizationAdminAccountCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/RegisterOrganizationAdminAccountCommand";
    import { StartAssessmentFrameworkShareCommandInput, StartAssessmentFrameworkShareCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/StartAssessmentFrameworkShareCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UntagResourceCommand";
    import { UpdateAssessmentCommandInput, UpdateAssessmentCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentCommand";
    import { UpdateAssessmentControlCommandInput, UpdateAssessmentControlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentControlCommand";
    import { UpdateAssessmentControlSetStatusCommandInput, UpdateAssessmentControlSetStatusCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentControlSetStatusCommand";
    import { UpdateAssessmentFrameworkCommandInput, UpdateAssessmentFrameworkCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentFrameworkCommand";
    import { UpdateAssessmentFrameworkShareCommandInput, UpdateAssessmentFrameworkShareCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentFrameworkShareCommand";
    import { UpdateAssessmentStatusCommandInput, UpdateAssessmentStatusCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentStatusCommand";
    import { UpdateControlCommandInput, UpdateControlCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateControlCommand";
    import { UpdateSettingsCommandInput, UpdateSettingsCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateSettingsCommand";
    import { ValidateAssessmentReportIntegrityCommandInput, ValidateAssessmentReportIntegrityCommandOutput } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ValidateAssessmentReportIntegrityCommand";
    export type ServiceInputTypes = AssociateAssessmentReportEvidenceFolderCommandInput | BatchAssociateAssessmentReportEvidenceCommandInput | BatchCreateDelegationByAssessmentCommandInput | BatchDeleteDelegationByAssessmentCommandInput | BatchDisassociateAssessmentReportEvidenceCommandInput | BatchImportEvidenceToAssessmentControlCommandInput | CreateAssessmentCommandInput | CreateAssessmentFrameworkCommandInput | CreateAssessmentReportCommandInput | CreateControlCommandInput | DeleteAssessmentCommandInput | DeleteAssessmentFrameworkCommandInput | DeleteAssessmentFrameworkShareCommandInput | DeleteAssessmentReportCommandInput | DeleteControlCommandInput | DeregisterAccountCommandInput | DeregisterOrganizationAdminAccountCommandInput | DisassociateAssessmentReportEvidenceFolderCommandInput | GetAccountStatusCommandInput | GetAssessmentCommandInput | GetAssessmentFrameworkCommandInput | GetAssessmentReportUrlCommandInput | GetChangeLogsCommandInput | GetControlCommandInput | GetDelegationsCommandInput | GetEvidenceByEvidenceFolderCommandInput | GetEvidenceCommandInput | GetEvidenceFolderCommandInput | GetEvidenceFoldersByAssessmentCommandInput | GetEvidenceFoldersByAssessmentControlCommandInput | GetInsightsByAssessmentCommandInput | GetInsightsCommandInput | GetOrganizationAdminAccountCommandInput | GetServicesInScopeCommandInput | GetSettingsCommandInput | ListAssessmentControlInsightsByControlDomainCommandInput | ListAssessmentFrameworkShareRequestsCommandInput | ListAssessmentFrameworksCommandInput | ListAssessmentReportsCommandInput | ListAssessmentsCommandInput | ListControlDomainInsightsByAssessmentCommandInput | ListControlDomainInsightsCommandInput | ListControlInsightsByControlDomainCommandInput | ListControlsCommandInput | ListKeywordsForDataSourceCommandInput | ListNotificationsCommandInput | ListTagsForResourceCommandInput | RegisterAccountCommandInput | RegisterOrganizationAdminAccountCommandInput | StartAssessmentFrameworkShareCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateAssessmentCommandInput | UpdateAssessmentControlCommandInput | UpdateAssessmentControlSetStatusCommandInput | UpdateAssessmentFrameworkCommandInput | UpdateAssessmentFrameworkShareCommandInput | UpdateAssessmentStatusCommandInput | UpdateControlCommandInput | UpdateSettingsCommandInput | ValidateAssessmentReportIntegrityCommandInput;
    export type ServiceOutputTypes = AssociateAssessmentReportEvidenceFolderCommandOutput | BatchAssociateAssessmentReportEvidenceCommandOutput | BatchCreateDelegationByAssessmentCommandOutput | BatchDeleteDelegationByAssessmentCommandOutput | BatchDisassociateAssessmentReportEvidenceCommandOutput | BatchImportEvidenceToAssessmentControlCommandOutput | CreateAssessmentCommandOutput | CreateAssessmentFrameworkCommandOutput | CreateAssessmentReportCommandOutput | CreateControlCommandOutput | DeleteAssessmentCommandOutput | DeleteAssessmentFrameworkCommandOutput | DeleteAssessmentFrameworkShareCommandOutput | DeleteAssessmentReportCommandOutput | DeleteControlCommandOutput | DeregisterAccountCommandOutput | DeregisterOrganizationAdminAccountCommandOutput | DisassociateAssessmentReportEvidenceFolderCommandOutput | GetAccountStatusCommandOutput | GetAssessmentCommandOutput | GetAssessmentFrameworkCommandOutput | GetAssessmentReportUrlCommandOutput | GetChangeLogsCommandOutput | GetControlCommandOutput | GetDelegationsCommandOutput | GetEvidenceByEvidenceFolderCommandOutput | GetEvidenceCommandOutput | GetEvidenceFolderCommandOutput | GetEvidenceFoldersByAssessmentCommandOutput | GetEvidenceFoldersByAssessmentControlCommandOutput | GetInsightsByAssessmentCommandOutput | GetInsightsCommandOutput | GetOrganizationAdminAccountCommandOutput | GetServicesInScopeCommandOutput | GetSettingsCommandOutput | ListAssessmentControlInsightsByControlDomainCommandOutput | ListAssessmentFrameworkShareRequestsCommandOutput | ListAssessmentFrameworksCommandOutput | ListAssessmentReportsCommandOutput | ListAssessmentsCommandOutput | ListControlDomainInsightsByAssessmentCommandOutput | ListControlDomainInsightsCommandOutput | ListControlInsightsByControlDomainCommandOutput | ListControlsCommandOutput | ListKeywordsForDataSourceCommandOutput | ListNotificationsCommandOutput | ListTagsForResourceCommandOutput | RegisterAccountCommandOutput | RegisterOrganizationAdminAccountCommandOutput | StartAssessmentFrameworkShareCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateAssessmentCommandOutput | UpdateAssessmentControlCommandOutput | UpdateAssessmentControlSetStatusCommandOutput | UpdateAssessmentFrameworkCommandOutput | UpdateAssessmentFrameworkShareCommandOutput | UpdateAssessmentStatusCommandOutput | UpdateControlCommandOutput | UpdateSettingsCommandOutput | ValidateAssessmentReportIntegrityCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type AuditManagerClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of AuditManagerClient class constructor that set the region, credentials and other options.
        */
    export interface AuditManagerClientConfig extends AuditManagerClientConfigType {
    }
    type AuditManagerClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of AuditManagerClient class. This is resolved and normalized from the {@link AuditManagerClientConfig | constructor configuration interface}.
        */
    export interface AuditManagerClientResolvedConfig extends AuditManagerClientResolvedConfigType {
    }
    /**
        * <p>Welcome to the Audit Manager API reference. This guide is for developers who
        *          need detailed information about the Audit Manager API operations, data types, and
        *          errors. </p>
        *          <p>Audit Manager is a service that provides automated evidence collection so that
        *          you can continually audit your Amazon Web Services usage. You can use it to assess the
        *          effectiveness of your controls, manage risk, and simplify compliance.</p>
        *          <p>Audit Manager provides prebuilt frameworks that structure and automate
        *          assessments for a given compliance standard. Frameworks include a prebuilt collection of
        *          controls with descriptions and testing procedures. These controls are grouped according to
        *          the requirements of the specified compliance standard or regulation. You can also customize
        *          frameworks and controls to support internal audits with specific requirements. </p>
        *          <p>Use the following links to get started with the Audit Manager API:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Operations.html">Actions</a>: An
        *                alphabetical list of all Audit Manager API operations.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_Types.html">Data types</a>: An alphabetical list of all Audit Manager data
        *                types.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonParameters.html">Common
        *                   parameters</a>: Parameters that all Query operations can use.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/CommonErrors.html">Common errors</a>:
        *                Client and server errors that all operations can return.</p>
        *             </li>
        *          </ul>
        *          <p>If you're new to Audit Manager, we recommend that you review the <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/what-is.html">
        *             Audit Manager User Guide</a>.</p>
        */
    export class AuditManagerClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, AuditManagerClientResolvedConfig> {
            /**
                * The resolved configuration of AuditManagerClient class. This is resolved and normalized from the {@link AuditManagerClientConfig | constructor configuration interface}.
                */
            readonly config: AuditManagerClientResolvedConfig;
            constructor(configuration: AuditManagerClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/AssociateAssessmentReportEvidenceFolderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { AssociateAssessmentReportEvidenceFolderRequest, AssociateAssessmentReportEvidenceFolderResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface AssociateAssessmentReportEvidenceFolderCommandInput extends AssociateAssessmentReportEvidenceFolderRequest {
    }
    export interface AssociateAssessmentReportEvidenceFolderCommandOutput extends AssociateAssessmentReportEvidenceFolderResponse, __MetadataBearer {
    }
    /**
        * <p> Associates an evidence folder to an assessment report in a Audit Manager
        *          assessment. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, AssociateAssessmentReportEvidenceFolderCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, AssociateAssessmentReportEvidenceFolderCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new AssociateAssessmentReportEvidenceFolderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateAssessmentReportEvidenceFolderCommandInput} for command's `input` shape.
        * @see {@link AssociateAssessmentReportEvidenceFolderCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class AssociateAssessmentReportEvidenceFolderCommand extends $Command<AssociateAssessmentReportEvidenceFolderCommandInput, AssociateAssessmentReportEvidenceFolderCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: AssociateAssessmentReportEvidenceFolderCommandInput;
            constructor(input: AssociateAssessmentReportEvidenceFolderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateAssessmentReportEvidenceFolderCommandInput, AssociateAssessmentReportEvidenceFolderCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchAssociateAssessmentReportEvidenceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { BatchAssociateAssessmentReportEvidenceRequest, BatchAssociateAssessmentReportEvidenceResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface BatchAssociateAssessmentReportEvidenceCommandInput extends BatchAssociateAssessmentReportEvidenceRequest {
    }
    export interface BatchAssociateAssessmentReportEvidenceCommandOutput extends BatchAssociateAssessmentReportEvidenceResponse, __MetadataBearer {
    }
    /**
        * <p> Associates a list of evidence to an assessment report in an Audit Manager
        *          assessment. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, BatchAssociateAssessmentReportEvidenceCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, BatchAssociateAssessmentReportEvidenceCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new BatchAssociateAssessmentReportEvidenceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchAssociateAssessmentReportEvidenceCommandInput} for command's `input` shape.
        * @see {@link BatchAssociateAssessmentReportEvidenceCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class BatchAssociateAssessmentReportEvidenceCommand extends $Command<BatchAssociateAssessmentReportEvidenceCommandInput, BatchAssociateAssessmentReportEvidenceCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: BatchAssociateAssessmentReportEvidenceCommandInput;
            constructor(input: BatchAssociateAssessmentReportEvidenceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchAssociateAssessmentReportEvidenceCommandInput, BatchAssociateAssessmentReportEvidenceCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchCreateDelegationByAssessmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { BatchCreateDelegationByAssessmentRequest, BatchCreateDelegationByAssessmentResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface BatchCreateDelegationByAssessmentCommandInput extends BatchCreateDelegationByAssessmentRequest {
    }
    export interface BatchCreateDelegationByAssessmentCommandOutput extends BatchCreateDelegationByAssessmentResponse, __MetadataBearer {
    }
    /**
        * <p> Creates a batch of delegations for an assessment in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, BatchCreateDelegationByAssessmentCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, BatchCreateDelegationByAssessmentCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new BatchCreateDelegationByAssessmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchCreateDelegationByAssessmentCommandInput} for command's `input` shape.
        * @see {@link BatchCreateDelegationByAssessmentCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class BatchCreateDelegationByAssessmentCommand extends $Command<BatchCreateDelegationByAssessmentCommandInput, BatchCreateDelegationByAssessmentCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: BatchCreateDelegationByAssessmentCommandInput;
            constructor(input: BatchCreateDelegationByAssessmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchCreateDelegationByAssessmentCommandInput, BatchCreateDelegationByAssessmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchDeleteDelegationByAssessmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { BatchDeleteDelegationByAssessmentRequest, BatchDeleteDelegationByAssessmentResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface BatchDeleteDelegationByAssessmentCommandInput extends BatchDeleteDelegationByAssessmentRequest {
    }
    export interface BatchDeleteDelegationByAssessmentCommandOutput extends BatchDeleteDelegationByAssessmentResponse, __MetadataBearer {
    }
    /**
        * <p> Deletes a batch of delegations for an assessment in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, BatchDeleteDelegationByAssessmentCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, BatchDeleteDelegationByAssessmentCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new BatchDeleteDelegationByAssessmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDeleteDelegationByAssessmentCommandInput} for command's `input` shape.
        * @see {@link BatchDeleteDelegationByAssessmentCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class BatchDeleteDelegationByAssessmentCommand extends $Command<BatchDeleteDelegationByAssessmentCommandInput, BatchDeleteDelegationByAssessmentCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: BatchDeleteDelegationByAssessmentCommandInput;
            constructor(input: BatchDeleteDelegationByAssessmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDeleteDelegationByAssessmentCommandInput, BatchDeleteDelegationByAssessmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchDisassociateAssessmentReportEvidenceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { BatchDisassociateAssessmentReportEvidenceRequest, BatchDisassociateAssessmentReportEvidenceResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface BatchDisassociateAssessmentReportEvidenceCommandInput extends BatchDisassociateAssessmentReportEvidenceRequest {
    }
    export interface BatchDisassociateAssessmentReportEvidenceCommandOutput extends BatchDisassociateAssessmentReportEvidenceResponse, __MetadataBearer {
    }
    /**
        * <p> Disassociates a list of evidence from an assessment report in Audit Manager.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, BatchDisassociateAssessmentReportEvidenceCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, BatchDisassociateAssessmentReportEvidenceCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new BatchDisassociateAssessmentReportEvidenceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchDisassociateAssessmentReportEvidenceCommandInput} for command's `input` shape.
        * @see {@link BatchDisassociateAssessmentReportEvidenceCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class BatchDisassociateAssessmentReportEvidenceCommand extends $Command<BatchDisassociateAssessmentReportEvidenceCommandInput, BatchDisassociateAssessmentReportEvidenceCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: BatchDisassociateAssessmentReportEvidenceCommandInput;
            constructor(input: BatchDisassociateAssessmentReportEvidenceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchDisassociateAssessmentReportEvidenceCommandInput, BatchDisassociateAssessmentReportEvidenceCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/BatchImportEvidenceToAssessmentControlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { BatchImportEvidenceToAssessmentControlRequest, BatchImportEvidenceToAssessmentControlResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface BatchImportEvidenceToAssessmentControlCommandInput extends BatchImportEvidenceToAssessmentControlRequest {
    }
    export interface BatchImportEvidenceToAssessmentControlCommandOutput extends BatchImportEvidenceToAssessmentControlResponse, __MetadataBearer {
    }
    /**
        * <p> Uploads one or more pieces of evidence to a control in an Audit Manager
        *          assessment. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, BatchImportEvidenceToAssessmentControlCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, BatchImportEvidenceToAssessmentControlCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new BatchImportEvidenceToAssessmentControlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchImportEvidenceToAssessmentControlCommandInput} for command's `input` shape.
        * @see {@link BatchImportEvidenceToAssessmentControlCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class BatchImportEvidenceToAssessmentControlCommand extends $Command<BatchImportEvidenceToAssessmentControlCommandInput, BatchImportEvidenceToAssessmentControlCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: BatchImportEvidenceToAssessmentControlCommandInput;
            constructor(input: BatchImportEvidenceToAssessmentControlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchImportEvidenceToAssessmentControlCommandInput, BatchImportEvidenceToAssessmentControlCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/CreateAssessmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { CreateAssessmentRequest, CreateAssessmentResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface CreateAssessmentCommandInput extends CreateAssessmentRequest {
    }
    export interface CreateAssessmentCommandOutput extends CreateAssessmentResponse, __MetadataBearer {
    }
    /**
        * <p> Creates an assessment in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, CreateAssessmentCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, CreateAssessmentCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new CreateAssessmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAssessmentCommandInput} for command's `input` shape.
        * @see {@link CreateAssessmentCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class CreateAssessmentCommand extends $Command<CreateAssessmentCommandInput, CreateAssessmentCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: CreateAssessmentCommandInput;
            constructor(input: CreateAssessmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAssessmentCommandInput, CreateAssessmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/CreateAssessmentFrameworkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { CreateAssessmentFrameworkRequest, CreateAssessmentFrameworkResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface CreateAssessmentFrameworkCommandInput extends CreateAssessmentFrameworkRequest {
    }
    export interface CreateAssessmentFrameworkCommandOutput extends CreateAssessmentFrameworkResponse, __MetadataBearer {
    }
    /**
        * <p> Creates a custom framework in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, CreateAssessmentFrameworkCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, CreateAssessmentFrameworkCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new CreateAssessmentFrameworkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAssessmentFrameworkCommandInput} for command's `input` shape.
        * @see {@link CreateAssessmentFrameworkCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class CreateAssessmentFrameworkCommand extends $Command<CreateAssessmentFrameworkCommandInput, CreateAssessmentFrameworkCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: CreateAssessmentFrameworkCommandInput;
            constructor(input: CreateAssessmentFrameworkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAssessmentFrameworkCommandInput, CreateAssessmentFrameworkCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/CreateAssessmentReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { CreateAssessmentReportRequest, CreateAssessmentReportResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface CreateAssessmentReportCommandInput extends CreateAssessmentReportRequest {
    }
    export interface CreateAssessmentReportCommandOutput extends CreateAssessmentReportResponse, __MetadataBearer {
    }
    /**
        * <p> Creates an assessment report for the specified assessment. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, CreateAssessmentReportCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, CreateAssessmentReportCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new CreateAssessmentReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAssessmentReportCommandInput} for command's `input` shape.
        * @see {@link CreateAssessmentReportCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class CreateAssessmentReportCommand extends $Command<CreateAssessmentReportCommandInput, CreateAssessmentReportCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: CreateAssessmentReportCommandInput;
            constructor(input: CreateAssessmentReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAssessmentReportCommandInput, CreateAssessmentReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/CreateControlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { CreateControlRequest, CreateControlResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface CreateControlCommandInput extends CreateControlRequest {
    }
    export interface CreateControlCommandOutput extends CreateControlResponse, __MetadataBearer {
    }
    /**
        * <p> Creates a new custom control in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, CreateControlCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, CreateControlCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new CreateControlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateControlCommandInput} for command's `input` shape.
        * @see {@link CreateControlCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class CreateControlCommand extends $Command<CreateControlCommandInput, CreateControlCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: CreateControlCommandInput;
            constructor(input: CreateControlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateControlCommandInput, CreateControlCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteAssessmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { DeleteAssessmentRequest, DeleteAssessmentResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface DeleteAssessmentCommandInput extends DeleteAssessmentRequest {
    }
    export interface DeleteAssessmentCommandOutput extends DeleteAssessmentResponse, __MetadataBearer {
    }
    /**
        * <p> Deletes an assessment in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, DeleteAssessmentCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, DeleteAssessmentCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new DeleteAssessmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAssessmentCommandInput} for command's `input` shape.
        * @see {@link DeleteAssessmentCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class DeleteAssessmentCommand extends $Command<DeleteAssessmentCommandInput, DeleteAssessmentCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: DeleteAssessmentCommandInput;
            constructor(input: DeleteAssessmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAssessmentCommandInput, DeleteAssessmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteAssessmentFrameworkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { DeleteAssessmentFrameworkRequest, DeleteAssessmentFrameworkResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface DeleteAssessmentFrameworkCommandInput extends DeleteAssessmentFrameworkRequest {
    }
    export interface DeleteAssessmentFrameworkCommandOutput extends DeleteAssessmentFrameworkResponse, __MetadataBearer {
    }
    /**
        * <p> Deletes a custom framework in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, DeleteAssessmentFrameworkCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, DeleteAssessmentFrameworkCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new DeleteAssessmentFrameworkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAssessmentFrameworkCommandInput} for command's `input` shape.
        * @see {@link DeleteAssessmentFrameworkCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class DeleteAssessmentFrameworkCommand extends $Command<DeleteAssessmentFrameworkCommandInput, DeleteAssessmentFrameworkCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: DeleteAssessmentFrameworkCommandInput;
            constructor(input: DeleteAssessmentFrameworkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAssessmentFrameworkCommandInput, DeleteAssessmentFrameworkCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteAssessmentFrameworkShareCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { DeleteAssessmentFrameworkShareRequest, DeleteAssessmentFrameworkShareResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface DeleteAssessmentFrameworkShareCommandInput extends DeleteAssessmentFrameworkShareRequest {
    }
    export interface DeleteAssessmentFrameworkShareCommandOutput extends DeleteAssessmentFrameworkShareResponse, __MetadataBearer {
    }
    /**
        * <p>
        *          Deletes a share request for a custom framework in Audit Manager.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, DeleteAssessmentFrameworkShareCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, DeleteAssessmentFrameworkShareCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new DeleteAssessmentFrameworkShareCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAssessmentFrameworkShareCommandInput} for command's `input` shape.
        * @see {@link DeleteAssessmentFrameworkShareCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class DeleteAssessmentFrameworkShareCommand extends $Command<DeleteAssessmentFrameworkShareCommandInput, DeleteAssessmentFrameworkShareCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: DeleteAssessmentFrameworkShareCommandInput;
            constructor(input: DeleteAssessmentFrameworkShareCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAssessmentFrameworkShareCommandInput, DeleteAssessmentFrameworkShareCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteAssessmentReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { DeleteAssessmentReportRequest, DeleteAssessmentReportResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface DeleteAssessmentReportCommandInput extends DeleteAssessmentReportRequest {
    }
    export interface DeleteAssessmentReportCommandOutput extends DeleteAssessmentReportResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes an assessment report in Audit Manager. </p>
        *          <p>When you run the <code>DeleteAssessmentReport</code> operation, Audit Manager attempts to delete the following data:</p>
        *          <ol>
        *             <li>
        *                <p>The specified assessment report that’s stored in your S3 bucket</p>
        *             </li>
        *             <li>
        *                <p>The associated metadata that’s stored in Audit Manager</p>
        *             </li>
        *          </ol>
        *          <p>If Audit Manager can’t access the assessment report in your S3 bucket, the report
        *          isn’t deleted. In this event, the <code>DeleteAssessmentReport</code> operation doesn’t
        *          fail. Instead, it proceeds to delete the associated metadata only. You must then delete the
        *          assessment report from the S3 bucket yourself. </p>
        *          <p>This scenario happens when Audit Manager receives a <code>403 (Forbidden)</code> or
        *             <code>404 (Not Found)</code> error from Amazon S3. To avoid this, make sure that
        *          your S3 bucket is available, and that you configured the correct permissions for Audit Manager to delete resources in your S3 bucket. For an example permissions policy that
        *          you can use, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/security_iam_id-based-policy-examples.html#full-administrator-access-assessment-report-destination">Assessment report destination permissions</a> in the <i>Audit Manager User Guide</i>. For information about the issues that could cause a <code>403
        *             (Forbidden)</code> or <code>404 (Not Found</code>) error from Amazon S3, see
        *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List of Error Codes</a> in the <i>Amazon Simple Storage Service API
        *             Reference</i>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, DeleteAssessmentReportCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, DeleteAssessmentReportCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new DeleteAssessmentReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAssessmentReportCommandInput} for command's `input` shape.
        * @see {@link DeleteAssessmentReportCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class DeleteAssessmentReportCommand extends $Command<DeleteAssessmentReportCommandInput, DeleteAssessmentReportCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: DeleteAssessmentReportCommandInput;
            constructor(input: DeleteAssessmentReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAssessmentReportCommandInput, DeleteAssessmentReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeleteControlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { DeleteControlRequest, DeleteControlResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface DeleteControlCommandInput extends DeleteControlRequest {
    }
    export interface DeleteControlCommandOutput extends DeleteControlResponse, __MetadataBearer {
    }
    /**
        * <p> Deletes a custom control in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, DeleteControlCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, DeleteControlCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new DeleteControlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteControlCommandInput} for command's `input` shape.
        * @see {@link DeleteControlCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class DeleteControlCommand extends $Command<DeleteControlCommandInput, DeleteControlCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: DeleteControlCommandInput;
            constructor(input: DeleteControlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteControlCommandInput, DeleteControlCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeregisterAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { DeregisterAccountRequest, DeregisterAccountResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface DeregisterAccountCommandInput extends DeregisterAccountRequest {
    }
    export interface DeregisterAccountCommandOutput extends DeregisterAccountResponse, __MetadataBearer {
    }
    /**
        * <p> Deregisters an account in Audit Manager. </p>
        *          <note>
        *             <p>When you deregister your account from Audit Manager, your data isn’t deleted. If you want
        *             to delete your resource data, you must perform that task separately before you
        *             deregister your account. Either, you can do this in the Audit Manager console. Or,
        *             you can use one of the delete API operations that are provided by Audit Manager. </p>
        *             <p>To delete your Audit Manager resource data, see the following instructions: </p>
        *             <ul>
        *                <li>
        *                   <p>
        *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessment.html">DeleteAssessment</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-assessment.html">Deleting an
        *                      assessment</a> in the <i>Audit Manager User
        *                   Guide</i>)</p>
        *                </li>
        *                <li>
        *                   <p>
        *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentFramework.html">DeleteAssessmentFramework</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-custom-framework.html">Deleting a
        *                      custom framework</a> in the <i>Audit Manager User
        *                      Guide</i>)</p>
        *                </li>
        *                <li>
        *                   <p>
        *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentFrameworkShare.html">DeleteAssessmentFrameworkShare</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/deleting-shared-framework-requests.html">Deleting a share request</a> in the <i>Audit Manager User
        *                      Guide</i>)</p>
        *                </li>
        *                <li>
        *                   <p>
        *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentReport.html">DeleteAssessmentReport</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/generate-assessment-report.html#delete-assessment-report-steps">Deleting an assessment report</a> in the <i>Audit Manager
        *                      User Guide</i>)</p>
        *                </li>
        *                <li>
        *                   <p>
        *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteControl.html">DeleteControl</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-controls.html">Deleting a custom
        *                      control</a> in the <i>Audit Manager User
        *                   Guide</i>)</p>
        *                </li>
        *             </ul>
        *             <p>At this time, Audit Manager doesn't provide an option to delete evidence. All
        *             available delete operations are listed above.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, DeregisterAccountCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, DeregisterAccountCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new DeregisterAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterAccountCommandInput} for command's `input` shape.
        * @see {@link DeregisterAccountCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class DeregisterAccountCommand extends $Command<DeregisterAccountCommandInput, DeregisterAccountCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: DeregisterAccountCommandInput;
            constructor(input: DeregisterAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterAccountCommandInput, DeregisterAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DeregisterOrganizationAdminAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { DeregisterOrganizationAdminAccountRequest, DeregisterOrganizationAdminAccountResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface DeregisterOrganizationAdminAccountCommandInput extends DeregisterOrganizationAdminAccountRequest {
    }
    export interface DeregisterOrganizationAdminAccountCommandOutput extends DeregisterOrganizationAdminAccountResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the specified Amazon Web Services account as a delegated administrator for
        *             Audit Manager. </p>
        *          <important>
        *             <p>When you remove a delegated administrator from your Audit Manager settings, you
        *             continue to have access to the evidence that you previously collected under that
        *             account. This is also the case when you deregister a delegated administrator from
        *                Organizations. However, Audit Manager will stop collecting and attaching
        *             evidence to that delegated administrator account moving forward.</p>
        *          </important>
        *          <note>
        *             <p>When you deregister a delegated administrator account for Audit Manager, the data for that
        *             account isn’t deleted. If you want to delete resource data for a delegated administrator
        *             account, you must perform that task separately before you deregister the account.
        *             Either, you can do this in the Audit Manager console. Or, you can use one of the
        *             delete API operations that are provided by Audit Manager. </p>
        *             <p>To delete your Audit Manager resource data, see the following instructions: </p>
        *             <ul>
        *                <li>
        *                   <p>
        *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessment.html">DeleteAssessment</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-assessment.html">Deleting an
        *                      assessment</a> in the <i>Audit Manager User
        *                   Guide</i>)</p>
        *                </li>
        *                <li>
        *                   <p>
        *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentFramework.html">DeleteAssessmentFramework</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-custom-framework.html">Deleting a
        *                      custom framework</a> in the <i>Audit Manager User
        *                      Guide</i>)</p>
        *                </li>
        *                <li>
        *                   <p>
        *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentFrameworkShare.html">DeleteAssessmentFrameworkShare</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/deleting-shared-framework-requests.html">Deleting a share request</a> in the <i>Audit Manager User
        *                      Guide</i>)</p>
        *                </li>
        *                <li>
        *                   <p>
        *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteAssessmentReport.html">DeleteAssessmentReport</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/generate-assessment-report.html#delete-assessment-report-steps">Deleting an assessment report</a> in the <i>Audit Manager
        *                      User Guide</i>)</p>
        *                </li>
        *                <li>
        *                   <p>
        *                      <a href="https://docs.aws.amazon.com/audit-manager/latest/APIReference/API_DeleteControl.html">DeleteControl</a> (see also: <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/delete-controls.html">Deleting a custom
        *                      control</a> in the <i>Audit Manager User
        *                   Guide</i>)</p>
        *                </li>
        *             </ul>
        *             <p>At this time, Audit Manager doesn't provide an option to delete evidence. All
        *             available delete operations are listed above.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, DeregisterOrganizationAdminAccountCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, DeregisterOrganizationAdminAccountCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new DeregisterOrganizationAdminAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeregisterOrganizationAdminAccountCommandInput} for command's `input` shape.
        * @see {@link DeregisterOrganizationAdminAccountCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class DeregisterOrganizationAdminAccountCommand extends $Command<DeregisterOrganizationAdminAccountCommandInput, DeregisterOrganizationAdminAccountCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: DeregisterOrganizationAdminAccountCommandInput;
            constructor(input: DeregisterOrganizationAdminAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeregisterOrganizationAdminAccountCommandInput, DeregisterOrganizationAdminAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/DisassociateAssessmentReportEvidenceFolderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { DisassociateAssessmentReportEvidenceFolderRequest, DisassociateAssessmentReportEvidenceFolderResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface DisassociateAssessmentReportEvidenceFolderCommandInput extends DisassociateAssessmentReportEvidenceFolderRequest {
    }
    export interface DisassociateAssessmentReportEvidenceFolderCommandOutput extends DisassociateAssessmentReportEvidenceFolderResponse, __MetadataBearer {
    }
    /**
        * <p> Disassociates an evidence folder from the specified assessment report in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, DisassociateAssessmentReportEvidenceFolderCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, DisassociateAssessmentReportEvidenceFolderCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new DisassociateAssessmentReportEvidenceFolderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateAssessmentReportEvidenceFolderCommandInput} for command's `input` shape.
        * @see {@link DisassociateAssessmentReportEvidenceFolderCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class DisassociateAssessmentReportEvidenceFolderCommand extends $Command<DisassociateAssessmentReportEvidenceFolderCommandInput, DisassociateAssessmentReportEvidenceFolderCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: DisassociateAssessmentReportEvidenceFolderCommandInput;
            constructor(input: DisassociateAssessmentReportEvidenceFolderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateAssessmentReportEvidenceFolderCommandInput, DisassociateAssessmentReportEvidenceFolderCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetAccountStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetAccountStatusRequest, GetAccountStatusResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetAccountStatusCommandInput extends GetAccountStatusRequest {
    }
    export interface GetAccountStatusCommandOutput extends GetAccountStatusResponse, __MetadataBearer {
    }
    /**
        * <p> Returns the registration status of an account in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetAccountStatusCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetAccountStatusCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetAccountStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAccountStatusCommandInput} for command's `input` shape.
        * @see {@link GetAccountStatusCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetAccountStatusCommand extends $Command<GetAccountStatusCommandInput, GetAccountStatusCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetAccountStatusCommandInput;
            constructor(input: GetAccountStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAccountStatusCommandInput, GetAccountStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetAssessmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetAssessmentRequest, GetAssessmentResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetAssessmentCommandInput extends GetAssessmentRequest {
    }
    export interface GetAssessmentCommandOutput extends GetAssessmentResponse, __MetadataBearer {
    }
    /**
        * <p>Returns an assessment from Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetAssessmentCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetAssessmentCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetAssessmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAssessmentCommandInput} for command's `input` shape.
        * @see {@link GetAssessmentCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetAssessmentCommand extends $Command<GetAssessmentCommandInput, GetAssessmentCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetAssessmentCommandInput;
            constructor(input: GetAssessmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAssessmentCommandInput, GetAssessmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetAssessmentFrameworkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetAssessmentFrameworkRequest, GetAssessmentFrameworkResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetAssessmentFrameworkCommandInput extends GetAssessmentFrameworkRequest {
    }
    export interface GetAssessmentFrameworkCommandOutput extends GetAssessmentFrameworkResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a framework from Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetAssessmentFrameworkCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetAssessmentFrameworkCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetAssessmentFrameworkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAssessmentFrameworkCommandInput} for command's `input` shape.
        * @see {@link GetAssessmentFrameworkCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetAssessmentFrameworkCommand extends $Command<GetAssessmentFrameworkCommandInput, GetAssessmentFrameworkCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetAssessmentFrameworkCommandInput;
            constructor(input: GetAssessmentFrameworkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAssessmentFrameworkCommandInput, GetAssessmentFrameworkCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetAssessmentReportUrlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetAssessmentReportUrlRequest, GetAssessmentReportUrlResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetAssessmentReportUrlCommandInput extends GetAssessmentReportUrlRequest {
    }
    export interface GetAssessmentReportUrlCommandOutput extends GetAssessmentReportUrlResponse, __MetadataBearer {
    }
    /**
        * <p> Returns the URL of an assessment report in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetAssessmentReportUrlCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetAssessmentReportUrlCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetAssessmentReportUrlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAssessmentReportUrlCommandInput} for command's `input` shape.
        * @see {@link GetAssessmentReportUrlCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetAssessmentReportUrlCommand extends $Command<GetAssessmentReportUrlCommandInput, GetAssessmentReportUrlCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetAssessmentReportUrlCommandInput;
            constructor(input: GetAssessmentReportUrlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAssessmentReportUrlCommandInput, GetAssessmentReportUrlCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetChangeLogsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetChangeLogsRequest, GetChangeLogsResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetChangeLogsCommandInput extends GetChangeLogsRequest {
    }
    export interface GetChangeLogsCommandOutput extends GetChangeLogsResponse, __MetadataBearer {
    }
    /**
        * <p> Returns a list of changelogs from Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetChangeLogsCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetChangeLogsCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetChangeLogsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetChangeLogsCommandInput} for command's `input` shape.
        * @see {@link GetChangeLogsCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetChangeLogsCommand extends $Command<GetChangeLogsCommandInput, GetChangeLogsCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetChangeLogsCommandInput;
            constructor(input: GetChangeLogsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetChangeLogsCommandInput, GetChangeLogsCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetControlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetControlRequest, GetControlResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetControlCommandInput extends GetControlRequest {
    }
    export interface GetControlCommandOutput extends GetControlResponse, __MetadataBearer {
    }
    /**
        * <p> Returns a control from Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetControlCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetControlCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetControlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetControlCommandInput} for command's `input` shape.
        * @see {@link GetControlCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetControlCommand extends $Command<GetControlCommandInput, GetControlCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetControlCommandInput;
            constructor(input: GetControlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetControlCommandInput, GetControlCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetDelegationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetDelegationsRequest, GetDelegationsResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetDelegationsCommandInput extends GetDelegationsRequest {
    }
    export interface GetDelegationsCommandOutput extends GetDelegationsResponse, __MetadataBearer {
    }
    /**
        * <p> Returns a list of delegations from an audit owner to a delegate. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetDelegationsCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetDelegationsCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetDelegationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetDelegationsCommandInput} for command's `input` shape.
        * @see {@link GetDelegationsCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetDelegationsCommand extends $Command<GetDelegationsCommandInput, GetDelegationsCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetDelegationsCommandInput;
            constructor(input: GetDelegationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetDelegationsCommandInput, GetDelegationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceByEvidenceFolderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetEvidenceByEvidenceFolderRequest, GetEvidenceByEvidenceFolderResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetEvidenceByEvidenceFolderCommandInput extends GetEvidenceByEvidenceFolderRequest {
    }
    export interface GetEvidenceByEvidenceFolderCommandOutput extends GetEvidenceByEvidenceFolderResponse, __MetadataBearer {
    }
    /**
        * <p> Returns all evidence from a specified evidence folder in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetEvidenceByEvidenceFolderCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetEvidenceByEvidenceFolderCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetEvidenceByEvidenceFolderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEvidenceByEvidenceFolderCommandInput} for command's `input` shape.
        * @see {@link GetEvidenceByEvidenceFolderCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetEvidenceByEvidenceFolderCommand extends $Command<GetEvidenceByEvidenceFolderCommandInput, GetEvidenceByEvidenceFolderCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetEvidenceByEvidenceFolderCommandInput;
            constructor(input: GetEvidenceByEvidenceFolderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEvidenceByEvidenceFolderCommandInput, GetEvidenceByEvidenceFolderCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetEvidenceRequest, GetEvidenceResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetEvidenceCommandInput extends GetEvidenceRequest {
    }
    export interface GetEvidenceCommandOutput extends GetEvidenceResponse, __MetadataBearer {
    }
    /**
        * <p> Returns evidence from Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetEvidenceCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetEvidenceCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetEvidenceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEvidenceCommandInput} for command's `input` shape.
        * @see {@link GetEvidenceCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetEvidenceCommand extends $Command<GetEvidenceCommandInput, GetEvidenceCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetEvidenceCommandInput;
            constructor(input: GetEvidenceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEvidenceCommandInput, GetEvidenceCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceFolderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetEvidenceFolderRequest, GetEvidenceFolderResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetEvidenceFolderCommandInput extends GetEvidenceFolderRequest {
    }
    export interface GetEvidenceFolderCommandOutput extends GetEvidenceFolderResponse, __MetadataBearer {
    }
    /**
        * <p> Returns an evidence folder from the specified assessment in Audit Manager.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetEvidenceFolderCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetEvidenceFolderCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetEvidenceFolderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEvidenceFolderCommandInput} for command's `input` shape.
        * @see {@link GetEvidenceFolderCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetEvidenceFolderCommand extends $Command<GetEvidenceFolderCommandInput, GetEvidenceFolderCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetEvidenceFolderCommandInput;
            constructor(input: GetEvidenceFolderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEvidenceFolderCommandInput, GetEvidenceFolderCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceFoldersByAssessmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetEvidenceFoldersByAssessmentRequest, GetEvidenceFoldersByAssessmentResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetEvidenceFoldersByAssessmentCommandInput extends GetEvidenceFoldersByAssessmentRequest {
    }
    export interface GetEvidenceFoldersByAssessmentCommandOutput extends GetEvidenceFoldersByAssessmentResponse, __MetadataBearer {
    }
    /**
        * <p> Returns the evidence folders from a specified assessment in Audit Manager.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetEvidenceFoldersByAssessmentCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetEvidenceFoldersByAssessmentCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetEvidenceFoldersByAssessmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEvidenceFoldersByAssessmentCommandInput} for command's `input` shape.
        * @see {@link GetEvidenceFoldersByAssessmentCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetEvidenceFoldersByAssessmentCommand extends $Command<GetEvidenceFoldersByAssessmentCommandInput, GetEvidenceFoldersByAssessmentCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetEvidenceFoldersByAssessmentCommandInput;
            constructor(input: GetEvidenceFoldersByAssessmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEvidenceFoldersByAssessmentCommandInput, GetEvidenceFoldersByAssessmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetEvidenceFoldersByAssessmentControlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetEvidenceFoldersByAssessmentControlRequest, GetEvidenceFoldersByAssessmentControlResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetEvidenceFoldersByAssessmentControlCommandInput extends GetEvidenceFoldersByAssessmentControlRequest {
    }
    export interface GetEvidenceFoldersByAssessmentControlCommandOutput extends GetEvidenceFoldersByAssessmentControlResponse, __MetadataBearer {
    }
    /**
        * <p> Returns a list of evidence folders that are associated with a specified control of an
        *          assessment in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetEvidenceFoldersByAssessmentControlCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetEvidenceFoldersByAssessmentControlCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetEvidenceFoldersByAssessmentControlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetEvidenceFoldersByAssessmentControlCommandInput} for command's `input` shape.
        * @see {@link GetEvidenceFoldersByAssessmentControlCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetEvidenceFoldersByAssessmentControlCommand extends $Command<GetEvidenceFoldersByAssessmentControlCommandInput, GetEvidenceFoldersByAssessmentControlCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetEvidenceFoldersByAssessmentControlCommandInput;
            constructor(input: GetEvidenceFoldersByAssessmentControlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetEvidenceFoldersByAssessmentControlCommandInput, GetEvidenceFoldersByAssessmentControlCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetInsightsByAssessmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetInsightsByAssessmentRequest, GetInsightsByAssessmentResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetInsightsByAssessmentCommandInput extends GetInsightsByAssessmentRequest {
    }
    export interface GetInsightsByAssessmentCommandOutput extends GetInsightsByAssessmentResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the latest analytics data for a specific active assessment. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetInsightsByAssessmentCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetInsightsByAssessmentCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetInsightsByAssessmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInsightsByAssessmentCommandInput} for command's `input` shape.
        * @see {@link GetInsightsByAssessmentCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetInsightsByAssessmentCommand extends $Command<GetInsightsByAssessmentCommandInput, GetInsightsByAssessmentCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetInsightsByAssessmentCommandInput;
            constructor(input: GetInsightsByAssessmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInsightsByAssessmentCommandInput, GetInsightsByAssessmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetInsightsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetInsightsRequest, GetInsightsResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetInsightsCommandInput extends GetInsightsRequest {
    }
    export interface GetInsightsCommandOutput extends GetInsightsResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the latest analytics data for all your current active assessments. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetInsightsCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetInsightsCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetInsightsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInsightsCommandInput} for command's `input` shape.
        * @see {@link GetInsightsCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetInsightsCommand extends $Command<GetInsightsCommandInput, GetInsightsCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetInsightsCommandInput;
            constructor(input: GetInsightsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInsightsCommandInput, GetInsightsCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetOrganizationAdminAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetOrganizationAdminAccountRequest, GetOrganizationAdminAccountResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetOrganizationAdminAccountCommandInput extends GetOrganizationAdminAccountRequest {
    }
    export interface GetOrganizationAdminAccountCommandOutput extends GetOrganizationAdminAccountResponse, __MetadataBearer {
    }
    /**
        * <p> Returns the name of the delegated Amazon Web Services administrator account for the
        *          organization. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetOrganizationAdminAccountCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetOrganizationAdminAccountCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetOrganizationAdminAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOrganizationAdminAccountCommandInput} for command's `input` shape.
        * @see {@link GetOrganizationAdminAccountCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetOrganizationAdminAccountCommand extends $Command<GetOrganizationAdminAccountCommandInput, GetOrganizationAdminAccountCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetOrganizationAdminAccountCommandInput;
            constructor(input: GetOrganizationAdminAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOrganizationAdminAccountCommandInput, GetOrganizationAdminAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetServicesInScopeCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetServicesInScopeRequest, GetServicesInScopeResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetServicesInScopeCommandInput extends GetServicesInScopeRequest {
    }
    export interface GetServicesInScopeCommandOutput extends GetServicesInScopeResponse, __MetadataBearer {
    }
    /**
        * <p> Returns a list of the in-scope Amazon Web Services for the specified
        *          assessment. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetServicesInScopeCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetServicesInScopeCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetServicesInScopeCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetServicesInScopeCommandInput} for command's `input` shape.
        * @see {@link GetServicesInScopeCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetServicesInScopeCommand extends $Command<GetServicesInScopeCommandInput, GetServicesInScopeCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetServicesInScopeCommandInput;
            constructor(input: GetServicesInScopeCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetServicesInScopeCommandInput, GetServicesInScopeCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/GetSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { GetSettingsRequest, GetSettingsResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface GetSettingsCommandInput extends GetSettingsRequest {
    }
    export interface GetSettingsCommandOutput extends GetSettingsResponse, __MetadataBearer {
    }
    /**
        * <p> Returns the settings for the specified Amazon Web Services account. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, GetSettingsCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, GetSettingsCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new GetSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSettingsCommandInput} for command's `input` shape.
        * @see {@link GetSettingsCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class GetSettingsCommand extends $Command<GetSettingsCommandInput, GetSettingsCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: GetSettingsCommandInput;
            constructor(input: GetSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSettingsCommandInput, GetSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentControlInsightsByControlDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { ListAssessmentControlInsightsByControlDomainRequest, ListAssessmentControlInsightsByControlDomainResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface ListAssessmentControlInsightsByControlDomainCommandInput extends ListAssessmentControlInsightsByControlDomainRequest {
    }
    export interface ListAssessmentControlInsightsByControlDomainCommandOutput extends ListAssessmentControlInsightsByControlDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the latest analytics data for controls within a specific control domain and a
        *          specific active assessment.</p>
        *          <note>
        *             <p>Control insights are listed only if the control belongs to the control domain and assessment
        *          that was specified. Moreover, the control must have collected evidence on the
        *          <code>lastUpdated</code> date of <code>controlInsightsByAssessment</code>. If neither
        *          of these conditions are met, no data is listed for that control. </p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, ListAssessmentControlInsightsByControlDomainCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, ListAssessmentControlInsightsByControlDomainCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new ListAssessmentControlInsightsByControlDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssessmentControlInsightsByControlDomainCommandInput} for command's `input` shape.
        * @see {@link ListAssessmentControlInsightsByControlDomainCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class ListAssessmentControlInsightsByControlDomainCommand extends $Command<ListAssessmentControlInsightsByControlDomainCommandInput, ListAssessmentControlInsightsByControlDomainCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: ListAssessmentControlInsightsByControlDomainCommandInput;
            constructor(input: ListAssessmentControlInsightsByControlDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssessmentControlInsightsByControlDomainCommandInput, ListAssessmentControlInsightsByControlDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentFrameworksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { ListAssessmentFrameworksRequest, ListAssessmentFrameworksResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface ListAssessmentFrameworksCommandInput extends ListAssessmentFrameworksRequest {
    }
    export interface ListAssessmentFrameworksCommandOutput extends ListAssessmentFrameworksResponse, __MetadataBearer {
    }
    /**
        * <p> Returns a list of the frameworks that are available in the Audit Manager
        *          framework library. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, ListAssessmentFrameworksCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, ListAssessmentFrameworksCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new ListAssessmentFrameworksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssessmentFrameworksCommandInput} for command's `input` shape.
        * @see {@link ListAssessmentFrameworksCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class ListAssessmentFrameworksCommand extends $Command<ListAssessmentFrameworksCommandInput, ListAssessmentFrameworksCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: ListAssessmentFrameworksCommandInput;
            constructor(input: ListAssessmentFrameworksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssessmentFrameworksCommandInput, ListAssessmentFrameworksCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentFrameworkShareRequestsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { ListAssessmentFrameworkShareRequestsRequest, ListAssessmentFrameworkShareRequestsResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface ListAssessmentFrameworkShareRequestsCommandInput extends ListAssessmentFrameworkShareRequestsRequest {
    }
    export interface ListAssessmentFrameworkShareRequestsCommandOutput extends ListAssessmentFrameworkShareRequestsResponse, __MetadataBearer {
    }
    /**
        * <p> Returns a list of sent or received share requests for custom frameworks in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, ListAssessmentFrameworkShareRequestsCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, ListAssessmentFrameworkShareRequestsCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new ListAssessmentFrameworkShareRequestsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssessmentFrameworkShareRequestsCommandInput} for command's `input` shape.
        * @see {@link ListAssessmentFrameworkShareRequestsCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class ListAssessmentFrameworkShareRequestsCommand extends $Command<ListAssessmentFrameworkShareRequestsCommandInput, ListAssessmentFrameworkShareRequestsCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: ListAssessmentFrameworkShareRequestsCommandInput;
            constructor(input: ListAssessmentFrameworkShareRequestsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssessmentFrameworkShareRequestsCommandInput, ListAssessmentFrameworkShareRequestsCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentReportsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { ListAssessmentReportsRequest, ListAssessmentReportsResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface ListAssessmentReportsCommandInput extends ListAssessmentReportsRequest {
    }
    export interface ListAssessmentReportsCommandOutput extends ListAssessmentReportsResponse, __MetadataBearer {
    }
    /**
        * <p> Returns a list of assessment reports created in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, ListAssessmentReportsCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, ListAssessmentReportsCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new ListAssessmentReportsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssessmentReportsCommandInput} for command's `input` shape.
        * @see {@link ListAssessmentReportsCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class ListAssessmentReportsCommand extends $Command<ListAssessmentReportsCommandInput, ListAssessmentReportsCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: ListAssessmentReportsCommandInput;
            constructor(input: ListAssessmentReportsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssessmentReportsCommandInput, ListAssessmentReportsCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListAssessmentsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { ListAssessmentsRequest, ListAssessmentsResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface ListAssessmentsCommandInput extends ListAssessmentsRequest {
    }
    export interface ListAssessmentsCommandOutput extends ListAssessmentsResponse, __MetadataBearer {
    }
    /**
        * <p> Returns a list of current and past assessments from Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, ListAssessmentsCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, ListAssessmentsCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new ListAssessmentsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAssessmentsCommandInput} for command's `input` shape.
        * @see {@link ListAssessmentsCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class ListAssessmentsCommand extends $Command<ListAssessmentsCommandInput, ListAssessmentsCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: ListAssessmentsCommandInput;
            constructor(input: ListAssessmentsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAssessmentsCommandInput, ListAssessmentsCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListControlDomainInsightsByAssessmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { ListControlDomainInsightsByAssessmentRequest, ListControlDomainInsightsByAssessmentResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface ListControlDomainInsightsByAssessmentCommandInput extends ListControlDomainInsightsByAssessmentRequest {
    }
    export interface ListControlDomainInsightsByAssessmentCommandOutput extends ListControlDomainInsightsByAssessmentResponse, __MetadataBearer {
    }
    /**
        * <p>Lists analytics data for control domains within a specified active assessment.</p>
        *          <note>
        *             <p>A control domain is listed only if at least one of the controls within that domain collected
        *          evidence on the <code>lastUpdated</code> date of <code>controlDomainInsights</code>. If
        *          this condition isn’t met, no data is listed for that domain.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, ListControlDomainInsightsByAssessmentCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, ListControlDomainInsightsByAssessmentCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new ListControlDomainInsightsByAssessmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListControlDomainInsightsByAssessmentCommandInput} for command's `input` shape.
        * @see {@link ListControlDomainInsightsByAssessmentCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class ListControlDomainInsightsByAssessmentCommand extends $Command<ListControlDomainInsightsByAssessmentCommandInput, ListControlDomainInsightsByAssessmentCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: ListControlDomainInsightsByAssessmentCommandInput;
            constructor(input: ListControlDomainInsightsByAssessmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListControlDomainInsightsByAssessmentCommandInput, ListControlDomainInsightsByAssessmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListControlDomainInsightsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { ListControlDomainInsightsRequest, ListControlDomainInsightsResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface ListControlDomainInsightsCommandInput extends ListControlDomainInsightsRequest {
    }
    export interface ListControlDomainInsightsCommandOutput extends ListControlDomainInsightsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the latest analytics data for control domains across all of your active
        *          assessments. </p>
        *          <note>
        *             <p>A control domain is listed only if at least one of the controls within that domain collected
        *          evidence on the <code>lastUpdated</code> date of <code>controlDomainInsights</code>. If
        *          this condition isn’t met, no data is listed for that control domain.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, ListControlDomainInsightsCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, ListControlDomainInsightsCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new ListControlDomainInsightsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListControlDomainInsightsCommandInput} for command's `input` shape.
        * @see {@link ListControlDomainInsightsCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class ListControlDomainInsightsCommand extends $Command<ListControlDomainInsightsCommandInput, ListControlDomainInsightsCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: ListControlDomainInsightsCommandInput;
            constructor(input: ListControlDomainInsightsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListControlDomainInsightsCommandInput, ListControlDomainInsightsCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListControlInsightsByControlDomainCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { ListControlInsightsByControlDomainRequest, ListControlInsightsByControlDomainResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface ListControlInsightsByControlDomainCommandInput extends ListControlInsightsByControlDomainRequest {
    }
    export interface ListControlInsightsByControlDomainCommandOutput extends ListControlInsightsByControlDomainResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the latest analytics data for controls within a specific control domain across all
        *          active assessments.</p>
        *          <note>
        *             <p>Control insights are listed only if the control belongs to the control domain that was
        *          specified and the control collected evidence on the <code>lastUpdated</code> date of
        *          <code>controlInsightsMetadata</code>. If neither of these conditions are met, no data
        *          is listed for that control. </p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, ListControlInsightsByControlDomainCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, ListControlInsightsByControlDomainCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new ListControlInsightsByControlDomainCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListControlInsightsByControlDomainCommandInput} for command's `input` shape.
        * @see {@link ListControlInsightsByControlDomainCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class ListControlInsightsByControlDomainCommand extends $Command<ListControlInsightsByControlDomainCommandInput, ListControlInsightsByControlDomainCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: ListControlInsightsByControlDomainCommandInput;
            constructor(input: ListControlInsightsByControlDomainCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListControlInsightsByControlDomainCommandInput, ListControlInsightsByControlDomainCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListControlsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { ListControlsRequest, ListControlsResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface ListControlsCommandInput extends ListControlsRequest {
    }
    export interface ListControlsCommandOutput extends ListControlsResponse, __MetadataBearer {
    }
    /**
        * <p> Returns a list of controls from Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, ListControlsCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, ListControlsCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new ListControlsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListControlsCommandInput} for command's `input` shape.
        * @see {@link ListControlsCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class ListControlsCommand extends $Command<ListControlsCommandInput, ListControlsCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: ListControlsCommandInput;
            constructor(input: ListControlsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListControlsCommandInput, ListControlsCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListKeywordsForDataSourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { ListKeywordsForDataSourceRequest, ListKeywordsForDataSourceResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface ListKeywordsForDataSourceCommandInput extends ListKeywordsForDataSourceRequest {
    }
    export interface ListKeywordsForDataSourceCommandOutput extends ListKeywordsForDataSourceResponse, __MetadataBearer {
    }
    /**
        * <p> Returns a list of keywords that are pre-mapped to the specified control data source. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, ListKeywordsForDataSourceCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, ListKeywordsForDataSourceCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new ListKeywordsForDataSourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListKeywordsForDataSourceCommandInput} for command's `input` shape.
        * @see {@link ListKeywordsForDataSourceCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class ListKeywordsForDataSourceCommand extends $Command<ListKeywordsForDataSourceCommandInput, ListKeywordsForDataSourceCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: ListKeywordsForDataSourceCommandInput;
            constructor(input: ListKeywordsForDataSourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListKeywordsForDataSourceCommandInput, ListKeywordsForDataSourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListNotificationsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { ListNotificationsRequest, ListNotificationsResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface ListNotificationsCommandInput extends ListNotificationsRequest {
    }
    export interface ListNotificationsCommandOutput extends ListNotificationsResponse, __MetadataBearer {
    }
    /**
        * <p> Returns a list of all Audit Manager notifications. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, ListNotificationsCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, ListNotificationsCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new ListNotificationsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListNotificationsCommandInput} for command's `input` shape.
        * @see {@link ListNotificationsCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class ListNotificationsCommand extends $Command<ListNotificationsCommandInput, ListNotificationsCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: ListNotificationsCommandInput;
            constructor(input: ListNotificationsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListNotificationsCommandInput, ListNotificationsCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p> Returns a list of tags for the specified resource in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, ListTagsForResourceCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, ListTagsForResourceCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/RegisterAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { RegisterAccountRequest, RegisterAccountResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface RegisterAccountCommandInput extends RegisterAccountRequest {
    }
    export interface RegisterAccountCommandOutput extends RegisterAccountResponse, __MetadataBearer {
    }
    /**
        * <p> Enables Audit Manager for the specified Amazon Web Services account. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, RegisterAccountCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, RegisterAccountCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new RegisterAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterAccountCommandInput} for command's `input` shape.
        * @see {@link RegisterAccountCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class RegisterAccountCommand extends $Command<RegisterAccountCommandInput, RegisterAccountCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: RegisterAccountCommandInput;
            constructor(input: RegisterAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterAccountCommandInput, RegisterAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/RegisterOrganizationAdminAccountCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { RegisterOrganizationAdminAccountRequest, RegisterOrganizationAdminAccountResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface RegisterOrganizationAdminAccountCommandInput extends RegisterOrganizationAdminAccountRequest {
    }
    export interface RegisterOrganizationAdminAccountCommandOutput extends RegisterOrganizationAdminAccountResponse, __MetadataBearer {
    }
    /**
        * <p> Enables an Amazon Web Services account within the organization as the delegated
        *          administrator for Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, RegisterOrganizationAdminAccountCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, RegisterOrganizationAdminAccountCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new RegisterOrganizationAdminAccountCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RegisterOrganizationAdminAccountCommandInput} for command's `input` shape.
        * @see {@link RegisterOrganizationAdminAccountCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class RegisterOrganizationAdminAccountCommand extends $Command<RegisterOrganizationAdminAccountCommandInput, RegisterOrganizationAdminAccountCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: RegisterOrganizationAdminAccountCommandInput;
            constructor(input: RegisterOrganizationAdminAccountCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RegisterOrganizationAdminAccountCommandInput, RegisterOrganizationAdminAccountCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/StartAssessmentFrameworkShareCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { StartAssessmentFrameworkShareRequest, StartAssessmentFrameworkShareResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface StartAssessmentFrameworkShareCommandInput extends StartAssessmentFrameworkShareRequest {
    }
    export interface StartAssessmentFrameworkShareCommandOutput extends StartAssessmentFrameworkShareResponse, __MetadataBearer {
    }
    /**
        * <p> Creates a share request for a custom framework in Audit Manager. </p>
        *          <p>The share request specifies a recipient and notifies them that a custom framework is available. Recipients have 120 days to accept or decline the request. If no action is taken, the share request expires.</p>
        *          <p>When you create a share request, Audit Manager stores a snapshot of your custom
        *          framework in the US East (N. Virginia) Amazon Web Services Region. Audit Manager also
        *          stores a backup of the same snapshot in the US West (Oregon) Amazon Web Services Region.</p>
        *          <p>Audit Manager deletes the snapshot and the backup snapshot when one of the following
        *          events occurs:</p>
        *          <ul>
        *             <li>
        *                <p>The sender revokes the share request.</p>
        *             </li>
        *             <li>
        *                <p>The recipient declines the share request.</p>
        *             </li>
        *             <li>
        *                <p>The recipient encounters an error and doesn't successfully accept the share
        *                request.</p>
        *             </li>
        *             <li>
        *                <p>The share request expires before the recipient responds to the request.</p>
        *             </li>
        *          </ul>
        *          <p>When a sender <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/framework-sharing.html#framework-sharing-resend">resends a share request</a>, the snapshot is replaced with an updated version that
        *          corresponds with the latest version of the custom framework. </p>
        *          <p>When a recipient accepts a share request, the snapshot is replicated into their
        *             Amazon Web Services account under the Amazon Web Services Region that was specified in the share request. </p>
        *          <important>
        *             <p>When you invoke the <code>StartAssessmentFrameworkShare</code> API, you are about to
        *             share a custom framework with another Amazon Web Services account. You may not share a
        *             custom framework that is derived from a standard framework if the standard framework is
        *             designated as not eligible for sharing by Amazon Web Services, unless you have obtained
        *             permission to do so from the owner of the standard framework. To learn more about which
        *             standard frameworks are eligible for sharing, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/share-custom-framework-concepts-and-terminology.html#eligibility">Framework sharing eligibility</a> in the <i>Audit Manager User
        *                Guide</i>.</p>
        *          </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, StartAssessmentFrameworkShareCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, StartAssessmentFrameworkShareCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new StartAssessmentFrameworkShareCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartAssessmentFrameworkShareCommandInput} for command's `input` shape.
        * @see {@link StartAssessmentFrameworkShareCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class StartAssessmentFrameworkShareCommand extends $Command<StartAssessmentFrameworkShareCommandInput, StartAssessmentFrameworkShareCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: StartAssessmentFrameworkShareCommandInput;
            constructor(input: StartAssessmentFrameworkShareCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartAssessmentFrameworkShareCommandInput, StartAssessmentFrameworkShareCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p> Tags the specified resource in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, TagResourceCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, TagResourceCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p> Removes a tag from a resource in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, UntagResourceCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, UntagResourceCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { UpdateAssessmentRequest, UpdateAssessmentResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface UpdateAssessmentCommandInput extends UpdateAssessmentRequest {
    }
    export interface UpdateAssessmentCommandOutput extends UpdateAssessmentResponse, __MetadataBearer {
    }
    /**
        * <p> Edits an Audit Manager assessment. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, UpdateAssessmentCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, UpdateAssessmentCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new UpdateAssessmentCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAssessmentCommandInput} for command's `input` shape.
        * @see {@link UpdateAssessmentCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class UpdateAssessmentCommand extends $Command<UpdateAssessmentCommandInput, UpdateAssessmentCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: UpdateAssessmentCommandInput;
            constructor(input: UpdateAssessmentCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAssessmentCommandInput, UpdateAssessmentCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentControlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { UpdateAssessmentControlRequest, UpdateAssessmentControlResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface UpdateAssessmentControlCommandInput extends UpdateAssessmentControlRequest {
    }
    export interface UpdateAssessmentControlCommandOutput extends UpdateAssessmentControlResponse, __MetadataBearer {
    }
    /**
        * <p> Updates a control within an assessment in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, UpdateAssessmentControlCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, UpdateAssessmentControlCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new UpdateAssessmentControlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAssessmentControlCommandInput} for command's `input` shape.
        * @see {@link UpdateAssessmentControlCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class UpdateAssessmentControlCommand extends $Command<UpdateAssessmentControlCommandInput, UpdateAssessmentControlCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: UpdateAssessmentControlCommandInput;
            constructor(input: UpdateAssessmentControlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAssessmentControlCommandInput, UpdateAssessmentControlCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentControlSetStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { UpdateAssessmentControlSetStatusRequest, UpdateAssessmentControlSetStatusResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface UpdateAssessmentControlSetStatusCommandInput extends UpdateAssessmentControlSetStatusRequest {
    }
    export interface UpdateAssessmentControlSetStatusCommandOutput extends UpdateAssessmentControlSetStatusResponse, __MetadataBearer {
    }
    /**
        * <p> Updates the status of a control set in an Audit Manager assessment. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, UpdateAssessmentControlSetStatusCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, UpdateAssessmentControlSetStatusCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new UpdateAssessmentControlSetStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAssessmentControlSetStatusCommandInput} for command's `input` shape.
        * @see {@link UpdateAssessmentControlSetStatusCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class UpdateAssessmentControlSetStatusCommand extends $Command<UpdateAssessmentControlSetStatusCommandInput, UpdateAssessmentControlSetStatusCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: UpdateAssessmentControlSetStatusCommandInput;
            constructor(input: UpdateAssessmentControlSetStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAssessmentControlSetStatusCommandInput, UpdateAssessmentControlSetStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentFrameworkCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { UpdateAssessmentFrameworkRequest, UpdateAssessmentFrameworkResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface UpdateAssessmentFrameworkCommandInput extends UpdateAssessmentFrameworkRequest {
    }
    export interface UpdateAssessmentFrameworkCommandOutput extends UpdateAssessmentFrameworkResponse, __MetadataBearer {
    }
    /**
        * <p> Updates a custom framework in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, UpdateAssessmentFrameworkCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, UpdateAssessmentFrameworkCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new UpdateAssessmentFrameworkCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAssessmentFrameworkCommandInput} for command's `input` shape.
        * @see {@link UpdateAssessmentFrameworkCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class UpdateAssessmentFrameworkCommand extends $Command<UpdateAssessmentFrameworkCommandInput, UpdateAssessmentFrameworkCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: UpdateAssessmentFrameworkCommandInput;
            constructor(input: UpdateAssessmentFrameworkCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAssessmentFrameworkCommandInput, UpdateAssessmentFrameworkCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentFrameworkShareCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { UpdateAssessmentFrameworkShareRequest, UpdateAssessmentFrameworkShareResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface UpdateAssessmentFrameworkShareCommandInput extends UpdateAssessmentFrameworkShareRequest {
    }
    export interface UpdateAssessmentFrameworkShareCommandOutput extends UpdateAssessmentFrameworkShareResponse, __MetadataBearer {
    }
    /**
        * <p> Updates a share request for a custom framework in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, UpdateAssessmentFrameworkShareCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, UpdateAssessmentFrameworkShareCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new UpdateAssessmentFrameworkShareCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAssessmentFrameworkShareCommandInput} for command's `input` shape.
        * @see {@link UpdateAssessmentFrameworkShareCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class UpdateAssessmentFrameworkShareCommand extends $Command<UpdateAssessmentFrameworkShareCommandInput, UpdateAssessmentFrameworkShareCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: UpdateAssessmentFrameworkShareCommandInput;
            constructor(input: UpdateAssessmentFrameworkShareCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAssessmentFrameworkShareCommandInput, UpdateAssessmentFrameworkShareCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateAssessmentStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { UpdateAssessmentStatusRequest, UpdateAssessmentStatusResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface UpdateAssessmentStatusCommandInput extends UpdateAssessmentStatusRequest {
    }
    export interface UpdateAssessmentStatusCommandOutput extends UpdateAssessmentStatusResponse, __MetadataBearer {
    }
    /**
        * <p> Updates the status of an assessment in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, UpdateAssessmentStatusCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, UpdateAssessmentStatusCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new UpdateAssessmentStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAssessmentStatusCommandInput} for command's `input` shape.
        * @see {@link UpdateAssessmentStatusCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class UpdateAssessmentStatusCommand extends $Command<UpdateAssessmentStatusCommandInput, UpdateAssessmentStatusCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: UpdateAssessmentStatusCommandInput;
            constructor(input: UpdateAssessmentStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAssessmentStatusCommandInput, UpdateAssessmentStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateControlCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { UpdateControlRequest, UpdateControlResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface UpdateControlCommandInput extends UpdateControlRequest {
    }
    export interface UpdateControlCommandOutput extends UpdateControlResponse, __MetadataBearer {
    }
    /**
        * <p> Updates a custom control in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, UpdateControlCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, UpdateControlCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new UpdateControlCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateControlCommandInput} for command's `input` shape.
        * @see {@link UpdateControlCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class UpdateControlCommand extends $Command<UpdateControlCommandInput, UpdateControlCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: UpdateControlCommandInput;
            constructor(input: UpdateControlCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateControlCommandInput, UpdateControlCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/UpdateSettingsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { UpdateSettingsRequest, UpdateSettingsResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface UpdateSettingsCommandInput extends UpdateSettingsRequest {
    }
    export interface UpdateSettingsCommandOutput extends UpdateSettingsResponse, __MetadataBearer {
    }
    /**
        * <p> Updates Audit Manager settings for the current user account. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, UpdateSettingsCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, UpdateSettingsCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new UpdateSettingsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSettingsCommandInput} for command's `input` shape.
        * @see {@link UpdateSettingsCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class UpdateSettingsCommand extends $Command<UpdateSettingsCommandInput, UpdateSettingsCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: UpdateSettingsCommandInput;
            constructor(input: UpdateSettingsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSettingsCommandInput, UpdateSettingsCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/commands/ValidateAssessmentReportIntegrityCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AuditManagerClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/AuditManagerClient";
    import { ValidateAssessmentReportIntegrityRequest, ValidateAssessmentReportIntegrityResponse } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0";
    export interface ValidateAssessmentReportIntegrityCommandInput extends ValidateAssessmentReportIntegrityRequest {
    }
    export interface ValidateAssessmentReportIntegrityCommandOutput extends ValidateAssessmentReportIntegrityResponse, __MetadataBearer {
    }
    /**
        * <p> Validates the integrity of an assessment report in Audit Manager. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { AuditManagerClient, ValidateAssessmentReportIntegrityCommand } from "@aws-sdk/client-auditmanager"; // ES Modules import
        * // const { AuditManagerClient, ValidateAssessmentReportIntegrityCommand } = require("@aws-sdk/client-auditmanager"); // CommonJS import
        * const client = new AuditManagerClient(config);
        * const command = new ValidateAssessmentReportIntegrityCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ValidateAssessmentReportIntegrityCommandInput} for command's `input` shape.
        * @see {@link ValidateAssessmentReportIntegrityCommandOutput} for command's `response` shape.
        * @see {@link AuditManagerClientResolvedConfig | config} for AuditManagerClient's `config` shape.
        *
        */
    export class ValidateAssessmentReportIntegrityCommand extends $Command<ValidateAssessmentReportIntegrityCommandInput, ValidateAssessmentReportIntegrityCommandOutput, AuditManagerClientResolvedConfig> {
            readonly input: ValidateAssessmentReportIntegrityCommandInput;
            constructor(input: ValidateAssessmentReportIntegrityCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: AuditManagerClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ValidateAssessmentReportIntegrityCommandInput, ValidateAssessmentReportIntegrityCommandOutput>;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { AuditManagerServiceException as __BaseException } from "@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/AuditManagerServiceException";
    /**
        * <p> Your account isn't registered with Audit Manager. Check the delegated
        *          administrator setup on the Audit Manager settings page, and try again. </p>
        */
    export class AccessDeniedException extends __BaseException {
            readonly name: "AccessDeniedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<AccessDeniedException, __BaseException>);
    }
    export enum AccountStatus {
            ACTIVE = "ACTIVE",
            INACTIVE = "INACTIVE",
            PENDING_ACTIVATION = "PENDING_ACTIVATION"
    }
    export enum ActionEnum {
            ACTIVE = "ACTIVE",
            CREATE = "CREATE",
            DELETE = "DELETE",
            IMPORT_EVIDENCE = "IMPORT_EVIDENCE",
            INACTIVE = "INACTIVE",
            REVIEWED = "REVIEWED",
            UNDER_REVIEW = "UNDER_REVIEW",
            UPDATE_METADATA = "UPDATE_METADATA"
    }
    /**
        * <p> The wrapper of Amazon Web Services account details, such as account ID or email address.
        *       </p>
        */
    export interface AWSAccount {
            /**
                * <p> The identifier for the Amazon Web Services account. </p>
                */
            id?: string;
            /**
                * <p> The email address that's associated with the Amazon Web Services account. </p>
                */
            emailAddress?: string;
            /**
                * <p> The name of the Amazon Web Services account. </p>
                */
            name?: string;
    }
    export namespace AWSAccount {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AWSAccount) => any;
    }
    /**
        * <p> A comment that's posted by a user on a control. This includes the author's name, the
        *          comment text, and a timestamp. </p>
        */
    export interface ControlComment {
            /**
                * <p> The name of the user who authored the comment. </p>
                */
            authorName?: string;
            /**
                * <p> The body text of a control comment. </p>
                */
            commentBody?: string;
            /**
                * <p> The time when the comment was posted. </p>
                */
            postedDate?: Date;
    }
    export namespace ControlComment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ControlComment) => any;
    }
    export enum ControlResponse {
            AUTOMATE = "AUTOMATE",
            DEFER = "DEFER",
            IGNORE = "IGNORE",
            MANUAL = "MANUAL"
    }
    export enum ControlStatus {
            INACTIVE = "INACTIVE",
            REVIEWED = "REVIEWED",
            UNDER_REVIEW = "UNDER_REVIEW"
    }
    /**
        * <p> The control entity that represents a standard control or a custom control in an Audit Manager assessment. </p>
        */
    export interface AssessmentControl {
            /**
                * <p> The identifier for the control. </p>
                */
            id?: string;
            /**
                * <p> The name of the control. </p>
                */
            name?: string;
            /**
                * <p> The description of the control. </p>
                */
            description?: string;
            /**
                * <p> The status of the control. </p>
                */
            status?: ControlStatus | string;
            /**
                * <p> The response of the control. </p>
                */
            response?: ControlResponse | string;
            /**
                * <p> The list of comments that's attached to the control. </p>
                */
            comments?: ControlComment[];
            /**
                * <p> The list of data sources for the evidence. </p>
                */
            evidenceSources?: string[];
            /**
                * <p> The amount of evidence that's generated for the control. </p>
                */
            evidenceCount?: number;
            /**
                * <p> The amount of evidence in the assessment report. </p>
                */
            assessmentReportEvidenceCount?: number;
    }
    export namespace AssessmentControl {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssessmentControl) => any;
    }
    export enum RoleType {
            PROCESS_OWNER = "PROCESS_OWNER",
            RESOURCE_OWNER = "RESOURCE_OWNER"
    }
    export enum DelegationStatus {
            COMPLETE = "COMPLETE",
            IN_PROGRESS = "IN_PROGRESS",
            UNDER_REVIEW = "UNDER_REVIEW"
    }
    /**
        * <p> The assignment of a control set to a delegate for review. </p>
        */
    export interface Delegation {
            /**
                * <p> The unique identifier for the delegation. </p>
                */
            id?: string;
            /**
                * <p> The name of the assessment that's associated with the delegation. </p>
                */
            assessmentName?: string;
            /**
                * <p> The identifier for the assessment that's associated with the delegation. </p>
                */
            assessmentId?: string;
            /**
                * <p> The status of the delegation. </p>
                */
            status?: DelegationStatus | string;
            /**
                * <p> The Amazon Resource Name (ARN) of the IAM role. </p>
                */
            roleArn?: string;
            /**
                * <p> The type of customer persona. </p>
                *          <note>
                *             <p>In <code>CreateAssessment</code>, <code>roleType</code> can only be
                *                <code>PROCESS_OWNER</code>. </p>
                *             <p>In <code>UpdateSettings</code>, <code>roleType</code> can only be
                *                <code>PROCESS_OWNER</code>.</p>
                *             <p>In <code>BatchCreateDelegationByAssessment</code>, <code>roleType</code> can only be
                *                <code>RESOURCE_OWNER</code>.</p>
                *          </note>
                */
            roleType?: RoleType | string;
            /**
                * <p> Specifies when the delegation was created. </p>
                */
            creationTime?: Date;
            /**
                * <p> Specifies when the delegation was last updated. </p>
                */
            lastUpdated?: Date;
            /**
                * <p> The identifier for the control set that's associated with the delegation. </p>
                */
            controlSetId?: string;
            /**
                * <p> The comment that's related to the delegation. </p>
                */
            comment?: string;
            /**
                * <p> The IAM user or role that created the delegation. </p>
                */
            createdBy?: string;
    }
    export namespace Delegation {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Delegation) => any;
    }
    /**
        * <p> The wrapper that contains the Audit Manager role information of the current
        *          user. This includes the role type and IAM Amazon Resource Name (ARN).
        *       </p>
        */
    export interface Role {
            /**
                * <p> The type of customer persona. </p>
                *          <note>
                *             <p>In <code>CreateAssessment</code>, <code>roleType</code> can only be
                *                <code>PROCESS_OWNER</code>. </p>
                *             <p>In <code>UpdateSettings</code>, <code>roleType</code> can only be
                *                <code>PROCESS_OWNER</code>.</p>
                *             <p>In <code>BatchCreateDelegationByAssessment</code>, <code>roleType</code> can only be
                *                <code>RESOURCE_OWNER</code>.</p>
                *          </note>
                */
            roleType: RoleType | string | undefined;
            /**
                * <p> The Amazon Resource Name (ARN) of the IAM role. </p>
                */
            roleArn: string | undefined;
    }
    export namespace Role {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Role) => any;
    }
    export enum ControlSetStatus {
            ACTIVE = "ACTIVE",
            REVIEWED = "REVIEWED",
            UNDER_REVIEW = "UNDER_REVIEW"
    }
    /**
        * <p> Represents a set of controls in an Audit Manager assessment. </p>
        */
    export interface AssessmentControlSet {
            /**
                * <p> The identifier of the control set in the assessment. This is the control set name in a
                *          plain string format. </p>
                */
            id?: string;
            /**
                * <p> The description for the control set. </p>
                */
            description?: string;
            /**
                * <p> Specifies the current status of the control set. </p>
                */
            status?: ControlSetStatus | string;
            /**
                * <p> The roles that are associated with the control set. </p>
                */
            roles?: Role[];
            /**
                * <p> The list of controls that's contained with the control set. </p>
                */
            controls?: AssessmentControl[];
            /**
                * <p> The delegations that are associated with the control set. </p>
                */
            delegations?: Delegation[];
            /**
                * <p> The total number of evidence objects that are retrieved automatically for the control
                *          set. </p>
                */
            systemEvidenceCount?: number;
            /**
                * <p> The total number of evidence objects that are uploaded manually to the control set.
                *       </p>
                */
            manualEvidenceCount?: number;
    }
    export namespace AssessmentControlSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssessmentControlSet) => any;
    }
    /**
        * <p> The metadata of a framework, such as the name, ID, or description. </p>
        */
    export interface FrameworkMetadata {
            /**
                * <p> The name of the framework. </p>
                */
            name?: string;
            /**
                * <p> The description of the framework. </p>
                */
            description?: string;
            /**
                * <p> The logo that's associated with the framework. </p>
                */
            logo?: string;
            /**
                * <p> The compliance standard that's associated with the framework. For example, this could
                *          be PCI DSS or HIPAA. </p>
                */
            complianceType?: string;
    }
    export namespace FrameworkMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FrameworkMetadata) => any;
    }
    /**
        * <p> The file used to structure and automate Audit Manager assessments for a given
        *          compliance standard. </p>
        */
    export interface AssessmentFramework {
            /**
                * <p> The unique identifier for the framework. </p>
                */
            id?: string;
            /**
                * <p> The Amazon Resource Name (ARN) of the framework. </p>
                */
            arn?: string;
            /**
                * <p> The metadata of a framework, such as the name, ID, or description. </p>
                */
            metadata?: FrameworkMetadata;
            /**
                * <p> The control sets that are associated with the framework. </p>
                */
            controlSets?: AssessmentControlSet[];
    }
    export namespace AssessmentFramework {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssessmentFramework) => any;
    }
    export enum AssessmentReportDestinationType {
            S3 = "S3"
    }
    /**
        * <p> The location where Audit Manager saves assessment reports for the given
        *          assessment. </p>
        */
    export interface AssessmentReportsDestination {
            /**
                * <p> The destination type, such as Amazon S3. </p>
                */
            destinationType?: AssessmentReportDestinationType | string;
            /**
                * <p> The destination of the assessment report. </p>
                */
            destination?: string;
    }
    export namespace AssessmentReportsDestination {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssessmentReportsDestination) => any;
    }
    /**
        * <p> An Amazon Web Service such as Amazon S3 or CloudTrail.
        *       </p>
        */
    export interface AWSService {
            /**
                * <p> The name of the Amazon Web Service. </p>
                */
            serviceName?: string;
    }
    export namespace AWSService {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AWSService) => any;
    }
    /**
        * <p> The wrapper that contains the Amazon Web Services accounts and services that are in
        *          scope for the assessment. </p>
        */
    export interface Scope {
            /**
                * <p> The Amazon Web Services accounts that are included in the scope of the assessment.
                *       </p>
                */
            awsAccounts?: AWSAccount[];
            /**
                * <p> The Amazon Web Services services that are included in the scope of the assessment.
                *       </p>
                */
            awsServices?: AWSService[];
    }
    export namespace Scope {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Scope) => any;
    }
    export enum AssessmentStatus {
            ACTIVE = "ACTIVE",
            INACTIVE = "INACTIVE"
    }
    /**
        * <p> The metadata that's associated with the specified assessment. </p>
        */
    export interface AssessmentMetadata {
            /**
                * <p> The name of the assessment. </p>
                */
            name?: string;
            /**
                * <p> The unique identifier for the assessment. </p>
                */
            id?: string;
            /**
                * <p> The description of the assessment. </p>
                */
            description?: string;
            /**
                * <p> The name of the compliance standard that's related to the assessment, such as PCI-DSS.
                *       </p>
                */
            complianceType?: string;
            /**
                * <p> The overall status of the assessment. </p>
                */
            status?: AssessmentStatus | string;
            /**
                * <p> The destination that evidence reports are stored in for the assessment. </p>
                */
            assessmentReportsDestination?: AssessmentReportsDestination;
            /**
                * <p> The wrapper of Amazon Web Services accounts and services that are in scope for the
                *          assessment. </p>
                */
            scope?: Scope;
            /**
                * <p> The roles that are associated with the assessment. </p>
                */
            roles?: Role[];
            /**
                * <p> The delegations that are associated with the assessment. </p>
                */
            delegations?: Delegation[];
            /**
                * <p> Specifies when the assessment was created. </p>
                */
            creationTime?: Date;
            /**
                * <p> The time of the most recent update. </p>
                */
            lastUpdated?: Date;
    }
    export namespace AssessmentMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssessmentMetadata) => any;
    }
    /**
        * <p> An entity that defines the scope of audit evidence collected by Audit Manager.
        *          An Audit Manager assessment is an implementation of an Audit Manager
        *          framework. </p>
        */
    export interface Assessment {
            /**
                * <p> The Amazon Resource Name (ARN) of the assessment. </p>
                */
            arn?: string;
            /**
                * <p> The Amazon Web Services account that's associated with the assessment. </p>
                */
            awsAccount?: AWSAccount;
            /**
                * <p> The metadata for the assessment. </p>
                */
            metadata?: AssessmentMetadata;
            /**
                * <p> The framework that the assessment was created from. </p>
                */
            framework?: AssessmentFramework;
            /**
                * <p> The tags that are associated with the assessment. </p>
                */
            tags?: Record<string, string>;
    }
    export namespace Assessment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Assessment) => any;
    }
    /**
        * <p> The folder where Audit Manager stores evidence for an assessment. </p>
        */
    export interface AssessmentEvidenceFolder {
            /**
                * <p> The name of the evidence folder. </p>
                */
            name?: string;
            /**
                * <p> The date when the first evidence was added to the evidence folder. </p>
                */
            date?: Date;
            /**
                * <p> The identifier for the assessment. </p>
                */
            assessmentId?: string;
            /**
                * <p> The identifier for the control set. </p>
                */
            controlSetId?: string;
            /**
                * <p> The unique identifier for the control. </p>
                */
            controlId?: string;
            /**
                * <p> The identifier for the folder that the evidence is stored in. </p>
                */
            id?: string;
            /**
                * <p> The Amazon Web Service that the evidence was collected from. </p>
                */
            dataSource?: string;
            /**
                * <p> The name of the user who created the evidence folder. </p>
                */
            author?: string;
            /**
                * <p> The total amount of evidence in the evidence folder. </p>
                */
            totalEvidence?: number;
            /**
                * <p> The total count of evidence that's included in the assessment report. </p>
                */
            assessmentReportSelectionCount?: number;
            /**
                * <p> The name of the control. </p>
                */
            controlName?: string;
            /**
                * <p> The amount of evidence that's included in the evidence folder. </p>
                */
            evidenceResourcesIncludedCount?: number;
            /**
                * <p> The number of evidence that falls under the configuration data category. This
                *             evidence is collected from configuration snapshots of other Amazon Web Services such as Amazon EC2, Amazon S3, or IAM. </p>
                */
            evidenceByTypeConfigurationDataCount?: number;
            /**
                * <p> The number of evidence that falls under the manual category. This evidence is imported
                *          manually. </p>
                */
            evidenceByTypeManualCount?: number;
            /**
                * <p> The number of evidence that falls under the compliance check category. This evidence is
                *          collected from Config or Security Hub. </p>
                */
            evidenceByTypeComplianceCheckCount?: number;
            /**
                * <p> The total number of issues that were reported directly from Security Hub,
                *             Config, or both. </p>
                */
            evidenceByTypeComplianceCheckIssuesCount?: number;
            /**
                * <p> The number of evidence that falls under the user activity category. This evidence is
                *          collected from CloudTrail logs. </p>
                */
            evidenceByTypeUserActivityCount?: number;
            /**
                * <p> The total number of Amazon Web Services resources that were assessed to generate the
                *          evidence. </p>
                */
            evidenceAwsServiceSourceCount?: number;
    }
    export namespace AssessmentEvidenceFolder {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssessmentEvidenceFolder) => any;
    }
    export enum FrameworkType {
            CUSTOM = "Custom",
            STANDARD = "Standard"
    }
    /**
        * <p> The metadata that's associated with a standard framework or a custom framework. </p>
        */
    export interface AssessmentFrameworkMetadata {
            /**
                * <p> The Amazon Resource Name (ARN) of the framework. </p>
                */
            arn?: string;
            /**
                * <p> The unique identifier for the framework. </p>
                */
            id?: string;
            /**
                * <p> The framework type, such as a standard framework or a custom framework. </p>
                */
            type?: FrameworkType | string;
            /**
                * <p> The name of the framework. </p>
                */
            name?: string;
            /**
                * <p> The description of the framework. </p>
                */
            description?: string;
            /**
                * <p> The logo that's associated with the framework. </p>
                */
            logo?: string;
            /**
                * <p> The compliance type that the new custom framework supports, such as CIS or HIPAA.
                *       </p>
                */
            complianceType?: string;
            /**
                * <p> The number of controls that are associated with the framework. </p>
                */
            controlsCount?: number;
            /**
                * <p> The number of control sets that are associated with the framework. </p>
                */
            controlSetsCount?: number;
            /**
                * <p> Specifies when the framework was created. </p>
                */
            createdAt?: Date;
            /**
                * <p> Specifies when the framework was most recently updated. </p>
                */
            lastUpdatedAt?: Date;
    }
    export namespace AssessmentFrameworkMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssessmentFrameworkMetadata) => any;
    }
    export enum ShareRequestStatus {
            ACTIVE = "ACTIVE",
            DECLINED = "DECLINED",
            EXPIRED = "EXPIRED",
            EXPIRING = "EXPIRING",
            FAILED = "FAILED",
            REPLICATING = "REPLICATING",
            REVOKED = "REVOKED",
            SHARED = "SHARED"
    }
    /**
        * <p> Represents a share request for a custom framework in Audit Manager. </p>
        */
    export interface AssessmentFrameworkShareRequest {
            /**
                * <p> The unique identifier for the share request. </p>
                */
            id?: string;
            /**
                * <p>The unique identifier for the shared custom framework. </p>
                */
            frameworkId?: string;
            /**
                * <p> The name of the custom framework that the share request is for. </p>
                */
            frameworkName?: string;
            /**
                * <p>The description of the shared custom framework.</p>
                */
            frameworkDescription?: string;
            /**
                * <p> The status of the share request. </p>
                */
            status?: ShareRequestStatus | string;
            /**
                * <p> The Amazon Web Services account of the sender. </p>
                */
            sourceAccount?: string;
            /**
                * <p> The Amazon Web Services account of the recipient. </p>
                */
            destinationAccount?: string;
            /**
                * <p> The Amazon Web Services Region of the recipient. </p>
                */
            destinationRegion?: string;
            /**
                * <p> The time when the share request expires. </p>
                */
            expirationTime?: Date;
            /**
                * <p> The time when the share request was created. </p>
                */
            creationTime?: Date;
            /**
                * <p> Specifies when the share request was last updated. </p>
                */
            lastUpdated?: Date;
            /**
                * <p> An optional comment from the sender about the share request. </p>
                */
            comment?: string;
            /**
                * <p>The number of standard controls that are part of the shared custom framework. </p>
                */
            standardControlsCount?: number;
            /**
                * <p>The number of custom controls that are part of the shared custom framework.</p>
                */
            customControlsCount?: number;
            /**
                * <p>The compliance type that the shared custom framework supports, such as CIS or HIPAA.</p>
                */
            complianceType?: string;
    }
    export namespace AssessmentFrameworkShareRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssessmentFrameworkShareRequest) => any;
    }
    /**
        * <p> A metadata object that's associated with an assessment in Audit Manager.
        *       </p>
        */
    export interface AssessmentMetadataItem {
            /**
                * <p> The name of the assessment. </p>
                */
            name?: string;
            /**
                * <p> The unique identifier for the assessment. </p>
                */
            id?: string;
            /**
                * <p> The name of the compliance standard that's related to the assessment, such as PCI-DSS.
                *       </p>
                */
            complianceType?: string;
            /**
                * <p> The current status of the assessment. </p>
                */
            status?: AssessmentStatus | string;
            /**
                * <p> The roles that are associated with the assessment. </p>
                */
            roles?: Role[];
            /**
                * <p> The delegations that are associated with the assessment. </p>
                */
            delegations?: Delegation[];
            /**
                * <p> Specifies when the assessment was created. </p>
                */
            creationTime?: Date;
            /**
                * <p> The time of the most recent update. </p>
                */
            lastUpdated?: Date;
    }
    export namespace AssessmentMetadataItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssessmentMetadataItem) => any;
    }
    export enum AssessmentReportStatus {
            COMPLETE = "COMPLETE",
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS"
    }
    /**
        * <p> A finalized document that's generated from an Audit Manager assessment. These
        *          reports summarize the relevant evidence that was collected for your audit, and link to the
        *          relevant evidence folders. These evidence folders are named and organized according to the
        *          controls that are specified in your assessment. </p>
        */
    export interface AssessmentReport {
            /**
                * <p> The unique identifier for the assessment report. </p>
                */
            id?: string;
            /**
                * <p> The name that's given to the assessment report. </p>
                */
            name?: string;
            /**
                * <p> The description of the specified assessment report. </p>
                */
            description?: string;
            /**
                * <p> The identifier for the specified Amazon Web Services account. </p>
                */
            awsAccountId?: string;
            /**
                * <p> The identifier for the specified assessment. </p>
                */
            assessmentId?: string;
            /**
                * <p> The name of the associated assessment. </p>
                */
            assessmentName?: string;
            /**
                * <p> The name of the user who created the assessment report. </p>
                */
            author?: string;
            /**
                * <p> The current status of the specified assessment report. </p>
                */
            status?: AssessmentReportStatus | string;
            /**
                * <p> Specifies when the assessment report was created. </p>
                */
            creationTime?: Date;
    }
    export namespace AssessmentReport {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssessmentReport) => any;
    }
    /**
        * <p> An error entity for the <code>AssessmentReportEvidence</code> API. This is used to
        *          provide more meaningful errors than a simple string message. </p>
        */
    export interface AssessmentReportEvidenceError {
            /**
                * <p> The identifier for the evidence. </p>
                */
            evidenceId?: string;
            /**
                * <p> The error code that the <code>AssessmentReportEvidence</code> API returned. </p>
                */
            errorCode?: string;
            /**
                * <p> The error message that the <code>AssessmentReportEvidence</code> API returned. </p>
                */
            errorMessage?: string;
    }
    export namespace AssessmentReportEvidenceError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssessmentReportEvidenceError) => any;
    }
    /**
        * <p> The metadata objects that are associated with the specified assessment report. </p>
        */
    export interface AssessmentReportMetadata {
            /**
                * <p> The unique identifier for the assessment report. </p>
                */
            id?: string;
            /**
                * <p> The name of the assessment report. </p>
                */
            name?: string;
            /**
                * <p> The description of the assessment report. </p>
                */
            description?: string;
            /**
                * <p> The unique identifier for the associated assessment. </p>
                */
            assessmentId?: string;
            /**
                * <p>The name of the associated assessment. </p>
                */
            assessmentName?: string;
            /**
                * <p> The name of the user who created the assessment report. </p>
                */
            author?: string;
            /**
                * <p> The current status of the assessment report. </p>
                */
            status?: AssessmentReportStatus | string;
            /**
                * <p> Specifies when the assessment report was created. </p>
                */
            creationTime?: Date;
    }
    export namespace AssessmentReportMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssessmentReportMetadata) => any;
    }
    export interface AssociateAssessmentReportEvidenceFolderRequest {
            /**
                * <p> The identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The identifier for the folder that the evidence is stored in. </p>
                */
            evidenceFolderId: string | undefined;
    }
    export namespace AssociateAssessmentReportEvidenceFolderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateAssessmentReportEvidenceFolderRequest) => any;
    }
    export interface AssociateAssessmentReportEvidenceFolderResponse {
    }
    export namespace AssociateAssessmentReportEvidenceFolderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateAssessmentReportEvidenceFolderResponse) => any;
    }
    /**
        * <p> An internal service error occurred during the processing of your request. Try again
        *          later. </p>
        */
    export class InternalServerException extends __BaseException {
            readonly name: "InternalServerException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerException, __BaseException>);
    }
    /**
        * <p> The resource that's specified in the request can't be found. </p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            /**
                * <p> The unique identifier for the resource. </p>
                */
            resourceId: string | undefined;
            /**
                * <p> The type of resource that's affected by the error. </p>
                */
            resourceType: string | undefined;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p> Indicates that the request has invalid or missing parameters for the field. </p>
        */
    export interface ValidationExceptionField {
            /**
                * <p> The name of the validation error. </p>
                */
            name: string | undefined;
            /**
                * <p> The body of the error message. </p>
                */
            message: string | undefined;
    }
    export namespace ValidationExceptionField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidationExceptionField) => any;
    }
    export enum ValidationExceptionReason {
            CANNOT_PARSE = "cannotParse",
            FIELD_VALIDATION_FAILED = "fieldValidationFailed",
            OTHER = "other",
            UNKNOWN_OPERATION = "unknownOperation"
    }
    /**
        * <p> The request has invalid or missing parameters. </p>
        */
    export class ValidationException extends __BaseException {
            readonly name: "ValidationException";
            readonly $fault: "client";
            /**
                * <p> The reason the request failed validation. </p>
                */
            reason?: ValidationExceptionReason | string;
            /**
                * <p> The fields that caused the error, if applicable. </p>
                */
            fields?: ValidationExceptionField[];
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationException, __BaseException>);
    }
    export interface BatchAssociateAssessmentReportEvidenceRequest {
            /**
                * <p> The identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The identifier for the folder that the evidence is stored in. </p>
                */
            evidenceFolderId: string | undefined;
            /**
                * <p> The list of evidence identifiers. </p>
                */
            evidenceIds: string[] | undefined;
    }
    export namespace BatchAssociateAssessmentReportEvidenceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAssociateAssessmentReportEvidenceRequest) => any;
    }
    export interface BatchAssociateAssessmentReportEvidenceResponse {
            /**
                * <p> The list of evidence identifiers. </p>
                */
            evidenceIds?: string[];
            /**
                * <p> A list of errors that the <code>BatchAssociateAssessmentReportEvidence</code> API
                *          returned. </p>
                */
            errors?: AssessmentReportEvidenceError[];
    }
    export namespace BatchAssociateAssessmentReportEvidenceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchAssociateAssessmentReportEvidenceResponse) => any;
    }
    /**
        * <p> A collection of attributes that's used to create a delegation for an assessment in
        *          Audit Manager. </p>
        */
    export interface CreateDelegationRequest {
            /**
                * <p> A comment that's related to the delegation request. </p>
                */
            comment?: string;
            /**
                * <p> The unique identifier for the control set. </p>
                */
            controlSetId?: string;
            /**
                * <p> The Amazon Resource Name (ARN) of the IAM role. </p>
                */
            roleArn?: string;
            /**
                * <p> The type of customer persona. </p>
                *          <note>
                *             <p>In <code>CreateAssessment</code>, <code>roleType</code> can only be
                *             <code>PROCESS_OWNER</code>. </p>
                *             <p>In <code>UpdateSettings</code>, <code>roleType</code> can only be
                *             <code>PROCESS_OWNER</code>.</p>
                *             <p>In <code>BatchCreateDelegationByAssessment</code>, <code>roleType</code> can only be
                *             <code>RESOURCE_OWNER</code>.</p>
                *          </note>
                */
            roleType?: RoleType | string;
    }
    export namespace CreateDelegationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateDelegationRequest) => any;
    }
    export interface BatchCreateDelegationByAssessmentRequest {
            /**
                * <p> The API request to batch create delegations in Audit Manager. </p>
                */
            createDelegationRequests: CreateDelegationRequest[] | undefined;
            /**
                * <p> The identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
    }
    export namespace BatchCreateDelegationByAssessmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreateDelegationByAssessmentRequest) => any;
    }
    /**
        * <p> An error entity for the <code>BatchCreateDelegationByAssessment</code> API. This is
        *          used to provide more meaningful errors than a simple string message. </p>
        */
    export interface BatchCreateDelegationByAssessmentError {
            /**
                * <p> The API request to batch create delegations in Audit Manager. </p>
                */
            createDelegationRequest?: CreateDelegationRequest;
            /**
                * <p> The error code that the <code>BatchCreateDelegationByAssessment</code> API returned.
                *       </p>
                */
            errorCode?: string;
            /**
                * <p> The error message that the <code>BatchCreateDelegationByAssessment</code> API returned.
                *       </p>
                */
            errorMessage?: string;
    }
    export namespace BatchCreateDelegationByAssessmentError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreateDelegationByAssessmentError) => any;
    }
    export interface BatchCreateDelegationByAssessmentResponse {
            /**
                * <p> The delegations that are associated with the assessment. </p>
                */
            delegations?: Delegation[];
            /**
                * <p> A list of errors that the <code>BatchCreateDelegationByAssessment</code> API returned.
                *       </p>
                */
            errors?: BatchCreateDelegationByAssessmentError[];
    }
    export namespace BatchCreateDelegationByAssessmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreateDelegationByAssessmentResponse) => any;
    }
    export interface BatchDeleteDelegationByAssessmentRequest {
            /**
                * <p> The identifiers for the delegations. </p>
                */
            delegationIds: string[] | undefined;
            /**
                * <p> The identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
    }
    export namespace BatchDeleteDelegationByAssessmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteDelegationByAssessmentRequest) => any;
    }
    /**
        * <p> An error entity for the <code>BatchDeleteDelegationByAssessment</code> API. This is
        *          used to provide more meaningful errors than a simple string message. </p>
        */
    export interface BatchDeleteDelegationByAssessmentError {
            /**
                * <p> The identifier for the delegation. </p>
                */
            delegationId?: string;
            /**
                * <p> The error code that the <code>BatchDeleteDelegationByAssessment</code> API returned.
                *       </p>
                */
            errorCode?: string;
            /**
                * <p> The error message that the <code>BatchDeleteDelegationByAssessment</code> API returned.
                *       </p>
                */
            errorMessage?: string;
    }
    export namespace BatchDeleteDelegationByAssessmentError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteDelegationByAssessmentError) => any;
    }
    export interface BatchDeleteDelegationByAssessmentResponse {
            /**
                * <p> A list of errors that the <code>BatchDeleteDelegationByAssessment</code> API returned.
                *       </p>
                */
            errors?: BatchDeleteDelegationByAssessmentError[];
    }
    export namespace BatchDeleteDelegationByAssessmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDeleteDelegationByAssessmentResponse) => any;
    }
    export interface BatchDisassociateAssessmentReportEvidenceRequest {
            /**
                * <p> The identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The identifier for the folder that the evidence is stored in. </p>
                */
            evidenceFolderId: string | undefined;
            /**
                * <p> The list of evidence identifiers. </p>
                */
            evidenceIds: string[] | undefined;
    }
    export namespace BatchDisassociateAssessmentReportEvidenceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDisassociateAssessmentReportEvidenceRequest) => any;
    }
    export interface BatchDisassociateAssessmentReportEvidenceResponse {
            /**
                * <p> The identifier for the evidence. </p>
                */
            evidenceIds?: string[];
            /**
                * <p> A list of errors that the <code>BatchDisassociateAssessmentReportEvidence</code> API
                *          returned. </p>
                */
            errors?: AssessmentReportEvidenceError[];
    }
    export namespace BatchDisassociateAssessmentReportEvidenceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchDisassociateAssessmentReportEvidenceResponse) => any;
    }
    /**
        * <p> Evidence that's uploaded to Audit Manager manually. </p>
        */
    export interface ManualEvidence {
            /**
                * <p> The Amazon S3 URL that points to a manual evidence object. </p>
                */
            s3ResourcePath?: string;
    }
    export namespace ManualEvidence {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManualEvidence) => any;
    }
    export interface BatchImportEvidenceToAssessmentControlRequest {
            /**
                * <p> The identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The identifier for the control set. </p>
                */
            controlSetId: string | undefined;
            /**
                * <p> The identifier for the control. </p>
                */
            controlId: string | undefined;
            /**
                * <p> The list of manual evidence objects. </p>
                */
            manualEvidence: ManualEvidence[] | undefined;
    }
    export namespace BatchImportEvidenceToAssessmentControlRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchImportEvidenceToAssessmentControlRequest) => any;
    }
    /**
        * <p> An error entity for the <code>BatchImportEvidenceToAssessmentControl</code> API. This
        *          is used to provide more meaningful errors than a simple string message. </p>
        */
    export interface BatchImportEvidenceToAssessmentControlError {
            /**
                * <p> Manual evidence that can't be collected automatically by Audit Manager. </p>
                */
            manualEvidence?: ManualEvidence;
            /**
                * <p> The error code that the <code>BatchImportEvidenceToAssessmentControl</code> API
                *          returned. </p>
                */
            errorCode?: string;
            /**
                * <p> The error message that the <code>BatchImportEvidenceToAssessmentControl</code> API
                *          returned. </p>
                */
            errorMessage?: string;
    }
    export namespace BatchImportEvidenceToAssessmentControlError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchImportEvidenceToAssessmentControlError) => any;
    }
    export interface BatchImportEvidenceToAssessmentControlResponse {
            /**
                * <p> A list of errors that the <code>BatchImportEvidenceToAssessmentControl</code> API
                *          returned. </p>
                */
            errors?: BatchImportEvidenceToAssessmentControlError[];
    }
    export namespace BatchImportEvidenceToAssessmentControlResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchImportEvidenceToAssessmentControlResponse) => any;
    }
    export interface CreateAssessmentRequest {
            /**
                * <p> The name of the assessment to be created. </p>
                */
            name: string | undefined;
            /**
                * <p> The optional description of the assessment to be created. </p>
                */
            description?: string;
            /**
                * <p> The assessment report storage destination for the assessment that's being created. </p>
                */
            assessmentReportsDestination: AssessmentReportsDestination | undefined;
            /**
                * <p> The wrapper that contains the Amazon Web Services accounts and services that are in
                *          scope for the assessment. </p>
                */
            scope: Scope | undefined;
            /**
                * <p> The list of roles for the assessment. </p>
                */
            roles: Role[] | undefined;
            /**
                * <p> The identifier for the framework that the assessment will be created from. </p>
                */
            frameworkId: string | undefined;
            /**
                * <p> The tags that are associated with the assessment. </p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateAssessmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssessmentRequest) => any;
    }
    export interface CreateAssessmentResponse {
            /**
                * <p> An entity that defines the scope of audit evidence collected by Audit Manager.
                *          An Audit Manager assessment is an implementation of an Audit Manager
                *          framework. </p>
                */
            assessment?: Assessment;
    }
    export namespace CreateAssessmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssessmentResponse) => any;
    }
    /**
        * <p> The control entity attributes that uniquely identify an existing control to be added to
        *          a framework in Audit Manager. </p>
        */
    export interface CreateAssessmentFrameworkControl {
            /**
                * <p> The unique identifier of the control. </p>
                */
            id: string | undefined;
    }
    export namespace CreateAssessmentFrameworkControl {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssessmentFrameworkControl) => any;
    }
    /**
        * <p> A <code>controlSet</code> entity that represents a collection of controls in Audit Manager. This doesn't contain the control set ID. </p>
        */
    export interface CreateAssessmentFrameworkControlSet {
            /**
                * <p> The name of the control set. </p>
                */
            name: string | undefined;
            /**
                * <p> The list of controls within the control set. This doesn't contain the control set ID.
                *       </p>
                */
            controls?: CreateAssessmentFrameworkControl[];
    }
    export namespace CreateAssessmentFrameworkControlSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssessmentFrameworkControlSet) => any;
    }
    export interface CreateAssessmentFrameworkRequest {
            /**
                * <p> The name of the new custom framework. </p>
                */
            name: string | undefined;
            /**
                * <p> An optional description for the new custom framework. </p>
                */
            description?: string;
            /**
                * <p> The compliance type that the new custom framework supports, such as CIS or HIPAA.
                *       </p>
                */
            complianceType?: string;
            /**
                * <p> The control sets that are associated with the framework. </p>
                */
            controlSets: CreateAssessmentFrameworkControlSet[] | undefined;
            /**
                * <p> The tags that are associated with the framework. </p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateAssessmentFrameworkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssessmentFrameworkRequest) => any;
    }
    export enum SourceFrequency {
            DAILY = "DAILY",
            MONTHLY = "MONTHLY",
            WEEKLY = "WEEKLY"
    }
    export enum KeywordInputType {
            SELECT_FROM_LIST = "SELECT_FROM_LIST"
    }
    /**
        * <p> The keyword to search for in CloudTrail logs, Config rules,
        *          Security Hub checks, and Amazon Web Services API names. </p>
        */
    export interface SourceKeyword {
            /**
                * <p> The input method for the keyword. </p>
                */
            keywordInputType?: KeywordInputType | string;
            /**
                * <p> The value of the keyword that's used when mapping a control data source. For example,
                *          this can be a CloudTrail event name, a rule name for Config, a
                *             Security Hub control, or the name of an Amazon Web Services API call. </p>
                *          <p>If you’re mapping a data source to a rule in Config, the
                *             <code>keywordValue</code> that you specify depends on the type of rule:</p>
                *          <ul>
                *             <li>
                *                <p>For <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html">managed rules</a>, you can use the rule identifier as the
                *                   <code>keywordValue</code>. You can find the rule identifier from the <a href="https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html">list of Config managed rules</a>.</p>
                *                <ul>
                *                   <li>
                *                      <p>Managed rule name: <a href="https://docs.aws.amazon.com/config/latest/developerguide/s3-bucket-acl-prohibited.html">s3-bucket-acl-prohibited</a>
                *                      </p>
                *                      <p>
                *                         <code>keywordValue</code>: <code>S3_BUCKET_ACL_PROHIBITED</code>
                *                      </p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>For <a href="https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html">custom rules</a>, you form the <code>keywordValue</code>
                *                by adding the <code>Custom_</code> prefix to the rule name. This prefix distinguishes
                *                the rule from a managed rule.</p>
                *                <ul>
                *                   <li>
                *                      <p>Custom rule name: my-custom-config-rule</p>
                *                      <p>
                *                         <code>keywordValue</code>: <code>Custom_my-custom-config-rule</code>
                *                      </p>
                *                   </li>
                *                </ul>
                *             </li>
                *             <li>
                *                <p>For <a href="https://docs.aws.amazon.com/config/latest/developerguide/service-linked-awsconfig-rules.html">service-linked rules</a>, you form the
                *                   <code>keywordValue</code> by adding the <code>Custom_</code> prefix to the rule
                *                name. In addition, you remove the suffix ID that appears at the end of the rule
                *                name.</p>
                *                <ul>
                *                   <li>
                *                      <p>Service-linked rule name:
                *                      CustomRuleForAccount-conformance-pack-szsm1uv0w</p>
                *                      <p>
                *                         <code>keywordValue</code>:
                *                         <code>Custom_CustomRuleForAccount-conformance-pack</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>Service-linked rule name: securityhub-api-gw-cache-encrypted-101104e1</p>
                *                      <p>
                *                         <code>keywordValue</code>:
                *                         <code>Custom_securityhub-api-gw-cache-encrypted</code>
                *                      </p>
                *                   </li>
                *                   <li>
                *                      <p>Service-linked rule name:
                *                      OrgConfigRule-s3-bucket-versioning-enabled-dbgzf8ba</p>
                *                      <p>
                *                         <code>keywordValue</code>:
                *                         <code>Custom_OrgConfigRule-s3-bucket-versioning-enabled</code>
                *                      </p>
                *                   </li>
                *                </ul>
                *             </li>
                *          </ul>
                */
            keywordValue?: string;
    }
    export namespace SourceKeyword {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceKeyword) => any;
    }
    export enum SourceSetUpOption {
            PROCEDURAL_CONTROLS_MAPPING = "Procedural_Controls_Mapping",
            SYSTEM_CONTROLS_MAPPING = "System_Controls_Mapping"
    }
    export enum SourceType {
            AWS_API_CALL = "AWS_API_Call",
            AWS_CLOUDTRAIL = "AWS_Cloudtrail",
            AWS_CONFIG = "AWS_Config",
            AWS_SECURITY_HUB = "AWS_Security_Hub",
            MANUAL = "MANUAL"
    }
    /**
        * <p> The data source that determines where Audit Manager collects evidence from for
        *          the control. </p>
        */
    export interface ControlMappingSource {
            /**
                * <p> The unique identifier for the source. </p>
                */
            sourceId?: string;
            /**
                * <p> The name of the source. </p>
                */
            sourceName?: string;
            /**
                * <p> The description of the source. </p>
                */
            sourceDescription?: string;
            /**
                * <p> The setup option for the data source. This option reflects if the evidence collection
                *          is automated or manual. </p>
                */
            sourceSetUpOption?: SourceSetUpOption | string;
            /**
                * <p> Specifies one of the five types of data sources for evidence collection. </p>
                */
            sourceType?: SourceType | string;
            /**
                * <p> The keyword to search for in CloudTrail logs, Config rules,
                *          Security Hub checks, and Amazon Web Services API names. </p>
                */
            sourceKeyword?: SourceKeyword;
            /**
                * <p> The frequency of evidence collection for the control mapping source. </p>
                */
            sourceFrequency?: SourceFrequency | string;
            /**
                * <p> The instructions for troubleshooting the control. </p>
                */
            troubleshootingText?: string;
    }
    export namespace ControlMappingSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ControlMappingSource) => any;
    }
    export enum ControlType {
            CUSTOM = "Custom",
            STANDARD = "Standard"
    }
    /**
        * <p> A control in Audit Manager. </p>
        */
    export interface Control {
            /**
                * <p> The Amazon Resource Name (ARN) of the control. </p>
                */
            arn?: string;
            /**
                * <p> The unique identifier for the control. </p>
                */
            id?: string;
            /**
                * <p> The type of control, such as a custom control or a standard control. </p>
                */
            type?: ControlType | string;
            /**
                * <p> The name of the control. </p>
                */
            name?: string;
            /**
                * <p> The description of the control. </p>
                */
            description?: string;
            /**
                * <p> The steps that you should follow to determine if the control has been satisfied.
                *       </p>
                */
            testingInformation?: string;
            /**
                * <p> The title of the action plan for remediating the control. </p>
                */
            actionPlanTitle?: string;
            /**
                * <p> The recommended actions to carry out if the control isn't fulfilled. </p>
                */
            actionPlanInstructions?: string;
            /**
                * <p> The data source that determines where Audit Manager collects evidence from for
                *          the control. </p>
                */
            controlSources?: string;
            /**
                * <p> The data mapping sources for the control. </p>
                */
            controlMappingSources?: ControlMappingSource[];
            /**
                * <p> Specifies when the control was created. </p>
                */
            createdAt?: Date;
            /**
                * <p> Specifies when the control was most recently updated. </p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p> The IAM user or role that created the control. </p>
                */
            createdBy?: string;
            /**
                * <p> The IAM user or role that most recently updated the control. </p>
                */
            lastUpdatedBy?: string;
            /**
                * <p> The tags associated with the control. </p>
                */
            tags?: Record<string, string>;
    }
    export namespace Control {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Control) => any;
    }
    /**
        * <p> A set of controls in Audit Manager. </p>
        */
    export interface ControlSet {
            /**
                * <p> The identifier of the control set in the assessment. This is the control set name in a
                *          plain string format. </p>
                */
            id?: string;
            /**
                * <p> The name of the control set. </p>
                */
            name?: string;
            /**
                * <p> The list of controls within the control set. </p>
                */
            controls?: Control[];
    }
    export namespace ControlSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ControlSet) => any;
    }
    /**
        * <p> The file that's used to structure and automate Audit Manager assessments for a
        *          given compliance standard. </p>
        */
    export interface Framework {
            /**
                * <p> The Amazon Resource Name (ARN) of the framework. </p>
                */
            arn?: string;
            /**
                * <p> The unique identifier for the framework. </p>
                */
            id?: string;
            /**
                * <p> The name of the framework. </p>
                */
            name?: string;
            /**
                * <p> The framework type, such as a custom framework or a standard framework. </p>
                */
            type?: FrameworkType | string;
            /**
                * <p> The compliance type that the new custom framework supports, such as CIS or HIPAA.
                *       </p>
                */
            complianceType?: string;
            /**
                * <p> The description of the framework. </p>
                */
            description?: string;
            /**
                * <p> The logo that's associated with the framework. </p>
                */
            logo?: string;
            /**
                * <p> The sources that Audit Manager collects evidence from for the control. </p>
                */
            controlSources?: string;
            /**
                * <p> The control sets that are associated with the framework. </p>
                */
            controlSets?: ControlSet[];
            /**
                * <p> Specifies when the framework was created. </p>
                */
            createdAt?: Date;
            /**
                * <p> Specifies when the framework was most recently updated. </p>
                */
            lastUpdatedAt?: Date;
            /**
                * <p> The IAM user or role that created the framework. </p>
                */
            createdBy?: string;
            /**
                * <p> The IAM user or role that most recently updated the framework. </p>
                */
            lastUpdatedBy?: string;
            /**
                * <p> The tags that are associated with the framework. </p>
                */
            tags?: Record<string, string>;
    }
    export namespace Framework {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Framework) => any;
    }
    export interface CreateAssessmentFrameworkResponse {
            /**
                * <p> The name of the new framework that the <code>CreateAssessmentFramework</code> API
                *          returned. </p>
                */
            framework?: Framework;
    }
    export namespace CreateAssessmentFrameworkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssessmentFrameworkResponse) => any;
    }
    export interface CreateAssessmentReportRequest {
            /**
                * <p> The name of the new assessment report. </p>
                */
            name: string | undefined;
            /**
                * <p> The description of the assessment report. </p>
                */
            description?: string;
            /**
                * <p> The identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
    }
    export namespace CreateAssessmentReportRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssessmentReportRequest) => any;
    }
    export interface CreateAssessmentReportResponse {
            /**
                * <p> The new assessment report that the <code>CreateAssessmentReport</code> API returned.
                *       </p>
                */
            assessmentReport?: AssessmentReport;
    }
    export namespace CreateAssessmentReportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAssessmentReportResponse) => any;
    }
    /**
        * <p> The control mapping fields that represent the source for evidence collection, along
        *          with related parameters and metadata. This doesn't contain <code>mappingID</code>. </p>
        */
    export interface CreateControlMappingSource {
            /**
                * <p> The name of the control mapping data source. </p>
                */
            sourceName?: string;
            /**
                * <p> The description of the data source that determines where Audit Manager collects
                *          evidence from for the control. </p>
                */
            sourceDescription?: string;
            /**
                * <p> The setup option for the data source, which reflects if the evidence collection is
                *          automated or manual. </p>
                */
            sourceSetUpOption?: SourceSetUpOption | string;
            /**
                * <p> Specifies one of the five types of data sources for evidence collection. </p>
                */
            sourceType?: SourceType | string;
            /**
                * <p> The keyword to search for in CloudTrail logs, Config rules,
                *          Security Hub checks, and Amazon Web Services API names. </p>
                */
            sourceKeyword?: SourceKeyword;
            /**
                * <p> The frequency of evidence collection for the control mapping source. </p>
                */
            sourceFrequency?: SourceFrequency | string;
            /**
                * <p> The instructions for troubleshooting the control. </p>
                */
            troubleshootingText?: string;
    }
    export namespace CreateControlMappingSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateControlMappingSource) => any;
    }
    export interface CreateControlRequest {
            /**
                * <p> The name of the control. </p>
                */
            name: string | undefined;
            /**
                * <p> The description of the control. </p>
                */
            description?: string;
            /**
                * <p> The steps to follow to determine if the control is satisfied. </p>
                */
            testingInformation?: string;
            /**
                * <p> The title of the action plan for remediating the control. </p>
                */
            actionPlanTitle?: string;
            /**
                * <p> The recommended actions to carry out if the control isn't fulfilled. </p>
                */
            actionPlanInstructions?: string;
            /**
                * <p> The data mapping sources for the control. </p>
                */
            controlMappingSources: CreateControlMappingSource[] | undefined;
            /**
                * <p> The tags that are associated with the control. </p>
                */
            tags?: Record<string, string>;
    }
    export namespace CreateControlRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateControlRequest) => any;
    }
    export interface CreateControlResponse {
            /**
                * <p> The new control that the <code>CreateControl</code> API returned. </p>
                */
            control?: Control;
    }
    export namespace CreateControlResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateControlResponse) => any;
    }
    export interface DeleteAssessmentRequest {
            /**
                * <p> The identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
    }
    export namespace DeleteAssessmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssessmentRequest) => any;
    }
    export interface DeleteAssessmentResponse {
    }
    export namespace DeleteAssessmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssessmentResponse) => any;
    }
    export interface DeleteAssessmentFrameworkRequest {
            /**
                * <p> The identifier for the custom framework. </p>
                */
            frameworkId: string | undefined;
    }
    export namespace DeleteAssessmentFrameworkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssessmentFrameworkRequest) => any;
    }
    export interface DeleteAssessmentFrameworkResponse {
    }
    export namespace DeleteAssessmentFrameworkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssessmentFrameworkResponse) => any;
    }
    export enum ShareRequestType {
            RECEIVED = "RECEIVED",
            SENT = "SENT"
    }
    export interface DeleteAssessmentFrameworkShareRequest {
            /**
                * <p>The unique identifier for the share request to be deleted.</p>
                */
            requestId: string | undefined;
            /**
                * <p>Specifies whether the share request is a sent request or a received request.</p>
                */
            requestType: ShareRequestType | string | undefined;
    }
    export namespace DeleteAssessmentFrameworkShareRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssessmentFrameworkShareRequest) => any;
    }
    export interface DeleteAssessmentFrameworkShareResponse {
    }
    export namespace DeleteAssessmentFrameworkShareResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssessmentFrameworkShareResponse) => any;
    }
    export interface DeleteAssessmentReportRequest {
            /**
                * <p> The unique identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The unique identifier for the assessment report. </p>
                */
            assessmentReportId: string | undefined;
    }
    export namespace DeleteAssessmentReportRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssessmentReportRequest) => any;
    }
    export interface DeleteAssessmentReportResponse {
    }
    export namespace DeleteAssessmentReportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAssessmentReportResponse) => any;
    }
    export interface DeleteControlRequest {
            /**
                * <p> The unique identifier for the control. </p>
                */
            controlId: string | undefined;
    }
    export namespace DeleteControlRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteControlRequest) => any;
    }
    export interface DeleteControlResponse {
    }
    export namespace DeleteControlResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteControlResponse) => any;
    }
    export interface DeregisterAccountRequest {
    }
    export namespace DeregisterAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterAccountRequest) => any;
    }
    export interface DeregisterAccountResponse {
            /**
                * <p> The registration status of the account. </p>
                */
            status?: AccountStatus | string;
    }
    export namespace DeregisterAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterAccountResponse) => any;
    }
    export interface DeregisterOrganizationAdminAccountRequest {
            /**
                * <p> The identifier for the administrator account. </p>
                */
            adminAccountId?: string;
    }
    export namespace DeregisterOrganizationAdminAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterOrganizationAdminAccountRequest) => any;
    }
    export interface DeregisterOrganizationAdminAccountResponse {
    }
    export namespace DeregisterOrganizationAdminAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeregisterOrganizationAdminAccountResponse) => any;
    }
    export interface DisassociateAssessmentReportEvidenceFolderRequest {
            /**
                * <p> The unique identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The unique identifier for the folder that the evidence is stored in. </p>
                */
            evidenceFolderId: string | undefined;
    }
    export namespace DisassociateAssessmentReportEvidenceFolderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateAssessmentReportEvidenceFolderRequest) => any;
    }
    export interface DisassociateAssessmentReportEvidenceFolderResponse {
    }
    export namespace DisassociateAssessmentReportEvidenceFolderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateAssessmentReportEvidenceFolderResponse) => any;
    }
    export interface GetAccountStatusRequest {
    }
    export namespace GetAccountStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountStatusRequest) => any;
    }
    export interface GetAccountStatusResponse {
            /**
                * <p> The status of the Amazon Web Services account. </p>
                */
            status?: AccountStatus | string;
    }
    export namespace GetAccountStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountStatusResponse) => any;
    }
    export interface GetAssessmentRequest {
            /**
                * <p>The unique identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
    }
    export namespace GetAssessmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAssessmentRequest) => any;
    }
    export interface GetAssessmentResponse {
            /**
                * <p> An entity that defines the scope of audit evidence collected by Audit Manager.
                *          An Audit Manager assessment is an implementation of an Audit Manager
                *          framework. </p>
                */
            assessment?: Assessment;
            /**
                * <p> The wrapper that contains the Audit Manager role information of the current
                *          user. This includes the role type and IAM Amazon Resource Name (ARN).
                *       </p>
                */
            userRole?: Role;
    }
    export namespace GetAssessmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAssessmentResponse) => any;
    }
    export interface GetAssessmentFrameworkRequest {
            /**
                * <p> The identifier for the framework. </p>
                */
            frameworkId: string | undefined;
    }
    export namespace GetAssessmentFrameworkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAssessmentFrameworkRequest) => any;
    }
    export interface GetAssessmentFrameworkResponse {
            /**
                * <p> The framework that the <code>GetAssessmentFramework</code> API returned. </p>
                */
            framework?: Framework;
    }
    export namespace GetAssessmentFrameworkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAssessmentFrameworkResponse) => any;
    }
    export interface GetAssessmentReportUrlRequest {
            /**
                * <p> The unique identifier for the assessment report. </p>
                */
            assessmentReportId: string | undefined;
            /**
                * <p> The unique identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
    }
    export namespace GetAssessmentReportUrlRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAssessmentReportUrlRequest) => any;
    }
    /**
        * <p> Short for uniform resource locator. A URL is used as a unique identifier to locate a
        *          resource on the internet. </p>
        */
    export interface URL {
            /**
                * <p> The name or word that's used as a hyperlink to the URL. </p>
                */
            hyperlinkName?: string;
            /**
                * <p> The unique identifier for the internet resource. </p>
                */
            link?: string;
    }
    export namespace URL {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: URL) => any;
    }
    export interface GetAssessmentReportUrlResponse {
            /**
                * <p> Short for uniform resource locator. A URL is used as a unique identifier to locate a
                *          resource on the internet. </p>
                */
            preSignedUrl?: URL;
    }
    export namespace GetAssessmentReportUrlResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAssessmentReportUrlResponse) => any;
    }
    export interface GetChangeLogsRequest {
            /**
                * <p>The unique identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The unique identifier for the control set. </p>
                */
            controlSetId?: string;
            /**
                * <p> The unique identifier for the control. </p>
                */
            controlId?: string;
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p>Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace GetChangeLogsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetChangeLogsRequest) => any;
    }
    export enum ObjectTypeEnum {
            ASSESSMENT = "ASSESSMENT",
            ASSESSMENT_REPORT = "ASSESSMENT_REPORT",
            CONTROL = "CONTROL",
            CONTROL_SET = "CONTROL_SET",
            DELEGATION = "DELEGATION"
    }
    /**
        * <p> The record of a change within Audit Manager. For example, this could be the
        *          status change of an assessment or the delegation of a control set. </p>
        */
    export interface ChangeLog {
            /**
                * <p> The object that was changed, such as an assessment, control, or control set. </p>
                */
            objectType?: ObjectTypeEnum | string;
            /**
                * <p> The name of the object that changed. This could be the name of an assessment, control,
                *          or control set.</p>
                */
            objectName?: string;
            /**
                * <p> The action that was performed. </p>
                */
            action?: ActionEnum | string;
            /**
                * <p> The time when the action was performed and the changelog record was created. </p>
                */
            createdAt?: Date;
            /**
                * <p> The IAM user or role that performed the action. </p>
                */
            createdBy?: string;
    }
    export namespace ChangeLog {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChangeLog) => any;
    }
    export interface GetChangeLogsResponse {
            /**
                * <p>The list of user activity for the control. </p>
                */
            changeLogs?: ChangeLog[];
            /**
                * <p>The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace GetChangeLogsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetChangeLogsResponse) => any;
    }
    export interface GetControlRequest {
            /**
                * <p> The identifier for the control. </p>
                */
            controlId: string | undefined;
    }
    export namespace GetControlRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetControlRequest) => any;
    }
    export interface GetControlResponse {
            /**
                * <p> The name of the control that the <code>GetControl</code> API returned. </p>
                */
            control?: Control;
    }
    export namespace GetControlResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetControlResponse) => any;
    }
    export interface GetDelegationsRequest {
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p> Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace GetDelegationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDelegationsRequest) => any;
    }
    /**
        * <p> The metadata that's associated with the delegation. </p>
        */
    export interface DelegationMetadata {
            /**
                * <p> The unique identifier for the delegation. </p>
                */
            id?: string;
            /**
                * <p> The name of the associated assessment. </p>
                */
            assessmentName?: string;
            /**
                * <p> The unique identifier for the assessment. </p>
                */
            assessmentId?: string;
            /**
                * <p> The current status of the delegation. </p>
                */
            status?: DelegationStatus | string;
            /**
                * <p> The Amazon Resource Name (ARN) of the IAM role. </p>
                */
            roleArn?: string;
            /**
                * <p> Specifies when the delegation was created. </p>
                */
            creationTime?: Date;
            /**
                * <p> Specifies the name of the control set that was delegated for review. </p>
                */
            controlSetName?: string;
    }
    export namespace DelegationMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DelegationMetadata) => any;
    }
    export interface GetDelegationsResponse {
            /**
                * <p> The list of delegations that the <code>GetDelegations</code> API returned. </p>
                */
            delegations?: DelegationMetadata[];
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace GetDelegationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetDelegationsResponse) => any;
    }
    export interface GetEvidenceRequest {
            /**
                * <p> The unique identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The unique identifier for the control set. </p>
                */
            controlSetId: string | undefined;
            /**
                * <p> The unique identifier for the folder that the evidence is stored in. </p>
                */
            evidenceFolderId: string | undefined;
            /**
                * <p> The unique identifier for the evidence. </p>
                */
            evidenceId: string | undefined;
    }
    export namespace GetEvidenceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEvidenceRequest) => any;
    }
    /**
        * <p> A system asset that's evaluated in an Audit Manager assessment. </p>
        */
    export interface Resource {
            /**
                * <p> The Amazon Resource Name (ARN) for the resource. </p>
                */
            arn?: string;
            /**
                * <p> The value of the resource. </p>
                */
            value?: string;
    }
    export namespace Resource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Resource) => any;
    }
    /**
        * <p> A record that contains the information needed to demonstrate compliance with the
        *          requirements specified by a control. Examples of evidence include change activity triggered
        *          by a user, or a system configuration snapshot. </p>
        */
    export interface Evidence {
            /**
                * <p> The data source where the evidence was collected from. </p>
                */
            dataSource?: string;
            /**
                * <p> The identifier for the Amazon Web Services account. </p>
                */
            evidenceAwsAccountId?: string;
            /**
                * <p> The timestamp that represents when the evidence was collected. </p>
                */
            time?: Date;
            /**
                * <p> The Amazon Web Service that the evidence is collected from. </p>
                */
            eventSource?: string;
            /**
                * <p> The name of the evidence event. </p>
                */
            eventName?: string;
            /**
                * <p> The type of automated evidence. </p>
                */
            evidenceByType?: string;
            /**
                * <p> The list of resources that are assessed to generate the evidence. </p>
                */
            resourcesIncluded?: Resource[];
            /**
                * <p> The names and values that are used by the evidence event. This includes an attribute
                *          name (such as <code>allowUsersToChangePassword</code>) and value (such as <code>true</code>
                *          or <code>false</code>). </p>
                */
            attributes?: Record<string, string>;
            /**
                * <p> The unique identifier for the IAM user or role that's associated with
                *          the evidence. </p>
                */
            iamId?: string;
            /**
                * <p> The evaluation status for evidence that falls under the compliance check category. For
                *          evidence collected from Security Hub, a <i>Pass</i> or
                *          <i>Fail</i> result is shown. For evidence collected from Config, a <i>Compliant</i> or <i>Noncompliant</i>
                *          result is shown. </p>
                */
            complianceCheck?: string;
            /**
                * <p> The Amazon Web Services account that the evidence is collected from, and its
                *          organization path. </p>
                */
            awsOrganization?: string;
            /**
                * <p> The identifier for the Amazon Web Services account. </p>
                */
            awsAccountId?: string;
            /**
                * <p> The identifier for the folder that the evidence is stored in. </p>
                */
            evidenceFolderId?: string;
            /**
                * <p> The identifier for the evidence. </p>
                */
            id?: string;
            /**
                * <p> Specifies whether the evidence is included in the assessment report. </p>
                */
            assessmentReportSelection?: string;
    }
    export namespace Evidence {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Evidence) => any;
    }
    export interface GetEvidenceResponse {
            /**
                * <p> The evidence that the <code>GetEvidenceResponse</code> API returned. </p>
                */
            evidence?: Evidence;
    }
    export namespace GetEvidenceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEvidenceResponse) => any;
    }
    export interface GetEvidenceByEvidenceFolderRequest {
            /**
                * <p> The identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The identifier for the control set. </p>
                */
            controlSetId: string | undefined;
            /**
                * <p> The unique identifier for the folder that the evidence is stored in. </p>
                */
            evidenceFolderId: string | undefined;
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p> Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace GetEvidenceByEvidenceFolderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEvidenceByEvidenceFolderRequest) => any;
    }
    export interface GetEvidenceByEvidenceFolderResponse {
            /**
                * <p> The list of evidence that the <code>GetEvidenceByEvidenceFolder</code> API returned.
                *       </p>
                */
            evidence?: Evidence[];
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace GetEvidenceByEvidenceFolderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEvidenceByEvidenceFolderResponse) => any;
    }
    export interface GetEvidenceFolderRequest {
            /**
                * <p> The unique identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The unique identifier for the control set. </p>
                */
            controlSetId: string | undefined;
            /**
                * <p> The unique identifier for the folder that the evidence is stored in. </p>
                */
            evidenceFolderId: string | undefined;
    }
    export namespace GetEvidenceFolderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEvidenceFolderRequest) => any;
    }
    export interface GetEvidenceFolderResponse {
            /**
                * <p> The folder that the evidence is stored in. </p>
                */
            evidenceFolder?: AssessmentEvidenceFolder;
    }
    export namespace GetEvidenceFolderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEvidenceFolderResponse) => any;
    }
    export interface GetEvidenceFoldersByAssessmentRequest {
            /**
                * <p> The unique identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p> Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace GetEvidenceFoldersByAssessmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEvidenceFoldersByAssessmentRequest) => any;
    }
    export interface GetEvidenceFoldersByAssessmentResponse {
            /**
                * <p> The list of evidence folders that the <code>GetEvidenceFoldersByAssessment</code> API
                *          returned. </p>
                */
            evidenceFolders?: AssessmentEvidenceFolder[];
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace GetEvidenceFoldersByAssessmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEvidenceFoldersByAssessmentResponse) => any;
    }
    export interface GetEvidenceFoldersByAssessmentControlRequest {
            /**
                * <p> The identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The identifier for the control set. </p>
                */
            controlSetId: string | undefined;
            /**
                * <p> The identifier for the control. </p>
                */
            controlId: string | undefined;
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p> Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace GetEvidenceFoldersByAssessmentControlRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEvidenceFoldersByAssessmentControlRequest) => any;
    }
    export interface GetEvidenceFoldersByAssessmentControlResponse {
            /**
                * <p> The list of evidence folders that the
                *          <code>GetEvidenceFoldersByAssessmentControl</code> API returned. </p>
                */
            evidenceFolders?: AssessmentEvidenceFolder[];
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace GetEvidenceFoldersByAssessmentControlResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetEvidenceFoldersByAssessmentControlResponse) => any;
    }
    export interface GetInsightsRequest {
    }
    export namespace GetInsightsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInsightsRequest) => any;
    }
    /**
        * <p>A summary of the latest analytics data for all your active assessments. </p>
        *          <p>This summary is a snapshot of the data that your active assessments collected on the
        *          <code>lastUpdated</code> date. It’s important to understand that the following totals
        *          are daily counts based on this date — they aren’t a total sum to date. </p>
        *          <p>The <code>Insights</code> data is eventually consistent. This means that, when you read
        *          data from <code>Insights</code>, the response might not instantly reflect the results of a
        *          recently completed write or update operation. If you repeat your read request after a few
        *          hours, the response should return the latest data.</p>
        *          <note>
        *             <p>If you delete an assessment or change its status to inactive,
        *             <code>InsightsByAssessment</code> includes data for that assessment as
        *             follows.</p>
        *             <ul>
        *                <li>
        *                   <p>
        *                      <b>Inactive assessments</b> - If Audit Manager collected
        *                evidence for your assessment before you changed it inactive, that evidence is
        *                included in the <code>InsightsByAssessment</code> counts for that day.</p>
        *                </li>
        *                <li>
        *                   <p>
        *                      <b>Deleted assessments</b> - If Audit Manager collected
        *                evidence for your assessment before you deleted it, that evidence isn't included
        *                in the <code>InsightsByAssessment</code> counts for that day.</p>
        *                </li>
        *             </ul>
        *          </note>
        */
    export interface Insights {
            /**
                * <p>The number of active assessments in Audit Manager. </p>
                */
            activeAssessmentsCount?: number;
            /**
                * <p>The number of compliance check evidence that Audit Manager classified as non-compliant
                *          on the <code>lastUpdated</code> date. This includes evidence that was collected from
                *          Security Hub with a <i>Fail</i> ruling, or collected from
                *          Config with a <i>Non-compliant</i> ruling. </p>
                */
            noncompliantEvidenceCount?: number;
            /**
                * <p>The number of compliance check evidence that Audit Manager classified as compliant on
                *          the <code>lastUpdated</code> date. This includes evidence that was collected from Security Hub with a <i>Pass</i> ruling, or collected from Config with a <i>Compliant</i> ruling. </p>
                */
            compliantEvidenceCount?: number;
            /**
                * <p>The number of evidence without a compliance check ruling. Evidence is inconclusive when the
                *          associated control uses Security Hub or Config as a data source
                *          but you didn't enable those services. This is also the case when a control uses a data
                *          source that doesn’t support compliance checks (for example: manual evidence, API calls, or
                *          CloudTrail). </p>
                *          <note>
                *             <p>If evidence has a compliance check status of <i>not applicable</i>, it's classed
                *          as <i>inconclusive</i> in <code>Insights</code> data.</p>
                *          </note>
                */
            inconclusiveEvidenceCount?: number;
            /**
                * <p>The number of assessment controls that collected non-compliant evidence on the
                *          <code>lastUpdated</code> date. </p>
                */
            assessmentControlsCountByNoncompliantEvidence?: number;
            /**
                * <p>The total number of controls across all active assessments. </p>
                */
            totalAssessmentControlsCount?: number;
            /**
                * <p>The time when the cross-assessment insights were last updated. </p>
                */
            lastUpdated?: Date;
    }
    export namespace Insights {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Insights) => any;
    }
    export interface GetInsightsResponse {
            /**
                * <p>The analytics data that the <code>GetInsights</code> API returned. </p>
                */
            insights?: Insights;
    }
    export namespace GetInsightsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInsightsResponse) => any;
    }
    export interface GetInsightsByAssessmentRequest {
            /**
                * <p>The unique identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
    }
    export namespace GetInsightsByAssessmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInsightsByAssessmentRequest) => any;
    }
    /**
        * <p>A summary of the latest analytics data for a specific active assessment.</p>
        *          <p>This summary is a snapshot of the data that was collected on the <code>lastUpdated</code>
        *          date. It’s important to understand that the totals in <code>InsightsByAssessment</code> are
        *          daily counts based on this date — they aren’t a total sum to date. </p>
        *          <p>The <code>InsightsByAssessment</code> data is eventually consistent. This means that
        *          when you read data from <code>InsightsByAssessment</code>, the response might not instantly
        *          reflect the results of a recently completed write or update operation. If you repeat your
        *          read request after a few hours, the response returns the latest data.</p>
        *          <note>
        *             <p>If you delete an assessment or change its status to inactive,
        *             <code>InsightsByAssessment</code> includes data for that assessment as
        *             follows.</p>
        *             <ul>
        *                <li>
        *                   <p>
        *                      <b>Inactive assessments</b> - If Audit Manager collected
        *                evidence for your assessment before you changed it inactive, that evidence is
        *                included in the <code>InsightsByAssessment</code> counts for that day.</p>
        *                </li>
        *                <li>
        *                   <p>
        *                      <b>Deleted assessments</b> - If Audit Manager collected
        *                evidence for your assessment before you deleted it, that evidence isn't included
        *                in the <code>InsightsByAssessment</code> counts for that day.</p>
        *                </li>
        *             </ul>
        *          </note>
        */
    export interface InsightsByAssessment {
            /**
                * <p>The number of compliance check evidence that Audit Manager classified as non-compliant.
                *          This includes evidence that was collected from Security Hub with a
                *          <i>Fail</i> ruling, or collected from Config with a
                *          <i>Non-compliant</i> ruling. </p>
                */
            noncompliantEvidenceCount?: number;
            /**
                * <p>The number of compliance check evidence that Audit Manager classified as compliant.
                *          This includes evidence that was collected from Security Hub with a
                *          <i>Pass</i> ruling, or collected from Config with a
                *          <i>Compliant</i> ruling. </p>
                */
            compliantEvidenceCount?: number;
            /**
                * <p>The amount of evidence without a compliance check ruling. Evidence is inconclusive if the
                *          associated control uses Security Hub or Config as a data source
                *          and you didn't enable those services. This is also the case if a control uses a data source
                *          that doesn’t support compliance checks (for example, manual evidence, API calls, or CloudTrail). </p>
                *          <note>
                *             <p>If evidence has a compliance check status of <i>not applicable</i>, it's
                *          classified as <i>inconclusive</i> in <code>InsightsByAssessment</code>
                *          data.</p>
                *          </note>
                */
            inconclusiveEvidenceCount?: number;
            /**
                * <p>The number of assessment controls that collected non-compliant evidence on the
                *          <code>lastUpdated</code> date. </p>
                */
            assessmentControlsCountByNoncompliantEvidence?: number;
            /**
                * <p>The total number of controls in the assessment. </p>
                */
            totalAssessmentControlsCount?: number;
            /**
                * <p>The time when the assessment insights were last updated.</p>
                */
            lastUpdated?: Date;
    }
    export namespace InsightsByAssessment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InsightsByAssessment) => any;
    }
    export interface GetInsightsByAssessmentResponse {
            /**
                * <p> The assessment analytics data that the <code>GetInsightsByAssessment</code> API
                *          returned. </p>
                */
            insights?: InsightsByAssessment;
    }
    export namespace GetInsightsByAssessmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInsightsByAssessmentResponse) => any;
    }
    export interface GetOrganizationAdminAccountRequest {
    }
    export namespace GetOrganizationAdminAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOrganizationAdminAccountRequest) => any;
    }
    export interface GetOrganizationAdminAccountResponse {
            /**
                * <p> The identifier for the administrator account. </p>
                */
            adminAccountId?: string;
            /**
                * <p> The identifier for the organization. </p>
                */
            organizationId?: string;
    }
    export namespace GetOrganizationAdminAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOrganizationAdminAccountResponse) => any;
    }
    export interface GetServicesInScopeRequest {
    }
    export namespace GetServicesInScopeRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServicesInScopeRequest) => any;
    }
    /**
        * <p> The metadata that's associated with the Amazon Web Service. </p>
        */
    export interface ServiceMetadata {
            /**
                * <p> The name of the Amazon Web Service. </p>
                */
            name?: string;
            /**
                * <p> The display name of the Amazon Web Service. </p>
                */
            displayName?: string;
            /**
                * <p> The description of the Amazon Web Service. </p>
                */
            description?: string;
            /**
                * <p> The category that the Amazon Web Service belongs to, such as compute, storage,
                *          or database. </p>
                */
            category?: string;
    }
    export namespace ServiceMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceMetadata) => any;
    }
    export interface GetServicesInScopeResponse {
            /**
                * <p> The metadata that's associated with the Amazon Web Service. </p>
                */
            serviceMetadata?: ServiceMetadata[];
    }
    export namespace GetServicesInScopeResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServicesInScopeResponse) => any;
    }
    export enum SettingAttribute {
            ALL = "ALL",
            DEFAULT_ASSESSMENT_REPORTS_DESTINATION = "DEFAULT_ASSESSMENT_REPORTS_DESTINATION",
            DEFAULT_PROCESS_OWNERS = "DEFAULT_PROCESS_OWNERS",
            IS_AWS_ORG_ENABLED = "IS_AWS_ORG_ENABLED",
            SNS_TOPIC = "SNS_TOPIC"
    }
    export interface GetSettingsRequest {
            /**
                * <p> The list of <code>SettingAttribute</code> enum values. </p>
                */
            attribute: SettingAttribute | string | undefined;
    }
    export namespace GetSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSettingsRequest) => any;
    }
    /**
        * <p> The settings object that holds all supported Audit Manager settings. </p>
        */
    export interface Settings {
            /**
                * <p> Specifies whether Organizations is enabled. </p>
                */
            isAwsOrgEnabled?: boolean;
            /**
                * <p> The designated Amazon Simple Notification Service (Amazon SNS) topic. </p>
                */
            snsTopic?: string;
            /**
                * <p> The default storage destination for assessment reports. </p>
                */
            defaultAssessmentReportsDestination?: AssessmentReportsDestination;
            /**
                * <p> The designated default audit owners. </p>
                */
            defaultProcessOwners?: Role[];
            /**
                * <p> The KMS key details. </p>
                */
            kmsKey?: string;
    }
    export namespace Settings {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Settings) => any;
    }
    export interface GetSettingsResponse {
            /**
                * <p> The settings object that holds all supported Audit Manager settings. </p>
                */
            settings?: Settings;
    }
    export namespace GetSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSettingsResponse) => any;
    }
    export interface ListAssessmentControlInsightsByControlDomainRequest {
            /**
                * <p>The unique identifier for the control domain. </p>
                */
            controlDomainId: string | undefined;
            /**
                * <p>The unique identifier for the active assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p>The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p>Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace ListAssessmentControlInsightsByControlDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssessmentControlInsightsByControlDomainRequest) => any;
    }
    /**
        * <p>A breakdown of the latest compliance check status for the evidence in your Audit Manager
        *          assessments. </p>
        */
    export interface EvidenceInsights {
            /**
                * <p>The number of compliance check evidence that Audit Manager classified as non-compliant.
                *          This includes evidence that was collected from Security Hub with a
                *          <i>Fail</i> ruling, or collected from Config with a
                *          <i>Non-compliant</i> ruling. </p>
                */
            noncompliantEvidenceCount?: number;
            /**
                * <p>The number of compliance check evidence that Audit Manager classified as compliant. This
                *          includes evidence that was collected from Security Hub with a
                *          <i>Pass</i> ruling, or collected from Config with a
                *          <i>Compliant</i> ruling. </p>
                */
            compliantEvidenceCount?: number;
            /**
                * <p>The number of evidence that a compliance check ruling isn't available for. Evidence is
                *          inconclusive when the associated control uses Security Hub or Config as a data source but you didn't enable those services. This is also the case when a
                *          control uses a data source that doesn’t support compliance checks (for example, manual
                *          evidence, API calls, or CloudTrail). </p>
                *          <note>
                *             <p>If evidence has a compliance check status of <i>not applicable</i> in the
                *          console, it's classified as <i>inconclusive</i> in
                *          <code>EvidenceInsights</code> data.</p>
                *          </note>
                */
            inconclusiveEvidenceCount?: number;
    }
    export namespace EvidenceInsights {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvidenceInsights) => any;
    }
    /**
        * <p>A summary of the latest analytics data for a specific control in a specific active
        *          assessment.</p>
        *          <p>Control insights are grouped by control domain, and ranked by the highest total count of non-compliant evidence.
        *       </p>
        */
    export interface ControlInsightsMetadataByAssessmentItem {
            /**
                * <p>The name of the assessment control. </p>
                */
            name?: string;
            /**
                * <p>The unique identifier for the assessment control. </p>
                */
            id?: string;
            /**
                * <p>A breakdown of the compliance check status for the evidence that’s associated with the
                *          assessment control. </p>
                */
            evidenceInsights?: EvidenceInsights;
            /**
                * <p>The name of the control set that the assessment control belongs to. </p>
                */
            controlSetName?: string;
            /**
                * <p>The time when the assessment control insights were last updated. </p>
                */
            lastUpdated?: Date;
    }
    export namespace ControlInsightsMetadataByAssessmentItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ControlInsightsMetadataByAssessmentItem) => any;
    }
    export interface ListAssessmentControlInsightsByControlDomainResponse {
            /**
                * <p>The assessment control analytics data that the
                *          <code>ListAssessmentControlInsightsByControlDomain</code> API returned. </p>
                */
            controlInsightsByAssessment?: ControlInsightsMetadataByAssessmentItem[];
            /**
                * <p>The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace ListAssessmentControlInsightsByControlDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssessmentControlInsightsByControlDomainResponse) => any;
    }
    export interface ListAssessmentFrameworksRequest {
            /**
                * <p> The type of framework, such as a standard framework or a custom framework. </p>
                */
            frameworkType: FrameworkType | string | undefined;
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p> Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace ListAssessmentFrameworksRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssessmentFrameworksRequest) => any;
    }
    export interface ListAssessmentFrameworksResponse {
            /**
                * <p> The list of metadata objects for the framework. </p>
                */
            frameworkMetadataList?: AssessmentFrameworkMetadata[];
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace ListAssessmentFrameworksResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssessmentFrameworksResponse) => any;
    }
    export interface ListAssessmentFrameworkShareRequestsRequest {
            /**
                * <p> Specifies whether the share request is a sent request or a received request.</p>
                */
            requestType: ShareRequestType | string | undefined;
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p> Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace ListAssessmentFrameworkShareRequestsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssessmentFrameworkShareRequestsRequest) => any;
    }
    export interface ListAssessmentFrameworkShareRequestsResponse {
            /**
                * <p> The list of share requests that the <code>ListAssessmentFrameworkShareRequests</code>
                *          API returned. </p>
                */
            assessmentFrameworkShareRequests?: AssessmentFrameworkShareRequest[];
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace ListAssessmentFrameworkShareRequestsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssessmentFrameworkShareRequestsResponse) => any;
    }
    export interface ListAssessmentReportsRequest {
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p> Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace ListAssessmentReportsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssessmentReportsRequest) => any;
    }
    export interface ListAssessmentReportsResponse {
            /**
                * <p> The list of assessment reports that the <code>ListAssessmentReports</code> API
                *          returned. </p>
                */
            assessmentReports?: AssessmentReportMetadata[];
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace ListAssessmentReportsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssessmentReportsResponse) => any;
    }
    export interface ListAssessmentsRequest {
            /**
                * <p> The current status of the assessment.</p>
                */
            status?: AssessmentStatus | string;
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p> Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace ListAssessmentsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssessmentsRequest) => any;
    }
    export interface ListAssessmentsResponse {
            /**
                * <p> The metadata that's associated with the assessment. </p>
                */
            assessmentMetadata?: AssessmentMetadataItem[];
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace ListAssessmentsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAssessmentsResponse) => any;
    }
    export interface ListControlDomainInsightsRequest {
            /**
                * <p>The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p>Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace ListControlDomainInsightsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListControlDomainInsightsRequest) => any;
    }
    /**
        * <p>A summary of the latest analytics data for a specific control domain.</p>
        *          <p>Control domain insights are grouped by control domain, and ranked by the highest total count of non-compliant evidence.</p>
        */
    export interface ControlDomainInsights {
            /**
                * <p>The name of the control domain. </p>
                */
            name?: string;
            /**
                * <p>The unique identifier for the control domain. </p>
                */
            id?: string;
            /**
                * <p>The number of controls in the control domain that collected non-compliant evidence on the
                *          <code>lastUpdated</code> date. </p>
                */
            controlsCountByNoncompliantEvidence?: number;
            /**
                * <p>The total number of controls in the control domain. </p>
                */
            totalControlsCount?: number;
            /**
                * <p>A breakdown of the compliance check status for the evidence that’s associated with the control
                *          domain. </p>
                */
            evidenceInsights?: EvidenceInsights;
            /**
                * <p>The time when the control domain insights were last updated. </p>
                */
            lastUpdated?: Date;
    }
    export namespace ControlDomainInsights {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ControlDomainInsights) => any;
    }
    export interface ListControlDomainInsightsResponse {
            /**
                * <p>The control domain analytics data that the <code>ListControlDomainInsights</code> API
                *          returned. </p>
                */
            controlDomainInsights?: ControlDomainInsights[];
            /**
                * <p>The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace ListControlDomainInsightsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListControlDomainInsightsResponse) => any;
    }
    export interface ListControlDomainInsightsByAssessmentRequest {
            /**
                * <p>The unique identifier for the active assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p>The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p>Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace ListControlDomainInsightsByAssessmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListControlDomainInsightsByAssessmentRequest) => any;
    }
    export interface ListControlDomainInsightsByAssessmentResponse {
            /**
                * <p>The control domain analytics data that the
                *          <code>ListControlDomainInsightsByAssessment</code> API returned. </p>
                */
            controlDomainInsights?: ControlDomainInsights[];
            /**
                * <p>The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace ListControlDomainInsightsByAssessmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListControlDomainInsightsByAssessmentResponse) => any;
    }
    export interface ListControlInsightsByControlDomainRequest {
            /**
                * <p>The unique identifier for the control domain. </p>
                */
            controlDomainId: string | undefined;
            /**
                * <p>The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p>Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace ListControlInsightsByControlDomainRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListControlInsightsByControlDomainRequest) => any;
    }
    /**
        * <p>A summary of the latest analytics data for a specific control. </p>
        *          <p>This data reflects the total counts for the specified control across all active assessments. Control insights are grouped by control domain, and ranked by the highest total count of non-compliant evidence.</p>
        */
    export interface ControlInsightsMetadataItem {
            /**
                * <p>The name of the control. </p>
                */
            name?: string;
            /**
                * <p>The unique identifier for the control. </p>
                */
            id?: string;
            /**
                * <p>A breakdown of the compliance check status for the evidence that’s associated with the
                *          control. </p>
                */
            evidenceInsights?: EvidenceInsights;
            /**
                * <p>The time when the control insights were last updated. </p>
                */
            lastUpdated?: Date;
    }
    export namespace ControlInsightsMetadataItem {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ControlInsightsMetadataItem) => any;
    }
    export interface ListControlInsightsByControlDomainResponse {
            /**
                * <p>The control analytics data that the <code>ListControlInsightsByControlDomain</code> API
                *          returned. </p>
                */
            controlInsightsMetadata?: ControlInsightsMetadataItem[];
            /**
                * <p>The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace ListControlInsightsByControlDomainResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListControlInsightsByControlDomainResponse) => any;
    }
    export interface ListControlsRequest {
            /**
                * <p> The type of control, such as a standard control or a custom control. </p>
                */
            controlType: ControlType | string | undefined;
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p> Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace ListControlsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListControlsRequest) => any;
    }
    /**
        * <p> The metadata that's associated with the standard control or custom control. </p>
        */
    export interface ControlMetadata {
            /**
                * <p> The Amazon Resource Name (ARN) of the control. </p>
                */
            arn?: string;
            /**
                * <p> The unique identifier for the control. </p>
                */
            id?: string;
            /**
                * <p> The name of the control. </p>
                */
            name?: string;
            /**
                * <p> The data source that determines where Audit Manager collects evidence from for
                *          the control. </p>
                */
            controlSources?: string;
            /**
                * <p> Specifies when the control was created. </p>
                */
            createdAt?: Date;
            /**
                * <p> Specifies when the control was most recently updated. </p>
                */
            lastUpdatedAt?: Date;
    }
    export namespace ControlMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ControlMetadata) => any;
    }
    export interface ListControlsResponse {
            /**
                * <p> The list of control metadata objects that the <code>ListControls</code> API returned.
                *       </p>
                */
            controlMetadataList?: ControlMetadata[];
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace ListControlsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListControlsResponse) => any;
    }
    export interface ListKeywordsForDataSourceRequest {
            /**
                * <p> The control mapping data source that the keywords apply to. </p>
                */
            source: SourceType | string | undefined;
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p> Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace ListKeywordsForDataSourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListKeywordsForDataSourceRequest) => any;
    }
    export interface ListKeywordsForDataSourceResponse {
            /**
                * <p> The list of keywords for the event mapping source. </p>
                */
            keywords?: string[];
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace ListKeywordsForDataSourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListKeywordsForDataSourceResponse) => any;
    }
    export interface ListNotificationsRequest {
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
            /**
                * <p> Represents the maximum number of results on a page or for an API request call. </p>
                */
            maxResults?: number;
    }
    export namespace ListNotificationsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNotificationsRequest) => any;
    }
    /**
        * <p> The notification that informs a user of an update in Audit Manager. For
        *          example, this includes the notification that's sent when a control set is delegated for
        *          review. </p>
        */
    export interface Notification {
            /**
                * <p> The unique identifier for the notification. </p>
                */
            id?: string;
            /**
                * <p> The identifier for the assessment. </p>
                */
            assessmentId?: string;
            /**
                * <p> The name of the related assessment. </p>
                */
            assessmentName?: string;
            /**
                * <p> The identifier for the control set. </p>
                */
            controlSetId?: string;
            /**
                * <p> Specifies the name of the control set that the notification is about. </p>
                */
            controlSetName?: string;
            /**
                * <p> The description of the notification. </p>
                */
            description?: string;
            /**
                * <p> The time when the notification was sent. </p>
                */
            eventTime?: Date;
            /**
                * <p> The sender of the notification. </p>
                */
            source?: string;
    }
    export namespace Notification {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Notification) => any;
    }
    export interface ListNotificationsResponse {
            /**
                * <p> The returned list of notifications. </p>
                */
            notifications?: Notification[];
            /**
                * <p> The pagination token that's used to fetch the next set of results. </p>
                */
            nextToken?: string;
    }
    export namespace ListNotificationsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListNotificationsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p> The Amazon Resource Name (ARN) of the resource. </p>
                */
            resourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p> The list of tags that the <code>ListTagsForResource</code> API returned. </p>
                */
            tags?: Record<string, string>;
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface RegisterAccountRequest {
            /**
                * <p> The KMS key details. </p>
                */
            kmsKey?: string;
            /**
                * <p> The delegated administrator account for Audit Manager. </p>
                */
            delegatedAdminAccount?: string;
    }
    export namespace RegisterAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterAccountRequest) => any;
    }
    export interface RegisterAccountResponse {
            /**
                * <p> The status of the account registration request. </p>
                */
            status?: AccountStatus | string;
    }
    export namespace RegisterAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterAccountResponse) => any;
    }
    /**
        * <p>The request was denied due to request throttling.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    export interface RegisterOrganizationAdminAccountRequest {
            /**
                * <p> The identifier for the delegated administrator account. </p>
                */
            adminAccountId: string | undefined;
    }
    export namespace RegisterOrganizationAdminAccountRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterOrganizationAdminAccountRequest) => any;
    }
    export interface RegisterOrganizationAdminAccountResponse {
            /**
                * <p> The identifier for the delegated administrator account. </p>
                */
            adminAccountId?: string;
            /**
                * <p> The identifier for the organization. </p>
                */
            organizationId?: string;
    }
    export namespace RegisterOrganizationAdminAccountResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RegisterOrganizationAdminAccountResponse) => any;
    }
    export interface StartAssessmentFrameworkShareRequest {
            /**
                * <p> The unique identifier for the custom framework to be shared. </p>
                */
            frameworkId: string | undefined;
            /**
                * <p> The Amazon Web Services account of the recipient. </p>
                */
            destinationAccount: string | undefined;
            /**
                * <p> The Amazon Web Services Region of the recipient. </p>
                */
            destinationRegion: string | undefined;
            /**
                * <p> An optional comment from the sender about the share request. </p>
                */
            comment?: string;
    }
    export namespace StartAssessmentFrameworkShareRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartAssessmentFrameworkShareRequest) => any;
    }
    export interface StartAssessmentFrameworkShareResponse {
            /**
                * <p> The share request that's created by the <code>StartAssessmentFrameworkShare</code> API.
                *       </p>
                */
            assessmentFrameworkShareRequest?: AssessmentFrameworkShareRequest;
    }
    export namespace StartAssessmentFrameworkShareResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartAssessmentFrameworkShareResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p> The Amazon Resource Name (ARN) of the resource. </p>
                */
            resourceArn: string | undefined;
            /**
                * <p> The tags that are associated with the resource. </p>
                */
            tags: Record<string, string> | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p> The Amazon Resource Name (ARN) of the specified resource. </p>
                */
            resourceArn: string | undefined;
            /**
                * <p> The name or key of the tag. </p>
                */
            tagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    export interface UpdateAssessmentRequest {
            /**
                * <p> The unique identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The name of the assessment to be updated. </p>
                */
            assessmentName?: string;
            /**
                * <p> The description of the assessment. </p>
                */
            assessmentDescription?: string;
            /**
                * <p> The scope of the assessment. </p>
                */
            scope: Scope | undefined;
            /**
                * <p> The assessment report storage destination for the assessment that's being updated.
                *       </p>
                */
            assessmentReportsDestination?: AssessmentReportsDestination;
            /**
                * <p> The list of roles for the assessment. </p>
                */
            roles?: Role[];
    }
    export namespace UpdateAssessmentRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssessmentRequest) => any;
    }
    export interface UpdateAssessmentResponse {
            /**
                * <p> The response object for the <code>UpdateAssessmentRequest</code> API. This is the name
                *          of the updated assessment.</p>
                */
            assessment?: Assessment;
    }
    export namespace UpdateAssessmentResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssessmentResponse) => any;
    }
    export interface UpdateAssessmentControlRequest {
            /**
                * <p> The unique identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The unique identifier for the control set. </p>
                */
            controlSetId: string | undefined;
            /**
                * <p> The unique identifier for the control. </p>
                */
            controlId: string | undefined;
            /**
                * <p> The status of the control. </p>
                */
            controlStatus?: ControlStatus | string;
            /**
                * <p> The comment body text for the control. </p>
                */
            commentBody?: string;
    }
    export namespace UpdateAssessmentControlRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssessmentControlRequest) => any;
    }
    export interface UpdateAssessmentControlResponse {
            /**
                * <p> The name of the updated control set that the <code>UpdateAssessmentControl</code> API
                *          returned. </p>
                */
            control?: AssessmentControl;
    }
    export namespace UpdateAssessmentControlResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssessmentControlResponse) => any;
    }
    export interface UpdateAssessmentControlSetStatusRequest {
            /**
                * <p> The unique identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The unique identifier for the control set. </p>
                */
            controlSetId: string | undefined;
            /**
                * <p> The status of the control set that's being updated. </p>
                */
            status: ControlSetStatus | string | undefined;
            /**
                * <p> The comment that's related to the status update. </p>
                */
            comment: string | undefined;
    }
    export namespace UpdateAssessmentControlSetStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssessmentControlSetStatusRequest) => any;
    }
    export interface UpdateAssessmentControlSetStatusResponse {
            /**
                * <p> The name of the updated control set that the
                *          <code>UpdateAssessmentControlSetStatus</code> API returned. </p>
                */
            controlSet?: AssessmentControlSet;
    }
    export namespace UpdateAssessmentControlSetStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssessmentControlSetStatusResponse) => any;
    }
    /**
        * <p> A <code>controlSet</code> entity that represents a collection of controls in Audit Manager. This doesn't contain the control set ID. </p>
        */
    export interface UpdateAssessmentFrameworkControlSet {
            /**
                * <p> The unique identifier for the control set. </p>
                */
            id?: string;
            /**
                * <p> The name of the control set. </p>
                */
            name: string | undefined;
            /**
                * <p> The list of controls that are contained within the control set. </p>
                */
            controls: CreateAssessmentFrameworkControl[] | undefined;
    }
    export namespace UpdateAssessmentFrameworkControlSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssessmentFrameworkControlSet) => any;
    }
    export interface UpdateAssessmentFrameworkRequest {
            /**
                * <p> The unique identifier for the framework. </p>
                */
            frameworkId: string | undefined;
            /**
                * <p> The name of the framework to be updated. </p>
                */
            name: string | undefined;
            /**
                * <p> The description of the updated framework. </p>
                */
            description?: string;
            /**
                * <p> The compliance type that the new custom framework supports, such as CIS or HIPAA.
                *       </p>
                */
            complianceType?: string;
            /**
                * <p> The control sets that are associated with the framework. </p>
                */
            controlSets: UpdateAssessmentFrameworkControlSet[] | undefined;
    }
    export namespace UpdateAssessmentFrameworkRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssessmentFrameworkRequest) => any;
    }
    export interface UpdateAssessmentFrameworkResponse {
            /**
                * <p> The name of the framework. </p>
                */
            framework?: Framework;
    }
    export namespace UpdateAssessmentFrameworkResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssessmentFrameworkResponse) => any;
    }
    export enum ShareRequestAction {
            ACCEPT = "ACCEPT",
            DECLINE = "DECLINE",
            REVOKE = "REVOKE"
    }
    export interface UpdateAssessmentFrameworkShareRequest {
            /**
                * <p> The unique identifier for the share request. </p>
                */
            requestId: string | undefined;
            /**
                * <p>Specifies whether the share request is a sent request or a received request.</p>
                */
            requestType: ShareRequestType | string | undefined;
            /**
                * <p>Specifies the update action for the share request.</p>
                */
            action: ShareRequestAction | string | undefined;
    }
    export namespace UpdateAssessmentFrameworkShareRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssessmentFrameworkShareRequest) => any;
    }
    export interface UpdateAssessmentFrameworkShareResponse {
            /**
                * <p> The updated share request that's returned by the
                *          <code>UpdateAssessmentFrameworkShare</code> operation. </p>
                */
            assessmentFrameworkShareRequest?: AssessmentFrameworkShareRequest;
    }
    export namespace UpdateAssessmentFrameworkShareResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssessmentFrameworkShareResponse) => any;
    }
    export interface UpdateAssessmentStatusRequest {
            /**
                * <p> The unique identifier for the assessment. </p>
                */
            assessmentId: string | undefined;
            /**
                * <p> The current status of the assessment. </p>
                */
            status: AssessmentStatus | string | undefined;
    }
    export namespace UpdateAssessmentStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssessmentStatusRequest) => any;
    }
    export interface UpdateAssessmentStatusResponse {
            /**
                * <p> The name of the updated assessment that the <code>UpdateAssessmentStatus</code> API
                *          returned. </p>
                */
            assessment?: Assessment;
    }
    export namespace UpdateAssessmentStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssessmentStatusResponse) => any;
    }
    export interface UpdateControlRequest {
            /**
                * <p> The identifier for the control. </p>
                */
            controlId: string | undefined;
            /**
                * <p> The name of the updated control. </p>
                */
            name: string | undefined;
            /**
                * <p> The optional description of the control. </p>
                */
            description?: string;
            /**
                * <p> The steps that you should follow to determine if the control is met. </p>
                */
            testingInformation?: string;
            /**
                * <p> The title of the action plan for remediating the control. </p>
                */
            actionPlanTitle?: string;
            /**
                * <p> The recommended actions to carry out if the control isn't fulfilled. </p>
                */
            actionPlanInstructions?: string;
            /**
                * <p> The data mapping sources for the control. </p>
                */
            controlMappingSources: ControlMappingSource[] | undefined;
    }
    export namespace UpdateControlRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateControlRequest) => any;
    }
    export interface UpdateControlResponse {
            /**
                * <p> The name of the updated control set that the <code>UpdateControl</code> API returned.
                *       </p>
                */
            control?: Control;
    }
    export namespace UpdateControlResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateControlResponse) => any;
    }
    export interface UpdateSettingsRequest {
            /**
                * <p> The Amazon Simple Notification Service (Amazon SNS) topic that Audit Manager sends
                *          notifications to. </p>
                */
            snsTopic?: string;
            /**
                * <p> The default storage destination for assessment reports. </p>
                */
            defaultAssessmentReportsDestination?: AssessmentReportsDestination;
            /**
                * <p> A list of the default audit owners. </p>
                */
            defaultProcessOwners?: Role[];
            /**
                * <p> The KMS key details. </p>
                */
            kmsKey?: string;
    }
    export namespace UpdateSettingsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSettingsRequest) => any;
    }
    export interface UpdateSettingsResponse {
            /**
                * <p> The current list of settings. </p>
                */
            settings?: Settings;
    }
    export namespace UpdateSettingsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSettingsResponse) => any;
    }
    export interface ValidateAssessmentReportIntegrityRequest {
            /**
                * <p> The relative path of the Amazon S3 bucket that the assessment report is stored
                *          in. </p>
                */
            s3RelativePath: string | undefined;
    }
    export namespace ValidateAssessmentReportIntegrityRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidateAssessmentReportIntegrityRequest) => any;
    }
    export interface ValidateAssessmentReportIntegrityResponse {
            /**
                * <p> Specifies whether the signature key is valid. </p>
                */
            signatureValid?: boolean;
            /**
                * <p> The signature algorithm that's used to code sign the assessment report file. </p>
                */
            signatureAlgorithm?: string;
            /**
                * <p> The date and time signature that specifies when the assessment report was created.
                *       </p>
                */
            signatureDateTime?: string;
            /**
                * <p> The unique identifier for the validation signature key. </p>
                */
            signatureKeyId?: string;
            /**
                * <p> Represents any errors that occurred when validating the assessment report. </p>
                */
            validationErrors?: string[];
    }
    export namespace ValidateAssessmentReportIntegrityResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ValidateAssessmentReportIntegrityResponse) => any;
    }
}

declare module '@aws-sdk/client-auditmanager/node_modules/@aws-sdk/client-auditmanager/dist-types/models/AuditManagerServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from AuditManager service.
        */
    export class AuditManagerServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

