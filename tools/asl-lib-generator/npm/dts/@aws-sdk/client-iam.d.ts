// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-iam' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AddClientIDToOpenIDConnectProviderCommandInput, AddClientIDToOpenIDConnectProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AddClientIDToOpenIDConnectProviderCommand";
    import { AddRoleToInstanceProfileCommandInput, AddRoleToInstanceProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AddRoleToInstanceProfileCommand";
    import { AddUserToGroupCommandInput, AddUserToGroupCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AddUserToGroupCommand";
    import { AttachGroupPolicyCommandInput, AttachGroupPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AttachGroupPolicyCommand";
    import { AttachRolePolicyCommandInput, AttachRolePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AttachRolePolicyCommand";
    import { AttachUserPolicyCommandInput, AttachUserPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AttachUserPolicyCommand";
    import { ChangePasswordCommandInput, ChangePasswordCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ChangePasswordCommand";
    import { CreateAccessKeyCommandInput, CreateAccessKeyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateAccessKeyCommand";
    import { CreateAccountAliasCommandInput, CreateAccountAliasCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateAccountAliasCommand";
    import { CreateGroupCommandInput, CreateGroupCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateGroupCommand";
    import { CreateInstanceProfileCommandInput, CreateInstanceProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateInstanceProfileCommand";
    import { CreateLoginProfileCommandInput, CreateLoginProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateLoginProfileCommand";
    import { CreateOpenIDConnectProviderCommandInput, CreateOpenIDConnectProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateOpenIDConnectProviderCommand";
    import { CreatePolicyCommandInput, CreatePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreatePolicyCommand";
    import { CreatePolicyVersionCommandInput, CreatePolicyVersionCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreatePolicyVersionCommand";
    import { CreateRoleCommandInput, CreateRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateRoleCommand";
    import { CreateSAMLProviderCommandInput, CreateSAMLProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateSAMLProviderCommand";
    import { CreateServiceLinkedRoleCommandInput, CreateServiceLinkedRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateServiceLinkedRoleCommand";
    import { CreateServiceSpecificCredentialCommandInput, CreateServiceSpecificCredentialCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateServiceSpecificCredentialCommand";
    import { CreateUserCommandInput, CreateUserCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateUserCommand";
    import { CreateVirtualMFADeviceCommandInput, CreateVirtualMFADeviceCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateVirtualMFADeviceCommand";
    import { DeactivateMFADeviceCommandInput, DeactivateMFADeviceCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeactivateMFADeviceCommand";
    import { DeleteAccessKeyCommandInput, DeleteAccessKeyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteAccessKeyCommand";
    import { DeleteAccountAliasCommandInput, DeleteAccountAliasCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteAccountAliasCommand";
    import { DeleteAccountPasswordPolicyCommandInput, DeleteAccountPasswordPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteAccountPasswordPolicyCommand";
    import { DeleteGroupCommandInput, DeleteGroupCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteGroupCommand";
    import { DeleteGroupPolicyCommandInput, DeleteGroupPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteGroupPolicyCommand";
    import { DeleteInstanceProfileCommandInput, DeleteInstanceProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteInstanceProfileCommand";
    import { DeleteLoginProfileCommandInput, DeleteLoginProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteLoginProfileCommand";
    import { DeleteOpenIDConnectProviderCommandInput, DeleteOpenIDConnectProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteOpenIDConnectProviderCommand";
    import { DeletePolicyCommandInput, DeletePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeletePolicyCommand";
    import { DeletePolicyVersionCommandInput, DeletePolicyVersionCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeletePolicyVersionCommand";
    import { DeleteRoleCommandInput, DeleteRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteRoleCommand";
    import { DeleteRolePermissionsBoundaryCommandInput, DeleteRolePermissionsBoundaryCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteRolePermissionsBoundaryCommand";
    import { DeleteRolePolicyCommandInput, DeleteRolePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteRolePolicyCommand";
    import { DeleteSAMLProviderCommandInput, DeleteSAMLProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteSAMLProviderCommand";
    import { DeleteServerCertificateCommandInput, DeleteServerCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteServerCertificateCommand";
    import { DeleteServiceLinkedRoleCommandInput, DeleteServiceLinkedRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteServiceLinkedRoleCommand";
    import { DeleteServiceSpecificCredentialCommandInput, DeleteServiceSpecificCredentialCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteServiceSpecificCredentialCommand";
    import { DeleteSigningCertificateCommandInput, DeleteSigningCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteSigningCertificateCommand";
    import { DeleteSSHPublicKeyCommandInput, DeleteSSHPublicKeyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteSSHPublicKeyCommand";
    import { DeleteUserCommandInput, DeleteUserCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteUserCommand";
    import { DeleteUserPermissionsBoundaryCommandInput, DeleteUserPermissionsBoundaryCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteUserPermissionsBoundaryCommand";
    import { DeleteUserPolicyCommandInput, DeleteUserPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteUserPolicyCommand";
    import { DeleteVirtualMFADeviceCommandInput, DeleteVirtualMFADeviceCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteVirtualMFADeviceCommand";
    import { DetachGroupPolicyCommandInput, DetachGroupPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DetachGroupPolicyCommand";
    import { DetachRolePolicyCommandInput, DetachRolePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DetachRolePolicyCommand";
    import { DetachUserPolicyCommandInput, DetachUserPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DetachUserPolicyCommand";
    import { EnableMFADeviceCommandInput, EnableMFADeviceCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/EnableMFADeviceCommand";
    import { GenerateCredentialReportCommandInput, GenerateCredentialReportCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GenerateCredentialReportCommand";
    import { GenerateOrganizationsAccessReportCommandInput, GenerateOrganizationsAccessReportCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GenerateOrganizationsAccessReportCommand";
    import { GenerateServiceLastAccessedDetailsCommandInput, GenerateServiceLastAccessedDetailsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GenerateServiceLastAccessedDetailsCommand";
    import { GetAccessKeyLastUsedCommandInput, GetAccessKeyLastUsedCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetAccessKeyLastUsedCommand";
    import { GetAccountAuthorizationDetailsCommandInput, GetAccountAuthorizationDetailsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetAccountAuthorizationDetailsCommand";
    import { GetAccountPasswordPolicyCommandInput, GetAccountPasswordPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetAccountPasswordPolicyCommand";
    import { GetAccountSummaryCommandInput, GetAccountSummaryCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetAccountSummaryCommand";
    import { GetContextKeysForCustomPolicyCommandInput, GetContextKeysForCustomPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetContextKeysForCustomPolicyCommand";
    import { GetContextKeysForPrincipalPolicyCommandInput, GetContextKeysForPrincipalPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetContextKeysForPrincipalPolicyCommand";
    import { GetCredentialReportCommandInput, GetCredentialReportCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetCredentialReportCommand";
    import { GetGroupCommandInput, GetGroupCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetGroupCommand";
    import { GetGroupPolicyCommandInput, GetGroupPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetGroupPolicyCommand";
    import { GetInstanceProfileCommandInput, GetInstanceProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetInstanceProfileCommand";
    import { GetLoginProfileCommandInput, GetLoginProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetLoginProfileCommand";
    import { GetOpenIDConnectProviderCommandInput, GetOpenIDConnectProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetOpenIDConnectProviderCommand";
    import { GetOrganizationsAccessReportCommandInput, GetOrganizationsAccessReportCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetOrganizationsAccessReportCommand";
    import { GetPolicyCommandInput, GetPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetPolicyCommand";
    import { GetPolicyVersionCommandInput, GetPolicyVersionCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetPolicyVersionCommand";
    import { GetRoleCommandInput, GetRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetRoleCommand";
    import { GetRolePolicyCommandInput, GetRolePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetRolePolicyCommand";
    import { GetSAMLProviderCommandInput, GetSAMLProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetSAMLProviderCommand";
    import { GetServerCertificateCommandInput, GetServerCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetServerCertificateCommand";
    import { GetServiceLastAccessedDetailsCommandInput, GetServiceLastAccessedDetailsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetServiceLastAccessedDetailsCommand";
    import { GetServiceLastAccessedDetailsWithEntitiesCommandInput, GetServiceLastAccessedDetailsWithEntitiesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetServiceLastAccessedDetailsWithEntitiesCommand";
    import { GetServiceLinkedRoleDeletionStatusCommandInput, GetServiceLinkedRoleDeletionStatusCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetServiceLinkedRoleDeletionStatusCommand";
    import { GetSSHPublicKeyCommandInput, GetSSHPublicKeyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetSSHPublicKeyCommand";
    import { GetUserCommandInput, GetUserCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetUserCommand";
    import { GetUserPolicyCommandInput, GetUserPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetUserPolicyCommand";
    import { ListAccessKeysCommandInput, ListAccessKeysCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAccessKeysCommand";
    import { ListAccountAliasesCommandInput, ListAccountAliasesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAccountAliasesCommand";
    import { ListAttachedGroupPoliciesCommandInput, ListAttachedGroupPoliciesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAttachedGroupPoliciesCommand";
    import { ListAttachedRolePoliciesCommandInput, ListAttachedRolePoliciesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAttachedRolePoliciesCommand";
    import { ListAttachedUserPoliciesCommandInput, ListAttachedUserPoliciesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAttachedUserPoliciesCommand";
    import { ListEntitiesForPolicyCommandInput, ListEntitiesForPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListEntitiesForPolicyCommand";
    import { ListGroupPoliciesCommandInput, ListGroupPoliciesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListGroupPoliciesCommand";
    import { ListGroupsCommandInput, ListGroupsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListGroupsCommand";
    import { ListGroupsForUserCommandInput, ListGroupsForUserCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListGroupsForUserCommand";
    import { ListInstanceProfilesCommandInput, ListInstanceProfilesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListInstanceProfilesCommand";
    import { ListInstanceProfilesForRoleCommandInput, ListInstanceProfilesForRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListInstanceProfilesForRoleCommand";
    import { ListInstanceProfileTagsCommandInput, ListInstanceProfileTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListInstanceProfileTagsCommand";
    import { ListMFADevicesCommandInput, ListMFADevicesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListMFADevicesCommand";
    import { ListMFADeviceTagsCommandInput, ListMFADeviceTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListMFADeviceTagsCommand";
    import { ListOpenIDConnectProvidersCommandInput, ListOpenIDConnectProvidersCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListOpenIDConnectProvidersCommand";
    import { ListOpenIDConnectProviderTagsCommandInput, ListOpenIDConnectProviderTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListOpenIDConnectProviderTagsCommand";
    import { ListPoliciesCommandInput, ListPoliciesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListPoliciesCommand";
    import { ListPoliciesGrantingServiceAccessCommandInput, ListPoliciesGrantingServiceAccessCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListPoliciesGrantingServiceAccessCommand";
    import { ListPolicyTagsCommandInput, ListPolicyTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListPolicyTagsCommand";
    import { ListPolicyVersionsCommandInput, ListPolicyVersionsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListPolicyVersionsCommand";
    import { ListRolePoliciesCommandInput, ListRolePoliciesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListRolePoliciesCommand";
    import { ListRolesCommandInput, ListRolesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListRolesCommand";
    import { ListRoleTagsCommandInput, ListRoleTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListRoleTagsCommand";
    import { ListSAMLProvidersCommandInput, ListSAMLProvidersCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListSAMLProvidersCommand";
    import { ListSAMLProviderTagsCommandInput, ListSAMLProviderTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListSAMLProviderTagsCommand";
    import { ListServerCertificatesCommandInput, ListServerCertificatesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListServerCertificatesCommand";
    import { ListServerCertificateTagsCommandInput, ListServerCertificateTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListServerCertificateTagsCommand";
    import { ListServiceSpecificCredentialsCommandInput, ListServiceSpecificCredentialsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListServiceSpecificCredentialsCommand";
    import { ListSigningCertificatesCommandInput, ListSigningCertificatesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListSigningCertificatesCommand";
    import { ListSSHPublicKeysCommandInput, ListSSHPublicKeysCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListSSHPublicKeysCommand";
    import { ListUserPoliciesCommandInput, ListUserPoliciesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListUserPoliciesCommand";
    import { ListUsersCommandInput, ListUsersCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListUsersCommand";
    import { ListUserTagsCommandInput, ListUserTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListUserTagsCommand";
    import { ListVirtualMFADevicesCommandInput, ListVirtualMFADevicesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListVirtualMFADevicesCommand";
    import { PutGroupPolicyCommandInput, PutGroupPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutGroupPolicyCommand";
    import { PutRolePermissionsBoundaryCommandInput, PutRolePermissionsBoundaryCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutRolePermissionsBoundaryCommand";
    import { PutRolePolicyCommandInput, PutRolePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutRolePolicyCommand";
    import { PutUserPermissionsBoundaryCommandInput, PutUserPermissionsBoundaryCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutUserPermissionsBoundaryCommand";
    import { PutUserPolicyCommandInput, PutUserPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutUserPolicyCommand";
    import { RemoveClientIDFromOpenIDConnectProviderCommandInput, RemoveClientIDFromOpenIDConnectProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/RemoveClientIDFromOpenIDConnectProviderCommand";
    import { RemoveRoleFromInstanceProfileCommandInput, RemoveRoleFromInstanceProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/RemoveRoleFromInstanceProfileCommand";
    import { RemoveUserFromGroupCommandInput, RemoveUserFromGroupCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/RemoveUserFromGroupCommand";
    import { ResetServiceSpecificCredentialCommandInput, ResetServiceSpecificCredentialCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ResetServiceSpecificCredentialCommand";
    import { ResyncMFADeviceCommandInput, ResyncMFADeviceCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ResyncMFADeviceCommand";
    import { SetDefaultPolicyVersionCommandInput, SetDefaultPolicyVersionCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/SetDefaultPolicyVersionCommand";
    import { SetSecurityTokenServicePreferencesCommandInput, SetSecurityTokenServicePreferencesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/SetSecurityTokenServicePreferencesCommand";
    import { SimulateCustomPolicyCommandInput, SimulateCustomPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/SimulateCustomPolicyCommand";
    import { SimulatePrincipalPolicyCommandInput, SimulatePrincipalPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/SimulatePrincipalPolicyCommand";
    import { TagInstanceProfileCommandInput, TagInstanceProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagInstanceProfileCommand";
    import { TagMFADeviceCommandInput, TagMFADeviceCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagMFADeviceCommand";
    import { TagOpenIDConnectProviderCommandInput, TagOpenIDConnectProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagOpenIDConnectProviderCommand";
    import { TagPolicyCommandInput, TagPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagPolicyCommand";
    import { TagRoleCommandInput, TagRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagRoleCommand";
    import { TagSAMLProviderCommandInput, TagSAMLProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagSAMLProviderCommand";
    import { TagServerCertificateCommandInput, TagServerCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagServerCertificateCommand";
    import { TagUserCommandInput, TagUserCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagUserCommand";
    import { UntagInstanceProfileCommandInput, UntagInstanceProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagInstanceProfileCommand";
    import { UntagMFADeviceCommandInput, UntagMFADeviceCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagMFADeviceCommand";
    import { UntagOpenIDConnectProviderCommandInput, UntagOpenIDConnectProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagOpenIDConnectProviderCommand";
    import { UntagPolicyCommandInput, UntagPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagPolicyCommand";
    import { UntagRoleCommandInput, UntagRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagRoleCommand";
    import { UntagSAMLProviderCommandInput, UntagSAMLProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagSAMLProviderCommand";
    import { UntagServerCertificateCommandInput, UntagServerCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagServerCertificateCommand";
    import { UntagUserCommandInput, UntagUserCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagUserCommand";
    import { UpdateAccessKeyCommandInput, UpdateAccessKeyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateAccessKeyCommand";
    import { UpdateAccountPasswordPolicyCommandInput, UpdateAccountPasswordPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateAccountPasswordPolicyCommand";
    import { UpdateAssumeRolePolicyCommandInput, UpdateAssumeRolePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateAssumeRolePolicyCommand";
    import { UpdateGroupCommandInput, UpdateGroupCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateGroupCommand";
    import { UpdateLoginProfileCommandInput, UpdateLoginProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateLoginProfileCommand";
    import { UpdateOpenIDConnectProviderThumbprintCommandInput, UpdateOpenIDConnectProviderThumbprintCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateOpenIDConnectProviderThumbprintCommand";
    import { UpdateRoleCommandInput, UpdateRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateRoleCommand";
    import { UpdateRoleDescriptionCommandInput, UpdateRoleDescriptionCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateRoleDescriptionCommand";
    import { UpdateSAMLProviderCommandInput, UpdateSAMLProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateSAMLProviderCommand";
    import { UpdateServerCertificateCommandInput, UpdateServerCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateServerCertificateCommand";
    import { UpdateServiceSpecificCredentialCommandInput, UpdateServiceSpecificCredentialCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateServiceSpecificCredentialCommand";
    import { UpdateSigningCertificateCommandInput, UpdateSigningCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateSigningCertificateCommand";
    import { UpdateSSHPublicKeyCommandInput, UpdateSSHPublicKeyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateSSHPublicKeyCommand";
    import { UpdateUserCommandInput, UpdateUserCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateUserCommand";
    import { UploadServerCertificateCommandInput, UploadServerCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UploadServerCertificateCommand";
    import { UploadSigningCertificateCommandInput, UploadSigningCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UploadSigningCertificateCommand";
    import { UploadSSHPublicKeyCommandInput, UploadSSHPublicKeyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UploadSSHPublicKeyCommand";
    import { IAMClient } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    /**
        * <fullname>Identity and Access Management</fullname>
        *          <p>Identity and Access Management (IAM) is a web service for securely controlling
        *       access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials
        *       such as access keys, and permissions that control which Amazon Web Services resources users and
        *       applications can access. For more information about IAM, see <a href="http://aws.amazon.com/iam/">Identity and Access Management (IAM)</a> and the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/">Identity and Access Management User Guide</a>.</p>
        */
    export class IAM extends IAMClient {
            /**
                * <p>Adds a new client ID (also known as audience) to the list of client IDs already
                *             registered for the specified IAM OpenID Connect (OIDC) provider resource.</p>
                *         <p>This operation is idempotent; it does not fail or return an error if you add an
                *             existing client ID to the provider.</p>
                */
            addClientIDToOpenIDConnectProvider(args: AddClientIDToOpenIDConnectProviderCommandInput, options?: __HttpHandlerOptions): Promise<AddClientIDToOpenIDConnectProviderCommandOutput>;
            addClientIDToOpenIDConnectProvider(args: AddClientIDToOpenIDConnectProviderCommandInput, cb: (err: any, data?: AddClientIDToOpenIDConnectProviderCommandOutput) => void): void;
            addClientIDToOpenIDConnectProvider(args: AddClientIDToOpenIDConnectProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddClientIDToOpenIDConnectProviderCommandOutput) => void): void;
            /**
                * <p>Adds the specified IAM role to the specified instance profile. An instance profile
                *             can contain only one role, and this quota cannot be increased. You can remove the
                *             existing role and then add a different role to an instance profile. You must then wait
                *             for the change to appear across all of Amazon Web Services because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual
                *                 consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the
                *                 instance profile</a>, or you can stop your instance and then restart it.</p>
                *         <note>
                *             <p>The caller of this operation must be granted the <code>PassRole</code> permission
                *                 on the IAM role by a permissions policy.</p>
                *         </note>
                *         <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with roles</a>. For more
                *             information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About instance
                *             profiles</a>.</p>
                */
            addRoleToInstanceProfile(args: AddRoleToInstanceProfileCommandInput, options?: __HttpHandlerOptions): Promise<AddRoleToInstanceProfileCommandOutput>;
            addRoleToInstanceProfile(args: AddRoleToInstanceProfileCommandInput, cb: (err: any, data?: AddRoleToInstanceProfileCommandOutput) => void): void;
            addRoleToInstanceProfile(args: AddRoleToInstanceProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddRoleToInstanceProfileCommandOutput) => void): void;
            /**
                * <p>Adds the specified user to the specified group.</p>
                */
            addUserToGroup(args: AddUserToGroupCommandInput, options?: __HttpHandlerOptions): Promise<AddUserToGroupCommandOutput>;
            addUserToGroup(args: AddUserToGroupCommandInput, cb: (err: any, data?: AddUserToGroupCommandOutput) => void): void;
            addUserToGroup(args: AddUserToGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddUserToGroupCommandOutput) => void): void;
            /**
                * <p>Attaches the specified managed policy to the specified IAM group.</p>
                *         <p>You use this operation to attach a managed policy to a group. To embed an inline
                *             policy in a group, use <a>PutGroupPolicy</a>.</p>
                *         <p>As a best practice, you can validate your IAM policies.
                *      To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a>
                *             in the <i>IAM User Guide</i>.</p>
                *         <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            attachGroupPolicy(args: AttachGroupPolicyCommandInput, options?: __HttpHandlerOptions): Promise<AttachGroupPolicyCommandOutput>;
            attachGroupPolicy(args: AttachGroupPolicyCommandInput, cb: (err: any, data?: AttachGroupPolicyCommandOutput) => void): void;
            attachGroupPolicy(args: AttachGroupPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AttachGroupPolicyCommandOutput) => void): void;
            /**
                * <p>Attaches the specified managed policy to the specified IAM role. When you attach a
                *             managed policy to a role, the managed policy becomes part of the role's permission
                *             (access) policy.</p>
                *         <note>
                *             <p>You cannot use a managed policy as the role's trust policy. The role's trust
                *                 policy is created at the same time as the role, using <a>CreateRole</a>.
                *                 You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p>
                *         </note>
                *         <p>Use this operation to attach a <i>managed</i> policy to a role. To embed
                *             an inline policy in a role, use <a>PutRolePolicy</a>. For more information
                *             about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                *         <p>As a best practice, you can validate your IAM policies.
                *      To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a>
                *             in the <i>IAM User Guide</i>.</p>
                */
            attachRolePolicy(args: AttachRolePolicyCommandInput, options?: __HttpHandlerOptions): Promise<AttachRolePolicyCommandOutput>;
            attachRolePolicy(args: AttachRolePolicyCommandInput, cb: (err: any, data?: AttachRolePolicyCommandOutput) => void): void;
            attachRolePolicy(args: AttachRolePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AttachRolePolicyCommandOutput) => void): void;
            /**
                * <p>Attaches the specified managed policy to the specified user.</p>
                *         <p>You use this operation to attach a <i>managed</i> policy to a user. To
                *             embed an inline policy in a user, use <a>PutUserPolicy</a>.</p>
                *         <p>As a best practice, you can validate your IAM policies.
                *      To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a>
                *             in the <i>IAM User Guide</i>.</p>
                *         <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            attachUserPolicy(args: AttachUserPolicyCommandInput, options?: __HttpHandlerOptions): Promise<AttachUserPolicyCommandOutput>;
            attachUserPolicy(args: AttachUserPolicyCommandInput, cb: (err: any, data?: AttachUserPolicyCommandOutput) => void): void;
            attachUserPolicy(args: AttachUserPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AttachUserPolicyCommandOutput) => void): void;
            /**
                * <p>Changes the password of the IAM user who is calling this operation. This operation
                *             can be performed using the CLI, the Amazon Web Services API, or the <b>My
                *                 Security Credentials</b> page in the Amazon Web Services Management Console. The Amazon Web Services account root user
                *             password is not affected by this operation.</p>
                *         <p>Use <a>UpdateLoginProfile</a> to use the CLI, the Amazon Web Services API, or the
                *                 <b>Users</b> page in the IAM console to change the
                *             password for any IAM user. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing
                *                 passwords</a> in the <i>IAM User Guide</i>.</p>
                */
            changePassword(args: ChangePasswordCommandInput, options?: __HttpHandlerOptions): Promise<ChangePasswordCommandOutput>;
            changePassword(args: ChangePasswordCommandInput, cb: (err: any, data?: ChangePasswordCommandOutput) => void): void;
            changePassword(args: ChangePasswordCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ChangePasswordCommandOutput) => void): void;
            /**
                * <p> Creates a new Amazon Web Services secret access key and corresponding Amazon Web Services access key ID for the
                *             specified user. The default status for new keys is <code>Active</code>.</p>
                *         <p>If you do not specify a user name, IAM determines the user name implicitly based on
                *             the Amazon Web Services access key ID signing the request. This operation works for access keys under
                *             the Amazon Web Services account. Consequently, you can use this operation to manage Amazon Web Services account root
                *             user credentials. This is true even if the Amazon Web Services account has no associated users.</p>
                *         <p> For information about quotas on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS
                *                 quotas</a> in the <i>IAM User Guide</i>.</p>
                *         <important>
                *             <p>To ensure the security of your Amazon Web Services account, the secret access key is accessible
                *                 only during key and user creation. You must save the key (for example, in a text
                *                 file) if you want to be able to access it again. If a secret key is lost, you can
                *                 delete the access keys for the associated user and then create new keys.</p>
                *         </important>
                */
            createAccessKey(args: CreateAccessKeyCommandInput, options?: __HttpHandlerOptions): Promise<CreateAccessKeyCommandOutput>;
            createAccessKey(args: CreateAccessKeyCommandInput, cb: (err: any, data?: CreateAccessKeyCommandOutput) => void): void;
            createAccessKey(args: CreateAccessKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAccessKeyCommandOutput) => void): void;
            /**
                * <p>Creates an alias for your Amazon Web Services account. For information about using an Amazon Web Services account
                *             alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an
                *                 alias for your Amazon Web Services account ID</a> in the
                *             <i>IAM User Guide</i>.</p>
                */
            createAccountAlias(args: CreateAccountAliasCommandInput, options?: __HttpHandlerOptions): Promise<CreateAccountAliasCommandOutput>;
            createAccountAlias(args: CreateAccountAliasCommandInput, cb: (err: any, data?: CreateAccountAliasCommandOutput) => void): void;
            createAccountAlias(args: CreateAccountAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateAccountAliasCommandOutput) => void): void;
            /**
                * <p>Creates a new group.</p>
                *         <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS
                *                 quotas</a> in the <i>IAM User Guide</i>.</p>
                */
            createGroup(args: CreateGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateGroupCommandOutput>;
            createGroup(args: CreateGroupCommandInput, cb: (err: any, data?: CreateGroupCommandOutput) => void): void;
            createGroup(args: CreateGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateGroupCommandOutput) => void): void;
            /**
                * <p> Creates a new instance profile. For information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html">Using
                *                 roles for applications on Amazon EC2</a> in the
                *                 <i>IAM User Guide</i>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html#ec2-instance-profile">Instance profiles</a> in the <i>Amazon EC2 User Guide</i>.</p>
                *         <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM object
                *                 quotas</a> in the <i>IAM User Guide</i>.</p>
                */
            createInstanceProfile(args: CreateInstanceProfileCommandInput, options?: __HttpHandlerOptions): Promise<CreateInstanceProfileCommandOutput>;
            createInstanceProfile(args: CreateInstanceProfileCommandInput, cb: (err: any, data?: CreateInstanceProfileCommandOutput) => void): void;
            createInstanceProfile(args: CreateInstanceProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateInstanceProfileCommandOutput) => void): void;
            /**
                * <p>Creates a password for the specified IAM user. A password allows an IAM user to
                *             access Amazon Web Services services through the Amazon Web Services Management Console.</p>
                *         <p>You can use the CLI, the Amazon Web Services API, or the <b>Users</b>
                *             page in the IAM console to create a password for any IAM user. Use <a>ChangePassword</a> to update your own existing password in the <b>My Security Credentials</b> page in the Amazon Web Services Management Console.</p>
                *         <p>For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing passwords</a> in the
                *                 <i>IAM User Guide</i>.</p>
                */
            createLoginProfile(args: CreateLoginProfileCommandInput, options?: __HttpHandlerOptions): Promise<CreateLoginProfileCommandOutput>;
            createLoginProfile(args: CreateLoginProfileCommandInput, cb: (err: any, data?: CreateLoginProfileCommandOutput) => void): void;
            createLoginProfile(args: CreateLoginProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateLoginProfileCommandOutput) => void): void;
            /**
                * <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p>
                *         <p>The OIDC provider that you create with this operation can be used as a principal in a
                *             role's trust policy. Such a policy establishes a trust relationship between Amazon Web Services and
                *             the OIDC provider.</p>
                *         <p>If you are using an OIDC identity provider from Google, Facebook, or Amazon Cognito, you don't
                *             need to create a separate IAM identity provider. These OIDC identity providers are
                *             already built-in to Amazon Web Services and are available for your use. Instead, you can move directly
                *             to creating new roles using your identity provider. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_oidc.html">Creating
                *                 a role for web identity or OpenID connect federation</a> in the <i>IAM
                *                 User Guide</i>.</p>
                *         <p>When you create the IAM OIDC provider, you specify the following:</p>
                *         <ul>
                *             <li>
                *                 <p>The URL of the OIDC identity provider (IdP) to trust</p>
                *             </li>
                *             <li>
                *                 <p>A list of client IDs (also known as audiences) that identify the application
                *                     or applications allowed to authenticate using the OIDC provider</p>
                *             </li>
                *             <li>
                *                 <p>A list of thumbprints of one or more server certificates that the IdP
                *                     uses</p>
                *             </li>
                *          </ul>
                *         <p>You get all of this information from the OIDC IdP you want to use to access
                *             Amazon Web Services.</p>
                *         <note>
                *             <p>Amazon Web Services secures communication with some OIDC identity providers (IdPs) through our
                *             library of trusted certificate authorities (CAs) instead of using a certificate
                *             thumbprint to verify your IdP server certificate. These OIDC IdPs include Google, and
                *             those that use an Amazon S3 bucket to host a JSON Web Key Set (JWKS) endpoint. In these
                *             cases, your legacy thumbprint remains in your configuration, but is no longer used for validation.</p>
                *          </note>
                *         <note>
                *             <p>The trust for the OIDC provider is derived from the IAM provider that this
                *                 operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged
                *                 users.</p>
                *         </note>
                */
            createOpenIDConnectProvider(args: CreateOpenIDConnectProviderCommandInput, options?: __HttpHandlerOptions): Promise<CreateOpenIDConnectProviderCommandOutput>;
            createOpenIDConnectProvider(args: CreateOpenIDConnectProviderCommandInput, cb: (err: any, data?: CreateOpenIDConnectProviderCommandOutput) => void): void;
            createOpenIDConnectProvider(args: CreateOpenIDConnectProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateOpenIDConnectProviderCommandOutput) => void): void;
            /**
                * <p>Creates a new managed policy for your Amazon Web Services account.</p>
                *         <p>This operation creates a policy version with a version identifier of <code>v1</code>
                *             and sets v1 as the policy's default version. For more information about policy versions,
                *             see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed policies</a> in the
                *                 <i>IAM User Guide</i>.</p>
                *         <p>As a best practice, you can validate your IAM policies.
                *      To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a>
                *             in the <i>IAM User Guide</i>.</p>
                *         <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
                *                 policies and inline policies</a> in the
                *             <i>IAM User Guide</i>.</p>
                */
            createPolicy(args: CreatePolicyCommandInput, options?: __HttpHandlerOptions): Promise<CreatePolicyCommandOutput>;
            createPolicy(args: CreatePolicyCommandInput, cb: (err: any, data?: CreatePolicyCommandOutput) => void): void;
            createPolicy(args: CreatePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePolicyCommandOutput) => void): void;
            /**
                * <p>Creates a new version of the specified managed policy. To update a managed policy, you
                *             create a new policy version. A managed policy can have up to five versions. If the
                *             policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p>
                *         <p>Optionally, you can set the new version as the policy's default version. The default
                *             version is the version that is in effect for the IAM users, groups, and roles to which
                *             the policy is attached.</p>
                *         <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            createPolicyVersion(args: CreatePolicyVersionCommandInput, options?: __HttpHandlerOptions): Promise<CreatePolicyVersionCommandOutput>;
            createPolicyVersion(args: CreatePolicyVersionCommandInput, cb: (err: any, data?: CreatePolicyVersionCommandOutput) => void): void;
            createPolicyVersion(args: CreatePolicyVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePolicyVersionCommandOutput) => void): void;
            /**
                * <p>Creates a new role for your Amazon Web Services account. For more information about roles, see
                *                 <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM
                *                 roles</a>. For information about quotas for role names and the number of roles
                *             you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the
                *                 <i>IAM User Guide</i>.</p>
                */
            createRole(args: CreateRoleCommandInput, options?: __HttpHandlerOptions): Promise<CreateRoleCommandOutput>;
            createRole(args: CreateRoleCommandInput, cb: (err: any, data?: CreateRoleCommandOutput) => void): void;
            createRole(args: CreateRoleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRoleCommandOutput) => void): void;
            /**
                * <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML
                *             2.0.</p>
                *         <p>The SAML provider resource that you create with this operation can be used as a
                *             principal in an IAM role's trust policy. Such a policy can enable federated users who
                *             sign in using the SAML IdP to assume the role. You can create an IAM role that
                *             supports Web-based single sign-on (SSO) to the Amazon Web Services Management Console or one that supports API access
                *             to Amazon Web Services.</p>
                *         <p>When you create the SAML provider resource, you upload a SAML metadata document that
                *             you get from your IdP. That document includes the issuer's name, expiration information,
                *             and keys that can be used to validate the SAML authentication response (assertions) that
                *             the IdP sends. You must generate the metadata document using the identity management
                *             software that is used as your organization's IdP.</p>
                *         <note>
                *             <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
                *         </note>
                *         <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0
                *                 federated users to access the Amazon Web Services Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based
                *                 federation</a> in the <i>IAM User Guide</i>.</p>
                */
            createSAMLProvider(args: CreateSAMLProviderCommandInput, options?: __HttpHandlerOptions): Promise<CreateSAMLProviderCommandOutput>;
            createSAMLProvider(args: CreateSAMLProviderCommandInput, cb: (err: any, data?: CreateSAMLProviderCommandOutput) => void): void;
            createSAMLProvider(args: CreateSAMLProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateSAMLProviderCommandOutput) => void): void;
            /**
                * <p>Creates an IAM role that is linked to a specific Amazon Web Services service. The service controls
                *             the attached policies and when the role can be deleted. This helps ensure that the
                *             service is not broken by an unexpectedly changed or deleted role, which could put your
                *             Amazon Web Services resources into an unknown state. Allowing the service to control the role helps
                *             improve service stability and proper cleanup when a service and its role are no longer
                *             needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using service-linked
                *                 roles</a> in the <i>IAM User Guide</i>. </p>
                *         <p>To attach a policy to this service-linked role, you must make the request using the
                *             Amazon Web Services service that depends on this role.</p>
                */
            createServiceLinkedRole(args: CreateServiceLinkedRoleCommandInput, options?: __HttpHandlerOptions): Promise<CreateServiceLinkedRoleCommandOutput>;
            createServiceLinkedRole(args: CreateServiceLinkedRoleCommandInput, cb: (err: any, data?: CreateServiceLinkedRoleCommandOutput) => void): void;
            createServiceLinkedRole(args: CreateServiceLinkedRoleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateServiceLinkedRoleCommandOutput) => void): void;
            /**
                * <p>Generates a set of credentials consisting of a user name and password that can be used
                *             to access the service specified in the request. These credentials are generated by
                *             IAM, and can be used only for the specified service. </p>
                *         <p>You can have a maximum of two sets of service-specific credentials for each supported
                *             service per user.</p>
                *         <p>You can create service-specific credentials for CodeCommit and Amazon Keyspaces (for Apache
                *             Cassandra).</p>
                *         <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p>
                *         <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM
                *                 with CodeCommit: Git credentials, SSH keys, and Amazon Web Services access keys</a> in the
                *                 <i>IAM User Guide</i>.</p>
                */
            createServiceSpecificCredential(args: CreateServiceSpecificCredentialCommandInput, options?: __HttpHandlerOptions): Promise<CreateServiceSpecificCredentialCommandOutput>;
            createServiceSpecificCredential(args: CreateServiceSpecificCredentialCommandInput, cb: (err: any, data?: CreateServiceSpecificCredentialCommandOutput) => void): void;
            createServiceSpecificCredential(args: CreateServiceSpecificCredentialCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateServiceSpecificCredentialCommandOutput) => void): void;
            /**
                * <p>Creates a new IAM user for your Amazon Web Services account.</p>
                *         <p> For information about quotas for the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS
                *                 quotas</a> in the <i>IAM User Guide</i>.</p>
                */
            createUser(args: CreateUserCommandInput, options?: __HttpHandlerOptions): Promise<CreateUserCommandOutput>;
            createUser(args: CreateUserCommandInput, cb: (err: any, data?: CreateUserCommandOutput) => void): void;
            createUser(args: CreateUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateUserCommandOutput) => void): void;
            /**
                * <p>Creates a new virtual MFA device for the Amazon Web Services account. After creating the virtual
                *             MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user.
                *             For more information about creating and working with virtual MFA devices, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a virtual MFA
                *                 device</a> in the <i>IAM User Guide</i>.</p>
                *         <p>For information about the maximum number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS
                *                 quotas</a> in the <i>IAM User Guide</i>.</p>
                *         <important>
                *             <p>The seed information contained in the QR code and the Base32 string should be
                *                 treated like any other secret access information. In other words, protect the seed
                *                 information as you would your Amazon Web Services access keys or your passwords. After you
                *                 provision your virtual device, you should ensure that the information is destroyed
                *                 following secure procedures.</p>
                *         </important>
                */
            createVirtualMFADevice(args: CreateVirtualMFADeviceCommandInput, options?: __HttpHandlerOptions): Promise<CreateVirtualMFADeviceCommandOutput>;
            createVirtualMFADevice(args: CreateVirtualMFADeviceCommandInput, cb: (err: any, data?: CreateVirtualMFADeviceCommandOutput) => void): void;
            createVirtualMFADevice(args: CreateVirtualMFADeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateVirtualMFADeviceCommandOutput) => void): void;
            /**
                * <p>Deactivates the specified MFA device and removes it from association with the user
                *             name for which it was originally enabled.</p>
                *         <p>For more information about creating and working with virtual MFA devices, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a virtual
                *                 multi-factor authentication (MFA) device</a> in the
                *                 <i>IAM User Guide</i>.</p>
                */
            deactivateMFADevice(args: DeactivateMFADeviceCommandInput, options?: __HttpHandlerOptions): Promise<DeactivateMFADeviceCommandOutput>;
            deactivateMFADevice(args: DeactivateMFADeviceCommandInput, cb: (err: any, data?: DeactivateMFADeviceCommandOutput) => void): void;
            deactivateMFADevice(args: DeactivateMFADeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeactivateMFADeviceCommandOutput) => void): void;
            /**
                * <p>Deletes the access key pair associated with the specified IAM user.</p>
                *         <p>If you do not specify a user name, IAM determines the user name implicitly based on
                *             the Amazon Web Services access key ID signing the request. This operation works for access keys under
                *             the Amazon Web Services account. Consequently, you can use this operation to manage Amazon Web Services account root
                *             user credentials even if the Amazon Web Services account has no associated users.</p>
                */
            deleteAccessKey(args: DeleteAccessKeyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAccessKeyCommandOutput>;
            deleteAccessKey(args: DeleteAccessKeyCommandInput, cb: (err: any, data?: DeleteAccessKeyCommandOutput) => void): void;
            deleteAccessKey(args: DeleteAccessKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAccessKeyCommandOutput) => void): void;
            /**
                * <p> Deletes the specified Amazon Web Services account alias. For information about using an Amazon Web Services
                *             account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an alias for your Amazon Web Services account ID</a> in the
                *                 <i>IAM User Guide</i>.</p>
                */
            deleteAccountAlias(args: DeleteAccountAliasCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAccountAliasCommandOutput>;
            deleteAccountAlias(args: DeleteAccountAliasCommandInput, cb: (err: any, data?: DeleteAccountAliasCommandOutput) => void): void;
            deleteAccountAlias(args: DeleteAccountAliasCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAccountAliasCommandOutput) => void): void;
            /**
                * <p>Deletes the password policy for the Amazon Web Services account. There are no parameters.</p>
                */
            deleteAccountPasswordPolicy(args: DeleteAccountPasswordPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteAccountPasswordPolicyCommandOutput>;
            deleteAccountPasswordPolicy(args: DeleteAccountPasswordPolicyCommandInput, cb: (err: any, data?: DeleteAccountPasswordPolicyCommandOutput) => void): void;
            deleteAccountPasswordPolicy(args: DeleteAccountPasswordPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteAccountPasswordPolicyCommandOutput) => void): void;
            /**
                * <p>Deletes the specified IAM group. The group must not contain any users or have any
                *             attached policies.</p>
                */
            deleteGroup(args: DeleteGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGroupCommandOutput>;
            deleteGroup(args: DeleteGroupCommandInput, cb: (err: any, data?: DeleteGroupCommandOutput) => void): void;
            deleteGroup(args: DeleteGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGroupCommandOutput) => void): void;
            /**
                * <p>Deletes the specified inline policy that is embedded in the specified IAM
                *             group.</p>
                *         <p>A group can also have managed policies attached to it. To detach a managed policy from
                *             a group, use <a>DetachGroupPolicy</a>. For more information about policies,
                *             refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            deleteGroupPolicy(args: DeleteGroupPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteGroupPolicyCommandOutput>;
            deleteGroupPolicy(args: DeleteGroupPolicyCommandInput, cb: (err: any, data?: DeleteGroupPolicyCommandOutput) => void): void;
            deleteGroupPolicy(args: DeleteGroupPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteGroupPolicyCommandOutput) => void): void;
            /**
                * <p>Deletes the specified instance profile. The instance profile must not have an
                *             associated role.</p>
                *         <important>
                *             <p>Make sure that you do not have any Amazon EC2 instances running with the instance
                *                 profile you are about to delete. Deleting a role or instance profile that is
                *                 associated with a running instance will break any applications running on the
                *                 instance.</p>
                *         </important>
                *         <p>For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About instance
                *             profiles</a>.</p>
                */
            deleteInstanceProfile(args: DeleteInstanceProfileCommandInput, options?: __HttpHandlerOptions): Promise<DeleteInstanceProfileCommandOutput>;
            deleteInstanceProfile(args: DeleteInstanceProfileCommandInput, cb: (err: any, data?: DeleteInstanceProfileCommandOutput) => void): void;
            deleteInstanceProfile(args: DeleteInstanceProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteInstanceProfileCommandOutput) => void): void;
            /**
                * <p>Deletes the password for the specified IAM user, which terminates the user's ability
                *             to access Amazon Web Services services through the Amazon Web Services Management Console.</p>
                *         <p>You can use the CLI, the Amazon Web Services API, or the <b>Users</b>
                *             page in the IAM console to delete a password for any IAM user. You can use <a>ChangePassword</a> to update, but not delete, your own password in the
                *                 <b>My Security Credentials</b> page in the
                *             Amazon Web Services Management Console.</p>
                *         <important>
                *             <p> Deleting a user's password does not prevent a user from accessing Amazon Web Services through
                *                 the command line interface or the API. To prevent all user access, you must also
                *                 either make any access keys inactive or delete them. For more information about
                *                 making keys inactive or deleting them, see <a>UpdateAccessKey</a> and
                *                     <a>DeleteAccessKey</a>. </p>
                *         </important>
                */
            deleteLoginProfile(args: DeleteLoginProfileCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLoginProfileCommandOutput>;
            deleteLoginProfile(args: DeleteLoginProfileCommandInput, cb: (err: any, data?: DeleteLoginProfileCommandOutput) => void): void;
            deleteLoginProfile(args: DeleteLoginProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLoginProfileCommandOutput) => void): void;
            /**
                * <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p>
                *         <p>Deleting an IAM OIDC provider resource does not update any roles that reference the
                *             provider as a principal in their trust policies. Any attempt to assume a role that
                *             references a deleted provider fails.</p>
                *         <p>This operation is idempotent; it does not fail or return an error if you call the
                *             operation for a provider that does not exist.</p>
                */
            deleteOpenIDConnectProvider(args: DeleteOpenIDConnectProviderCommandInput, options?: __HttpHandlerOptions): Promise<DeleteOpenIDConnectProviderCommandOutput>;
            deleteOpenIDConnectProvider(args: DeleteOpenIDConnectProviderCommandInput, cb: (err: any, data?: DeleteOpenIDConnectProviderCommandOutput) => void): void;
            deleteOpenIDConnectProvider(args: DeleteOpenIDConnectProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteOpenIDConnectProviderCommandOutput) => void): void;
            /**
                * <p>Deletes the specified managed policy.</p>
                *         <p>Before you can delete a managed policy, you must first detach the policy from all
                *             users, groups, and roles that it is attached to. In addition, you must delete all the
                *             policy's versions. The following steps describe the process for deleting a managed
                *             policy:</p>
                *         <ul>
                *             <li>
                *                 <p>Detach the policy from all users, groups, and roles that the policy is
                *                     attached to, using <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a>. To
                *                     list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p>
                *             </li>
                *             <li>
                *                 <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>.
                *                     To list the policy's versions, use <a>ListPolicyVersions</a>. You
                *                     cannot use <a>DeletePolicyVersion</a> to delete the version that is
                *                     marked as the default version. You delete the policy's default version in the
                *                     next step of the process.</p>
                *             </li>
                *             <li>
                *                 <p>Delete the policy (this automatically deletes the policy's default version)
                *                     using this operation.</p>
                *             </li>
                *          </ul>
                *         <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            deletePolicy(args: DeletePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeletePolicyCommandOutput>;
            deletePolicy(args: DeletePolicyCommandInput, cb: (err: any, data?: DeletePolicyCommandOutput) => void): void;
            deletePolicy(args: DeletePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePolicyCommandOutput) => void): void;
            /**
                * <p>Deletes the specified version from the specified managed policy.</p>
                *         <p>You cannot delete the default version from a policy using this operation. To delete
                *             the default version from a policy, use <a>DeletePolicy</a>. To find out which
                *             version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p>
                *         <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            deletePolicyVersion(args: DeletePolicyVersionCommandInput, options?: __HttpHandlerOptions): Promise<DeletePolicyVersionCommandOutput>;
            deletePolicyVersion(args: DeletePolicyVersionCommandInput, cb: (err: any, data?: DeletePolicyVersionCommandOutput) => void): void;
            deletePolicyVersion(args: DeletePolicyVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePolicyVersionCommandOutput) => void): void;
            /**
                * <p>Deletes the specified role. The role must not have any policies attached. For more
                *             information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with roles</a>.</p>
                *         <important>
                *             <p>Make sure that you do not have any Amazon EC2 instances running with the role you
                *                 are about to delete. Deleting a role or instance profile that is associated with a
                *                 running instance will break any applications running on the instance.</p>
                *         </important>
                */
            deleteRole(args: DeleteRoleCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRoleCommandOutput>;
            deleteRole(args: DeleteRoleCommandInput, cb: (err: any, data?: DeleteRoleCommandOutput) => void): void;
            deleteRole(args: DeleteRoleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRoleCommandOutput) => void): void;
            /**
                * <p>Deletes the permissions boundary for the specified IAM role. </p>
                *         <important>
                *             <p>Deleting the permissions boundary for a role might increase its permissions. For
                *                 example, it might allow anyone who assumes the role to perform all the actions
                *                 granted in its permissions policies. </p>
                *         </important>
                */
            deleteRolePermissionsBoundary(args: DeleteRolePermissionsBoundaryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRolePermissionsBoundaryCommandOutput>;
            deleteRolePermissionsBoundary(args: DeleteRolePermissionsBoundaryCommandInput, cb: (err: any, data?: DeleteRolePermissionsBoundaryCommandOutput) => void): void;
            deleteRolePermissionsBoundary(args: DeleteRolePermissionsBoundaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRolePermissionsBoundaryCommandOutput) => void): void;
            /**
                * <p>Deletes the specified inline policy that is embedded in the specified IAM
                *             role.</p>
                *         <p>A role can also have managed policies attached to it. To detach a managed policy from
                *             a role, use <a>DetachRolePolicy</a>. For more information about policies,
                *             refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            deleteRolePolicy(args: DeleteRolePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRolePolicyCommandOutput>;
            deleteRolePolicy(args: DeleteRolePolicyCommandInput, cb: (err: any, data?: DeleteRolePolicyCommandOutput) => void): void;
            deleteRolePolicy(args: DeleteRolePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRolePolicyCommandOutput) => void): void;
            /**
                * <p>Deletes a SAML provider resource in IAM.</p>
                *         <p>Deleting the provider resource from IAM does not update any roles that reference the
                *             SAML provider resource's ARN as a principal in their trust policies. Any attempt to
                *             assume a role that references a non-existent provider resource ARN fails.</p>
                *         <note>
                *             <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
                *         </note>
                */
            deleteSAMLProvider(args: DeleteSAMLProviderCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSAMLProviderCommandOutput>;
            deleteSAMLProvider(args: DeleteSAMLProviderCommandInput, cb: (err: any, data?: DeleteSAMLProviderCommandOutput) => void): void;
            deleteSAMLProvider(args: DeleteSAMLProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSAMLProviderCommandOutput) => void): void;
            /**
                * <p>Deletes the specified server certificate.</p>
                *         <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working
                *                 with server certificates</a> in the <i>IAM User Guide</i>. This
                *             topic also includes a list of Amazon Web Services services that can use the server certificates that
                *             you manage with IAM.</p>
                *         <important>
                *             <p> If you are using a server certificate with Elastic Load Balancing, deleting the
                *                 certificate could have implications for your application. If Elastic Load Balancing
                *                 doesn't detect the deletion of bound certificates, it may continue to use the
                *                 certificates. This could cause Elastic Load Balancing to stop accepting traffic. We
                *                 recommend that you remove the reference to the certificate from Elastic Load
                *                 Balancing before using this command to delete the certificate. For more information,
                *                 see <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API
                *                     Reference</i>.</p>
                *         </important>
                */
            deleteServerCertificate(args: DeleteServerCertificateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteServerCertificateCommandOutput>;
            deleteServerCertificate(args: DeleteServerCertificateCommandInput, cb: (err: any, data?: DeleteServerCertificateCommandOutput) => void): void;
            deleteServerCertificate(args: DeleteServerCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteServerCertificateCommandOutput) => void): void;
            /**
                * <p>Submits a service-linked role deletion request and returns a
                *                 <code>DeletionTaskId</code>, which you can use to check the status of the deletion.
                *             Before you call this operation, confirm that the role has no active sessions and that
                *             any resources used by the role in the linked service are deleted. If you call this
                *             operation more than once for the same service-linked role and an earlier deletion task
                *             is not complete, then the <code>DeletionTaskId</code> of the earlier request is
                *             returned.</p>
                *         <p>If you submit a deletion request for a service-linked role whose linked service is
                *             still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> operation returns the reason for the
                *             failure, usually including the resources that must be deleted. To delete the
                *             service-linked role, you must first remove those resources from the linked service and
                *             then submit the deletion request again. Resources are specific to the service that is
                *             linked to the role. For more information about removing resources from a service, see
                *             the <a href="http://docs.aws.amazon.com/">Amazon Web Services documentation</a> for your
                *             service.</p>
                *         <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles terms and concepts: Amazon Web Services service-linked role</a> in the
                *                 <i>IAM User Guide</i>.</p>
                */
            deleteServiceLinkedRole(args: DeleteServiceLinkedRoleCommandInput, options?: __HttpHandlerOptions): Promise<DeleteServiceLinkedRoleCommandOutput>;
            deleteServiceLinkedRole(args: DeleteServiceLinkedRoleCommandInput, cb: (err: any, data?: DeleteServiceLinkedRoleCommandOutput) => void): void;
            deleteServiceLinkedRole(args: DeleteServiceLinkedRoleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteServiceLinkedRoleCommandOutput) => void): void;
            /**
                * <p>Deletes the specified service-specific credential.</p>
                */
            deleteServiceSpecificCredential(args: DeleteServiceSpecificCredentialCommandInput, options?: __HttpHandlerOptions): Promise<DeleteServiceSpecificCredentialCommandOutput>;
            deleteServiceSpecificCredential(args: DeleteServiceSpecificCredentialCommandInput, cb: (err: any, data?: DeleteServiceSpecificCredentialCommandOutput) => void): void;
            deleteServiceSpecificCredential(args: DeleteServiceSpecificCredentialCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteServiceSpecificCredentialCommandOutput) => void): void;
            /**
                * <p>Deletes a signing certificate associated with the specified IAM user.</p>
                *         <p>If you do not specify a user name, IAM determines the user name implicitly based on
                *             the Amazon Web Services access key ID signing the request. This operation works for access keys under
                *             the Amazon Web Services account. Consequently, you can use this operation to manage Amazon Web Services account root
                *             user credentials even if the Amazon Web Services account has no associated IAM users.</p>
                */
            deleteSigningCertificate(args: DeleteSigningCertificateCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSigningCertificateCommandOutput>;
            deleteSigningCertificate(args: DeleteSigningCertificateCommandInput, cb: (err: any, data?: DeleteSigningCertificateCommandOutput) => void): void;
            deleteSigningCertificate(args: DeleteSigningCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSigningCertificateCommandOutput) => void): void;
            /**
                * <p>Deletes the specified SSH public key.</p>
                *         <p>The SSH public key deleted by this operation is used only for authenticating the
                *             associated IAM user to an CodeCommit repository. For more information about using SSH keys
                *             to authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for
                *                 SSH connections</a> in the <i>CodeCommit User Guide</i>.</p>
                */
            deleteSSHPublicKey(args: DeleteSSHPublicKeyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteSSHPublicKeyCommandOutput>;
            deleteSSHPublicKey(args: DeleteSSHPublicKeyCommandInput, cb: (err: any, data?: DeleteSSHPublicKeyCommandOutput) => void): void;
            deleteSSHPublicKey(args: DeleteSSHPublicKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteSSHPublicKeyCommandOutput) => void): void;
            /**
                * <p>Deletes the specified IAM user. Unlike the Amazon Web Services Management Console, when you delete a user
                *             programmatically, you must delete the items attached to the user manually, or the
                *             deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM
                *                 user</a>. Before attempting to delete a user, remove the following items:</p>
                *         <ul>
                *             <li>
                *                 <p>Password (<a>DeleteLoginProfile</a>)</p>
                *             </li>
                *             <li>
                *                 <p>Access keys (<a>DeleteAccessKey</a>)</p>
                *             </li>
                *             <li>
                *                 <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p>
                *             </li>
                *             <li>
                *                 <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p>
                *             </li>
                *             <li>
                *                 <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p>
                *             </li>
                *             <li>
                *                 <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p>
                *             </li>
                *             <li>
                *                 <p>Inline policies (<a>DeleteUserPolicy</a>)</p>
                *             </li>
                *             <li>
                *                 <p>Attached managed policies (<a>DetachUserPolicy</a>)</p>
                *             </li>
                *             <li>
                *                 <p>Group memberships (<a>RemoveUserFromGroup</a>)</p>
                *             </li>
                *          </ul>
                */
            deleteUser(args: DeleteUserCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserCommandOutput>;
            deleteUser(args: DeleteUserCommandInput, cb: (err: any, data?: DeleteUserCommandOutput) => void): void;
            deleteUser(args: DeleteUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserCommandOutput) => void): void;
            /**
                * <p>Deletes the permissions boundary for the specified IAM user.</p>
                *         <important>
                *             <p>Deleting the permissions boundary for a user might increase its permissions by
                *                 allowing the user to perform all the actions granted in its permissions policies.
                *             </p>
                *         </important>
                */
            deleteUserPermissionsBoundary(args: DeleteUserPermissionsBoundaryCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserPermissionsBoundaryCommandOutput>;
            deleteUserPermissionsBoundary(args: DeleteUserPermissionsBoundaryCommandInput, cb: (err: any, data?: DeleteUserPermissionsBoundaryCommandOutput) => void): void;
            deleteUserPermissionsBoundary(args: DeleteUserPermissionsBoundaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserPermissionsBoundaryCommandOutput) => void): void;
            /**
                * <p>Deletes the specified inline policy that is embedded in the specified IAM
                *             user.</p>
                *         <p>A user can also have managed policies attached to it. To detach a managed policy from
                *             a user, use <a>DetachUserPolicy</a>. For more information about policies,
                *             refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            deleteUserPolicy(args: DeleteUserPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteUserPolicyCommandOutput>;
            deleteUserPolicy(args: DeleteUserPolicyCommandInput, cb: (err: any, data?: DeleteUserPolicyCommandOutput) => void): void;
            deleteUserPolicy(args: DeleteUserPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteUserPolicyCommandOutput) => void): void;
            /**
                * <p>Deletes a virtual MFA device.</p>
                *         <note>
                *             <p> You must deactivate a user's virtual MFA device before you can delete it. For
                *                 information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p>
                *         </note>
                */
            deleteVirtualMFADevice(args: DeleteVirtualMFADeviceCommandInput, options?: __HttpHandlerOptions): Promise<DeleteVirtualMFADeviceCommandOutput>;
            deleteVirtualMFADevice(args: DeleteVirtualMFADeviceCommandInput, cb: (err: any, data?: DeleteVirtualMFADeviceCommandOutput) => void): void;
            deleteVirtualMFADevice(args: DeleteVirtualMFADeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteVirtualMFADeviceCommandOutput) => void): void;
            /**
                * <p>Removes the specified managed policy from the specified IAM group.</p>
                *         <p>A group can also have inline policies embedded with it. To delete an inline policy,
                *             use <a>DeleteGroupPolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
                *                 policies and inline policies</a> in the
                *             <i>IAM User Guide</i>.</p>
                */
            detachGroupPolicy(args: DetachGroupPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DetachGroupPolicyCommandOutput>;
            detachGroupPolicy(args: DetachGroupPolicyCommandInput, cb: (err: any, data?: DetachGroupPolicyCommandOutput) => void): void;
            detachGroupPolicy(args: DetachGroupPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetachGroupPolicyCommandOutput) => void): void;
            /**
                * <p>Removes the specified managed policy from the specified role.</p>
                *         <p>A role can also have inline policies embedded with it. To delete an inline policy, use
                *                 <a>DeleteRolePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
                *                 policies and inline policies</a> in the
                *             <i>IAM User Guide</i>.</p>
                */
            detachRolePolicy(args: DetachRolePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DetachRolePolicyCommandOutput>;
            detachRolePolicy(args: DetachRolePolicyCommandInput, cb: (err: any, data?: DetachRolePolicyCommandOutput) => void): void;
            detachRolePolicy(args: DetachRolePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetachRolePolicyCommandOutput) => void): void;
            /**
                * <p>Removes the specified managed policy from the specified user.</p>
                *         <p>A user can also have inline policies embedded with it. To delete an inline policy, use
                *                 <a>DeleteUserPolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
                *                 policies and inline policies</a> in the
                *             <i>IAM User Guide</i>.</p>
                */
            detachUserPolicy(args: DetachUserPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DetachUserPolicyCommandOutput>;
            detachUserPolicy(args: DetachUserPolicyCommandInput, cb: (err: any, data?: DetachUserPolicyCommandOutput) => void): void;
            detachUserPolicy(args: DetachUserPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DetachUserPolicyCommandOutput) => void): void;
            /**
                * <p>Enables the specified MFA device and associates it with the specified IAM user. When
                *             enabled, the MFA device is required for every subsequent login by the IAM user
                *             associated with the device.</p>
                */
            enableMFADevice(args: EnableMFADeviceCommandInput, options?: __HttpHandlerOptions): Promise<EnableMFADeviceCommandOutput>;
            enableMFADevice(args: EnableMFADeviceCommandInput, cb: (err: any, data?: EnableMFADeviceCommandOutput) => void): void;
            enableMFADevice(args: EnableMFADeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: EnableMFADeviceCommandOutput) => void): void;
            /**
                * <p> Generates a credential report for the Amazon Web Services account. For more information about the
                *             credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting credential reports</a> in
                *             the <i>IAM User Guide</i>.</p>
                */
            generateCredentialReport(args: GenerateCredentialReportCommandInput, options?: __HttpHandlerOptions): Promise<GenerateCredentialReportCommandOutput>;
            generateCredentialReport(args: GenerateCredentialReportCommandInput, cb: (err: any, data?: GenerateCredentialReportCommandOutput) => void): void;
            generateCredentialReport(args: GenerateCredentialReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GenerateCredentialReportCommandOutput) => void): void;
            /**
                * <p>Generates a report for service last accessed data for Organizations. You can generate a
                *             report for any entities (organization root, organizational unit, or account) or policies
                *             in your organization.</p>
                *         <p>To call this operation, you must be signed in using your Organizations management account
                *             credentials. You can use your long-term IAM user or root user credentials, or
                *             temporary credentials from assuming an IAM role. SCPs must be enabled for your
                *             organization root. You must have the required IAM and Organizations permissions. For more
                *             information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining permissions using
                *                 service last accessed data</a> in the
                *             <i>IAM User Guide</i>.</p>
                *         <p>You can generate a service last accessed data report for entities by specifying only
                *             the entity's path. This data includes a list of services that are allowed by any service
                *             control policies (SCPs) that apply to the entity.</p>
                *         <p>You can generate a service last accessed data report for a policy by specifying an
                *             entity's path and an optional Organizations policy ID. This data includes a list of services that
                *             are allowed by the specified SCP.</p>
                *         <p>For each service in both report types, the data includes the most recent account
                *             activity that the policy allows to account principals in the entity or the entity's
                *             children. For important information about the data, reporting period, permissions
                *             required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing permissions using
                *                 service last accessed data</a> in the
                *             <i>IAM User Guide</i>.</p>
                *         <important>
                *             <p>The data includes all attempts to access Amazon Web Services, not just the successful ones. This
                *                 includes all attempts that were made using the Amazon Web Services Management Console, the Amazon Web Services API through any
                *                 of the SDKs, or any of the command line tools. An unexpected entry in the service
                *                 last accessed data does not mean that an account has been compromised, because the
                *                 request might have been denied. Refer to your CloudTrail logs as the authoritative
                *                 source for information about all API calls and whether they were successful or
                *                 denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM events with
                *                     CloudTrail</a> in the <i>IAM User Guide</i>.</p>
                *         </important>
                *         <p>This operation returns a <code>JobId</code>. Use this parameter in the <code>
                *                <a>GetOrganizationsAccessReport</a>
                *             </code> operation to check the status of
                *             the report generation. To check the status of this request, use the <code>JobId</code>
                *             parameter in the <code>
                *                <a>GetOrganizationsAccessReport</a>
                *             </code> operation
                *             and test the <code>JobStatus</code> response parameter. When the job is complete, you
                *             can retrieve the report.</p>
                *         <p>To generate a service last accessed data report for entities, specify an entity path
                *             without specifying the optional Organizations policy ID. The type of entity that you specify
                *             determines the data returned in the report.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <b>Root</b> – When you specify the
                *                     organizations root as the entity, the resulting report lists all of the services
                *                     allowed by SCPs that are attached to your root. For each service, the report
                *                     includes data for all accounts in your organization except the
                *                     management account, because the management account is not limited by SCPs.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>OU</b> – When you specify an
                *                     organizational unit (OU) as the entity, the resulting report lists all of the
                *                     services allowed by SCPs that are attached to the OU and its parents. For each
                *                     service, the report includes data for all accounts in the OU or its children.
                *                     This data excludes the management account, because the management account is not
                *                     limited by SCPs.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>management account</b> – When you specify the
                *                     management account, the resulting report lists all Amazon Web Services services, because the
                *                     management account is not limited by SCPs. For each service, the report includes
                *                     data for only the management account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>Account</b> – When you specify another
                *                     account as the entity, the resulting report lists all of the services allowed by
                *                     SCPs that are attached to the account and its parents. For each service, the
                *                     report includes data for only the specified account.</p>
                *             </li>
                *          </ul>
                *         <p>To generate a service last accessed data report for policies, specify an entity path
                *             and the optional Organizations policy ID. The type of entity that you specify determines the data
                *             returned for each service.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <b>Root</b> – When you specify the root
                *                     entity and a policy ID, the resulting report lists all of the services that are
                *                     allowed by the specified SCP. For each service, the report includes data for all
                *                     accounts in your organization to which the SCP applies. This data excludes the
                *                     management account, because the management account is not limited by SCPs. If the
                *                     SCP is not attached to any entities in the organization, then the report will
                *                     return a list of services with no data.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>OU</b> – When you specify an OU entity and
                *                     a policy ID, the resulting report lists all of the services that are allowed by
                *                     the specified SCP. For each service, the report includes data for all accounts
                *                     in the OU or its children to which the SCP applies. This means that other
                *                     accounts outside the OU that are affected by the SCP might not be included in
                *                     the data. This data excludes the management account, because the
                *                     management account is not limited by SCPs. If the SCP is not attached to the OU
                *                     or one of its children, the report will return a list of services with no
                *                     data.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>management account</b> – When you specify the
                *                     management account, the resulting report lists all Amazon Web Services services, because the
                *                     management account is not limited by SCPs. If you specify a policy ID in the CLI
                *                     or API, the policy is ignored. For each service, the report includes data for
                *                     only the management account.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>Account</b> – When you specify another
                *                     account entity and a policy ID, the resulting report lists all of the services
                *                     that are allowed by the specified SCP. For each service, the report includes
                *                     data for only the specified account. This means that other accounts in the
                *                     organization that are affected by the SCP might not be included in the data. If
                *                     the SCP is not attached to the account, the report will return a list of
                *                     services with no data.</p>
                *             </li>
                *          </ul>
                *         <note>
                *             <p>Service last accessed data does not use other policy types when determining
                *                 whether a principal could access a service. These other policy types include
                *                 identity-based policies, resource-based policies, access control lists, IAM
                *                 permissions boundaries, and STS assume role policies. It only applies SCP logic.
                *                 For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies</a> in the
                *                 <i>IAM User Guide</i>.</p>
                *         </note>
                *         <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing policy scope by
                *                 viewing user activity</a> in the <i>IAM User Guide</i>.</p>
                */
            generateOrganizationsAccessReport(args: GenerateOrganizationsAccessReportCommandInput, options?: __HttpHandlerOptions): Promise<GenerateOrganizationsAccessReportCommandOutput>;
            generateOrganizationsAccessReport(args: GenerateOrganizationsAccessReportCommandInput, cb: (err: any, data?: GenerateOrganizationsAccessReportCommandOutput) => void): void;
            generateOrganizationsAccessReport(args: GenerateOrganizationsAccessReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GenerateOrganizationsAccessReportCommandOutput) => void): void;
            /**
                * <p>Generates a report that includes details about when an IAM resource (user, group,
                *             role, or policy) was last used in an attempt to access Amazon Web Services services. Recent activity
                *             usually appears within four hours. IAM reports activity for at least the last 400
                *             days, or less if your Region began supporting this feature within the last year. For
                *             more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions where data is tracked</a>.</p>
                *         <important>
                *             <p>The service last accessed data includes all attempts to access an Amazon Web Services API, not
                *                 just the successful ones. This includes all attempts that were made using the
                *                 Amazon Web Services Management Console, the Amazon Web Services API through any of the SDKs, or any of the command line tools.
                *                 An unexpected entry in the service last accessed data does not mean that your
                *                 account has been compromised, because the request might have been denied. Refer to
                *                 your CloudTrail logs as the authoritative source for information about all API calls
                *                 and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging
                *                     IAM events with CloudTrail</a> in the
                *                     <i>IAM User Guide</i>.</p>
                *         </important>
                *         <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a
                *                 <code>JobId</code>. Use this parameter in the following operations to retrieve the
                *             following details from your report: </p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <a>GetServiceLastAccessedDetails</a> – Use this operation
                *                     for users, groups, roles, or policies to list every Amazon Web Services service that the
                *                     resource could access using permissions policies. For each service, the response
                *                     includes information about the most recent access attempt.</p>
                *                 <p>The <code>JobId</code> returned by
                *                         <code>GenerateServiceLastAccessedDetail</code> must be used by the same role
                *                     within a session, or by the same user when used to call
                *                         <code>GetServiceLastAccessedDetail</code>.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this
                *                     operation for groups and policies to list information about the associated
                *                     entities (users or roles) that attempted to access a specific Amazon Web Services service.
                *                 </p>
                *             </li>
                *          </ul>
                *         <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request,
                *             use the <code>JobId</code> parameter in the same operations and test the
                *                 <code>JobStatus</code> response parameter.</p>
                *         <p>For additional information about the permissions policies that allow an identity
                *             (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p>
                *         <note>
                *             <p>Service last accessed data does not use other policy types when determining
                *                 whether a resource could access a service. These other policy types include
                *                 resource-based policies, access control lists, Organizations policies, IAM permissions
                *                 boundaries, and STS assume role policies. It only applies permissions policy
                *                 logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies</a> in the
                *                 <i>IAM User Guide</i>.</p>
                *         </note>
                *         <p>For more information about service and action last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing permissions using service last accessed data</a> in the
                *                 <i>IAM User Guide</i>.</p>
                */
            generateServiceLastAccessedDetails(args: GenerateServiceLastAccessedDetailsCommandInput, options?: __HttpHandlerOptions): Promise<GenerateServiceLastAccessedDetailsCommandOutput>;
            generateServiceLastAccessedDetails(args: GenerateServiceLastAccessedDetailsCommandInput, cb: (err: any, data?: GenerateServiceLastAccessedDetailsCommandOutput) => void): void;
            generateServiceLastAccessedDetails(args: GenerateServiceLastAccessedDetailsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GenerateServiceLastAccessedDetailsCommandOutput) => void): void;
            /**
                * <p>Retrieves information about when the specified access key was last used. The
                *             information includes the date and time of last use, along with the Amazon Web Services service and
                *             Region that were specified in the last request made with that key.</p>
                */
            getAccessKeyLastUsed(args: GetAccessKeyLastUsedCommandInput, options?: __HttpHandlerOptions): Promise<GetAccessKeyLastUsedCommandOutput>;
            getAccessKeyLastUsed(args: GetAccessKeyLastUsedCommandInput, cb: (err: any, data?: GetAccessKeyLastUsedCommandOutput) => void): void;
            getAccessKeyLastUsed(args: GetAccessKeyLastUsedCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAccessKeyLastUsedCommandOutput) => void): void;
            /**
                * <p>Retrieves information about all IAM users, groups, roles, and policies in your Amazon Web Services
                *             account, including their relationships to one another. Use this operation to obtain a
                *             snapshot of the configuration of IAM permissions (users, groups, roles, and policies)
                *             in your account.</p>
                *         <note>
                *             <p>Policies returned by this operation are URL-encoded compliant
                *     with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL
                *     decoding method to convert the policy back to plain JSON text. For example, if you use Java, you
                *     can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in
                *     the Java SDK. Other languages and SDKs provide similar functionality.</p>
                *          </note>
                *         <p>You can optionally filter the results using the <code>Filter</code> parameter. You can
                *             paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters.</p>
                */
            getAccountAuthorizationDetails(args: GetAccountAuthorizationDetailsCommandInput, options?: __HttpHandlerOptions): Promise<GetAccountAuthorizationDetailsCommandOutput>;
            getAccountAuthorizationDetails(args: GetAccountAuthorizationDetailsCommandInput, cb: (err: any, data?: GetAccountAuthorizationDetailsCommandOutput) => void): void;
            getAccountAuthorizationDetails(args: GetAccountAuthorizationDetailsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAccountAuthorizationDetailsCommandOutput) => void): void;
            /**
                * <p>Retrieves the password policy for the Amazon Web Services account. This tells you the complexity
                *             requirements and mandatory rotation periods for the IAM user passwords in your account.
                *             For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM password
                *                 policy</a>.</p>
                */
            getAccountPasswordPolicy(args: GetAccountPasswordPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetAccountPasswordPolicyCommandOutput>;
            getAccountPasswordPolicy(args: GetAccountPasswordPolicyCommandInput, cb: (err: any, data?: GetAccountPasswordPolicyCommandOutput) => void): void;
            getAccountPasswordPolicy(args: GetAccountPasswordPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAccountPasswordPolicyCommandOutput) => void): void;
            /**
                * <p>Retrieves information about IAM entity usage and IAM quotas in the Amazon Web Services
                *             account.</p>
                *         <p> For information about IAM quotas, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the
                *                 <i>IAM User Guide</i>.</p>
                */
            getAccountSummary(args: GetAccountSummaryCommandInput, options?: __HttpHandlerOptions): Promise<GetAccountSummaryCommandOutput>;
            getAccountSummary(args: GetAccountSummaryCommandInput, cb: (err: any, data?: GetAccountSummaryCommandOutput) => void): void;
            getAccountSummary(args: GetAccountSummaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetAccountSummaryCommandOutput) => void): void;
            /**
                * <p>Gets a list of all of the context keys referenced in the input policies. The policies
                *             are supplied as a list of one or more strings. To get the context keys from policies
                *             associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p>
                *         <p>Context keys are variables maintained by Amazon Web Services and its services that provide details
                *             about the context of an API query request. Context keys can be evaluated by testing
                *             against a value specified in an IAM policy. Use
                *                 <code>GetContextKeysForCustomPolicy</code> to understand what key names and values
                *             you must supply when you call <a>SimulateCustomPolicy</a>. Note that all
                *             parameters are shown in unencoded form here for clarity but must be URL encoded to be
                *             included as a part of a real HTML request.</p>
                */
            getContextKeysForCustomPolicy(args: GetContextKeysForCustomPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetContextKeysForCustomPolicyCommandOutput>;
            getContextKeysForCustomPolicy(args: GetContextKeysForCustomPolicyCommandInput, cb: (err: any, data?: GetContextKeysForCustomPolicyCommandOutput) => void): void;
            getContextKeysForCustomPolicy(args: GetContextKeysForCustomPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContextKeysForCustomPolicyCommandOutput) => void): void;
            /**
                * <p>Gets a list of all of the context keys referenced in all the IAM policies that are
                *             attached to the specified IAM entity. The entity can be an IAM user, group, or role.
                *             If you specify a user, then the request also includes all of the policies attached to
                *             groups that the user is a member of.</p>
                *         <p>You can optionally include a list of one or more additional policies, specified as
                *             strings. If you want to include <i>only</i> a list of policies by string,
                *             use <a>GetContextKeysForCustomPolicy</a> instead.</p>
                *         <p>
                *             <b>Note:</b> This operation discloses information about the
                *             permissions granted to other users. If you do not want users to see other user's
                *             permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p>
                *         <p>Context keys are variables maintained by Amazon Web Services and its services that provide details
                *             about the context of an API query request. Context keys can be evaluated by testing
                *             against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
                */
            getContextKeysForPrincipalPolicy(args: GetContextKeysForPrincipalPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetContextKeysForPrincipalPolicyCommandOutput>;
            getContextKeysForPrincipalPolicy(args: GetContextKeysForPrincipalPolicyCommandInput, cb: (err: any, data?: GetContextKeysForPrincipalPolicyCommandOutput) => void): void;
            getContextKeysForPrincipalPolicy(args: GetContextKeysForPrincipalPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetContextKeysForPrincipalPolicyCommandOutput) => void): void;
            /**
                * <p> Retrieves a credential report for the Amazon Web Services account. For more information about the
                *             credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting credential reports</a> in
                *             the <i>IAM User Guide</i>.</p>
                */
            getCredentialReport(args: GetCredentialReportCommandInput, options?: __HttpHandlerOptions): Promise<GetCredentialReportCommandOutput>;
            getCredentialReport(args: GetCredentialReportCommandInput, cb: (err: any, data?: GetCredentialReportCommandOutput) => void): void;
            getCredentialReport(args: GetCredentialReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCredentialReportCommandOutput) => void): void;
            /**
                * <p> Returns a list of IAM users that are in the specified IAM group. You can paginate
                *             the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
                */
            getGroup(args: GetGroupCommandInput, options?: __HttpHandlerOptions): Promise<GetGroupCommandOutput>;
            getGroup(args: GetGroupCommandInput, cb: (err: any, data?: GetGroupCommandOutput) => void): void;
            getGroup(args: GetGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGroupCommandOutput) => void): void;
            /**
                * <p>Retrieves the specified inline policy document that is embedded in the specified IAM
                *             group.</p>
                *         <note>
                *             <p>Policies returned by this operation are URL-encoded compliant
                *     with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL
                *     decoding method to convert the policy back to plain JSON text. For example, if you use Java, you
                *     can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in
                *     the Java SDK. Other languages and SDKs provide similar functionality.</p>
                *          </note>
                *         <p>An IAM group can also have managed policies attached to it. To retrieve a managed
                *             policy document that is attached to a group, use <a>GetPolicy</a> to
                *             determine the policy's default version, then use <a>GetPolicyVersion</a> to
                *             retrieve the policy document.</p>
                *         <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            getGroupPolicy(args: GetGroupPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetGroupPolicyCommandOutput>;
            getGroupPolicy(args: GetGroupPolicyCommandInput, cb: (err: any, data?: GetGroupPolicyCommandOutput) => void): void;
            getGroupPolicy(args: GetGroupPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetGroupPolicyCommandOutput) => void): void;
            /**
                * <p> Retrieves information about the specified instance profile, including the instance
                *             profile's path, GUID, ARN, and role. For more information about instance profiles, see
                *                 <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About
                *                 instance profiles</a> in the <i>IAM User Guide</i>.</p>
                */
            getInstanceProfile(args: GetInstanceProfileCommandInput, options?: __HttpHandlerOptions): Promise<GetInstanceProfileCommandOutput>;
            getInstanceProfile(args: GetInstanceProfileCommandInput, cb: (err: any, data?: GetInstanceProfileCommandOutput) => void): void;
            getInstanceProfile(args: GetInstanceProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetInstanceProfileCommandOutput) => void): void;
            /**
                * <p>Retrieves the user name for the specified IAM user. A login profile is created when
                *             you create a password for the user to access the Amazon Web Services Management Console. If the user does not exist
                *             or does not have a password, the operation returns a 404 (<code>NoSuchEntity</code>)
                *             error.</p>
                *         <p>If you create an IAM user with access to the console, the <code>CreateDate</code>
                *             reflects the date you created the initial password for the user.</p>
                *         <p>If you create an IAM user with programmatic access, and then later add a password
                *             for the user to access the Amazon Web Services Management Console, the <code>CreateDate</code> reflects the initial
                *             password creation date. A user with programmatic access does not have a login profile
                *             unless you create a password for the user to access the Amazon Web Services Management Console.</p>
                */
            getLoginProfile(args: GetLoginProfileCommandInput, options?: __HttpHandlerOptions): Promise<GetLoginProfileCommandOutput>;
            getLoginProfile(args: GetLoginProfileCommandInput, cb: (err: any, data?: GetLoginProfileCommandOutput) => void): void;
            getLoginProfile(args: GetLoginProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLoginProfileCommandOutput) => void): void;
            /**
                * <p>Returns information about the specified OpenID Connect (OIDC) provider resource object
                *             in IAM.</p>
                */
            getOpenIDConnectProvider(args: GetOpenIDConnectProviderCommandInput, options?: __HttpHandlerOptions): Promise<GetOpenIDConnectProviderCommandOutput>;
            getOpenIDConnectProvider(args: GetOpenIDConnectProviderCommandInput, cb: (err: any, data?: GetOpenIDConnectProviderCommandOutput) => void): void;
            getOpenIDConnectProvider(args: GetOpenIDConnectProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOpenIDConnectProviderCommandOutput) => void): void;
            /**
                * <p>Retrieves the service last accessed data report for Organizations that was previously
                *             generated using the <code>
                *                <a>GenerateOrganizationsAccessReport</a>
                *             </code>
                *             operation. This operation retrieves the status of your report job and the report
                *             contents.</p>
                *         <p>Depending on the parameters that you passed when you generated the report, the data
                *             returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p>
                *         <p>To call this operation, you must be signed in to the management account in your
                *             organization. SCPs must be enabled for your organization root. You must have permissions
                *             to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining permissions using
                *                 service last accessed data</a> in the
                *             <i>IAM User Guide</i>.</p>
                *         <p>For each service that principals in an account (root users, IAM users, or IAM
                *             roles) could access using SCPs, the operation returns details about the most recent
                *             access attempt. If there was no attempt, the service is listed without details about the
                *             most recent attempt to access the service. If the operation fails, it returns the reason
                *             that it failed.</p>
                *         <p>By default, the list is sorted by service namespace.</p>
                */
            getOrganizationsAccessReport(args: GetOrganizationsAccessReportCommandInput, options?: __HttpHandlerOptions): Promise<GetOrganizationsAccessReportCommandOutput>;
            getOrganizationsAccessReport(args: GetOrganizationsAccessReportCommandInput, cb: (err: any, data?: GetOrganizationsAccessReportCommandOutput) => void): void;
            getOrganizationsAccessReport(args: GetOrganizationsAccessReportCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetOrganizationsAccessReportCommandOutput) => void): void;
            /**
                * <p>Retrieves information about the specified managed policy, including the policy's
                *             default version and the total number of IAM users, groups, and roles to which the
                *             policy is attached. To retrieve the list of the specific users, groups, and roles that
                *             the policy is attached to, use <a>ListEntitiesForPolicy</a>. This operation
                *             returns metadata about the policy. To retrieve the actual policy document for a specific
                *             version of the policy, use <a>GetPolicyVersion</a>.</p>
                *         <p>This operation retrieves information about managed policies. To retrieve information
                *             about an inline policy that is embedded with an IAM user, group, or role, use <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a>.</p>
                *         <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            getPolicy(args: GetPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetPolicyCommandOutput>;
            getPolicy(args: GetPolicyCommandInput, cb: (err: any, data?: GetPolicyCommandOutput) => void): void;
            getPolicy(args: GetPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPolicyCommandOutput) => void): void;
            /**
                * <p>Retrieves information about the specified version of the specified managed policy,
                *             including the policy document.</p>
                *         <note>
                *             <p>Policies returned by this operation are URL-encoded compliant
                *     with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL
                *     decoding method to convert the policy back to plain JSON text. For example, if you use Java, you
                *     can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in
                *     the Java SDK. Other languages and SDKs provide similar functionality.</p>
                *          </note>
                *         <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p>
                *         <p>This operation retrieves information about managed policies. To retrieve information
                *             about an inline policy that is embedded in a user, group, or role, use <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a>.</p>
                *         <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                *         <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            getPolicyVersion(args: GetPolicyVersionCommandInput, options?: __HttpHandlerOptions): Promise<GetPolicyVersionCommandOutput>;
            getPolicyVersion(args: GetPolicyVersionCommandInput, cb: (err: any, data?: GetPolicyVersionCommandOutput) => void): void;
            getPolicyVersion(args: GetPolicyVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPolicyVersionCommandOutput) => void): void;
            /**
                * <p>Retrieves information about the specified role, including the role's path, GUID, ARN,
                *             and the role's trust policy that grants permission to assume the role. For more
                *             information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with roles</a>.</p>
                *         <note>
                *             <p>Policies returned by this operation are URL-encoded compliant
                *     with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL
                *     decoding method to convert the policy back to plain JSON text. For example, if you use Java, you
                *     can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in
                *     the Java SDK. Other languages and SDKs provide similar functionality.</p>
                *          </note>
                */
            getRole(args: GetRoleCommandInput, options?: __HttpHandlerOptions): Promise<GetRoleCommandOutput>;
            getRole(args: GetRoleCommandInput, cb: (err: any, data?: GetRoleCommandOutput) => void): void;
            getRole(args: GetRoleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRoleCommandOutput) => void): void;
            /**
                * <p>Retrieves the specified inline policy document that is embedded with the specified
                *             IAM role.</p>
                *         <note>
                *             <p>Policies returned by this operation are URL-encoded compliant
                *     with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL
                *     decoding method to convert the policy back to plain JSON text. For example, if you use Java, you
                *     can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in
                *     the Java SDK. Other languages and SDKs provide similar functionality.</p>
                *          </note>
                *         <p>An IAM role can also have managed policies attached to it. To retrieve a managed
                *             policy document that is attached to a role, use <a>GetPolicy</a> to determine
                *             the policy's default version, then use <a>GetPolicyVersion</a> to retrieve
                *             the policy document.</p>
                *         <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                *         <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using roles to delegate permissions and
                *                 federate identities</a>.</p>
                */
            getRolePolicy(args: GetRolePolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetRolePolicyCommandOutput>;
            getRolePolicy(args: GetRolePolicyCommandInput, cb: (err: any, data?: GetRolePolicyCommandOutput) => void): void;
            getRolePolicy(args: GetRolePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetRolePolicyCommandOutput) => void): void;
            /**
                * <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider
                *             resource object was created or updated.</p>
                *         <note>
                *             <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
                *         </note>
                */
            getSAMLProvider(args: GetSAMLProviderCommandInput, options?: __HttpHandlerOptions): Promise<GetSAMLProviderCommandOutput>;
            getSAMLProvider(args: GetSAMLProviderCommandInput, cb: (err: any, data?: GetSAMLProviderCommandOutput) => void): void;
            getSAMLProvider(args: GetSAMLProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSAMLProviderCommandOutput) => void): void;
            /**
                * <p>Retrieves information about the specified server certificate stored in IAM.</p>
                *         <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working
                *                 with server certificates</a> in the <i>IAM User Guide</i>. This
                *             topic includes a list of Amazon Web Services services that can use the server certificates that you
                *             manage with IAM.</p>
                */
            getServerCertificate(args: GetServerCertificateCommandInput, options?: __HttpHandlerOptions): Promise<GetServerCertificateCommandOutput>;
            getServerCertificate(args: GetServerCertificateCommandInput, cb: (err: any, data?: GetServerCertificateCommandOutput) => void): void;
            getServerCertificate(args: GetServerCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetServerCertificateCommandOutput) => void): void;
            /**
                * <p>Retrieves a service last accessed report that was created using the
                *                 <code>GenerateServiceLastAccessedDetails</code> operation. You can use the
                *                 <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to
                *             retrieve the status of your report job. When the report is complete, you can retrieve
                *             the generated report. The report includes a list of Amazon Web Services services that the resource
                *             (user, group, role, or managed policy) can access.</p>
                *         <note>
                *             <p>Service last accessed data does not use other policy types when determining
                *                 whether a resource could access a service. These other policy types include
                *                 resource-based policies, access control lists, Organizations policies, IAM permissions
                *                 boundaries, and STS assume role policies. It only applies permissions policy
                *                 logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies</a> in the
                *                 <i>IAM User Guide</i>.</p>
                *         </note>
                *         <p>For each service that the resource could access using permissions policies, the
                *             operation returns details about the most recent access attempt. If there was no attempt,
                *             the service is listed without details about the most recent attempt to access the
                *             service. If the operation fails, the <code>GetServiceLastAccessedDetails</code>
                *             operation returns the reason that it failed.</p>
                *         <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services.
                *             This list includes the number of entities that have attempted to access the service and
                *             the date and time of the last attempt. It also returns the ARN of the following entity,
                *             depending on the resource ARN that you used to generate the report:</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <b>User</b> – Returns the user ARN that you
                *                     used to generate the report</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>Group</b> – Returns the ARN of the group
                *                     member (user) that last attempted to access the service</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>Role</b> – Returns the role ARN that you
                *                     used to generate the report</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>Policy</b> – Returns the ARN of the user
                *                     or role that last used the policy to attempt to access the service</p>
                *             </li>
                *          </ul>
                *         <p>By default, the list is sorted by service namespace.</p>
                *         <p>If you specified <code>ACTION_LEVEL</code> granularity when you generated the report,
                *             this operation returns service and action last accessed data. This includes the most
                *             recent access attempt for each tracked action within a service. Otherwise, this
                *             operation returns only service data.</p>
                *         <p>For more information about service and action last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing permissions using service last accessed data</a> in the
                *                 <i>IAM User Guide</i>.</p>
                */
            getServiceLastAccessedDetails(args: GetServiceLastAccessedDetailsCommandInput, options?: __HttpHandlerOptions): Promise<GetServiceLastAccessedDetailsCommandOutput>;
            getServiceLastAccessedDetails(args: GetServiceLastAccessedDetailsCommandInput, cb: (err: any, data?: GetServiceLastAccessedDetailsCommandOutput) => void): void;
            getServiceLastAccessedDetails(args: GetServiceLastAccessedDetailsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetServiceLastAccessedDetailsCommandOutput) => void): void;
            /**
                * <p>After you generate a group or policy report using the
                *                 <code>GenerateServiceLastAccessedDetails</code> operation, you can use the
                *                 <code>JobId</code> parameter in
                *                 <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the
                *             status of your report job and a list of entities that could have used group or policy
                *             permissions to access the specified service.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <b>Group</b> – For a group report, this
                *                     operation returns a list of users in the group that could have used the group’s
                *                     policies in an attempt to access the service.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>Policy</b> – For a policy report, this
                *                     operation returns a list of entities (users or roles) that could have used the
                *                     policy in an attempt to access the service.</p>
                *             </li>
                *          </ul>
                *         <p>You can also use this operation for user or role reports to retrieve details about
                *             those entities.</p>
                *         <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code>
                *             operation returns the reason that it failed.</p>
                *         <p>By default, the list of associated entities is sorted by date, with the most recent
                *             access listed first.</p>
                */
            getServiceLastAccessedDetailsWithEntities(args: GetServiceLastAccessedDetailsWithEntitiesCommandInput, options?: __HttpHandlerOptions): Promise<GetServiceLastAccessedDetailsWithEntitiesCommandOutput>;
            getServiceLastAccessedDetailsWithEntities(args: GetServiceLastAccessedDetailsWithEntitiesCommandInput, cb: (err: any, data?: GetServiceLastAccessedDetailsWithEntitiesCommandOutput) => void): void;
            getServiceLastAccessedDetailsWithEntities(args: GetServiceLastAccessedDetailsWithEntitiesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetServiceLastAccessedDetailsWithEntitiesCommandOutput) => void): void;
            /**
                * <p>Retrieves the status of your service-linked role deletion. After you use <a>DeleteServiceLinkedRole</a> to submit a service-linked role for deletion,
                *             you can use the <code>DeletionTaskId</code> parameter in
                *                 <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion.
                *             If the deletion fails, this operation returns the reason that it failed, if that
                *             information is returned by the service.</p>
                */
            getServiceLinkedRoleDeletionStatus(args: GetServiceLinkedRoleDeletionStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetServiceLinkedRoleDeletionStatusCommandOutput>;
            getServiceLinkedRoleDeletionStatus(args: GetServiceLinkedRoleDeletionStatusCommandInput, cb: (err: any, data?: GetServiceLinkedRoleDeletionStatusCommandOutput) => void): void;
            getServiceLinkedRoleDeletionStatus(args: GetServiceLinkedRoleDeletionStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetServiceLinkedRoleDeletionStatusCommandOutput) => void): void;
            /**
                * <p>Retrieves the specified SSH public key, including metadata about the key.</p>
                *         <p>The SSH public key retrieved by this operation is used only for authenticating the
                *             associated IAM user to an CodeCommit repository. For more information about using SSH keys
                *             to authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for SSH
                *                 connections</a> in the <i>CodeCommit User Guide</i>.</p>
                */
            getSSHPublicKey(args: GetSSHPublicKeyCommandInput, options?: __HttpHandlerOptions): Promise<GetSSHPublicKeyCommandOutput>;
            getSSHPublicKey(args: GetSSHPublicKeyCommandInput, cb: (err: any, data?: GetSSHPublicKeyCommandOutput) => void): void;
            getSSHPublicKey(args: GetSSHPublicKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSSHPublicKeyCommandOutput) => void): void;
            /**
                * <p>Retrieves information about the specified IAM user, including the user's creation
                *             date, path, unique ID, and ARN.</p>
                *         <p>If you do not specify a user name, IAM determines the user name implicitly based on
                *             the Amazon Web Services access key ID used to sign the request to this operation.</p>
                */
            getUser(args: GetUserCommandInput, options?: __HttpHandlerOptions): Promise<GetUserCommandOutput>;
            getUser(args: GetUserCommandInput, cb: (err: any, data?: GetUserCommandOutput) => void): void;
            getUser(args: GetUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUserCommandOutput) => void): void;
            /**
                * <p>Retrieves the specified inline policy document that is embedded in the specified IAM
                *             user.</p>
                *         <note>
                *             <p>Policies returned by this operation are URL-encoded compliant
                *     with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL
                *     decoding method to convert the policy back to plain JSON text. For example, if you use Java, you
                *     can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in
                *     the Java SDK. Other languages and SDKs provide similar functionality.</p>
                *          </note>
                *         <p>An IAM user can also have managed policies attached to it. To retrieve a managed
                *             policy document that is attached to a user, use <a>GetPolicy</a> to determine
                *             the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve
                *             the policy document.</p>
                *         <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            getUserPolicy(args: GetUserPolicyCommandInput, options?: __HttpHandlerOptions): Promise<GetUserPolicyCommandOutput>;
            getUserPolicy(args: GetUserPolicyCommandInput, cb: (err: any, data?: GetUserPolicyCommandOutput) => void): void;
            getUserPolicy(args: GetUserPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUserPolicyCommandOutput) => void): void;
            /**
                * <p>Returns information about the access key IDs associated with the specified IAM user.
                *             If there is none, the operation returns an empty list.</p>
                *         <p>Although each user is limited to a small number of keys, you can still paginate the
                *             results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
                *         <p>If the <code>UserName</code> field is not specified, the user name is determined
                *             implicitly based on the Amazon Web Services access key ID used to sign the request. This operation
                *             works for access keys under the Amazon Web Services account. Consequently, you can use this operation
                *             to manage Amazon Web Services account root user credentials even if the Amazon Web Services account has no
                *             associated users.</p>
                *         <note>
                *             <p>To ensure the security of your Amazon Web Services account, the secret access key is accessible
                *                 only during key and user creation.</p>
                *         </note>
                */
            listAccessKeys(args: ListAccessKeysCommandInput, options?: __HttpHandlerOptions): Promise<ListAccessKeysCommandOutput>;
            listAccessKeys(args: ListAccessKeysCommandInput, cb: (err: any, data?: ListAccessKeysCommandOutput) => void): void;
            listAccessKeys(args: ListAccessKeysCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAccessKeysCommandOutput) => void): void;
            /**
                * <p>Lists the account alias associated with the Amazon Web Services account (Note: you can have only
                *             one). For information about using an Amazon Web Services account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an alias for your
                *                 Amazon Web Services account ID</a> in the <i>IAM User Guide</i>.</p>
                */
            listAccountAliases(args: ListAccountAliasesCommandInput, options?: __HttpHandlerOptions): Promise<ListAccountAliasesCommandOutput>;
            listAccountAliases(args: ListAccountAliasesCommandInput, cb: (err: any, data?: ListAccountAliasesCommandOutput) => void): void;
            listAccountAliases(args: ListAccountAliasesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAccountAliasesCommandOutput) => void): void;
            /**
                * <p>Lists all managed policies that are attached to the specified IAM group.</p>
                *         <p>An IAM group can also have inline policies embedded with it. To list the inline
                *             policies for a group, use <a>ListGroupPolicies</a>. For information about
                *             policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters. You can use the <code>PathPrefix</code> parameter to limit the list of
                *             policies to only those matching the specified path prefix. If there are no policies
                *             attached to the specified group (or none that match the specified path prefix), the
                *             operation returns an empty list.</p>
                */
            listAttachedGroupPolicies(args: ListAttachedGroupPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<ListAttachedGroupPoliciesCommandOutput>;
            listAttachedGroupPolicies(args: ListAttachedGroupPoliciesCommandInput, cb: (err: any, data?: ListAttachedGroupPoliciesCommandOutput) => void): void;
            listAttachedGroupPolicies(args: ListAttachedGroupPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAttachedGroupPoliciesCommandOutput) => void): void;
            /**
                * <p>Lists all managed policies that are attached to the specified IAM role.</p>
                *         <p>An IAM role can also have inline policies embedded with it. To list the inline
                *             policies for a role, use <a>ListRolePolicies</a>. For information about
                *             policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters. You can use the <code>PathPrefix</code> parameter to limit the list of
                *             policies to only those matching the specified path prefix. If there are no policies
                *             attached to the specified role (or none that match the specified path prefix), the
                *             operation returns an empty list.</p>
                */
            listAttachedRolePolicies(args: ListAttachedRolePoliciesCommandInput, options?: __HttpHandlerOptions): Promise<ListAttachedRolePoliciesCommandOutput>;
            listAttachedRolePolicies(args: ListAttachedRolePoliciesCommandInput, cb: (err: any, data?: ListAttachedRolePoliciesCommandOutput) => void): void;
            listAttachedRolePolicies(args: ListAttachedRolePoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAttachedRolePoliciesCommandOutput) => void): void;
            /**
                * <p>Lists all managed policies that are attached to the specified IAM user.</p>
                *         <p>An IAM user can also have inline policies embedded with it. To list the inline
                *             policies for a user, use <a>ListUserPolicies</a>. For information about
                *             policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters. You can use the <code>PathPrefix</code> parameter to limit the list of
                *             policies to only those matching the specified path prefix. If there are no policies
                *             attached to the specified group (or none that match the specified path prefix), the
                *             operation returns an empty list.</p>
                */
            listAttachedUserPolicies(args: ListAttachedUserPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<ListAttachedUserPoliciesCommandOutput>;
            listAttachedUserPolicies(args: ListAttachedUserPoliciesCommandInput, cb: (err: any, data?: ListAttachedUserPoliciesCommandOutput) => void): void;
            listAttachedUserPolicies(args: ListAttachedUserPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListAttachedUserPoliciesCommandOutput) => void): void;
            /**
                * <p>Lists all IAM users, groups, and roles that the specified managed policy is attached
                *             to.</p>
                *         <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a
                *             particular type of entity (users, groups, or roles). For example, to list only the roles
                *             that are attached to the specified policy, set <code>EntityFilter</code> to
                *                 <code>Role</code>.</p>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters.</p>
                */
            listEntitiesForPolicy(args: ListEntitiesForPolicyCommandInput, options?: __HttpHandlerOptions): Promise<ListEntitiesForPolicyCommandOutput>;
            listEntitiesForPolicy(args: ListEntitiesForPolicyCommandInput, cb: (err: any, data?: ListEntitiesForPolicyCommandOutput) => void): void;
            listEntitiesForPolicy(args: ListEntitiesForPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListEntitiesForPolicyCommandOutput) => void): void;
            /**
                * <p>Lists the names of the inline policies that are embedded in the specified IAM
                *             group.</p>
                *         <p>An IAM group can also have managed policies attached to it. To list the managed
                *             policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>.
                *             For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters. If there are no inline policies embedded with the specified group, the
                *             operation returns an empty list.</p>
                */
            listGroupPolicies(args: ListGroupPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupPoliciesCommandOutput>;
            listGroupPolicies(args: ListGroupPoliciesCommandInput, cb: (err: any, data?: ListGroupPoliciesCommandOutput) => void): void;
            listGroupPolicies(args: ListGroupPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupPoliciesCommandOutput) => void): void;
            /**
                * <p>Lists the IAM groups that have the specified path prefix.</p>
                *         <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters.</p>
                */
            listGroups(args: ListGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupsCommandOutput>;
            listGroups(args: ListGroupsCommandInput, cb: (err: any, data?: ListGroupsCommandOutput) => void): void;
            listGroups(args: ListGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupsCommandOutput) => void): void;
            /**
                * <p>Lists the IAM groups that the specified IAM user belongs to.</p>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters.</p>
                */
            listGroupsForUser(args: ListGroupsForUserCommandInput, options?: __HttpHandlerOptions): Promise<ListGroupsForUserCommandOutput>;
            listGroupsForUser(args: ListGroupsForUserCommandInput, cb: (err: any, data?: ListGroupsForUserCommandOutput) => void): void;
            listGroupsForUser(args: ListGroupsForUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListGroupsForUserCommandOutput) => void): void;
            /**
                * <p>Lists the instance profiles that have the specified path prefix. If there are none,
                *             the operation returns an empty list. For more information about instance profiles, see
                *                 <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About
                *                 instance profiles</a>.</p>
                *         <note>
                *             <p>IAM resource-listing operations return a subset of the available
                *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for an instance profile, see <a>GetInstanceProfile</a>.</p>
                *         </note>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters.</p>
                */
            listInstanceProfiles(args: ListInstanceProfilesCommandInput, options?: __HttpHandlerOptions): Promise<ListInstanceProfilesCommandOutput>;
            listInstanceProfiles(args: ListInstanceProfilesCommandInput, cb: (err: any, data?: ListInstanceProfilesCommandOutput) => void): void;
            listInstanceProfiles(args: ListInstanceProfilesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListInstanceProfilesCommandOutput) => void): void;
            /**
                * <p>Lists the instance profiles that have the specified associated IAM role. If there
                *             are none, the operation returns an empty list. For more information about instance
                *             profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About instance
                *             profiles</a>.</p>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters.</p>
                */
            listInstanceProfilesForRole(args: ListInstanceProfilesForRoleCommandInput, options?: __HttpHandlerOptions): Promise<ListInstanceProfilesForRoleCommandOutput>;
            listInstanceProfilesForRole(args: ListInstanceProfilesForRoleCommandInput, cb: (err: any, data?: ListInstanceProfilesForRoleCommandOutput) => void): void;
            listInstanceProfilesForRole(args: ListInstanceProfilesForRoleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListInstanceProfilesForRoleCommandOutput) => void): void;
            /**
                * <p>Lists the tags that are attached to the specified IAM instance profile. The returned list of tags is sorted by tag key.
                *       For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            listInstanceProfileTags(args: ListInstanceProfileTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListInstanceProfileTagsCommandOutput>;
            listInstanceProfileTags(args: ListInstanceProfileTagsCommandInput, cb: (err: any, data?: ListInstanceProfileTagsCommandOutput) => void): void;
            listInstanceProfileTags(args: ListInstanceProfileTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListInstanceProfileTagsCommandOutput) => void): void;
            /**
                * <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name,
                *             then this operation lists all the MFA devices associated with the specified user. If you
                *             do not specify a user name, IAM determines the user name implicitly based on the Amazon Web Services
                *             access key ID signing the request for this operation.</p>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters.</p>
                */
            listMFADevices(args: ListMFADevicesCommandInput, options?: __HttpHandlerOptions): Promise<ListMFADevicesCommandOutput>;
            listMFADevices(args: ListMFADevicesCommandInput, cb: (err: any, data?: ListMFADevicesCommandOutput) => void): void;
            listMFADevices(args: ListMFADevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMFADevicesCommandOutput) => void): void;
            /**
                * <p>Lists the tags that are attached to the specified IAM virtual multi-factor authentication (MFA) device. The returned list of tags is
                *       sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            listMFADeviceTags(args: ListMFADeviceTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListMFADeviceTagsCommandOutput>;
            listMFADeviceTags(args: ListMFADeviceTagsCommandInput, cb: (err: any, data?: ListMFADeviceTagsCommandOutput) => void): void;
            listMFADeviceTags(args: ListMFADeviceTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListMFADeviceTagsCommandOutput) => void): void;
            /**
                * <p>Lists information about the IAM OpenID Connect (OIDC) provider resource objects
                *             defined in the Amazon Web Services account.</p>
                *         <note>
                *             <p>IAM resource-listing operations return a subset of the available
                *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for an OIDC provider, see <a>GetOpenIDConnectProvider</a>.</p>
                *         </note>
                */
            listOpenIDConnectProviders(args: ListOpenIDConnectProvidersCommandInput, options?: __HttpHandlerOptions): Promise<ListOpenIDConnectProvidersCommandOutput>;
            listOpenIDConnectProviders(args: ListOpenIDConnectProvidersCommandInput, cb: (err: any, data?: ListOpenIDConnectProvidersCommandOutput) => void): void;
            listOpenIDConnectProviders(args: ListOpenIDConnectProvidersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOpenIDConnectProvidersCommandOutput) => void): void;
            /**
                * <p>Lists the tags that are attached to the specified OpenID Connect (OIDC)-compatible
                *       identity provider. The returned list of tags is sorted by tag key. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html">About web identity
                *       federation</a>.</p>
                *          <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            listOpenIDConnectProviderTags(args: ListOpenIDConnectProviderTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListOpenIDConnectProviderTagsCommandOutput>;
            listOpenIDConnectProviderTags(args: ListOpenIDConnectProviderTagsCommandInput, cb: (err: any, data?: ListOpenIDConnectProviderTagsCommandOutput) => void): void;
            listOpenIDConnectProviderTags(args: ListOpenIDConnectProviderTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListOpenIDConnectProviderTagsCommandOutput) => void): void;
            /**
                * <p>Lists all the managed policies that are available in your Amazon Web Services account, including
                *             your own customer-defined managed policies and all Amazon Web Services managed policies.</p>
                *         <p>You can filter the list of policies that is returned using the optional
                *                 <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code>
                *             parameters. For example, to list only the customer managed policies in your Amazon Web Services
                *             account, set <code>Scope</code> to <code>Local</code>. To list only Amazon Web Services managed
                *             policies, set <code>Scope</code> to <code>AWS</code>.</p>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters.</p>
                *         <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                *         <note>
                *             <p>IAM resource-listing operations return a subset of the available
                *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a customer manged policy, see
                *                     <a>GetPolicy</a>.</p>
                *         </note>
                */
            listPolicies(args: ListPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<ListPoliciesCommandOutput>;
            listPolicies(args: ListPoliciesCommandInput, cb: (err: any, data?: ListPoliciesCommandOutput) => void): void;
            listPolicies(args: ListPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPoliciesCommandOutput) => void): void;
            /**
                * <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to
                *             access each specified service.</p>
                *         <note>
                *             <p>This operation does not use other policy types when determining whether a resource
                *                 could access a service. These other policy types include resource-based policies,
                *                 access control lists, Organizations policies, IAM permissions boundaries, and STS
                *                 assume role policies. It only applies permissions policy logic. For more about the
                *                 evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies</a> in the
                *                 <i>IAM User Guide</i>.</p>
                *         </note>
                *         <p>The list of policies returned by the operation depends on the ARN of the identity that
                *             you provide.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                   <b>User</b> – The list of policies includes
                *                     the managed and inline policies that are attached to the user directly. The list
                *                     also includes any additional managed and inline policies that are attached to
                *                     the group to which the user belongs. </p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>Group</b> – The list of policies includes
                *                     only the managed and inline policies that are attached to the group directly.
                *                     Policies that are attached to the group’s user are not included.</p>
                *             </li>
                *             <li>
                *                 <p>
                *                   <b>Role</b> – The list of policies includes
                *                     only the managed and inline policies that are attached to the role.</p>
                *             </li>
                *          </ul>
                *         <p>For each managed policy, this operation returns the ARN and policy name. For each
                *             inline policy, it returns the policy name and the entity to which it is attached. Inline
                *             policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the
                *                 <i>IAM User Guide</i>.</p>
                *         <p>Policies that are attached to users and roles as permissions boundaries are not
                *             returned. To view which managed policy is currently used to set the permissions boundary
                *             for a user or role, use the <a>GetUser</a> or <a>GetRole</a>
                *             operations.</p>
                */
            listPoliciesGrantingServiceAccess(args: ListPoliciesGrantingServiceAccessCommandInput, options?: __HttpHandlerOptions): Promise<ListPoliciesGrantingServiceAccessCommandOutput>;
            listPoliciesGrantingServiceAccess(args: ListPoliciesGrantingServiceAccessCommandInput, cb: (err: any, data?: ListPoliciesGrantingServiceAccessCommandOutput) => void): void;
            listPoliciesGrantingServiceAccess(args: ListPoliciesGrantingServiceAccessCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPoliciesGrantingServiceAccessCommandOutput) => void): void;
            /**
                * <p>Lists the tags that are attached to the specified IAM customer managed policy.
                *       The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            listPolicyTags(args: ListPolicyTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListPolicyTagsCommandOutput>;
            listPolicyTags(args: ListPolicyTagsCommandInput, cb: (err: any, data?: ListPolicyTagsCommandOutput) => void): void;
            listPolicyTags(args: ListPolicyTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPolicyTagsCommandOutput) => void): void;
            /**
                * <p>Lists information about the versions of the specified managed policy, including the
                *             version that is currently set as the policy's default version.</p>
                *         <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            listPolicyVersions(args: ListPolicyVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListPolicyVersionsCommandOutput>;
            listPolicyVersions(args: ListPolicyVersionsCommandInput, cb: (err: any, data?: ListPolicyVersionsCommandOutput) => void): void;
            listPolicyVersions(args: ListPolicyVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPolicyVersionsCommandOutput) => void): void;
            /**
                * <p>Lists the names of the inline policies that are embedded in the specified IAM
                *             role.</p>
                *         <p>An IAM role can also have managed policies attached to it. To list the managed
                *             policies that are attached to a role, use <a>ListAttachedRolePolicies</a>.
                *             For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters. If there are no inline policies embedded with the specified role, the
                *             operation returns an empty list.</p>
                */
            listRolePolicies(args: ListRolePoliciesCommandInput, options?: __HttpHandlerOptions): Promise<ListRolePoliciesCommandOutput>;
            listRolePolicies(args: ListRolePoliciesCommandInput, cb: (err: any, data?: ListRolePoliciesCommandOutput) => void): void;
            listRolePolicies(args: ListRolePoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRolePoliciesCommandOutput) => void): void;
            /**
                * <p>Lists the IAM roles that have the specified path prefix. If there are none, the
                *             operation returns an empty list. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with
                *                 roles</a>.</p>
                *         <note>
                *             <p>IAM resource-listing operations return a subset of the available
                *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a role, see <a>GetRole</a>.</p>
                *         </note>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters.</p>
                */
            listRoles(args: ListRolesCommandInput, options?: __HttpHandlerOptions): Promise<ListRolesCommandOutput>;
            listRoles(args: ListRolesCommandInput, cb: (err: any, data?: ListRolesCommandOutput) => void): void;
            listRoles(args: ListRolesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRolesCommandOutput) => void): void;
            /**
                * <p>Lists the tags that are attached to the specified role. The returned list of tags is
                *       sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            listRoleTags(args: ListRoleTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListRoleTagsCommandOutput>;
            listRoleTags(args: ListRoleTagsCommandInput, cb: (err: any, data?: ListRoleTagsCommandOutput) => void): void;
            listRoleTags(args: ListRoleTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRoleTagsCommandOutput) => void): void;
            /**
                * <p>Lists the SAML provider resource objects defined in IAM in the account.
                *             IAM resource-listing operations return a subset of the available
                *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a SAML provider, see <a>GetSAMLProvider</a>.</p>
                *         <important>
                *             <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
                *         </important>
                */
            listSAMLProviders(args: ListSAMLProvidersCommandInput, options?: __HttpHandlerOptions): Promise<ListSAMLProvidersCommandOutput>;
            listSAMLProviders(args: ListSAMLProvidersCommandInput, cb: (err: any, data?: ListSAMLProvidersCommandOutput) => void): void;
            listSAMLProviders(args: ListSAMLProvidersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSAMLProvidersCommandOutput) => void): void;
            /**
                * <p>Lists the tags that are attached to the specified Security Assertion Markup Language
                *       (SAML) identity provider. The returned list of tags is sorted by tag key. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based
                *       federation</a>.</p>
                *          <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            listSAMLProviderTags(args: ListSAMLProviderTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListSAMLProviderTagsCommandOutput>;
            listSAMLProviderTags(args: ListSAMLProviderTagsCommandInput, cb: (err: any, data?: ListSAMLProviderTagsCommandOutput) => void): void;
            listSAMLProviderTags(args: ListSAMLProviderTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSAMLProviderTagsCommandOutput) => void): void;
            /**
                * <p>Lists the server certificates stored in IAM that have the specified path prefix. If
                *             none exist, the operation returns an empty list.</p>
                *         <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters.</p>
                *         <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working
                *                 with server certificates</a> in the <i>IAM User Guide</i>. This
                *             topic also includes a list of Amazon Web Services services that can use the server certificates that
                *             you manage with IAM.</p>
                *         <note>
                *             <p>IAM resource-listing operations return a subset of the available
                *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a servercertificate, see <a>GetServerCertificate</a>.</p>
                *         </note>
                */
            listServerCertificates(args: ListServerCertificatesCommandInput, options?: __HttpHandlerOptions): Promise<ListServerCertificatesCommandOutput>;
            listServerCertificates(args: ListServerCertificatesCommandInput, cb: (err: any, data?: ListServerCertificatesCommandOutput) => void): void;
            listServerCertificates(args: ListServerCertificatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListServerCertificatesCommandOutput) => void): void;
            /**
                * <p>Lists the tags that are attached to the specified IAM server certificate. The
                *       returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *          <note>
                *             <p>For certificates in a Region supported by Certificate Manager (ACM), we
                *         recommend that you don't use IAM server certificates. Instead, use ACM to provision,
                *         manage, and deploy your server certificates. For more information about IAM server
                *         certificates, <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with server
                *           certificates</a> in the <i>IAM User Guide</i>.</p>
                *          </note>
                */
            listServerCertificateTags(args: ListServerCertificateTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListServerCertificateTagsCommandOutput>;
            listServerCertificateTags(args: ListServerCertificateTagsCommandInput, cb: (err: any, data?: ListServerCertificateTagsCommandOutput) => void): void;
            listServerCertificateTags(args: ListServerCertificateTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListServerCertificateTagsCommandOutput) => void): void;
            /**
                * <p>Returns information about the service-specific credentials associated with the
                *             specified IAM user. If none exists, the operation returns an empty list. The
                *             service-specific credentials returned by this operation are used only for authenticating
                *             the IAM user to a specific service. For more information about using service-specific
                *             credentials to authenticate to an Amazon Web Services service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set up service-specific credentials</a>
                *             in the CodeCommit User Guide.</p>
                */
            listServiceSpecificCredentials(args: ListServiceSpecificCredentialsCommandInput, options?: __HttpHandlerOptions): Promise<ListServiceSpecificCredentialsCommandOutput>;
            listServiceSpecificCredentials(args: ListServiceSpecificCredentialsCommandInput, cb: (err: any, data?: ListServiceSpecificCredentialsCommandOutput) => void): void;
            listServiceSpecificCredentials(args: ListServiceSpecificCredentialsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListServiceSpecificCredentialsCommandOutput) => void): void;
            /**
                * <p>Returns information about the signing certificates associated with the specified IAM
                *             user. If none exists, the operation returns an empty list.</p>
                *         <p>Although each user is limited to a small number of signing certificates, you can still
                *             paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters.</p>
                *         <p>If the <code>UserName</code> field is not specified, the user name is determined
                *             implicitly based on the Amazon Web Services access key ID used to sign the request for this operation.
                *             This operation works for access keys under the Amazon Web Services account. Consequently, you can use
                *             this operation to manage Amazon Web Services account root user credentials even if the Amazon Web Services account
                *             has no associated users.</p>
                */
            listSigningCertificates(args: ListSigningCertificatesCommandInput, options?: __HttpHandlerOptions): Promise<ListSigningCertificatesCommandOutput>;
            listSigningCertificates(args: ListSigningCertificatesCommandInput, cb: (err: any, data?: ListSigningCertificatesCommandOutput) => void): void;
            listSigningCertificates(args: ListSigningCertificatesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSigningCertificatesCommandOutput) => void): void;
            /**
                * <p>Returns information about the SSH public keys associated with the specified IAM
                *             user. If none exists, the operation returns an empty list.</p>
                *         <p>The SSH public keys returned by this operation are used only for authenticating the
                *             IAM user to an CodeCommit repository. For more information about using SSH keys to
                *             authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for
                *                 SSH connections</a> in the <i>CodeCommit User Guide</i>.</p>
                *         <p>Although each user is limited to a small number of keys, you can still paginate the
                *             results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
                */
            listSSHPublicKeys(args: ListSSHPublicKeysCommandInput, options?: __HttpHandlerOptions): Promise<ListSSHPublicKeysCommandOutput>;
            listSSHPublicKeys(args: ListSSHPublicKeysCommandInput, cb: (err: any, data?: ListSSHPublicKeysCommandOutput) => void): void;
            listSSHPublicKeys(args: ListSSHPublicKeysCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSSHPublicKeysCommandOutput) => void): void;
            /**
                * <p>Lists the names of the inline policies embedded in the specified IAM user.</p>
                *         <p>An IAM user can also have managed policies attached to it. To list the managed
                *             policies that are attached to a user, use <a>ListAttachedUserPolicies</a>.
                *             For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters. If there are no inline policies embedded with the specified user, the
                *             operation returns an empty list.</p>
                */
            listUserPolicies(args: ListUserPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<ListUserPoliciesCommandOutput>;
            listUserPolicies(args: ListUserPoliciesCommandInput, cb: (err: any, data?: ListUserPoliciesCommandOutput) => void): void;
            listUserPolicies(args: ListUserPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUserPoliciesCommandOutput) => void): void;
            /**
                * <p>Lists the IAM users that have the specified path prefix. If no path prefix is
                *             specified, the operation returns all users in the Amazon Web Services account. If there are none, the
                *             operation returns an empty list.</p>
                *         <note>
                *             <p>IAM resource-listing operations return a subset of the available
                *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a user, see <a>GetUser</a>.</p>
                *         </note>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters.</p>
                */
            listUsers(args: ListUsersCommandInput, options?: __HttpHandlerOptions): Promise<ListUsersCommandOutput>;
            listUsers(args: ListUsersCommandInput, cb: (err: any, data?: ListUsersCommandOutput) => void): void;
            listUsers(args: ListUsersCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUsersCommandOutput) => void): void;
            /**
                * <p>Lists the tags that are attached to the specified IAM user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            listUserTags(args: ListUserTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListUserTagsCommandOutput>;
            listUserTags(args: ListUserTagsCommandInput, cb: (err: any, data?: ListUserTagsCommandOutput) => void): void;
            listUserTags(args: ListUserTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListUserTagsCommandOutput) => void): void;
            /**
                * <p>Lists the virtual MFA devices defined in the Amazon Web Services account by assignment status. If
                *             you do not specify an assignment status, the operation returns a list of all virtual MFA
                *             devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or
                *                 <code>Any</code>.</p>
                *         <note>
                *             <p>IAM resource-listing operations return a subset of the available
                *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view tag information for a virtual MFA device, see <a>ListMFADeviceTags</a>.</p>
                *         </note>
                *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
                *             parameters.</p>
                */
            listVirtualMFADevices(args: ListVirtualMFADevicesCommandInput, options?: __HttpHandlerOptions): Promise<ListVirtualMFADevicesCommandOutput>;
            listVirtualMFADevices(args: ListVirtualMFADevicesCommandInput, cb: (err: any, data?: ListVirtualMFADevicesCommandOutput) => void): void;
            listVirtualMFADevices(args: ListVirtualMFADevicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListVirtualMFADevicesCommandOutput) => void): void;
            /**
                * <p>Adds or updates an inline policy document that is embedded in the specified IAM
                *             group.</p>
                *         <p>A user can also have managed policies attached to it. To attach a managed policy to a
                *             group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use
                *                 <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
                *                 policies and inline policies</a> in the
                *             <i>IAM User Guide</i>.</p>
                *         <p>For information about the maximum number of inline policies that you can embed in a
                *             group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p>
                *         <note>
                *             <p>Because policy documents can be large, you should use POST rather than GET when
                *                 calling <code>PutGroupPolicy</code>. For general information about using the Query
                *                 API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the
                *                     <i>IAM User Guide</i>.</p>
                *         </note>
                */
            putGroupPolicy(args: PutGroupPolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutGroupPolicyCommandOutput>;
            putGroupPolicy(args: PutGroupPolicyCommandInput, cb: (err: any, data?: PutGroupPolicyCommandOutput) => void): void;
            putGroupPolicy(args: PutGroupPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutGroupPolicyCommandOutput) => void): void;
            /**
                * <p>Adds or updates the policy that is specified as the IAM role's permissions boundary.
                *             You can use an Amazon Web Services managed policy or a customer managed policy to set the boundary for
                *             a role. Use the boundary to control the maximum permissions that the role can have.
                *             Setting a permissions boundary is an advanced feature that can affect the permissions
                *             for the role.</p>
                *         <p>You cannot set the boundary for a service-linked role. </p>
                *         <important>
                *             <p>Policies used as permissions boundaries do not provide permissions. You must also
                *                 attach a permissions policy to the role. To learn how the effective permissions for
                *                 a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON policy
                *                     evaluation logic</a> in the IAM User Guide. </p>
                *         </important>
                */
            putRolePermissionsBoundary(args: PutRolePermissionsBoundaryCommandInput, options?: __HttpHandlerOptions): Promise<PutRolePermissionsBoundaryCommandOutput>;
            putRolePermissionsBoundary(args: PutRolePermissionsBoundaryCommandInput, cb: (err: any, data?: PutRolePermissionsBoundaryCommandOutput) => void): void;
            putRolePermissionsBoundary(args: PutRolePermissionsBoundaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutRolePermissionsBoundaryCommandOutput) => void): void;
            /**
                * <p>Adds or updates an inline policy document that is embedded in the specified IAM
                *             role.</p>
                *         <p>When you embed an inline policy in a role, the inline policy is used as part of the
                *             role's access (permissions) policy. The role's trust policy is created at the same time
                *             as the role, using <a>CreateRole</a>. You can update a role's trust policy
                *             using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles,
                *             see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using roles to
                *                 delegate permissions and federate identities</a>.</p>
                *         <p>A role can also have a managed policy attached to it. To attach a managed policy to a
                *             role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
                *                 policies and inline policies</a> in the
                *             <i>IAM User Guide</i>.</p>
                *         <p>For information about the maximum number of inline policies that you can embed with a
                *             role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p>
                *         <note>
                *             <p>Because policy documents can be large, you should use POST rather than GET when
                *                 calling <code>PutRolePolicy</code>. For general information about using the Query
                *                 API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the
                *                     <i>IAM User Guide</i>.</p>
                *         </note>
                */
            putRolePolicy(args: PutRolePolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutRolePolicyCommandOutput>;
            putRolePolicy(args: PutRolePolicyCommandInput, cb: (err: any, data?: PutRolePolicyCommandOutput) => void): void;
            putRolePolicy(args: PutRolePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutRolePolicyCommandOutput) => void): void;
            /**
                * <p>Adds or updates the policy that is specified as the IAM user's permissions boundary.
                *             You can use an Amazon Web Services managed policy or a customer managed policy to set the boundary for
                *             a user. Use the boundary to control the maximum permissions that the user can have.
                *             Setting a permissions boundary is an advanced feature that can affect the permissions
                *             for the user.</p>
                *         <important>
                *             <p>Policies that are used as permissions boundaries do not provide permissions. You
                *                 must also attach a permissions policy to the user. To learn how the effective
                *                 permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON policy
                *                     evaluation logic</a> in the IAM User Guide. </p>
                *         </important>
                */
            putUserPermissionsBoundary(args: PutUserPermissionsBoundaryCommandInput, options?: __HttpHandlerOptions): Promise<PutUserPermissionsBoundaryCommandOutput>;
            putUserPermissionsBoundary(args: PutUserPermissionsBoundaryCommandInput, cb: (err: any, data?: PutUserPermissionsBoundaryCommandOutput) => void): void;
            putUserPermissionsBoundary(args: PutUserPermissionsBoundaryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutUserPermissionsBoundaryCommandOutput) => void): void;
            /**
                * <p>Adds or updates an inline policy document that is embedded in the specified IAM
                *             user.</p>
                *         <p>An IAM user can also have a managed policy attached to it. To attach a managed
                *             policy to a user, use <a>AttachUserPolicy</a>. To create a new managed
                *             policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
                *                 policies and inline policies</a> in the
                *             <i>IAM User Guide</i>.</p>
                *         <p>For information about the maximum number of inline policies that you can embed in a
                *             user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p>
                *         <note>
                *             <p>Because policy documents can be large, you should use POST rather than GET when
                *                 calling <code>PutUserPolicy</code>. For general information about using the Query
                *                 API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the
                *                     <i>IAM User Guide</i>.</p>
                *         </note>
                */
            putUserPolicy(args: PutUserPolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutUserPolicyCommandOutput>;
            putUserPolicy(args: PutUserPolicyCommandInput, cb: (err: any, data?: PutUserPolicyCommandOutput) => void): void;
            putUserPolicy(args: PutUserPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutUserPolicyCommandOutput) => void): void;
            /**
                * <p>Removes the specified client ID (also known as audience) from the list of client IDs
                *             registered for the specified IAM OpenID Connect (OIDC) provider resource
                *             object.</p>
                *         <p>This operation is idempotent; it does not fail or return an error if you try to remove
                *             a client ID that does not exist.</p>
                */
            removeClientIDFromOpenIDConnectProvider(args: RemoveClientIDFromOpenIDConnectProviderCommandInput, options?: __HttpHandlerOptions): Promise<RemoveClientIDFromOpenIDConnectProviderCommandOutput>;
            removeClientIDFromOpenIDConnectProvider(args: RemoveClientIDFromOpenIDConnectProviderCommandInput, cb: (err: any, data?: RemoveClientIDFromOpenIDConnectProviderCommandOutput) => void): void;
            removeClientIDFromOpenIDConnectProvider(args: RemoveClientIDFromOpenIDConnectProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveClientIDFromOpenIDConnectProviderCommandOutput) => void): void;
            /**
                * <p>Removes the specified IAM role from the specified EC2 instance profile.</p>
                *         <important>
                *             <p>Make sure that you do not have any Amazon EC2 instances running with the role you
                *                 are about to remove from the instance profile. Removing a role from an instance
                *                 profile that is associated with a running instance might break any applications
                *                 running on the instance.</p>
                *         </important>
                *         <p> For more information about IAM roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with roles</a>. For more
                *             information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About instance
                *             profiles</a>.</p>
                */
            removeRoleFromInstanceProfile(args: RemoveRoleFromInstanceProfileCommandInput, options?: __HttpHandlerOptions): Promise<RemoveRoleFromInstanceProfileCommandOutput>;
            removeRoleFromInstanceProfile(args: RemoveRoleFromInstanceProfileCommandInput, cb: (err: any, data?: RemoveRoleFromInstanceProfileCommandOutput) => void): void;
            removeRoleFromInstanceProfile(args: RemoveRoleFromInstanceProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveRoleFromInstanceProfileCommandOutput) => void): void;
            /**
                * <p>Removes the specified user from the specified group.</p>
                */
            removeUserFromGroup(args: RemoveUserFromGroupCommandInput, options?: __HttpHandlerOptions): Promise<RemoveUserFromGroupCommandOutput>;
            removeUserFromGroup(args: RemoveUserFromGroupCommandInput, cb: (err: any, data?: RemoveUserFromGroupCommandOutput) => void): void;
            removeUserFromGroup(args: RemoveUserFromGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveUserFromGroupCommandOutput) => void): void;
            /**
                * <p>Resets the password for a service-specific credential. The new password is Amazon Web Services
                *             generated and cryptographically strong. It cannot be configured by the user. Resetting
                *             the password immediately invalidates the previous password associated with this
                *             user.</p>
                */
            resetServiceSpecificCredential(args: ResetServiceSpecificCredentialCommandInput, options?: __HttpHandlerOptions): Promise<ResetServiceSpecificCredentialCommandOutput>;
            resetServiceSpecificCredential(args: ResetServiceSpecificCredentialCommandInput, cb: (err: any, data?: ResetServiceSpecificCredentialCommandOutput) => void): void;
            resetServiceSpecificCredential(args: ResetServiceSpecificCredentialCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResetServiceSpecificCredentialCommandOutput) => void): void;
            /**
                * <p>Synchronizes the specified MFA device with its IAM resource object on the Amazon Web Services
                *             servers.</p>
                *         <p>For more information about creating and working with virtual MFA devices, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a virtual MFA
                *                 device</a> in the <i>IAM User Guide</i>.</p>
                */
            resyncMFADevice(args: ResyncMFADeviceCommandInput, options?: __HttpHandlerOptions): Promise<ResyncMFADeviceCommandOutput>;
            resyncMFADevice(args: ResyncMFADeviceCommandInput, cb: (err: any, data?: ResyncMFADeviceCommandOutput) => void): void;
            resyncMFADevice(args: ResyncMFADeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ResyncMFADeviceCommandOutput) => void): void;
            /**
                * <p>Sets the specified version of the specified policy as the policy's default (operative)
                *             version.</p>
                *         <p>This operation affects all users, groups, and roles that the policy is attached to. To
                *             list the users, groups, and roles that the policy is attached to, use <a>ListEntitiesForPolicy</a>.</p>
                *         <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            setDefaultPolicyVersion(args: SetDefaultPolicyVersionCommandInput, options?: __HttpHandlerOptions): Promise<SetDefaultPolicyVersionCommandOutput>;
            setDefaultPolicyVersion(args: SetDefaultPolicyVersionCommandInput, cb: (err: any, data?: SetDefaultPolicyVersionCommandOutput) => void): void;
            setDefaultPolicyVersion(args: SetDefaultPolicyVersionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetDefaultPolicyVersionCommandOutput) => void): void;
            /**
                * <p>Sets the specified version of the global endpoint token as the token version used for
                *             the Amazon Web Services account.</p>
                *         <p>By default, Security Token Service (STS) is available as a global service, and all STS requests
                *             go to a single endpoint at <code>https://sts.amazonaws.com</code>. Amazon Web Services recommends
                *             using Regional STS endpoints to reduce latency, build in redundancy, and increase
                *             session token availability. For information about Regional endpoints for STS, see
                *                 <a href="https://docs.aws.amazon.com/general/latest/gr/sts.html">Security Token Service
                *                 endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
                *         <p>If you make an STS call to the global endpoint, the resulting session tokens might
                *             be valid in some Regions but not others. It depends on the version that is set in this
                *             operation. Version 1 tokens are valid only in Amazon Web Services Regions that are
                *             available by default. These tokens do not work in manually enabled Regions, such as Asia
                *             Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2
                *             tokens are longer and might affect systems where you temporarily store tokens. For
                *             information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and
                *                 deactivating STS in an Amazon Web Services Region</a> in the
                *                 <i>IAM User Guide</i>.</p>
                *         <p>To view the current session token version, see the
                *                 <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
                */
            setSecurityTokenServicePreferences(args: SetSecurityTokenServicePreferencesCommandInput, options?: __HttpHandlerOptions): Promise<SetSecurityTokenServicePreferencesCommandOutput>;
            setSecurityTokenServicePreferences(args: SetSecurityTokenServicePreferencesCommandInput, cb: (err: any, data?: SetSecurityTokenServicePreferencesCommandOutput) => void): void;
            setSecurityTokenServicePreferences(args: SetSecurityTokenServicePreferencesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SetSecurityTokenServicePreferencesCommandOutput) => void): void;
            /**
                * <p>Simulate how a set of IAM policies and optionally a resource-based policy works with
                *             a list of API operations and Amazon Web Services resources to determine the policies' effective
                *             permissions. The policies are provided as strings.</p>
                *         <p>The simulation does not perform the API operations; it only checks the authorization
                *             to determine if the simulated policies allow or deny the operations. You can simulate
                *             resources that don't exist in your account.</p>
                *         <p>If you want to simulate existing policies that are attached to an IAM user, group,
                *             or role, use <a>SimulatePrincipalPolicy</a> instead.</p>
                *         <p>Context keys are variables that are maintained by Amazon Web Services and its services and which
                *             provide details about the context of an API query request. You can use the
                *                 <code>Condition</code> element of an IAM policy to evaluate context keys. To get
                *             the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p>
                *         <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code>
                *             parameters to paginate the results.</p>
                *         <p>For more information about using the policy simulator, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html">Testing IAM policies
                *                 with the IAM policy simulator </a>in the
                *             <i>IAM User Guide</i>.</p>
                */
            simulateCustomPolicy(args: SimulateCustomPolicyCommandInput, options?: __HttpHandlerOptions): Promise<SimulateCustomPolicyCommandOutput>;
            simulateCustomPolicy(args: SimulateCustomPolicyCommandInput, cb: (err: any, data?: SimulateCustomPolicyCommandOutput) => void): void;
            simulateCustomPolicy(args: SimulateCustomPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SimulateCustomPolicyCommandOutput) => void): void;
            /**
                * <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of
                *             API operations and Amazon Web Services resources to determine the policies' effective permissions. The
                *             entity can be an IAM user, group, or role. If you specify a user, then the simulation
                *             also includes all of the policies that are attached to groups that the user belongs to.
                *             You can simulate resources that don't exist in your account.</p>
                *         <p>You can optionally include a list of one or more additional policies specified as
                *             strings to include in the simulation. If you want to simulate only policies specified as
                *             strings, use <a>SimulateCustomPolicy</a> instead.</p>
                *         <p>You can also optionally include one resource-based policy to be evaluated with each of
                *             the resources included in the simulation.</p>
                *         <p>The simulation does not perform the API operations; it only checks the authorization
                *             to determine if the simulated policies allow or deny the operations.</p>
                *         <p>
                *             <b>Note:</b> This operation discloses information about the
                *             permissions granted to other users. If you do not want users to see other user's
                *             permissions, then consider allowing them to use <a>SimulateCustomPolicy</a>
                *             instead.</p>
                *         <p>Context keys are variables maintained by Amazon Web Services and its services that provide details
                *             about the context of an API query request. You can use the <code>Condition</code>
                *             element of an IAM policy to evaluate context keys. To get the list of context keys
                *             that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p>
                *         <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code>
                *             parameters to paginate the results.</p>
                *         <p>For more information about using the policy simulator, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html">Testing IAM policies
                *                 with the IAM policy simulator </a>in the
                *             <i>IAM User Guide</i>.</p>
                */
            simulatePrincipalPolicy(args: SimulatePrincipalPolicyCommandInput, options?: __HttpHandlerOptions): Promise<SimulatePrincipalPolicyCommandOutput>;
            simulatePrincipalPolicy(args: SimulatePrincipalPolicyCommandInput, cb: (err: any, data?: SimulatePrincipalPolicyCommandOutput) => void): void;
            simulatePrincipalPolicy(args: SimulatePrincipalPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SimulatePrincipalPolicyCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to an IAM instance profile. If a tag with the same key name
                *       already exists, then that tag is overwritten with the new value.</p>
                *          <p>Each tag consists of a key name and an associated value. By assigning tags to your resources, you can do the
                *       following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Administrative grouping and discovery</b> - Attach
                *           tags to resources to aid in organization and search. For example, you could search for all
                *           resources with the key name <i>Project</i> and the value
                *             <i>MyImportantProject</i>. Or search for all resources with the key name
                *             <i>Cost Center</i> and the value <i>41200</i>. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Access control</b> - Include tags in IAM user-based
                *           and resource-based policies. You can use tags to restrict access to only an IAM instance
                *           profile that has a specified tag attached. For examples of policies that show how to use
                *           tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
                *             <i>IAM User Guide</i>.</p>
                *             </li>
                *          </ul>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *                </li>
                *                <li>
                *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
                *             need to store an array, you can store comma-separated values in the string. However, you
                *             must interpret the value in your code.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            tagInstanceProfile(args: TagInstanceProfileCommandInput, options?: __HttpHandlerOptions): Promise<TagInstanceProfileCommandOutput>;
            tagInstanceProfile(args: TagInstanceProfileCommandInput, cb: (err: any, data?: TagInstanceProfileCommandOutput) => void): void;
            tagInstanceProfile(args: TagInstanceProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagInstanceProfileCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to an IAM virtual multi-factor authentication (MFA) device. If
                *       a tag with the same key name already exists, then that tag is overwritten with the new
                *       value.</p>
                *          <p>A tag consists of a key name and an associated value. By assigning tags to your
                *       resources, you can do the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Administrative grouping and discovery</b> - Attach
                *           tags to resources to aid in organization and search. For example, you could search for all
                *           resources with the key name <i>Project</i> and the value
                *             <i>MyImportantProject</i>. Or search for all resources with the key name
                *             <i>Cost Center</i> and the value <i>41200</i>. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Access control</b> - Include tags in IAM user-based
                *           and resource-based policies. You can use tags to restrict access to only an IAM virtual
                *           MFA device that has a specified tag attached. For examples of policies that show how to
                *           use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
                *             <i>IAM User Guide</i>.</p>
                *             </li>
                *          </ul>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *                </li>
                *                <li>
                *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
                *             need to store an array, you can store comma-separated values in the string. However, you
                *             must interpret the value in your code.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            tagMFADevice(args: TagMFADeviceCommandInput, options?: __HttpHandlerOptions): Promise<TagMFADeviceCommandOutput>;
            tagMFADevice(args: TagMFADeviceCommandInput, cb: (err: any, data?: TagMFADeviceCommandOutput) => void): void;
            tagMFADevice(args: TagMFADeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagMFADeviceCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to an OpenID Connect (OIDC)-compatible identity provider. For
                *       more information about these providers, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html">About web identity federation</a>. If
                *       a tag with the same key name already exists, then that tag is overwritten with the new
                *       value.</p>
                *          <p>A tag consists of a key name and an associated value. By assigning tags to your
                *       resources, you can do the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Administrative grouping and discovery</b> - Attach
                *           tags to resources to aid in organization and search. For example, you could search for all
                *           resources with the key name <i>Project</i> and the value
                *             <i>MyImportantProject</i>. Or search for all resources with the key name
                *             <i>Cost Center</i> and the value <i>41200</i>. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Access control</b> - Include tags in IAM user-based
                *           and resource-based policies. You can use tags to restrict access to only an OIDC provider
                *           that has a specified tag attached. For examples of policies that show how to use tags to
                *           control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
                *           <i>IAM User Guide</i>.</p>
                *             </li>
                *          </ul>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *                </li>
                *                <li>
                *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
                *             need to store an array, you can store comma-separated values in the string. However, you
                *             must interpret the value in your code.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            tagOpenIDConnectProvider(args: TagOpenIDConnectProviderCommandInput, options?: __HttpHandlerOptions): Promise<TagOpenIDConnectProviderCommandOutput>;
            tagOpenIDConnectProvider(args: TagOpenIDConnectProviderCommandInput, cb: (err: any, data?: TagOpenIDConnectProviderCommandOutput) => void): void;
            tagOpenIDConnectProvider(args: TagOpenIDConnectProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagOpenIDConnectProviderCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to an IAM customer managed policy. If a tag with the same key
                *       name already exists, then that tag is overwritten with the new value.</p>
                *          <p>A tag consists of a key name and an associated value. By assigning tags to your
                *       resources, you can do the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Administrative grouping and discovery</b> - Attach
                *           tags to resources to aid in organization and search. For example, you could search for all
                *           resources with the key name <i>Project</i> and the value
                *             <i>MyImportantProject</i>. Or search for all resources with the key name
                *             <i>Cost Center</i> and the value <i>41200</i>. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Access control</b> - Include tags in IAM user-based
                *           and resource-based policies. You can use tags to restrict access to only an IAM customer
                *           managed policy that has a specified tag attached. For examples of policies that show how
                *           to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
                *             <i>IAM User Guide</i>.</p>
                *             </li>
                *          </ul>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *                </li>
                *                <li>
                *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
                *             need to store an array, you can store comma-separated values in the string. However, you
                *             must interpret the value in your code.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            tagPolicy(args: TagPolicyCommandInput, options?: __HttpHandlerOptions): Promise<TagPolicyCommandOutput>;
            tagPolicy(args: TagPolicyCommandInput, cb: (err: any, data?: TagPolicyCommandOutput) => void): void;
            tagPolicy(args: TagPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagPolicyCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to an IAM role. The role can be a regular role or a
                *       service-linked role. If a tag with the same key name already exists, then that tag is
                *       overwritten with the new value.</p>
                *          <p>A tag consists of a key name and an associated value. By assigning tags to your
                *       resources, you can do the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Administrative grouping and discovery</b> - Attach
                *           tags to resources to aid in organization and search. For example, you could search for all
                *           resources with the key name <i>Project</i> and the value
                *             <i>MyImportantProject</i>. Or search for all resources with the key name
                *             <i>Cost Center</i> and the value <i>41200</i>. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Access control</b> - Include tags in IAM user-based
                *           and resource-based policies. You can use tags to restrict access to only an IAM role
                *           that has a specified tag attached. You can also restrict access to only those resources
                *           that have a certain tag attached. For examples of policies that show how to use tags to
                *           control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
                *           <i>IAM User Guide</i>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Cost allocation</b> - Use tags to help track which
                *           individuals and teams are using which Amazon Web Services resources.</p>
                *             </li>
                *          </ul>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *                </li>
                *                <li>
                *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
                *             need to store an array, you can store comma-separated values in the string. However, you
                *             must interpret the value in your code.</p>
                *                </li>
                *             </ul>
                *          </note>
                *          <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM identities</a> in the
                *         <i>IAM User Guide</i>.</p>
                */
            tagRole(args: TagRoleCommandInput, options?: __HttpHandlerOptions): Promise<TagRoleCommandOutput>;
            tagRole(args: TagRoleCommandInput, cb: (err: any, data?: TagRoleCommandOutput) => void): void;
            tagRole(args: TagRoleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagRoleCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to a Security Assertion Markup Language (SAML) identity provider.
                *       For more information about these providers, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based federation </a>.
                *       If a tag with the same key name already exists, then that tag is overwritten with the new
                *       value.</p>
                *          <p>A tag consists of a key name and an associated value. By assigning tags to your
                *       resources, you can do the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Administrative grouping and discovery</b> - Attach
                *           tags to resources to aid in organization and search. For example, you could search for all
                *           resources with the key name <i>Project</i> and the value
                *             <i>MyImportantProject</i>. Or search for all resources with the key name
                *             <i>Cost Center</i> and the value <i>41200</i>. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Access control</b> - Include tags in IAM user-based
                *           and resource-based policies. You can use tags to restrict access to only a SAML identity
                *           provider that has a specified tag attached. For examples of policies that show how to use
                *           tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
                *             <i>IAM User Guide</i>.</p>
                *             </li>
                *          </ul>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *                </li>
                *                <li>
                *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
                *             need to store an array, you can store comma-separated values in the string. However, you
                *             must interpret the value in your code.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            tagSAMLProvider(args: TagSAMLProviderCommandInput, options?: __HttpHandlerOptions): Promise<TagSAMLProviderCommandOutput>;
            tagSAMLProvider(args: TagSAMLProviderCommandInput, cb: (err: any, data?: TagSAMLProviderCommandOutput) => void): void;
            tagSAMLProvider(args: TagSAMLProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagSAMLProviderCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to an IAM server certificate. If a tag with the same key name
                *       already exists, then that tag is overwritten with the new value.</p>
                *          <note>
                *             <p>For certificates in a Region supported by Certificate Manager (ACM), we
                *         recommend that you don't use IAM server certificates. Instead, use ACM to provision,
                *         manage, and deploy your server certificates. For more information about IAM server
                *         certificates, <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with server
                *           certificates</a> in the <i>IAM User Guide</i>.</p>
                *          </note>
                *          <p>A tag consists of a key name and an associated value. By assigning tags to your
                *       resources, you can do the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Administrative grouping and discovery</b> - Attach
                *           tags to resources to aid in organization and search. For example, you could search for all
                *           resources with the key name <i>Project</i> and the value
                *             <i>MyImportantProject</i>. Or search for all resources with the key name
                *             <i>Cost Center</i> and the value <i>41200</i>. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Access control</b> - Include tags in IAM user-based
                *           and resource-based policies. You can use tags to restrict access to only a server
                *           certificate that has a specified tag attached. For examples of policies that show how to
                *           use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
                *             <i>IAM User Guide</i>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Cost allocation</b> - Use tags to help track which
                *           individuals and teams are using which Amazon Web Services resources.</p>
                *             </li>
                *          </ul>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *                </li>
                *                <li>
                *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
                *             need to store an array, you can store comma-separated values in the string. However, you
                *             must interpret the value in your code.</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            tagServerCertificate(args: TagServerCertificateCommandInput, options?: __HttpHandlerOptions): Promise<TagServerCertificateCommandOutput>;
            tagServerCertificate(args: TagServerCertificateCommandInput, cb: (err: any, data?: TagServerCertificateCommandOutput) => void): void;
            tagServerCertificate(args: TagServerCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagServerCertificateCommandOutput) => void): void;
            /**
                * <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists,
                *       then that tag is overwritten with the new value.</p>
                *          <p>A tag consists of a key name and an associated value. By assigning tags to your
                *       resources, you can do the following:</p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>Administrative grouping and discovery</b> - Attach
                *           tags to resources to aid in organization and search. For example, you could search for all
                *           resources with the key name <i>Project</i> and the value
                *             <i>MyImportantProject</i>. Or search for all resources with the key name
                *             <i>Cost Center</i> and the value <i>41200</i>. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Access control</b> - Include tags in IAM user-based
                *           and resource-based policies. You can use tags to restrict access to only an IAM
                *           requesting user that has a specified tag attached. You can also restrict access to only
                *           those resources that have a certain tag attached. For examples of policies that show how
                *           to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
                *             <i>IAM User Guide</i>.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>Cost allocation</b> - Use tags to help track which
                *           individuals and teams are using which Amazon Web Services resources.</p>
                *             </li>
                *          </ul>
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *                </li>
                *                <li>
                *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
                *             need to store an array, you can store comma-separated values in the string. However, you
                *             must interpret the value in your code.</p>
                *                </li>
                *             </ul>
                *          </note>
                *          <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM identities</a> in the
                *         <i>IAM User Guide</i>.</p>
                */
            tagUser(args: TagUserCommandInput, options?: __HttpHandlerOptions): Promise<TagUserCommandOutput>;
            tagUser(args: TagUserCommandInput, cb: (err: any, data?: TagUserCommandOutput) => void): void;
            tagUser(args: TagUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagUserCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the IAM instance profile. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            untagInstanceProfile(args: UntagInstanceProfileCommandInput, options?: __HttpHandlerOptions): Promise<UntagInstanceProfileCommandOutput>;
            untagInstanceProfile(args: UntagInstanceProfileCommandInput, cb: (err: any, data?: UntagInstanceProfileCommandOutput) => void): void;
            untagInstanceProfile(args: UntagInstanceProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagInstanceProfileCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the IAM virtual multi-factor authentication (MFA)
                *       device. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            untagMFADevice(args: UntagMFADeviceCommandInput, options?: __HttpHandlerOptions): Promise<UntagMFADeviceCommandOutput>;
            untagMFADevice(args: UntagMFADeviceCommandInput, cb: (err: any, data?: UntagMFADeviceCommandOutput) => void): void;
            untagMFADevice(args: UntagMFADeviceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagMFADeviceCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the specified OpenID Connect (OIDC)-compatible identity
                *       provider in IAM. For more information about OIDC providers, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html">About web identity federation</a>.
                *       For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            untagOpenIDConnectProvider(args: UntagOpenIDConnectProviderCommandInput, options?: __HttpHandlerOptions): Promise<UntagOpenIDConnectProviderCommandOutput>;
            untagOpenIDConnectProvider(args: UntagOpenIDConnectProviderCommandInput, cb: (err: any, data?: UntagOpenIDConnectProviderCommandOutput) => void): void;
            untagOpenIDConnectProvider(args: UntagOpenIDConnectProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagOpenIDConnectProviderCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the customer managed policy. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            untagPolicy(args: UntagPolicyCommandInput, options?: __HttpHandlerOptions): Promise<UntagPolicyCommandOutput>;
            untagPolicy(args: UntagPolicyCommandInput, cb: (err: any, data?: UntagPolicyCommandOutput) => void): void;
            untagPolicy(args: UntagPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagPolicyCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            untagRole(args: UntagRoleCommandInput, options?: __HttpHandlerOptions): Promise<UntagRoleCommandOutput>;
            untagRole(args: UntagRoleCommandInput, cb: (err: any, data?: UntagRoleCommandOutput) => void): void;
            untagRole(args: UntagRoleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagRoleCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the specified Security Assertion Markup Language (SAML)
                *       identity provider in IAM. For more information about these providers, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html">About web identity
                *         federation</a>. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            untagSAMLProvider(args: UntagSAMLProviderCommandInput, options?: __HttpHandlerOptions): Promise<UntagSAMLProviderCommandOutput>;
            untagSAMLProvider(args: UntagSAMLProviderCommandInput, cb: (err: any, data?: UntagSAMLProviderCommandOutput) => void): void;
            untagSAMLProvider(args: UntagSAMLProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagSAMLProviderCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the IAM server certificate.
                *       For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *          <note>
                *             <p>For certificates in a Region supported by Certificate Manager (ACM), we
                *         recommend that you don't use IAM server certificates. Instead, use ACM to provision,
                *         manage, and deploy your server certificates. For more information about IAM server
                *         certificates, <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with server
                *           certificates</a> in the <i>IAM User Guide</i>.</p>
                *          </note>
                */
            untagServerCertificate(args: UntagServerCertificateCommandInput, options?: __HttpHandlerOptions): Promise<UntagServerCertificateCommandOutput>;
            untagServerCertificate(args: UntagServerCertificateCommandInput, cb: (err: any, data?: UntagServerCertificateCommandOutput) => void): void;
            untagServerCertificate(args: UntagServerCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagServerCertificateCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            untagUser(args: UntagUserCommandInput, options?: __HttpHandlerOptions): Promise<UntagUserCommandOutput>;
            untagUser(args: UntagUserCommandInput, cb: (err: any, data?: UntagUserCommandOutput) => void): void;
            untagUser(args: UntagUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagUserCommandOutput) => void): void;
            /**
                * <p>Changes the status of the specified access key from Active to Inactive, or vice versa.
                *             This operation can be used to disable a user's key as part of a key rotation
                *             workflow.</p>
                *         <p>If the <code>UserName</code> is not specified, the user name is determined implicitly
                *             based on the Amazon Web Services access key ID used to sign the request. This operation works for
                *             access keys under the Amazon Web Services account. Consequently, you can use this operation to manage
                *             Amazon Web Services account root user credentials even if the Amazon Web Services account has no associated
                *             users.</p>
                *         <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing keys and certificates</a>
                *             in the <i>IAM User Guide</i>.</p>
                */
            updateAccessKey(args: UpdateAccessKeyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAccessKeyCommandOutput>;
            updateAccessKey(args: UpdateAccessKeyCommandInput, cb: (err: any, data?: UpdateAccessKeyCommandOutput) => void): void;
            updateAccessKey(args: UpdateAccessKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAccessKeyCommandOutput) => void): void;
            /**
                * <p>Updates the password policy settings for the Amazon Web Services account.</p>
                *         <note>
                *             <p>This operation does not support partial updates. No parameters are required, but
                *                 if you do not specify a parameter, that parameter's value reverts to its default
                *                 value. See the <b>Request Parameters</b> section for each
                *                 parameter's default value. Also note that some parameters do not allow the default
                *                 parameter to be explicitly set. Instead, to invoke the default value, do not include
                *                 that parameter when you invoke the operation.</p>
                *         </note>
                *         <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM password
                *                 policy</a> in the <i>IAM User Guide</i>.</p>
                */
            updateAccountPasswordPolicy(args: UpdateAccountPasswordPolicyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAccountPasswordPolicyCommandOutput>;
            updateAccountPasswordPolicy(args: UpdateAccountPasswordPolicyCommandInput, cb: (err: any, data?: UpdateAccountPasswordPolicyCommandOutput) => void): void;
            updateAccountPasswordPolicy(args: UpdateAccountPasswordPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAccountPasswordPolicyCommandOutput) => void): void;
            /**
                * <p>Updates the policy that grants an IAM entity permission to assume a role. This is
                *             typically referred to as the "role trust policy". For more information about roles, see
                *                 <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using roles to
                *                 delegate permissions and federate identities</a>.</p>
                */
            updateAssumeRolePolicy(args: UpdateAssumeRolePolicyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateAssumeRolePolicyCommandOutput>;
            updateAssumeRolePolicy(args: UpdateAssumeRolePolicyCommandInput, cb: (err: any, data?: UpdateAssumeRolePolicyCommandOutput) => void): void;
            updateAssumeRolePolicy(args: UpdateAssumeRolePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateAssumeRolePolicyCommandOutput) => void): void;
            /**
                * <p>Updates the name and/or the path of the specified IAM group.</p>
                *         <important>
                *             <p> You should understand the implications of changing a group's path or name. For
                *                 more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming users and
                *                     groups</a> in the <i>IAM User Guide</i>.</p>
                *         </important>
                *         <note>
                *             <p>The person making the request (the principal), must have permission to change the
                *                 role group with the old name and the new name. For example, to change the group
                *                 named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy
                *                 that allows them to update both groups. If the principal has permission to update
                *                 the <code>Managers</code> group, but not the <code>MGRs</code> group, then the
                *                 update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access management</a>.
                *             </p>
                *         </note>
                */
            updateGroup(args: UpdateGroupCommandInput, options?: __HttpHandlerOptions): Promise<UpdateGroupCommandOutput>;
            updateGroup(args: UpdateGroupCommandInput, cb: (err: any, data?: UpdateGroupCommandOutput) => void): void;
            updateGroup(args: UpdateGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateGroupCommandOutput) => void): void;
            /**
                * <p>Changes the password for the specified IAM user. You can use the CLI,
                *             the Amazon Web Services API, or the <b>Users</b> page in the IAM console
                *             to change the password for any IAM user. Use <a>ChangePassword</a> to
                *             change your own password in the <b>My Security Credentials</b>
                *             page in the Amazon Web Services Management Console.</p>
                *         <p>For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing passwords</a> in the
                *                 <i>IAM User Guide</i>.</p>
                */
            updateLoginProfile(args: UpdateLoginProfileCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLoginProfileCommandOutput>;
            updateLoginProfile(args: UpdateLoginProfileCommandInput, cb: (err: any, data?: UpdateLoginProfileCommandOutput) => void): void;
            updateLoginProfile(args: UpdateLoginProfileCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLoginProfileCommandOutput) => void): void;
            /**
                * <p>Replaces the existing list of server certificate thumbprints associated with an OpenID
                *             Connect (OIDC) provider resource object with a new list of thumbprints.</p>
                *         <p>The list that you pass with this operation completely replaces the existing list of
                *             thumbprints. (The lists are not merged.)</p>
                *         <p>Typically, you need to update a thumbprint only when the identity provider certificate
                *             changes, which occurs rarely. However, if the provider's certificate
                *                 <i>does</i> change, any attempt to assume an IAM role that specifies
                *             the OIDC provider as a principal fails until the certificate thumbprint is
                *             updated.</p>
                *         <note>
                *             <p>Amazon Web Services secures communication with some OIDC identity providers (IdPs) through our
                *             library of trusted certificate authorities (CAs) instead of using a certificate
                *             thumbprint to verify your IdP server certificate. These OIDC IdPs include Google, and
                *             those that use an Amazon S3 bucket to host a JSON Web Key Set (JWKS) endpoint. In these
                *             cases, your legacy thumbprint remains in your configuration, but is no longer used for validation.</p>
                *          </note>
                *         <note>
                *             <p>Trust for the OIDC provider is derived from the provider certificate and is
                *                 validated by the thumbprint. Therefore, it is best to limit access to the
                *                     <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly
                *                 privileged users.</p>
                *         </note>
                */
            updateOpenIDConnectProviderThumbprint(args: UpdateOpenIDConnectProviderThumbprintCommandInput, options?: __HttpHandlerOptions): Promise<UpdateOpenIDConnectProviderThumbprintCommandOutput>;
            updateOpenIDConnectProviderThumbprint(args: UpdateOpenIDConnectProviderThumbprintCommandInput, cb: (err: any, data?: UpdateOpenIDConnectProviderThumbprintCommandOutput) => void): void;
            updateOpenIDConnectProviderThumbprint(args: UpdateOpenIDConnectProviderThumbprintCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateOpenIDConnectProviderThumbprintCommandOutput) => void): void;
            /**
                * <p>Updates the description or maximum session duration setting of a role.</p>
                */
            updateRole(args: UpdateRoleCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRoleCommandOutput>;
            updateRole(args: UpdateRoleCommandInput, cb: (err: any, data?: UpdateRoleCommandOutput) => void): void;
            updateRole(args: UpdateRoleCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRoleCommandOutput) => void): void;
            /**
                * <p>Use <a>UpdateRole</a> instead.</p>
                *         <p>Modifies only the description of a role. This operation performs the same function as
                *             the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
                */
            updateRoleDescription(args: UpdateRoleDescriptionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRoleDescriptionCommandOutput>;
            updateRoleDescription(args: UpdateRoleDescriptionCommandInput, cb: (err: any, data?: UpdateRoleDescriptionCommandOutput) => void): void;
            updateRoleDescription(args: UpdateRoleDescriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRoleDescriptionCommandOutput) => void): void;
            /**
                * <p>Updates the metadata document for an existing SAML provider resource object.</p>
                *         <note>
                *             <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
                *         </note>
                */
            updateSAMLProvider(args: UpdateSAMLProviderCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSAMLProviderCommandOutput>;
            updateSAMLProvider(args: UpdateSAMLProviderCommandInput, cb: (err: any, data?: UpdateSAMLProviderCommandOutput) => void): void;
            updateSAMLProvider(args: UpdateSAMLProviderCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSAMLProviderCommandOutput) => void): void;
            /**
                * <p>Updates the name and/or the path of the specified server certificate stored in
                *             IAM.</p>
                *         <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working
                *                 with server certificates</a> in the <i>IAM User Guide</i>. This
                *             topic also includes a list of Amazon Web Services services that can use the server certificates that
                *             you manage with IAM.</p>
                *         <important>
                *             <p>You should understand the implications of changing a server certificate's path or
                *                 name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a server certificate</a> in the
                *                     <i>IAM User Guide</i>.</p>
                *         </important>
                *         <note>
                *             <p>The person making the request (the principal), must have permission to change the
                *                 server certificate with the old name and the new name. For example, to change the
                *                 certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the
                *                 principal must have a policy that allows them to update both certificates. If the
                *                 principal has permission to update the <code>ProductionCert</code> group, but not
                *                 the <code>ProdCert</code> certificate, then the update fails. For more information
                *                 about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access management</a> in the <i>IAM User Guide</i>.</p>
                *         </note>
                */
            updateServerCertificate(args: UpdateServerCertificateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateServerCertificateCommandOutput>;
            updateServerCertificate(args: UpdateServerCertificateCommandInput, cb: (err: any, data?: UpdateServerCertificateCommandOutput) => void): void;
            updateServerCertificate(args: UpdateServerCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateServerCertificateCommandOutput) => void): void;
            /**
                * <p>Sets the status of a service-specific credential to <code>Active</code> or
                *                 <code>Inactive</code>. Service-specific credentials that are inactive cannot be used
                *             for authentication to the service. This operation can be used to disable a user's
                *             service-specific credential as part of a credential rotation work flow.</p>
                */
            updateServiceSpecificCredential(args: UpdateServiceSpecificCredentialCommandInput, options?: __HttpHandlerOptions): Promise<UpdateServiceSpecificCredentialCommandOutput>;
            updateServiceSpecificCredential(args: UpdateServiceSpecificCredentialCommandInput, cb: (err: any, data?: UpdateServiceSpecificCredentialCommandOutput) => void): void;
            updateServiceSpecificCredential(args: UpdateServiceSpecificCredentialCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateServiceSpecificCredentialCommandOutput) => void): void;
            /**
                * <p>Changes the status of the specified user signing certificate from active to disabled,
                *             or vice versa. This operation can be used to disable an IAM user's signing certificate
                *             as part of a certificate rotation work flow.</p>
                *         <p>If the <code>UserName</code> field is not specified, the user name is determined
                *             implicitly based on the Amazon Web Services access key ID used to sign the request. This operation
                *             works for access keys under the Amazon Web Services account. Consequently, you can use this operation
                *             to manage Amazon Web Services account root user credentials even if the Amazon Web Services account has no
                *             associated users.</p>
                */
            updateSigningCertificate(args: UpdateSigningCertificateCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSigningCertificateCommandOutput>;
            updateSigningCertificate(args: UpdateSigningCertificateCommandInput, cb: (err: any, data?: UpdateSigningCertificateCommandOutput) => void): void;
            updateSigningCertificate(args: UpdateSigningCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSigningCertificateCommandOutput) => void): void;
            /**
                * <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public
                *             keys that are inactive cannot be used for authentication. This operation can be used to
                *             disable a user's SSH public key as part of a key rotation work flow.</p>
                *         <p>The SSH public key affected by this operation is used only for authenticating the
                *             associated IAM user to an CodeCommit repository. For more information about using SSH keys
                *             to authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for
                *                 SSH connections</a> in the <i>CodeCommit User Guide</i>.</p>
                */
            updateSSHPublicKey(args: UpdateSSHPublicKeyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSSHPublicKeyCommandOutput>;
            updateSSHPublicKey(args: UpdateSSHPublicKeyCommandInput, cb: (err: any, data?: UpdateSSHPublicKeyCommandOutput) => void): void;
            updateSSHPublicKey(args: UpdateSSHPublicKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSSHPublicKeyCommandOutput) => void): void;
            /**
                * <p>Updates the name and/or the path of the specified IAM user.</p>
                *         <important>
                *             <p> You should understand the implications of changing an IAM user's path or name.
                *                 For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM
                *                     user</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM
                *                     group</a> in the <i>IAM User Guide</i>.</p>
                *         </important>
                *         <note>
                *             <p> To change a user name, the requester must have appropriate permissions on both
                *                 the source object and the target object. For example, to change Bob to Robert, the
                *                 entity making the request must have permission on Bob and Robert, or must have
                *                 permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and policies</a>. </p>
                *         </note>
                */
            updateUser(args: UpdateUserCommandInput, options?: __HttpHandlerOptions): Promise<UpdateUserCommandOutput>;
            updateUser(args: UpdateUserCommandInput, cb: (err: any, data?: UpdateUserCommandOutput) => void): void;
            updateUser(args: UpdateUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateUserCommandOutput) => void): void;
            /**
                * <p>Uploads a server certificate entity for the Amazon Web Services account. The server certificate
                *             entity includes a public key certificate, a private key, and an optional certificate
                *             chain, which should all be PEM-encoded.</p>
                *         <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">Certificate Manager</a> to
                *             provision, manage, and deploy your server certificates. With ACM you can request a
                *             certificate, deploy it to Amazon Web Services resources, and let ACM handle certificate renewals for
                *             you. Certificates provided by ACM are free. For more information about using ACM,
                *             see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">Certificate Manager User
                *                 Guide</a>.</p>
                *         <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working
                *                 with server certificates</a> in the <i>IAM User Guide</i>. This
                *             topic includes a list of Amazon Web Services services that can use the server certificates that you
                *             manage with IAM.</p>
                *         <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS
                *                 quotas</a> in the <i>IAM User Guide</i>.</p>
                *         <note>
                *             <p>Because the body of the public key certificate, private key, and the certificate
                *                 chain can be large, you should use POST rather than GET when calling
                *                     <code>UploadServerCertificate</code>. For information about setting up
                *                 signatures and authorization through the API, see <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing Amazon Web Services API
                *                     requests</a> in the <i>Amazon Web Services General Reference</i>. For general
                *                 information about using the Query API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by making HTTP query
                *                     requests</a> in the <i>IAM User Guide</i>.</p>
                *         </note>
                */
            uploadServerCertificate(args: UploadServerCertificateCommandInput, options?: __HttpHandlerOptions): Promise<UploadServerCertificateCommandOutput>;
            uploadServerCertificate(args: UploadServerCertificateCommandInput, cb: (err: any, data?: UploadServerCertificateCommandOutput) => void): void;
            uploadServerCertificate(args: UploadServerCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UploadServerCertificateCommandOutput) => void): void;
            /**
                * <p>Uploads an X.509 signing certificate and associates it with the specified IAM user.
                *             Some Amazon Web Services services require you to use certificates to validate requests that are signed
                *             with a corresponding private key. When you upload the certificate, its default status is
                *                 <code>Active</code>.</p>
                *         <p>For information about when you would use an X.509 signing certificate, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Managing
                *                 server certificates in IAM</a> in the
                *             <i>IAM User Guide</i>.</p>
                *         <p>If the <code>UserName</code> is not specified, the IAM user name is determined
                *             implicitly based on the Amazon Web Services access key ID used to sign the request. This operation
                *             works for access keys under the Amazon Web Services account. Consequently, you can use this operation
                *             to manage Amazon Web Services account root user credentials even if the Amazon Web Services account has no
                *             associated users.</p>
                *         <note>
                *             <p>Because the body of an X.509 certificate can be large, you should use POST rather
                *                 than GET when calling <code>UploadSigningCertificate</code>. For information about
                *                 setting up signatures and authorization through the API, see <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing
                *                     Amazon Web Services API requests</a> in the <i>Amazon Web Services General Reference</i>. For
                *                 general information about using the Query API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query
                *                     requests</a> in the <i>IAM User Guide</i>.</p>
                *         </note>
                */
            uploadSigningCertificate(args: UploadSigningCertificateCommandInput, options?: __HttpHandlerOptions): Promise<UploadSigningCertificateCommandOutput>;
            uploadSigningCertificate(args: UploadSigningCertificateCommandInput, cb: (err: any, data?: UploadSigningCertificateCommandOutput) => void): void;
            uploadSigningCertificate(args: UploadSigningCertificateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UploadSigningCertificateCommandOutput) => void): void;
            /**
                * <p>Uploads an SSH public key and associates it with the specified IAM user.</p>
                *         <p>The SSH public key uploaded by this operation can be used only for authenticating the
                *             associated IAM user to an CodeCommit repository. For more information about using SSH keys
                *             to authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for
                *                 SSH connections</a> in the <i>CodeCommit User Guide</i>.</p>
                */
            uploadSSHPublicKey(args: UploadSSHPublicKeyCommandInput, options?: __HttpHandlerOptions): Promise<UploadSSHPublicKeyCommandOutput>;
            uploadSSHPublicKey(args: UploadSSHPublicKeyCommandInput, cb: (err: any, data?: UploadSSHPublicKeyCommandOutput) => void): void;
            uploadSSHPublicKey(args: UploadSSHPublicKeyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UploadSSHPublicKeyCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AddClientIDToOpenIDConnectProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { AddClientIDToOpenIDConnectProviderRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface AddClientIDToOpenIDConnectProviderCommandInput extends AddClientIDToOpenIDConnectProviderRequest {
    }
    export interface AddClientIDToOpenIDConnectProviderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds a new client ID (also known as audience) to the list of client IDs already
        *             registered for the specified IAM OpenID Connect (OIDC) provider resource.</p>
        *         <p>This operation is idempotent; it does not fail or return an error if you add an
        *             existing client ID to the provider.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, AddClientIDToOpenIDConnectProviderCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, AddClientIDToOpenIDConnectProviderCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new AddClientIDToOpenIDConnectProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddClientIDToOpenIDConnectProviderCommandInput} for command's `input` shape.
        * @see {@link AddClientIDToOpenIDConnectProviderCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class AddClientIDToOpenIDConnectProviderCommand extends $Command<AddClientIDToOpenIDConnectProviderCommandInput, AddClientIDToOpenIDConnectProviderCommandOutput, IAMClientResolvedConfig> {
            readonly input: AddClientIDToOpenIDConnectProviderCommandInput;
            constructor(input: AddClientIDToOpenIDConnectProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddClientIDToOpenIDConnectProviderCommandInput, AddClientIDToOpenIDConnectProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AddRoleToInstanceProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { AddRoleToInstanceProfileRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface AddRoleToInstanceProfileCommandInput extends AddRoleToInstanceProfileRequest {
    }
    export interface AddRoleToInstanceProfileCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds the specified IAM role to the specified instance profile. An instance profile
        *             can contain only one role, and this quota cannot be increased. You can remove the
        *             existing role and then add a different role to an instance profile. You must then wait
        *             for the change to appear across all of Amazon Web Services because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual
        *                 consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the
        *                 instance profile</a>, or you can stop your instance and then restart it.</p>
        *         <note>
        *             <p>The caller of this operation must be granted the <code>PassRole</code> permission
        *                 on the IAM role by a permissions policy.</p>
        *         </note>
        *         <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with roles</a>. For more
        *             information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About instance
        *             profiles</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, AddRoleToInstanceProfileCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, AddRoleToInstanceProfileCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new AddRoleToInstanceProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddRoleToInstanceProfileCommandInput} for command's `input` shape.
        * @see {@link AddRoleToInstanceProfileCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class AddRoleToInstanceProfileCommand extends $Command<AddRoleToInstanceProfileCommandInput, AddRoleToInstanceProfileCommandOutput, IAMClientResolvedConfig> {
            readonly input: AddRoleToInstanceProfileCommandInput;
            constructor(input: AddRoleToInstanceProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddRoleToInstanceProfileCommandInput, AddRoleToInstanceProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AddUserToGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { AddUserToGroupRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface AddUserToGroupCommandInput extends AddUserToGroupRequest {
    }
    export interface AddUserToGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds the specified user to the specified group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, AddUserToGroupCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, AddUserToGroupCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new AddUserToGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AddUserToGroupCommandInput} for command's `input` shape.
        * @see {@link AddUserToGroupCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class AddUserToGroupCommand extends $Command<AddUserToGroupCommandInput, AddUserToGroupCommandOutput, IAMClientResolvedConfig> {
            readonly input: AddUserToGroupCommandInput;
            constructor(input: AddUserToGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AddUserToGroupCommandInput, AddUserToGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AttachGroupPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { AttachGroupPolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface AttachGroupPolicyCommandInput extends AttachGroupPolicyRequest {
    }
    export interface AttachGroupPolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Attaches the specified managed policy to the specified IAM group.</p>
        *         <p>You use this operation to attach a managed policy to a group. To embed an inline
        *             policy in a group, use <a>PutGroupPolicy</a>.</p>
        *         <p>As a best practice, you can validate your IAM policies.
        *      To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a>
        *             in the <i>IAM User Guide</i>.</p>
        *         <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, AttachGroupPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, AttachGroupPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new AttachGroupPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AttachGroupPolicyCommandInput} for command's `input` shape.
        * @see {@link AttachGroupPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class AttachGroupPolicyCommand extends $Command<AttachGroupPolicyCommandInput, AttachGroupPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: AttachGroupPolicyCommandInput;
            constructor(input: AttachGroupPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AttachGroupPolicyCommandInput, AttachGroupPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AttachRolePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { AttachRolePolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface AttachRolePolicyCommandInput extends AttachRolePolicyRequest {
    }
    export interface AttachRolePolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Attaches the specified managed policy to the specified IAM role. When you attach a
        *             managed policy to a role, the managed policy becomes part of the role's permission
        *             (access) policy.</p>
        *         <note>
        *             <p>You cannot use a managed policy as the role's trust policy. The role's trust
        *                 policy is created at the same time as the role, using <a>CreateRole</a>.
        *                 You can update a role's trust policy using <a>UpdateAssumeRolePolicy</a>.</p>
        *         </note>
        *         <p>Use this operation to attach a <i>managed</i> policy to a role. To embed
        *             an inline policy in a role, use <a>PutRolePolicy</a>. For more information
        *             about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        *         <p>As a best practice, you can validate your IAM policies.
        *      To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a>
        *             in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, AttachRolePolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, AttachRolePolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new AttachRolePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AttachRolePolicyCommandInput} for command's `input` shape.
        * @see {@link AttachRolePolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class AttachRolePolicyCommand extends $Command<AttachRolePolicyCommandInput, AttachRolePolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: AttachRolePolicyCommandInput;
            constructor(input: AttachRolePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AttachRolePolicyCommandInput, AttachRolePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AttachUserPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { AttachUserPolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface AttachUserPolicyCommandInput extends AttachUserPolicyRequest {
    }
    export interface AttachUserPolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Attaches the specified managed policy to the specified user.</p>
        *         <p>You use this operation to attach a <i>managed</i> policy to a user. To
        *             embed an inline policy in a user, use <a>PutUserPolicy</a>.</p>
        *         <p>As a best practice, you can validate your IAM policies.
        *      To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a>
        *             in the <i>IAM User Guide</i>.</p>
        *         <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, AttachUserPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, AttachUserPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new AttachUserPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AttachUserPolicyCommandInput} for command's `input` shape.
        * @see {@link AttachUserPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class AttachUserPolicyCommand extends $Command<AttachUserPolicyCommandInput, AttachUserPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: AttachUserPolicyCommandInput;
            constructor(input: AttachUserPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AttachUserPolicyCommandInput, AttachUserPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ChangePasswordCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ChangePasswordRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ChangePasswordCommandInput extends ChangePasswordRequest {
    }
    export interface ChangePasswordCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Changes the password of the IAM user who is calling this operation. This operation
        *             can be performed using the CLI, the Amazon Web Services API, or the <b>My
        *                 Security Credentials</b> page in the Amazon Web Services Management Console. The Amazon Web Services account root user
        *             password is not affected by this operation.</p>
        *         <p>Use <a>UpdateLoginProfile</a> to use the CLI, the Amazon Web Services API, or the
        *                 <b>Users</b> page in the IAM console to change the
        *             password for any IAM user. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing
        *                 passwords</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ChangePasswordCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ChangePasswordCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ChangePasswordCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ChangePasswordCommandInput} for command's `input` shape.
        * @see {@link ChangePasswordCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ChangePasswordCommand extends $Command<ChangePasswordCommandInput, ChangePasswordCommandOutput, IAMClientResolvedConfig> {
            readonly input: ChangePasswordCommandInput;
            constructor(input: ChangePasswordCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ChangePasswordCommandInput, ChangePasswordCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateAccessKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { CreateAccessKeyRequest, CreateAccessKeyResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface CreateAccessKeyCommandInput extends CreateAccessKeyRequest {
    }
    export interface CreateAccessKeyCommandOutput extends CreateAccessKeyResponse, __MetadataBearer {
    }
    /**
        * <p> Creates a new Amazon Web Services secret access key and corresponding Amazon Web Services access key ID for the
        *             specified user. The default status for new keys is <code>Active</code>.</p>
        *         <p>If you do not specify a user name, IAM determines the user name implicitly based on
        *             the Amazon Web Services access key ID signing the request. This operation works for access keys under
        *             the Amazon Web Services account. Consequently, you can use this operation to manage Amazon Web Services account root
        *             user credentials. This is true even if the Amazon Web Services account has no associated users.</p>
        *         <p> For information about quotas on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS
        *                 quotas</a> in the <i>IAM User Guide</i>.</p>
        *         <important>
        *             <p>To ensure the security of your Amazon Web Services account, the secret access key is accessible
        *                 only during key and user creation. You must save the key (for example, in a text
        *                 file) if you want to be able to access it again. If a secret key is lost, you can
        *                 delete the access keys for the associated user and then create new keys.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, CreateAccessKeyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, CreateAccessKeyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new CreateAccessKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAccessKeyCommandInput} for command's `input` shape.
        * @see {@link CreateAccessKeyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class CreateAccessKeyCommand extends $Command<CreateAccessKeyCommandInput, CreateAccessKeyCommandOutput, IAMClientResolvedConfig> {
            readonly input: CreateAccessKeyCommandInput;
            constructor(input: CreateAccessKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAccessKeyCommandInput, CreateAccessKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateAccountAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { CreateAccountAliasRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface CreateAccountAliasCommandInput extends CreateAccountAliasRequest {
    }
    export interface CreateAccountAliasCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Creates an alias for your Amazon Web Services account. For information about using an Amazon Web Services account
        *             alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an
        *                 alias for your Amazon Web Services account ID</a> in the
        *             <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, CreateAccountAliasCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, CreateAccountAliasCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new CreateAccountAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateAccountAliasCommandInput} for command's `input` shape.
        * @see {@link CreateAccountAliasCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class CreateAccountAliasCommand extends $Command<CreateAccountAliasCommandInput, CreateAccountAliasCommandOutput, IAMClientResolvedConfig> {
            readonly input: CreateAccountAliasCommandInput;
            constructor(input: CreateAccountAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateAccountAliasCommandInput, CreateAccountAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { CreateGroupRequest, CreateGroupResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface CreateGroupCommandInput extends CreateGroupRequest {
    }
    export interface CreateGroupCommandOutput extends CreateGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new group.</p>
        *         <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS
        *                 quotas</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, CreateGroupCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, CreateGroupCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new CreateGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateGroupCommandInput} for command's `input` shape.
        * @see {@link CreateGroupCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class CreateGroupCommand extends $Command<CreateGroupCommandInput, CreateGroupCommandOutput, IAMClientResolvedConfig> {
            readonly input: CreateGroupCommandInput;
            constructor(input: CreateGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateGroupCommandInput, CreateGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateInstanceProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { CreateInstanceProfileRequest, CreateInstanceProfileResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface CreateInstanceProfileCommandInput extends CreateInstanceProfileRequest {
    }
    export interface CreateInstanceProfileCommandOutput extends CreateInstanceProfileResponse, __MetadataBearer {
    }
    /**
        * <p> Creates a new instance profile. For information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html">Using
        *                 roles for applications on Amazon EC2</a> in the
        *                 <i>IAM User Guide</i>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html#ec2-instance-profile">Instance profiles</a> in the <i>Amazon EC2 User Guide</i>.</p>
        *         <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM object
        *                 quotas</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, CreateInstanceProfileCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, CreateInstanceProfileCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new CreateInstanceProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateInstanceProfileCommandInput} for command's `input` shape.
        * @see {@link CreateInstanceProfileCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class CreateInstanceProfileCommand extends $Command<CreateInstanceProfileCommandInput, CreateInstanceProfileCommandOutput, IAMClientResolvedConfig> {
            readonly input: CreateInstanceProfileCommandInput;
            constructor(input: CreateInstanceProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateInstanceProfileCommandInput, CreateInstanceProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateLoginProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { CreateLoginProfileRequest, CreateLoginProfileResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface CreateLoginProfileCommandInput extends CreateLoginProfileRequest {
    }
    export interface CreateLoginProfileCommandOutput extends CreateLoginProfileResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a password for the specified IAM user. A password allows an IAM user to
        *             access Amazon Web Services services through the Amazon Web Services Management Console.</p>
        *         <p>You can use the CLI, the Amazon Web Services API, or the <b>Users</b>
        *             page in the IAM console to create a password for any IAM user. Use <a>ChangePassword</a> to update your own existing password in the <b>My Security Credentials</b> page in the Amazon Web Services Management Console.</p>
        *         <p>For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing passwords</a> in the
        *                 <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, CreateLoginProfileCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, CreateLoginProfileCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new CreateLoginProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateLoginProfileCommandInput} for command's `input` shape.
        * @see {@link CreateLoginProfileCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class CreateLoginProfileCommand extends $Command<CreateLoginProfileCommandInput, CreateLoginProfileCommandOutput, IAMClientResolvedConfig> {
            readonly input: CreateLoginProfileCommandInput;
            constructor(input: CreateLoginProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateLoginProfileCommandInput, CreateLoginProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateOpenIDConnectProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { CreateOpenIDConnectProviderRequest, CreateOpenIDConnectProviderResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface CreateOpenIDConnectProviderCommandInput extends CreateOpenIDConnectProviderRequest {
    }
    export interface CreateOpenIDConnectProviderCommandOutput extends CreateOpenIDConnectProviderResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p>
        *         <p>The OIDC provider that you create with this operation can be used as a principal in a
        *             role's trust policy. Such a policy establishes a trust relationship between Amazon Web Services and
        *             the OIDC provider.</p>
        *         <p>If you are using an OIDC identity provider from Google, Facebook, or Amazon Cognito, you don't
        *             need to create a separate IAM identity provider. These OIDC identity providers are
        *             already built-in to Amazon Web Services and are available for your use. Instead, you can move directly
        *             to creating new roles using your identity provider. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_oidc.html">Creating
        *                 a role for web identity or OpenID connect federation</a> in the <i>IAM
        *                 User Guide</i>.</p>
        *         <p>When you create the IAM OIDC provider, you specify the following:</p>
        *         <ul>
        *             <li>
        *                 <p>The URL of the OIDC identity provider (IdP) to trust</p>
        *             </li>
        *             <li>
        *                 <p>A list of client IDs (also known as audiences) that identify the application
        *                     or applications allowed to authenticate using the OIDC provider</p>
        *             </li>
        *             <li>
        *                 <p>A list of thumbprints of one or more server certificates that the IdP
        *                     uses</p>
        *             </li>
        *          </ul>
        *         <p>You get all of this information from the OIDC IdP you want to use to access
        *             Amazon Web Services.</p>
        *         <note>
        *             <p>Amazon Web Services secures communication with some OIDC identity providers (IdPs) through our
        *             library of trusted certificate authorities (CAs) instead of using a certificate
        *             thumbprint to verify your IdP server certificate. These OIDC IdPs include Google, and
        *             those that use an Amazon S3 bucket to host a JSON Web Key Set (JWKS) endpoint. In these
        *             cases, your legacy thumbprint remains in your configuration, but is no longer used for validation.</p>
        *          </note>
        *         <note>
        *             <p>The trust for the OIDC provider is derived from the IAM provider that this
        *                 operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged
        *                 users.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, CreateOpenIDConnectProviderCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, CreateOpenIDConnectProviderCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new CreateOpenIDConnectProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateOpenIDConnectProviderCommandInput} for command's `input` shape.
        * @see {@link CreateOpenIDConnectProviderCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class CreateOpenIDConnectProviderCommand extends $Command<CreateOpenIDConnectProviderCommandInput, CreateOpenIDConnectProviderCommandOutput, IAMClientResolvedConfig> {
            readonly input: CreateOpenIDConnectProviderCommandInput;
            constructor(input: CreateOpenIDConnectProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateOpenIDConnectProviderCommandInput, CreateOpenIDConnectProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreatePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { CreatePolicyRequest, CreatePolicyResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface CreatePolicyCommandInput extends CreatePolicyRequest {
    }
    export interface CreatePolicyCommandOutput extends CreatePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new managed policy for your Amazon Web Services account.</p>
        *         <p>This operation creates a policy version with a version identifier of <code>v1</code>
        *             and sets v1 as the policy's default version. For more information about policy versions,
        *             see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed policies</a> in the
        *                 <i>IAM User Guide</i>.</p>
        *         <p>As a best practice, you can validate your IAM policies.
        *      To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a>
        *             in the <i>IAM User Guide</i>.</p>
        *         <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
        *                 policies and inline policies</a> in the
        *             <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, CreatePolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, CreatePolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new CreatePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePolicyCommandInput} for command's `input` shape.
        * @see {@link CreatePolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class CreatePolicyCommand extends $Command<CreatePolicyCommandInput, CreatePolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: CreatePolicyCommandInput;
            constructor(input: CreatePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePolicyCommandInput, CreatePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreatePolicyVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { CreatePolicyVersionRequest, CreatePolicyVersionResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface CreatePolicyVersionCommandInput extends CreatePolicyVersionRequest {
    }
    export interface CreatePolicyVersionCommandOutput extends CreatePolicyVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new version of the specified managed policy. To update a managed policy, you
        *             create a new policy version. A managed policy can have up to five versions. If the
        *             policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p>
        *         <p>Optionally, you can set the new version as the policy's default version. The default
        *             version is the version that is in effect for the IAM users, groups, and roles to which
        *             the policy is attached.</p>
        *         <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, CreatePolicyVersionCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, CreatePolicyVersionCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new CreatePolicyVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreatePolicyVersionCommandInput} for command's `input` shape.
        * @see {@link CreatePolicyVersionCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class CreatePolicyVersionCommand extends $Command<CreatePolicyVersionCommandInput, CreatePolicyVersionCommandOutput, IAMClientResolvedConfig> {
            readonly input: CreatePolicyVersionCommandInput;
            constructor(input: CreatePolicyVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreatePolicyVersionCommandInput, CreatePolicyVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateRoleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { CreateRoleRequest, CreateRoleResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface CreateRoleCommandInput extends CreateRoleRequest {
    }
    export interface CreateRoleCommandOutput extends CreateRoleResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new role for your Amazon Web Services account. For more information about roles, see
        *                 <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">IAM
        *                 roles</a>. For information about quotas for role names and the number of roles
        *             you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the
        *                 <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, CreateRoleCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, CreateRoleCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new CreateRoleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRoleCommandInput} for command's `input` shape.
        * @see {@link CreateRoleCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class CreateRoleCommand extends $Command<CreateRoleCommandInput, CreateRoleCommandOutput, IAMClientResolvedConfig> {
            readonly input: CreateRoleCommandInput;
            constructor(input: CreateRoleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRoleCommandInput, CreateRoleCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateSAMLProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { CreateSAMLProviderRequest, CreateSAMLProviderResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface CreateSAMLProviderCommandInput extends CreateSAMLProviderRequest {
    }
    export interface CreateSAMLProviderCommandOutput extends CreateSAMLProviderResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML
        *             2.0.</p>
        *         <p>The SAML provider resource that you create with this operation can be used as a
        *             principal in an IAM role's trust policy. Such a policy can enable federated users who
        *             sign in using the SAML IdP to assume the role. You can create an IAM role that
        *             supports Web-based single sign-on (SSO) to the Amazon Web Services Management Console or one that supports API access
        *             to Amazon Web Services.</p>
        *         <p>When you create the SAML provider resource, you upload a SAML metadata document that
        *             you get from your IdP. That document includes the issuer's name, expiration information,
        *             and keys that can be used to validate the SAML authentication response (assertions) that
        *             the IdP sends. You must generate the metadata document using the identity management
        *             software that is used as your organization's IdP.</p>
        *         <note>
        *             <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
        *         </note>
        *         <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0
        *                 federated users to access the Amazon Web Services Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based
        *                 federation</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, CreateSAMLProviderCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, CreateSAMLProviderCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new CreateSAMLProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateSAMLProviderCommandInput} for command's `input` shape.
        * @see {@link CreateSAMLProviderCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class CreateSAMLProviderCommand extends $Command<CreateSAMLProviderCommandInput, CreateSAMLProviderCommandOutput, IAMClientResolvedConfig> {
            readonly input: CreateSAMLProviderCommandInput;
            constructor(input: CreateSAMLProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateSAMLProviderCommandInput, CreateSAMLProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateServiceLinkedRoleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { CreateServiceLinkedRoleRequest, CreateServiceLinkedRoleResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface CreateServiceLinkedRoleCommandInput extends CreateServiceLinkedRoleRequest {
    }
    export interface CreateServiceLinkedRoleCommandOutput extends CreateServiceLinkedRoleResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an IAM role that is linked to a specific Amazon Web Services service. The service controls
        *             the attached policies and when the role can be deleted. This helps ensure that the
        *             service is not broken by an unexpectedly changed or deleted role, which could put your
        *             Amazon Web Services resources into an unknown state. Allowing the service to control the role helps
        *             improve service stability and proper cleanup when a service and its role are no longer
        *             needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using service-linked
        *                 roles</a> in the <i>IAM User Guide</i>. </p>
        *         <p>To attach a policy to this service-linked role, you must make the request using the
        *             Amazon Web Services service that depends on this role.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, CreateServiceLinkedRoleCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, CreateServiceLinkedRoleCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new CreateServiceLinkedRoleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateServiceLinkedRoleCommandInput} for command's `input` shape.
        * @see {@link CreateServiceLinkedRoleCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class CreateServiceLinkedRoleCommand extends $Command<CreateServiceLinkedRoleCommandInput, CreateServiceLinkedRoleCommandOutput, IAMClientResolvedConfig> {
            readonly input: CreateServiceLinkedRoleCommandInput;
            constructor(input: CreateServiceLinkedRoleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateServiceLinkedRoleCommandInput, CreateServiceLinkedRoleCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateServiceSpecificCredentialCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { CreateServiceSpecificCredentialRequest, CreateServiceSpecificCredentialResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface CreateServiceSpecificCredentialCommandInput extends CreateServiceSpecificCredentialRequest {
    }
    export interface CreateServiceSpecificCredentialCommandOutput extends CreateServiceSpecificCredentialResponse, __MetadataBearer {
    }
    /**
        * <p>Generates a set of credentials consisting of a user name and password that can be used
        *             to access the service specified in the request. These credentials are generated by
        *             IAM, and can be used only for the specified service. </p>
        *         <p>You can have a maximum of two sets of service-specific credentials for each supported
        *             service per user.</p>
        *         <p>You can create service-specific credentials for CodeCommit and Amazon Keyspaces (for Apache
        *             Cassandra).</p>
        *         <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p>
        *         <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM
        *                 with CodeCommit: Git credentials, SSH keys, and Amazon Web Services access keys</a> in the
        *                 <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, CreateServiceSpecificCredentialCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, CreateServiceSpecificCredentialCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new CreateServiceSpecificCredentialCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateServiceSpecificCredentialCommandInput} for command's `input` shape.
        * @see {@link CreateServiceSpecificCredentialCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class CreateServiceSpecificCredentialCommand extends $Command<CreateServiceSpecificCredentialCommandInput, CreateServiceSpecificCredentialCommandOutput, IAMClientResolvedConfig> {
            readonly input: CreateServiceSpecificCredentialCommandInput;
            constructor(input: CreateServiceSpecificCredentialCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateServiceSpecificCredentialCommandInput, CreateServiceSpecificCredentialCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { CreateUserRequest, CreateUserResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface CreateUserCommandInput extends CreateUserRequest {
    }
    export interface CreateUserCommandOutput extends CreateUserResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new IAM user for your Amazon Web Services account.</p>
        *         <p> For information about quotas for the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS
        *                 quotas</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, CreateUserCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, CreateUserCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new CreateUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateUserCommandInput} for command's `input` shape.
        * @see {@link CreateUserCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class CreateUserCommand extends $Command<CreateUserCommandInput, CreateUserCommandOutput, IAMClientResolvedConfig> {
            readonly input: CreateUserCommandInput;
            constructor(input: CreateUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateUserCommandInput, CreateUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateVirtualMFADeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { CreateVirtualMFADeviceRequest, CreateVirtualMFADeviceResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface CreateVirtualMFADeviceCommandInput extends CreateVirtualMFADeviceRequest {
    }
    export interface CreateVirtualMFADeviceCommandOutput extends CreateVirtualMFADeviceResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new virtual MFA device for the Amazon Web Services account. After creating the virtual
        *             MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user.
        *             For more information about creating and working with virtual MFA devices, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a virtual MFA
        *                 device</a> in the <i>IAM User Guide</i>.</p>
        *         <p>For information about the maximum number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS
        *                 quotas</a> in the <i>IAM User Guide</i>.</p>
        *         <important>
        *             <p>The seed information contained in the QR code and the Base32 string should be
        *                 treated like any other secret access information. In other words, protect the seed
        *                 information as you would your Amazon Web Services access keys or your passwords. After you
        *                 provision your virtual device, you should ensure that the information is destroyed
        *                 following secure procedures.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, CreateVirtualMFADeviceCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, CreateVirtualMFADeviceCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new CreateVirtualMFADeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateVirtualMFADeviceCommandInput} for command's `input` shape.
        * @see {@link CreateVirtualMFADeviceCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class CreateVirtualMFADeviceCommand extends $Command<CreateVirtualMFADeviceCommandInput, CreateVirtualMFADeviceCommandOutput, IAMClientResolvedConfig> {
            readonly input: CreateVirtualMFADeviceCommandInput;
            constructor(input: CreateVirtualMFADeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateVirtualMFADeviceCommandInput, CreateVirtualMFADeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeactivateMFADeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeactivateMFADeviceRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeactivateMFADeviceCommandInput extends DeactivateMFADeviceRequest {
    }
    export interface DeactivateMFADeviceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deactivates the specified MFA device and removes it from association with the user
        *             name for which it was originally enabled.</p>
        *         <p>For more information about creating and working with virtual MFA devices, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a virtual
        *                 multi-factor authentication (MFA) device</a> in the
        *                 <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeactivateMFADeviceCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeactivateMFADeviceCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeactivateMFADeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeactivateMFADeviceCommandInput} for command's `input` shape.
        * @see {@link DeactivateMFADeviceCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeactivateMFADeviceCommand extends $Command<DeactivateMFADeviceCommandInput, DeactivateMFADeviceCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeactivateMFADeviceCommandInput;
            constructor(input: DeactivateMFADeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeactivateMFADeviceCommandInput, DeactivateMFADeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteAccessKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteAccessKeyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteAccessKeyCommandInput extends DeleteAccessKeyRequest {
    }
    export interface DeleteAccessKeyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the access key pair associated with the specified IAM user.</p>
        *         <p>If you do not specify a user name, IAM determines the user name implicitly based on
        *             the Amazon Web Services access key ID signing the request. This operation works for access keys under
        *             the Amazon Web Services account. Consequently, you can use this operation to manage Amazon Web Services account root
        *             user credentials even if the Amazon Web Services account has no associated users.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteAccessKeyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteAccessKeyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteAccessKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAccessKeyCommandInput} for command's `input` shape.
        * @see {@link DeleteAccessKeyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteAccessKeyCommand extends $Command<DeleteAccessKeyCommandInput, DeleteAccessKeyCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteAccessKeyCommandInput;
            constructor(input: DeleteAccessKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAccessKeyCommandInput, DeleteAccessKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteAccountAliasCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteAccountAliasRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteAccountAliasCommandInput extends DeleteAccountAliasRequest {
    }
    export interface DeleteAccountAliasCommandOutput extends __MetadataBearer {
    }
    /**
        * <p> Deletes the specified Amazon Web Services account alias. For information about using an Amazon Web Services
        *             account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an alias for your Amazon Web Services account ID</a> in the
        *                 <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteAccountAliasCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteAccountAliasCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteAccountAliasCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAccountAliasCommandInput} for command's `input` shape.
        * @see {@link DeleteAccountAliasCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteAccountAliasCommand extends $Command<DeleteAccountAliasCommandInput, DeleteAccountAliasCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteAccountAliasCommandInput;
            constructor(input: DeleteAccountAliasCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAccountAliasCommandInput, DeleteAccountAliasCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteAccountPasswordPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    export interface DeleteAccountPasswordPolicyCommandInput {
    }
    export interface DeleteAccountPasswordPolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the password policy for the Amazon Web Services account. There are no parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteAccountPasswordPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteAccountPasswordPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteAccountPasswordPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteAccountPasswordPolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteAccountPasswordPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteAccountPasswordPolicyCommand extends $Command<DeleteAccountPasswordPolicyCommandInput, DeleteAccountPasswordPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteAccountPasswordPolicyCommandInput;
            constructor(input: DeleteAccountPasswordPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteAccountPasswordPolicyCommandInput, DeleteAccountPasswordPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteGroupRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteGroupCommandInput extends DeleteGroupRequest {
    }
    export interface DeleteGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified IAM group. The group must not contain any users or have any
        *             attached policies.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteGroupCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteGroupCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteGroupCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteGroupCommand extends $Command<DeleteGroupCommandInput, DeleteGroupCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteGroupCommandInput;
            constructor(input: DeleteGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteGroupCommandInput, DeleteGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteGroupPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteGroupPolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteGroupPolicyCommandInput extends DeleteGroupPolicyRequest {
    }
    export interface DeleteGroupPolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified inline policy that is embedded in the specified IAM
        *             group.</p>
        *         <p>A group can also have managed policies attached to it. To detach a managed policy from
        *             a group, use <a>DetachGroupPolicy</a>. For more information about policies,
        *             refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteGroupPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteGroupPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteGroupPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteGroupPolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteGroupPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteGroupPolicyCommand extends $Command<DeleteGroupPolicyCommandInput, DeleteGroupPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteGroupPolicyCommandInput;
            constructor(input: DeleteGroupPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteGroupPolicyCommandInput, DeleteGroupPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteInstanceProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteInstanceProfileRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteInstanceProfileCommandInput extends DeleteInstanceProfileRequest {
    }
    export interface DeleteInstanceProfileCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified instance profile. The instance profile must not have an
        *             associated role.</p>
        *         <important>
        *             <p>Make sure that you do not have any Amazon EC2 instances running with the instance
        *                 profile you are about to delete. Deleting a role or instance profile that is
        *                 associated with a running instance will break any applications running on the
        *                 instance.</p>
        *         </important>
        *         <p>For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About instance
        *             profiles</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteInstanceProfileCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteInstanceProfileCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteInstanceProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteInstanceProfileCommandInput} for command's `input` shape.
        * @see {@link DeleteInstanceProfileCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteInstanceProfileCommand extends $Command<DeleteInstanceProfileCommandInput, DeleteInstanceProfileCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteInstanceProfileCommandInput;
            constructor(input: DeleteInstanceProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteInstanceProfileCommandInput, DeleteInstanceProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteLoginProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteLoginProfileRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteLoginProfileCommandInput extends DeleteLoginProfileRequest {
    }
    export interface DeleteLoginProfileCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the password for the specified IAM user, which terminates the user's ability
        *             to access Amazon Web Services services through the Amazon Web Services Management Console.</p>
        *         <p>You can use the CLI, the Amazon Web Services API, or the <b>Users</b>
        *             page in the IAM console to delete a password for any IAM user. You can use <a>ChangePassword</a> to update, but not delete, your own password in the
        *                 <b>My Security Credentials</b> page in the
        *             Amazon Web Services Management Console.</p>
        *         <important>
        *             <p> Deleting a user's password does not prevent a user from accessing Amazon Web Services through
        *                 the command line interface or the API. To prevent all user access, you must also
        *                 either make any access keys inactive or delete them. For more information about
        *                 making keys inactive or deleting them, see <a>UpdateAccessKey</a> and
        *                     <a>DeleteAccessKey</a>. </p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteLoginProfileCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteLoginProfileCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteLoginProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLoginProfileCommandInput} for command's `input` shape.
        * @see {@link DeleteLoginProfileCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteLoginProfileCommand extends $Command<DeleteLoginProfileCommandInput, DeleteLoginProfileCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteLoginProfileCommandInput;
            constructor(input: DeleteLoginProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLoginProfileCommandInput, DeleteLoginProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteOpenIDConnectProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteOpenIDConnectProviderRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteOpenIDConnectProviderCommandInput extends DeleteOpenIDConnectProviderRequest {
    }
    export interface DeleteOpenIDConnectProviderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p>
        *         <p>Deleting an IAM OIDC provider resource does not update any roles that reference the
        *             provider as a principal in their trust policies. Any attempt to assume a role that
        *             references a deleted provider fails.</p>
        *         <p>This operation is idempotent; it does not fail or return an error if you call the
        *             operation for a provider that does not exist.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteOpenIDConnectProviderCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteOpenIDConnectProviderCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteOpenIDConnectProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteOpenIDConnectProviderCommandInput} for command's `input` shape.
        * @see {@link DeleteOpenIDConnectProviderCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteOpenIDConnectProviderCommand extends $Command<DeleteOpenIDConnectProviderCommandInput, DeleteOpenIDConnectProviderCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteOpenIDConnectProviderCommandInput;
            constructor(input: DeleteOpenIDConnectProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteOpenIDConnectProviderCommandInput, DeleteOpenIDConnectProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeletePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeletePolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeletePolicyCommandInput extends DeletePolicyRequest {
    }
    export interface DeletePolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified managed policy.</p>
        *         <p>Before you can delete a managed policy, you must first detach the policy from all
        *             users, groups, and roles that it is attached to. In addition, you must delete all the
        *             policy's versions. The following steps describe the process for deleting a managed
        *             policy:</p>
        *         <ul>
        *             <li>
        *                 <p>Detach the policy from all users, groups, and roles that the policy is
        *                     attached to, using <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a>. To
        *                     list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p>
        *             </li>
        *             <li>
        *                 <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>.
        *                     To list the policy's versions, use <a>ListPolicyVersions</a>. You
        *                     cannot use <a>DeletePolicyVersion</a> to delete the version that is
        *                     marked as the default version. You delete the policy's default version in the
        *                     next step of the process.</p>
        *             </li>
        *             <li>
        *                 <p>Delete the policy (this automatically deletes the policy's default version)
        *                     using this operation.</p>
        *             </li>
        *          </ul>
        *         <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeletePolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeletePolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeletePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePolicyCommandInput} for command's `input` shape.
        * @see {@link DeletePolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeletePolicyCommand extends $Command<DeletePolicyCommandInput, DeletePolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeletePolicyCommandInput;
            constructor(input: DeletePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePolicyCommandInput, DeletePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeletePolicyVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeletePolicyVersionRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeletePolicyVersionCommandInput extends DeletePolicyVersionRequest {
    }
    export interface DeletePolicyVersionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified version from the specified managed policy.</p>
        *         <p>You cannot delete the default version from a policy using this operation. To delete
        *             the default version from a policy, use <a>DeletePolicy</a>. To find out which
        *             version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p>
        *         <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeletePolicyVersionCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeletePolicyVersionCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeletePolicyVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeletePolicyVersionCommandInput} for command's `input` shape.
        * @see {@link DeletePolicyVersionCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeletePolicyVersionCommand extends $Command<DeletePolicyVersionCommandInput, DeletePolicyVersionCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeletePolicyVersionCommandInput;
            constructor(input: DeletePolicyVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeletePolicyVersionCommandInput, DeletePolicyVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteRoleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteRoleRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteRoleCommandInput extends DeleteRoleRequest {
    }
    export interface DeleteRoleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified role. The role must not have any policies attached. For more
        *             information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with roles</a>.</p>
        *         <important>
        *             <p>Make sure that you do not have any Amazon EC2 instances running with the role you
        *                 are about to delete. Deleting a role or instance profile that is associated with a
        *                 running instance will break any applications running on the instance.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteRoleCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteRoleCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteRoleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRoleCommandInput} for command's `input` shape.
        * @see {@link DeleteRoleCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteRoleCommand extends $Command<DeleteRoleCommandInput, DeleteRoleCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteRoleCommandInput;
            constructor(input: DeleteRoleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRoleCommandInput, DeleteRoleCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteRolePermissionsBoundaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteRolePermissionsBoundaryRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteRolePermissionsBoundaryCommandInput extends DeleteRolePermissionsBoundaryRequest {
    }
    export interface DeleteRolePermissionsBoundaryCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the permissions boundary for the specified IAM role. </p>
        *         <important>
        *             <p>Deleting the permissions boundary for a role might increase its permissions. For
        *                 example, it might allow anyone who assumes the role to perform all the actions
        *                 granted in its permissions policies. </p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteRolePermissionsBoundaryCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteRolePermissionsBoundaryCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteRolePermissionsBoundaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRolePermissionsBoundaryCommandInput} for command's `input` shape.
        * @see {@link DeleteRolePermissionsBoundaryCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteRolePermissionsBoundaryCommand extends $Command<DeleteRolePermissionsBoundaryCommandInput, DeleteRolePermissionsBoundaryCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteRolePermissionsBoundaryCommandInput;
            constructor(input: DeleteRolePermissionsBoundaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRolePermissionsBoundaryCommandInput, DeleteRolePermissionsBoundaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteRolePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteRolePolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteRolePolicyCommandInput extends DeleteRolePolicyRequest {
    }
    export interface DeleteRolePolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified inline policy that is embedded in the specified IAM
        *             role.</p>
        *         <p>A role can also have managed policies attached to it. To detach a managed policy from
        *             a role, use <a>DetachRolePolicy</a>. For more information about policies,
        *             refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteRolePolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteRolePolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteRolePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRolePolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteRolePolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteRolePolicyCommand extends $Command<DeleteRolePolicyCommandInput, DeleteRolePolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteRolePolicyCommandInput;
            constructor(input: DeleteRolePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRolePolicyCommandInput, DeleteRolePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteSAMLProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteSAMLProviderRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteSAMLProviderCommandInput extends DeleteSAMLProviderRequest {
    }
    export interface DeleteSAMLProviderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a SAML provider resource in IAM.</p>
        *         <p>Deleting the provider resource from IAM does not update any roles that reference the
        *             SAML provider resource's ARN as a principal in their trust policies. Any attempt to
        *             assume a role that references a non-existent provider resource ARN fails.</p>
        *         <note>
        *             <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteSAMLProviderCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteSAMLProviderCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteSAMLProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSAMLProviderCommandInput} for command's `input` shape.
        * @see {@link DeleteSAMLProviderCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteSAMLProviderCommand extends $Command<DeleteSAMLProviderCommandInput, DeleteSAMLProviderCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteSAMLProviderCommandInput;
            constructor(input: DeleteSAMLProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSAMLProviderCommandInput, DeleteSAMLProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteServerCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteServerCertificateRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteServerCertificateCommandInput extends DeleteServerCertificateRequest {
    }
    export interface DeleteServerCertificateCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified server certificate.</p>
        *         <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working
        *                 with server certificates</a> in the <i>IAM User Guide</i>. This
        *             topic also includes a list of Amazon Web Services services that can use the server certificates that
        *             you manage with IAM.</p>
        *         <important>
        *             <p> If you are using a server certificate with Elastic Load Balancing, deleting the
        *                 certificate could have implications for your application. If Elastic Load Balancing
        *                 doesn't detect the deletion of bound certificates, it may continue to use the
        *                 certificates. This could cause Elastic Load Balancing to stop accepting traffic. We
        *                 recommend that you remove the reference to the certificate from Elastic Load
        *                 Balancing before using this command to delete the certificate. For more information,
        *                 see <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API
        *                     Reference</i>.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteServerCertificateCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteServerCertificateCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteServerCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteServerCertificateCommandInput} for command's `input` shape.
        * @see {@link DeleteServerCertificateCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteServerCertificateCommand extends $Command<DeleteServerCertificateCommandInput, DeleteServerCertificateCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteServerCertificateCommandInput;
            constructor(input: DeleteServerCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteServerCertificateCommandInput, DeleteServerCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteServiceLinkedRoleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteServiceLinkedRoleRequest, DeleteServiceLinkedRoleResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteServiceLinkedRoleCommandInput extends DeleteServiceLinkedRoleRequest {
    }
    export interface DeleteServiceLinkedRoleCommandOutput extends DeleteServiceLinkedRoleResponse, __MetadataBearer {
    }
    /**
        * <p>Submits a service-linked role deletion request and returns a
        *                 <code>DeletionTaskId</code>, which you can use to check the status of the deletion.
        *             Before you call this operation, confirm that the role has no active sessions and that
        *             any resources used by the role in the linked service are deleted. If you call this
        *             operation more than once for the same service-linked role and an earlier deletion task
        *             is not complete, then the <code>DeletionTaskId</code> of the earlier request is
        *             returned.</p>
        *         <p>If you submit a deletion request for a service-linked role whose linked service is
        *             still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> operation returns the reason for the
        *             failure, usually including the resources that must be deleted. To delete the
        *             service-linked role, you must first remove those resources from the linked service and
        *             then submit the deletion request again. Resources are specific to the service that is
        *             linked to the role. For more information about removing resources from a service, see
        *             the <a href="http://docs.aws.amazon.com/">Amazon Web Services documentation</a> for your
        *             service.</p>
        *         <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles terms and concepts: Amazon Web Services service-linked role</a> in the
        *                 <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteServiceLinkedRoleCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteServiceLinkedRoleCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteServiceLinkedRoleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteServiceLinkedRoleCommandInput} for command's `input` shape.
        * @see {@link DeleteServiceLinkedRoleCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteServiceLinkedRoleCommand extends $Command<DeleteServiceLinkedRoleCommandInput, DeleteServiceLinkedRoleCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteServiceLinkedRoleCommandInput;
            constructor(input: DeleteServiceLinkedRoleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteServiceLinkedRoleCommandInput, DeleteServiceLinkedRoleCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteServiceSpecificCredentialCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteServiceSpecificCredentialRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteServiceSpecificCredentialCommandInput extends DeleteServiceSpecificCredentialRequest {
    }
    export interface DeleteServiceSpecificCredentialCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified service-specific credential.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteServiceSpecificCredentialCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteServiceSpecificCredentialCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteServiceSpecificCredentialCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteServiceSpecificCredentialCommandInput} for command's `input` shape.
        * @see {@link DeleteServiceSpecificCredentialCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteServiceSpecificCredentialCommand extends $Command<DeleteServiceSpecificCredentialCommandInput, DeleteServiceSpecificCredentialCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteServiceSpecificCredentialCommandInput;
            constructor(input: DeleteServiceSpecificCredentialCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteServiceSpecificCredentialCommandInput, DeleteServiceSpecificCredentialCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteSigningCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteSigningCertificateRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteSigningCertificateCommandInput extends DeleteSigningCertificateRequest {
    }
    export interface DeleteSigningCertificateCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a signing certificate associated with the specified IAM user.</p>
        *         <p>If you do not specify a user name, IAM determines the user name implicitly based on
        *             the Amazon Web Services access key ID signing the request. This operation works for access keys under
        *             the Amazon Web Services account. Consequently, you can use this operation to manage Amazon Web Services account root
        *             user credentials even if the Amazon Web Services account has no associated IAM users.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteSigningCertificateCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteSigningCertificateCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteSigningCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSigningCertificateCommandInput} for command's `input` shape.
        * @see {@link DeleteSigningCertificateCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteSigningCertificateCommand extends $Command<DeleteSigningCertificateCommandInput, DeleteSigningCertificateCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteSigningCertificateCommandInput;
            constructor(input: DeleteSigningCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSigningCertificateCommandInput, DeleteSigningCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteSSHPublicKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteSSHPublicKeyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteSSHPublicKeyCommandInput extends DeleteSSHPublicKeyRequest {
    }
    export interface DeleteSSHPublicKeyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified SSH public key.</p>
        *         <p>The SSH public key deleted by this operation is used only for authenticating the
        *             associated IAM user to an CodeCommit repository. For more information about using SSH keys
        *             to authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for
        *                 SSH connections</a> in the <i>CodeCommit User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteSSHPublicKeyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteSSHPublicKeyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteSSHPublicKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteSSHPublicKeyCommandInput} for command's `input` shape.
        * @see {@link DeleteSSHPublicKeyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteSSHPublicKeyCommand extends $Command<DeleteSSHPublicKeyCommandInput, DeleteSSHPublicKeyCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteSSHPublicKeyCommandInput;
            constructor(input: DeleteSSHPublicKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteSSHPublicKeyCommandInput, DeleteSSHPublicKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteUserRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteUserCommandInput extends DeleteUserRequest {
    }
    export interface DeleteUserCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified IAM user. Unlike the Amazon Web Services Management Console, when you delete a user
        *             programmatically, you must delete the items attached to the user manually, or the
        *             deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM
        *                 user</a>. Before attempting to delete a user, remove the following items:</p>
        *         <ul>
        *             <li>
        *                 <p>Password (<a>DeleteLoginProfile</a>)</p>
        *             </li>
        *             <li>
        *                 <p>Access keys (<a>DeleteAccessKey</a>)</p>
        *             </li>
        *             <li>
        *                 <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p>
        *             </li>
        *             <li>
        *                 <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p>
        *             </li>
        *             <li>
        *                 <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p>
        *             </li>
        *             <li>
        *                 <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p>
        *             </li>
        *             <li>
        *                 <p>Inline policies (<a>DeleteUserPolicy</a>)</p>
        *             </li>
        *             <li>
        *                 <p>Attached managed policies (<a>DetachUserPolicy</a>)</p>
        *             </li>
        *             <li>
        *                 <p>Group memberships (<a>RemoveUserFromGroup</a>)</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteUserCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteUserCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserCommandInput} for command's `input` shape.
        * @see {@link DeleteUserCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteUserCommand extends $Command<DeleteUserCommandInput, DeleteUserCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteUserCommandInput;
            constructor(input: DeleteUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserCommandInput, DeleteUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteUserPermissionsBoundaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteUserPermissionsBoundaryRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteUserPermissionsBoundaryCommandInput extends DeleteUserPermissionsBoundaryRequest {
    }
    export interface DeleteUserPermissionsBoundaryCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the permissions boundary for the specified IAM user.</p>
        *         <important>
        *             <p>Deleting the permissions boundary for a user might increase its permissions by
        *                 allowing the user to perform all the actions granted in its permissions policies.
        *             </p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteUserPermissionsBoundaryCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteUserPermissionsBoundaryCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteUserPermissionsBoundaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserPermissionsBoundaryCommandInput} for command's `input` shape.
        * @see {@link DeleteUserPermissionsBoundaryCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteUserPermissionsBoundaryCommand extends $Command<DeleteUserPermissionsBoundaryCommandInput, DeleteUserPermissionsBoundaryCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteUserPermissionsBoundaryCommandInput;
            constructor(input: DeleteUserPermissionsBoundaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserPermissionsBoundaryCommandInput, DeleteUserPermissionsBoundaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteUserPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteUserPolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteUserPolicyCommandInput extends DeleteUserPolicyRequest {
    }
    export interface DeleteUserPolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes the specified inline policy that is embedded in the specified IAM
        *             user.</p>
        *         <p>A user can also have managed policies attached to it. To detach a managed policy from
        *             a user, use <a>DetachUserPolicy</a>. For more information about policies,
        *             refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteUserPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteUserPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteUserPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteUserPolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteUserPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteUserPolicyCommand extends $Command<DeleteUserPolicyCommandInput, DeleteUserPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteUserPolicyCommandInput;
            constructor(input: DeleteUserPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteUserPolicyCommandInput, DeleteUserPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteVirtualMFADeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DeleteVirtualMFADeviceRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DeleteVirtualMFADeviceCommandInput extends DeleteVirtualMFADeviceRequest {
    }
    export interface DeleteVirtualMFADeviceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a virtual MFA device.</p>
        *         <note>
        *             <p> You must deactivate a user's virtual MFA device before you can delete it. For
        *                 information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DeleteVirtualMFADeviceCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DeleteVirtualMFADeviceCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DeleteVirtualMFADeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteVirtualMFADeviceCommandInput} for command's `input` shape.
        * @see {@link DeleteVirtualMFADeviceCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DeleteVirtualMFADeviceCommand extends $Command<DeleteVirtualMFADeviceCommandInput, DeleteVirtualMFADeviceCommandOutput, IAMClientResolvedConfig> {
            readonly input: DeleteVirtualMFADeviceCommandInput;
            constructor(input: DeleteVirtualMFADeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteVirtualMFADeviceCommandInput, DeleteVirtualMFADeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DetachGroupPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DetachGroupPolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DetachGroupPolicyCommandInput extends DetachGroupPolicyRequest {
    }
    export interface DetachGroupPolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified managed policy from the specified IAM group.</p>
        *         <p>A group can also have inline policies embedded with it. To delete an inline policy,
        *             use <a>DeleteGroupPolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
        *                 policies and inline policies</a> in the
        *             <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DetachGroupPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DetachGroupPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DetachGroupPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetachGroupPolicyCommandInput} for command's `input` shape.
        * @see {@link DetachGroupPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DetachGroupPolicyCommand extends $Command<DetachGroupPolicyCommandInput, DetachGroupPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: DetachGroupPolicyCommandInput;
            constructor(input: DetachGroupPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetachGroupPolicyCommandInput, DetachGroupPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DetachRolePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DetachRolePolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DetachRolePolicyCommandInput extends DetachRolePolicyRequest {
    }
    export interface DetachRolePolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified managed policy from the specified role.</p>
        *         <p>A role can also have inline policies embedded with it. To delete an inline policy, use
        *                 <a>DeleteRolePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
        *                 policies and inline policies</a> in the
        *             <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DetachRolePolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DetachRolePolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DetachRolePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetachRolePolicyCommandInput} for command's `input` shape.
        * @see {@link DetachRolePolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DetachRolePolicyCommand extends $Command<DetachRolePolicyCommandInput, DetachRolePolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: DetachRolePolicyCommandInput;
            constructor(input: DetachRolePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetachRolePolicyCommandInput, DetachRolePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DetachUserPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { DetachUserPolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface DetachUserPolicyCommandInput extends DetachUserPolicyRequest {
    }
    export interface DetachUserPolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified managed policy from the specified user.</p>
        *         <p>A user can also have inline policies embedded with it. To delete an inline policy, use
        *                 <a>DeleteUserPolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
        *                 policies and inline policies</a> in the
        *             <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, DetachUserPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, DetachUserPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new DetachUserPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DetachUserPolicyCommandInput} for command's `input` shape.
        * @see {@link DetachUserPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class DetachUserPolicyCommand extends $Command<DetachUserPolicyCommandInput, DetachUserPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: DetachUserPolicyCommandInput;
            constructor(input: DetachUserPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DetachUserPolicyCommandInput, DetachUserPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/EnableMFADeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { EnableMFADeviceRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface EnableMFADeviceCommandInput extends EnableMFADeviceRequest {
    }
    export interface EnableMFADeviceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Enables the specified MFA device and associates it with the specified IAM user. When
        *             enabled, the MFA device is required for every subsequent login by the IAM user
        *             associated with the device.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, EnableMFADeviceCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, EnableMFADeviceCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new EnableMFADeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link EnableMFADeviceCommandInput} for command's `input` shape.
        * @see {@link EnableMFADeviceCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class EnableMFADeviceCommand extends $Command<EnableMFADeviceCommandInput, EnableMFADeviceCommandOutput, IAMClientResolvedConfig> {
            readonly input: EnableMFADeviceCommandInput;
            constructor(input: EnableMFADeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<EnableMFADeviceCommandInput, EnableMFADeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GenerateCredentialReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GenerateCredentialReportResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GenerateCredentialReportCommandInput {
    }
    export interface GenerateCredentialReportCommandOutput extends GenerateCredentialReportResponse, __MetadataBearer {
    }
    /**
        * <p> Generates a credential report for the Amazon Web Services account. For more information about the
        *             credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting credential reports</a> in
        *             the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GenerateCredentialReportCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GenerateCredentialReportCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GenerateCredentialReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GenerateCredentialReportCommandInput} for command's `input` shape.
        * @see {@link GenerateCredentialReportCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GenerateCredentialReportCommand extends $Command<GenerateCredentialReportCommandInput, GenerateCredentialReportCommandOutput, IAMClientResolvedConfig> {
            readonly input: GenerateCredentialReportCommandInput;
            constructor(input: GenerateCredentialReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GenerateCredentialReportCommandInput, GenerateCredentialReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GenerateOrganizationsAccessReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GenerateOrganizationsAccessReportRequest, GenerateOrganizationsAccessReportResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GenerateOrganizationsAccessReportCommandInput extends GenerateOrganizationsAccessReportRequest {
    }
    export interface GenerateOrganizationsAccessReportCommandOutput extends GenerateOrganizationsAccessReportResponse, __MetadataBearer {
    }
    /**
        * <p>Generates a report for service last accessed data for Organizations. You can generate a
        *             report for any entities (organization root, organizational unit, or account) or policies
        *             in your organization.</p>
        *         <p>To call this operation, you must be signed in using your Organizations management account
        *             credentials. You can use your long-term IAM user or root user credentials, or
        *             temporary credentials from assuming an IAM role. SCPs must be enabled for your
        *             organization root. You must have the required IAM and Organizations permissions. For more
        *             information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining permissions using
        *                 service last accessed data</a> in the
        *             <i>IAM User Guide</i>.</p>
        *         <p>You can generate a service last accessed data report for entities by specifying only
        *             the entity's path. This data includes a list of services that are allowed by any service
        *             control policies (SCPs) that apply to the entity.</p>
        *         <p>You can generate a service last accessed data report for a policy by specifying an
        *             entity's path and an optional Organizations policy ID. This data includes a list of services that
        *             are allowed by the specified SCP.</p>
        *         <p>For each service in both report types, the data includes the most recent account
        *             activity that the policy allows to account principals in the entity or the entity's
        *             children. For important information about the data, reporting period, permissions
        *             required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing permissions using
        *                 service last accessed data</a> in the
        *             <i>IAM User Guide</i>.</p>
        *         <important>
        *             <p>The data includes all attempts to access Amazon Web Services, not just the successful ones. This
        *                 includes all attempts that were made using the Amazon Web Services Management Console, the Amazon Web Services API through any
        *                 of the SDKs, or any of the command line tools. An unexpected entry in the service
        *                 last accessed data does not mean that an account has been compromised, because the
        *                 request might have been denied. Refer to your CloudTrail logs as the authoritative
        *                 source for information about all API calls and whether they were successful or
        *                 denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM events with
        *                     CloudTrail</a> in the <i>IAM User Guide</i>.</p>
        *         </important>
        *         <p>This operation returns a <code>JobId</code>. Use this parameter in the <code>
        *                <a>GetOrganizationsAccessReport</a>
        *             </code> operation to check the status of
        *             the report generation. To check the status of this request, use the <code>JobId</code>
        *             parameter in the <code>
        *                <a>GetOrganizationsAccessReport</a>
        *             </code> operation
        *             and test the <code>JobStatus</code> response parameter. When the job is complete, you
        *             can retrieve the report.</p>
        *         <p>To generate a service last accessed data report for entities, specify an entity path
        *             without specifying the optional Organizations policy ID. The type of entity that you specify
        *             determines the data returned in the report.</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <b>Root</b> – When you specify the
        *                     organizations root as the entity, the resulting report lists all of the services
        *                     allowed by SCPs that are attached to your root. For each service, the report
        *                     includes data for all accounts in your organization except the
        *                     management account, because the management account is not limited by SCPs.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>OU</b> – When you specify an
        *                     organizational unit (OU) as the entity, the resulting report lists all of the
        *                     services allowed by SCPs that are attached to the OU and its parents. For each
        *                     service, the report includes data for all accounts in the OU or its children.
        *                     This data excludes the management account, because the management account is not
        *                     limited by SCPs.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>management account</b> – When you specify the
        *                     management account, the resulting report lists all Amazon Web Services services, because the
        *                     management account is not limited by SCPs. For each service, the report includes
        *                     data for only the management account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Account</b> – When you specify another
        *                     account as the entity, the resulting report lists all of the services allowed by
        *                     SCPs that are attached to the account and its parents. For each service, the
        *                     report includes data for only the specified account.</p>
        *             </li>
        *          </ul>
        *         <p>To generate a service last accessed data report for policies, specify an entity path
        *             and the optional Organizations policy ID. The type of entity that you specify determines the data
        *             returned for each service.</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <b>Root</b> – When you specify the root
        *                     entity and a policy ID, the resulting report lists all of the services that are
        *                     allowed by the specified SCP. For each service, the report includes data for all
        *                     accounts in your organization to which the SCP applies. This data excludes the
        *                     management account, because the management account is not limited by SCPs. If the
        *                     SCP is not attached to any entities in the organization, then the report will
        *                     return a list of services with no data.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>OU</b> – When you specify an OU entity and
        *                     a policy ID, the resulting report lists all of the services that are allowed by
        *                     the specified SCP. For each service, the report includes data for all accounts
        *                     in the OU or its children to which the SCP applies. This means that other
        *                     accounts outside the OU that are affected by the SCP might not be included in
        *                     the data. This data excludes the management account, because the
        *                     management account is not limited by SCPs. If the SCP is not attached to the OU
        *                     or one of its children, the report will return a list of services with no
        *                     data.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>management account</b> – When you specify the
        *                     management account, the resulting report lists all Amazon Web Services services, because the
        *                     management account is not limited by SCPs. If you specify a policy ID in the CLI
        *                     or API, the policy is ignored. For each service, the report includes data for
        *                     only the management account.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Account</b> – When you specify another
        *                     account entity and a policy ID, the resulting report lists all of the services
        *                     that are allowed by the specified SCP. For each service, the report includes
        *                     data for only the specified account. This means that other accounts in the
        *                     organization that are affected by the SCP might not be included in the data. If
        *                     the SCP is not attached to the account, the report will return a list of
        *                     services with no data.</p>
        *             </li>
        *          </ul>
        *         <note>
        *             <p>Service last accessed data does not use other policy types when determining
        *                 whether a principal could access a service. These other policy types include
        *                 identity-based policies, resource-based policies, access control lists, IAM
        *                 permissions boundaries, and STS assume role policies. It only applies SCP logic.
        *                 For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies</a> in the
        *                 <i>IAM User Guide</i>.</p>
        *         </note>
        *         <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing policy scope by
        *                 viewing user activity</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GenerateOrganizationsAccessReportCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GenerateOrganizationsAccessReportCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GenerateOrganizationsAccessReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GenerateOrganizationsAccessReportCommandInput} for command's `input` shape.
        * @see {@link GenerateOrganizationsAccessReportCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GenerateOrganizationsAccessReportCommand extends $Command<GenerateOrganizationsAccessReportCommandInput, GenerateOrganizationsAccessReportCommandOutput, IAMClientResolvedConfig> {
            readonly input: GenerateOrganizationsAccessReportCommandInput;
            constructor(input: GenerateOrganizationsAccessReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GenerateOrganizationsAccessReportCommandInput, GenerateOrganizationsAccessReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GenerateServiceLastAccessedDetailsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GenerateServiceLastAccessedDetailsRequest, GenerateServiceLastAccessedDetailsResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GenerateServiceLastAccessedDetailsCommandInput extends GenerateServiceLastAccessedDetailsRequest {
    }
    export interface GenerateServiceLastAccessedDetailsCommandOutput extends GenerateServiceLastAccessedDetailsResponse, __MetadataBearer {
    }
    /**
        * <p>Generates a report that includes details about when an IAM resource (user, group,
        *             role, or policy) was last used in an attempt to access Amazon Web Services services. Recent activity
        *             usually appears within four hours. IAM reports activity for at least the last 400
        *             days, or less if your Region began supporting this feature within the last year. For
        *             more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions where data is tracked</a>.</p>
        *         <important>
        *             <p>The service last accessed data includes all attempts to access an Amazon Web Services API, not
        *                 just the successful ones. This includes all attempts that were made using the
        *                 Amazon Web Services Management Console, the Amazon Web Services API through any of the SDKs, or any of the command line tools.
        *                 An unexpected entry in the service last accessed data does not mean that your
        *                 account has been compromised, because the request might have been denied. Refer to
        *                 your CloudTrail logs as the authoritative source for information about all API calls
        *                 and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging
        *                     IAM events with CloudTrail</a> in the
        *                     <i>IAM User Guide</i>.</p>
        *         </important>
        *         <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a
        *                 <code>JobId</code>. Use this parameter in the following operations to retrieve the
        *             following details from your report: </p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <a>GetServiceLastAccessedDetails</a> – Use this operation
        *                     for users, groups, roles, or policies to list every Amazon Web Services service that the
        *                     resource could access using permissions policies. For each service, the response
        *                     includes information about the most recent access attempt.</p>
        *                 <p>The <code>JobId</code> returned by
        *                         <code>GenerateServiceLastAccessedDetail</code> must be used by the same role
        *                     within a session, or by the same user when used to call
        *                         <code>GetServiceLastAccessedDetail</code>.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this
        *                     operation for groups and policies to list information about the associated
        *                     entities (users or roles) that attempted to access a specific Amazon Web Services service.
        *                 </p>
        *             </li>
        *          </ul>
        *         <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request,
        *             use the <code>JobId</code> parameter in the same operations and test the
        *                 <code>JobStatus</code> response parameter.</p>
        *         <p>For additional information about the permissions policies that allow an identity
        *             (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p>
        *         <note>
        *             <p>Service last accessed data does not use other policy types when determining
        *                 whether a resource could access a service. These other policy types include
        *                 resource-based policies, access control lists, Organizations policies, IAM permissions
        *                 boundaries, and STS assume role policies. It only applies permissions policy
        *                 logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies</a> in the
        *                 <i>IAM User Guide</i>.</p>
        *         </note>
        *         <p>For more information about service and action last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing permissions using service last accessed data</a> in the
        *                 <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GenerateServiceLastAccessedDetailsCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GenerateServiceLastAccessedDetailsCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GenerateServiceLastAccessedDetailsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GenerateServiceLastAccessedDetailsCommandInput} for command's `input` shape.
        * @see {@link GenerateServiceLastAccessedDetailsCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GenerateServiceLastAccessedDetailsCommand extends $Command<GenerateServiceLastAccessedDetailsCommandInput, GenerateServiceLastAccessedDetailsCommandOutput, IAMClientResolvedConfig> {
            readonly input: GenerateServiceLastAccessedDetailsCommandInput;
            constructor(input: GenerateServiceLastAccessedDetailsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GenerateServiceLastAccessedDetailsCommandInput, GenerateServiceLastAccessedDetailsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetAccessKeyLastUsedCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetAccessKeyLastUsedRequest, GetAccessKeyLastUsedResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetAccessKeyLastUsedCommandInput extends GetAccessKeyLastUsedRequest {
    }
    export interface GetAccessKeyLastUsedCommandOutput extends GetAccessKeyLastUsedResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about when the specified access key was last used. The
        *             information includes the date and time of last use, along with the Amazon Web Services service and
        *             Region that were specified in the last request made with that key.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetAccessKeyLastUsedCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetAccessKeyLastUsedCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetAccessKeyLastUsedCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAccessKeyLastUsedCommandInput} for command's `input` shape.
        * @see {@link GetAccessKeyLastUsedCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetAccessKeyLastUsedCommand extends $Command<GetAccessKeyLastUsedCommandInput, GetAccessKeyLastUsedCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetAccessKeyLastUsedCommandInput;
            constructor(input: GetAccessKeyLastUsedCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAccessKeyLastUsedCommandInput, GetAccessKeyLastUsedCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetAccountAuthorizationDetailsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetAccountAuthorizationDetailsRequest, GetAccountAuthorizationDetailsResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetAccountAuthorizationDetailsCommandInput extends GetAccountAuthorizationDetailsRequest {
    }
    export interface GetAccountAuthorizationDetailsCommandOutput extends GetAccountAuthorizationDetailsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about all IAM users, groups, roles, and policies in your Amazon Web Services
        *             account, including their relationships to one another. Use this operation to obtain a
        *             snapshot of the configuration of IAM permissions (users, groups, roles, and policies)
        *             in your account.</p>
        *         <note>
        *             <p>Policies returned by this operation are URL-encoded compliant
        *     with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL
        *     decoding method to convert the policy back to plain JSON text. For example, if you use Java, you
        *     can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in
        *     the Java SDK. Other languages and SDKs provide similar functionality.</p>
        *          </note>
        *         <p>You can optionally filter the results using the <code>Filter</code> parameter. You can
        *             paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetAccountAuthorizationDetailsCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetAccountAuthorizationDetailsCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetAccountAuthorizationDetailsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAccountAuthorizationDetailsCommandInput} for command's `input` shape.
        * @see {@link GetAccountAuthorizationDetailsCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetAccountAuthorizationDetailsCommand extends $Command<GetAccountAuthorizationDetailsCommandInput, GetAccountAuthorizationDetailsCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetAccountAuthorizationDetailsCommandInput;
            constructor(input: GetAccountAuthorizationDetailsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAccountAuthorizationDetailsCommandInput, GetAccountAuthorizationDetailsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetAccountPasswordPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetAccountPasswordPolicyResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetAccountPasswordPolicyCommandInput {
    }
    export interface GetAccountPasswordPolicyCommandOutput extends GetAccountPasswordPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the password policy for the Amazon Web Services account. This tells you the complexity
        *             requirements and mandatory rotation periods for the IAM user passwords in your account.
        *             For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM password
        *                 policy</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetAccountPasswordPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetAccountPasswordPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetAccountPasswordPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAccountPasswordPolicyCommandInput} for command's `input` shape.
        * @see {@link GetAccountPasswordPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetAccountPasswordPolicyCommand extends $Command<GetAccountPasswordPolicyCommandInput, GetAccountPasswordPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetAccountPasswordPolicyCommandInput;
            constructor(input: GetAccountPasswordPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAccountPasswordPolicyCommandInput, GetAccountPasswordPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetAccountSummaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetAccountSummaryResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetAccountSummaryCommandInput {
    }
    export interface GetAccountSummaryCommandOutput extends GetAccountSummaryResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about IAM entity usage and IAM quotas in the Amazon Web Services
        *             account.</p>
        *         <p> For information about IAM quotas, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the
        *                 <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetAccountSummaryCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetAccountSummaryCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetAccountSummaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetAccountSummaryCommandInput} for command's `input` shape.
        * @see {@link GetAccountSummaryCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetAccountSummaryCommand extends $Command<GetAccountSummaryCommandInput, GetAccountSummaryCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetAccountSummaryCommandInput;
            constructor(input: GetAccountSummaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetAccountSummaryCommandInput, GetAccountSummaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetContextKeysForCustomPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetContextKeysForCustomPolicyRequest, GetContextKeysForPolicyResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetContextKeysForCustomPolicyCommandInput extends GetContextKeysForCustomPolicyRequest {
    }
    export interface GetContextKeysForCustomPolicyCommandOutput extends GetContextKeysForPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of all of the context keys referenced in the input policies. The policies
        *             are supplied as a list of one or more strings. To get the context keys from policies
        *             associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p>
        *         <p>Context keys are variables maintained by Amazon Web Services and its services that provide details
        *             about the context of an API query request. Context keys can be evaluated by testing
        *             against a value specified in an IAM policy. Use
        *                 <code>GetContextKeysForCustomPolicy</code> to understand what key names and values
        *             you must supply when you call <a>SimulateCustomPolicy</a>. Note that all
        *             parameters are shown in unencoded form here for clarity but must be URL encoded to be
        *             included as a part of a real HTML request.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetContextKeysForCustomPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetContextKeysForCustomPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetContextKeysForCustomPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetContextKeysForCustomPolicyCommandInput} for command's `input` shape.
        * @see {@link GetContextKeysForCustomPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetContextKeysForCustomPolicyCommand extends $Command<GetContextKeysForCustomPolicyCommandInput, GetContextKeysForCustomPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetContextKeysForCustomPolicyCommandInput;
            constructor(input: GetContextKeysForCustomPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetContextKeysForCustomPolicyCommandInput, GetContextKeysForCustomPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetContextKeysForPrincipalPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetContextKeysForPolicyResponse, GetContextKeysForPrincipalPolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetContextKeysForPrincipalPolicyCommandInput extends GetContextKeysForPrincipalPolicyRequest {
    }
    export interface GetContextKeysForPrincipalPolicyCommandOutput extends GetContextKeysForPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Gets a list of all of the context keys referenced in all the IAM policies that are
        *             attached to the specified IAM entity. The entity can be an IAM user, group, or role.
        *             If you specify a user, then the request also includes all of the policies attached to
        *             groups that the user is a member of.</p>
        *         <p>You can optionally include a list of one or more additional policies, specified as
        *             strings. If you want to include <i>only</i> a list of policies by string,
        *             use <a>GetContextKeysForCustomPolicy</a> instead.</p>
        *         <p>
        *             <b>Note:</b> This operation discloses information about the
        *             permissions granted to other users. If you do not want users to see other user's
        *             permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p>
        *         <p>Context keys are variables maintained by Amazon Web Services and its services that provide details
        *             about the context of an API query request. Context keys can be evaluated by testing
        *             against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetContextKeysForPrincipalPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetContextKeysForPrincipalPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetContextKeysForPrincipalPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetContextKeysForPrincipalPolicyCommandInput} for command's `input` shape.
        * @see {@link GetContextKeysForPrincipalPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetContextKeysForPrincipalPolicyCommand extends $Command<GetContextKeysForPrincipalPolicyCommandInput, GetContextKeysForPrincipalPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetContextKeysForPrincipalPolicyCommandInput;
            constructor(input: GetContextKeysForPrincipalPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetContextKeysForPrincipalPolicyCommandInput, GetContextKeysForPrincipalPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetCredentialReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetCredentialReportResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetCredentialReportCommandInput {
    }
    export interface GetCredentialReportCommandOutput extends GetCredentialReportResponse, __MetadataBearer {
    }
    /**
        * <p> Retrieves a credential report for the Amazon Web Services account. For more information about the
        *             credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting credential reports</a> in
        *             the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetCredentialReportCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetCredentialReportCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetCredentialReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetCredentialReportCommandInput} for command's `input` shape.
        * @see {@link GetCredentialReportCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetCredentialReportCommand extends $Command<GetCredentialReportCommandInput, GetCredentialReportCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetCredentialReportCommandInput;
            constructor(input: GetCredentialReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCredentialReportCommandInput, GetCredentialReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetGroupRequest, GetGroupResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetGroupCommandInput extends GetGroupRequest {
    }
    export interface GetGroupCommandOutput extends GetGroupResponse, __MetadataBearer {
    }
    /**
        * <p> Returns a list of IAM users that are in the specified IAM group. You can paginate
        *             the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetGroupCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetGroupCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGroupCommandInput} for command's `input` shape.
        * @see {@link GetGroupCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetGroupCommand extends $Command<GetGroupCommandInput, GetGroupCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetGroupCommandInput;
            constructor(input: GetGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGroupCommandInput, GetGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetGroupPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetGroupPolicyRequest, GetGroupPolicyResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetGroupPolicyCommandInput extends GetGroupPolicyRequest {
    }
    export interface GetGroupPolicyCommandOutput extends GetGroupPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the specified inline policy document that is embedded in the specified IAM
        *             group.</p>
        *         <note>
        *             <p>Policies returned by this operation are URL-encoded compliant
        *     with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL
        *     decoding method to convert the policy back to plain JSON text. For example, if you use Java, you
        *     can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in
        *     the Java SDK. Other languages and SDKs provide similar functionality.</p>
        *          </note>
        *         <p>An IAM group can also have managed policies attached to it. To retrieve a managed
        *             policy document that is attached to a group, use <a>GetPolicy</a> to
        *             determine the policy's default version, then use <a>GetPolicyVersion</a> to
        *             retrieve the policy document.</p>
        *         <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetGroupPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetGroupPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetGroupPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetGroupPolicyCommandInput} for command's `input` shape.
        * @see {@link GetGroupPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetGroupPolicyCommand extends $Command<GetGroupPolicyCommandInput, GetGroupPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetGroupPolicyCommandInput;
            constructor(input: GetGroupPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetGroupPolicyCommandInput, GetGroupPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetInstanceProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetInstanceProfileRequest, GetInstanceProfileResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetInstanceProfileCommandInput extends GetInstanceProfileRequest {
    }
    export interface GetInstanceProfileCommandOutput extends GetInstanceProfileResponse, __MetadataBearer {
    }
    /**
        * <p> Retrieves information about the specified instance profile, including the instance
        *             profile's path, GUID, ARN, and role. For more information about instance profiles, see
        *                 <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About
        *                 instance profiles</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetInstanceProfileCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetInstanceProfileCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetInstanceProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetInstanceProfileCommandInput} for command's `input` shape.
        * @see {@link GetInstanceProfileCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetInstanceProfileCommand extends $Command<GetInstanceProfileCommandInput, GetInstanceProfileCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetInstanceProfileCommandInput;
            constructor(input: GetInstanceProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetInstanceProfileCommandInput, GetInstanceProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetLoginProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetLoginProfileRequest, GetLoginProfileResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetLoginProfileCommandInput extends GetLoginProfileRequest {
    }
    export interface GetLoginProfileCommandOutput extends GetLoginProfileResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the user name for the specified IAM user. A login profile is created when
        *             you create a password for the user to access the Amazon Web Services Management Console. If the user does not exist
        *             or does not have a password, the operation returns a 404 (<code>NoSuchEntity</code>)
        *             error.</p>
        *         <p>If you create an IAM user with access to the console, the <code>CreateDate</code>
        *             reflects the date you created the initial password for the user.</p>
        *         <p>If you create an IAM user with programmatic access, and then later add a password
        *             for the user to access the Amazon Web Services Management Console, the <code>CreateDate</code> reflects the initial
        *             password creation date. A user with programmatic access does not have a login profile
        *             unless you create a password for the user to access the Amazon Web Services Management Console.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetLoginProfileCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetLoginProfileCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetLoginProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLoginProfileCommandInput} for command's `input` shape.
        * @see {@link GetLoginProfileCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetLoginProfileCommand extends $Command<GetLoginProfileCommandInput, GetLoginProfileCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetLoginProfileCommandInput;
            constructor(input: GetLoginProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLoginProfileCommandInput, GetLoginProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetOpenIDConnectProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetOpenIDConnectProviderRequest, GetOpenIDConnectProviderResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetOpenIDConnectProviderCommandInput extends GetOpenIDConnectProviderRequest {
    }
    export interface GetOpenIDConnectProviderCommandOutput extends GetOpenIDConnectProviderResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the specified OpenID Connect (OIDC) provider resource object
        *             in IAM.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetOpenIDConnectProviderCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetOpenIDConnectProviderCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetOpenIDConnectProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOpenIDConnectProviderCommandInput} for command's `input` shape.
        * @see {@link GetOpenIDConnectProviderCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetOpenIDConnectProviderCommand extends $Command<GetOpenIDConnectProviderCommandInput, GetOpenIDConnectProviderCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetOpenIDConnectProviderCommandInput;
            constructor(input: GetOpenIDConnectProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOpenIDConnectProviderCommandInput, GetOpenIDConnectProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetOrganizationsAccessReportCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetOrganizationsAccessReportRequest, GetOrganizationsAccessReportResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetOrganizationsAccessReportCommandInput extends GetOrganizationsAccessReportRequest {
    }
    export interface GetOrganizationsAccessReportCommandOutput extends GetOrganizationsAccessReportResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the service last accessed data report for Organizations that was previously
        *             generated using the <code>
        *                <a>GenerateOrganizationsAccessReport</a>
        *             </code>
        *             operation. This operation retrieves the status of your report job and the report
        *             contents.</p>
        *         <p>Depending on the parameters that you passed when you generated the report, the data
        *             returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p>
        *         <p>To call this operation, you must be signed in to the management account in your
        *             organization. SCPs must be enabled for your organization root. You must have permissions
        *             to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining permissions using
        *                 service last accessed data</a> in the
        *             <i>IAM User Guide</i>.</p>
        *         <p>For each service that principals in an account (root users, IAM users, or IAM
        *             roles) could access using SCPs, the operation returns details about the most recent
        *             access attempt. If there was no attempt, the service is listed without details about the
        *             most recent attempt to access the service. If the operation fails, it returns the reason
        *             that it failed.</p>
        *         <p>By default, the list is sorted by service namespace.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetOrganizationsAccessReportCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetOrganizationsAccessReportCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetOrganizationsAccessReportCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetOrganizationsAccessReportCommandInput} for command's `input` shape.
        * @see {@link GetOrganizationsAccessReportCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetOrganizationsAccessReportCommand extends $Command<GetOrganizationsAccessReportCommandInput, GetOrganizationsAccessReportCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetOrganizationsAccessReportCommandInput;
            constructor(input: GetOrganizationsAccessReportCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetOrganizationsAccessReportCommandInput, GetOrganizationsAccessReportCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetPolicyRequest, GetPolicyResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetPolicyCommandInput extends GetPolicyRequest {
    }
    export interface GetPolicyCommandOutput extends GetPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about the specified managed policy, including the policy's
        *             default version and the total number of IAM users, groups, and roles to which the
        *             policy is attached. To retrieve the list of the specific users, groups, and roles that
        *             the policy is attached to, use <a>ListEntitiesForPolicy</a>. This operation
        *             returns metadata about the policy. To retrieve the actual policy document for a specific
        *             version of the policy, use <a>GetPolicyVersion</a>.</p>
        *         <p>This operation retrieves information about managed policies. To retrieve information
        *             about an inline policy that is embedded with an IAM user, group, or role, use <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a>.</p>
        *         <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPolicyCommandInput} for command's `input` shape.
        * @see {@link GetPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetPolicyCommand extends $Command<GetPolicyCommandInput, GetPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetPolicyCommandInput;
            constructor(input: GetPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPolicyCommandInput, GetPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetPolicyVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetPolicyVersionRequest, GetPolicyVersionResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetPolicyVersionCommandInput extends GetPolicyVersionRequest {
    }
    export interface GetPolicyVersionCommandOutput extends GetPolicyVersionResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about the specified version of the specified managed policy,
        *             including the policy document.</p>
        *         <note>
        *             <p>Policies returned by this operation are URL-encoded compliant
        *     with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL
        *     decoding method to convert the policy back to plain JSON text. For example, if you use Java, you
        *     can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in
        *     the Java SDK. Other languages and SDKs provide similar functionality.</p>
        *          </note>
        *         <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p>
        *         <p>This operation retrieves information about managed policies. To retrieve information
        *             about an inline policy that is embedded in a user, group, or role, use <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a>.</p>
        *         <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        *         <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetPolicyVersionCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetPolicyVersionCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetPolicyVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetPolicyVersionCommandInput} for command's `input` shape.
        * @see {@link GetPolicyVersionCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetPolicyVersionCommand extends $Command<GetPolicyVersionCommandInput, GetPolicyVersionCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetPolicyVersionCommandInput;
            constructor(input: GetPolicyVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetPolicyVersionCommandInput, GetPolicyVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetRoleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetRoleRequest, GetRoleResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetRoleCommandInput extends GetRoleRequest {
    }
    export interface GetRoleCommandOutput extends GetRoleResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about the specified role, including the role's path, GUID, ARN,
        *             and the role's trust policy that grants permission to assume the role. For more
        *             information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with roles</a>.</p>
        *         <note>
        *             <p>Policies returned by this operation are URL-encoded compliant
        *     with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL
        *     decoding method to convert the policy back to plain JSON text. For example, if you use Java, you
        *     can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in
        *     the Java SDK. Other languages and SDKs provide similar functionality.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetRoleCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetRoleCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetRoleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRoleCommandInput} for command's `input` shape.
        * @see {@link GetRoleCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetRoleCommand extends $Command<GetRoleCommandInput, GetRoleCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetRoleCommandInput;
            constructor(input: GetRoleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRoleCommandInput, GetRoleCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetRolePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetRolePolicyRequest, GetRolePolicyResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetRolePolicyCommandInput extends GetRolePolicyRequest {
    }
    export interface GetRolePolicyCommandOutput extends GetRolePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the specified inline policy document that is embedded with the specified
        *             IAM role.</p>
        *         <note>
        *             <p>Policies returned by this operation are URL-encoded compliant
        *     with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL
        *     decoding method to convert the policy back to plain JSON text. For example, if you use Java, you
        *     can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in
        *     the Java SDK. Other languages and SDKs provide similar functionality.</p>
        *          </note>
        *         <p>An IAM role can also have managed policies attached to it. To retrieve a managed
        *             policy document that is attached to a role, use <a>GetPolicy</a> to determine
        *             the policy's default version, then use <a>GetPolicyVersion</a> to retrieve
        *             the policy document.</p>
        *         <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        *         <p>For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using roles to delegate permissions and
        *                 federate identities</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetRolePolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetRolePolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetRolePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetRolePolicyCommandInput} for command's `input` shape.
        * @see {@link GetRolePolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetRolePolicyCommand extends $Command<GetRolePolicyCommandInput, GetRolePolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetRolePolicyCommandInput;
            constructor(input: GetRolePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetRolePolicyCommandInput, GetRolePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetSAMLProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetSAMLProviderRequest, GetSAMLProviderResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetSAMLProviderCommandInput extends GetSAMLProviderRequest {
    }
    export interface GetSAMLProviderCommandOutput extends GetSAMLProviderResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider
        *             resource object was created or updated.</p>
        *         <note>
        *             <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetSAMLProviderCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetSAMLProviderCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetSAMLProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSAMLProviderCommandInput} for command's `input` shape.
        * @see {@link GetSAMLProviderCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetSAMLProviderCommand extends $Command<GetSAMLProviderCommandInput, GetSAMLProviderCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetSAMLProviderCommandInput;
            constructor(input: GetSAMLProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSAMLProviderCommandInput, GetSAMLProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetServerCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetServerCertificateRequest, GetServerCertificateResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetServerCertificateCommandInput extends GetServerCertificateRequest {
    }
    export interface GetServerCertificateCommandOutput extends GetServerCertificateResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about the specified server certificate stored in IAM.</p>
        *         <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working
        *                 with server certificates</a> in the <i>IAM User Guide</i>. This
        *             topic includes a list of Amazon Web Services services that can use the server certificates that you
        *             manage with IAM.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetServerCertificateCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetServerCertificateCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetServerCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetServerCertificateCommandInput} for command's `input` shape.
        * @see {@link GetServerCertificateCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetServerCertificateCommand extends $Command<GetServerCertificateCommandInput, GetServerCertificateCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetServerCertificateCommandInput;
            constructor(input: GetServerCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetServerCertificateCommandInput, GetServerCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetServiceLastAccessedDetailsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetServiceLastAccessedDetailsRequest, GetServiceLastAccessedDetailsResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetServiceLastAccessedDetailsCommandInput extends GetServiceLastAccessedDetailsRequest {
    }
    export interface GetServiceLastAccessedDetailsCommandOutput extends GetServiceLastAccessedDetailsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a service last accessed report that was created using the
        *                 <code>GenerateServiceLastAccessedDetails</code> operation. You can use the
        *                 <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to
        *             retrieve the status of your report job. When the report is complete, you can retrieve
        *             the generated report. The report includes a list of Amazon Web Services services that the resource
        *             (user, group, role, or managed policy) can access.</p>
        *         <note>
        *             <p>Service last accessed data does not use other policy types when determining
        *                 whether a resource could access a service. These other policy types include
        *                 resource-based policies, access control lists, Organizations policies, IAM permissions
        *                 boundaries, and STS assume role policies. It only applies permissions policy
        *                 logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies</a> in the
        *                 <i>IAM User Guide</i>.</p>
        *         </note>
        *         <p>For each service that the resource could access using permissions policies, the
        *             operation returns details about the most recent access attempt. If there was no attempt,
        *             the service is listed without details about the most recent attempt to access the
        *             service. If the operation fails, the <code>GetServiceLastAccessedDetails</code>
        *             operation returns the reason that it failed.</p>
        *         <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services.
        *             This list includes the number of entities that have attempted to access the service and
        *             the date and time of the last attempt. It also returns the ARN of the following entity,
        *             depending on the resource ARN that you used to generate the report:</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <b>User</b> – Returns the user ARN that you
        *                     used to generate the report</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Group</b> – Returns the ARN of the group
        *                     member (user) that last attempted to access the service</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Role</b> – Returns the role ARN that you
        *                     used to generate the report</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Policy</b> – Returns the ARN of the user
        *                     or role that last used the policy to attempt to access the service</p>
        *             </li>
        *          </ul>
        *         <p>By default, the list is sorted by service namespace.</p>
        *         <p>If you specified <code>ACTION_LEVEL</code> granularity when you generated the report,
        *             this operation returns service and action last accessed data. This includes the most
        *             recent access attempt for each tracked action within a service. Otherwise, this
        *             operation returns only service data.</p>
        *         <p>For more information about service and action last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing permissions using service last accessed data</a> in the
        *                 <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetServiceLastAccessedDetailsCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetServiceLastAccessedDetailsCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetServiceLastAccessedDetailsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetServiceLastAccessedDetailsCommandInput} for command's `input` shape.
        * @see {@link GetServiceLastAccessedDetailsCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetServiceLastAccessedDetailsCommand extends $Command<GetServiceLastAccessedDetailsCommandInput, GetServiceLastAccessedDetailsCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetServiceLastAccessedDetailsCommandInput;
            constructor(input: GetServiceLastAccessedDetailsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetServiceLastAccessedDetailsCommandInput, GetServiceLastAccessedDetailsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetServiceLastAccessedDetailsWithEntitiesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetServiceLastAccessedDetailsWithEntitiesRequest, GetServiceLastAccessedDetailsWithEntitiesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetServiceLastAccessedDetailsWithEntitiesCommandInput extends GetServiceLastAccessedDetailsWithEntitiesRequest {
    }
    export interface GetServiceLastAccessedDetailsWithEntitiesCommandOutput extends GetServiceLastAccessedDetailsWithEntitiesResponse, __MetadataBearer {
    }
    /**
        * <p>After you generate a group or policy report using the
        *                 <code>GenerateServiceLastAccessedDetails</code> operation, you can use the
        *                 <code>JobId</code> parameter in
        *                 <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the
        *             status of your report job and a list of entities that could have used group or policy
        *             permissions to access the specified service.</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <b>Group</b> – For a group report, this
        *                     operation returns a list of users in the group that could have used the group’s
        *                     policies in an attempt to access the service.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Policy</b> – For a policy report, this
        *                     operation returns a list of entities (users or roles) that could have used the
        *                     policy in an attempt to access the service.</p>
        *             </li>
        *          </ul>
        *         <p>You can also use this operation for user or role reports to retrieve details about
        *             those entities.</p>
        *         <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code>
        *             operation returns the reason that it failed.</p>
        *         <p>By default, the list of associated entities is sorted by date, with the most recent
        *             access listed first.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetServiceLastAccessedDetailsWithEntitiesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetServiceLastAccessedDetailsWithEntitiesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetServiceLastAccessedDetailsWithEntitiesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetServiceLastAccessedDetailsWithEntitiesCommandInput} for command's `input` shape.
        * @see {@link GetServiceLastAccessedDetailsWithEntitiesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetServiceLastAccessedDetailsWithEntitiesCommand extends $Command<GetServiceLastAccessedDetailsWithEntitiesCommandInput, GetServiceLastAccessedDetailsWithEntitiesCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetServiceLastAccessedDetailsWithEntitiesCommandInput;
            constructor(input: GetServiceLastAccessedDetailsWithEntitiesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetServiceLastAccessedDetailsWithEntitiesCommandInput, GetServiceLastAccessedDetailsWithEntitiesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetServiceLinkedRoleDeletionStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetServiceLinkedRoleDeletionStatusRequest, GetServiceLinkedRoleDeletionStatusResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetServiceLinkedRoleDeletionStatusCommandInput extends GetServiceLinkedRoleDeletionStatusRequest {
    }
    export interface GetServiceLinkedRoleDeletionStatusCommandOutput extends GetServiceLinkedRoleDeletionStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the status of your service-linked role deletion. After you use <a>DeleteServiceLinkedRole</a> to submit a service-linked role for deletion,
        *             you can use the <code>DeletionTaskId</code> parameter in
        *                 <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion.
        *             If the deletion fails, this operation returns the reason that it failed, if that
        *             information is returned by the service.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetServiceLinkedRoleDeletionStatusCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetServiceLinkedRoleDeletionStatusCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetServiceLinkedRoleDeletionStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetServiceLinkedRoleDeletionStatusCommandInput} for command's `input` shape.
        * @see {@link GetServiceLinkedRoleDeletionStatusCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetServiceLinkedRoleDeletionStatusCommand extends $Command<GetServiceLinkedRoleDeletionStatusCommandInput, GetServiceLinkedRoleDeletionStatusCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetServiceLinkedRoleDeletionStatusCommandInput;
            constructor(input: GetServiceLinkedRoleDeletionStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetServiceLinkedRoleDeletionStatusCommandInput, GetServiceLinkedRoleDeletionStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetSSHPublicKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetSSHPublicKeyRequest, GetSSHPublicKeyResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetSSHPublicKeyCommandInput extends GetSSHPublicKeyRequest {
    }
    export interface GetSSHPublicKeyCommandOutput extends GetSSHPublicKeyResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the specified SSH public key, including metadata about the key.</p>
        *         <p>The SSH public key retrieved by this operation is used only for authenticating the
        *             associated IAM user to an CodeCommit repository. For more information about using SSH keys
        *             to authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for SSH
        *                 connections</a> in the <i>CodeCommit User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetSSHPublicKeyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetSSHPublicKeyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetSSHPublicKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSSHPublicKeyCommandInput} for command's `input` shape.
        * @see {@link GetSSHPublicKeyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetSSHPublicKeyCommand extends $Command<GetSSHPublicKeyCommandInput, GetSSHPublicKeyCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetSSHPublicKeyCommandInput;
            constructor(input: GetSSHPublicKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSSHPublicKeyCommandInput, GetSSHPublicKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetUserRequest, GetUserResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetUserCommandInput extends GetUserRequest {
    }
    export interface GetUserCommandOutput extends GetUserResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves information about the specified IAM user, including the user's creation
        *             date, path, unique ID, and ARN.</p>
        *         <p>If you do not specify a user name, IAM determines the user name implicitly based on
        *             the Amazon Web Services access key ID used to sign the request to this operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetUserCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetUserCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUserCommandInput} for command's `input` shape.
        * @see {@link GetUserCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetUserCommand extends $Command<GetUserCommandInput, GetUserCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetUserCommandInput;
            constructor(input: GetUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUserCommandInput, GetUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetUserPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { GetUserPolicyRequest, GetUserPolicyResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface GetUserPolicyCommandInput extends GetUserPolicyRequest {
    }
    export interface GetUserPolicyCommandOutput extends GetUserPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the specified inline policy document that is embedded in the specified IAM
        *             user.</p>
        *         <note>
        *             <p>Policies returned by this operation are URL-encoded compliant
        *     with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL
        *     decoding method to convert the policy back to plain JSON text. For example, if you use Java, you
        *     can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in
        *     the Java SDK. Other languages and SDKs provide similar functionality.</p>
        *          </note>
        *         <p>An IAM user can also have managed policies attached to it. To retrieve a managed
        *             policy document that is attached to a user, use <a>GetPolicy</a> to determine
        *             the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve
        *             the policy document.</p>
        *         <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, GetUserPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, GetUserPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new GetUserPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetUserPolicyCommandInput} for command's `input` shape.
        * @see {@link GetUserPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class GetUserPolicyCommand extends $Command<GetUserPolicyCommandInput, GetUserPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: GetUserPolicyCommandInput;
            constructor(input: GetUserPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetUserPolicyCommandInput, GetUserPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAccessKeysCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListAccessKeysRequest, ListAccessKeysResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListAccessKeysCommandInput extends ListAccessKeysRequest {
    }
    export interface ListAccessKeysCommandOutput extends ListAccessKeysResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the access key IDs associated with the specified IAM user.
        *             If there is none, the operation returns an empty list.</p>
        *         <p>Although each user is limited to a small number of keys, you can still paginate the
        *             results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
        *         <p>If the <code>UserName</code> field is not specified, the user name is determined
        *             implicitly based on the Amazon Web Services access key ID used to sign the request. This operation
        *             works for access keys under the Amazon Web Services account. Consequently, you can use this operation
        *             to manage Amazon Web Services account root user credentials even if the Amazon Web Services account has no
        *             associated users.</p>
        *         <note>
        *             <p>To ensure the security of your Amazon Web Services account, the secret access key is accessible
        *                 only during key and user creation.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListAccessKeysCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListAccessKeysCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListAccessKeysCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAccessKeysCommandInput} for command's `input` shape.
        * @see {@link ListAccessKeysCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListAccessKeysCommand extends $Command<ListAccessKeysCommandInput, ListAccessKeysCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListAccessKeysCommandInput;
            constructor(input: ListAccessKeysCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAccessKeysCommandInput, ListAccessKeysCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAccountAliasesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListAccountAliasesRequest, ListAccountAliasesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListAccountAliasesCommandInput extends ListAccountAliasesRequest {
    }
    export interface ListAccountAliasesCommandOutput extends ListAccountAliasesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the account alias associated with the Amazon Web Services account (Note: you can have only
        *             one). For information about using an Amazon Web Services account alias, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AccountAlias.html">Using an alias for your
        *                 Amazon Web Services account ID</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListAccountAliasesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListAccountAliasesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListAccountAliasesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAccountAliasesCommandInput} for command's `input` shape.
        * @see {@link ListAccountAliasesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListAccountAliasesCommand extends $Command<ListAccountAliasesCommandInput, ListAccountAliasesCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListAccountAliasesCommandInput;
            constructor(input: ListAccountAliasesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAccountAliasesCommandInput, ListAccountAliasesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAttachedGroupPoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListAttachedGroupPoliciesRequest, ListAttachedGroupPoliciesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListAttachedGroupPoliciesCommandInput extends ListAttachedGroupPoliciesRequest {
    }
    export interface ListAttachedGroupPoliciesCommandOutput extends ListAttachedGroupPoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all managed policies that are attached to the specified IAM group.</p>
        *         <p>An IAM group can also have inline policies embedded with it. To list the inline
        *             policies for a group, use <a>ListGroupPolicies</a>. For information about
        *             policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters. You can use the <code>PathPrefix</code> parameter to limit the list of
        *             policies to only those matching the specified path prefix. If there are no policies
        *             attached to the specified group (or none that match the specified path prefix), the
        *             operation returns an empty list.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListAttachedGroupPoliciesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListAttachedGroupPoliciesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListAttachedGroupPoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAttachedGroupPoliciesCommandInput} for command's `input` shape.
        * @see {@link ListAttachedGroupPoliciesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListAttachedGroupPoliciesCommand extends $Command<ListAttachedGroupPoliciesCommandInput, ListAttachedGroupPoliciesCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListAttachedGroupPoliciesCommandInput;
            constructor(input: ListAttachedGroupPoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAttachedGroupPoliciesCommandInput, ListAttachedGroupPoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAttachedRolePoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListAttachedRolePoliciesRequest, ListAttachedRolePoliciesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListAttachedRolePoliciesCommandInput extends ListAttachedRolePoliciesRequest {
    }
    export interface ListAttachedRolePoliciesCommandOutput extends ListAttachedRolePoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all managed policies that are attached to the specified IAM role.</p>
        *         <p>An IAM role can also have inline policies embedded with it. To list the inline
        *             policies for a role, use <a>ListRolePolicies</a>. For information about
        *             policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters. You can use the <code>PathPrefix</code> parameter to limit the list of
        *             policies to only those matching the specified path prefix. If there are no policies
        *             attached to the specified role (or none that match the specified path prefix), the
        *             operation returns an empty list.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListAttachedRolePoliciesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListAttachedRolePoliciesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListAttachedRolePoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAttachedRolePoliciesCommandInput} for command's `input` shape.
        * @see {@link ListAttachedRolePoliciesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListAttachedRolePoliciesCommand extends $Command<ListAttachedRolePoliciesCommandInput, ListAttachedRolePoliciesCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListAttachedRolePoliciesCommandInput;
            constructor(input: ListAttachedRolePoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAttachedRolePoliciesCommandInput, ListAttachedRolePoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAttachedUserPoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListAttachedUserPoliciesRequest, ListAttachedUserPoliciesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListAttachedUserPoliciesCommandInput extends ListAttachedUserPoliciesRequest {
    }
    export interface ListAttachedUserPoliciesCommandOutput extends ListAttachedUserPoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all managed policies that are attached to the specified IAM user.</p>
        *         <p>An IAM user can also have inline policies embedded with it. To list the inline
        *             policies for a user, use <a>ListUserPolicies</a>. For information about
        *             policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters. You can use the <code>PathPrefix</code> parameter to limit the list of
        *             policies to only those matching the specified path prefix. If there are no policies
        *             attached to the specified group (or none that match the specified path prefix), the
        *             operation returns an empty list.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListAttachedUserPoliciesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListAttachedUserPoliciesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListAttachedUserPoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListAttachedUserPoliciesCommandInput} for command's `input` shape.
        * @see {@link ListAttachedUserPoliciesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListAttachedUserPoliciesCommand extends $Command<ListAttachedUserPoliciesCommandInput, ListAttachedUserPoliciesCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListAttachedUserPoliciesCommandInput;
            constructor(input: ListAttachedUserPoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListAttachedUserPoliciesCommandInput, ListAttachedUserPoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListEntitiesForPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListEntitiesForPolicyRequest, ListEntitiesForPolicyResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListEntitiesForPolicyCommandInput extends ListEntitiesForPolicyRequest {
    }
    export interface ListEntitiesForPolicyCommandOutput extends ListEntitiesForPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all IAM users, groups, and roles that the specified managed policy is attached
        *             to.</p>
        *         <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a
        *             particular type of entity (users, groups, or roles). For example, to list only the roles
        *             that are attached to the specified policy, set <code>EntityFilter</code> to
        *                 <code>Role</code>.</p>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListEntitiesForPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListEntitiesForPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListEntitiesForPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListEntitiesForPolicyCommandInput} for command's `input` shape.
        * @see {@link ListEntitiesForPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListEntitiesForPolicyCommand extends $Command<ListEntitiesForPolicyCommandInput, ListEntitiesForPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListEntitiesForPolicyCommandInput;
            constructor(input: ListEntitiesForPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListEntitiesForPolicyCommandInput, ListEntitiesForPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListGroupPoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListGroupPoliciesRequest, ListGroupPoliciesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListGroupPoliciesCommandInput extends ListGroupPoliciesRequest {
    }
    export interface ListGroupPoliciesCommandOutput extends ListGroupPoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the names of the inline policies that are embedded in the specified IAM
        *             group.</p>
        *         <p>An IAM group can also have managed policies attached to it. To list the managed
        *             policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>.
        *             For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters. If there are no inline policies embedded with the specified group, the
        *             operation returns an empty list.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListGroupPoliciesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListGroupPoliciesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListGroupPoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroupPoliciesCommandInput} for command's `input` shape.
        * @see {@link ListGroupPoliciesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListGroupPoliciesCommand extends $Command<ListGroupPoliciesCommandInput, ListGroupPoliciesCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListGroupPoliciesCommandInput;
            constructor(input: ListGroupPoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroupPoliciesCommandInput, ListGroupPoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListGroupsRequest, ListGroupsResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListGroupsCommandInput extends ListGroupsRequest {
    }
    export interface ListGroupsCommandOutput extends ListGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the IAM groups that have the specified path prefix.</p>
        *         <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListGroupsCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListGroupsCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroupsCommandInput} for command's `input` shape.
        * @see {@link ListGroupsCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListGroupsCommand extends $Command<ListGroupsCommandInput, ListGroupsCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListGroupsCommandInput;
            constructor(input: ListGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroupsCommandInput, ListGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListGroupsForUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListGroupsForUserRequest, ListGroupsForUserResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListGroupsForUserCommandInput extends ListGroupsForUserRequest {
    }
    export interface ListGroupsForUserCommandOutput extends ListGroupsForUserResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the IAM groups that the specified IAM user belongs to.</p>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListGroupsForUserCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListGroupsForUserCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListGroupsForUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListGroupsForUserCommandInput} for command's `input` shape.
        * @see {@link ListGroupsForUserCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListGroupsForUserCommand extends $Command<ListGroupsForUserCommandInput, ListGroupsForUserCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListGroupsForUserCommandInput;
            constructor(input: ListGroupsForUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListGroupsForUserCommandInput, ListGroupsForUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListInstanceProfilesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListInstanceProfilesRequest, ListInstanceProfilesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListInstanceProfilesCommandInput extends ListInstanceProfilesRequest {
    }
    export interface ListInstanceProfilesCommandOutput extends ListInstanceProfilesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the instance profiles that have the specified path prefix. If there are none,
        *             the operation returns an empty list. For more information about instance profiles, see
        *                 <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About
        *                 instance profiles</a>.</p>
        *         <note>
        *             <p>IAM resource-listing operations return a subset of the available
        *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for an instance profile, see <a>GetInstanceProfile</a>.</p>
        *         </note>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListInstanceProfilesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListInstanceProfilesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListInstanceProfilesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListInstanceProfilesCommandInput} for command's `input` shape.
        * @see {@link ListInstanceProfilesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListInstanceProfilesCommand extends $Command<ListInstanceProfilesCommandInput, ListInstanceProfilesCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListInstanceProfilesCommandInput;
            constructor(input: ListInstanceProfilesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListInstanceProfilesCommandInput, ListInstanceProfilesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListInstanceProfilesForRoleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListInstanceProfilesForRoleRequest, ListInstanceProfilesForRoleResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListInstanceProfilesForRoleCommandInput extends ListInstanceProfilesForRoleRequest {
    }
    export interface ListInstanceProfilesForRoleCommandOutput extends ListInstanceProfilesForRoleResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the instance profiles that have the specified associated IAM role. If there
        *             are none, the operation returns an empty list. For more information about instance
        *             profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About instance
        *             profiles</a>.</p>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListInstanceProfilesForRoleCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListInstanceProfilesForRoleCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListInstanceProfilesForRoleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListInstanceProfilesForRoleCommandInput} for command's `input` shape.
        * @see {@link ListInstanceProfilesForRoleCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListInstanceProfilesForRoleCommand extends $Command<ListInstanceProfilesForRoleCommandInput, ListInstanceProfilesForRoleCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListInstanceProfilesForRoleCommandInput;
            constructor(input: ListInstanceProfilesForRoleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListInstanceProfilesForRoleCommandInput, ListInstanceProfilesForRoleCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListInstanceProfileTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListInstanceProfileTagsRequest, ListInstanceProfileTagsResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListInstanceProfileTagsCommandInput extends ListInstanceProfileTagsRequest {
    }
    export interface ListInstanceProfileTagsCommandOutput extends ListInstanceProfileTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags that are attached to the specified IAM instance profile. The returned list of tags is sorted by tag key.
        *       For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListInstanceProfileTagsCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListInstanceProfileTagsCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListInstanceProfileTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListInstanceProfileTagsCommandInput} for command's `input` shape.
        * @see {@link ListInstanceProfileTagsCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListInstanceProfileTagsCommand extends $Command<ListInstanceProfileTagsCommandInput, ListInstanceProfileTagsCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListInstanceProfileTagsCommandInput;
            constructor(input: ListInstanceProfileTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListInstanceProfileTagsCommandInput, ListInstanceProfileTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListMFADevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListMFADevicesRequest, ListMFADevicesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListMFADevicesCommandInput extends ListMFADevicesRequest {
    }
    export interface ListMFADevicesCommandOutput extends ListMFADevicesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name,
        *             then this operation lists all the MFA devices associated with the specified user. If you
        *             do not specify a user name, IAM determines the user name implicitly based on the Amazon Web Services
        *             access key ID signing the request for this operation.</p>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListMFADevicesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListMFADevicesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListMFADevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMFADevicesCommandInput} for command's `input` shape.
        * @see {@link ListMFADevicesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListMFADevicesCommand extends $Command<ListMFADevicesCommandInput, ListMFADevicesCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListMFADevicesCommandInput;
            constructor(input: ListMFADevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMFADevicesCommandInput, ListMFADevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListMFADeviceTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListMFADeviceTagsRequest, ListMFADeviceTagsResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListMFADeviceTagsCommandInput extends ListMFADeviceTagsRequest {
    }
    export interface ListMFADeviceTagsCommandOutput extends ListMFADeviceTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags that are attached to the specified IAM virtual multi-factor authentication (MFA) device. The returned list of tags is
        *       sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListMFADeviceTagsCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListMFADeviceTagsCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListMFADeviceTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListMFADeviceTagsCommandInput} for command's `input` shape.
        * @see {@link ListMFADeviceTagsCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListMFADeviceTagsCommand extends $Command<ListMFADeviceTagsCommandInput, ListMFADeviceTagsCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListMFADeviceTagsCommandInput;
            constructor(input: ListMFADeviceTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListMFADeviceTagsCommandInput, ListMFADeviceTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListOpenIDConnectProvidersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListOpenIDConnectProvidersRequest, ListOpenIDConnectProvidersResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListOpenIDConnectProvidersCommandInput extends ListOpenIDConnectProvidersRequest {
    }
    export interface ListOpenIDConnectProvidersCommandOutput extends ListOpenIDConnectProvidersResponse, __MetadataBearer {
    }
    /**
        * <p>Lists information about the IAM OpenID Connect (OIDC) provider resource objects
        *             defined in the Amazon Web Services account.</p>
        *         <note>
        *             <p>IAM resource-listing operations return a subset of the available
        *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for an OIDC provider, see <a>GetOpenIDConnectProvider</a>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListOpenIDConnectProvidersCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListOpenIDConnectProvidersCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListOpenIDConnectProvidersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOpenIDConnectProvidersCommandInput} for command's `input` shape.
        * @see {@link ListOpenIDConnectProvidersCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListOpenIDConnectProvidersCommand extends $Command<ListOpenIDConnectProvidersCommandInput, ListOpenIDConnectProvidersCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListOpenIDConnectProvidersCommandInput;
            constructor(input: ListOpenIDConnectProvidersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOpenIDConnectProvidersCommandInput, ListOpenIDConnectProvidersCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListOpenIDConnectProviderTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListOpenIDConnectProviderTagsRequest, ListOpenIDConnectProviderTagsResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListOpenIDConnectProviderTagsCommandInput extends ListOpenIDConnectProviderTagsRequest {
    }
    export interface ListOpenIDConnectProviderTagsCommandOutput extends ListOpenIDConnectProviderTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags that are attached to the specified OpenID Connect (OIDC)-compatible
        *       identity provider. The returned list of tags is sorted by tag key. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html">About web identity
        *       federation</a>.</p>
        *          <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListOpenIDConnectProviderTagsCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListOpenIDConnectProviderTagsCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListOpenIDConnectProviderTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListOpenIDConnectProviderTagsCommandInput} for command's `input` shape.
        * @see {@link ListOpenIDConnectProviderTagsCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListOpenIDConnectProviderTagsCommand extends $Command<ListOpenIDConnectProviderTagsCommandInput, ListOpenIDConnectProviderTagsCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListOpenIDConnectProviderTagsCommandInput;
            constructor(input: ListOpenIDConnectProviderTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListOpenIDConnectProviderTagsCommandInput, ListOpenIDConnectProviderTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListPoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListPoliciesRequest, ListPoliciesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListPoliciesCommandInput extends ListPoliciesRequest {
    }
    export interface ListPoliciesCommandOutput extends ListPoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the managed policies that are available in your Amazon Web Services account, including
        *             your own customer-defined managed policies and all Amazon Web Services managed policies.</p>
        *         <p>You can filter the list of policies that is returned using the optional
        *                 <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code>
        *             parameters. For example, to list only the customer managed policies in your Amazon Web Services
        *             account, set <code>Scope</code> to <code>Local</code>. To list only Amazon Web Services managed
        *             policies, set <code>Scope</code> to <code>AWS</code>.</p>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters.</p>
        *         <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        *         <note>
        *             <p>IAM resource-listing operations return a subset of the available
        *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a customer manged policy, see
        *                     <a>GetPolicy</a>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListPoliciesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListPoliciesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListPoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPoliciesCommandInput} for command's `input` shape.
        * @see {@link ListPoliciesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListPoliciesCommand extends $Command<ListPoliciesCommandInput, ListPoliciesCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListPoliciesCommandInput;
            constructor(input: ListPoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPoliciesCommandInput, ListPoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListPoliciesGrantingServiceAccessCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListPoliciesGrantingServiceAccessRequest, ListPoliciesGrantingServiceAccessResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListPoliciesGrantingServiceAccessCommandInput extends ListPoliciesGrantingServiceAccessRequest {
    }
    export interface ListPoliciesGrantingServiceAccessCommandOutput extends ListPoliciesGrantingServiceAccessResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to
        *             access each specified service.</p>
        *         <note>
        *             <p>This operation does not use other policy types when determining whether a resource
        *                 could access a service. These other policy types include resource-based policies,
        *                 access control lists, Organizations policies, IAM permissions boundaries, and STS
        *                 assume role policies. It only applies permissions policy logic. For more about the
        *                 evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies</a> in the
        *                 <i>IAM User Guide</i>.</p>
        *         </note>
        *         <p>The list of policies returned by the operation depends on the ARN of the identity that
        *             you provide.</p>
        *         <ul>
        *             <li>
        *                 <p>
        *                   <b>User</b> – The list of policies includes
        *                     the managed and inline policies that are attached to the user directly. The list
        *                     also includes any additional managed and inline policies that are attached to
        *                     the group to which the user belongs. </p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Group</b> – The list of policies includes
        *                     only the managed and inline policies that are attached to the group directly.
        *                     Policies that are attached to the group’s user are not included.</p>
        *             </li>
        *             <li>
        *                 <p>
        *                   <b>Role</b> – The list of policies includes
        *                     only the managed and inline policies that are attached to the role.</p>
        *             </li>
        *          </ul>
        *         <p>For each managed policy, this operation returns the ARN and policy name. For each
        *             inline policy, it returns the policy name and the entity to which it is attached. Inline
        *             policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the
        *                 <i>IAM User Guide</i>.</p>
        *         <p>Policies that are attached to users and roles as permissions boundaries are not
        *             returned. To view which managed policy is currently used to set the permissions boundary
        *             for a user or role, use the <a>GetUser</a> or <a>GetRole</a>
        *             operations.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListPoliciesGrantingServiceAccessCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListPoliciesGrantingServiceAccessCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListPoliciesGrantingServiceAccessCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPoliciesGrantingServiceAccessCommandInput} for command's `input` shape.
        * @see {@link ListPoliciesGrantingServiceAccessCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListPoliciesGrantingServiceAccessCommand extends $Command<ListPoliciesGrantingServiceAccessCommandInput, ListPoliciesGrantingServiceAccessCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListPoliciesGrantingServiceAccessCommandInput;
            constructor(input: ListPoliciesGrantingServiceAccessCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPoliciesGrantingServiceAccessCommandInput, ListPoliciesGrantingServiceAccessCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListPolicyTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListPolicyTagsRequest, ListPolicyTagsResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListPolicyTagsCommandInput extends ListPolicyTagsRequest {
    }
    export interface ListPolicyTagsCommandOutput extends ListPolicyTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags that are attached to the specified IAM customer managed policy.
        *       The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListPolicyTagsCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListPolicyTagsCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListPolicyTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPolicyTagsCommandInput} for command's `input` shape.
        * @see {@link ListPolicyTagsCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListPolicyTagsCommand extends $Command<ListPolicyTagsCommandInput, ListPolicyTagsCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListPolicyTagsCommandInput;
            constructor(input: ListPolicyTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPolicyTagsCommandInput, ListPolicyTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListPolicyVersionsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListPolicyVersionsRequest, ListPolicyVersionsResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListPolicyVersionsCommandInput extends ListPolicyVersionsRequest {
    }
    export interface ListPolicyVersionsCommandOutput extends ListPolicyVersionsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists information about the versions of the specified managed policy, including the
        *             version that is currently set as the policy's default version.</p>
        *         <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListPolicyVersionsCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListPolicyVersionsCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListPolicyVersionsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListPolicyVersionsCommandInput} for command's `input` shape.
        * @see {@link ListPolicyVersionsCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListPolicyVersionsCommand extends $Command<ListPolicyVersionsCommandInput, ListPolicyVersionsCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListPolicyVersionsCommandInput;
            constructor(input: ListPolicyVersionsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListPolicyVersionsCommandInput, ListPolicyVersionsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListRolePoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListRolePoliciesRequest, ListRolePoliciesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListRolePoliciesCommandInput extends ListRolePoliciesRequest {
    }
    export interface ListRolePoliciesCommandOutput extends ListRolePoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the names of the inline policies that are embedded in the specified IAM
        *             role.</p>
        *         <p>An IAM role can also have managed policies attached to it. To list the managed
        *             policies that are attached to a role, use <a>ListAttachedRolePolicies</a>.
        *             For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters. If there are no inline policies embedded with the specified role, the
        *             operation returns an empty list.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListRolePoliciesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListRolePoliciesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListRolePoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRolePoliciesCommandInput} for command's `input` shape.
        * @see {@link ListRolePoliciesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListRolePoliciesCommand extends $Command<ListRolePoliciesCommandInput, ListRolePoliciesCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListRolePoliciesCommandInput;
            constructor(input: ListRolePoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRolePoliciesCommandInput, ListRolePoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListRolesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListRolesRequest, ListRolesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListRolesCommandInput extends ListRolesRequest {
    }
    export interface ListRolesCommandOutput extends ListRolesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the IAM roles that have the specified path prefix. If there are none, the
        *             operation returns an empty list. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with
        *                 roles</a>.</p>
        *         <note>
        *             <p>IAM resource-listing operations return a subset of the available
        *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a role, see <a>GetRole</a>.</p>
        *         </note>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListRolesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListRolesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListRolesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRolesCommandInput} for command's `input` shape.
        * @see {@link ListRolesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListRolesCommand extends $Command<ListRolesCommandInput, ListRolesCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListRolesCommandInput;
            constructor(input: ListRolesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRolesCommandInput, ListRolesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListRoleTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListRoleTagsRequest, ListRoleTagsResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListRoleTagsCommandInput extends ListRoleTagsRequest {
    }
    export interface ListRoleTagsCommandOutput extends ListRoleTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags that are attached to the specified role. The returned list of tags is
        *       sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListRoleTagsCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListRoleTagsCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListRoleTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRoleTagsCommandInput} for command's `input` shape.
        * @see {@link ListRoleTagsCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListRoleTagsCommand extends $Command<ListRoleTagsCommandInput, ListRoleTagsCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListRoleTagsCommandInput;
            constructor(input: ListRoleTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRoleTagsCommandInput, ListRoleTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListSAMLProvidersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListSAMLProvidersRequest, ListSAMLProvidersResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListSAMLProvidersCommandInput extends ListSAMLProvidersRequest {
    }
    export interface ListSAMLProvidersCommandOutput extends ListSAMLProvidersResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the SAML provider resource objects defined in IAM in the account.
        *             IAM resource-listing operations return a subset of the available
        *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a SAML provider, see <a>GetSAMLProvider</a>.</p>
        *         <important>
        *             <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListSAMLProvidersCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListSAMLProvidersCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListSAMLProvidersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSAMLProvidersCommandInput} for command's `input` shape.
        * @see {@link ListSAMLProvidersCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListSAMLProvidersCommand extends $Command<ListSAMLProvidersCommandInput, ListSAMLProvidersCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListSAMLProvidersCommandInput;
            constructor(input: ListSAMLProvidersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSAMLProvidersCommandInput, ListSAMLProvidersCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListSAMLProviderTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListSAMLProviderTagsRequest, ListSAMLProviderTagsResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListSAMLProviderTagsCommandInput extends ListSAMLProviderTagsRequest {
    }
    export interface ListSAMLProviderTagsCommandOutput extends ListSAMLProviderTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags that are attached to the specified Security Assertion Markup Language
        *       (SAML) identity provider. The returned list of tags is sorted by tag key. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based
        *       federation</a>.</p>
        *          <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListSAMLProviderTagsCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListSAMLProviderTagsCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListSAMLProviderTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSAMLProviderTagsCommandInput} for command's `input` shape.
        * @see {@link ListSAMLProviderTagsCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListSAMLProviderTagsCommand extends $Command<ListSAMLProviderTagsCommandInput, ListSAMLProviderTagsCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListSAMLProviderTagsCommandInput;
            constructor(input: ListSAMLProviderTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSAMLProviderTagsCommandInput, ListSAMLProviderTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListServerCertificatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListServerCertificatesRequest, ListServerCertificatesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListServerCertificatesCommandInput extends ListServerCertificatesRequest {
    }
    export interface ListServerCertificatesCommandOutput extends ListServerCertificatesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the server certificates stored in IAM that have the specified path prefix. If
        *             none exist, the operation returns an empty list.</p>
        *         <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters.</p>
        *         <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working
        *                 with server certificates</a> in the <i>IAM User Guide</i>. This
        *             topic also includes a list of Amazon Web Services services that can use the server certificates that
        *             you manage with IAM.</p>
        *         <note>
        *             <p>IAM resource-listing operations return a subset of the available
        *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a servercertificate, see <a>GetServerCertificate</a>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListServerCertificatesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListServerCertificatesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListServerCertificatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListServerCertificatesCommandInput} for command's `input` shape.
        * @see {@link ListServerCertificatesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListServerCertificatesCommand extends $Command<ListServerCertificatesCommandInput, ListServerCertificatesCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListServerCertificatesCommandInput;
            constructor(input: ListServerCertificatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListServerCertificatesCommandInput, ListServerCertificatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListServerCertificateTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListServerCertificateTagsRequest, ListServerCertificateTagsResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListServerCertificateTagsCommandInput extends ListServerCertificateTagsRequest {
    }
    export interface ListServerCertificateTagsCommandOutput extends ListServerCertificateTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags that are attached to the specified IAM server certificate. The
        *       returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        *          <note>
        *             <p>For certificates in a Region supported by Certificate Manager (ACM), we
        *         recommend that you don't use IAM server certificates. Instead, use ACM to provision,
        *         manage, and deploy your server certificates. For more information about IAM server
        *         certificates, <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with server
        *           certificates</a> in the <i>IAM User Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListServerCertificateTagsCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListServerCertificateTagsCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListServerCertificateTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListServerCertificateTagsCommandInput} for command's `input` shape.
        * @see {@link ListServerCertificateTagsCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListServerCertificateTagsCommand extends $Command<ListServerCertificateTagsCommandInput, ListServerCertificateTagsCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListServerCertificateTagsCommandInput;
            constructor(input: ListServerCertificateTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListServerCertificateTagsCommandInput, ListServerCertificateTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListServiceSpecificCredentialsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListServiceSpecificCredentialsRequest, ListServiceSpecificCredentialsResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListServiceSpecificCredentialsCommandInput extends ListServiceSpecificCredentialsRequest {
    }
    export interface ListServiceSpecificCredentialsCommandOutput extends ListServiceSpecificCredentialsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the service-specific credentials associated with the
        *             specified IAM user. If none exists, the operation returns an empty list. The
        *             service-specific credentials returned by this operation are used only for authenticating
        *             the IAM user to a specific service. For more information about using service-specific
        *             credentials to authenticate to an Amazon Web Services service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set up service-specific credentials</a>
        *             in the CodeCommit User Guide.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListServiceSpecificCredentialsCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListServiceSpecificCredentialsCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListServiceSpecificCredentialsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListServiceSpecificCredentialsCommandInput} for command's `input` shape.
        * @see {@link ListServiceSpecificCredentialsCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListServiceSpecificCredentialsCommand extends $Command<ListServiceSpecificCredentialsCommandInput, ListServiceSpecificCredentialsCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListServiceSpecificCredentialsCommandInput;
            constructor(input: ListServiceSpecificCredentialsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListServiceSpecificCredentialsCommandInput, ListServiceSpecificCredentialsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListSigningCertificatesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListSigningCertificatesRequest, ListSigningCertificatesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListSigningCertificatesCommandInput extends ListSigningCertificatesRequest {
    }
    export interface ListSigningCertificatesCommandOutput extends ListSigningCertificatesResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the signing certificates associated with the specified IAM
        *             user. If none exists, the operation returns an empty list.</p>
        *         <p>Although each user is limited to a small number of signing certificates, you can still
        *             paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters.</p>
        *         <p>If the <code>UserName</code> field is not specified, the user name is determined
        *             implicitly based on the Amazon Web Services access key ID used to sign the request for this operation.
        *             This operation works for access keys under the Amazon Web Services account. Consequently, you can use
        *             this operation to manage Amazon Web Services account root user credentials even if the Amazon Web Services account
        *             has no associated users.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListSigningCertificatesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListSigningCertificatesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListSigningCertificatesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSigningCertificatesCommandInput} for command's `input` shape.
        * @see {@link ListSigningCertificatesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListSigningCertificatesCommand extends $Command<ListSigningCertificatesCommandInput, ListSigningCertificatesCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListSigningCertificatesCommandInput;
            constructor(input: ListSigningCertificatesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSigningCertificatesCommandInput, ListSigningCertificatesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListSSHPublicKeysCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListSSHPublicKeysRequest, ListSSHPublicKeysResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListSSHPublicKeysCommandInput extends ListSSHPublicKeysRequest {
    }
    export interface ListSSHPublicKeysCommandOutput extends ListSSHPublicKeysResponse, __MetadataBearer {
    }
    /**
        * <p>Returns information about the SSH public keys associated with the specified IAM
        *             user. If none exists, the operation returns an empty list.</p>
        *         <p>The SSH public keys returned by this operation are used only for authenticating the
        *             IAM user to an CodeCommit repository. For more information about using SSH keys to
        *             authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for
        *                 SSH connections</a> in the <i>CodeCommit User Guide</i>.</p>
        *         <p>Although each user is limited to a small number of keys, you can still paginate the
        *             results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListSSHPublicKeysCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListSSHPublicKeysCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListSSHPublicKeysCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSSHPublicKeysCommandInput} for command's `input` shape.
        * @see {@link ListSSHPublicKeysCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListSSHPublicKeysCommand extends $Command<ListSSHPublicKeysCommandInput, ListSSHPublicKeysCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListSSHPublicKeysCommandInput;
            constructor(input: ListSSHPublicKeysCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSSHPublicKeysCommandInput, ListSSHPublicKeysCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListUserPoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListUserPoliciesRequest, ListUserPoliciesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListUserPoliciesCommandInput extends ListUserPoliciesRequest {
    }
    export interface ListUserPoliciesCommandOutput extends ListUserPoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the names of the inline policies embedded in the specified IAM user.</p>
        *         <p>An IAM user can also have managed policies attached to it. To list the managed
        *             policies that are attached to a user, use <a>ListAttachedUserPolicies</a>.
        *             For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters. If there are no inline policies embedded with the specified user, the
        *             operation returns an empty list.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListUserPoliciesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListUserPoliciesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListUserPoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUserPoliciesCommandInput} for command's `input` shape.
        * @see {@link ListUserPoliciesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListUserPoliciesCommand extends $Command<ListUserPoliciesCommandInput, ListUserPoliciesCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListUserPoliciesCommandInput;
            constructor(input: ListUserPoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUserPoliciesCommandInput, ListUserPoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListUsersCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListUsersRequest, ListUsersResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListUsersCommandInput extends ListUsersRequest {
    }
    export interface ListUsersCommandOutput extends ListUsersResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the IAM users that have the specified path prefix. If no path prefix is
        *             specified, the operation returns all users in the Amazon Web Services account. If there are none, the
        *             operation returns an empty list.</p>
        *         <note>
        *             <p>IAM resource-listing operations return a subset of the available
        *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a user, see <a>GetUser</a>.</p>
        *         </note>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListUsersCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListUsersCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListUsersCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUsersCommandInput} for command's `input` shape.
        * @see {@link ListUsersCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListUsersCommand extends $Command<ListUsersCommandInput, ListUsersCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListUsersCommandInput;
            constructor(input: ListUsersCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUsersCommandInput, ListUsersCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListUserTagsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListUserTagsRequest, ListUserTagsResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListUserTagsCommandInput extends ListUserTagsRequest {
    }
    export interface ListUserTagsCommandOutput extends ListUserTagsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags that are attached to the specified IAM user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListUserTagsCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListUserTagsCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListUserTagsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListUserTagsCommandInput} for command's `input` shape.
        * @see {@link ListUserTagsCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListUserTagsCommand extends $Command<ListUserTagsCommandInput, ListUserTagsCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListUserTagsCommandInput;
            constructor(input: ListUserTagsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListUserTagsCommandInput, ListUserTagsCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListVirtualMFADevicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ListVirtualMFADevicesRequest, ListVirtualMFADevicesResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ListVirtualMFADevicesCommandInput extends ListVirtualMFADevicesRequest {
    }
    export interface ListVirtualMFADevicesCommandOutput extends ListVirtualMFADevicesResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the virtual MFA devices defined in the Amazon Web Services account by assignment status. If
        *             you do not specify an assignment status, the operation returns a list of all virtual MFA
        *             devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or
        *                 <code>Any</code>.</p>
        *         <note>
        *             <p>IAM resource-listing operations return a subset of the available
        *    attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view tag information for a virtual MFA device, see <a>ListMFADeviceTags</a>.</p>
        *         </note>
        *         <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code>
        *             parameters.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ListVirtualMFADevicesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ListVirtualMFADevicesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ListVirtualMFADevicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListVirtualMFADevicesCommandInput} for command's `input` shape.
        * @see {@link ListVirtualMFADevicesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ListVirtualMFADevicesCommand extends $Command<ListVirtualMFADevicesCommandInput, ListVirtualMFADevicesCommandOutput, IAMClientResolvedConfig> {
            readonly input: ListVirtualMFADevicesCommandInput;
            constructor(input: ListVirtualMFADevicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListVirtualMFADevicesCommandInput, ListVirtualMFADevicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutGroupPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { PutGroupPolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface PutGroupPolicyCommandInput extends PutGroupPolicyRequest {
    }
    export interface PutGroupPolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds or updates an inline policy document that is embedded in the specified IAM
        *             group.</p>
        *         <p>A user can also have managed policies attached to it. To attach a managed policy to a
        *             group, use <a>AttachGroupPolicy</a>. To create a new managed policy, use
        *                 <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
        *                 policies and inline policies</a> in the
        *             <i>IAM User Guide</i>.</p>
        *         <p>For information about the maximum number of inline policies that you can embed in a
        *             group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p>
        *         <note>
        *             <p>Because policy documents can be large, you should use POST rather than GET when
        *                 calling <code>PutGroupPolicy</code>. For general information about using the Query
        *                 API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the
        *                     <i>IAM User Guide</i>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, PutGroupPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, PutGroupPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new PutGroupPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutGroupPolicyCommandInput} for command's `input` shape.
        * @see {@link PutGroupPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class PutGroupPolicyCommand extends $Command<PutGroupPolicyCommandInput, PutGroupPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: PutGroupPolicyCommandInput;
            constructor(input: PutGroupPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutGroupPolicyCommandInput, PutGroupPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutRolePermissionsBoundaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { PutRolePermissionsBoundaryRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface PutRolePermissionsBoundaryCommandInput extends PutRolePermissionsBoundaryRequest {
    }
    export interface PutRolePermissionsBoundaryCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds or updates the policy that is specified as the IAM role's permissions boundary.
        *             You can use an Amazon Web Services managed policy or a customer managed policy to set the boundary for
        *             a role. Use the boundary to control the maximum permissions that the role can have.
        *             Setting a permissions boundary is an advanced feature that can affect the permissions
        *             for the role.</p>
        *         <p>You cannot set the boundary for a service-linked role. </p>
        *         <important>
        *             <p>Policies used as permissions boundaries do not provide permissions. You must also
        *                 attach a permissions policy to the role. To learn how the effective permissions for
        *                 a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON policy
        *                     evaluation logic</a> in the IAM User Guide. </p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, PutRolePermissionsBoundaryCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, PutRolePermissionsBoundaryCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new PutRolePermissionsBoundaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutRolePermissionsBoundaryCommandInput} for command's `input` shape.
        * @see {@link PutRolePermissionsBoundaryCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class PutRolePermissionsBoundaryCommand extends $Command<PutRolePermissionsBoundaryCommandInput, PutRolePermissionsBoundaryCommandOutput, IAMClientResolvedConfig> {
            readonly input: PutRolePermissionsBoundaryCommandInput;
            constructor(input: PutRolePermissionsBoundaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutRolePermissionsBoundaryCommandInput, PutRolePermissionsBoundaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutRolePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { PutRolePolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface PutRolePolicyCommandInput extends PutRolePolicyRequest {
    }
    export interface PutRolePolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds or updates an inline policy document that is embedded in the specified IAM
        *             role.</p>
        *         <p>When you embed an inline policy in a role, the inline policy is used as part of the
        *             role's access (permissions) policy. The role's trust policy is created at the same time
        *             as the role, using <a>CreateRole</a>. You can update a role's trust policy
        *             using <a>UpdateAssumeRolePolicy</a>. For more information about IAM roles,
        *             see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using roles to
        *                 delegate permissions and federate identities</a>.</p>
        *         <p>A role can also have a managed policy attached to it. To attach a managed policy to a
        *             role, use <a>AttachRolePolicy</a>. To create a new managed policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
        *                 policies and inline policies</a> in the
        *             <i>IAM User Guide</i>.</p>
        *         <p>For information about the maximum number of inline policies that you can embed with a
        *             role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p>
        *         <note>
        *             <p>Because policy documents can be large, you should use POST rather than GET when
        *                 calling <code>PutRolePolicy</code>. For general information about using the Query
        *                 API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the
        *                     <i>IAM User Guide</i>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, PutRolePolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, PutRolePolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new PutRolePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutRolePolicyCommandInput} for command's `input` shape.
        * @see {@link PutRolePolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class PutRolePolicyCommand extends $Command<PutRolePolicyCommandInput, PutRolePolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: PutRolePolicyCommandInput;
            constructor(input: PutRolePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutRolePolicyCommandInput, PutRolePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutUserPermissionsBoundaryCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { PutUserPermissionsBoundaryRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface PutUserPermissionsBoundaryCommandInput extends PutUserPermissionsBoundaryRequest {
    }
    export interface PutUserPermissionsBoundaryCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds or updates the policy that is specified as the IAM user's permissions boundary.
        *             You can use an Amazon Web Services managed policy or a customer managed policy to set the boundary for
        *             a user. Use the boundary to control the maximum permissions that the user can have.
        *             Setting a permissions boundary is an advanced feature that can affect the permissions
        *             for the user.</p>
        *         <important>
        *             <p>Policies that are used as permissions boundaries do not provide permissions. You
        *                 must also attach a permissions policy to the user. To learn how the effective
        *                 permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON policy
        *                     evaluation logic</a> in the IAM User Guide. </p>
        *         </important>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, PutUserPermissionsBoundaryCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, PutUserPermissionsBoundaryCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new PutUserPermissionsBoundaryCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutUserPermissionsBoundaryCommandInput} for command's `input` shape.
        * @see {@link PutUserPermissionsBoundaryCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class PutUserPermissionsBoundaryCommand extends $Command<PutUserPermissionsBoundaryCommandInput, PutUserPermissionsBoundaryCommandOutput, IAMClientResolvedConfig> {
            readonly input: PutUserPermissionsBoundaryCommandInput;
            constructor(input: PutUserPermissionsBoundaryCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutUserPermissionsBoundaryCommandInput, PutUserPermissionsBoundaryCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutUserPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { PutUserPolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface PutUserPolicyCommandInput extends PutUserPolicyRequest {
    }
    export interface PutUserPolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds or updates an inline policy document that is embedded in the specified IAM
        *             user.</p>
        *         <p>An IAM user can also have a managed policy attached to it. To attach a managed
        *             policy to a user, use <a>AttachUserPolicy</a>. To create a new managed
        *             policy, use <a>CreatePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed
        *                 policies and inline policies</a> in the
        *             <i>IAM User Guide</i>.</p>
        *         <p>For information about the maximum number of inline policies that you can embed in a
        *             user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p>
        *         <note>
        *             <p>Because policy documents can be large, you should use POST rather than GET when
        *                 calling <code>PutUserPolicy</code>. For general information about using the Query
        *                 API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the
        *                     <i>IAM User Guide</i>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, PutUserPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, PutUserPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new PutUserPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutUserPolicyCommandInput} for command's `input` shape.
        * @see {@link PutUserPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class PutUserPolicyCommand extends $Command<PutUserPolicyCommandInput, PutUserPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: PutUserPolicyCommandInput;
            constructor(input: PutUserPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutUserPolicyCommandInput, PutUserPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/RemoveClientIDFromOpenIDConnectProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { RemoveClientIDFromOpenIDConnectProviderRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface RemoveClientIDFromOpenIDConnectProviderCommandInput extends RemoveClientIDFromOpenIDConnectProviderRequest {
    }
    export interface RemoveClientIDFromOpenIDConnectProviderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified client ID (also known as audience) from the list of client IDs
        *             registered for the specified IAM OpenID Connect (OIDC) provider resource
        *             object.</p>
        *         <p>This operation is idempotent; it does not fail or return an error if you try to remove
        *             a client ID that does not exist.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, RemoveClientIDFromOpenIDConnectProviderCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, RemoveClientIDFromOpenIDConnectProviderCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new RemoveClientIDFromOpenIDConnectProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveClientIDFromOpenIDConnectProviderCommandInput} for command's `input` shape.
        * @see {@link RemoveClientIDFromOpenIDConnectProviderCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class RemoveClientIDFromOpenIDConnectProviderCommand extends $Command<RemoveClientIDFromOpenIDConnectProviderCommandInput, RemoveClientIDFromOpenIDConnectProviderCommandOutput, IAMClientResolvedConfig> {
            readonly input: RemoveClientIDFromOpenIDConnectProviderCommandInput;
            constructor(input: RemoveClientIDFromOpenIDConnectProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveClientIDFromOpenIDConnectProviderCommandInput, RemoveClientIDFromOpenIDConnectProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/RemoveRoleFromInstanceProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { RemoveRoleFromInstanceProfileRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface RemoveRoleFromInstanceProfileCommandInput extends RemoveRoleFromInstanceProfileRequest {
    }
    export interface RemoveRoleFromInstanceProfileCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified IAM role from the specified EC2 instance profile.</p>
        *         <important>
        *             <p>Make sure that you do not have any Amazon EC2 instances running with the role you
        *                 are about to remove from the instance profile. Removing a role from an instance
        *                 profile that is associated with a running instance might break any applications
        *                 running on the instance.</p>
        *         </important>
        *         <p> For more information about IAM roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/WorkingWithRoles.html">Working with roles</a>. For more
        *             information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/AboutInstanceProfiles.html">About instance
        *             profiles</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, RemoveRoleFromInstanceProfileCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, RemoveRoleFromInstanceProfileCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new RemoveRoleFromInstanceProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveRoleFromInstanceProfileCommandInput} for command's `input` shape.
        * @see {@link RemoveRoleFromInstanceProfileCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class RemoveRoleFromInstanceProfileCommand extends $Command<RemoveRoleFromInstanceProfileCommandInput, RemoveRoleFromInstanceProfileCommandOutput, IAMClientResolvedConfig> {
            readonly input: RemoveRoleFromInstanceProfileCommandInput;
            constructor(input: RemoveRoleFromInstanceProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveRoleFromInstanceProfileCommandInput, RemoveRoleFromInstanceProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/RemoveUserFromGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { RemoveUserFromGroupRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface RemoveUserFromGroupCommandInput extends RemoveUserFromGroupRequest {
    }
    export interface RemoveUserFromGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified user from the specified group.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, RemoveUserFromGroupCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, RemoveUserFromGroupCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new RemoveUserFromGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RemoveUserFromGroupCommandInput} for command's `input` shape.
        * @see {@link RemoveUserFromGroupCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class RemoveUserFromGroupCommand extends $Command<RemoveUserFromGroupCommandInput, RemoveUserFromGroupCommandOutput, IAMClientResolvedConfig> {
            readonly input: RemoveUserFromGroupCommandInput;
            constructor(input: RemoveUserFromGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RemoveUserFromGroupCommandInput, RemoveUserFromGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ResetServiceSpecificCredentialCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ResetServiceSpecificCredentialRequest, ResetServiceSpecificCredentialResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ResetServiceSpecificCredentialCommandInput extends ResetServiceSpecificCredentialRequest {
    }
    export interface ResetServiceSpecificCredentialCommandOutput extends ResetServiceSpecificCredentialResponse, __MetadataBearer {
    }
    /**
        * <p>Resets the password for a service-specific credential. The new password is Amazon Web Services
        *             generated and cryptographically strong. It cannot be configured by the user. Resetting
        *             the password immediately invalidates the previous password associated with this
        *             user.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ResetServiceSpecificCredentialCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ResetServiceSpecificCredentialCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ResetServiceSpecificCredentialCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResetServiceSpecificCredentialCommandInput} for command's `input` shape.
        * @see {@link ResetServiceSpecificCredentialCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ResetServiceSpecificCredentialCommand extends $Command<ResetServiceSpecificCredentialCommandInput, ResetServiceSpecificCredentialCommandOutput, IAMClientResolvedConfig> {
            readonly input: ResetServiceSpecificCredentialCommandInput;
            constructor(input: ResetServiceSpecificCredentialCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResetServiceSpecificCredentialCommandInput, ResetServiceSpecificCredentialCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ResyncMFADeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { ResyncMFADeviceRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface ResyncMFADeviceCommandInput extends ResyncMFADeviceRequest {
    }
    export interface ResyncMFADeviceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Synchronizes the specified MFA device with its IAM resource object on the Amazon Web Services
        *             servers.</p>
        *         <p>For more information about creating and working with virtual MFA devices, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a virtual MFA
        *                 device</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, ResyncMFADeviceCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, ResyncMFADeviceCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new ResyncMFADeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ResyncMFADeviceCommandInput} for command's `input` shape.
        * @see {@link ResyncMFADeviceCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class ResyncMFADeviceCommand extends $Command<ResyncMFADeviceCommandInput, ResyncMFADeviceCommandOutput, IAMClientResolvedConfig> {
            readonly input: ResyncMFADeviceCommandInput;
            constructor(input: ResyncMFADeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResyncMFADeviceCommandInput, ResyncMFADeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/SetDefaultPolicyVersionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { SetDefaultPolicyVersionRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface SetDefaultPolicyVersionCommandInput extends SetDefaultPolicyVersionRequest {
    }
    export interface SetDefaultPolicyVersionCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Sets the specified version of the specified policy as the policy's default (operative)
        *             version.</p>
        *         <p>This operation affects all users, groups, and roles that the policy is attached to. To
        *             list the users, groups, and roles that the policy is attached to, use <a>ListEntitiesForPolicy</a>.</p>
        *         <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *                 policies</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, SetDefaultPolicyVersionCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, SetDefaultPolicyVersionCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new SetDefaultPolicyVersionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetDefaultPolicyVersionCommandInput} for command's `input` shape.
        * @see {@link SetDefaultPolicyVersionCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class SetDefaultPolicyVersionCommand extends $Command<SetDefaultPolicyVersionCommandInput, SetDefaultPolicyVersionCommandOutput, IAMClientResolvedConfig> {
            readonly input: SetDefaultPolicyVersionCommandInput;
            constructor(input: SetDefaultPolicyVersionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetDefaultPolicyVersionCommandInput, SetDefaultPolicyVersionCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/SetSecurityTokenServicePreferencesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { SetSecurityTokenServicePreferencesRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface SetSecurityTokenServicePreferencesCommandInput extends SetSecurityTokenServicePreferencesRequest {
    }
    export interface SetSecurityTokenServicePreferencesCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Sets the specified version of the global endpoint token as the token version used for
        *             the Amazon Web Services account.</p>
        *         <p>By default, Security Token Service (STS) is available as a global service, and all STS requests
        *             go to a single endpoint at <code>https://sts.amazonaws.com</code>. Amazon Web Services recommends
        *             using Regional STS endpoints to reduce latency, build in redundancy, and increase
        *             session token availability. For information about Regional endpoints for STS, see
        *                 <a href="https://docs.aws.amazon.com/general/latest/gr/sts.html">Security Token Service
        *                 endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p>
        *         <p>If you make an STS call to the global endpoint, the resulting session tokens might
        *             be valid in some Regions but not others. It depends on the version that is set in this
        *             operation. Version 1 tokens are valid only in Amazon Web Services Regions that are
        *             available by default. These tokens do not work in manually enabled Regions, such as Asia
        *             Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2
        *             tokens are longer and might affect systems where you temporarily store tokens. For
        *             information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and
        *                 deactivating STS in an Amazon Web Services Region</a> in the
        *                 <i>IAM User Guide</i>.</p>
        *         <p>To view the current session token version, see the
        *                 <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, SetSecurityTokenServicePreferencesCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, SetSecurityTokenServicePreferencesCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new SetSecurityTokenServicePreferencesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SetSecurityTokenServicePreferencesCommandInput} for command's `input` shape.
        * @see {@link SetSecurityTokenServicePreferencesCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class SetSecurityTokenServicePreferencesCommand extends $Command<SetSecurityTokenServicePreferencesCommandInput, SetSecurityTokenServicePreferencesCommandOutput, IAMClientResolvedConfig> {
            readonly input: SetSecurityTokenServicePreferencesCommandInput;
            constructor(input: SetSecurityTokenServicePreferencesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SetSecurityTokenServicePreferencesCommandInput, SetSecurityTokenServicePreferencesCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/SimulateCustomPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { SimulateCustomPolicyRequest, SimulatePolicyResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface SimulateCustomPolicyCommandInput extends SimulateCustomPolicyRequest {
    }
    export interface SimulateCustomPolicyCommandOutput extends SimulatePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Simulate how a set of IAM policies and optionally a resource-based policy works with
        *             a list of API operations and Amazon Web Services resources to determine the policies' effective
        *             permissions. The policies are provided as strings.</p>
        *         <p>The simulation does not perform the API operations; it only checks the authorization
        *             to determine if the simulated policies allow or deny the operations. You can simulate
        *             resources that don't exist in your account.</p>
        *         <p>If you want to simulate existing policies that are attached to an IAM user, group,
        *             or role, use <a>SimulatePrincipalPolicy</a> instead.</p>
        *         <p>Context keys are variables that are maintained by Amazon Web Services and its services and which
        *             provide details about the context of an API query request. You can use the
        *                 <code>Condition</code> element of an IAM policy to evaluate context keys. To get
        *             the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p>
        *         <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code>
        *             parameters to paginate the results.</p>
        *         <p>For more information about using the policy simulator, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html">Testing IAM policies
        *                 with the IAM policy simulator </a>in the
        *             <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, SimulateCustomPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, SimulateCustomPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new SimulateCustomPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SimulateCustomPolicyCommandInput} for command's `input` shape.
        * @see {@link SimulateCustomPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class SimulateCustomPolicyCommand extends $Command<SimulateCustomPolicyCommandInput, SimulateCustomPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: SimulateCustomPolicyCommandInput;
            constructor(input: SimulateCustomPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SimulateCustomPolicyCommandInput, SimulateCustomPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/SimulatePrincipalPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { SimulatePolicyResponse, SimulatePrincipalPolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface SimulatePrincipalPolicyCommandInput extends SimulatePrincipalPolicyRequest {
    }
    export interface SimulatePrincipalPolicyCommandOutput extends SimulatePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of
        *             API operations and Amazon Web Services resources to determine the policies' effective permissions. The
        *             entity can be an IAM user, group, or role. If you specify a user, then the simulation
        *             also includes all of the policies that are attached to groups that the user belongs to.
        *             You can simulate resources that don't exist in your account.</p>
        *         <p>You can optionally include a list of one or more additional policies specified as
        *             strings to include in the simulation. If you want to simulate only policies specified as
        *             strings, use <a>SimulateCustomPolicy</a> instead.</p>
        *         <p>You can also optionally include one resource-based policy to be evaluated with each of
        *             the resources included in the simulation.</p>
        *         <p>The simulation does not perform the API operations; it only checks the authorization
        *             to determine if the simulated policies allow or deny the operations.</p>
        *         <p>
        *             <b>Note:</b> This operation discloses information about the
        *             permissions granted to other users. If you do not want users to see other user's
        *             permissions, then consider allowing them to use <a>SimulateCustomPolicy</a>
        *             instead.</p>
        *         <p>Context keys are variables maintained by Amazon Web Services and its services that provide details
        *             about the context of an API query request. You can use the <code>Condition</code>
        *             element of an IAM policy to evaluate context keys. To get the list of context keys
        *             that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p>
        *         <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code>
        *             parameters to paginate the results.</p>
        *         <p>For more information about using the policy simulator, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html">Testing IAM policies
        *                 with the IAM policy simulator </a>in the
        *             <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, SimulatePrincipalPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, SimulatePrincipalPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new SimulatePrincipalPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SimulatePrincipalPolicyCommandInput} for command's `input` shape.
        * @see {@link SimulatePrincipalPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class SimulatePrincipalPolicyCommand extends $Command<SimulatePrincipalPolicyCommandInput, SimulatePrincipalPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: SimulatePrincipalPolicyCommandInput;
            constructor(input: SimulatePrincipalPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SimulatePrincipalPolicyCommandInput, SimulatePrincipalPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagInstanceProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { TagInstanceProfileRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface TagInstanceProfileCommandInput extends TagInstanceProfileRequest {
    }
    export interface TagInstanceProfileCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to an IAM instance profile. If a tag with the same key name
        *       already exists, then that tag is overwritten with the new value.</p>
        *          <p>Each tag consists of a key name and an associated value. By assigning tags to your resources, you can do the
        *       following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Administrative grouping and discovery</b> - Attach
        *           tags to resources to aid in organization and search. For example, you could search for all
        *           resources with the key name <i>Project</i> and the value
        *             <i>MyImportantProject</i>. Or search for all resources with the key name
        *             <i>Cost Center</i> and the value <i>41200</i>. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Access control</b> - Include tags in IAM user-based
        *           and resource-based policies. You can use tags to restrict access to only an IAM instance
        *           profile that has a specified tag attached. For examples of policies that show how to use
        *           tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
        *             <i>IAM User Guide</i>.</p>
        *             </li>
        *          </ul>
        *          <note>
        *             <ul>
        *                <li>
        *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
        *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        *                </li>
        *                <li>
        *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
        *             need to store an array, you can store comma-separated values in the string. However, you
        *             must interpret the value in your code.</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, TagInstanceProfileCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, TagInstanceProfileCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new TagInstanceProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagInstanceProfileCommandInput} for command's `input` shape.
        * @see {@link TagInstanceProfileCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class TagInstanceProfileCommand extends $Command<TagInstanceProfileCommandInput, TagInstanceProfileCommandOutput, IAMClientResolvedConfig> {
            readonly input: TagInstanceProfileCommandInput;
            constructor(input: TagInstanceProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagInstanceProfileCommandInput, TagInstanceProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagMFADeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { TagMFADeviceRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface TagMFADeviceCommandInput extends TagMFADeviceRequest {
    }
    export interface TagMFADeviceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to an IAM virtual multi-factor authentication (MFA) device. If
        *       a tag with the same key name already exists, then that tag is overwritten with the new
        *       value.</p>
        *          <p>A tag consists of a key name and an associated value. By assigning tags to your
        *       resources, you can do the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Administrative grouping and discovery</b> - Attach
        *           tags to resources to aid in organization and search. For example, you could search for all
        *           resources with the key name <i>Project</i> and the value
        *             <i>MyImportantProject</i>. Or search for all resources with the key name
        *             <i>Cost Center</i> and the value <i>41200</i>. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Access control</b> - Include tags in IAM user-based
        *           and resource-based policies. You can use tags to restrict access to only an IAM virtual
        *           MFA device that has a specified tag attached. For examples of policies that show how to
        *           use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
        *             <i>IAM User Guide</i>.</p>
        *             </li>
        *          </ul>
        *          <note>
        *             <ul>
        *                <li>
        *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
        *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        *                </li>
        *                <li>
        *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
        *             need to store an array, you can store comma-separated values in the string. However, you
        *             must interpret the value in your code.</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, TagMFADeviceCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, TagMFADeviceCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new TagMFADeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagMFADeviceCommandInput} for command's `input` shape.
        * @see {@link TagMFADeviceCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class TagMFADeviceCommand extends $Command<TagMFADeviceCommandInput, TagMFADeviceCommandOutput, IAMClientResolvedConfig> {
            readonly input: TagMFADeviceCommandInput;
            constructor(input: TagMFADeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagMFADeviceCommandInput, TagMFADeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagOpenIDConnectProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { TagOpenIDConnectProviderRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface TagOpenIDConnectProviderCommandInput extends TagOpenIDConnectProviderRequest {
    }
    export interface TagOpenIDConnectProviderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to an OpenID Connect (OIDC)-compatible identity provider. For
        *       more information about these providers, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html">About web identity federation</a>. If
        *       a tag with the same key name already exists, then that tag is overwritten with the new
        *       value.</p>
        *          <p>A tag consists of a key name and an associated value. By assigning tags to your
        *       resources, you can do the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Administrative grouping and discovery</b> - Attach
        *           tags to resources to aid in organization and search. For example, you could search for all
        *           resources with the key name <i>Project</i> and the value
        *             <i>MyImportantProject</i>. Or search for all resources with the key name
        *             <i>Cost Center</i> and the value <i>41200</i>. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Access control</b> - Include tags in IAM user-based
        *           and resource-based policies. You can use tags to restrict access to only an OIDC provider
        *           that has a specified tag attached. For examples of policies that show how to use tags to
        *           control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
        *           <i>IAM User Guide</i>.</p>
        *             </li>
        *          </ul>
        *          <note>
        *             <ul>
        *                <li>
        *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
        *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        *                </li>
        *                <li>
        *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
        *             need to store an array, you can store comma-separated values in the string. However, you
        *             must interpret the value in your code.</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, TagOpenIDConnectProviderCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, TagOpenIDConnectProviderCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new TagOpenIDConnectProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagOpenIDConnectProviderCommandInput} for command's `input` shape.
        * @see {@link TagOpenIDConnectProviderCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class TagOpenIDConnectProviderCommand extends $Command<TagOpenIDConnectProviderCommandInput, TagOpenIDConnectProviderCommandOutput, IAMClientResolvedConfig> {
            readonly input: TagOpenIDConnectProviderCommandInput;
            constructor(input: TagOpenIDConnectProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagOpenIDConnectProviderCommandInput, TagOpenIDConnectProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { TagPolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface TagPolicyCommandInput extends TagPolicyRequest {
    }
    export interface TagPolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to an IAM customer managed policy. If a tag with the same key
        *       name already exists, then that tag is overwritten with the new value.</p>
        *          <p>A tag consists of a key name and an associated value. By assigning tags to your
        *       resources, you can do the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Administrative grouping and discovery</b> - Attach
        *           tags to resources to aid in organization and search. For example, you could search for all
        *           resources with the key name <i>Project</i> and the value
        *             <i>MyImportantProject</i>. Or search for all resources with the key name
        *             <i>Cost Center</i> and the value <i>41200</i>. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Access control</b> - Include tags in IAM user-based
        *           and resource-based policies. You can use tags to restrict access to only an IAM customer
        *           managed policy that has a specified tag attached. For examples of policies that show how
        *           to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
        *             <i>IAM User Guide</i>.</p>
        *             </li>
        *          </ul>
        *          <note>
        *             <ul>
        *                <li>
        *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
        *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        *                </li>
        *                <li>
        *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
        *             need to store an array, you can store comma-separated values in the string. However, you
        *             must interpret the value in your code.</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, TagPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, TagPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new TagPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagPolicyCommandInput} for command's `input` shape.
        * @see {@link TagPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class TagPolicyCommand extends $Command<TagPolicyCommandInput, TagPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: TagPolicyCommandInput;
            constructor(input: TagPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagPolicyCommandInput, TagPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagRoleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { TagRoleRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface TagRoleCommandInput extends TagRoleRequest {
    }
    export interface TagRoleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to an IAM role. The role can be a regular role or a
        *       service-linked role. If a tag with the same key name already exists, then that tag is
        *       overwritten with the new value.</p>
        *          <p>A tag consists of a key name and an associated value. By assigning tags to your
        *       resources, you can do the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Administrative grouping and discovery</b> - Attach
        *           tags to resources to aid in organization and search. For example, you could search for all
        *           resources with the key name <i>Project</i> and the value
        *             <i>MyImportantProject</i>. Or search for all resources with the key name
        *             <i>Cost Center</i> and the value <i>41200</i>. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Access control</b> - Include tags in IAM user-based
        *           and resource-based policies. You can use tags to restrict access to only an IAM role
        *           that has a specified tag attached. You can also restrict access to only those resources
        *           that have a certain tag attached. For examples of policies that show how to use tags to
        *           control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
        *           <i>IAM User Guide</i>.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Cost allocation</b> - Use tags to help track which
        *           individuals and teams are using which Amazon Web Services resources.</p>
        *             </li>
        *          </ul>
        *          <note>
        *             <ul>
        *                <li>
        *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
        *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        *                </li>
        *                <li>
        *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
        *             need to store an array, you can store comma-separated values in the string. However, you
        *             must interpret the value in your code.</p>
        *                </li>
        *             </ul>
        *          </note>
        *          <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM identities</a> in the
        *         <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, TagRoleCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, TagRoleCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new TagRoleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagRoleCommandInput} for command's `input` shape.
        * @see {@link TagRoleCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class TagRoleCommand extends $Command<TagRoleCommandInput, TagRoleCommandOutput, IAMClientResolvedConfig> {
            readonly input: TagRoleCommandInput;
            constructor(input: TagRoleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagRoleCommandInput, TagRoleCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagSAMLProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { TagSAMLProviderRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface TagSAMLProviderCommandInput extends TagSAMLProviderRequest {
    }
    export interface TagSAMLProviderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to a Security Assertion Markup Language (SAML) identity provider.
        *       For more information about these providers, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based federation </a>.
        *       If a tag with the same key name already exists, then that tag is overwritten with the new
        *       value.</p>
        *          <p>A tag consists of a key name and an associated value. By assigning tags to your
        *       resources, you can do the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Administrative grouping and discovery</b> - Attach
        *           tags to resources to aid in organization and search. For example, you could search for all
        *           resources with the key name <i>Project</i> and the value
        *             <i>MyImportantProject</i>. Or search for all resources with the key name
        *             <i>Cost Center</i> and the value <i>41200</i>. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Access control</b> - Include tags in IAM user-based
        *           and resource-based policies. You can use tags to restrict access to only a SAML identity
        *           provider that has a specified tag attached. For examples of policies that show how to use
        *           tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
        *             <i>IAM User Guide</i>.</p>
        *             </li>
        *          </ul>
        *          <note>
        *             <ul>
        *                <li>
        *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
        *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        *                </li>
        *                <li>
        *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
        *             need to store an array, you can store comma-separated values in the string. However, you
        *             must interpret the value in your code.</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, TagSAMLProviderCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, TagSAMLProviderCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new TagSAMLProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagSAMLProviderCommandInput} for command's `input` shape.
        * @see {@link TagSAMLProviderCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class TagSAMLProviderCommand extends $Command<TagSAMLProviderCommandInput, TagSAMLProviderCommandOutput, IAMClientResolvedConfig> {
            readonly input: TagSAMLProviderCommandInput;
            constructor(input: TagSAMLProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagSAMLProviderCommandInput, TagSAMLProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagServerCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { TagServerCertificateRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface TagServerCertificateCommandInput extends TagServerCertificateRequest {
    }
    export interface TagServerCertificateCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to an IAM server certificate. If a tag with the same key name
        *       already exists, then that tag is overwritten with the new value.</p>
        *          <note>
        *             <p>For certificates in a Region supported by Certificate Manager (ACM), we
        *         recommend that you don't use IAM server certificates. Instead, use ACM to provision,
        *         manage, and deploy your server certificates. For more information about IAM server
        *         certificates, <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with server
        *           certificates</a> in the <i>IAM User Guide</i>.</p>
        *          </note>
        *          <p>A tag consists of a key name and an associated value. By assigning tags to your
        *       resources, you can do the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Administrative grouping and discovery</b> - Attach
        *           tags to resources to aid in organization and search. For example, you could search for all
        *           resources with the key name <i>Project</i> and the value
        *             <i>MyImportantProject</i>. Or search for all resources with the key name
        *             <i>Cost Center</i> and the value <i>41200</i>. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Access control</b> - Include tags in IAM user-based
        *           and resource-based policies. You can use tags to restrict access to only a server
        *           certificate that has a specified tag attached. For examples of policies that show how to
        *           use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
        *             <i>IAM User Guide</i>.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Cost allocation</b> - Use tags to help track which
        *           individuals and teams are using which Amazon Web Services resources.</p>
        *             </li>
        *          </ul>
        *          <note>
        *             <ul>
        *                <li>
        *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
        *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        *                </li>
        *                <li>
        *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
        *             need to store an array, you can store comma-separated values in the string. However, you
        *             must interpret the value in your code.</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, TagServerCertificateCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, TagServerCertificateCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new TagServerCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagServerCertificateCommandInput} for command's `input` shape.
        * @see {@link TagServerCertificateCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class TagServerCertificateCommand extends $Command<TagServerCertificateCommandInput, TagServerCertificateCommandOutput, IAMClientResolvedConfig> {
            readonly input: TagServerCertificateCommandInput;
            constructor(input: TagServerCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagServerCertificateCommandInput, TagServerCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { TagUserRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface TagUserCommandInput extends TagUserRequest {
    }
    export interface TagUserCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists,
        *       then that tag is overwritten with the new value.</p>
        *          <p>A tag consists of a key name and an associated value. By assigning tags to your
        *       resources, you can do the following:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <b>Administrative grouping and discovery</b> - Attach
        *           tags to resources to aid in organization and search. For example, you could search for all
        *           resources with the key name <i>Project</i> and the value
        *             <i>MyImportantProject</i>. Or search for all resources with the key name
        *             <i>Cost Center</i> and the value <i>41200</i>. </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Access control</b> - Include tags in IAM user-based
        *           and resource-based policies. You can use tags to restrict access to only an IAM
        *           requesting user that has a specified tag attached. You can also restrict access to only
        *           those resources that have a certain tag attached. For examples of policies that show how
        *           to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the
        *             <i>IAM User Guide</i>.</p>
        *             </li>
        *             <li>
        *                <p>
        *                   <b>Cost allocation</b> - Use tags to help track which
        *           individuals and teams are using which Amazon Web Services resources.</p>
        *             </li>
        *          </ul>
        *          <note>
        *             <ul>
        *                <li>
        *                   <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
        *    fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        *                </li>
        *                <li>
        *                   <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you
        *             need to store an array, you can store comma-separated values in the string. However, you
        *             must interpret the value in your code.</p>
        *                </li>
        *             </ul>
        *          </note>
        *          <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM identities</a> in the
        *         <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, TagUserCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, TagUserCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new TagUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagUserCommandInput} for command's `input` shape.
        * @see {@link TagUserCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class TagUserCommand extends $Command<TagUserCommandInput, TagUserCommandOutput, IAMClientResolvedConfig> {
            readonly input: TagUserCommandInput;
            constructor(input: TagUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagUserCommandInput, TagUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagInstanceProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UntagInstanceProfileRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface UntagInstanceProfileCommandInput extends UntagInstanceProfileRequest {
    }
    export interface UntagInstanceProfileCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the IAM instance profile. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UntagInstanceProfileCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UntagInstanceProfileCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UntagInstanceProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagInstanceProfileCommandInput} for command's `input` shape.
        * @see {@link UntagInstanceProfileCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UntagInstanceProfileCommand extends $Command<UntagInstanceProfileCommandInput, UntagInstanceProfileCommandOutput, IAMClientResolvedConfig> {
            readonly input: UntagInstanceProfileCommandInput;
            constructor(input: UntagInstanceProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagInstanceProfileCommandInput, UntagInstanceProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagMFADeviceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UntagMFADeviceRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface UntagMFADeviceCommandInput extends UntagMFADeviceRequest {
    }
    export interface UntagMFADeviceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the IAM virtual multi-factor authentication (MFA)
        *       device. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UntagMFADeviceCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UntagMFADeviceCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UntagMFADeviceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagMFADeviceCommandInput} for command's `input` shape.
        * @see {@link UntagMFADeviceCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UntagMFADeviceCommand extends $Command<UntagMFADeviceCommandInput, UntagMFADeviceCommandOutput, IAMClientResolvedConfig> {
            readonly input: UntagMFADeviceCommandInput;
            constructor(input: UntagMFADeviceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagMFADeviceCommandInput, UntagMFADeviceCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagOpenIDConnectProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UntagOpenIDConnectProviderRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface UntagOpenIDConnectProviderCommandInput extends UntagOpenIDConnectProviderRequest {
    }
    export interface UntagOpenIDConnectProviderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the specified OpenID Connect (OIDC)-compatible identity
        *       provider in IAM. For more information about OIDC providers, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html">About web identity federation</a>.
        *       For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UntagOpenIDConnectProviderCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UntagOpenIDConnectProviderCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UntagOpenIDConnectProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagOpenIDConnectProviderCommandInput} for command's `input` shape.
        * @see {@link UntagOpenIDConnectProviderCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UntagOpenIDConnectProviderCommand extends $Command<UntagOpenIDConnectProviderCommandInput, UntagOpenIDConnectProviderCommandOutput, IAMClientResolvedConfig> {
            readonly input: UntagOpenIDConnectProviderCommandInput;
            constructor(input: UntagOpenIDConnectProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagOpenIDConnectProviderCommandInput, UntagOpenIDConnectProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UntagPolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UntagPolicyCommandInput extends UntagPolicyRequest {
    }
    export interface UntagPolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the customer managed policy. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UntagPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UntagPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UntagPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagPolicyCommandInput} for command's `input` shape.
        * @see {@link UntagPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UntagPolicyCommand extends $Command<UntagPolicyCommandInput, UntagPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: UntagPolicyCommandInput;
            constructor(input: UntagPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagPolicyCommandInput, UntagPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagRoleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UntagRoleRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UntagRoleCommandInput extends UntagRoleRequest {
    }
    export interface UntagRoleCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UntagRoleCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UntagRoleCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UntagRoleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagRoleCommandInput} for command's `input` shape.
        * @see {@link UntagRoleCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UntagRoleCommand extends $Command<UntagRoleCommandInput, UntagRoleCommandOutput, IAMClientResolvedConfig> {
            readonly input: UntagRoleCommandInput;
            constructor(input: UntagRoleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagRoleCommandInput, UntagRoleCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagSAMLProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UntagSAMLProviderRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UntagSAMLProviderCommandInput extends UntagSAMLProviderRequest {
    }
    export interface UntagSAMLProviderCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the specified Security Assertion Markup Language (SAML)
        *       identity provider in IAM. For more information about these providers, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html">About web identity
        *         federation</a>. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UntagSAMLProviderCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UntagSAMLProviderCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UntagSAMLProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagSAMLProviderCommandInput} for command's `input` shape.
        * @see {@link UntagSAMLProviderCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UntagSAMLProviderCommand extends $Command<UntagSAMLProviderCommandInput, UntagSAMLProviderCommandOutput, IAMClientResolvedConfig> {
            readonly input: UntagSAMLProviderCommandInput;
            constructor(input: UntagSAMLProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagSAMLProviderCommandInput, UntagSAMLProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagServerCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UntagServerCertificateRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UntagServerCertificateCommandInput extends UntagServerCertificateRequest {
    }
    export interface UntagServerCertificateCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the IAM server certificate.
        *       For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        *          <note>
        *             <p>For certificates in a Region supported by Certificate Manager (ACM), we
        *         recommend that you don't use IAM server certificates. Instead, use ACM to provision,
        *         manage, and deploy your server certificates. For more information about IAM server
        *         certificates, <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with server
        *           certificates</a> in the <i>IAM User Guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UntagServerCertificateCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UntagServerCertificateCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UntagServerCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagServerCertificateCommandInput} for command's `input` shape.
        * @see {@link UntagServerCertificateCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UntagServerCertificateCommand extends $Command<UntagServerCertificateCommandInput, UntagServerCertificateCommandOutput, IAMClientResolvedConfig> {
            readonly input: UntagServerCertificateCommandInput;
            constructor(input: UntagServerCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagServerCertificateCommandInput, UntagServerCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UntagUserRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UntagUserCommandInput extends UntagUserRequest {
    }
    export interface UntagUserCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UntagUserCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UntagUserCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UntagUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagUserCommandInput} for command's `input` shape.
        * @see {@link UntagUserCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UntagUserCommand extends $Command<UntagUserCommandInput, UntagUserCommandOutput, IAMClientResolvedConfig> {
            readonly input: UntagUserCommandInput;
            constructor(input: UntagUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagUserCommandInput, UntagUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateAccessKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UpdateAccessKeyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UpdateAccessKeyCommandInput extends UpdateAccessKeyRequest {
    }
    export interface UpdateAccessKeyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Changes the status of the specified access key from Active to Inactive, or vice versa.
        *             This operation can be used to disable a user's key as part of a key rotation
        *             workflow.</p>
        *         <p>If the <code>UserName</code> is not specified, the user name is determined implicitly
        *             based on the Amazon Web Services access key ID used to sign the request. This operation works for
        *             access keys under the Amazon Web Services account. Consequently, you can use this operation to manage
        *             Amazon Web Services account root user credentials even if the Amazon Web Services account has no associated
        *             users.</p>
        *         <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing keys and certificates</a>
        *             in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UpdateAccessKeyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UpdateAccessKeyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UpdateAccessKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAccessKeyCommandInput} for command's `input` shape.
        * @see {@link UpdateAccessKeyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UpdateAccessKeyCommand extends $Command<UpdateAccessKeyCommandInput, UpdateAccessKeyCommandOutput, IAMClientResolvedConfig> {
            readonly input: UpdateAccessKeyCommandInput;
            constructor(input: UpdateAccessKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAccessKeyCommandInput, UpdateAccessKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateAccountPasswordPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UpdateAccountPasswordPolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UpdateAccountPasswordPolicyCommandInput extends UpdateAccountPasswordPolicyRequest {
    }
    export interface UpdateAccountPasswordPolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates the password policy settings for the Amazon Web Services account.</p>
        *         <note>
        *             <p>This operation does not support partial updates. No parameters are required, but
        *                 if you do not specify a parameter, that parameter's value reverts to its default
        *                 value. See the <b>Request Parameters</b> section for each
        *                 parameter's default value. Also note that some parameters do not allow the default
        *                 parameter to be explicitly set. Instead, to invoke the default value, do not include
        *                 that parameter when you invoke the operation.</p>
        *         </note>
        *         <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM password
        *                 policy</a> in the <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UpdateAccountPasswordPolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UpdateAccountPasswordPolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UpdateAccountPasswordPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAccountPasswordPolicyCommandInput} for command's `input` shape.
        * @see {@link UpdateAccountPasswordPolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UpdateAccountPasswordPolicyCommand extends $Command<UpdateAccountPasswordPolicyCommandInput, UpdateAccountPasswordPolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: UpdateAccountPasswordPolicyCommandInput;
            constructor(input: UpdateAccountPasswordPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAccountPasswordPolicyCommandInput, UpdateAccountPasswordPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateAssumeRolePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UpdateAssumeRolePolicyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UpdateAssumeRolePolicyCommandInput extends UpdateAssumeRolePolicyRequest {
    }
    export interface UpdateAssumeRolePolicyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates the policy that grants an IAM entity permission to assume a role. This is
        *             typically referred to as the "role trust policy". For more information about roles, see
        *                 <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using roles to
        *                 delegate permissions and federate identities</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UpdateAssumeRolePolicyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UpdateAssumeRolePolicyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UpdateAssumeRolePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateAssumeRolePolicyCommandInput} for command's `input` shape.
        * @see {@link UpdateAssumeRolePolicyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UpdateAssumeRolePolicyCommand extends $Command<UpdateAssumeRolePolicyCommandInput, UpdateAssumeRolePolicyCommandOutput, IAMClientResolvedConfig> {
            readonly input: UpdateAssumeRolePolicyCommandInput;
            constructor(input: UpdateAssumeRolePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateAssumeRolePolicyCommandInput, UpdateAssumeRolePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UpdateGroupRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UpdateGroupCommandInput extends UpdateGroupRequest {
    }
    export interface UpdateGroupCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates the name and/or the path of the specified IAM group.</p>
        *         <important>
        *             <p> You should understand the implications of changing a group's path or name. For
        *                 more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming users and
        *                     groups</a> in the <i>IAM User Guide</i>.</p>
        *         </important>
        *         <note>
        *             <p>The person making the request (the principal), must have permission to change the
        *                 role group with the old name and the new name. For example, to change the group
        *                 named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy
        *                 that allows them to update both groups. If the principal has permission to update
        *                 the <code>Managers</code> group, but not the <code>MGRs</code> group, then the
        *                 update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access management</a>.
        *             </p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UpdateGroupCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UpdateGroupCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UpdateGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateGroupCommandInput} for command's `input` shape.
        * @see {@link UpdateGroupCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UpdateGroupCommand extends $Command<UpdateGroupCommandInput, UpdateGroupCommandOutput, IAMClientResolvedConfig> {
            readonly input: UpdateGroupCommandInput;
            constructor(input: UpdateGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateGroupCommandInput, UpdateGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateLoginProfileCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UpdateLoginProfileRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UpdateLoginProfileCommandInput extends UpdateLoginProfileRequest {
    }
    export interface UpdateLoginProfileCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Changes the password for the specified IAM user. You can use the CLI,
        *             the Amazon Web Services API, or the <b>Users</b> page in the IAM console
        *             to change the password for any IAM user. Use <a>ChangePassword</a> to
        *             change your own password in the <b>My Security Credentials</b>
        *             page in the Amazon Web Services Management Console.</p>
        *         <p>For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing passwords</a> in the
        *                 <i>IAM User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UpdateLoginProfileCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UpdateLoginProfileCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UpdateLoginProfileCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLoginProfileCommandInput} for command's `input` shape.
        * @see {@link UpdateLoginProfileCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UpdateLoginProfileCommand extends $Command<UpdateLoginProfileCommandInput, UpdateLoginProfileCommandOutput, IAMClientResolvedConfig> {
            readonly input: UpdateLoginProfileCommandInput;
            constructor(input: UpdateLoginProfileCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLoginProfileCommandInput, UpdateLoginProfileCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateOpenIDConnectProviderThumbprintCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UpdateOpenIDConnectProviderThumbprintRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UpdateOpenIDConnectProviderThumbprintCommandInput extends UpdateOpenIDConnectProviderThumbprintRequest {
    }
    export interface UpdateOpenIDConnectProviderThumbprintCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Replaces the existing list of server certificate thumbprints associated with an OpenID
        *             Connect (OIDC) provider resource object with a new list of thumbprints.</p>
        *         <p>The list that you pass with this operation completely replaces the existing list of
        *             thumbprints. (The lists are not merged.)</p>
        *         <p>Typically, you need to update a thumbprint only when the identity provider certificate
        *             changes, which occurs rarely. However, if the provider's certificate
        *                 <i>does</i> change, any attempt to assume an IAM role that specifies
        *             the OIDC provider as a principal fails until the certificate thumbprint is
        *             updated.</p>
        *         <note>
        *             <p>Amazon Web Services secures communication with some OIDC identity providers (IdPs) through our
        *             library of trusted certificate authorities (CAs) instead of using a certificate
        *             thumbprint to verify your IdP server certificate. These OIDC IdPs include Google, and
        *             those that use an Amazon S3 bucket to host a JSON Web Key Set (JWKS) endpoint. In these
        *             cases, your legacy thumbprint remains in your configuration, but is no longer used for validation.</p>
        *          </note>
        *         <note>
        *             <p>Trust for the OIDC provider is derived from the provider certificate and is
        *                 validated by the thumbprint. Therefore, it is best to limit access to the
        *                     <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly
        *                 privileged users.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UpdateOpenIDConnectProviderThumbprintCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UpdateOpenIDConnectProviderThumbprintCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UpdateOpenIDConnectProviderThumbprintCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateOpenIDConnectProviderThumbprintCommandInput} for command's `input` shape.
        * @see {@link UpdateOpenIDConnectProviderThumbprintCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UpdateOpenIDConnectProviderThumbprintCommand extends $Command<UpdateOpenIDConnectProviderThumbprintCommandInput, UpdateOpenIDConnectProviderThumbprintCommandOutput, IAMClientResolvedConfig> {
            readonly input: UpdateOpenIDConnectProviderThumbprintCommandInput;
            constructor(input: UpdateOpenIDConnectProviderThumbprintCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateOpenIDConnectProviderThumbprintCommandInput, UpdateOpenIDConnectProviderThumbprintCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateRoleCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UpdateRoleRequest, UpdateRoleResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UpdateRoleCommandInput extends UpdateRoleRequest {
    }
    export interface UpdateRoleCommandOutput extends UpdateRoleResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the description or maximum session duration setting of a role.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UpdateRoleCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UpdateRoleCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UpdateRoleCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRoleCommandInput} for command's `input` shape.
        * @see {@link UpdateRoleCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UpdateRoleCommand extends $Command<UpdateRoleCommandInput, UpdateRoleCommandOutput, IAMClientResolvedConfig> {
            readonly input: UpdateRoleCommandInput;
            constructor(input: UpdateRoleCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRoleCommandInput, UpdateRoleCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateRoleDescriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UpdateRoleDescriptionRequest, UpdateRoleDescriptionResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UpdateRoleDescriptionCommandInput extends UpdateRoleDescriptionRequest {
    }
    export interface UpdateRoleDescriptionCommandOutput extends UpdateRoleDescriptionResponse, __MetadataBearer {
    }
    /**
        * <p>Use <a>UpdateRole</a> instead.</p>
        *         <p>Modifies only the description of a role. This operation performs the same function as
        *             the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UpdateRoleDescriptionCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UpdateRoleDescriptionCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UpdateRoleDescriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRoleDescriptionCommandInput} for command's `input` shape.
        * @see {@link UpdateRoleDescriptionCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UpdateRoleDescriptionCommand extends $Command<UpdateRoleDescriptionCommandInput, UpdateRoleDescriptionCommandOutput, IAMClientResolvedConfig> {
            readonly input: UpdateRoleDescriptionCommandInput;
            constructor(input: UpdateRoleDescriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRoleDescriptionCommandInput, UpdateRoleDescriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateSAMLProviderCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UpdateSAMLProviderRequest, UpdateSAMLProviderResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UpdateSAMLProviderCommandInput extends UpdateSAMLProviderRequest {
    }
    export interface UpdateSAMLProviderCommandOutput extends UpdateSAMLProviderResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the metadata document for an existing SAML provider resource object.</p>
        *         <note>
        *             <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UpdateSAMLProviderCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UpdateSAMLProviderCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UpdateSAMLProviderCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSAMLProviderCommandInput} for command's `input` shape.
        * @see {@link UpdateSAMLProviderCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UpdateSAMLProviderCommand extends $Command<UpdateSAMLProviderCommandInput, UpdateSAMLProviderCommandOutput, IAMClientResolvedConfig> {
            readonly input: UpdateSAMLProviderCommandInput;
            constructor(input: UpdateSAMLProviderCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSAMLProviderCommandInput, UpdateSAMLProviderCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateServerCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UpdateServerCertificateRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UpdateServerCertificateCommandInput extends UpdateServerCertificateRequest {
    }
    export interface UpdateServerCertificateCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates the name and/or the path of the specified server certificate stored in
        *             IAM.</p>
        *         <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working
        *                 with server certificates</a> in the <i>IAM User Guide</i>. This
        *             topic also includes a list of Amazon Web Services services that can use the server certificates that
        *             you manage with IAM.</p>
        *         <important>
        *             <p>You should understand the implications of changing a server certificate's path or
        *                 name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a server certificate</a> in the
        *                     <i>IAM User Guide</i>.</p>
        *         </important>
        *         <note>
        *             <p>The person making the request (the principal), must have permission to change the
        *                 server certificate with the old name and the new name. For example, to change the
        *                 certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the
        *                 principal must have a policy that allows them to update both certificates. If the
        *                 principal has permission to update the <code>ProductionCert</code> group, but not
        *                 the <code>ProdCert</code> certificate, then the update fails. For more information
        *                 about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access management</a> in the <i>IAM User Guide</i>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UpdateServerCertificateCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UpdateServerCertificateCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UpdateServerCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateServerCertificateCommandInput} for command's `input` shape.
        * @see {@link UpdateServerCertificateCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UpdateServerCertificateCommand extends $Command<UpdateServerCertificateCommandInput, UpdateServerCertificateCommandOutput, IAMClientResolvedConfig> {
            readonly input: UpdateServerCertificateCommandInput;
            constructor(input: UpdateServerCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateServerCertificateCommandInput, UpdateServerCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateServiceSpecificCredentialCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UpdateServiceSpecificCredentialRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UpdateServiceSpecificCredentialCommandInput extends UpdateServiceSpecificCredentialRequest {
    }
    export interface UpdateServiceSpecificCredentialCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Sets the status of a service-specific credential to <code>Active</code> or
        *                 <code>Inactive</code>. Service-specific credentials that are inactive cannot be used
        *             for authentication to the service. This operation can be used to disable a user's
        *             service-specific credential as part of a credential rotation work flow.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UpdateServiceSpecificCredentialCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UpdateServiceSpecificCredentialCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UpdateServiceSpecificCredentialCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateServiceSpecificCredentialCommandInput} for command's `input` shape.
        * @see {@link UpdateServiceSpecificCredentialCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UpdateServiceSpecificCredentialCommand extends $Command<UpdateServiceSpecificCredentialCommandInput, UpdateServiceSpecificCredentialCommandOutput, IAMClientResolvedConfig> {
            readonly input: UpdateServiceSpecificCredentialCommandInput;
            constructor(input: UpdateServiceSpecificCredentialCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateServiceSpecificCredentialCommandInput, UpdateServiceSpecificCredentialCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateSigningCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UpdateSigningCertificateRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UpdateSigningCertificateCommandInput extends UpdateSigningCertificateRequest {
    }
    export interface UpdateSigningCertificateCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Changes the status of the specified user signing certificate from active to disabled,
        *             or vice versa. This operation can be used to disable an IAM user's signing certificate
        *             as part of a certificate rotation work flow.</p>
        *         <p>If the <code>UserName</code> field is not specified, the user name is determined
        *             implicitly based on the Amazon Web Services access key ID used to sign the request. This operation
        *             works for access keys under the Amazon Web Services account. Consequently, you can use this operation
        *             to manage Amazon Web Services account root user credentials even if the Amazon Web Services account has no
        *             associated users.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UpdateSigningCertificateCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UpdateSigningCertificateCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UpdateSigningCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSigningCertificateCommandInput} for command's `input` shape.
        * @see {@link UpdateSigningCertificateCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UpdateSigningCertificateCommand extends $Command<UpdateSigningCertificateCommandInput, UpdateSigningCertificateCommandOutput, IAMClientResolvedConfig> {
            readonly input: UpdateSigningCertificateCommandInput;
            constructor(input: UpdateSigningCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSigningCertificateCommandInput, UpdateSigningCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateSSHPublicKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UpdateSSHPublicKeyRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UpdateSSHPublicKeyCommandInput extends UpdateSSHPublicKeyRequest {
    }
    export interface UpdateSSHPublicKeyCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public
        *             keys that are inactive cannot be used for authentication. This operation can be used to
        *             disable a user's SSH public key as part of a key rotation work flow.</p>
        *         <p>The SSH public key affected by this operation is used only for authenticating the
        *             associated IAM user to an CodeCommit repository. For more information about using SSH keys
        *             to authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for
        *                 SSH connections</a> in the <i>CodeCommit User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UpdateSSHPublicKeyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UpdateSSHPublicKeyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UpdateSSHPublicKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSSHPublicKeyCommandInput} for command's `input` shape.
        * @see {@link UpdateSSHPublicKeyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UpdateSSHPublicKeyCommand extends $Command<UpdateSSHPublicKeyCommandInput, UpdateSSHPublicKeyCommandOutput, IAMClientResolvedConfig> {
            readonly input: UpdateSSHPublicKeyCommandInput;
            constructor(input: UpdateSSHPublicKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSSHPublicKeyCommandInput, UpdateSSHPublicKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UpdateUserRequest } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UpdateUserCommandInput extends UpdateUserRequest {
    }
    export interface UpdateUserCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Updates the name and/or the path of the specified IAM user.</p>
        *         <important>
        *             <p> You should understand the implications of changing an IAM user's path or name.
        *                 For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM
        *                     user</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM
        *                     group</a> in the <i>IAM User Guide</i>.</p>
        *         </important>
        *         <note>
        *             <p> To change a user name, the requester must have appropriate permissions on both
        *                 the source object and the target object. For example, to change Bob to Robert, the
        *                 entity making the request must have permission on Bob and Robert, or must have
        *                 permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and policies</a>. </p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UpdateUserCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UpdateUserCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UpdateUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateUserCommandInput} for command's `input` shape.
        * @see {@link UpdateUserCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UpdateUserCommand extends $Command<UpdateUserCommandInput, UpdateUserCommandOutput, IAMClientResolvedConfig> {
            readonly input: UpdateUserCommandInput;
            constructor(input: UpdateUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateUserCommandInput, UpdateUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UploadServerCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UploadServerCertificateRequest, UploadServerCertificateResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UploadServerCertificateCommandInput extends UploadServerCertificateRequest {
    }
    export interface UploadServerCertificateCommandOutput extends UploadServerCertificateResponse, __MetadataBearer {
    }
    /**
        * <p>Uploads a server certificate entity for the Amazon Web Services account. The server certificate
        *             entity includes a public key certificate, a private key, and an optional certificate
        *             chain, which should all be PEM-encoded.</p>
        *         <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">Certificate Manager</a> to
        *             provision, manage, and deploy your server certificates. With ACM you can request a
        *             certificate, deploy it to Amazon Web Services resources, and let ACM handle certificate renewals for
        *             you. Certificates provided by ACM are free. For more information about using ACM,
        *             see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">Certificate Manager User
        *                 Guide</a>.</p>
        *         <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working
        *                 with server certificates</a> in the <i>IAM User Guide</i>. This
        *             topic includes a list of Amazon Web Services services that can use the server certificates that you
        *             manage with IAM.</p>
        *         <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS
        *                 quotas</a> in the <i>IAM User Guide</i>.</p>
        *         <note>
        *             <p>Because the body of the public key certificate, private key, and the certificate
        *                 chain can be large, you should use POST rather than GET when calling
        *                     <code>UploadServerCertificate</code>. For information about setting up
        *                 signatures and authorization through the API, see <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing Amazon Web Services API
        *                     requests</a> in the <i>Amazon Web Services General Reference</i>. For general
        *                 information about using the Query API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by making HTTP query
        *                     requests</a> in the <i>IAM User Guide</i>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UploadServerCertificateCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UploadServerCertificateCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UploadServerCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UploadServerCertificateCommandInput} for command's `input` shape.
        * @see {@link UploadServerCertificateCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UploadServerCertificateCommand extends $Command<UploadServerCertificateCommandInput, UploadServerCertificateCommandOutput, IAMClientResolvedConfig> {
            readonly input: UploadServerCertificateCommandInput;
            constructor(input: UploadServerCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UploadServerCertificateCommandInput, UploadServerCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UploadSigningCertificateCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UploadSigningCertificateRequest, UploadSigningCertificateResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UploadSigningCertificateCommandInput extends UploadSigningCertificateRequest {
    }
    export interface UploadSigningCertificateCommandOutput extends UploadSigningCertificateResponse, __MetadataBearer {
    }
    /**
        * <p>Uploads an X.509 signing certificate and associates it with the specified IAM user.
        *             Some Amazon Web Services services require you to use certificates to validate requests that are signed
        *             with a corresponding private key. When you upload the certificate, its default status is
        *                 <code>Active</code>.</p>
        *         <p>For information about when you would use an X.509 signing certificate, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Managing
        *                 server certificates in IAM</a> in the
        *             <i>IAM User Guide</i>.</p>
        *         <p>If the <code>UserName</code> is not specified, the IAM user name is determined
        *             implicitly based on the Amazon Web Services access key ID used to sign the request. This operation
        *             works for access keys under the Amazon Web Services account. Consequently, you can use this operation
        *             to manage Amazon Web Services account root user credentials even if the Amazon Web Services account has no
        *             associated users.</p>
        *         <note>
        *             <p>Because the body of an X.509 certificate can be large, you should use POST rather
        *                 than GET when calling <code>UploadSigningCertificate</code>. For information about
        *                 setting up signatures and authorization through the API, see <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing
        *                     Amazon Web Services API requests</a> in the <i>Amazon Web Services General Reference</i>. For
        *                 general information about using the Query API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query
        *                     requests</a> in the <i>IAM User Guide</i>.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UploadSigningCertificateCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UploadSigningCertificateCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UploadSigningCertificateCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UploadSigningCertificateCommandInput} for command's `input` shape.
        * @see {@link UploadSigningCertificateCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UploadSigningCertificateCommand extends $Command<UploadSigningCertificateCommandInput, UploadSigningCertificateCommandOutput, IAMClientResolvedConfig> {
            readonly input: UploadSigningCertificateCommandInput;
            constructor(input: UploadSigningCertificateCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UploadSigningCertificateCommandInput, UploadSigningCertificateCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UploadSSHPublicKeyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { IAMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient";
    import { UploadSSHPublicKeyRequest, UploadSSHPublicKeyResponse } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1";
    export interface UploadSSHPublicKeyCommandInput extends UploadSSHPublicKeyRequest {
    }
    export interface UploadSSHPublicKeyCommandOutput extends UploadSSHPublicKeyResponse, __MetadataBearer {
    }
    /**
        * <p>Uploads an SSH public key and associates it with the specified IAM user.</p>
        *         <p>The SSH public key uploaded by this operation can be used only for authenticating the
        *             associated IAM user to an CodeCommit repository. For more information about using SSH keys
        *             to authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for
        *                 SSH connections</a> in the <i>CodeCommit User Guide</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { IAMClient, UploadSSHPublicKeyCommand } from "@aws-sdk/client-iam"; // ES Modules import
        * // const { IAMClient, UploadSSHPublicKeyCommand } = require("@aws-sdk/client-iam"); // CommonJS import
        * const client = new IAMClient(config);
        * const command = new UploadSSHPublicKeyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UploadSSHPublicKeyCommandInput} for command's `input` shape.
        * @see {@link UploadSSHPublicKeyCommandOutput} for command's `response` shape.
        * @see {@link IAMClientResolvedConfig | config} for IAMClient's `config` shape.
        *
        */
    export class UploadSSHPublicKeyCommand extends $Command<UploadSSHPublicKeyCommandInput, UploadSSHPublicKeyCommandOutput, IAMClientResolvedConfig> {
            readonly input: UploadSSHPublicKeyCommandInput;
            constructor(input: UploadSSHPublicKeyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: IAMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UploadSSHPublicKeyCommandInput, UploadSSHPublicKeyCommandOutput>;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/IAMClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AddClientIDToOpenIDConnectProviderCommandInput, AddClientIDToOpenIDConnectProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AddClientIDToOpenIDConnectProviderCommand";
    import { AddRoleToInstanceProfileCommandInput, AddRoleToInstanceProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AddRoleToInstanceProfileCommand";
    import { AddUserToGroupCommandInput, AddUserToGroupCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AddUserToGroupCommand";
    import { AttachGroupPolicyCommandInput, AttachGroupPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AttachGroupPolicyCommand";
    import { AttachRolePolicyCommandInput, AttachRolePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AttachRolePolicyCommand";
    import { AttachUserPolicyCommandInput, AttachUserPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/AttachUserPolicyCommand";
    import { ChangePasswordCommandInput, ChangePasswordCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ChangePasswordCommand";
    import { CreateAccessKeyCommandInput, CreateAccessKeyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateAccessKeyCommand";
    import { CreateAccountAliasCommandInput, CreateAccountAliasCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateAccountAliasCommand";
    import { CreateGroupCommandInput, CreateGroupCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateGroupCommand";
    import { CreateInstanceProfileCommandInput, CreateInstanceProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateInstanceProfileCommand";
    import { CreateLoginProfileCommandInput, CreateLoginProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateLoginProfileCommand";
    import { CreateOpenIDConnectProviderCommandInput, CreateOpenIDConnectProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateOpenIDConnectProviderCommand";
    import { CreatePolicyCommandInput, CreatePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreatePolicyCommand";
    import { CreatePolicyVersionCommandInput, CreatePolicyVersionCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreatePolicyVersionCommand";
    import { CreateRoleCommandInput, CreateRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateRoleCommand";
    import { CreateSAMLProviderCommandInput, CreateSAMLProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateSAMLProviderCommand";
    import { CreateServiceLinkedRoleCommandInput, CreateServiceLinkedRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateServiceLinkedRoleCommand";
    import { CreateServiceSpecificCredentialCommandInput, CreateServiceSpecificCredentialCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateServiceSpecificCredentialCommand";
    import { CreateUserCommandInput, CreateUserCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateUserCommand";
    import { CreateVirtualMFADeviceCommandInput, CreateVirtualMFADeviceCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/CreateVirtualMFADeviceCommand";
    import { DeactivateMFADeviceCommandInput, DeactivateMFADeviceCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeactivateMFADeviceCommand";
    import { DeleteAccessKeyCommandInput, DeleteAccessKeyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteAccessKeyCommand";
    import { DeleteAccountAliasCommandInput, DeleteAccountAliasCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteAccountAliasCommand";
    import { DeleteAccountPasswordPolicyCommandInput, DeleteAccountPasswordPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteAccountPasswordPolicyCommand";
    import { DeleteGroupCommandInput, DeleteGroupCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteGroupCommand";
    import { DeleteGroupPolicyCommandInput, DeleteGroupPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteGroupPolicyCommand";
    import { DeleteInstanceProfileCommandInput, DeleteInstanceProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteInstanceProfileCommand";
    import { DeleteLoginProfileCommandInput, DeleteLoginProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteLoginProfileCommand";
    import { DeleteOpenIDConnectProviderCommandInput, DeleteOpenIDConnectProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteOpenIDConnectProviderCommand";
    import { DeletePolicyCommandInput, DeletePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeletePolicyCommand";
    import { DeletePolicyVersionCommandInput, DeletePolicyVersionCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeletePolicyVersionCommand";
    import { DeleteRoleCommandInput, DeleteRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteRoleCommand";
    import { DeleteRolePermissionsBoundaryCommandInput, DeleteRolePermissionsBoundaryCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteRolePermissionsBoundaryCommand";
    import { DeleteRolePolicyCommandInput, DeleteRolePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteRolePolicyCommand";
    import { DeleteSAMLProviderCommandInput, DeleteSAMLProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteSAMLProviderCommand";
    import { DeleteServerCertificateCommandInput, DeleteServerCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteServerCertificateCommand";
    import { DeleteServiceLinkedRoleCommandInput, DeleteServiceLinkedRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteServiceLinkedRoleCommand";
    import { DeleteServiceSpecificCredentialCommandInput, DeleteServiceSpecificCredentialCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteServiceSpecificCredentialCommand";
    import { DeleteSigningCertificateCommandInput, DeleteSigningCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteSigningCertificateCommand";
    import { DeleteSSHPublicKeyCommandInput, DeleteSSHPublicKeyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteSSHPublicKeyCommand";
    import { DeleteUserCommandInput, DeleteUserCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteUserCommand";
    import { DeleteUserPermissionsBoundaryCommandInput, DeleteUserPermissionsBoundaryCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteUserPermissionsBoundaryCommand";
    import { DeleteUserPolicyCommandInput, DeleteUserPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteUserPolicyCommand";
    import { DeleteVirtualMFADeviceCommandInput, DeleteVirtualMFADeviceCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DeleteVirtualMFADeviceCommand";
    import { DetachGroupPolicyCommandInput, DetachGroupPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DetachGroupPolicyCommand";
    import { DetachRolePolicyCommandInput, DetachRolePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DetachRolePolicyCommand";
    import { DetachUserPolicyCommandInput, DetachUserPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/DetachUserPolicyCommand";
    import { EnableMFADeviceCommandInput, EnableMFADeviceCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/EnableMFADeviceCommand";
    import { GenerateCredentialReportCommandInput, GenerateCredentialReportCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GenerateCredentialReportCommand";
    import { GenerateOrganizationsAccessReportCommandInput, GenerateOrganizationsAccessReportCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GenerateOrganizationsAccessReportCommand";
    import { GenerateServiceLastAccessedDetailsCommandInput, GenerateServiceLastAccessedDetailsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GenerateServiceLastAccessedDetailsCommand";
    import { GetAccessKeyLastUsedCommandInput, GetAccessKeyLastUsedCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetAccessKeyLastUsedCommand";
    import { GetAccountAuthorizationDetailsCommandInput, GetAccountAuthorizationDetailsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetAccountAuthorizationDetailsCommand";
    import { GetAccountPasswordPolicyCommandInput, GetAccountPasswordPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetAccountPasswordPolicyCommand";
    import { GetAccountSummaryCommandInput, GetAccountSummaryCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetAccountSummaryCommand";
    import { GetContextKeysForCustomPolicyCommandInput, GetContextKeysForCustomPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetContextKeysForCustomPolicyCommand";
    import { GetContextKeysForPrincipalPolicyCommandInput, GetContextKeysForPrincipalPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetContextKeysForPrincipalPolicyCommand";
    import { GetCredentialReportCommandInput, GetCredentialReportCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetCredentialReportCommand";
    import { GetGroupCommandInput, GetGroupCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetGroupCommand";
    import { GetGroupPolicyCommandInput, GetGroupPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetGroupPolicyCommand";
    import { GetInstanceProfileCommandInput, GetInstanceProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetInstanceProfileCommand";
    import { GetLoginProfileCommandInput, GetLoginProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetLoginProfileCommand";
    import { GetOpenIDConnectProviderCommandInput, GetOpenIDConnectProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetOpenIDConnectProviderCommand";
    import { GetOrganizationsAccessReportCommandInput, GetOrganizationsAccessReportCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetOrganizationsAccessReportCommand";
    import { GetPolicyCommandInput, GetPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetPolicyCommand";
    import { GetPolicyVersionCommandInput, GetPolicyVersionCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetPolicyVersionCommand";
    import { GetRoleCommandInput, GetRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetRoleCommand";
    import { GetRolePolicyCommandInput, GetRolePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetRolePolicyCommand";
    import { GetSAMLProviderCommandInput, GetSAMLProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetSAMLProviderCommand";
    import { GetServerCertificateCommandInput, GetServerCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetServerCertificateCommand";
    import { GetServiceLastAccessedDetailsCommandInput, GetServiceLastAccessedDetailsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetServiceLastAccessedDetailsCommand";
    import { GetServiceLastAccessedDetailsWithEntitiesCommandInput, GetServiceLastAccessedDetailsWithEntitiesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetServiceLastAccessedDetailsWithEntitiesCommand";
    import { GetServiceLinkedRoleDeletionStatusCommandInput, GetServiceLinkedRoleDeletionStatusCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetServiceLinkedRoleDeletionStatusCommand";
    import { GetSSHPublicKeyCommandInput, GetSSHPublicKeyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetSSHPublicKeyCommand";
    import { GetUserCommandInput, GetUserCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetUserCommand";
    import { GetUserPolicyCommandInput, GetUserPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/GetUserPolicyCommand";
    import { ListAccessKeysCommandInput, ListAccessKeysCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAccessKeysCommand";
    import { ListAccountAliasesCommandInput, ListAccountAliasesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAccountAliasesCommand";
    import { ListAttachedGroupPoliciesCommandInput, ListAttachedGroupPoliciesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAttachedGroupPoliciesCommand";
    import { ListAttachedRolePoliciesCommandInput, ListAttachedRolePoliciesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAttachedRolePoliciesCommand";
    import { ListAttachedUserPoliciesCommandInput, ListAttachedUserPoliciesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListAttachedUserPoliciesCommand";
    import { ListEntitiesForPolicyCommandInput, ListEntitiesForPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListEntitiesForPolicyCommand";
    import { ListGroupPoliciesCommandInput, ListGroupPoliciesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListGroupPoliciesCommand";
    import { ListGroupsCommandInput, ListGroupsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListGroupsCommand";
    import { ListGroupsForUserCommandInput, ListGroupsForUserCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListGroupsForUserCommand";
    import { ListInstanceProfilesCommandInput, ListInstanceProfilesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListInstanceProfilesCommand";
    import { ListInstanceProfilesForRoleCommandInput, ListInstanceProfilesForRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListInstanceProfilesForRoleCommand";
    import { ListInstanceProfileTagsCommandInput, ListInstanceProfileTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListInstanceProfileTagsCommand";
    import { ListMFADevicesCommandInput, ListMFADevicesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListMFADevicesCommand";
    import { ListMFADeviceTagsCommandInput, ListMFADeviceTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListMFADeviceTagsCommand";
    import { ListOpenIDConnectProvidersCommandInput, ListOpenIDConnectProvidersCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListOpenIDConnectProvidersCommand";
    import { ListOpenIDConnectProviderTagsCommandInput, ListOpenIDConnectProviderTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListOpenIDConnectProviderTagsCommand";
    import { ListPoliciesCommandInput, ListPoliciesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListPoliciesCommand";
    import { ListPoliciesGrantingServiceAccessCommandInput, ListPoliciesGrantingServiceAccessCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListPoliciesGrantingServiceAccessCommand";
    import { ListPolicyTagsCommandInput, ListPolicyTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListPolicyTagsCommand";
    import { ListPolicyVersionsCommandInput, ListPolicyVersionsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListPolicyVersionsCommand";
    import { ListRolePoliciesCommandInput, ListRolePoliciesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListRolePoliciesCommand";
    import { ListRolesCommandInput, ListRolesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListRolesCommand";
    import { ListRoleTagsCommandInput, ListRoleTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListRoleTagsCommand";
    import { ListSAMLProvidersCommandInput, ListSAMLProvidersCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListSAMLProvidersCommand";
    import { ListSAMLProviderTagsCommandInput, ListSAMLProviderTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListSAMLProviderTagsCommand";
    import { ListServerCertificatesCommandInput, ListServerCertificatesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListServerCertificatesCommand";
    import { ListServerCertificateTagsCommandInput, ListServerCertificateTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListServerCertificateTagsCommand";
    import { ListServiceSpecificCredentialsCommandInput, ListServiceSpecificCredentialsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListServiceSpecificCredentialsCommand";
    import { ListSigningCertificatesCommandInput, ListSigningCertificatesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListSigningCertificatesCommand";
    import { ListSSHPublicKeysCommandInput, ListSSHPublicKeysCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListSSHPublicKeysCommand";
    import { ListUserPoliciesCommandInput, ListUserPoliciesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListUserPoliciesCommand";
    import { ListUsersCommandInput, ListUsersCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListUsersCommand";
    import { ListUserTagsCommandInput, ListUserTagsCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListUserTagsCommand";
    import { ListVirtualMFADevicesCommandInput, ListVirtualMFADevicesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ListVirtualMFADevicesCommand";
    import { PutGroupPolicyCommandInput, PutGroupPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutGroupPolicyCommand";
    import { PutRolePermissionsBoundaryCommandInput, PutRolePermissionsBoundaryCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutRolePermissionsBoundaryCommand";
    import { PutRolePolicyCommandInput, PutRolePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutRolePolicyCommand";
    import { PutUserPermissionsBoundaryCommandInput, PutUserPermissionsBoundaryCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutUserPermissionsBoundaryCommand";
    import { PutUserPolicyCommandInput, PutUserPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/PutUserPolicyCommand";
    import { RemoveClientIDFromOpenIDConnectProviderCommandInput, RemoveClientIDFromOpenIDConnectProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/RemoveClientIDFromOpenIDConnectProviderCommand";
    import { RemoveRoleFromInstanceProfileCommandInput, RemoveRoleFromInstanceProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/RemoveRoleFromInstanceProfileCommand";
    import { RemoveUserFromGroupCommandInput, RemoveUserFromGroupCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/RemoveUserFromGroupCommand";
    import { ResetServiceSpecificCredentialCommandInput, ResetServiceSpecificCredentialCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ResetServiceSpecificCredentialCommand";
    import { ResyncMFADeviceCommandInput, ResyncMFADeviceCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/ResyncMFADeviceCommand";
    import { SetDefaultPolicyVersionCommandInput, SetDefaultPolicyVersionCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/SetDefaultPolicyVersionCommand";
    import { SetSecurityTokenServicePreferencesCommandInput, SetSecurityTokenServicePreferencesCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/SetSecurityTokenServicePreferencesCommand";
    import { SimulateCustomPolicyCommandInput, SimulateCustomPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/SimulateCustomPolicyCommand";
    import { SimulatePrincipalPolicyCommandInput, SimulatePrincipalPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/SimulatePrincipalPolicyCommand";
    import { TagInstanceProfileCommandInput, TagInstanceProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagInstanceProfileCommand";
    import { TagMFADeviceCommandInput, TagMFADeviceCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagMFADeviceCommand";
    import { TagOpenIDConnectProviderCommandInput, TagOpenIDConnectProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagOpenIDConnectProviderCommand";
    import { TagPolicyCommandInput, TagPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagPolicyCommand";
    import { TagRoleCommandInput, TagRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagRoleCommand";
    import { TagSAMLProviderCommandInput, TagSAMLProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagSAMLProviderCommand";
    import { TagServerCertificateCommandInput, TagServerCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagServerCertificateCommand";
    import { TagUserCommandInput, TagUserCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/TagUserCommand";
    import { UntagInstanceProfileCommandInput, UntagInstanceProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagInstanceProfileCommand";
    import { UntagMFADeviceCommandInput, UntagMFADeviceCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagMFADeviceCommand";
    import { UntagOpenIDConnectProviderCommandInput, UntagOpenIDConnectProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagOpenIDConnectProviderCommand";
    import { UntagPolicyCommandInput, UntagPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagPolicyCommand";
    import { UntagRoleCommandInput, UntagRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagRoleCommand";
    import { UntagSAMLProviderCommandInput, UntagSAMLProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagSAMLProviderCommand";
    import { UntagServerCertificateCommandInput, UntagServerCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagServerCertificateCommand";
    import { UntagUserCommandInput, UntagUserCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UntagUserCommand";
    import { UpdateAccessKeyCommandInput, UpdateAccessKeyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateAccessKeyCommand";
    import { UpdateAccountPasswordPolicyCommandInput, UpdateAccountPasswordPolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateAccountPasswordPolicyCommand";
    import { UpdateAssumeRolePolicyCommandInput, UpdateAssumeRolePolicyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateAssumeRolePolicyCommand";
    import { UpdateGroupCommandInput, UpdateGroupCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateGroupCommand";
    import { UpdateLoginProfileCommandInput, UpdateLoginProfileCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateLoginProfileCommand";
    import { UpdateOpenIDConnectProviderThumbprintCommandInput, UpdateOpenIDConnectProviderThumbprintCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateOpenIDConnectProviderThumbprintCommand";
    import { UpdateRoleCommandInput, UpdateRoleCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateRoleCommand";
    import { UpdateRoleDescriptionCommandInput, UpdateRoleDescriptionCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateRoleDescriptionCommand";
    import { UpdateSAMLProviderCommandInput, UpdateSAMLProviderCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateSAMLProviderCommand";
    import { UpdateServerCertificateCommandInput, UpdateServerCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateServerCertificateCommand";
    import { UpdateServiceSpecificCredentialCommandInput, UpdateServiceSpecificCredentialCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateServiceSpecificCredentialCommand";
    import { UpdateSigningCertificateCommandInput, UpdateSigningCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateSigningCertificateCommand";
    import { UpdateSSHPublicKeyCommandInput, UpdateSSHPublicKeyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateSSHPublicKeyCommand";
    import { UpdateUserCommandInput, UpdateUserCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UpdateUserCommand";
    import { UploadServerCertificateCommandInput, UploadServerCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UploadServerCertificateCommand";
    import { UploadSigningCertificateCommandInput, UploadSigningCertificateCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UploadSigningCertificateCommand";
    import { UploadSSHPublicKeyCommandInput, UploadSSHPublicKeyCommandOutput } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/commands/UploadSSHPublicKeyCommand";
    export type ServiceInputTypes = AddClientIDToOpenIDConnectProviderCommandInput | AddRoleToInstanceProfileCommandInput | AddUserToGroupCommandInput | AttachGroupPolicyCommandInput | AttachRolePolicyCommandInput | AttachUserPolicyCommandInput | ChangePasswordCommandInput | CreateAccessKeyCommandInput | CreateAccountAliasCommandInput | CreateGroupCommandInput | CreateInstanceProfileCommandInput | CreateLoginProfileCommandInput | CreateOpenIDConnectProviderCommandInput | CreatePolicyCommandInput | CreatePolicyVersionCommandInput | CreateRoleCommandInput | CreateSAMLProviderCommandInput | CreateServiceLinkedRoleCommandInput | CreateServiceSpecificCredentialCommandInput | CreateUserCommandInput | CreateVirtualMFADeviceCommandInput | DeactivateMFADeviceCommandInput | DeleteAccessKeyCommandInput | DeleteAccountAliasCommandInput | DeleteAccountPasswordPolicyCommandInput | DeleteGroupCommandInput | DeleteGroupPolicyCommandInput | DeleteInstanceProfileCommandInput | DeleteLoginProfileCommandInput | DeleteOpenIDConnectProviderCommandInput | DeletePolicyCommandInput | DeletePolicyVersionCommandInput | DeleteRoleCommandInput | DeleteRolePermissionsBoundaryCommandInput | DeleteRolePolicyCommandInput | DeleteSAMLProviderCommandInput | DeleteSSHPublicKeyCommandInput | DeleteServerCertificateCommandInput | DeleteServiceLinkedRoleCommandInput | DeleteServiceSpecificCredentialCommandInput | DeleteSigningCertificateCommandInput | DeleteUserCommandInput | DeleteUserPermissionsBoundaryCommandInput | DeleteUserPolicyCommandInput | DeleteVirtualMFADeviceCommandInput | DetachGroupPolicyCommandInput | DetachRolePolicyCommandInput | DetachUserPolicyCommandInput | EnableMFADeviceCommandInput | GenerateCredentialReportCommandInput | GenerateOrganizationsAccessReportCommandInput | GenerateServiceLastAccessedDetailsCommandInput | GetAccessKeyLastUsedCommandInput | GetAccountAuthorizationDetailsCommandInput | GetAccountPasswordPolicyCommandInput | GetAccountSummaryCommandInput | GetContextKeysForCustomPolicyCommandInput | GetContextKeysForPrincipalPolicyCommandInput | GetCredentialReportCommandInput | GetGroupCommandInput | GetGroupPolicyCommandInput | GetInstanceProfileCommandInput | GetLoginProfileCommandInput | GetOpenIDConnectProviderCommandInput | GetOrganizationsAccessReportCommandInput | GetPolicyCommandInput | GetPolicyVersionCommandInput | GetRoleCommandInput | GetRolePolicyCommandInput | GetSAMLProviderCommandInput | GetSSHPublicKeyCommandInput | GetServerCertificateCommandInput | GetServiceLastAccessedDetailsCommandInput | GetServiceLastAccessedDetailsWithEntitiesCommandInput | GetServiceLinkedRoleDeletionStatusCommandInput | GetUserCommandInput | GetUserPolicyCommandInput | ListAccessKeysCommandInput | ListAccountAliasesCommandInput | ListAttachedGroupPoliciesCommandInput | ListAttachedRolePoliciesCommandInput | ListAttachedUserPoliciesCommandInput | ListEntitiesForPolicyCommandInput | ListGroupPoliciesCommandInput | ListGroupsCommandInput | ListGroupsForUserCommandInput | ListInstanceProfileTagsCommandInput | ListInstanceProfilesCommandInput | ListInstanceProfilesForRoleCommandInput | ListMFADeviceTagsCommandInput | ListMFADevicesCommandInput | ListOpenIDConnectProviderTagsCommandInput | ListOpenIDConnectProvidersCommandInput | ListPoliciesCommandInput | ListPoliciesGrantingServiceAccessCommandInput | ListPolicyTagsCommandInput | ListPolicyVersionsCommandInput | ListRolePoliciesCommandInput | ListRoleTagsCommandInput | ListRolesCommandInput | ListSAMLProviderTagsCommandInput | ListSAMLProvidersCommandInput | ListSSHPublicKeysCommandInput | ListServerCertificateTagsCommandInput | ListServerCertificatesCommandInput | ListServiceSpecificCredentialsCommandInput | ListSigningCertificatesCommandInput | ListUserPoliciesCommandInput | ListUserTagsCommandInput | ListUsersCommandInput | ListVirtualMFADevicesCommandInput | PutGroupPolicyCommandInput | PutRolePermissionsBoundaryCommandInput | PutRolePolicyCommandInput | PutUserPermissionsBoundaryCommandInput | PutUserPolicyCommandInput | RemoveClientIDFromOpenIDConnectProviderCommandInput | RemoveRoleFromInstanceProfileCommandInput | RemoveUserFromGroupCommandInput | ResetServiceSpecificCredentialCommandInput | ResyncMFADeviceCommandInput | SetDefaultPolicyVersionCommandInput | SetSecurityTokenServicePreferencesCommandInput | SimulateCustomPolicyCommandInput | SimulatePrincipalPolicyCommandInput | TagInstanceProfileCommandInput | TagMFADeviceCommandInput | TagOpenIDConnectProviderCommandInput | TagPolicyCommandInput | TagRoleCommandInput | TagSAMLProviderCommandInput | TagServerCertificateCommandInput | TagUserCommandInput | UntagInstanceProfileCommandInput | UntagMFADeviceCommandInput | UntagOpenIDConnectProviderCommandInput | UntagPolicyCommandInput | UntagRoleCommandInput | UntagSAMLProviderCommandInput | UntagServerCertificateCommandInput | UntagUserCommandInput | UpdateAccessKeyCommandInput | UpdateAccountPasswordPolicyCommandInput | UpdateAssumeRolePolicyCommandInput | UpdateGroupCommandInput | UpdateLoginProfileCommandInput | UpdateOpenIDConnectProviderThumbprintCommandInput | UpdateRoleCommandInput | UpdateRoleDescriptionCommandInput | UpdateSAMLProviderCommandInput | UpdateSSHPublicKeyCommandInput | UpdateServerCertificateCommandInput | UpdateServiceSpecificCredentialCommandInput | UpdateSigningCertificateCommandInput | UpdateUserCommandInput | UploadSSHPublicKeyCommandInput | UploadServerCertificateCommandInput | UploadSigningCertificateCommandInput;
    export type ServiceOutputTypes = AddClientIDToOpenIDConnectProviderCommandOutput | AddRoleToInstanceProfileCommandOutput | AddUserToGroupCommandOutput | AttachGroupPolicyCommandOutput | AttachRolePolicyCommandOutput | AttachUserPolicyCommandOutput | ChangePasswordCommandOutput | CreateAccessKeyCommandOutput | CreateAccountAliasCommandOutput | CreateGroupCommandOutput | CreateInstanceProfileCommandOutput | CreateLoginProfileCommandOutput | CreateOpenIDConnectProviderCommandOutput | CreatePolicyCommandOutput | CreatePolicyVersionCommandOutput | CreateRoleCommandOutput | CreateSAMLProviderCommandOutput | CreateServiceLinkedRoleCommandOutput | CreateServiceSpecificCredentialCommandOutput | CreateUserCommandOutput | CreateVirtualMFADeviceCommandOutput | DeactivateMFADeviceCommandOutput | DeleteAccessKeyCommandOutput | DeleteAccountAliasCommandOutput | DeleteAccountPasswordPolicyCommandOutput | DeleteGroupCommandOutput | DeleteGroupPolicyCommandOutput | DeleteInstanceProfileCommandOutput | DeleteLoginProfileCommandOutput | DeleteOpenIDConnectProviderCommandOutput | DeletePolicyCommandOutput | DeletePolicyVersionCommandOutput | DeleteRoleCommandOutput | DeleteRolePermissionsBoundaryCommandOutput | DeleteRolePolicyCommandOutput | DeleteSAMLProviderCommandOutput | DeleteSSHPublicKeyCommandOutput | DeleteServerCertificateCommandOutput | DeleteServiceLinkedRoleCommandOutput | DeleteServiceSpecificCredentialCommandOutput | DeleteSigningCertificateCommandOutput | DeleteUserCommandOutput | DeleteUserPermissionsBoundaryCommandOutput | DeleteUserPolicyCommandOutput | DeleteVirtualMFADeviceCommandOutput | DetachGroupPolicyCommandOutput | DetachRolePolicyCommandOutput | DetachUserPolicyCommandOutput | EnableMFADeviceCommandOutput | GenerateCredentialReportCommandOutput | GenerateOrganizationsAccessReportCommandOutput | GenerateServiceLastAccessedDetailsCommandOutput | GetAccessKeyLastUsedCommandOutput | GetAccountAuthorizationDetailsCommandOutput | GetAccountPasswordPolicyCommandOutput | GetAccountSummaryCommandOutput | GetContextKeysForCustomPolicyCommandOutput | GetContextKeysForPrincipalPolicyCommandOutput | GetCredentialReportCommandOutput | GetGroupCommandOutput | GetGroupPolicyCommandOutput | GetInstanceProfileCommandOutput | GetLoginProfileCommandOutput | GetOpenIDConnectProviderCommandOutput | GetOrganizationsAccessReportCommandOutput | GetPolicyCommandOutput | GetPolicyVersionCommandOutput | GetRoleCommandOutput | GetRolePolicyCommandOutput | GetSAMLProviderCommandOutput | GetSSHPublicKeyCommandOutput | GetServerCertificateCommandOutput | GetServiceLastAccessedDetailsCommandOutput | GetServiceLastAccessedDetailsWithEntitiesCommandOutput | GetServiceLinkedRoleDeletionStatusCommandOutput | GetUserCommandOutput | GetUserPolicyCommandOutput | ListAccessKeysCommandOutput | ListAccountAliasesCommandOutput | ListAttachedGroupPoliciesCommandOutput | ListAttachedRolePoliciesCommandOutput | ListAttachedUserPoliciesCommandOutput | ListEntitiesForPolicyCommandOutput | ListGroupPoliciesCommandOutput | ListGroupsCommandOutput | ListGroupsForUserCommandOutput | ListInstanceProfileTagsCommandOutput | ListInstanceProfilesCommandOutput | ListInstanceProfilesForRoleCommandOutput | ListMFADeviceTagsCommandOutput | ListMFADevicesCommandOutput | ListOpenIDConnectProviderTagsCommandOutput | ListOpenIDConnectProvidersCommandOutput | ListPoliciesCommandOutput | ListPoliciesGrantingServiceAccessCommandOutput | ListPolicyTagsCommandOutput | ListPolicyVersionsCommandOutput | ListRolePoliciesCommandOutput | ListRoleTagsCommandOutput | ListRolesCommandOutput | ListSAMLProviderTagsCommandOutput | ListSAMLProvidersCommandOutput | ListSSHPublicKeysCommandOutput | ListServerCertificateTagsCommandOutput | ListServerCertificatesCommandOutput | ListServiceSpecificCredentialsCommandOutput | ListSigningCertificatesCommandOutput | ListUserPoliciesCommandOutput | ListUserTagsCommandOutput | ListUsersCommandOutput | ListVirtualMFADevicesCommandOutput | PutGroupPolicyCommandOutput | PutRolePermissionsBoundaryCommandOutput | PutRolePolicyCommandOutput | PutUserPermissionsBoundaryCommandOutput | PutUserPolicyCommandOutput | RemoveClientIDFromOpenIDConnectProviderCommandOutput | RemoveRoleFromInstanceProfileCommandOutput | RemoveUserFromGroupCommandOutput | ResetServiceSpecificCredentialCommandOutput | ResyncMFADeviceCommandOutput | SetDefaultPolicyVersionCommandOutput | SetSecurityTokenServicePreferencesCommandOutput | SimulateCustomPolicyCommandOutput | SimulatePrincipalPolicyCommandOutput | TagInstanceProfileCommandOutput | TagMFADeviceCommandOutput | TagOpenIDConnectProviderCommandOutput | TagPolicyCommandOutput | TagRoleCommandOutput | TagSAMLProviderCommandOutput | TagServerCertificateCommandOutput | TagUserCommandOutput | UntagInstanceProfileCommandOutput | UntagMFADeviceCommandOutput | UntagOpenIDConnectProviderCommandOutput | UntagPolicyCommandOutput | UntagRoleCommandOutput | UntagSAMLProviderCommandOutput | UntagServerCertificateCommandOutput | UntagUserCommandOutput | UpdateAccessKeyCommandOutput | UpdateAccountPasswordPolicyCommandOutput | UpdateAssumeRolePolicyCommandOutput | UpdateGroupCommandOutput | UpdateLoginProfileCommandOutput | UpdateOpenIDConnectProviderThumbprintCommandOutput | UpdateRoleCommandOutput | UpdateRoleDescriptionCommandOutput | UpdateSAMLProviderCommandOutput | UpdateSSHPublicKeyCommandOutput | UpdateServerCertificateCommandOutput | UpdateServiceSpecificCredentialCommandOutput | UpdateSigningCertificateCommandOutput | UpdateUserCommandOutput | UploadSSHPublicKeyCommandOutput | UploadServerCertificateCommandOutput | UploadSigningCertificateCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type IAMClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of IAMClient class constructor that set the region, credentials and other options.
        */
    export interface IAMClientConfig extends IAMClientConfigType {
    }
    type IAMClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of IAMClient class. This is resolved and normalized from the {@link IAMClientConfig | constructor configuration interface}.
        */
    export interface IAMClientResolvedConfig extends IAMClientResolvedConfigType {
    }
    /**
        * <fullname>Identity and Access Management</fullname>
        *          <p>Identity and Access Management (IAM) is a web service for securely controlling
        *       access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials
        *       such as access keys, and permissions that control which Amazon Web Services resources users and
        *       applications can access. For more information about IAM, see <a href="http://aws.amazon.com/iam/">Identity and Access Management (IAM)</a> and the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/">Identity and Access Management User Guide</a>.</p>
        */
    export class IAMClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, IAMClientResolvedConfig> {
            /**
                * The resolved configuration of IAMClient class. This is resolved and normalized from the {@link IAMClientConfig | constructor configuration interface}.
                */
            readonly config: IAMClientResolvedConfig;
            constructor(configuration: IAMClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { IAMServiceException as __BaseException } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/IAMServiceException";
    export enum AccessAdvisorUsageGranularityType {
            ACTION_LEVEL = "ACTION_LEVEL",
            SERVICE_LEVEL = "SERVICE_LEVEL"
    }
    /**
        * <p>An object that contains details about when a principal in the reported Organizations entity
        *          last attempted to access an Amazon Web Services service. A principal can be an IAM user, an IAM role,
        *          or the Amazon Web Services account root user within the reported Organizations entity.</p>
        *          <p>This data type is a response element in the <a>GetOrganizationsAccessReport</a> operation.</p>
        */
    export interface AccessDetail {
            /**
                * <p>The name of the service in which access was attempted.</p>
                */
            ServiceName: string | undefined;
            /**
                * <p>The namespace of the service in which access was attempted.</p>
                *          <p>To learn the service namespace of a service, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html">Actions, resources, and condition keys for Amazon Web Services services</a> in the
                *             <i>Service Authorization Reference</i>. Choose the name of the service to
                *          view details for that service. In the first paragraph, find the service prefix. For
                *          example, <code>(service prefix: a4b)</code>. For more information about service namespaces,
                *          see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon Web Services
                *             service namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            ServiceNamespace: string | undefined;
            /**
                * <p>The Region where the last service access attempt occurred.</p>
                *          <p>This field is null if no principals in the reported Organizations entity attempted to access the
                *          service within the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period">reporting period</a>.</p>
                */
            Region?: string;
            /**
                * <p>The path of the Organizations entity (root, organizational unit, or account) from which an
                *          authenticated principal last attempted to access the service. Amazon Web Services does not report
                *          unauthenticated requests.</p>
                *          <p>This field is null if no principals (IAM users, IAM roles, or root users) in the
                *          reported Organizations entity attempted to access the service within the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period">reporting period</a>.</p>
                */
            EntityPath?: string;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when an authenticated principal most recently attempted to access the
                *          service. Amazon Web Services does not report unauthenticated requests.</p>
                *          <p>This field is null if no principals in the reported Organizations entity attempted to access the
                *          service within the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period">reporting period</a>.</p>
                */
            LastAuthenticatedTime?: Date;
            /**
                * <p>The number of accounts with authenticated principals (root users, IAM users, and IAM
                *          roles) that attempted to access the service in the reporting period.</p>
                */
            TotalAuthenticatedEntities?: number;
    }
    export namespace AccessDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessDetail) => any;
    }
    export type StatusType = "Active" | "Inactive";
    /**
        * <p>Contains information about an Amazon Web Services access key.</p>
        *          <p> This data type is used as a response element in the <a>CreateAccessKey</a>
        *          and <a>ListAccessKeys</a> operations. </p>
        *          <note>
        *             <p>The <code>SecretAccessKey</code> value is returned only in response to <a>CreateAccessKey</a>. You can get a secret access key only when you first
        *             create an access key; you cannot recover the secret access key later. If you lose a
        *             secret access key, you must create a new access key.</p>
        *          </note>
        */
    export interface AccessKey {
            /**
                * <p>The name of the IAM user that the access key is associated with.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The ID for this access key.</p>
                */
            AccessKeyId: string | undefined;
            /**
                * <p>The status of the access key. <code>Active</code> means that the key is valid for API
                *          calls, while <code>Inactive</code> means it is not. </p>
                */
            Status: StatusType | string | undefined;
            /**
                * <p>The secret key used to sign requests.</p>
                */
            SecretAccessKey: string | undefined;
            /**
                * <p>The date when the access key was created.</p>
                */
            CreateDate?: Date;
    }
    export namespace AccessKey {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessKey) => any;
    }
    /**
        * <p>Contains information about the last time an Amazon Web Services access key was used since IAM began
        *          tracking this information on April 22, 2015.</p>
        *          <p>This data type is used as a response element in the <a>GetAccessKeyLastUsed</a> operation.</p>
        */
    export interface AccessKeyLastUsed {
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the access key was most recently used. This field is null in the
                *          following situations:</p>
                *          <ul>
                *             <li>
                *                <p>The user does not have an access key.</p>
                *             </li>
                *             <li>
                *                <p>An access key exists but has not been used since IAM began tracking this
                *                information.</p>
                *             </li>
                *             <li>
                *                <p>There is no sign-in data associated with the user.</p>
                *             </li>
                *          </ul>
                */
            LastUsedDate: Date | undefined;
            /**
                * <p>The name of the Amazon Web Services service with which this access key was most recently used. The
                *          value of this field is "N/A" in the following situations:</p>
                *          <ul>
                *             <li>
                *                <p>The user does not have an access key.</p>
                *             </li>
                *             <li>
                *                <p>An access key exists but has not been used since IAM started tracking this
                *                information.</p>
                *             </li>
                *             <li>
                *                <p>There is no sign-in data associated with the user.</p>
                *             </li>
                *          </ul>
                */
            ServiceName: string | undefined;
            /**
                * <p>The Amazon Web Services Region where this access key was most recently used. The value for this field
                *          is "N/A" in the following situations:</p>
                *          <ul>
                *             <li>
                *                <p>The user does not have an access key.</p>
                *             </li>
                *             <li>
                *                <p>An access key exists but has not been used since IAM began tracking this
                *                information.</p>
                *             </li>
                *             <li>
                *                <p>There is no sign-in data associated with the user.</p>
                *             </li>
                *          </ul>
                *          <p>For more information about Amazon Web Services Regions, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">Regions and endpoints</a> in the Amazon Web Services
                *          General Reference.</p>
                */
            Region: string | undefined;
    }
    export namespace AccessKeyLastUsed {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessKeyLastUsed) => any;
    }
    /**
        * <p>Contains information about an Amazon Web Services access key, without its secret key.</p>
        *          <p>This data type is used as a response element in the <a>ListAccessKeys</a>
        *          operation.</p>
        */
    export interface AccessKeyMetadata {
            /**
                * <p>The name of the IAM user that the key is associated with.</p>
                */
            UserName?: string;
            /**
                * <p>The ID for this access key.</p>
                */
            AccessKeyId?: string;
            /**
                * <p>The status of the access key. <code>Active</code> means that the key is valid for API
                *          calls; <code>Inactive</code> means it is not.</p>
                */
            Status?: StatusType | string;
            /**
                * <p>The date when the access key was created.</p>
                */
            CreateDate?: Date;
    }
    export namespace AccessKeyMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AccessKeyMetadata) => any;
    }
    export interface AddClientIDToOpenIDConnectProviderRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM OpenID Connect (OIDC) provider resource to
                *             add the client ID to. You can get a list of OIDC provider ARNs by using the <a>ListOpenIDConnectProviders</a> operation.</p>
                */
            OpenIDConnectProviderArn: string | undefined;
            /**
                * <p>The client ID (also known as audience) to add to the IAM OpenID Connect provider
                *             resource.</p>
                */
            ClientID: string | undefined;
    }
    export namespace AddClientIDToOpenIDConnectProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddClientIDToOpenIDConnectProviderRequest) => any;
    }
    /**
        * <p>The request was rejected because an invalid or out-of-range value was supplied for an
        *       input parameter.</p>
        */
    export class InvalidInputException extends __BaseException {
            readonly name: "InvalidInputException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidInputException, __BaseException>);
    }
    /**
        * <p>The request was rejected because it attempted to create resources beyond the current Amazon Web Services
        *       account limits. The error message describes the limit exceeded.</p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    /**
        * <p>The request was rejected because it referenced a resource entity that does not exist. The
        *       error message describes the resource.</p>
        */
    export class NoSuchEntityException extends __BaseException {
            readonly name: "NoSuchEntityException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NoSuchEntityException, __BaseException>);
    }
    /**
        * <p>The request processing has failed because of an unknown error, exception or
        *       failure.</p>
        */
    export class ServiceFailureException extends __BaseException {
            readonly name: "ServiceFailureException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceFailureException, __BaseException>);
    }
    export interface AddRoleToInstanceProfileRequest {
            /**
                * <p>The name of the instance profile to update.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            InstanceProfileName: string | undefined;
            /**
                * <p>The name of the role to add.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
    }
    export namespace AddRoleToInstanceProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddRoleToInstanceProfileRequest) => any;
    }
    /**
        * <p>The request was rejected because it attempted to create a resource that already
        *       exists.</p>
        */
    export class EntityAlreadyExistsException extends __BaseException {
            readonly name: "EntityAlreadyExistsException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EntityAlreadyExistsException, __BaseException>);
    }
    /**
        * <p>The request was rejected because only the service that depends on the service-linked role
        *       can modify or delete the role on your behalf. The error message includes the name of the
        *       service that depends on this service-linked role. You must request the change through that
        *       service.</p>
        */
    export class UnmodifiableEntityException extends __BaseException {
            readonly name: "UnmodifiableEntityException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnmodifiableEntityException, __BaseException>);
    }
    export interface AddUserToGroupRequest {
            /**
                * <p>The name of the group to update.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The name of the user to add.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
    }
    export namespace AddUserToGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AddUserToGroupRequest) => any;
    }
    export type AssignmentStatusType = "Any" | "Assigned" | "Unassigned";
    export enum PermissionsBoundaryAttachmentType {
            Policy = "PermissionsBoundaryPolicy"
    }
    /**
        * <p>Contains information about an attached permissions boundary.</p>
        *          <p>An attached permissions boundary is a managed policy that has been attached to a user or
        *          role to set the permissions boundary.</p>
        *          <p>For more information about permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM
        *             identities </a> in the <i>IAM User Guide</i>.</p>
        */
    export interface AttachedPermissionsBoundary {
            /**
                * <p> The permissions boundary usage type that indicates what type of IAM resource is used
                *          as the permissions boundary for an entity. This data type can only have a value of
                *             <code>Policy</code>.</p>
                */
            PermissionsBoundaryType?: PermissionsBoundaryAttachmentType | string;
            /**
                * <p> The ARN of the policy used to set the permissions boundary for the user or role.</p>
                */
            PermissionsBoundaryArn?: string;
    }
    export namespace AttachedPermissionsBoundary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachedPermissionsBoundary) => any;
    }
    /**
        * <p>Contains information about an attached policy.</p>
        *          <p>An attached policy is a managed policy that has been attached to a user, group, or role.
        *          This data type is used as a response element in the <a>ListAttachedGroupPolicies</a>, <a>ListAttachedRolePolicies</a>, <a>ListAttachedUserPolicies</a>, and <a>GetAccountAuthorizationDetails</a> operations. </p>
        *          <p>For more information about managed policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *             policies</a> in the <i>IAM User Guide</i>. </p>
        */
    export interface AttachedPolicy {
            /**
                * <p>The friendly name of the attached policy.</p>
                */
            PolicyName?: string;
            /**
                * <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
                *          <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in
                *          the <i>Amazon Web Services General Reference</i>. </p>
                */
            PolicyArn?: string;
    }
    export namespace AttachedPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachedPolicy) => any;
    }
    export interface AttachGroupPolicyRequest {
            /**
                * <p>The name (friendly name, not ARN) of the group to attach the policy to.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicyArn: string | undefined;
    }
    export namespace AttachGroupPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachGroupPolicyRequest) => any;
    }
    /**
        * <p>The request failed because Amazon Web Services service role policies can only be attached to the
        *       service-linked role for that service.</p>
        */
    export class PolicyNotAttachableException extends __BaseException {
            readonly name: "PolicyNotAttachableException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PolicyNotAttachableException, __BaseException>);
    }
    export interface AttachRolePolicyRequest {
            /**
                * <p>The name (friendly name, not ARN) of the role to attach the policy to.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicyArn: string | undefined;
    }
    export namespace AttachRolePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachRolePolicyRequest) => any;
    }
    export interface AttachUserPolicyRequest {
            /**
                * <p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicyArn: string | undefined;
    }
    export namespace AttachUserPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AttachUserPolicyRequest) => any;
    }
    export interface ChangePasswordRequest {
            /**
                * <p>The IAM user's current password.</p>
                */
            OldPassword: string | undefined;
            /**
                * <p>The new password. The new password must conform to the Amazon Web Services account's password
                *             policy, if one exists.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     that is used to validate this parameter is a string of characters. That string can include almost any printable
                *     ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>).
                *     You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)
                *     characters. Any of these characters are valid in a password. However, many tools, such
                *     as the Amazon Web Services Management Console, might restrict the ability to type certain characters because they have
                *     special meaning within that tool.</p>
                */
            NewPassword: string | undefined;
    }
    export namespace ChangePasswordRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChangePasswordRequest) => any;
    }
    /**
        * <p>The request was rejected because it referenced an entity that is temporarily unmodifiable,
        *       such as a user name that was deleted and then recreated. The error indicates that the request
        *       is likely to succeed if you try again after waiting several minutes. The error message
        *       describes the entity.</p>
        */
    export class EntityTemporarilyUnmodifiableException extends __BaseException {
            readonly name: "EntityTemporarilyUnmodifiableException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EntityTemporarilyUnmodifiableException, __BaseException>);
    }
    /**
        * <p>The request was rejected because the type of user for the transaction was
        *       incorrect.</p>
        */
    export class InvalidUserTypeException extends __BaseException {
            readonly name: "InvalidUserTypeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidUserTypeException, __BaseException>);
    }
    /**
        * <p>The request was rejected because the provided password did not meet the requirements
        *       imposed by the account password policy.</p>
        */
    export class PasswordPolicyViolationException extends __BaseException {
            readonly name: "PasswordPolicyViolationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PasswordPolicyViolationException, __BaseException>);
    }
    export interface CreateAccessKeyRequest {
            /**
                * <p>The name of the IAM user that the new key will belong to.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
    }
    export namespace CreateAccessKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAccessKeyRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>CreateAccessKey</a> request.
        *     </p>
        */
    export interface CreateAccessKeyResponse {
            /**
                * <p>A structure with details about the access key.</p>
                */
            AccessKey: AccessKey | undefined;
    }
    export namespace CreateAccessKeyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAccessKeyResponse) => any;
    }
    export interface CreateAccountAliasRequest {
            /**
                * <p>The account alias to create.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of
                *     lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have
                *     two dashes in a row.</p>
                */
            AccountAlias: string | undefined;
    }
    export namespace CreateAccountAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateAccountAliasRequest) => any;
    }
    export interface CreateGroupRequest {
            /**
                * <p> The path to the group. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *                 identifiers</a> in the <i>IAM User Guide</i>.</p>
                *         <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            Path?: string;
            /**
                * <p>The name of the group to create. Do not include the path in this value.</p>
                *         <p>IAM user, group, role, and policy names must be unique within the account. Names are
                *             not distinguished by case. For example, you cannot create resources named both
                *             "MyResource" and "myresource".</p>
                */
            GroupName: string | undefined;
    }
    export namespace CreateGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupRequest) => any;
    }
    /**
        * <p>Contains information about an IAM group entity.</p>
        *          <p>This data type is used as a response element in the following operations:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>CreateGroup</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>GetGroup</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListGroups</a>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface Group {
            /**
                * <p>The path to the group. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *             <i>IAM User Guide</i>. </p>
                */
            Path: string | undefined;
            /**
                * <p>The friendly name that identifies the group.</p>
                */
            GroupName: string | undefined;
            /**
                * <p> The stable and unique string identifying the group. For more information about IDs, see
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *             identifiers</a> in the <i>IAM User Guide</i>. </p>
                */
            GroupId: string | undefined;
            /**
                * <p> The Amazon Resource Name (ARN) specifying the group. For more information about ARNs
                *          and how to use them in policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *             <i>IAM User Guide</i>. </p>
                */
            Arn: string | undefined;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the group was created.</p>
                */
            CreateDate: Date | undefined;
    }
    export namespace Group {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Group) => any;
    }
    /**
        * <p>Contains the response to a successful <a>CreateGroup</a> request. </p>
        */
    export interface CreateGroupResponse {
            /**
                * <p>A structure containing details about the new group.</p>
                */
            Group: Group | undefined;
    }
    export namespace CreateGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateGroupResponse) => any;
    }
    /**
        * <p>The request was rejected because multiple requests to change this object were submitted
        *       simultaneously. Wait a few minutes and submit your request again.</p>
        */
    export class ConcurrentModificationException extends __BaseException {
            readonly name: "ConcurrentModificationException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
    }
    /**
        * <p>A structure that represents user-provided metadata that can be associated with an IAM
        *       resource. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
        *       <i>IAM User Guide</i>.</p>
        */
    export interface Tag {
            /**
                * <p>The key name that can be used to look up or retrieve the associated value. For example,
                *         <code>Department</code> or <code>Cost Center</code> are common choices.</p>
                */
            Key: string | undefined;
            /**
                * <p>The value associated with this tag. For example, tags with a key name of
                *         <code>Department</code> could have values such as <code>Human Resources</code>,
                *         <code>Accounting</code>, and <code>Support</code>. Tags with a key name of <code>Cost
                *         Center</code> might have values that consist of the number associated with the different
                *       cost centers in your company. Typically, many resources have tags with the same key name but
                *       with different values.</p>
                *          <note>
                *             <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you need to
                *         store an array, you can store comma-separated values in the string. However, you must
                *         interpret the value in your code.</p>
                *          </note>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateInstanceProfileRequest {
            /**
                * <p>The name of the instance profile to create.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            InstanceProfileName: string | undefined;
            /**
                * <p> The path to the instance profile. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *                 Identifiers</a> in the <i>IAM User Guide</i>.</p>
                *         <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            Path?: string;
            /**
                * <p>A list of tags that you want to attach to the newly created IAM instance profile.
                *       Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *          <note>
                *             <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created.</p>
                *          </note>
                */
            Tags?: Tag[];
    }
    export namespace CreateInstanceProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateInstanceProfileRequest) => any;
    }
    /**
        * <p>Contains information about the last time that an IAM role was used. This includes the
        *          date and time and the Region in which the role was last used. Activity is only reported for
        *          the trailing 400 days. This period can be shorter if your Region began supporting these
        *          features within the last year. The role might have been used more than 400 days ago. For
        *          more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions where data is tracked</a> in the <i>IAM User
        *          Guide</i>.</p>
        *          <p>This data type is returned as a response element in the <a>GetRole</a> and
        *             <a>GetAccountAuthorizationDetails</a> operations.</p>
        */
    export interface RoleLastUsed {
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a> that the role was last used.</p>
                *          <p>This field is null if the role has not been used within the IAM tracking period. For
                *          more information about the tracking period, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions where data is tracked</a> in the <i>IAM User Guide</i>.
                *       </p>
                */
            LastUsedDate?: Date;
            /**
                * <p>The name of the Amazon Web Services Region in which the role was last used.</p>
                */
            Region?: string;
    }
    export namespace RoleLastUsed {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RoleLastUsed) => any;
    }
    /**
        * <p>Contains information about an IAM role. This structure is returned as a response
        *          element in several API operations that interact with roles.</p>
        */
    export interface Role {
            /**
                * <p> The path to the role. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *             <i>IAM User Guide</i>. </p>
                */
            Path: string | undefined;
            /**
                * <p>The friendly name that identifies the role.</p>
                */
            RoleName: string | undefined;
            /**
                * <p> The stable and unique string identifying the role. For more information about IDs, see
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *             identifiers</a> in the <i>IAM User Guide</i>. </p>
                */
            RoleId: string | undefined;
            /**
                * <p> The Amazon Resource Name (ARN) specifying the role. For more information about ARNs and
                *          how to use them in policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *             <i>IAM User Guide</i> guide. </p>
                */
            Arn: string | undefined;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the role was created.</p>
                */
            CreateDate: Date | undefined;
            /**
                * <p>The policy that grants an entity permission to assume the role.</p>
                */
            AssumeRolePolicyDocument?: string;
            /**
                * <p>A description of the role that you provide.</p>
                */
            Description?: string;
            /**
                * <p>The maximum session duration (in seconds) for the specified role. Anyone who uses the
                *          CLI, or API to assume the role can specify the duration using the optional
                *             <code>DurationSeconds</code> API parameter or <code>duration-seconds</code> CLI
                *          parameter.</p>
                */
            MaxSessionDuration?: number;
            /**
                * <p>The ARN of the policy used to set the permissions boundary for the role.</p>
                *          <p>For more information about permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM
                *             identities </a> in the <i>IAM User Guide</i>.</p>
                */
            PermissionsBoundary?: AttachedPermissionsBoundary;
            /**
                * <p>A list of tags that are attached to the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Contains information about the last time that an IAM role was used. This includes the
                *          date and time and the Region in which the role was last used. Activity is only reported for
                *          the trailing 400 days. This period can be shorter if your Region began supporting these
                *          features within the last year. The role might have been used more than 400 days ago. For
                *          more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions where data is tracked</a> in the <i>IAM User
                *          Guide</i>.</p>
                */
            RoleLastUsed?: RoleLastUsed;
    }
    export namespace Role {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Role) => any;
    }
    /**
        * <p>Contains information about an instance profile.</p>
        *          <p>This data type is used as a response element in the following operations:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>CreateInstanceProfile</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>GetInstanceProfile</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListInstanceProfiles</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListInstanceProfilesForRole</a>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface InstanceProfile {
            /**
                * <p> The path to the instance profile. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *             identifiers</a> in the <i>IAM User Guide</i>. </p>
                */
            Path: string | undefined;
            /**
                * <p>The name identifying the instance profile.</p>
                */
            InstanceProfileName: string | undefined;
            /**
                * <p> The stable and unique string identifying the instance profile. For more information
                *          about IDs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
                */
            InstanceProfileId: string | undefined;
            /**
                * <p> The Amazon Resource Name (ARN) specifying the instance profile. For more information
                *          about ARNs and how to use them in policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *             <i>IAM User Guide</i>. </p>
                */
            Arn: string | undefined;
            /**
                * <p>The date when the instance profile was created.</p>
                */
            CreateDate: Date | undefined;
            /**
                * <p>The role associated with the instance profile.</p>
                */
            Roles: Role[] | undefined;
            /**
                * <p>A list of tags that are attached to the instance profile. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace InstanceProfile {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InstanceProfile) => any;
    }
    /**
        * <p>Contains the response to a successful <a>CreateInstanceProfile</a> request.
        *     </p>
        */
    export interface CreateInstanceProfileResponse {
            /**
                * <p>A structure containing details about the new instance profile.</p>
                */
            InstanceProfile: InstanceProfile | undefined;
    }
    export namespace CreateInstanceProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateInstanceProfileResponse) => any;
    }
    export interface CreateLoginProfileRequest {
            /**
                * <p>The name of the IAM user to create a password for. The user must already
                *             exist.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The new password for the user.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     that is used to validate this parameter is a string of characters. That string can include almost any printable
                *     ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>).
                *     You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)
                *     characters. Any of these characters are valid in a password. However, many tools, such
                *     as the Amazon Web Services Management Console, might restrict the ability to type certain characters because they have
                *     special meaning within that tool.</p>
                */
            Password: string | undefined;
            /**
                * <p>Specifies whether the user is required to set a new password on next sign-in.</p>
                */
            PasswordResetRequired?: boolean;
    }
    export namespace CreateLoginProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoginProfileRequest) => any;
    }
    /**
        * <p>Contains the user name and password create date for a user.</p>
        *          <p> This data type is used as a response element in the <a>CreateLoginProfile</a> and <a>GetLoginProfile</a> operations. </p>
        */
    export interface LoginProfile {
            /**
                * <p>The name of the user, which can be used for signing in to the Amazon Web Services Management Console.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The date when the password for the user was created.</p>
                */
            CreateDate: Date | undefined;
            /**
                * <p>Specifies whether the user is required to set a new password on next sign-in.</p>
                */
            PasswordResetRequired?: boolean;
    }
    export namespace LoginProfile {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoginProfile) => any;
    }
    /**
        * <p>Contains the response to a successful <a>CreateLoginProfile</a> request.
        *     </p>
        */
    export interface CreateLoginProfileResponse {
            /**
                * <p>A structure containing the user name and password create date.</p>
                */
            LoginProfile: LoginProfile | undefined;
    }
    export namespace CreateLoginProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateLoginProfileResponse) => any;
    }
    export interface CreateOpenIDConnectProviderRequest {
            /**
                * <p>The URL of the identity provider. The URL must begin with <code>https://</code> and
                *             should correspond to the <code>iss</code> claim in the provider's OpenID Connect ID
                *             tokens. Per the OIDC standard, path components are allowed but query parameters are not.
                *             Typically the URL consists of only a hostname, like
                *                 <code>https://server.example.org</code> or <code>https://example.com</code>. The URL
                *             should not contain a port number. </p>
                *         <p>You cannot register the same provider multiple times in a single Amazon Web Services account. If you
                *             try to submit a URL that has already been used for an OpenID Connect provider in the
                *             Amazon Web Services account, you will get an error.</p>
                */
            Url: string | undefined;
            /**
                * <p>Provides a list of client IDs, also known as audiences. When a mobile or web app
                *             registers with an OpenID Connect provider, they establish a value that identifies the
                *             application. This is the value that's sent as the <code>client_id</code> parameter on
                *             OAuth requests.</p>
                *         <p>You can register multiple client IDs with the same provider. For example, you might
                *             have multiple applications that use the same OIDC provider. You cannot register more
                *             than 100 client IDs with a single IAM OIDC provider.</p>
                *         <p>There is no defined format for a client ID. The
                *                 <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to
                *             255 characters long.</p>
                */
            ClientIDList?: string[];
            /**
                * <p>A list of server certificate thumbprints for the OpenID Connect (OIDC) identity
                *             provider's server certificates. Typically this list includes only one entry. However,
                *             IAM lets you have up to five thumbprints for an OIDC provider. This lets you maintain
                *             multiple thumbprints if the identity provider is rotating certificates.</p>
                *         <p>The server certificate thumbprint is the hex-encoded SHA-1 hash value of the X.509
                *             certificate used by the domain where the OpenID Connect provider makes its keys
                *             available. It is always a 40-character string.</p>
                *         <p>You must provide at least one thumbprint when creating an IAM OIDC provider. For
                *             example, assume that the OIDC provider is <code>server.example.com</code> and the
                *             provider stores its keys at https://keys.server.example.com/openid-connect. In that
                *             case, the thumbprint string would be the hex-encoded SHA-1 hash value of the certificate
                *             used by <code>https://keys.server.example.com.</code>
                *          </p>
                *         <p>For more information about obtaining the OIDC provider thumbprint, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/identity-providers-oidc-obtain-thumbprint.html">Obtaining the
                *                 thumbprint for an OpenID Connect provider</a> in the <i>IAM User
                *                 Guide</i>.</p>
                */
            ThumbprintList: string[] | undefined;
            /**
                * <p>A list of tags that you want to attach to the new IAM OpenID Connect (OIDC) provider.
                *       Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *          <note>
                *             <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created.</p>
                *          </note>
                */
            Tags?: Tag[];
    }
    export namespace CreateOpenIDConnectProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOpenIDConnectProviderRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>CreateOpenIDConnectProvider</a>
        *       request. </p>
        */
    export interface CreateOpenIDConnectProviderResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the new IAM OpenID Connect provider that is
                *             created. For more information, see <a>OpenIDConnectProviderListEntry</a>.
                *         </p>
                */
            OpenIDConnectProviderArn?: string;
            /**
                * <p>A list of tags that are attached to the new IAM OIDC provider. The returned list of
                *       tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateOpenIDConnectProviderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateOpenIDConnectProviderResponse) => any;
    }
    export interface CreatePolicyRequest {
            /**
                * <p>The friendly name of the policy.</p>
                *         <p>IAM user, group, role, and policy names must be unique within the account. Names are
                *             not distinguished by case. For example, you cannot create resources named both
                *             "MyResource" and "myresource".</p>
                */
            PolicyName: string | undefined;
            /**
                * <p>The path for the policy.</p>
                *         <p>For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *                 <i>IAM User Guide</i>.</p>
                *         <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                *         <note>
                *             <p>You cannot use an asterisk (*) in the path name.</p>
                *         </note>
                */
            Path?: string;
            /**
                * <p>The JSON policy document that you want to use as the content for the new
                *             policy.</p>
                *         <p>You must provide policies in JSON format in IAM. However, for CloudFormation
                *             templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to
                *             IAM.</p>
                *         <p>The maximum length of the policy document that you can pass in this operation,
                *             including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p>
                *         <p>To learn more about JSON policy grammar, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_grammar.html">Grammar of the IAM JSON
                *                 policy language</a> in the <i>IAM User Guide</i>. </p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            PolicyDocument: string | undefined;
            /**
                * <p>A friendly description of the policy.</p>
                *         <p>Typically used to store information about the permissions defined in the policy. For
                *             example, "Grants access to production DynamoDB tables."</p>
                *         <p>The policy description is immutable. After a value is assigned, it cannot be
                *             changed.</p>
                */
            Description?: string;
            /**
                * <p>A list of tags that you want to attach to the new IAM customer managed policy.
                *       Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *          <note>
                *             <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created.</p>
                *          </note>
                */
            Tags?: Tag[];
    }
    export namespace CreatePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePolicyRequest) => any;
    }
    /**
        * <p>Contains information about a managed policy.</p>
        *          <p>This data type is used as a response element in the <a>CreatePolicy</a>,
        *             <a>GetPolicy</a>, and <a>ListPolicies</a> operations. </p>
        *          <p>For more information about managed policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *             policies</a> in the <i>IAM User Guide</i>. </p>
        */
    export interface Policy {
            /**
                * <p>The friendly name (not ARN) identifying the policy.</p>
                */
            PolicyName?: string;
            /**
                * <p>The stable and unique string identifying the policy.</p>
                *          <p>For more information about IDs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *             <i>IAM User Guide</i>.</p>
                */
            PolicyId?: string;
            /**
                * <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
                *          <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in
                *          the <i>Amazon Web Services General Reference</i>. </p>
                */
            Arn?: string;
            /**
                * <p>The path to the policy.</p>
                *          <p>For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *             <i>IAM User Guide</i>.</p>
                */
            Path?: string;
            /**
                * <p>The identifier for the version of the policy that is set as the default version.</p>
                */
            DefaultVersionId?: string;
            /**
                * <p>The number of entities (users, groups, and roles) that the policy is attached to.</p>
                */
            AttachmentCount?: number;
            /**
                * <p>The number of entities (users and roles) for which the policy is used to set the
                *          permissions boundary. </p>
                *          <p>For more information about permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM
                *             identities </a> in the <i>IAM User Guide</i>.</p>
                */
            PermissionsBoundaryUsageCount?: number;
            /**
                * <p>Specifies whether the policy can be attached to an IAM user, group, or role.</p>
                */
            IsAttachable?: boolean;
            /**
                * <p>A friendly description of the policy.</p>
                *          <p>This element is included in the response to the <a>GetPolicy</a> operation.
                *          It is not included in the response to the <a>ListPolicies</a> operation. </p>
                */
            Description?: string;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the policy was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the policy was last updated.</p>
                *          <p>When a policy has only one version, this field contains the date and time when the
                *          policy was created. When a policy has more than one version, this field contains the date
                *          and time when the most recent policy version was created.</p>
                */
            UpdateDate?: Date;
            /**
                * <p>A list of tags that are attached to the instance profile. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace Policy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Policy) => any;
    }
    /**
        * <p>Contains the response to a successful <a>CreatePolicy</a> request.
        *     </p>
        */
    export interface CreatePolicyResponse {
            /**
                * <p>A structure containing details about the new policy.</p>
                */
            Policy?: Policy;
    }
    export namespace CreatePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePolicyResponse) => any;
    }
    /**
        * <p>The request was rejected because the policy document was malformed. The error message
        *       describes the specific error.</p>
        */
    export class MalformedPolicyDocumentException extends __BaseException {
            readonly name: "MalformedPolicyDocumentException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MalformedPolicyDocumentException, __BaseException>);
    }
    export interface CreatePolicyVersionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM policy to which you want to add a new
                *             version.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicyArn: string | undefined;
            /**
                * <p>The JSON policy document that you want to use as the content for this new version of
                *             the policy.</p>
                *         <p>You must provide policies in JSON format in IAM. However, for CloudFormation
                *             templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to
                *             IAM.</p>
                *         <p>The maximum length of the policy document that you can pass in this operation,
                *             including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            PolicyDocument: string | undefined;
            /**
                * <p>Specifies whether to set this version as the policy's default version.</p>
                *         <p>When this parameter is <code>true</code>, the new policy version becomes the operative
                *             version. That is, it becomes the version that is in effect for the IAM users, groups,
                *             and roles that the policy is attached to.</p>
                *         <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            SetAsDefault?: boolean;
    }
    export namespace CreatePolicyVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePolicyVersionRequest) => any;
    }
    /**
        * <p>Contains information about a version of a managed policy.</p>
        *          <p>This data type is used as a response element in the <a>CreatePolicyVersion</a>, <a>GetPolicyVersion</a>, <a>ListPolicyVersions</a>, and <a>GetAccountAuthorizationDetails</a> operations. </p>
        *          <p>For more information about managed policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *             policies</a> in the <i>IAM User Guide</i>. </p>
        */
    export interface PolicyVersion {
            /**
                * <p>The policy document.</p>
                *          <p>The policy document is returned in the response to the <a>GetPolicyVersion</a> and <a>GetAccountAuthorizationDetails</a> operations. It is not returned in
                *          the response to the <a>CreatePolicyVersion</a> or <a>ListPolicyVersions</a> operations. </p>
                *          <p>The policy document returned in this structure is URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding
                *          method to convert the policy back to plain JSON text. For example, if you use Java, you can
                *          use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in
                *          the Java SDK. Other languages and SDKs provide similar functionality.</p>
                */
            Document?: string;
            /**
                * <p>The identifier for the policy version.</p>
                *          <p>Policy version identifiers always begin with <code>v</code> (always lowercase). When a
                *          policy is created, the first policy version is <code>v1</code>. </p>
                */
            VersionId?: string;
            /**
                * <p>Specifies whether the policy version is set as the policy's default version.</p>
                */
            IsDefaultVersion?: boolean;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the policy version was created.</p>
                */
            CreateDate?: Date;
    }
    export namespace PolicyVersion {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyVersion) => any;
    }
    /**
        * <p>Contains the response to a successful <a>CreatePolicyVersion</a> request.
        *     </p>
        */
    export interface CreatePolicyVersionResponse {
            /**
                * <p>A structure containing details about the new policy version.</p>
                */
            PolicyVersion?: PolicyVersion;
    }
    export namespace CreatePolicyVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreatePolicyVersionResponse) => any;
    }
    export interface CreateRoleRequest {
            /**
                * <p> The path to the role. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *                 Identifiers</a> in the <i>IAM User Guide</i>.</p>
                *         <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            Path?: string;
            /**
                * <p>The name of the role to create.</p>
                *         <p>IAM user, group, role, and policy names must be unique within the account. Names are
                *             not distinguished by case. For example, you cannot create resources named both
                *             "MyResource" and "myresource".</p>
                */
            RoleName: string | undefined;
            /**
                * <p>The trust relationship policy document that grants an entity permission to assume the
                *             role.</p>
                *         <p>In IAM, you must provide a JSON policy that has been converted to a string. However,
                *             for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML
                *             format. CloudFormation always converts a YAML policy to JSON format before submitting it to
                *             IAM.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                *         <p> Upon success, the response includes the same trust policy in JSON format.</p>
                */
            AssumeRolePolicyDocument: string | undefined;
            /**
                * <p>A description of the role.</p>
                */
            Description?: string;
            /**
                * <p>The maximum session duration (in seconds) that you want to set for the specified role.
                *             If you do not specify a value for this setting, the default value of one hour is
                *             applied. This setting can have a value from 1 hour to 12 hours.</p>
                *         <p>Anyone who assumes the role from the or API can use the <code>DurationSeconds</code>
                *             API parameter or the <code>duration-seconds</code> CLI parameter to request a longer
                *             session. The <code>MaxSessionDuration</code> setting determines the maximum duration
                *             that can be requested using the <code>DurationSeconds</code> parameter. If users don't
                *             specify a value for the <code>DurationSeconds</code> parameter, their security
                *             credentials are valid for one hour by default. This applies when you use the
                *                 <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI
                *             operations but does not apply when you use those operations to create a console URL. For
                *             more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM roles</a> in the <i>IAM User Guide</i>.</p>
                */
            MaxSessionDuration?: number;
            /**
                * <p>The ARN of the policy that is used to set the permissions boundary for the
                *             role.</p>
                */
            PermissionsBoundary?: string;
            /**
                * <p>A list of tags that you want to attach to the new role. Each tag consists of a key name and an associated value.
                *       For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *          <note>
                *             <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created.</p>
                *          </note>
                */
            Tags?: Tag[];
    }
    export namespace CreateRoleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRoleRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>CreateRole</a> request. </p>
        */
    export interface CreateRoleResponse {
            /**
                * <p>A structure containing details about the new role.</p>
                */
            Role: Role | undefined;
    }
    export namespace CreateRoleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRoleResponse) => any;
    }
    export interface CreateSAMLProviderRequest {
            /**
                * <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The
                *             document includes the issuer's name, expiration information, and keys that can be used
                *             to validate the SAML authentication response (assertions) that are received from the
                *             IdP. You must generate the metadata document using the identity management software that
                *             is used as your organization's IdP.</p>
                *         <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based
                *                 federation</a> in the <i>IAM User Guide</i>
                *         </p>
                */
            SAMLMetadataDocument: string | undefined;
            /**
                * <p>The name of the provider to create.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            Name: string | undefined;
            /**
                * <p>A list of tags that you want to attach to the new IAM SAML provider.
                *       Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *          <note>
                *             <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created.</p>
                *          </note>
                */
            Tags?: Tag[];
    }
    export namespace CreateSAMLProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSAMLProviderRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>CreateSAMLProvider</a> request.
        *     </p>
        */
    export interface CreateSAMLProviderResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the new SAML provider resource in IAM.</p>
                */
            SAMLProviderArn?: string;
            /**
                * <p>A list of tags that are attached to the new IAM SAML provider. The returned list of tags is sorted by tag key.
                *       For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace CreateSAMLProviderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateSAMLProviderResponse) => any;
    }
    export interface CreateServiceLinkedRoleRequest {
            /**
                * <p>The service principal for the Amazon Web Services service to which this role is attached. You use a
                *             string similar to a URL but without the http:// in front. For example:
                *                 <code>elasticbeanstalk.amazonaws.com</code>. </p>
                *         <p>Service principals are unique and case-sensitive. To find the exact service principal
                *             for your service-linked role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">Amazon Web Services services
                *                 that work with IAM</a> in the <i>IAM User Guide</i>. Look for
                *             the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that
                *             service.</p>
                */
            AWSServiceName: string | undefined;
            /**
                * <p>The description of the role.</p>
                */
            Description?: string;
            /**
                * <p></p>
                *         <p>A string that you provide, which is combined with the service-provided prefix to form
                *             the complete role name. If you make multiple requests for the same service, then you
                *             must supply a different <code>CustomSuffix</code> for each request. Otherwise the
                *             request fails with a duplicate role name error. For example, you could add
                *                 <code>-1</code> or <code>-debug</code> to the suffix.</p>
                *         <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide
                *             an optional suffix and the operation fails, try the operation again without the
                *             suffix.</p>
                */
            CustomSuffix?: string;
    }
    export namespace CreateServiceLinkedRoleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateServiceLinkedRoleRequest) => any;
    }
    export interface CreateServiceLinkedRoleResponse {
            /**
                * <p>A <a>Role</a> object that contains details about the newly created
                *             role.</p>
                */
            Role?: Role;
    }
    export namespace CreateServiceLinkedRoleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateServiceLinkedRoleResponse) => any;
    }
    export interface CreateServiceSpecificCredentialRequest {
            /**
                * <p>The name of the IAM user that is to be associated with the credentials. The new
                *             service-specific credentials have the same permissions as the associated user except
                *             that they can be used only to access the specified service.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The name of the Amazon Web Services service that is to be associated with the credentials. The
                *             service you specify here is the only service that can be accessed using these
                *             credentials.</p>
                */
            ServiceName: string | undefined;
    }
    export namespace CreateServiceSpecificCredentialRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateServiceSpecificCredentialRequest) => any;
    }
    /**
        * <p>Contains the details of a service-specific credential.</p>
        */
    export interface ServiceSpecificCredential {
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the service-specific credential were created.</p>
                */
            CreateDate: Date | undefined;
            /**
                * <p>The name of the service associated with the service-specific credential.</p>
                */
            ServiceName: string | undefined;
            /**
                * <p>The generated user name for the service-specific credential. This value is generated by
                *          combining the IAM user's name combined with the ID number of the Amazon Web Services account, as in
                *             <code>jane-at-123456789012</code>, for example. This value cannot be configured by the
                *          user.</p>
                */
            ServiceUserName: string | undefined;
            /**
                * <p>The generated password for the service-specific credential.</p>
                */
            ServicePassword: string | undefined;
            /**
                * <p>The unique identifier for the service-specific credential.</p>
                */
            ServiceSpecificCredentialId: string | undefined;
            /**
                * <p>The name of the IAM user associated with the service-specific credential.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The status of the service-specific credential. <code>Active</code> means that the key is
                *          valid for API calls, while <code>Inactive</code> means it is not.</p>
                */
            Status: StatusType | string | undefined;
    }
    export namespace ServiceSpecificCredential {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceSpecificCredential) => any;
    }
    export interface CreateServiceSpecificCredentialResponse {
            /**
                * <p>A structure that contains information about the newly created service-specific
                *             credential.</p>
                *         <important>
                *             <p>This is the only time that the password for this credential set is available. It
                *                 cannot be recovered later. Instead, you must reset the password with <a>ResetServiceSpecificCredential</a>.</p>
                *         </important>
                */
            ServiceSpecificCredential?: ServiceSpecificCredential;
    }
    export namespace CreateServiceSpecificCredentialResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateServiceSpecificCredentialResponse) => any;
    }
    /**
        * <p>The specified service does not support service-specific credentials.</p>
        */
    export class ServiceNotSupportedException extends __BaseException {
            readonly name: "ServiceNotSupportedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceNotSupportedException, __BaseException>);
    }
    export interface CreateUserRequest {
            /**
                * <p> The path for the user name. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *                 identifiers</a> in the <i>IAM User Guide</i>.</p>
                *         <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            Path?: string;
            /**
                * <p>The name of the user to create.</p>
                *         <p>IAM user, group, role, and policy names must be unique within the account. Names are
                *             not distinguished by case. For example, you cannot create resources named both
                *             "MyResource" and "myresource".</p>
                */
            UserName: string | undefined;
            /**
                * <p>The ARN of the policy that is used to set the permissions boundary for the
                *             user.</p>
                */
            PermissionsBoundary?: string;
            /**
                * <p>A list of tags that you want to attach to the new user. Each tag consists of a key name and an associated value.
                *       For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *          <note>
                *             <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created.</p>
                *          </note>
                */
            Tags?: Tag[];
    }
    export namespace CreateUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserRequest) => any;
    }
    /**
        * <p>Contains information about an IAM user entity.</p>
        *          <p>This data type is used as a response element in the following operations:</p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a>CreateUser</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>GetUser</a>
        *                </p>
        *             </li>
        *             <li>
        *                <p>
        *                   <a>ListUsers</a>
        *                </p>
        *             </li>
        *          </ul>
        */
    export interface User {
            /**
                * <p>The path to the user. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *             <i>IAM User Guide</i>.</p>
                *          <p>The ARN of the policy used to set the permissions boundary for the user.</p>
                */
            Path: string | undefined;
            /**
                * <p>The friendly name identifying the user.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The stable and unique string identifying the user. For more information about IDs, see
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *             identifiers</a> in the <i>IAM User Guide</i>.</p>
                */
            UserId: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) that identifies the user. For more information about ARNs
                *          and how to use ARNs in policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the
                *             <i>IAM User Guide</i>. </p>
                */
            Arn: string | undefined;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the user was created.</p>
                */
            CreateDate: Date | undefined;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the user's password was last used to sign in to an Amazon Web Services website.
                *          For a list of Amazon Web Services websites that capture a user's last sign-in time, see the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Credential
                *             reports</a> topic in the <i>IAM User Guide</i>. If a password is
                *          used more than once in a five-minute span, only the first use is returned in this field. If
                *          the field is null (no value), then it indicates that they never signed in with a password.
                *          This can be because:</p>
                *          <ul>
                *             <li>
                *                <p>The user never had a password.</p>
                *             </li>
                *             <li>
                *                <p>A password exists but has not been used since IAM started tracking this
                *                information on October 20, 2014.</p>
                *             </li>
                *          </ul>
                *          <p>A null value does not mean that the user <i>never</i> had a password.
                *          Also, if the user does not currently have a password but had one in the past, then this
                *          field contains the date and time the most recent password was used.</p>
                *          <p>This value is returned only in the <a>GetUser</a> and <a>ListUsers</a> operations. </p>
                */
            PasswordLastUsed?: Date;
            /**
                * <p>For more information about permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM
                *             identities </a> in the <i>IAM User Guide</i>.</p>
                */
            PermissionsBoundary?: AttachedPermissionsBoundary;
            /**
                * <p>A list of tags that are associated with the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace User {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: User) => any;
    }
    /**
        * <p>Contains the response to a successful <a>CreateUser</a> request. </p>
        */
    export interface CreateUserResponse {
            /**
                * <p>A structure with details about the new IAM user.</p>
                */
            User?: User;
    }
    export namespace CreateUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateUserResponse) => any;
    }
    export interface CreateVirtualMFADeviceRequest {
            /**
                * <p> The path for the virtual MFA device. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *                 identifiers</a> in the <i>IAM User Guide</i>.</p>
                *         <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            Path?: string;
            /**
                * <p>The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA
                *             device.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            VirtualMFADeviceName: string | undefined;
            /**
                * <p>A list of tags that you want to attach to the new IAM virtual MFA device.
                *       Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *          <note>
                *             <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created.</p>
                *          </note>
                */
            Tags?: Tag[];
    }
    export namespace CreateVirtualMFADeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVirtualMFADeviceRequest) => any;
    }
    /**
        * <p>Contains information about a virtual MFA device.</p>
        */
    export interface VirtualMFADevice {
            /**
                * <p>The serial number associated with <code>VirtualMFADevice</code>.</p>
                */
            SerialNumber: string | undefined;
            /**
                * <p> The base32 seed defined as specified in <a href="https://tools.ietf.org/html/rfc3548.txt">RFC3548</a>. The <code>Base32StringSeed</code> is base64-encoded. </p>
                */
            Base32StringSeed?: Uint8Array;
            /**
                * <p> A QR code PNG image that encodes
                *             <code>otpauth://totp/$virtualMFADeviceName@$AccountName?secret=$Base32String</code>
                *          where <code>$virtualMFADeviceName</code> is one of the create call arguments.
                *             <code>AccountName</code> is the user name if set (otherwise, the account ID otherwise),
                *          and <code>Base32String</code> is the seed in base32 format. The <code>Base32String</code>
                *          value is base64-encoded. </p>
                */
            QRCodePNG?: Uint8Array;
            /**
                * <p>The IAM user associated with this virtual MFA device.</p>
                */
            User?: User;
            /**
                * <p>The date and time on which the virtual MFA device was enabled.</p>
                */
            EnableDate?: Date;
            /**
                * <p>A list of tags that are attached to the virtual MFA device. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace VirtualMFADevice {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: VirtualMFADevice) => any;
    }
    /**
        * <p>Contains the response to a successful <a>CreateVirtualMFADevice</a> request.
        *     </p>
        */
    export interface CreateVirtualMFADeviceResponse {
            /**
                * <p>A structure containing details about the new virtual MFA device.</p>
                */
            VirtualMFADevice: VirtualMFADevice | undefined;
    }
    export namespace CreateVirtualMFADeviceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateVirtualMFADeviceResponse) => any;
    }
    export interface DeactivateMFADeviceRequest {
            /**
                * <p>The name of the user whose MFA device you want to deactivate.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices,
                *             the serial number is the device ARN.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of upper and lowercase alphanumeric characters with no spaces. You can also include any of the
                *     following characters: =,.@:/-</p>
                */
            SerialNumber: string | undefined;
    }
    export namespace DeactivateMFADeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeactivateMFADeviceRequest) => any;
    }
    export interface DeleteAccessKeyRequest {
            /**
                * <p>The name of the user whose access key pair you want to delete.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
            /**
                * <p>The access key ID for the access key ID and secret access key you want to
                *             delete.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can
                *     consist of any upper or lowercased letter or digit.</p>
                */
            AccessKeyId: string | undefined;
    }
    export namespace DeleteAccessKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAccessKeyRequest) => any;
    }
    export interface DeleteAccountAliasRequest {
            /**
                * <p>The name of the account alias to delete.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of
                *     lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have
                *     two dashes in a row.</p>
                */
            AccountAlias: string | undefined;
    }
    export namespace DeleteAccountAliasRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteAccountAliasRequest) => any;
    }
    /**
        * <p>The request was rejected because it attempted to delete a resource that has attached
        *       subordinate entities. The error message describes these entities.</p>
        */
    export class DeleteConflictException extends __BaseException {
            readonly name: "DeleteConflictException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DeleteConflictException, __BaseException>);
    }
    export interface DeleteGroupRequest {
            /**
                * <p>The name of the IAM group to delete.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            GroupName: string | undefined;
    }
    export namespace DeleteGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGroupRequest) => any;
    }
    export interface DeleteGroupPolicyRequest {
            /**
                * <p>The name (friendly name, not ARN) identifying the group that the policy is embedded
                *             in.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The name identifying the policy document to delete.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            PolicyName: string | undefined;
    }
    export namespace DeleteGroupPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteGroupPolicyRequest) => any;
    }
    export interface DeleteInstanceProfileRequest {
            /**
                * <p>The name of the instance profile to delete.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            InstanceProfileName: string | undefined;
    }
    export namespace DeleteInstanceProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteInstanceProfileRequest) => any;
    }
    export interface DeleteLoginProfileRequest {
            /**
                * <p>The name of the user whose password you want to delete.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
    }
    export namespace DeleteLoginProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLoginProfileRequest) => any;
    }
    export interface DeleteOpenIDConnectProviderRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM OpenID Connect provider resource object to
                *             delete. You can get a list of OpenID Connect provider resource ARNs by using the <a>ListOpenIDConnectProviders</a> operation.</p>
                */
            OpenIDConnectProviderArn: string | undefined;
    }
    export namespace DeleteOpenIDConnectProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteOpenIDConnectProviderRequest) => any;
    }
    export interface DeletePolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM policy you want to delete.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicyArn: string | undefined;
    }
    export namespace DeletePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePolicyRequest) => any;
    }
    export interface DeletePolicyVersionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM policy from which you want to delete a
                *             version.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicyArn: string | undefined;
            /**
                * <p>The policy version to delete.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that
                *     consists of the lowercase letter 'v' followed by one or two digits, and optionally
                *     followed by a period '.' and a string of letters and digits.</p>
                *         <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            VersionId: string | undefined;
    }
    export namespace DeletePolicyVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletePolicyVersionRequest) => any;
    }
    export interface DeleteRoleRequest {
            /**
                * <p>The name of the role to delete.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
    }
    export namespace DeleteRoleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRoleRequest) => any;
    }
    export interface DeleteRolePermissionsBoundaryRequest {
            /**
                * <p>The name (friendly name, not ARN) of the IAM role from which you want to remove the
                *             permissions boundary.</p>
                */
            RoleName: string | undefined;
    }
    export namespace DeleteRolePermissionsBoundaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRolePermissionsBoundaryRequest) => any;
    }
    export interface DeleteRolePolicyRequest {
            /**
                * <p>The name (friendly name, not ARN) identifying the role that the policy is embedded
                *             in.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
            /**
                * <p>The name of the inline policy to delete from the specified IAM role.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            PolicyName: string | undefined;
    }
    export namespace DeleteRolePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRolePolicyRequest) => any;
    }
    export interface DeleteSAMLProviderRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the SAML provider to delete.</p>
                */
            SAMLProviderArn: string | undefined;
    }
    export namespace DeleteSAMLProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSAMLProviderRequest) => any;
    }
    export interface DeleteServerCertificateRequest {
            /**
                * <p>The name of the server certificate you want to delete.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            ServerCertificateName: string | undefined;
    }
    export namespace DeleteServerCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteServerCertificateRequest) => any;
    }
    export interface DeleteServiceLinkedRoleRequest {
            /**
                * <p>The name of the service-linked role to be deleted.</p>
                */
            RoleName: string | undefined;
    }
    export namespace DeleteServiceLinkedRoleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteServiceLinkedRoleRequest) => any;
    }
    export interface DeleteServiceLinkedRoleResponse {
            /**
                * <p>The deletion task identifier that you can use to check the status of the deletion.
                *             This identifier is returned in the format
                *                 <code>task/aws-service-role/<service-principal-name>/<role-name>/<task-uuid></code>.</p>
                */
            DeletionTaskId: string | undefined;
    }
    export namespace DeleteServiceLinkedRoleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteServiceLinkedRoleResponse) => any;
    }
    export interface DeleteServiceSpecificCredentialRequest {
            /**
                * <p>The name of the IAM user associated with the service-specific credential. If this
                *             value is not specified, then the operation assumes the user whose credentials are used
                *             to call the operation.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
            /**
                * <p>The unique identifier of the service-specific credential. You can get this value by
                *             calling <a>ListServiceSpecificCredentials</a>.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can
                *     consist of any upper or lowercased letter or digit.</p>
                */
            ServiceSpecificCredentialId: string | undefined;
    }
    export namespace DeleteServiceSpecificCredentialRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteServiceSpecificCredentialRequest) => any;
    }
    export interface DeleteSigningCertificateRequest {
            /**
                * <p>The name of the user the signing certificate belongs to.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
            /**
                * <p>The ID of the signing certificate to delete.</p>
                *         <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of
                *             characters that can be upper- or lower-cased letters or digits.</p>
                */
            CertificateId: string | undefined;
    }
    export namespace DeleteSigningCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSigningCertificateRequest) => any;
    }
    export interface DeleteSSHPublicKeyRequest {
            /**
                * <p>The name of the IAM user associated with the SSH public key.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The unique identifier for the SSH public key.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can
                *     consist of any upper or lowercased letter or digit.</p>
                */
            SSHPublicKeyId: string | undefined;
    }
    export namespace DeleteSSHPublicKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteSSHPublicKeyRequest) => any;
    }
    export interface DeleteUserRequest {
            /**
                * <p>The name of the user to delete.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
    }
    export namespace DeleteUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserRequest) => any;
    }
    export interface DeleteUserPermissionsBoundaryRequest {
            /**
                * <p>The name (friendly name, not ARN) of the IAM user from which you want to remove the
                *             permissions boundary.</p>
                */
            UserName: string | undefined;
    }
    export namespace DeleteUserPermissionsBoundaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserPermissionsBoundaryRequest) => any;
    }
    export interface DeleteUserPolicyRequest {
            /**
                * <p>The name (friendly name, not ARN) identifying the user that the policy is embedded
                *             in.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The name identifying the policy document to delete.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            PolicyName: string | undefined;
    }
    export namespace DeleteUserPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteUserPolicyRequest) => any;
    }
    export interface DeleteVirtualMFADeviceRequest {
            /**
                * <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices,
                *             the serial number is the same as the ARN.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of upper and lowercase alphanumeric characters with no spaces. You can also include any of the
                *     following characters: =,.@:/-</p>
                */
            SerialNumber: string | undefined;
    }
    export namespace DeleteVirtualMFADeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteVirtualMFADeviceRequest) => any;
    }
    export interface DetachGroupPolicyRequest {
            /**
                * <p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicyArn: string | undefined;
    }
    export namespace DetachGroupPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachGroupPolicyRequest) => any;
    }
    export interface DetachRolePolicyRequest {
            /**
                * <p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicyArn: string | undefined;
    }
    export namespace DetachRolePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachRolePolicyRequest) => any;
    }
    export interface DetachUserPolicyRequest {
            /**
                * <p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicyArn: string | undefined;
    }
    export namespace DetachUserPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DetachUserPolicyRequest) => any;
    }
    export interface EnableMFADeviceRequest {
            /**
                * <p>The name of the IAM user for whom you want to enable the MFA device.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices,
                *             the serial number is the device ARN.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of upper and lowercase alphanumeric characters with no spaces. You can also include any of the
                *     following characters: =,.@:/-</p>
                */
            SerialNumber: string | undefined;
            /**
                * <p>An authentication code emitted by the device. </p>
                *         <p>The format for this parameter is a string of six digits.</p>
                *         <important>
                *             <p>Submit your request immediately after generating the authentication codes. If you
                *                 generate the codes and then wait too long to submit the request, the MFA device
                *                 successfully associates with the user but the MFA device becomes out of sync. This
                *                 happens because time-based one-time passwords (TOTP) expire after a short period of
                *                 time. If this happens, you can <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the
                *                 device</a>.</p>
                *         </important>
                */
            AuthenticationCode1: string | undefined;
            /**
                * <p>A subsequent authentication code emitted by the device.</p>
                *         <p>The format for this parameter is a string of six digits.</p>
                *         <important>
                *             <p>Submit your request immediately after generating the authentication codes. If you
                *                 generate the codes and then wait too long to submit the request, the MFA device
                *                 successfully associates with the user but the MFA device becomes out of sync. This
                *                 happens because time-based one-time passwords (TOTP) expire after a short period of
                *                 time. If this happens, you can <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the
                *                 device</a>.</p>
                *         </important>
                */
            AuthenticationCode2: string | undefined;
    }
    export namespace EnableMFADeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EnableMFADeviceRequest) => any;
    }
    /**
        * <p>The request was rejected because the authentication code was not recognized. The error
        *       message describes the specific error.</p>
        */
    export class InvalidAuthenticationCodeException extends __BaseException {
            readonly name: "InvalidAuthenticationCodeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidAuthenticationCodeException, __BaseException>);
    }
    export enum ReportStateType {
            COMPLETE = "COMPLETE",
            INPROGRESS = "INPROGRESS",
            STARTED = "STARTED"
    }
    /**
        * <p>Contains the response to a successful <a>GenerateCredentialReport</a>
        *       request. </p>
        */
    export interface GenerateCredentialReportResponse {
            /**
                * <p>Information about the state of the credential report.</p>
                */
            State?: ReportStateType | string;
            /**
                * <p>Information about the credential report.</p>
                */
            Description?: string;
    }
    export namespace GenerateCredentialReportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateCredentialReportResponse) => any;
    }
    export interface GenerateOrganizationsAccessReportRequest {
            /**
                * <p>The path of the Organizations entity (root, OU, or account). You can build an entity path
                *             using the known structure of your organization. For example, assume that your account ID
                *             is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The
                *             organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is
                *                 <code>o-a1b2c3d4e5</code>. Your entity path is
                *                 <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.</p>
                */
            EntityPath: string | undefined;
            /**
                * <p>The identifier of the Organizations service control policy (SCP). This parameter is
                *             optional.</p>
                *         <p>This ID is used to generate information about when an account principal that is
                *             limited by the SCP attempted to access an Amazon Web Services service.</p>
                */
            OrganizationsPolicyId?: string;
    }
    export namespace GenerateOrganizationsAccessReportRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateOrganizationsAccessReportRequest) => any;
    }
    export interface GenerateOrganizationsAccessReportResponse {
            /**
                * <p>The job identifier that you can use in the <a>GetOrganizationsAccessReport</a> operation.</p>
                */
            JobId?: string;
    }
    export namespace GenerateOrganizationsAccessReportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateOrganizationsAccessReportResponse) => any;
    }
    /**
        * <p>The request failed because the maximum number of concurrent requests for this account are
        *       already running.</p>
        */
    export class ReportGenerationLimitExceededException extends __BaseException {
            readonly name: "ReportGenerationLimitExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ReportGenerationLimitExceededException, __BaseException>);
    }
    export interface GenerateServiceLastAccessedDetailsRequest {
            /**
                * <p>The ARN of the IAM resource (user, group, role, or managed policy) used to generate
                *             information about when the resource was last used in an attempt to access an Amazon Web Services
                *             service.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The level of detail that you want to generate. You can specify whether you want to
                *             generate information about the last attempt to access services or actions. If you
                *             specify service-level granularity, this operation generates only service data. If you
                *             specify action-level granularity, it generates service and action data. If you don't
                *             include this optional parameter, the operation generates service data.</p>
                */
            Granularity?: AccessAdvisorUsageGranularityType | string;
    }
    export namespace GenerateServiceLastAccessedDetailsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateServiceLastAccessedDetailsRequest) => any;
    }
    export interface GenerateServiceLastAccessedDetailsResponse {
            /**
                * <p>The <code>JobId</code> that you can use in the <a>GetServiceLastAccessedDetails</a> or <a>GetServiceLastAccessedDetailsWithEntities</a> operations. The
                *                 <code>JobId</code> returned by <code>GenerateServiceLastAccessedDetail</code> must
                *             be used by the same role within a session, or by the same user when used to call
                *                 <code>GetServiceLastAccessedDetail</code>.</p>
                */
            JobId?: string;
    }
    export namespace GenerateServiceLastAccessedDetailsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GenerateServiceLastAccessedDetailsResponse) => any;
    }
    export interface GetAccessKeyLastUsedRequest {
            /**
                * <p>The identifier of an access key.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can
                *     consist of any upper or lowercased letter or digit.</p>
                */
            AccessKeyId: string | undefined;
    }
    export namespace GetAccessKeyLastUsedRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccessKeyLastUsedRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetAccessKeyLastUsed</a> request.
        *       It is also returned as a member of the <a>AccessKeyMetaData</a> structure returned
        *       by the <a>ListAccessKeys</a> action.</p>
        */
    export interface GetAccessKeyLastUsedResponse {
            /**
                * <p>The name of the IAM user that owns this access key.</p>
                *         <p></p>
                */
            UserName?: string;
            /**
                * <p>Contains information about the last time the access key was used.</p>
                */
            AccessKeyLastUsed?: AccessKeyLastUsed;
    }
    export namespace GetAccessKeyLastUsedResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccessKeyLastUsedResponse) => any;
    }
    export enum EntityType {
            AWSManagedPolicy = "AWSManagedPolicy",
            Group = "Group",
            LocalManagedPolicy = "LocalManagedPolicy",
            Role = "Role",
            User = "User"
    }
    export interface GetAccountAuthorizationDetailsRequest {
            /**
                * <p>A list of entity types used to filter the results. Only the entities that match the
                *             types you specify are included in the output. Use the value
                *                 <code>LocalManagedPolicy</code> to include customer managed policies.</p>
                *         <p>The format for this parameter is a comma-separated (if more than one) list of strings.
                *             Each string value in the list must be one of the valid values listed below.</p>
                */
            Filter?: (EntityType | string)[];
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
    }
    export namespace GetAccountAuthorizationDetailsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountAuthorizationDetailsRequest) => any;
    }
    /**
        * <p>Contains information about an IAM policy, including the policy document.</p>
        *          <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> operation.</p>
        */
    export interface PolicyDetail {
            /**
                * <p>The name of the policy.</p>
                */
            PolicyName?: string;
            /**
                * <p>The policy document.</p>
                */
            PolicyDocument?: string;
    }
    export namespace PolicyDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyDetail) => any;
    }
    /**
        * <p>Contains information about an IAM group, including all of the group's policies.</p>
        *          <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> operation.</p>
        */
    export interface GroupDetail {
            /**
                * <p>The path to the group. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *             <i>IAM User Guide</i>.</p>
                */
            Path?: string;
            /**
                * <p>The friendly name that identifies the group.</p>
                */
            GroupName?: string;
            /**
                * <p>The stable and unique string identifying the group. For more information about IDs, see
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *             identifiers</a> in the <i>IAM User Guide</i>.</p>
                */
            GroupId?: string;
            /**
                * <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
                *          <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in
                *          the <i>Amazon Web Services General Reference</i>. </p>
                */
            Arn?: string;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the group was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>A list of the inline policies embedded in the group.</p>
                */
            GroupPolicyList?: PolicyDetail[];
            /**
                * <p>A list of the managed policies attached to the group.</p>
                */
            AttachedManagedPolicies?: AttachedPolicy[];
    }
    export namespace GroupDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GroupDetail) => any;
    }
    /**
        * <p>Contains information about a managed policy, including the policy's ARN, versions, and
        *          the number of principal entities (users, groups, and roles) that the policy is attached
        *          to.</p>
        *          <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> operation.</p>
        *          <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *             policies</a> in the <i>IAM User Guide</i>. </p>
        */
    export interface ManagedPolicyDetail {
            /**
                * <p>The friendly name (not ARN) identifying the policy.</p>
                */
            PolicyName?: string;
            /**
                * <p>The stable and unique string identifying the policy.</p>
                *          <p>For more information about IDs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *             <i>IAM User Guide</i>.</p>
                */
            PolicyId?: string;
            /**
                * <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
                *          <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in
                *          the <i>Amazon Web Services General Reference</i>. </p>
                */
            Arn?: string;
            /**
                * <p>The path to the policy.</p>
                *          <p>For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *             <i>IAM User Guide</i>.</p>
                */
            Path?: string;
            /**
                * <p>The identifier for the version of the policy that is set as the default (operative)
                *          version.</p>
                *          <p>For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed
                *             policies</a> in the <i>IAM User Guide</i>. </p>
                */
            DefaultVersionId?: string;
            /**
                * <p>The number of principal entities (users, groups, and roles) that the policy is attached
                *          to.</p>
                */
            AttachmentCount?: number;
            /**
                * <p>The number of entities (users and roles) for which the policy is used as the permissions
                *          boundary. </p>
                *          <p>For more information about permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM
                *             identities </a> in the <i>IAM User Guide</i>.</p>
                */
            PermissionsBoundaryUsageCount?: number;
            /**
                * <p>Specifies whether the policy can be attached to an IAM user, group, or role.</p>
                */
            IsAttachable?: boolean;
            /**
                * <p>A friendly description of the policy.</p>
                */
            Description?: string;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the policy was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the policy was last updated.</p>
                *          <p>When a policy has only one version, this field contains the date and time when the
                *          policy was created. When a policy has more than one version, this field contains the date
                *          and time when the most recent policy version was created.</p>
                */
            UpdateDate?: Date;
            /**
                * <p>A list containing information about the versions of the policy.</p>
                */
            PolicyVersionList?: PolicyVersion[];
    }
    export namespace ManagedPolicyDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ManagedPolicyDetail) => any;
    }
    /**
        * <p>Contains information about an IAM role, including all of the role's policies.</p>
        *          <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> operation.</p>
        */
    export interface RoleDetail {
            /**
                * <p>The path to the role. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *             <i>IAM User Guide</i>.</p>
                */
            Path?: string;
            /**
                * <p>The friendly name that identifies the role.</p>
                */
            RoleName?: string;
            /**
                * <p>The stable and unique string identifying the role. For more information about IDs, see
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *             identifiers</a> in the <i>IAM User Guide</i>.</p>
                */
            RoleId?: string;
            /**
                * <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
                *          <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in
                *          the <i>Amazon Web Services General Reference</i>. </p>
                */
            Arn?: string;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the role was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The trust policy that grants permission to assume the role.</p>
                */
            AssumeRolePolicyDocument?: string;
            /**
                * <p>A list of instance profiles that contain this role.</p>
                */
            InstanceProfileList?: InstanceProfile[];
            /**
                * <p>A list of inline policies embedded in the role. These policies are the role's access
                *          (permissions) policies.</p>
                */
            RolePolicyList?: PolicyDetail[];
            /**
                * <p>A list of managed policies attached to the role. These policies are the role's access
                *          (permissions) policies.</p>
                */
            AttachedManagedPolicies?: AttachedPolicy[];
            /**
                * <p>The ARN of the policy used to set the permissions boundary for the role.</p>
                *          <p>For more information about permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM
                *             identities </a> in the <i>IAM User Guide</i>.</p>
                */
            PermissionsBoundary?: AttachedPermissionsBoundary;
            /**
                * <p>A list of tags that are attached to the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Contains information about the last time that an IAM role was used. This includes the
                *          date and time and the Region in which the role was last used. Activity is only reported for
                *          the trailing 400 days. This period can be shorter if your Region began supporting these
                *          features within the last year. The role might have been used more than 400 days ago. For
                *          more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions where data is tracked</a> in the <i>IAM User
                *          Guide</i>.</p>
                */
            RoleLastUsed?: RoleLastUsed;
    }
    export namespace RoleDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RoleDetail) => any;
    }
    /**
        * <p>Contains information about an IAM user, including all the user's policies and all the
        *          IAM groups the user is in.</p>
        *          <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> operation.</p>
        */
    export interface UserDetail {
            /**
                * <p>The path to the user. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *             <i>IAM User Guide</i>.</p>
                */
            Path?: string;
            /**
                * <p>The friendly name identifying the user.</p>
                */
            UserName?: string;
            /**
                * <p>The stable and unique string identifying the user. For more information about IDs, see
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *             identifiers</a> in the <i>IAM User Guide</i>.</p>
                */
            UserId?: string;
            /**
                * <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
                *          <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in
                *          the <i>Amazon Web Services General Reference</i>. </p>
                */
            Arn?: string;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the user was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>A list of the inline policies embedded in the user.</p>
                */
            UserPolicyList?: PolicyDetail[];
            /**
                * <p>A list of IAM groups that the user is in.</p>
                */
            GroupList?: string[];
            /**
                * <p>A list of the managed policies attached to the user.</p>
                */
            AttachedManagedPolicies?: AttachedPolicy[];
            /**
                * <p>The ARN of the policy used to set the permissions boundary for the user.</p>
                *          <p>For more information about permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM
                *             identities </a> in the <i>IAM User Guide</i>.</p>
                */
            PermissionsBoundary?: AttachedPermissionsBoundary;
            /**
                * <p>A list of tags that are associated with the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace UserDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UserDetail) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetAccountAuthorizationDetails</a>
        *       request. </p>
        */
    export interface GetAccountAuthorizationDetailsResponse {
            /**
                * <p>A list containing information about IAM users.</p>
                */
            UserDetailList?: UserDetail[];
            /**
                * <p>A list containing information about IAM groups.</p>
                */
            GroupDetailList?: GroupDetail[];
            /**
                * <p>A list containing information about IAM roles.</p>
                */
            RoleDetailList?: RoleDetail[];
            /**
                * <p>A list containing information about managed policies.</p>
                */
            Policies?: ManagedPolicyDetail[];
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace GetAccountAuthorizationDetailsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountAuthorizationDetailsResponse) => any;
    }
    /**
        * <p>Contains information about the account password policy.</p>
        *          <p> This data type is used as a response element in the <a>GetAccountPasswordPolicy</a> operation. </p>
        */
    export interface PasswordPolicy {
            /**
                * <p>Minimum length to require for IAM user passwords.</p>
                */
            MinimumPasswordLength?: number;
            /**
                * <p>Specifies whether IAM user passwords must contain at least one of the following
                *          symbols:</p>
                *          <p>! @ # $ % ^ & * ( ) _ + - = [ ] { } | '</p>
                */
            RequireSymbols?: boolean;
            /**
                * <p>Specifies whether IAM user passwords must contain at least one numeric character (0 to
                *          9).</p>
                */
            RequireNumbers?: boolean;
            /**
                * <p>Specifies whether IAM user passwords must contain at least one uppercase character (A
                *          to Z).</p>
                */
            RequireUppercaseCharacters?: boolean;
            /**
                * <p>Specifies whether IAM user passwords must contain at least one lowercase character (a
                *          to z).</p>
                */
            RequireLowercaseCharacters?: boolean;
            /**
                * <p>Specifies whether IAM users are allowed to change their own password. Gives IAM
                *          users permissions to <code>iam:ChangePassword</code> for only their user and to the
                *             <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a
                *          permissions policy to each user, rather the permissions are applied at the account-level
                *          for all users by IAM.</p>
                */
            AllowUsersToChangePassword?: boolean;
            /**
                * <p>Indicates whether passwords in the account expire. Returns true if
                *             <code>MaxPasswordAge</code> contains a value greater than 0. Returns false if
                *          MaxPasswordAge is 0 or not present.</p>
                */
            ExpirePasswords?: boolean;
            /**
                * <p>The number of days that an IAM user password is valid.</p>
                */
            MaxPasswordAge?: number;
            /**
                * <p>Specifies the number of previous passwords that IAM users are prevented from
                *          reusing.</p>
                */
            PasswordReusePrevention?: number;
            /**
                * <p>Specifies whether IAM users are prevented from setting a new password via the
                *          Amazon Web Services Management Console after their password has expired. The IAM user cannot access the console until
                *          an administrator resets the password. IAM users with <code>iam:ChangePassword</code>
                *          permission and active access keys can reset their own expired console password using the
                *          CLI or API.</p>
                */
            HardExpiry?: boolean;
    }
    export namespace PasswordPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PasswordPolicy) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetAccountPasswordPolicy</a>
        *       request. </p>
        */
    export interface GetAccountPasswordPolicyResponse {
            /**
                * <p>A structure that contains details about the account's password policy.</p>
                */
            PasswordPolicy: PasswordPolicy | undefined;
    }
    export namespace GetAccountPasswordPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountPasswordPolicyResponse) => any;
    }
    export type SummaryKeyType = "AccessKeysPerUserQuota" | "AccountAccessKeysPresent" | "AccountMFAEnabled" | "AccountSigningCertificatesPresent" | "AttachedPoliciesPerGroupQuota" | "AttachedPoliciesPerRoleQuota" | "AttachedPoliciesPerUserQuota" | "GlobalEndpointTokenVersion" | "GroupPolicySizeQuota" | "Groups" | "GroupsPerUserQuota" | "GroupsQuota" | "MFADevices" | "MFADevicesInUse" | "Policies" | "PoliciesQuota" | "PolicySizeQuota" | "PolicyVersionsInUse" | "PolicyVersionsInUseQuota" | "ServerCertificates" | "ServerCertificatesQuota" | "SigningCertificatesPerUserQuota" | "UserPolicySizeQuota" | "Users" | "UsersQuota" | "VersionsPerPolicyQuota";
    /**
        * <p>Contains the response to a successful <a>GetAccountSummary</a> request.
        *     </p>
        */
    export interface GetAccountSummaryResponse {
            /**
                * <p>A set of key–value pairs containing information about IAM entity usage and
                *             IAM quotas.</p>
                */
            SummaryMap?: Record<string, number>;
    }
    export namespace GetAccountSummaryResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetAccountSummaryResponse) => any;
    }
    export interface GetContextKeysForCustomPolicyRequest {
            /**
                * <p>A list of policies for which you want the list of context keys referenced in those
                *             policies. Each document is specified as a string containing the complete, valid JSON
                *             text of an IAM policy.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            PolicyInputList: string[] | undefined;
    }
    export namespace GetContextKeysForCustomPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContextKeysForCustomPolicyRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetContextKeysForPrincipalPolicy</a> or <a>GetContextKeysForCustomPolicy</a> request. </p>
        */
    export interface GetContextKeysForPolicyResponse {
            /**
                * <p>The list of context keys that are referenced in the input policies.</p>
                */
            ContextKeyNames?: string[];
    }
    export namespace GetContextKeysForPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContextKeysForPolicyResponse) => any;
    }
    export interface GetContextKeysForPrincipalPolicyRequest {
            /**
                * <p>The ARN of a user, group, or role whose policies contain the context keys that you
                *             want listed. If you specify a user, the list includes context keys that are found in all
                *             policies that are attached to the user. The list also includes all groups that the user
                *             is a member of. If you pick a group or a role, then it includes only those context keys
                *             that are found in policies attached to that entity. Note that all parameters are shown
                *             in unencoded form here for clarity, but must be URL encoded to be included as a part of
                *             a real HTML request.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicySourceArn: string | undefined;
            /**
                * <p>An optional list of additional policies for which you want the list of context keys
                *             that are referenced.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            PolicyInputList?: string[];
    }
    export namespace GetContextKeysForPrincipalPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetContextKeysForPrincipalPolicyRequest) => any;
    }
    /**
        * <p>The request was rejected because the most recent credential report has expired. To
        *       generate a new credential report, use <a>GenerateCredentialReport</a>. For more
        *       information about credential report expiration, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting credential reports</a> in the
        *         <i>IAM User Guide</i>.</p>
        */
    export class CredentialReportExpiredException extends __BaseException {
            readonly name: "CredentialReportExpiredException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CredentialReportExpiredException, __BaseException>);
    }
    /**
        * <p>The request was rejected because the credential report does not exist. To generate a
        *       credential report, use <a>GenerateCredentialReport</a>.</p>
        */
    export class CredentialReportNotPresentException extends __BaseException {
            readonly name: "CredentialReportNotPresentException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CredentialReportNotPresentException, __BaseException>);
    }
    /**
        * <p>The request was rejected because the credential report is still being generated.</p>
        */
    export class CredentialReportNotReadyException extends __BaseException {
            readonly name: "CredentialReportNotReadyException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<CredentialReportNotReadyException, __BaseException>);
    }
    export type ReportFormatType = "text/csv";
    /**
        * <p>Contains the response to a successful <a>GetCredentialReport</a> request.
        *     </p>
        */
    export interface GetCredentialReportResponse {
            /**
                * <p>Contains the credential report. The report is Base64-encoded.</p>
                */
            Content?: Uint8Array;
            /**
                * <p>The format (MIME type) of the credential report.</p>
                */
            ReportFormat?: ReportFormatType | string;
            /**
                * <p> The date and time when the credential report was created, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time format</a>.</p>
                */
            GeneratedTime?: Date;
    }
    export namespace GetCredentialReportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetCredentialReportResponse) => any;
    }
    export interface GetGroupRequest {
            /**
                * <p>The name of the group.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            GroupName: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace GetGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetGroup</a> request. </p>
        */
    export interface GetGroupResponse {
            /**
                * <p>A structure that contains details about the group.</p>
                */
            Group: Group | undefined;
            /**
                * <p>A list of users in the group.</p>
                */
            Users: User[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace GetGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupResponse) => any;
    }
    export interface GetGroupPolicyRequest {
            /**
                * <p>The name of the group the policy is associated with.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The name of the policy document to get.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            PolicyName: string | undefined;
    }
    export namespace GetGroupPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupPolicyRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetGroupPolicy</a> request.
        *     </p>
        */
    export interface GetGroupPolicyResponse {
            /**
                * <p>The group the policy is associated with.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The name of the policy.</p>
                */
            PolicyName: string | undefined;
            /**
                * <p>The policy document.</p>
                *
                *         <p>IAM stores policies in JSON format. However, resources that were created using CloudFormation
                *             templates can be formatted in YAML. CloudFormation always converts a YAML policy to JSON format
                *             before submitting it to IAM.</p>
                */
            PolicyDocument: string | undefined;
    }
    export namespace GetGroupPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetGroupPolicyResponse) => any;
    }
    export interface GetInstanceProfileRequest {
            /**
                * <p>The name of the instance profile to get information about.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            InstanceProfileName: string | undefined;
    }
    export namespace GetInstanceProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceProfileRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetInstanceProfile</a> request.
        *     </p>
        */
    export interface GetInstanceProfileResponse {
            /**
                * <p>A structure containing details about the instance profile.</p>
                */
            InstanceProfile: InstanceProfile | undefined;
    }
    export namespace GetInstanceProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetInstanceProfileResponse) => any;
    }
    export interface GetLoginProfileRequest {
            /**
                * <p>The name of the user whose login profile you want to retrieve.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
    }
    export namespace GetLoginProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoginProfileRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetLoginProfile</a> request.
        *     </p>
        */
    export interface GetLoginProfileResponse {
            /**
                * <p>A structure containing the user name and the profile creation date for the
                *             user.</p>
                */
            LoginProfile: LoginProfile | undefined;
    }
    export namespace GetLoginProfileResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLoginProfileResponse) => any;
    }
    export interface GetOpenIDConnectProviderRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the OIDC provider resource object in IAM to get
                *             information for. You can get a list of OIDC provider resource ARNs by using the <a>ListOpenIDConnectProviders</a> operation.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            OpenIDConnectProviderArn: string | undefined;
    }
    export namespace GetOpenIDConnectProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOpenIDConnectProviderRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetOpenIDConnectProvider</a>
        *       request. </p>
        */
    export interface GetOpenIDConnectProviderResponse {
            /**
                * <p>The URL that the IAM OIDC provider resource object is associated with. For more
                *             information, see <a>CreateOpenIDConnectProvider</a>.</p>
                */
            Url?: string;
            /**
                * <p>A list of client IDs (also known as audiences) that are associated with the specified
                *             IAM OIDC provider resource object. For more information, see <a>CreateOpenIDConnectProvider</a>.</p>
                */
            ClientIDList?: string[];
            /**
                * <p>A list of certificate thumbprints that are associated with the specified IAM OIDC
                *             provider resource object. For more information, see <a>CreateOpenIDConnectProvider</a>. </p>
                */
            ThumbprintList?: string[];
            /**
                * <p>The date and time when the IAM OIDC provider resource object was created in the
                *             Amazon Web Services account.</p>
                */
            CreateDate?: Date;
            /**
                * <p>A list of tags that are attached to the specified IAM OIDC provider. The returned list of tags is sorted by tag key.
                *       For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace GetOpenIDConnectProviderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOpenIDConnectProviderResponse) => any;
    }
    export enum SortKeyType {
            LAST_AUTHENTICATED_TIME_ASCENDING = "LAST_AUTHENTICATED_TIME_ASCENDING",
            LAST_AUTHENTICATED_TIME_DESCENDING = "LAST_AUTHENTICATED_TIME_DESCENDING",
            SERVICE_NAMESPACE_ASCENDING = "SERVICE_NAMESPACE_ASCENDING",
            SERVICE_NAMESPACE_DESCENDING = "SERVICE_NAMESPACE_DESCENDING"
    }
    export interface GetOrganizationsAccessReportRequest {
            /**
                * <p>The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.</p>
                */
            JobId: string | undefined;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>The key that is used to sort the results. If you choose the namespace key, the results
                *             are returned in alphabetical order. If you choose the time key, the results are sorted
                *             numerically by the date and time.</p>
                */
            SortKey?: SortKeyType | string;
    }
    export namespace GetOrganizationsAccessReportRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOrganizationsAccessReportRequest) => any;
    }
    /**
        * <p>Contains information about the reason that the operation failed.</p>
        *          <p>This data type is used as a response element in the <a>GetOrganizationsAccessReport</a>, <a>GetServiceLastAccessedDetails</a>, and <a>GetServiceLastAccessedDetailsWithEntities</a> operations.</p>
        */
    export interface ErrorDetails {
            /**
                * <p>Detailed information about the reason that the operation failed.</p>
                */
            Message: string | undefined;
            /**
                * <p>The error code associated with the operation failure.</p>
                */
            Code: string | undefined;
    }
    export namespace ErrorDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ErrorDetails) => any;
    }
    export type JobStatusType = "COMPLETED" | "FAILED" | "IN_PROGRESS";
    export interface GetOrganizationsAccessReportResponse {
            /**
                * <p>The status of the job.</p>
                */
            JobStatus: JobStatusType | string | undefined;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *                 format</a>, when the report job was created.</p>
                */
            JobCreationDate: Date | undefined;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *                 format</a>, when the generated report job was completed or failed.</p>
                *         <p>This field is null if the job is still in progress, as indicated by a job status value
                *             of <code>IN_PROGRESS</code>.</p>
                */
            JobCompletionDate?: Date;
            /**
                * <p>The number of services that the applicable SCPs allow account principals to
                *             access.</p>
                */
            NumberOfServicesAccessible?: number;
            /**
                * <p>The number of services that account principals are allowed but did not attempt to
                *             access.</p>
                */
            NumberOfServicesNotAccessed?: number;
            /**
                * <p>An object that contains details about the most recent attempt to access the
                *             service.</p>
                */
            AccessDetails?: AccessDetail[];
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
            /**
                * <p>Contains information about the reason that the operation failed.</p>
                *          <p>This data type is used as a response element in the <a>GetOrganizationsAccessReport</a>, <a>GetServiceLastAccessedDetails</a>, and <a>GetServiceLastAccessedDetailsWithEntities</a> operations.</p>
                */
            ErrorDetails?: ErrorDetails;
    }
    export namespace GetOrganizationsAccessReportResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetOrganizationsAccessReportResponse) => any;
    }
    export interface GetPolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the managed policy that you want information
                *             about.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicyArn: string | undefined;
    }
    export namespace GetPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPolicyRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetPolicy</a> request. </p>
        */
    export interface GetPolicyResponse {
            /**
                * <p>A structure containing details about the policy.</p>
                */
            Policy?: Policy;
    }
    export namespace GetPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPolicyResponse) => any;
    }
    export interface GetPolicyVersionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the managed policy that you want information
                *             about.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicyArn: string | undefined;
            /**
                * <p>Identifies the policy version to retrieve.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that
                *     consists of the lowercase letter 'v' followed by one or two digits, and optionally
                *     followed by a period '.' and a string of letters and digits.</p>
                */
            VersionId: string | undefined;
    }
    export namespace GetPolicyVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPolicyVersionRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetPolicyVersion</a> request.
        *     </p>
        */
    export interface GetPolicyVersionResponse {
            /**
                * <p>A structure containing details about the policy version.</p>
                */
            PolicyVersion?: PolicyVersion;
    }
    export namespace GetPolicyVersionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetPolicyVersionResponse) => any;
    }
    export interface GetRoleRequest {
            /**
                * <p>The name of the IAM role to get information about.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
    }
    export namespace GetRoleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRoleRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetRole</a> request. </p>
        */
    export interface GetRoleResponse {
            /**
                * <p>A structure containing details about the IAM role.</p>
                */
            Role: Role | undefined;
    }
    export namespace GetRoleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRoleResponse) => any;
    }
    export interface GetRolePolicyRequest {
            /**
                * <p>The name of the role associated with the policy.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
            /**
                * <p>The name of the policy document to get.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            PolicyName: string | undefined;
    }
    export namespace GetRolePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRolePolicyRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetRolePolicy</a> request.
        *     </p>
        */
    export interface GetRolePolicyResponse {
            /**
                * <p>The role the policy is associated with.</p>
                */
            RoleName: string | undefined;
            /**
                * <p>The name of the policy.</p>
                */
            PolicyName: string | undefined;
            /**
                * <p>The policy document.</p>
                *         <p>IAM stores policies in JSON format. However, resources that were created using CloudFormation
                *             templates can be formatted in YAML. CloudFormation always converts a YAML policy to JSON format
                *             before submitting it to IAM.</p>
                */
            PolicyDocument: string | undefined;
    }
    export namespace GetRolePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetRolePolicyResponse) => any;
    }
    export interface GetSAMLProviderRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the SAML provider resource object in IAM to get
                *             information about.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            SAMLProviderArn: string | undefined;
    }
    export namespace GetSAMLProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSAMLProviderRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetSAMLProvider</a> request.
        *     </p>
        */
    export interface GetSAMLProviderResponse {
            /**
                * <p>The XML metadata document that includes information about an identity provider.</p>
                */
            SAMLMetadataDocument?: string;
            /**
                * <p>The date and time when the SAML provider was created.</p>
                */
            CreateDate?: Date;
            /**
                * <p>The expiration date and time for the SAML provider.</p>
                */
            ValidUntil?: Date;
            /**
                * <p>A list of tags that are attached to the specified IAM SAML provider. The returned list of tags is sorted by tag key.
                *       For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace GetSAMLProviderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSAMLProviderResponse) => any;
    }
    export interface GetServerCertificateRequest {
            /**
                * <p>The name of the server certificate you want to retrieve information about.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            ServerCertificateName: string | undefined;
    }
    export namespace GetServerCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServerCertificateRequest) => any;
    }
    /**
        * <p>Contains information about a server certificate without its certificate body,
        *          certificate chain, and private key.</p>
        *          <p> This data type is used as a response element in the <a>UploadServerCertificate</a> and <a>ListServerCertificates</a>
        *          operations. </p>
        */
    export interface ServerCertificateMetadata {
            /**
                * <p> The path to the server certificate. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *             identifiers</a> in the <i>IAM User Guide</i>. </p>
                */
            Path: string | undefined;
            /**
                * <p>The name that identifies the server certificate.</p>
                */
            ServerCertificateName: string | undefined;
            /**
                * <p> The stable and unique string identifying the server certificate. For more information
                *          about IDs, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>. </p>
                */
            ServerCertificateId: string | undefined;
            /**
                * <p> The Amazon Resource Name (ARN) specifying the server certificate. For more information
                *          about ARNs and how to use them in policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the
                *             <i>IAM User Guide</i>. </p>
                */
            Arn: string | undefined;
            /**
                * <p>The date when the server certificate was uploaded.</p>
                */
            UploadDate?: Date;
            /**
                * <p>The date on which the certificate is set to expire.</p>
                */
            Expiration?: Date;
    }
    export namespace ServerCertificateMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerCertificateMetadata) => any;
    }
    /**
        * <p>Contains information about a server certificate.</p>
        *          <p> This data type is used as a response element in the <a>GetServerCertificate</a> operation. </p>
        */
    export interface ServerCertificate {
            /**
                * <p>The meta information of the server certificate, such as its name, path, ID, and
                *          ARN.</p>
                */
            ServerCertificateMetadata: ServerCertificateMetadata | undefined;
            /**
                * <p>The contents of the public key certificate.</p>
                */
            CertificateBody: string | undefined;
            /**
                * <p>The contents of the public key certificate chain.</p>
                */
            CertificateChain?: string;
            /**
                * <p>A list of tags that are attached to the server certificate. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace ServerCertificate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServerCertificate) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetServerCertificate</a> request.
        *     </p>
        */
    export interface GetServerCertificateResponse {
            /**
                * <p>A structure containing details about the server certificate.</p>
                */
            ServerCertificate: ServerCertificate | undefined;
    }
    export namespace GetServerCertificateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServerCertificateResponse) => any;
    }
    export interface GetServiceLastAccessedDetailsRequest {
            /**
                * <p>The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation. The <code>JobId</code>
                *             returned by <code>GenerateServiceLastAccessedDetail</code> must be used by the same role
                *             within a session, or by the same user when used to call
                *                 <code>GetServiceLastAccessedDetail</code>.</p>
                */
            JobId: string | undefined;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
    }
    export namespace GetServiceLastAccessedDetailsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServiceLastAccessedDetailsRequest) => any;
    }
    /**
        * <p>Contains details about the most recent attempt to access an action within the
        *          service.</p>
        *          <p>This data type is used as a response element in the <a>GetServiceLastAccessedDetails</a> operation.</p>
        */
    export interface TrackedActionLastAccessed {
            /**
                * <p>The name of the tracked action to which access was attempted. Tracked actions are
                *          actions that report activity to IAM.</p>
                */
            ActionName?: string;
            /**
                * <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
                *          <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in
                *          the <i>Amazon Web Services General Reference</i>. </p>
                */
            LastAccessedEntity?: string;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when an authenticated entity most recently attempted to access the
                *          tracked service. Amazon Web Services does not report unauthenticated requests.</p>
                *          <p>This field is null if no IAM entities attempted to access the service within the
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period">reporting period</a>.</p>
                */
            LastAccessedTime?: Date;
            /**
                * <p>The Region from which the authenticated entity (user or role) last attempted to access
                *          the tracked action. Amazon Web Services does not report unauthenticated requests.</p>
                *          <p>This field is null if no IAM entities attempted to access the service within the
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period">reporting period</a>.</p>
                */
            LastAccessedRegion?: string;
    }
    export namespace TrackedActionLastAccessed {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TrackedActionLastAccessed) => any;
    }
    /**
        * <p>Contains details about the most recent attempt to access the service.</p>
        *          <p>This data type is used as a response element in the <a>GetServiceLastAccessedDetails</a> operation.</p>
        */
    export interface ServiceLastAccessed {
            /**
                * <p>The name of the service in which access was attempted.</p>
                */
            ServiceName: string | undefined;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when an authenticated entity most recently attempted to access the
                *          service. Amazon Web Services does not report unauthenticated requests.</p>
                *          <p>This field is null if no IAM entities attempted to access the service within the
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period">reporting period</a>.</p>
                */
            LastAuthenticated?: Date;
            /**
                * <p>The namespace of the service in which access was attempted.</p>
                *          <p>To learn the service namespace of a service, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html">Actions, resources, and condition keys for Amazon Web Services services</a> in the
                *             <i>Service Authorization Reference</i>. Choose the name of the service to
                *          view details for that service. In the first paragraph, find the service prefix. For
                *          example, <code>(service prefix: a4b)</code>. For more information about service namespaces,
                *          see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon Web Services
                *             Service Namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            ServiceNamespace: string | undefined;
            /**
                * <p>The ARN of the authenticated entity (user or role) that last attempted to access the
                *          service. Amazon Web Services does not report unauthenticated requests.</p>
                *          <p>This field is null if no IAM entities attempted to access the service within the
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period">reporting period</a>.</p>
                */
            LastAuthenticatedEntity?: string;
            /**
                * <p>The Region from which the authenticated entity (user or role) last attempted to access
                *          the service. Amazon Web Services does not report unauthenticated requests.</p>
                *          <p>This field is null if no IAM entities attempted to access the service within the
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period">reporting period</a>.</p>
                */
            LastAuthenticatedRegion?: string;
            /**
                * <p>The total number of authenticated principals (root user, IAM users, or IAM roles)
                *          that have attempted to access the service.</p>
                *          <p>This field is null if no principals attempted to access the service within the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period">reporting period</a>.</p>
                */
            TotalAuthenticatedEntities?: number;
            /**
                * <p>An object that contains details about the most recent attempt to access a tracked action
                *          within the service.</p>
                *          <p>This field is null if there no tracked actions or if the principal did not use the
                *          tracked actions within the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period">reporting period</a>. This field is also null if the report was generated at the
                *          service level and not the action level. For more information, see the
                *             <code>Granularity</code> field in <a>GenerateServiceLastAccessedDetails</a>.</p>
                */
            TrackedActionsLastAccessed?: TrackedActionLastAccessed[];
    }
    export namespace ServiceLastAccessed {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceLastAccessed) => any;
    }
    export interface GetServiceLastAccessedDetailsResponse {
            /**
                * <p>The status of the job.</p>
                */
            JobStatus: JobStatusType | string | undefined;
            /**
                * <p>The type of job. Service jobs return information about when each service was last
                *             accessed. Action jobs also include information about when tracked actions within the
                *             service were last accessed.</p>
                */
            JobType?: AccessAdvisorUsageGranularityType | string;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *                 format</a>, when the report job was created.</p>
                */
            JobCreationDate: Date | undefined;
            /**
                * <p> A <code>ServiceLastAccessed</code> object that contains details about the most recent
                *             attempt to access the service.</p>
                */
            ServicesLastAccessed: ServiceLastAccessed[] | undefined;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *                 format</a>, when the generated report job was completed or failed.</p>
                *         <p>This field is null if the job is still in progress, as indicated by a job status value
                *             of <code>IN_PROGRESS</code>.</p>
                */
            JobCompletionDate: Date | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
            /**
                * <p>An object that contains details about the reason the operation failed.</p>
                */
            Error?: ErrorDetails;
    }
    export namespace GetServiceLastAccessedDetailsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServiceLastAccessedDetailsResponse) => any;
    }
    export interface GetServiceLastAccessedDetailsWithEntitiesRequest {
            /**
                * <p>The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code>
                *             operation.</p>
                */
            JobId: string | undefined;
            /**
                * <p>The service namespace for an Amazon Web Services service. Provide the service namespace to learn
                *             when the IAM entity last attempted to access the specified service.</p>
                *         <p>To learn the service namespace for a service, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html">Actions, resources, and condition keys for Amazon Web Services services</a> in the
                *                 <i>IAM User Guide</i>. Choose the name of the service to view
                *             details for that service. In the first paragraph, find the service prefix. For example,
                *                 <code>(service prefix: a4b)</code>. For more information about service namespaces,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon Web Services
                *                 service namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            ServiceNamespace: string | undefined;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
    }
    export namespace GetServiceLastAccessedDetailsWithEntitiesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServiceLastAccessedDetailsWithEntitiesRequest) => any;
    }
    export enum PolicyOwnerEntityType {
            GROUP = "GROUP",
            ROLE = "ROLE",
            USER = "USER"
    }
    /**
        * <p>Contains details about the specified entity (user or role).</p>
        *          <p>This data type is an element of the <a>EntityDetails</a> object.</p>
        */
    export interface EntityInfo {
            /**
                * <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
                *          <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in
                *          the <i>Amazon Web Services General Reference</i>. </p>
                */
            Arn: string | undefined;
            /**
                * <p>The name of the entity (user or role).</p>
                */
            Name: string | undefined;
            /**
                * <p>The type of entity (user or role).</p>
                */
            Type: PolicyOwnerEntityType | string | undefined;
            /**
                * <p>The identifier of the entity (user or role).</p>
                */
            Id: string | undefined;
            /**
                * <p>The path to the entity (user or role). For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *             identifiers</a> in the <i>IAM User Guide</i>. </p>
                */
            Path?: string;
    }
    export namespace EntityInfo {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityInfo) => any;
    }
    /**
        * <p>An object that contains details about when the IAM entities (users or roles) were last
        *          used in an attempt to access the specified Amazon Web Services service.</p>
        *          <p>This data type is a response element in the <a>GetServiceLastAccessedDetailsWithEntities</a> operation.</p>
        */
    export interface EntityDetails {
            /**
                * <p>The <code>EntityInfo</code> object that contains details about the entity (user or
                *          role).</p>
                */
            EntityInfo: EntityInfo | undefined;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the authenticated entity last attempted to access Amazon Web Services. Amazon Web Services does
                *          not report unauthenticated requests.</p>
                *          <p>This field is null if no IAM entities attempted to access the service within the
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#service-last-accessed-reporting-period">reporting period</a>.</p>
                */
            LastAuthenticated?: Date;
    }
    export namespace EntityDetails {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EntityDetails) => any;
    }
    export interface GetServiceLastAccessedDetailsWithEntitiesResponse {
            /**
                * <p>The status of the job.</p>
                */
            JobStatus: JobStatusType | string | undefined;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *                 format</a>, when the report job was created.</p>
                */
            JobCreationDate: Date | undefined;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *                 format</a>, when the generated report job was completed or failed.</p>
                *         <p>This field is null if the job is still in progress, as indicated by a job status value
                *             of <code>IN_PROGRESS</code>.</p>
                */
            JobCompletionDate: Date | undefined;
            /**
                * <p>An <code>EntityDetailsList</code> object that contains details about when an IAM
                *             entity (user or role) used group or policy permissions in an attempt to access the
                *             specified Amazon Web Services service.</p>
                */
            EntityDetailsList: EntityDetails[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
            /**
                * <p>An object that contains details about the reason the operation failed.</p>
                */
            Error?: ErrorDetails;
    }
    export namespace GetServiceLastAccessedDetailsWithEntitiesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServiceLastAccessedDetailsWithEntitiesResponse) => any;
    }
    export interface GetServiceLinkedRoleDeletionStatusRequest {
            /**
                * <p>The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format
                *                 <code>task/aws-service-role/<service-principal-name>/<role-name>/<task-uuid></code>.</p>
                */
            DeletionTaskId: string | undefined;
    }
    export namespace GetServiceLinkedRoleDeletionStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServiceLinkedRoleDeletionStatusRequest) => any;
    }
    /**
        * <p>An object that contains details about how a service-linked role is used, if that
        *          information is returned by the service.</p>
        *          <p>This data type is used as a response element in the <a>GetServiceLinkedRoleDeletionStatus</a> operation.</p>
        */
    export interface RoleUsageType {
            /**
                * <p>The name of the Region where the service-linked role is being used.</p>
                */
            Region?: string;
            /**
                * <p>The name of the resource that is using the service-linked role.</p>
                */
            Resources?: string[];
    }
    export namespace RoleUsageType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RoleUsageType) => any;
    }
    /**
        * <p>The reason that the service-linked role deletion failed.</p>
        *          <p>This data type is used as a response element in the <a>GetServiceLinkedRoleDeletionStatus</a> operation.</p>
        */
    export interface DeletionTaskFailureReasonType {
            /**
                * <p>A short description of the reason that the service-linked role deletion failed.</p>
                */
            Reason?: string;
            /**
                * <p>A list of objects that contains details about the service-linked role deletion failure,
                *          if that information is returned by the service. If the service-linked role has active
                *          sessions or if any resources that were used by the role have not been deleted from the
                *          linked service, the role can't be deleted. This parameter includes a list of the resources
                *          that are associated with the role and the Region in which the resources are being
                *          used.</p>
                */
            RoleUsageList?: RoleUsageType[];
    }
    export namespace DeletionTaskFailureReasonType {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeletionTaskFailureReasonType) => any;
    }
    export enum DeletionTaskStatusType {
            FAILED = "FAILED",
            IN_PROGRESS = "IN_PROGRESS",
            NOT_STARTED = "NOT_STARTED",
            SUCCEEDED = "SUCCEEDED"
    }
    export interface GetServiceLinkedRoleDeletionStatusResponse {
            /**
                * <p>The status of the deletion.</p>
                */
            Status: DeletionTaskStatusType | string | undefined;
            /**
                * <p>An object that contains details about the reason the deletion failed.</p>
                */
            Reason?: DeletionTaskFailureReasonType;
    }
    export namespace GetServiceLinkedRoleDeletionStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetServiceLinkedRoleDeletionStatusResponse) => any;
    }
    export type EncodingType = "PEM" | "SSH";
    export interface GetSSHPublicKeyRequest {
            /**
                * <p>The name of the IAM user associated with the SSH public key.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The unique identifier for the SSH public key.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can
                *     consist of any upper or lowercased letter or digit.</p>
                */
            SSHPublicKeyId: string | undefined;
            /**
                * <p>Specifies the public key encoding format to use in the response. To retrieve the
                *             public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM
                *             format, use <code>PEM</code>.</p>
                */
            Encoding: EncodingType | string | undefined;
    }
    export namespace GetSSHPublicKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSSHPublicKeyRequest) => any;
    }
    /**
        * <p>Contains information about an SSH public key.</p>
        *          <p>This data type is used as a response element in the <a>GetSSHPublicKey</a>
        *          and <a>UploadSSHPublicKey</a> operations. </p>
        */
    export interface SSHPublicKey {
            /**
                * <p>The name of the IAM user associated with the SSH public key.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The unique identifier for the SSH public key.</p>
                */
            SSHPublicKeyId: string | undefined;
            /**
                * <p>The MD5 message digest of the SSH public key.</p>
                */
            Fingerprint: string | undefined;
            /**
                * <p>The SSH public key.</p>
                */
            SSHPublicKeyBody: string | undefined;
            /**
                * <p>The status of the SSH public key. <code>Active</code> means that the key can be used for
                *          authentication with an CodeCommit repository. <code>Inactive</code> means that the key cannot be
                *          used.</p>
                */
            Status: StatusType | string | undefined;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the SSH public key was uploaded.</p>
                */
            UploadDate?: Date;
    }
    export namespace SSHPublicKey {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SSHPublicKey) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetSSHPublicKey</a>
        *       request.</p>
        */
    export interface GetSSHPublicKeyResponse {
            /**
                * <p>A structure containing details about the SSH public key.</p>
                */
            SSHPublicKey?: SSHPublicKey;
    }
    export namespace GetSSHPublicKeyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSSHPublicKeyResponse) => any;
    }
    /**
        * <p>The request was rejected because the public key encoding format is unsupported or
        *       unrecognized.</p>
        */
    export class UnrecognizedPublicKeyEncodingException extends __BaseException {
            readonly name: "UnrecognizedPublicKeyEncodingException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnrecognizedPublicKeyEncodingException, __BaseException>);
    }
    export interface GetUserRequest {
            /**
                * <p>The name of the user to get information about.</p>
                *         <p>This parameter is optional. If it is not included, it defaults to the user making the
                *             request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
    }
    export namespace GetUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUserRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetUser</a> request. </p>
        */
    export interface GetUserResponse {
            /**
                * <p>A structure containing details about the IAM user.</p>
                *         <important>
                *             <p>Due to a service issue, password last used data does not include password use from
                *                 May 3, 2018 22:50 PDT to May 23, 2018 14:08 PDT. This affects <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_finding-unused.html">last sign-in</a> dates shown in the IAM console and password last used
                *                 dates in the <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_getting-report.html">IAM credential
                *                     report</a>, and returned by this operation. If users signed in during the
                *                 affected time, the password last used date that is returned is the date the user
                *                 last signed in before May 3, 2018. For users that signed in after May 23, 2018 14:08
                *                 PDT, the returned password last used date is accurate.</p>
                *             <p>You can use password last used information to identify unused credentials for
                *                 deletion. For example, you might delete users who did not sign in to Amazon Web Services in the
                *                 last 90 days. In cases like this, we recommend that you adjust your evaluation
                *                 window to include dates after May 23, 2018. Alternatively, if your users use access
                *                 keys to access Amazon Web Services programmatically you can refer to access key last used
                *                 information because it is accurate for all dates. </p>
                *         </important>
                */
            User: User | undefined;
    }
    export namespace GetUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUserResponse) => any;
    }
    export interface GetUserPolicyRequest {
            /**
                * <p>The name of the user who the policy is associated with.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The name of the policy document to get.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            PolicyName: string | undefined;
    }
    export namespace GetUserPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUserPolicyRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>GetUserPolicy</a> request.
        *     </p>
        */
    export interface GetUserPolicyResponse {
            /**
                * <p>The user the policy is associated with.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The name of the policy.</p>
                */
            PolicyName: string | undefined;
            /**
                * <p>The policy document.</p>
                *
                *         <p>IAM stores policies in JSON format. However, resources that were created using CloudFormation
                *             templates can be formatted in YAML. CloudFormation always converts a YAML policy to JSON format
                *             before submitting it to IAM.</p>
                */
            PolicyDocument: string | undefined;
    }
    export namespace GetUserPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetUserPolicyResponse) => any;
    }
    export interface ListAccessKeysRequest {
            /**
                * <p>The name of the user.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListAccessKeysRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAccessKeysRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListAccessKeys</a> request.
        *     </p>
        */
    export interface ListAccessKeysResponse {
            /**
                * <p>A list of objects containing metadata about the access keys.</p>
                */
            AccessKeyMetadata: AccessKeyMetadata[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListAccessKeysResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAccessKeysResponse) => any;
    }
    export interface ListAccountAliasesRequest {
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListAccountAliasesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAccountAliasesRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListAccountAliases</a> request.
        *     </p>
        */
    export interface ListAccountAliasesResponse {
            /**
                * <p>A list of aliases associated with the account. Amazon Web Services supports only one alias per
                *             account.</p>
                */
            AccountAliases: string[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListAccountAliasesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAccountAliasesResponse) => any;
    }
    export interface ListAttachedGroupPoliciesRequest {
            /**
                * <p>The name (friendly name, not ARN) of the group to list attached policies for.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The path prefix for filtering the results. This parameter is optional. If it is not
                *             included, it defaults to a slash (/), listing all policies.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            PathPrefix?: string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListAttachedGroupPoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAttachedGroupPoliciesRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListAttachedGroupPolicies</a>
        *       request. </p>
        */
    export interface ListAttachedGroupPoliciesResponse {
            /**
                * <p>A list of the attached policies.</p>
                */
            AttachedPolicies?: AttachedPolicy[];
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListAttachedGroupPoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAttachedGroupPoliciesResponse) => any;
    }
    export interface ListAttachedRolePoliciesRequest {
            /**
                * <p>The name (friendly name, not ARN) of the role to list attached policies for.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
            /**
                * <p>The path prefix for filtering the results. This parameter is optional. If it is not
                *             included, it defaults to a slash (/), listing all policies.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            PathPrefix?: string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListAttachedRolePoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAttachedRolePoliciesRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListAttachedRolePolicies</a>
        *       request. </p>
        */
    export interface ListAttachedRolePoliciesResponse {
            /**
                * <p>A list of the attached policies.</p>
                */
            AttachedPolicies?: AttachedPolicy[];
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListAttachedRolePoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAttachedRolePoliciesResponse) => any;
    }
    export interface ListAttachedUserPoliciesRequest {
            /**
                * <p>The name (friendly name, not ARN) of the user to list attached policies for.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The path prefix for filtering the results. This parameter is optional. If it is not
                *             included, it defaults to a slash (/), listing all policies.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            PathPrefix?: string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListAttachedUserPoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAttachedUserPoliciesRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListAttachedUserPolicies</a>
        *       request. </p>
        */
    export interface ListAttachedUserPoliciesResponse {
            /**
                * <p>A list of the attached policies.</p>
                */
            AttachedPolicies?: AttachedPolicy[];
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListAttachedUserPoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListAttachedUserPoliciesResponse) => any;
    }
    export type PolicyUsageType = "PermissionsBoundary" | "PermissionsPolicy";
    export interface ListEntitiesForPolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM policy for which you want the
                *             versions.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicyArn: string | undefined;
            /**
                * <p>The entity type to use for filtering the results.</p>
                *         <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that
                *             are attached to the specified policy are returned. This parameter is optional. If it is
                *             not included, all attached entities (users, groups, and roles) are returned. The
                *             argument for this parameter must be one of the valid values listed below.</p>
                */
            EntityFilter?: EntityType | string;
            /**
                * <p>The path prefix for filtering the results. This parameter is optional. If it is not
                *             included, it defaults to a slash (/), listing all entities.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            PathPrefix?: string;
            /**
                * <p>The policy usage method to use for filtering the results.</p>
                *         <p>To list only permissions policies,
                *                 set <code>PolicyUsageFilter</code> to <code>PermissionsPolicy</code>. To list only
                *             the policies used to set permissions boundaries, set the value
                *                 to <code>PermissionsBoundary</code>.</p>
                *         <p>This parameter is optional. If it is not included, all policies are returned. </p>
                */
            PolicyUsageFilter?: PolicyUsageType | string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListEntitiesForPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntitiesForPolicyRequest) => any;
    }
    /**
        * <p>Contains information about a group that a managed policy is attached to.</p>
        *          <p>This data type is used as a response element in the <a>ListEntitiesForPolicy</a> operation. </p>
        *          <p>For more information about managed policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *             policies</a> in the <i>IAM User Guide</i>. </p>
        */
    export interface PolicyGroup {
            /**
                * <p>The name (friendly name, not ARN) identifying the group.</p>
                */
            GroupName?: string;
            /**
                * <p>The stable and unique string identifying the group. For more information about IDs, see
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html">IAM
                *             identifiers</a> in the <i>IAM User Guide</i>.</p>
                */
            GroupId?: string;
    }
    export namespace PolicyGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyGroup) => any;
    }
    /**
        * <p>Contains information about a role that a managed policy is attached to.</p>
        *          <p>This data type is used as a response element in the <a>ListEntitiesForPolicy</a> operation. </p>
        *          <p>For more information about managed policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *             policies</a> in the <i>IAM User Guide</i>. </p>
        */
    export interface PolicyRole {
            /**
                * <p>The name (friendly name, not ARN) identifying the role.</p>
                */
            RoleName?: string;
            /**
                * <p>The stable and unique string identifying the role. For more information about IDs, see
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html">IAM
                *             identifiers</a> in the <i>IAM User Guide</i>.</p>
                */
            RoleId?: string;
    }
    export namespace PolicyRole {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyRole) => any;
    }
    /**
        * <p>Contains information about a user that a managed policy is attached to.</p>
        *          <p>This data type is used as a response element in the <a>ListEntitiesForPolicy</a> operation. </p>
        *          <p>For more information about managed policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline
        *             policies</a> in the <i>IAM User Guide</i>. </p>
        */
    export interface PolicyUser {
            /**
                * <p>The name (friendly name, not ARN) identifying the user.</p>
                */
            UserName?: string;
            /**
                * <p>The stable and unique string identifying the user. For more information about IDs, see
                *             <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html">IAM
                *             identifiers</a> in the <i>IAM User Guide</i>.</p>
                */
            UserId?: string;
    }
    export namespace PolicyUser {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyUser) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListEntitiesForPolicy</a> request.
        *     </p>
        */
    export interface ListEntitiesForPolicyResponse {
            /**
                * <p>A list of IAM groups that the policy is attached to.</p>
                */
            PolicyGroups?: PolicyGroup[];
            /**
                * <p>A list of IAM users that the policy is attached to.</p>
                */
            PolicyUsers?: PolicyUser[];
            /**
                * <p>A list of IAM roles that the policy is attached to.</p>
                */
            PolicyRoles?: PolicyRole[];
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListEntitiesForPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListEntitiesForPolicyResponse) => any;
    }
    export interface ListGroupPoliciesRequest {
            /**
                * <p>The name of the group to list policies for.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            GroupName: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListGroupPoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupPoliciesRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListGroupPolicies</a> request.
        *     </p>
        */
    export interface ListGroupPoliciesResponse {
            /**
                * <p>A list of policy names.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            PolicyNames: string[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListGroupPoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupPoliciesResponse) => any;
    }
    export interface ListGroupsRequest {
            /**
                * <p> The path prefix for filtering the results. For example, the prefix
                *                 <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with
                *                 <code>/division_abc/subdivision_xyz/</code>.</p>
                *         <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing
                *             all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            PathPrefix?: string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListGroups</a> request. </p>
        */
    export interface ListGroupsResponse {
            /**
                * <p>A list of groups.</p>
                */
            Groups: Group[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsResponse) => any;
    }
    export interface ListGroupsForUserRequest {
            /**
                * <p>The name of the user to list groups for.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListGroupsForUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsForUserRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListGroupsForUser</a> request.
        *     </p>
        */
    export interface ListGroupsForUserResponse {
            /**
                * <p>A list of groups.</p>
                */
            Groups: Group[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListGroupsForUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListGroupsForUserResponse) => any;
    }
    export interface ListInstanceProfilesRequest {
            /**
                * <p> The path prefix for filtering the results. For example, the prefix
                *                 <code>/application_abc/component_xyz/</code> gets all instance profiles whose path
                *             starts with <code>/application_abc/component_xyz/</code>.</p>
                *         <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing
                *             all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            PathPrefix?: string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListInstanceProfilesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInstanceProfilesRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListInstanceProfiles</a> request.
        *     </p>
        */
    export interface ListInstanceProfilesResponse {
            /**
                * <p>A list of instance profiles.</p>
                */
            InstanceProfiles: InstanceProfile[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListInstanceProfilesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInstanceProfilesResponse) => any;
    }
    export interface ListInstanceProfilesForRoleRequest {
            /**
                * <p>The name of the role to list instance profiles for.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListInstanceProfilesForRoleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInstanceProfilesForRoleRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListInstanceProfilesForRole</a>
        *       request. </p>
        */
    export interface ListInstanceProfilesForRoleResponse {
            /**
                * <p>A list of instance profiles.</p>
                */
            InstanceProfiles: InstanceProfile[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListInstanceProfilesForRoleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInstanceProfilesForRoleResponse) => any;
    }
    export interface ListInstanceProfileTagsRequest {
            /**
                * <p>The name of the IAM instance profile whose tags you want to see.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            InstanceProfileName: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListInstanceProfileTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInstanceProfileTagsRequest) => any;
    }
    export interface ListInstanceProfileTagsResponse {
            /**
                * <p>The list of tags that are currently attached to the IAM instance profile. Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.</p>
                */
            Tags: Tag[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListInstanceProfileTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListInstanceProfileTagsResponse) => any;
    }
    export interface ListMFADevicesRequest {
            /**
                * <p>The name of the user whose MFA devices you want to list.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListMFADevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMFADevicesRequest) => any;
    }
    /**
        * <p>Contains information about an MFA device.</p>
        *          <p>This data type is used as a response element in the <a>ListMFADevices</a>
        *          operation.</p>
        */
    export interface MFADevice {
            /**
                * <p>The user with whom the MFA device is associated.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the
                *          serial number is the device ARN.</p>
                */
            SerialNumber: string | undefined;
            /**
                * <p>The date when the MFA device was enabled for the user.</p>
                */
            EnableDate: Date | undefined;
    }
    export namespace MFADevice {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MFADevice) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListMFADevices</a> request.
        *     </p>
        */
    export interface ListMFADevicesResponse {
            /**
                * <p>A list of MFA devices.</p>
                */
            MFADevices: MFADevice[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListMFADevicesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMFADevicesResponse) => any;
    }
    export interface ListMFADeviceTagsRequest {
            /**
                * <p>The unique identifier for the IAM virtual MFA device whose tags you want to see.
                *       For virtual MFA devices, the serial number is the same as the ARN.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            SerialNumber: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListMFADeviceTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMFADeviceTagsRequest) => any;
    }
    export interface ListMFADeviceTagsResponse {
            /**
                * <p>The list of tags that are currently attached to the virtual MFA device. Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.</p>
                */
            Tags: Tag[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListMFADeviceTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListMFADeviceTagsResponse) => any;
    }
    export interface ListOpenIDConnectProvidersRequest {
    }
    export namespace ListOpenIDConnectProvidersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOpenIDConnectProvidersRequest) => any;
    }
    /**
        * <p>Contains the Amazon Resource Name (ARN) for an IAM OpenID Connect provider.</p>
        */
    export interface OpenIDConnectProviderListEntry {
            /**
                * <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
                *          <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in
                *          the <i>Amazon Web Services General Reference</i>. </p>
                */
            Arn?: string;
    }
    export namespace OpenIDConnectProviderListEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OpenIDConnectProviderListEntry) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListOpenIDConnectProviders</a>
        *       request. </p>
        */
    export interface ListOpenIDConnectProvidersResponse {
            /**
                * <p>The list of IAM OIDC provider resource objects defined in the Amazon Web Services account.</p>
                */
            OpenIDConnectProviderList?: OpenIDConnectProviderListEntry[];
    }
    export namespace ListOpenIDConnectProvidersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOpenIDConnectProvidersResponse) => any;
    }
    export interface ListOpenIDConnectProviderTagsRequest {
            /**
                * <p>The ARN of the OpenID Connect (OIDC) identity provider whose tags you want to
                *       see.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            OpenIDConnectProviderArn: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListOpenIDConnectProviderTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOpenIDConnectProviderTagsRequest) => any;
    }
    export interface ListOpenIDConnectProviderTagsResponse {
            /**
                * <p>The list of tags that are currently attached to the OpenID Connect (OIDC) identity
                *       provider. Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.</p>
                */
            Tags: Tag[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListOpenIDConnectProviderTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListOpenIDConnectProviderTagsResponse) => any;
    }
    export enum PolicyScopeType {
            AWS = "AWS",
            All = "All",
            Local = "Local"
    }
    export interface ListPoliciesRequest {
            /**
                * <p>The scope to use for filtering the results.</p>
                *         <p>To list only Amazon Web Services managed policies, set <code>Scope</code> to <code>AWS</code>. To
                *             list only the customer managed policies in your Amazon Web Services account, set <code>Scope</code> to
                *                 <code>Local</code>.</p>
                *         <p>This parameter is optional. If it is not included, or if it is set to
                *             <code>All</code>, all policies are returned.</p>
                */
            Scope?: PolicyScopeType | string;
            /**
                * <p>A flag to filter the results to only the attached policies.</p>
                *         <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only
                *             the policies that are attached to an IAM user, group, or role. When
                *                 <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not
                *             included, all policies are returned.</p>
                */
            OnlyAttached?: boolean;
            /**
                * <p>The path prefix for filtering the results. This parameter is optional. If it is not
                *             included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            PathPrefix?: string;
            /**
                * <p>The policy usage method to use for filtering the results.</p>
                *         <p>To list only permissions policies,
                *                 set <code>PolicyUsageFilter</code> to <code>PermissionsPolicy</code>. To list only
                *             the policies used to set permissions boundaries, set the value
                *                 to <code>PermissionsBoundary</code>.</p>
                *         <p>This parameter is optional. If it is not included, all policies are returned. </p>
                */
            PolicyUsageFilter?: PolicyUsageType | string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListPoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPoliciesRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListPolicies</a> request.
        *     </p>
        */
    export interface ListPoliciesResponse {
            /**
                * <p>A list of policies.</p>
                */
            Policies?: Policy[];
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListPoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPoliciesResponse) => any;
    }
    export interface ListPoliciesGrantingServiceAccessRequest {
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>The ARN of the IAM identity (user, group, or role) whose policies you want to
                *             list.</p>
                */
            Arn: string | undefined;
            /**
                * <p>The service namespace for the Amazon Web Services services whose policies you want to list.</p>
                *         <p>To learn the service namespace for a service, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html">Actions, resources, and condition keys for Amazon Web Services services</a> in the
                *                 <i>IAM User Guide</i>. Choose the name of the service to view
                *             details for that service. In the first paragraph, find the service prefix. For example,
                *                 <code>(service prefix: a4b)</code>. For more information about service namespaces,
                *             see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon Web Services
                *                 service namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            ServiceNamespaces: string[] | undefined;
    }
    export namespace ListPoliciesGrantingServiceAccessRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPoliciesGrantingServiceAccessRequest) => any;
    }
    export enum PolicyType {
            INLINE = "INLINE",
            MANAGED = "MANAGED"
    }
    /**
        * <p>Contains details about the permissions policies that are attached to the specified
        *          identity (user, group, or role).</p>
        *          <p>This data type is an element of the <a>ListPoliciesGrantingServiceAccessEntry</a> object.</p>
        */
    export interface PolicyGrantingServiceAccess {
            /**
                * <p>The policy name.</p>
                */
            PolicyName: string | undefined;
            /**
                * <p>The policy type. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed
                *             policies and inline policies</a> in the
                *          <i>IAM User Guide</i>.</p>
                */
            PolicyType: PolicyType | string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p>
                *          <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in
                *          the <i>Amazon Web Services General Reference</i>. </p>
                */
            PolicyArn?: string;
            /**
                * <p>The type of entity (user or role) that used the policy to access the service to which
                *          the inline policy is attached.</p>
                *          <p>This field is null for managed policies. For more information about these policy types,
                *          see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the
                *             <i>IAM User Guide</i>.</p>
                */
            EntityType?: PolicyOwnerEntityType | string;
            /**
                * <p>The name of the entity (user or role) to which the inline policy is attached.</p>
                *          <p>This field is null for managed policies. For more information about these policy types,
                *          see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the
                *             <i>IAM User Guide</i>.</p>
                */
            EntityName?: string;
    }
    export namespace PolicyGrantingServiceAccess {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PolicyGrantingServiceAccess) => any;
    }
    /**
        * <p>Contains details about the permissions policies that are attached to the specified
        *          identity (user, group, or role).</p>
        *          <p>This data type is used as a response element in the <a>ListPoliciesGrantingServiceAccess</a> operation.</p>
        */
    export interface ListPoliciesGrantingServiceAccessEntry {
            /**
                * <p>The namespace of the service that was accessed.</p>
                *          <p>To learn the service namespace of a service, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html">Actions, resources, and condition keys for Amazon Web Services services</a> in the
                *             <i>Service Authorization Reference</i>. Choose the name of the service to
                *          view details for that service. In the first paragraph, find the service prefix. For
                *          example, <code>(service prefix: a4b)</code>. For more information about service namespaces,
                *          see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon Web Services
                *             service namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            ServiceNamespace?: string;
            /**
                * <p>The <code>PoliciesGrantingServiceAccess</code> object that contains details about the
                *          policy.</p>
                */
            Policies?: PolicyGrantingServiceAccess[];
    }
    export namespace ListPoliciesGrantingServiceAccessEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPoliciesGrantingServiceAccessEntry) => any;
    }
    export interface ListPoliciesGrantingServiceAccessResponse {
            /**
                * <p>A <code>ListPoliciesGrantingServiceAccess</code> object that contains details about
                *             the permissions policies attached to the specified identity (user, group, or
                *             role).</p>
                */
            PoliciesGrantingServiceAccess: ListPoliciesGrantingServiceAccessEntry[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your results were
                *             truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *             request parameter to retrieve more items. We recommend that you check
                *                 <code>IsTruncated</code> after every call to ensure that you receive all your
                *             results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListPoliciesGrantingServiceAccessResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPoliciesGrantingServiceAccessResponse) => any;
    }
    export interface ListPolicyTagsRequest {
            /**
                * <p>The ARN of the IAM customer managed policy whose tags you want to see.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            PolicyArn: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListPolicyTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPolicyTagsRequest) => any;
    }
    export interface ListPolicyTagsResponse {
            /**
                * <p>The list of tags that are currently attached to the IAM customer managed policy.
                *       Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.</p>
                */
            Tags: Tag[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListPolicyTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPolicyTagsResponse) => any;
    }
    export interface ListPolicyVersionsRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM policy for which you want the
                *             versions.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicyArn: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListPolicyVersionsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPolicyVersionsRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListPolicyVersions</a> request.
        *     </p>
        */
    export interface ListPolicyVersionsResponse {
            /**
                * <p>A list of policy versions.</p>
                *         <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            Versions?: PolicyVersion[];
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListPolicyVersionsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListPolicyVersionsResponse) => any;
    }
    export interface ListRolePoliciesRequest {
            /**
                * <p>The name of the role to list policies for.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListRolePoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRolePoliciesRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListRolePolicies</a> request.
        *     </p>
        */
    export interface ListRolePoliciesResponse {
            /**
                * <p>A list of policy names.</p>
                */
            PolicyNames: string[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListRolePoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRolePoliciesResponse) => any;
    }
    export interface ListRolesRequest {
            /**
                * <p> The path prefix for filtering the results. For example, the prefix
                *                 <code>/application_abc/component_xyz/</code> gets all roles whose path starts with
                *                 <code>/application_abc/component_xyz/</code>.</p>
                *         <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing
                *             all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            PathPrefix?: string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListRolesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRolesRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListRoles</a> request. </p>
        */
    export interface ListRolesResponse {
            /**
                * <p>A list of roles.</p>
                */
            Roles: Role[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListRolesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRolesResponse) => any;
    }
    export interface ListRoleTagsRequest {
            /**
                * <p>The name of the IAM role for which you want to see the list of tags.</p>
                *          <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListRoleTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRoleTagsRequest) => any;
    }
    export interface ListRoleTagsResponse {
            /**
                * <p>The list of tags that are currently attached to the role. Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.</p>
                */
            Tags: Tag[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListRoleTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRoleTagsResponse) => any;
    }
    export interface ListSAMLProvidersRequest {
    }
    export namespace ListSAMLProvidersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSAMLProvidersRequest) => any;
    }
    /**
        * <p>Contains the list of SAML providers for this account.</p>
        */
    export interface SAMLProviderListEntry {
            /**
                * <p>The Amazon Resource Name (ARN) of the SAML provider.</p>
                */
            Arn?: string;
            /**
                * <p>The expiration date and time for the SAML provider.</p>
                */
            ValidUntil?: Date;
            /**
                * <p>The date and time when the SAML provider was created.</p>
                */
            CreateDate?: Date;
    }
    export namespace SAMLProviderListEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SAMLProviderListEntry) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListSAMLProviders</a> request.
        *     </p>
        */
    export interface ListSAMLProvidersResponse {
            /**
                * <p>The list of SAML provider resource objects defined in IAM for this Amazon Web Services
                *             account.</p>
                */
            SAMLProviderList?: SAMLProviderListEntry[];
    }
    export namespace ListSAMLProvidersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSAMLProvidersResponse) => any;
    }
    export interface ListSAMLProviderTagsRequest {
            /**
                * <p>The ARN of the Security Assertion Markup Language (SAML) identity provider whose tags
                *       you want to see.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            SAMLProviderArn: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListSAMLProviderTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSAMLProviderTagsRequest) => any;
    }
    export interface ListSAMLProviderTagsResponse {
            /**
                * <p>The list of tags that are currently attached to the Security Assertion Markup Language
                *       (SAML) identity provider. Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.</p>
                */
            Tags: Tag[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListSAMLProviderTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSAMLProviderTagsResponse) => any;
    }
    export interface ListServerCertificatesRequest {
            /**
                * <p> The path prefix for filtering the results. For example:
                *                 <code>/company/servercerts</code> would get all server certificates for which the
                *             path starts with <code>/company/servercerts</code>.</p>
                *         <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing
                *             all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            PathPrefix?: string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListServerCertificatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListServerCertificatesRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListServerCertificates</a> request.
        *     </p>
        */
    export interface ListServerCertificatesResponse {
            /**
                * <p>A list of server certificates.</p>
                */
            ServerCertificateMetadataList: ServerCertificateMetadata[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListServerCertificatesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListServerCertificatesResponse) => any;
    }
    export interface ListServerCertificateTagsRequest {
            /**
                * <p>The name of the IAM server certificate whose tags you want to see.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            ServerCertificateName: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListServerCertificateTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListServerCertificateTagsRequest) => any;
    }
    export interface ListServerCertificateTagsResponse {
            /**
                * <p>The list of tags that are currently attached to the IAM server certificate.
                *       Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.</p>
                */
            Tags: Tag[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListServerCertificateTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListServerCertificateTagsResponse) => any;
    }
    export interface ListServiceSpecificCredentialsRequest {
            /**
                * <p>The name of the user whose service-specific credentials you want information about. If
                *             this value is not specified, then the operation assumes the user whose credentials are
                *             used to call the operation.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
            /**
                * <p>Filters the returned results to only those for the specified Amazon Web Services service. If not
                *             specified, then Amazon Web Services returns service-specific credentials for all services.</p>
                */
            ServiceName?: string;
    }
    export namespace ListServiceSpecificCredentialsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListServiceSpecificCredentialsRequest) => any;
    }
    /**
        * <p>Contains additional details about a service-specific credential.</p>
        */
    export interface ServiceSpecificCredentialMetadata {
            /**
                * <p>The name of the IAM user associated with the service-specific credential.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The status of the service-specific credential. <code>Active</code> means that the key is
                *          valid for API calls, while <code>Inactive</code> means it is not.</p>
                */
            Status: StatusType | string | undefined;
            /**
                * <p>The generated user name for the service-specific credential.</p>
                */
            ServiceUserName: string | undefined;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the service-specific credential were created.</p>
                */
            CreateDate: Date | undefined;
            /**
                * <p>The unique identifier for the service-specific credential.</p>
                */
            ServiceSpecificCredentialId: string | undefined;
            /**
                * <p>The name of the service associated with the service-specific credential.</p>
                */
            ServiceName: string | undefined;
    }
    export namespace ServiceSpecificCredentialMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ServiceSpecificCredentialMetadata) => any;
    }
    export interface ListServiceSpecificCredentialsResponse {
            /**
                * <p>A list of structures that each contain details about a service-specific
                *             credential.</p>
                */
            ServiceSpecificCredentials?: ServiceSpecificCredentialMetadata[];
    }
    export namespace ListServiceSpecificCredentialsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListServiceSpecificCredentialsResponse) => any;
    }
    export interface ListSigningCertificatesRequest {
            /**
                * <p>The name of the IAM user whose signing certificates you want to examine.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListSigningCertificatesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSigningCertificatesRequest) => any;
    }
    /**
        * <p>Contains information about an X.509 signing certificate.</p>
        *          <p>This data type is used as a response element in the <a>UploadSigningCertificate</a> and <a>ListSigningCertificates</a>
        *          operations. </p>
        */
    export interface SigningCertificate {
            /**
                * <p>The name of the user the signing certificate is associated with.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The ID for the signing certificate.</p>
                */
            CertificateId: string | undefined;
            /**
                * <p>The contents of the signing certificate.</p>
                */
            CertificateBody: string | undefined;
            /**
                * <p>The status of the signing certificate. <code>Active</code> means that the key is valid
                *          for API calls, while <code>Inactive</code> means it is not.</p>
                */
            Status: StatusType | string | undefined;
            /**
                * <p>The date when the signing certificate was uploaded.</p>
                */
            UploadDate?: Date;
    }
    export namespace SigningCertificate {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SigningCertificate) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListSigningCertificates</a>
        *       request. </p>
        */
    export interface ListSigningCertificatesResponse {
            /**
                * <p>A list of the user's signing certificate information.</p>
                */
            Certificates: SigningCertificate[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListSigningCertificatesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSigningCertificatesResponse) => any;
    }
    export interface ListSSHPublicKeysRequest {
            /**
                * <p>The name of the IAM user to list SSH public keys for. If none is specified, the
                *                 <code>UserName</code> field is determined implicitly based on the Amazon Web Services access key
                *             used to sign the request.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListSSHPublicKeysRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSSHPublicKeysRequest) => any;
    }
    /**
        * <p>Contains information about an SSH public key, without the key's body or
        *          fingerprint.</p>
        *          <p>This data type is used as a response element in the <a>ListSSHPublicKeys</a>
        *          operation.</p>
        */
    export interface SSHPublicKeyMetadata {
            /**
                * <p>The name of the IAM user associated with the SSH public key.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The unique identifier for the SSH public key.</p>
                */
            SSHPublicKeyId: string | undefined;
            /**
                * <p>The status of the SSH public key. <code>Active</code> means that the key can be used for
                *          authentication with an CodeCommit repository. <code>Inactive</code> means that the key cannot be
                *          used.</p>
                */
            Status: StatusType | string | undefined;
            /**
                * <p>The date and time, in <a href="http://www.iso.org/iso/iso8601">ISO 8601 date-time
                *             format</a>, when the SSH public key was uploaded.</p>
                */
            UploadDate: Date | undefined;
    }
    export namespace SSHPublicKeyMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SSHPublicKeyMetadata) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListSSHPublicKeys</a>
        *       request.</p>
        */
    export interface ListSSHPublicKeysResponse {
            /**
                * <p>A list of the SSH public keys assigned to IAM user.</p>
                */
            SSHPublicKeys?: SSHPublicKeyMetadata[];
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListSSHPublicKeysResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSSHPublicKeysResponse) => any;
    }
    export interface ListUserPoliciesRequest {
            /**
                * <p>The name of the user to list policies for.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListUserPoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserPoliciesRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListUserPolicies</a> request.
        *     </p>
        */
    export interface ListUserPoliciesResponse {
            /**
                * <p>A list of policy names.</p>
                */
            PolicyNames: string[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListUserPoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserPoliciesResponse) => any;
    }
    export interface ListUsersRequest {
            /**
                * <p> The path prefix for filtering the results. For example:
                *                 <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose
                *             path starts with <code>/division_abc/subdivision_xyz/</code>.</p>
                *         <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing
                *             all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            PathPrefix?: string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListUsersRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUsersRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListUsers</a> request. </p>
        */
    export interface ListUsersResponse {
            /**
                * <p>A list of users.</p>
                */
            Users: User[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListUsersResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUsersResponse) => any;
    }
    export interface ListUserTagsRequest {
            /**
                * <p>The name of the IAM user whose tags you want to see.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListUserTagsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserTagsRequest) => any;
    }
    export interface ListUserTagsResponse {
            /**
                * <p>The list of tags that are currently attached to the user. Each tag consists of a key name and an associated value. If no tags are attached to the specified resource, the response contains an empty list.</p>
                */
            Tags: Tag[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListUserTagsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListUserTagsResponse) => any;
    }
    export interface ListVirtualMFADevicesRequest {
            /**
                * <p> The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list.
                *             If you do not specify an <code>AssignmentStatus</code>, the operation defaults to
                *                 <code>Any</code>, which lists both assigned and unassigned virtual MFA
                *             devices.,</p>
                */
            AssignmentStatus?: AssignmentStatusType | string;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
    }
    export namespace ListVirtualMFADevicesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListVirtualMFADevicesRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>ListVirtualMFADevices</a> request.
        *     </p>
        */
    export interface ListVirtualMFADevicesResponse {
            /**
                * <p> The list of virtual MFA devices in the current account that match the
                *                 <code>AssignmentStatus</code> value that was passed in the request.</p>
                */
            VirtualMFADevices: VirtualMFADevice[] | undefined;
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element is present and
                *             contains the value to use for the <code>Marker</code> parameter in a subsequent
                *             pagination request.</p>
                */
            Marker?: string;
    }
    export namespace ListVirtualMFADevicesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListVirtualMFADevicesResponse) => any;
    }
    export interface PutGroupPolicyRequest {
            /**
                * <p>The name of the group to associate the policy with.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-.</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The name of the policy document.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            PolicyName: string | undefined;
            /**
                * <p>The policy document.</p>
                *
                *         <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates
                *             formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always
                *             converts a YAML policy to JSON format before submitting it to = IAM.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            PolicyDocument: string | undefined;
    }
    export namespace PutGroupPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutGroupPolicyRequest) => any;
    }
    export interface PutRolePermissionsBoundaryRequest {
            /**
                * <p>The name (friendly name, not ARN) of the IAM role for which you want to set the
                *             permissions boundary.</p>
                */
            RoleName: string | undefined;
            /**
                * <p>The ARN of the policy that is used to set the permissions boundary for the
                *             role.</p>
                */
            PermissionsBoundary: string | undefined;
    }
    export namespace PutRolePermissionsBoundaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRolePermissionsBoundaryRequest) => any;
    }
    export interface PutRolePolicyRequest {
            /**
                * <p>The name of the role to associate the policy with.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
            /**
                * <p>The name of the policy document.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            PolicyName: string | undefined;
            /**
                * <p>The policy document.</p>
                *         <p>You must provide policies in JSON format in IAM. However, for CloudFormation
                *             templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to
                *             IAM.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            PolicyDocument: string | undefined;
    }
    export namespace PutRolePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutRolePolicyRequest) => any;
    }
    export interface PutUserPermissionsBoundaryRequest {
            /**
                * <p>The name (friendly name, not ARN) of the IAM user for which you want to set the
                *             permissions boundary.</p>
                */
            UserName: string | undefined;
            /**
                * <p>The ARN of the policy that is used to set the permissions boundary for the
                *             user.</p>
                */
            PermissionsBoundary: string | undefined;
    }
    export namespace PutUserPermissionsBoundaryRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutUserPermissionsBoundaryRequest) => any;
    }
    export interface PutUserPolicyRequest {
            /**
                * <p>The name of the user to associate the policy with.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The name of the policy document.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            PolicyName: string | undefined;
            /**
                * <p>The policy document.</p>
                *
                *         <p>You must provide policies in JSON format in IAM. However, for CloudFormation
                *             templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to
                *             IAM.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            PolicyDocument: string | undefined;
    }
    export namespace PutUserPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutUserPolicyRequest) => any;
    }
    export interface RemoveClientIDFromOpenIDConnectProviderRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM OIDC provider resource to remove the
                *             client ID from. You can get a list of OIDC provider ARNs by using the <a>ListOpenIDConnectProviders</a> operation.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            OpenIDConnectProviderArn: string | undefined;
            /**
                * <p>The client ID (also known as audience) to remove from the IAM OIDC provider
                *             resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.</p>
                */
            ClientID: string | undefined;
    }
    export namespace RemoveClientIDFromOpenIDConnectProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveClientIDFromOpenIDConnectProviderRequest) => any;
    }
    export interface RemoveRoleFromInstanceProfileRequest {
            /**
                * <p>The name of the instance profile to update.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            InstanceProfileName: string | undefined;
            /**
                * <p>The name of the role to remove.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
    }
    export namespace RemoveRoleFromInstanceProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveRoleFromInstanceProfileRequest) => any;
    }
    export interface RemoveUserFromGroupRequest {
            /**
                * <p>The name of the group to update.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            GroupName: string | undefined;
            /**
                * <p>The name of the user to remove.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
    }
    export namespace RemoveUserFromGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RemoveUserFromGroupRequest) => any;
    }
    export interface ResetServiceSpecificCredentialRequest {
            /**
                * <p>The name of the IAM user associated with the service-specific credential. If this
                *             value is not specified, then the operation assumes the user whose credentials are used
                *             to call the operation.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
            /**
                * <p>The unique identifier of the service-specific credential.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can
                *     consist of any upper or lowercased letter or digit.</p>
                */
            ServiceSpecificCredentialId: string | undefined;
    }
    export namespace ResetServiceSpecificCredentialRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResetServiceSpecificCredentialRequest) => any;
    }
    export interface ResetServiceSpecificCredentialResponse {
            /**
                * <p>A structure with details about the updated service-specific credential, including the
                *             new password.</p>
                *         <important>
                *             <p>This is the <b>only</b> time that you can access the
                *                 password. You cannot recover the password later, but you can reset it again.</p>
                *         </important>
                */
            ServiceSpecificCredential?: ServiceSpecificCredential;
    }
    export namespace ResetServiceSpecificCredentialResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResetServiceSpecificCredentialResponse) => any;
    }
    export interface ResyncMFADeviceRequest {
            /**
                * <p>The name of the user whose MFA device you want to resynchronize.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>Serial number that uniquely identifies the MFA device.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            SerialNumber: string | undefined;
            /**
                * <p>An authentication code emitted by the device.</p>
                *         <p>The format for this parameter is a sequence of six digits.</p>
                */
            AuthenticationCode1: string | undefined;
            /**
                * <p>A subsequent authentication code emitted by the device.</p>
                *         <p>The format for this parameter is a sequence of six digits.</p>
                */
            AuthenticationCode2: string | undefined;
    }
    export namespace ResyncMFADeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResyncMFADeviceRequest) => any;
    }
    export interface SetDefaultPolicyVersionRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM policy whose default version you want to
                *             set.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicyArn: string | undefined;
            /**
                * <p>The version of the policy to set as the default (operative) version.</p>
                *         <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed
                *                 policies</a> in the <i>IAM User Guide</i>.</p>
                */
            VersionId: string | undefined;
    }
    export namespace SetDefaultPolicyVersionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetDefaultPolicyVersionRequest) => any;
    }
    export enum GlobalEndpointTokenVersion {
            v1Token = "v1Token",
            v2Token = "v2Token"
    }
    export interface SetSecurityTokenServicePreferencesRequest {
            /**
                * <p>The version of the global endpoint token. Version 1 tokens are valid only in Amazon Web Services Regions that are available by default. These tokens do not work in
                *             manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid
                *             in all Regions. However, version 2 tokens are longer and might affect systems where you
                *             temporarily store tokens.</p>
                *         <p>For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and
                *                 deactivating STS in an Amazon Web Services Region</a> in the
                *                 <i>IAM User Guide</i>.</p>
                */
            GlobalEndpointTokenVersion: GlobalEndpointTokenVersion | string | undefined;
    }
    export namespace SetSecurityTokenServicePreferencesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SetSecurityTokenServicePreferencesRequest) => any;
    }
    /**
        * <p>The request failed because a provided policy could not be successfully evaluated. An
        *       additional detailed message indicates the source of the failure.</p>
        */
    export class PolicyEvaluationException extends __BaseException {
            readonly name: "PolicyEvaluationException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<PolicyEvaluationException, __BaseException>);
    }
    export enum ContextKeyTypeEnum {
            BINARY = "binary",
            BINARY_LIST = "binaryList",
            BOOLEAN = "boolean",
            BOOLEAN_LIST = "booleanList",
            DATE = "date",
            DATE_LIST = "dateList",
            IP = "ip",
            IP_LIST = "ipList",
            NUMERIC = "numeric",
            NUMERIC_LIST = "numericList",
            STRING = "string",
            STRING_LIST = "stringList"
    }
    /**
        * <p>Contains information about a condition context key. It includes the name of the key and
        *          specifies the value (or values, if the context key supports multiple values) to use in the
        *          simulation. This information is used when evaluating the <code>Condition</code> elements of
        *          the input policies.</p>
        *          <p>This data type is used as an input parameter to <a>SimulateCustomPolicy</a>
        *          and <a>SimulatePrincipalPolicy</a>.</p>
        */
    export interface ContextEntry {
            /**
                * <p>The full name of a condition context key, including the service prefix. For example,
                *             <code>aws:SourceIp</code> or <code>s3:VersionId</code>.</p>
                */
            ContextKeyName?: string;
            /**
                * <p>The value (or values, if the condition context key supports multiple values) to provide
                *          to the simulation when the key is referenced by a <code>Condition</code> element in an
                *          input policy.</p>
                */
            ContextKeyValues?: string[];
            /**
                * <p>The data type of the value (or values) specified in the <code>ContextKeyValues</code>
                *          parameter.</p>
                */
            ContextKeyType?: ContextKeyTypeEnum | string;
    }
    export namespace ContextEntry {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ContextEntry) => any;
    }
    export interface SimulateCustomPolicyRequest {
            /**
                * <p>A list of policy documents to include in the simulation. Each document is specified as
                *             a string containing the complete, valid JSON text of an IAM policy. Do not include any
                *             resource-based policies in this parameter. Any resource-based policy must be submitted
                *             with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down"
                *             policies, such as you could include in a call to <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of
                *             the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to
                *             restrict what a user can do while using the temporary credentials.</p>
                *         <p>The maximum length of the policy document that you can pass in this operation,
                *             including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            PolicyInputList: string[] | undefined;
            /**
                * <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the
                *             maximum permissions that an IAM entity can have. You can input only one permissions
                *             boundary when you pass a policy to this operation. For more information about
                *             permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM
                *                 entities</a> in the <i>IAM User Guide</i>. The policy input is
                *             specified as a string that contains the complete, valid JSON text of a permissions
                *             boundary policy.</p>
                *         <p>The maximum length of the policy document that you can pass in this operation,
                *             including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            PermissionsBoundaryPolicyInputList?: string[];
            /**
                * <p>A list of names of API operations to evaluate in the simulation. Each operation is
                *             evaluated against each resource. Each operation must include the service identifier,
                *             such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*)
                *             in an action name.</p>
                */
            ActionNames: string[] | undefined;
            /**
                * <p>A list of ARNs of Amazon Web Services resources to include in the simulation. If this parameter is
                *             not provided, then the value defaults to <code>*</code> (all resources). Each API in the
                *                 <code>ActionNames</code> parameter is evaluated for each resource in this list. The
                *             simulation determines the access result (allowed or denied) of each combination and
                *             reports it in the response. You can simulate resources that don't exist in your
                *             account.</p>
                *         <p>The simulation does not automatically retrieve policies for the specified resources.
                *             If you want to include a resource policy in the simulation, then you must include the
                *             policy as a string in the <code>ResourcePolicy</code> parameter.</p>
                *         <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the
                *             resources included in the simulation or you receive an invalid input error.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            ResourceArns?: string[];
            /**
                * <p>A resource-based policy to include in the simulation provided as a string. Each
                *             resource in the simulation is treated as if it had this policy attached. You can include
                *             only one resource-based policy in a simulation.</p>
                *         <p>The maximum length of the policy document that you can pass in this operation,
                *             including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            ResourcePolicy?: string;
            /**
                * <p>An ARN representing the Amazon Web Services account ID that specifies the owner of any simulated
                *             resource that does not identify its owner in the resource ARN. Examples of resource ARNs
                *             include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also
                *             used as the account owner of any <code>ResourcePolicy</code> included in the simulation.
                *             If the <code>ResourceOwner</code> parameter is not specified, then the owner of the
                *             resources and the resource policy defaults to the account of the identity provided in
                *                 <code>CallerArn</code>. This parameter is required only if you specify a
                *             resource-based policy and account that owns the resource is different from the account
                *             that owns the simulated calling user <code>CallerArn</code>.</p>
                *         <p>The ARN for an account uses the following syntax:
                *                     <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example,
                *             to represent the account with the 112233445566 ID, use the following ARN:
                *                 <code>arn:aws:iam::112233445566-ID:root</code>. </p>
                */
            ResourceOwner?: string;
            /**
                * <p>The ARN of the IAM user that you want to use as the simulated caller of the API
                *             operations. <code>CallerArn</code> is required if you include a
                *                 <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has
                *             a value to use in evaluating the policy.</p>
                *         <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an
                *             assumed role, federated user, or a service principal.</p>
                */
            CallerArn?: string;
            /**
                * <p>A list of context keys and corresponding values for the simulation to use. Whenever a
                *             context key is evaluated in one of the simulated IAM permissions policies, the
                *             corresponding value is supplied.</p>
                */
            ContextEntries?: ContextEntry[];
            /**
                * <p>Specifies the type of simulation to run. Different API operations that support
                *             resource-based policies require different combinations of resources. By specifying the
                *             type of simulation to run, you enable the policy simulator to enforce the presence of
                *             the required resources to ensure reliable simulation results. If your simulation does
                *             not match one of the following scenarios, then you can omit this parameter. The
                *             following list shows each of the supported scenario values and the resources that you
                *             must define to run the simulation.</p>
                *         <p>Each of the EC2 scenarios requires that you specify instance, image, and
                *             security-group resources. If your scenario includes an EBS volume, then you must specify
                *             that volume as a resource. If the EC2 scenario includes VPC, then you must supply the
                *             network-interface resource. If it includes an IP subnet, then you must specify the
                *             subnet resource. For more information on the EC2 scenario options, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported platforms</a> in the <i>Amazon EC2 User
                *             Guide</i>.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <b>EC2-Classic-InstanceStore</b>
                *                 </p>
                *                 <p>instance, image, security-group</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <b>EC2-Classic-EBS</b>
                *                 </p>
                *                 <p>instance, image, security-group, volume</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <b>EC2-VPC-InstanceStore</b>
                *                 </p>
                *                 <p>instance, image, security-group, network-interface</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <b>EC2-VPC-InstanceStore-Subnet</b>
                *                 </p>
                *                 <p>instance, image, security-group, network-interface, subnet</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <b>EC2-VPC-EBS</b>
                *                 </p>
                *                 <p>instance, image, security-group, network-interface, volume</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <b>EC2-VPC-EBS-Subnet</b>
                *                 </p>
                *                 <p>instance, image, security-group, network-interface, subnet, volume</p>
                *             </li>
                *          </ul>
                */
            ResourceHandlingOption?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
    }
    export namespace SimulateCustomPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SimulateCustomPolicyRequest) => any;
    }
    export enum PolicyEvaluationDecisionType {
            ALLOWED = "allowed",
            EXPLICIT_DENY = "explicitDeny",
            IMPLICIT_DENY = "implicitDeny"
    }
    /**
        * <p>Contains the row and column of a location of a <code>Statement</code> element in a
        *          policy document.</p>
        *          <p>This data type is used as a member of the <code>
        *                <a>Statement</a>
        *             </code> type.</p>
        */
    export interface Position {
            /**
                * <p>The line containing the specified position in the document.</p>
                */
            Line?: number;
            /**
                * <p>The column in the line containing the specified position in the document.</p>
                */
            Column?: number;
    }
    export namespace Position {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Position) => any;
    }
    export enum PolicySourceType {
            AWS_MANAGED = "aws-managed",
            GROUP = "group",
            NONE = "none",
            RESOURCE = "resource",
            ROLE = "role",
            USER = "user",
            USER_MANAGED = "user-managed"
    }
    /**
        * <p>Contains a reference to a <code>Statement</code> element in a policy document that
        *          determines the result of the simulation.</p>
        *          <p>This data type is used by the <code>MatchedStatements</code> member of the <code>
        *                <a>EvaluationResult</a>
        *             </code> type.</p>
        */
    export interface Statement {
            /**
                * <p>The identifier of the policy that was provided as an input.</p>
                */
            SourcePolicyId?: string;
            /**
                * <p>The type of the policy.</p>
                */
            SourcePolicyType?: PolicySourceType | string;
            /**
                * <p>The row and column of the beginning of the <code>Statement</code> in an IAM
                *          policy.</p>
                */
            StartPosition?: Position;
            /**
                * <p>The row and column of the end of a <code>Statement</code> in an IAM policy.</p>
                */
            EndPosition?: Position;
    }
    export namespace Statement {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Statement) => any;
    }
    /**
        * <p>Contains information about the effect that Organizations has on a policy simulation.</p>
        */
    export interface OrganizationsDecisionDetail {
            /**
                * <p>Specifies whether the simulated operation is allowed by the Organizations service control
                *          policies that impact the simulated user's account.</p>
                */
            AllowedByOrganizations?: boolean;
    }
    export namespace OrganizationsDecisionDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: OrganizationsDecisionDetail) => any;
    }
    /**
        * <p>Contains information about the effect that a permissions boundary has on a policy
        *          simulation when the boundary is applied to an IAM entity.</p>
        */
    export interface PermissionsBoundaryDecisionDetail {
            /**
                * <p>Specifies whether an action is allowed by a permissions boundary that is applied to an
                *          IAM entity (user or role). A value of <code>true</code> means that the permissions
                *          boundary does not deny the action. This means that the policy includes an
                *             <code>Allow</code> statement that matches the request. In this case, if an
                *          identity-based policy also allows the action, the request is allowed. A value of
                *             <code>false</code> means that either the requested action is not allowed (implicitly
                *          denied) or that the action is explicitly denied by the permissions boundary. In both of
                *          these cases, the action is not allowed, regardless of the identity-based policy.</p>
                */
            AllowedByPermissionsBoundary?: boolean;
    }
    export namespace PermissionsBoundaryDecisionDetail {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PermissionsBoundaryDecisionDetail) => any;
    }
    /**
        * <p>Contains the result of the simulation of a single API operation call on a single
        *          resource.</p>
        *          <p>This data type is used by a member of the <a>EvaluationResult</a> data
        *          type.</p>
        */
    export interface ResourceSpecificResult {
            /**
                * <p>The name of the simulated resource, in Amazon Resource Name (ARN) format.</p>
                */
            EvalResourceName: string | undefined;
            /**
                * <p>The result of the simulation of the simulated API operation on the resource specified in
                *             <code>EvalResourceName</code>.</p>
                */
            EvalResourceDecision: PolicyEvaluationDecisionType | string | undefined;
            /**
                * <p>A list of the statements in the input policies that determine the result for this part
                *          of the simulation. Remember that even if multiple statements allow the operation on the
                *          resource, if <i>any</i> statement denies that operation, then the explicit
                *          deny overrides any allow. In addition, the deny statement is the only entry included in the
                *          result.</p>
                */
            MatchedStatements?: Statement[];
            /**
                * <p>A list of context keys that are required by the included input policies but that were
                *          not provided by one of the input parameters. This list is used when a list of ARNs is
                *          included in the <code>ResourceArns</code> parameter instead of "*". If you do not specify
                *          individual resources, by setting <code>ResourceArns</code> to "*" or by not including the
                *             <code>ResourceArns</code> parameter, then any missing context values are instead
                *          included under the <code>EvaluationResults</code> section. To discover the context keys
                *          used by a set of policies, you can call <a>GetContextKeysForCustomPolicy</a> or
                *             <a>GetContextKeysForPrincipalPolicy</a>.</p>
                */
            MissingContextValues?: string[];
            /**
                * <p>Additional details about the results of the evaluation decision on a single resource.
                *          This parameter is returned only for cross-account simulations. This parameter explains how
                *          each policy type contributes to the resource-specific evaluation decision.</p>
                */
            EvalDecisionDetails?: Record<string, PolicyEvaluationDecisionType | string>;
            /**
                * <p>Contains information about the effect that a permissions boundary has on a policy
                *          simulation when that boundary is applied to an IAM entity.</p>
                */
            PermissionsBoundaryDecisionDetail?: PermissionsBoundaryDecisionDetail;
    }
    export namespace ResourceSpecificResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ResourceSpecificResult) => any;
    }
    /**
        * <p>Contains the results of a simulation.</p>
        *          <p>This data type is used by the return parameter of <code>
        *                <a>SimulateCustomPolicy</a>
        *             </code> and <code>
        *                <a>SimulatePrincipalPolicy</a>
        *             </code>.</p>
        */
    export interface EvaluationResult {
            /**
                * <p>The name of the API operation tested on the indicated resource.</p>
                */
            EvalActionName: string | undefined;
            /**
                * <p>The ARN of the resource that the indicated API operation was tested on.</p>
                */
            EvalResourceName?: string;
            /**
                * <p>The result of the simulation.</p>
                */
            EvalDecision: PolicyEvaluationDecisionType | string | undefined;
            /**
                * <p>A list of the statements in the input policies that determine the result for this
                *          scenario. Remember that even if multiple statements allow the operation on the resource, if
                *          only one statement denies that operation, then the explicit deny overrides any allow. In
                *          addition, the deny statement is the only entry included in the result.</p>
                */
            MatchedStatements?: Statement[];
            /**
                * <p>A list of context keys that are required by the included input policies but that were
                *          not provided by one of the input parameters. This list is used when the resource in a
                *          simulation is "*", either explicitly, or when the <code>ResourceArns</code> parameter
                *          blank. If you include a list of resources, then any missing context values are instead
                *          included under the <code>ResourceSpecificResults</code> section. To discover the context
                *          keys used by a set of policies, you can call <a>GetContextKeysForCustomPolicy</a> or <a>GetContextKeysForPrincipalPolicy</a>.</p>
                */
            MissingContextValues?: string[];
            /**
                * <p>A structure that details how Organizations and its service control policies affect the results of
                *          the simulation. Only applies if the simulated user's account is part of an
                *          organization.</p>
                */
            OrganizationsDecisionDetail?: OrganizationsDecisionDetail;
            /**
                * <p>Contains information about the effect that a permissions boundary has on a policy
                *          simulation when the boundary is applied to an IAM entity.</p>
                */
            PermissionsBoundaryDecisionDetail?: PermissionsBoundaryDecisionDetail;
            /**
                * <p>Additional details about the results of the cross-account evaluation decision. This
                *          parameter is populated for only cross-account simulations. It contains a brief summary of
                *          how each policy type contributes to the final evaluation decision.</p>
                *          <p>If the simulation evaluates policies within the same account and includes a resource
                *          ARN, then the parameter is present but the response is empty. If the simulation evaluates
                *          policies within the same account and specifies all resources (<code>*</code>), then the
                *          parameter is not returned.</p>
                *          <p>When you make a cross-account request, Amazon Web Services evaluates the request in the trusting
                *          account and the trusted account. The request is allowed only if both evaluations return
                *             <code>true</code>. For more information about how policies are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies within a single account</a>.</p>
                *          <p>If an Organizations SCP included in the evaluation denies access, the simulation ends. In
                *          this case, policy evaluation does not proceed any further and this parameter is not
                *          returned.</p>
                */
            EvalDecisionDetails?: Record<string, PolicyEvaluationDecisionType | string>;
            /**
                * <p>The individual results of the simulation of the API operation specified in
                *          EvalActionName on each resource.</p>
                */
            ResourceSpecificResults?: ResourceSpecificResult[];
    }
    export namespace EvaluationResult {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EvaluationResult) => any;
    }
    /**
        * <p>Contains the response to a successful <a>SimulatePrincipalPolicy</a> or
        *       <a>SimulateCustomPolicy</a> request.</p>
        */
    export interface SimulatePolicyResponse {
            /**
                * <p>The results of the simulation.</p>
                */
            EvaluationResults?: EvaluationResult[];
            /**
                * <p>A flag that indicates whether there are more items to return. If your
                *     results were truncated, you can make a subsequent pagination request using the <code>Marker</code>
                *     request parameter to retrieve more items. Note that IAM might return fewer than the
                *     <code>MaxItems</code> number of results even when there are more results available. We recommend
                *     that you check <code>IsTruncated</code> after every call to ensure that you receive all your
                *     results.</p>
                */
            IsTruncated?: boolean;
            /**
                * <p>When <code>IsTruncated</code> is <code>true</code>, this element
                *     is present and contains the value to use for the <code>Marker</code> parameter in a subsequent
                *     pagination request.</p>
                */
            Marker?: string;
    }
    export namespace SimulatePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SimulatePolicyResponse) => any;
    }
    export interface SimulatePrincipalPolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of a user, group, or role whose policies you want to
                *             include in the simulation. If you specify a user, group, or role, the simulation
                *             includes all policies that are associated with that entity. If you specify a user, the
                *             simulation also includes all policies that are attached to any groups the user belongs
                *             to.</p>
                *         <p>The maximum length of the policy document that you can pass in this operation,
                *             including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            PolicySourceArn: string | undefined;
            /**
                * <p>An optional list of additional policy documents to include in the simulation. Each
                *             document is specified as a string containing the complete, valid JSON text of an IAM
                *             policy.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            PolicyInputList?: string[];
            /**
                * <p>The IAM permissions boundary policy to simulate. The permissions boundary sets the
                *             maximum permissions that the entity can have. You can input only one permissions
                *             boundary when you pass a policy to this operation. An IAM entity can only have one
                *             permissions boundary in effect at a time. For example, if a permissions boundary is
                *             attached to an entity and you pass in a different permissions boundary policy using this
                *             parameter, then the new permissions boundary policy is used for the simulation. For more
                *             information about permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM
                *                 entities</a> in the <i>IAM User Guide</i>. The policy input is
                *             specified as a string containing the complete, valid JSON text of a permissions boundary
                *             policy.</p>
                *         <p>The maximum length of the policy document that you can pass in this operation,
                *             including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            PermissionsBoundaryPolicyInputList?: string[];
            /**
                * <p>A list of names of API operations to evaluate in the simulation. Each operation is
                *             evaluated for each resource. Each operation must include the service identifier, such as
                *                 <code>iam:CreateUser</code>.</p>
                */
            ActionNames: string[] | undefined;
            /**
                * <p>A list of ARNs of Amazon Web Services resources to include in the simulation. If this parameter is
                *             not provided, then the value defaults to <code>*</code> (all resources). Each API in the
                *                 <code>ActionNames</code> parameter is evaluated for each resource in this list. The
                *             simulation determines the access result (allowed or denied) of each combination and
                *             reports it in the response. You can simulate resources that don't exist in your
                *             account.</p>
                *         <p>The simulation does not automatically retrieve policies for the specified resources.
                *             If you want to include a resource policy in the simulation, then you must include the
                *             policy as a string in the <code>ResourcePolicy</code> parameter.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            ResourceArns?: string[];
            /**
                * <p>A resource-based policy to include in the simulation provided as a string. Each
                *             resource in the simulation is treated as if it had this policy attached. You can include
                *             only one resource-based policy in a simulation.</p>
                *         <p>The maximum length of the policy document that you can pass in this operation,
                *             including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            ResourcePolicy?: string;
            /**
                * <p>An Amazon Web Services account ID that specifies the owner of any simulated resource that does not
                *             identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket
                *             or object. If <code>ResourceOwner</code> is specified, it is also used as the account
                *             owner of any <code>ResourcePolicy</code> included in the simulation. If the
                *                 <code>ResourceOwner</code> parameter is not specified, then the owner of the
                *             resources and the resource policy defaults to the account of the identity provided in
                *                 <code>CallerArn</code>. This parameter is required only if you specify a
                *             resource-based policy and account that owns the resource is different from the account
                *             that owns the simulated calling user <code>CallerArn</code>.</p>
                */
            ResourceOwner?: string;
            /**
                * <p>The ARN of the IAM user that you want to specify as the simulated caller of the API
                *             operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of
                *             the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If
                *             you include both a <code>PolicySourceArn</code> (for example,
                *                 <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for
                *             example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you
                *             simulate calling the API operations as Bob, as if Bob had David's policies.</p>
                *         <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an
                *             assumed role, federated user, or a service principal.</p>
                *         <p>
                *             <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and
                *             the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so
                *             that the resource-based policy's <code>Principal</code> element has a value to use in
                *             evaluating the policy.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            CallerArn?: string;
            /**
                * <p>A list of context keys and corresponding values for the simulation to use. Whenever a
                *             context key is evaluated in one of the simulated IAM permissions policies, the
                *             corresponding value is supplied.</p>
                */
            ContextEntries?: ContextEntry[];
            /**
                * <p>Specifies the type of simulation to run. Different API operations that support
                *             resource-based policies require different combinations of resources. By specifying the
                *             type of simulation to run, you enable the policy simulator to enforce the presence of
                *             the required resources to ensure reliable simulation results. If your simulation does
                *             not match one of the following scenarios, then you can omit this parameter. The
                *             following list shows each of the supported scenario values and the resources that you
                *             must define to run the simulation.</p>
                *         <p>Each of the EC2 scenarios requires that you specify instance, image, and security
                *             group resources. If your scenario includes an EBS volume, then you must specify that
                *             volume as a resource. If the EC2 scenario includes VPC, then you must supply the network
                *             interface resource. If it includes an IP subnet, then you must specify the subnet
                *             resource. For more information on the EC2 scenario options, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported platforms</a> in the <i>Amazon EC2 User
                *             Guide</i>.</p>
                *         <ul>
                *             <li>
                *                 <p>
                *                     <b>EC2-Classic-InstanceStore</b>
                *                 </p>
                *                 <p>instance, image, security group</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <b>EC2-Classic-EBS</b>
                *                 </p>
                *                 <p>instance, image, security group, volume</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <b>EC2-VPC-InstanceStore</b>
                *                 </p>
                *                 <p>instance, image, security group, network interface</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <b>EC2-VPC-InstanceStore-Subnet</b>
                *                 </p>
                *                 <p>instance, image, security group, network interface, subnet</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <b>EC2-VPC-EBS</b>
                *                 </p>
                *                 <p>instance, image, security group, network interface, volume</p>
                *             </li>
                *             <li>
                *                 <p>
                *                     <b>EC2-VPC-EBS-Subnet</b>
                *                 </p>
                *                 <p>instance, image, security group, network interface, subnet, volume</p>
                *             </li>
                *          </ul>
                */
            ResourceHandlingOption?: string;
            /**
                * <p>Use this only when paginating results to indicate the
                *     maximum number of items you want in the response. If additional items exist beyond the maximum
                *     you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p>
                *          <p>If you do not include this parameter, the number of items defaults to 100. Note that
                *     IAM might return fewer results, even when there are more results available. In that case, the
                *     <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code>
                *     contains a value to include in the subsequent call that tells the service where to continue
                *     from.</p>
                */
            MaxItems?: number;
            /**
                * <p>Use this parameter only when paginating results and only after
                *     you receive a response indicating that the results are truncated. Set it to the value of the
                *     <code>Marker</code> element in the response that you received to indicate where the next call
                *     should start.</p>
                */
            Marker?: string;
    }
    export namespace SimulatePrincipalPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SimulatePrincipalPolicyRequest) => any;
    }
    export interface TagInstanceProfileRequest {
            /**
                * <p>The name of the IAM instance profile to which you want to add tags.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            InstanceProfileName: string | undefined;
            /**
                * <p>The list of tags that you want to attach to the IAM instance profile.
                *       Each tag consists of a key name and an associated value.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagInstanceProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagInstanceProfileRequest) => any;
    }
    export interface TagMFADeviceRequest {
            /**
                * <p>The unique identifier for the IAM virtual MFA device to which you want to add tags.
                *       For virtual MFA devices, the serial number is the same as the ARN.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            SerialNumber: string | undefined;
            /**
                * <p>The list of tags that you want to attach to the IAM virtual MFA device.
                *       Each tag consists of a key name and an associated value.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagMFADeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagMFADeviceRequest) => any;
    }
    export interface TagOpenIDConnectProviderRequest {
            /**
                * <p>The ARN of the OIDC identity provider in IAM to which you want to add tags.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            OpenIDConnectProviderArn: string | undefined;
            /**
                * <p>The list of tags that you want to attach to the OIDC identity provider in IAM.
                *       Each tag consists of a key name and an associated value.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagOpenIDConnectProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagOpenIDConnectProviderRequest) => any;
    }
    export interface TagPolicyRequest {
            /**
                * <p>The ARN of the IAM customer managed policy to which you want to add tags.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            PolicyArn: string | undefined;
            /**
                * <p>The list of tags that you want to attach to the IAM customer managed policy.
                *       Each tag consists of a key name and an associated value.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagPolicyRequest) => any;
    }
    export interface TagRoleRequest {
            /**
                * <p>The name of the IAM role to which you want to add tags.</p>
                *          <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
            /**
                * <p>The list of tags that you want to attach to the IAM role. Each tag consists of a key name and an associated value.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagRoleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagRoleRequest) => any;
    }
    export interface TagSAMLProviderRequest {
            /**
                * <p>The ARN of the SAML identity provider in IAM to which you want to add tags.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            SAMLProviderArn: string | undefined;
            /**
                * <p>The list of tags that you want to attach to the SAML identity provider in IAM.
                *       Each tag consists of a key name and an associated value.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagSAMLProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagSAMLProviderRequest) => any;
    }
    export interface TagServerCertificateRequest {
            /**
                * <p>The name of the IAM server certificate to which you want to add tags.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            ServerCertificateName: string | undefined;
            /**
                * <p>The list of tags that you want to attach to the IAM server certificate.
                *       Each tag consists of a key name and an associated value.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagServerCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagServerCertificateRequest) => any;
    }
    export interface TagUserRequest {
            /**
                * <p>The name of the IAM user to which you want to add tags.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The list of tags that you want to attach to the IAM user. Each tag consists of a key name and an associated value.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagUserRequest) => any;
    }
    export interface UntagInstanceProfileRequest {
            /**
                * <p>The name of the IAM instance profile from which you want to remove tags.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            InstanceProfileName: string | undefined;
            /**
                * <p>A list of key names as a simple array of strings. The tags with matching keys are
                *       removed from the specified instance profile.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagInstanceProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagInstanceProfileRequest) => any;
    }
    export interface UntagMFADeviceRequest {
            /**
                * <p>The unique identifier for the IAM virtual MFA device from which you want to remove
                *       tags. For virtual MFA devices, the serial number is the same as the ARN.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            SerialNumber: string | undefined;
            /**
                * <p>A list of key names as a simple array of strings. The tags with matching keys are
                *       removed from the specified instance profile.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagMFADeviceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagMFADeviceRequest) => any;
    }
    export interface UntagOpenIDConnectProviderRequest {
            /**
                * <p>The ARN of the OIDC provider in IAM from which you want to remove tags.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            OpenIDConnectProviderArn: string | undefined;
            /**
                * <p>A list of key names as a simple array of strings. The tags with matching keys are
                *       removed from the specified OIDC provider.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagOpenIDConnectProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagOpenIDConnectProviderRequest) => any;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_1' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { IAMServiceException as __BaseException } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/IAMServiceException";
    import { Role, ServerCertificateMetadata, SigningCertificate, SSHPublicKey, StatusType, Tag } from "@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/models_0";
    export interface UntagPolicyRequest {
            /**
                * <p>The ARN of the IAM customer managed policy from which you want to remove
                *       tags.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            PolicyArn: string | undefined;
            /**
                * <p>A list of key names as a simple array of strings. The tags with matching keys are
                *       removed from the specified policy.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagPolicyRequest) => any;
    }
    export interface UntagRoleRequest {
            /**
                * <p>The name of the IAM role from which you want to remove tags.</p>
                *          <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
            /**
                * <p>A list of key names as a simple array of strings. The tags with matching keys are
                *       removed from the specified role.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagRoleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagRoleRequest) => any;
    }
    export interface UntagSAMLProviderRequest {
            /**
                * <p>The ARN of the SAML identity provider in IAM from which you want to remove
                *       tags.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            SAMLProviderArn: string | undefined;
            /**
                * <p>A list of key names as a simple array of strings. The tags with matching keys are
                *       removed from the specified SAML identity provider.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagSAMLProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagSAMLProviderRequest) => any;
    }
    export interface UntagServerCertificateRequest {
            /**
                * <p>The name of the IAM server certificate from which you want to remove tags.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            ServerCertificateName: string | undefined;
            /**
                * <p>A list of key names as a simple array of strings. The tags with matching keys are
                *       removed from the specified IAM server certificate.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagServerCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagServerCertificateRequest) => any;
    }
    export interface UntagUserRequest {
            /**
                * <p>The name of the IAM user from which you want to remove tags.</p>
                *          <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>A list of key names as a simple array of strings. The tags with matching keys are
                *       removed from the specified user.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagUserRequest) => any;
    }
    export interface UpdateAccessKeyRequest {
            /**
                * <p>The name of the user whose key you want to update.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
            /**
                * <p>The access key ID of the secret access key you want to update.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can
                *     consist of any upper or lowercased letter or digit.</p>
                */
            AccessKeyId: string | undefined;
            /**
                * <p> The status you want to assign to the secret access key. <code>Active</code> means
                *             that the key can be used for programmatic calls to Amazon Web Services, while <code>Inactive</code>
                *             means that the key cannot be used.</p>
                */
            Status: StatusType | string | undefined;
    }
    export namespace UpdateAccessKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAccessKeyRequest) => any;
    }
    export interface UpdateAccountPasswordPolicyRequest {
            /**
                * <p>The minimum number of characters allowed in an IAM user password.</p>
                *         <p>If you do not specify a value for this parameter, then the operation uses the default
                *             value of <code>6</code>.</p>
                */
            MinimumPasswordLength?: number;
            /**
                * <p>Specifies whether IAM user passwords must contain at least one of the following
                *             non-alphanumeric characters:</p>
                *         <p>! @ # $ % ^ & * ( ) _ + - = [ ] { } | '</p>
                *         <p>If you do not specify a value for this parameter, then the operation uses the default
                *             value of <code>false</code>. The result is that passwords do not require at least one
                *             symbol character.</p>
                */
            RequireSymbols?: boolean;
            /**
                * <p>Specifies whether IAM user passwords must contain at least one numeric character (0
                *             to 9).</p>
                *         <p>If you do not specify a value for this parameter, then the operation uses the default
                *             value of <code>false</code>. The result is that passwords do not require at least one
                *             numeric character.</p>
                */
            RequireNumbers?: boolean;
            /**
                * <p>Specifies whether IAM user passwords must contain at least one uppercase character
                *             from the ISO basic Latin alphabet (A to Z).</p>
                *         <p>If you do not specify a value for this parameter, then the operation uses the default
                *             value of <code>false</code>. The result is that passwords do not require at least one
                *             uppercase character.</p>
                */
            RequireUppercaseCharacters?: boolean;
            /**
                * <p>Specifies whether IAM user passwords must contain at least one lowercase character
                *             from the ISO basic Latin alphabet (a to z).</p>
                *         <p>If you do not specify a value for this parameter, then the operation uses the default
                *             value of <code>false</code>. The result is that passwords do not require at least one
                *             lowercase character.</p>
                */
            RequireLowercaseCharacters?: boolean;
            /**
                * <p> Allows all IAM users in your account to use the Amazon Web Services Management Console to change their own
                *             passwords. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_enable-user-change.html">Permitting
                *                 IAM users to change their own passwords</a> in the
                *                 <i>IAM User Guide</i>.</p>
                *         <p>If you do not specify a value for this parameter, then the operation uses the default
                *             value of <code>false</code>. The result is that IAM users in the account do not
                *             automatically have permissions to change their own password.</p>
                */
            AllowUsersToChangePassword?: boolean;
            /**
                * <p>The number of days that an IAM user password is valid.</p>
                *         <p>If you do not specify a value for this parameter, then the operation uses the default
                *             value of <code>0</code>. The result is that IAM user passwords never expire.</p>
                */
            MaxPasswordAge?: number;
            /**
                * <p>Specifies the number of previous passwords that IAM users are prevented from
                *             reusing.</p>
                *         <p>If you do not specify a value for this parameter, then the operation uses the default
                *             value of <code>0</code>. The result is that IAM users are not prevented from reusing
                *             previous passwords.</p>
                */
            PasswordReusePrevention?: number;
            /**
                * <p> Prevents IAM users who are accessing the account via the Amazon Web Services Management Console from setting a
                *             new console password after their password has expired. The IAM user cannot access the
                *             console until an administrator resets the password.</p>
                *         <p>If you do not specify a value for this parameter, then the operation uses the default
                *             value of <code>false</code>. The result is that IAM users can change their passwords
                *             after they expire and continue to sign in as the user.</p>
                *         <note>
                *             <p> In the Amazon Web Services Management Console, the custom password policy option <b>Allow
                *                     users to change their own password</b> gives IAM users permissions to
                *                     <code>iam:ChangePassword</code> for only their user and to the
                *                     <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a
                *                 permissions policy to each user, rather the permissions are applied at the
                *                 account-level for all users by IAM. IAM users with
                *                     <code>iam:ChangePassword</code> permission and active access keys can reset
                *                 their own expired console password using the CLI or API.</p>
                *         </note>
                */
            HardExpiry?: boolean;
    }
    export namespace UpdateAccountPasswordPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAccountPasswordPolicyRequest) => any;
    }
    export interface UpdateAssumeRolePolicyRequest {
            /**
                * <p>The name of the role to update with the new policy.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            RoleName: string | undefined;
            /**
                * <p>The policy that grants an entity permission to assume the role.</p>
                *         <p>You must provide policies in JSON format in IAM. However, for CloudFormation
                *             templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to
                *             IAM.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            PolicyDocument: string | undefined;
    }
    export namespace UpdateAssumeRolePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateAssumeRolePolicyRequest) => any;
    }
    export interface UpdateGroupRequest {
            /**
                * <p>Name of the IAM group to update. If you're changing the name of the group, this is
                *             the original name.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            GroupName: string | undefined;
            /**
                * <p>New path for the IAM group. Only include this if changing the group's path.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            NewPath?: string;
            /**
                * <p>New name for the IAM group. Only include this if changing the group's name.</p>
                *         <p>IAM user, group, role, and policy names must be unique within the account. Names are
                *             not distinguished by case. For example, you cannot create resources named both
                *             "MyResource" and "myresource".</p>
                */
            NewGroupName?: string;
    }
    export namespace UpdateGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateGroupRequest) => any;
    }
    export interface UpdateLoginProfileRequest {
            /**
                * <p>The name of the user whose password you want to update.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The new password for the specified IAM user.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                *         <p>However, the format can be further restricted by the account administrator by setting
                *             a password policy on the Amazon Web Services account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p>
                */
            Password?: string;
            /**
                * <p>Allows this new password to be used only once by requiring the specified IAM user to
                *             set a new password on next sign-in.</p>
                */
            PasswordResetRequired?: boolean;
    }
    export namespace UpdateLoginProfileRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLoginProfileRequest) => any;
    }
    export interface UpdateOpenIDConnectProviderThumbprintRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the IAM OIDC provider resource object for which
                *             you want to update the thumbprint. You can get a list of OIDC provider ARNs by using the
                *                 <a>ListOpenIDConnectProviders</a> operation.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            OpenIDConnectProviderArn: string | undefined;
            /**
                * <p>A list of certificate thumbprints that are associated with the specified IAM OpenID
                *             Connect provider. For more information, see <a>CreateOpenIDConnectProvider</a>. </p>
                */
            ThumbprintList: string[] | undefined;
    }
    export namespace UpdateOpenIDConnectProviderThumbprintRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateOpenIDConnectProviderThumbprintRequest) => any;
    }
    export interface UpdateRoleRequest {
            /**
                * <p>The name of the role that you want to modify.</p>
                */
            RoleName: string | undefined;
            /**
                * <p>The new description that you want to apply to the specified role.</p>
                */
            Description?: string;
            /**
                * <p>The maximum session duration (in seconds) that you want to set for the specified role.
                *             If you do not specify a value for this setting, the default value of one hour is
                *             applied. This setting can have a value from 1 hour to 12 hours.</p>
                *         <p>Anyone who assumes the role from the CLI or API can use the
                *                 <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI
                *             parameter to request a longer session. The <code>MaxSessionDuration</code> setting
                *             determines the maximum duration that can be requested using the
                *                 <code>DurationSeconds</code> parameter. If users don't specify a value for the
                *                 <code>DurationSeconds</code> parameter, their security credentials are valid for one
                *             hour by default. This applies when you use the <code>AssumeRole*</code> API operations
                *             or the <code>assume-role*</code> CLI operations but does not apply when you use those
                *             operations to create a console URL. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM
                *                 roles</a> in the <i>IAM User Guide</i>.</p>
                */
            MaxSessionDuration?: number;
    }
    export namespace UpdateRoleRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRoleRequest) => any;
    }
    export interface UpdateRoleResponse {
    }
    export namespace UpdateRoleResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRoleResponse) => any;
    }
    export interface UpdateRoleDescriptionRequest {
            /**
                * <p>The name of the role that you want to modify.</p>
                */
            RoleName: string | undefined;
            /**
                * <p>The new description that you want to apply to the specified role.</p>
                */
            Description: string | undefined;
    }
    export namespace UpdateRoleDescriptionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRoleDescriptionRequest) => any;
    }
    export interface UpdateRoleDescriptionResponse {
            /**
                * <p>A structure that contains details about the modified role.</p>
                */
            Role?: Role;
    }
    export namespace UpdateRoleDescriptionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRoleDescriptionResponse) => any;
    }
    export interface UpdateSAMLProviderRequest {
            /**
                * <p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The
                *             document includes the issuer's name, expiration information, and keys that can be used
                *             to validate the SAML authentication response (assertions) that are received from the
                *             IdP. You must generate the metadata document using the identity management software that
                *             is used as your organization's IdP.</p>
                */
            SAMLMetadataDocument: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the SAML provider to update.</p>
                *         <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p>
                */
            SAMLProviderArn: string | undefined;
    }
    export namespace UpdateSAMLProviderRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSAMLProviderRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>UpdateSAMLProvider</a> request.
        *     </p>
        */
    export interface UpdateSAMLProviderResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the SAML provider that was updated.</p>
                */
            SAMLProviderArn?: string;
    }
    export namespace UpdateSAMLProviderResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSAMLProviderResponse) => any;
    }
    export interface UpdateServerCertificateRequest {
            /**
                * <p>The name of the server certificate that you want to update.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            ServerCertificateName: string | undefined;
            /**
                * <p>The new path for the server certificate. Include this only if you are updating the
                *             server certificate's path.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            NewPath?: string;
            /**
                * <p>The new name for the server certificate. Include this only if you are updating the
                *             server certificate's name. The name of the certificate cannot contain any spaces.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            NewServerCertificateName?: string;
    }
    export namespace UpdateServerCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateServerCertificateRequest) => any;
    }
    export interface UpdateServiceSpecificCredentialRequest {
            /**
                * <p>The name of the IAM user associated with the service-specific credential. If you do
                *             not specify this value, then the operation assumes the user whose credentials are used
                *             to call the operation.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
            /**
                * <p>The unique identifier of the service-specific credential.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can
                *     consist of any upper or lowercased letter or digit.</p>
                */
            ServiceSpecificCredentialId: string | undefined;
            /**
                * <p>The status to be assigned to the service-specific credential.</p>
                */
            Status: StatusType | string | undefined;
    }
    export namespace UpdateServiceSpecificCredentialRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateServiceSpecificCredentialRequest) => any;
    }
    export interface UpdateSigningCertificateRequest {
            /**
                * <p>The name of the IAM user the signing certificate belongs to.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
            /**
                * <p>The ID of the signing certificate you want to update.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can
                *     consist of any upper or lowercased letter or digit.</p>
                */
            CertificateId: string | undefined;
            /**
                * <p> The status you want to assign to the certificate. <code>Active</code> means that the
                *             certificate can be used for programmatic calls to Amazon Web Services <code>Inactive</code> means that
                *             the certificate cannot be used.</p>
                */
            Status: StatusType | string | undefined;
    }
    export namespace UpdateSigningCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSigningCertificateRequest) => any;
    }
    export interface UpdateSSHPublicKeyRequest {
            /**
                * <p>The name of the IAM user associated with the SSH public key.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The unique identifier for the SSH public key.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can
                *     consist of any upper or lowercased letter or digit.</p>
                */
            SSHPublicKeyId: string | undefined;
            /**
                * <p>The status to assign to the SSH public key. <code>Active</code> means that the key can
                *             be used for authentication with an CodeCommit repository. <code>Inactive</code> means that
                *             the key cannot be used.</p>
                */
            Status: StatusType | string | undefined;
    }
    export namespace UpdateSSHPublicKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSSHPublicKeyRequest) => any;
    }
    export interface UpdateUserRequest {
            /**
                * <p>Name of the user to update. If you're changing the name of the user, this is the
                *             original user name.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>New path for the IAM user. Include this parameter only if you're changing the user's
                *             path.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                */
            NewPath?: string;
            /**
                * <p>New name for the user. Include this parameter only if you're changing the user's
                *             name.</p>
                *         <p>IAM user, group, role, and policy names must be unique within the account. Names are
                *             not distinguished by case. For example, you cannot create resources named both
                *             "MyResource" and "myresource".</p>
                */
            NewUserName?: string;
    }
    export namespace UpdateUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateUserRequest) => any;
    }
    /**
        * <p>The request was rejected because the public key certificate and the private key do not
        *       match.</p>
        */
    export class KeyPairMismatchException extends __BaseException {
            readonly name: "KeyPairMismatchException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<KeyPairMismatchException, __BaseException>);
    }
    /**
        * <p>The request was rejected because the certificate was malformed or expired. The error
        *       message describes the specific error.</p>
        */
    export class MalformedCertificateException extends __BaseException {
            readonly name: "MalformedCertificateException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MalformedCertificateException, __BaseException>);
    }
    export interface UploadServerCertificateRequest {
            /**
                * <p>The path for the server certificate. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM
                *                 identifiers</a> in the <i>IAM User Guide</i>.</p>
                *         <p>This parameter is optional. If it is not included, it defaults to a slash (/).
                *             This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting
                *     of either a forward slash (/) by itself or a string that must begin and end with forward slashes.
                *     In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including
                *     most punctuation characters, digits, and upper and lowercased letters.</p>
                *         <note>
                *             <p> If you are uploading a server certificate specifically for use with Amazon
                *                 CloudFront distributions, you must specify a path using the <code>path</code>
                *                 parameter. The path must begin with <code>/cloudfront</code> and must include a
                *                 trailing slash (for example, <code>/cloudfront/test/</code>).</p>
                *         </note>
                */
            Path?: string;
            /**
                * <p>The name for the server certificate. Do not include the path in this value. The name
                *             of the certificate cannot contain any spaces.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            ServerCertificateName: string | undefined;
            /**
                * <p>The contents of the public key certificate in PEM-encoded format.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            CertificateBody: string | undefined;
            /**
                * <p>The contents of the private key in PEM-encoded format.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            PrivateKey: string | undefined;
            /**
                * <p>The contents of the certificate chain. This is typically a concatenation of the
                *             PEM-encoded public key certificates of the chain.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            CertificateChain?: string;
            /**
                * <p>A list of tags that you want to attach to the new IAM server certificate resource.
                *       Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                *          <note>
                *             <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request
                *    fails and the resource is not created.</p>
                *          </note>
                */
            Tags?: Tag[];
    }
    export namespace UploadServerCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UploadServerCertificateRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>UploadServerCertificate</a>
        *       request. </p>
        */
    export interface UploadServerCertificateResponse {
            /**
                * <p>The meta information of the uploaded server certificate without its certificate body,
                *             certificate chain, and private key.</p>
                */
            ServerCertificateMetadata?: ServerCertificateMetadata;
            /**
                * <p>A list of tags that are attached to the new IAM server certificate. The returned list of tags is sorted by tag key.
                *       For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the
                *       <i>IAM User Guide</i>.</p>
                */
            Tags?: Tag[];
    }
    export namespace UploadServerCertificateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UploadServerCertificateResponse) => any;
    }
    /**
        * <p>The request was rejected because the same certificate is associated with an IAM user in
        *       the account.</p>
        */
    export class DuplicateCertificateException extends __BaseException {
            readonly name: "DuplicateCertificateException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateCertificateException, __BaseException>);
    }
    /**
        * <p>The request was rejected because the certificate is invalid.</p>
        */
    export class InvalidCertificateException extends __BaseException {
            readonly name: "InvalidCertificateException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidCertificateException, __BaseException>);
    }
    export interface UploadSigningCertificateRequest {
            /**
                * <p>The name of the user the signing certificate is for.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName?: string;
            /**
                * <p>The contents of the signing certificate.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            CertificateBody: string | undefined;
    }
    export namespace UploadSigningCertificateRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UploadSigningCertificateRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>UploadSigningCertificate</a>
        *       request. </p>
        */
    export interface UploadSigningCertificateResponse {
            /**
                * <p>Information about the certificate.</p>
                */
            Certificate: SigningCertificate | undefined;
    }
    export namespace UploadSigningCertificateResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UploadSigningCertificateResponse) => any;
    }
    /**
        * <p>The request was rejected because the SSH public key is already associated with the
        *       specified IAM user.</p>
        */
    export class DuplicateSSHPublicKeyException extends __BaseException {
            readonly name: "DuplicateSSHPublicKeyException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<DuplicateSSHPublicKeyException, __BaseException>);
    }
    /**
        * <p>The request was rejected because the public key is malformed or otherwise invalid.</p>
        */
    export class InvalidPublicKeyException extends __BaseException {
            readonly name: "InvalidPublicKeyException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidPublicKeyException, __BaseException>);
    }
    export interface UploadSSHPublicKeyRequest {
            /**
                * <p>The name of the IAM user to associate the SSH public key with.</p>
                *         <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric
                *     characters with no spaces. You can also include any of the following characters: _+=,.@-</p>
                */
            UserName: string | undefined;
            /**
                * <p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format.
                *             The minimum bit-length of the public key is 2048 bits. For example, you can generate a
                *             2048-bit key, and the resulting PEM file is 1679 bytes long.</p>
                *         <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a>
                *     used to validate this parameter is a string of characters consisting of the following:</p>
                *          <ul>
                *             <li>
                *                <p>Any printable ASCII
                *     character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p>
                *             </li>
                *             <li>
                *                <p>The printable characters in the Basic Latin and  Latin-1 Supplement character set
                *     (through <code>\u00FF</code>)</p>
                *             </li>
                *             <li>
                *                <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and
                *     carriage return (<code>\u000D</code>)</p>
                *             </li>
                *          </ul>
                */
            SSHPublicKeyBody: string | undefined;
    }
    export namespace UploadSSHPublicKeyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UploadSSHPublicKeyRequest) => any;
    }
    /**
        * <p>Contains the response to a successful <a>UploadSSHPublicKey</a>
        *       request.</p>
        */
    export interface UploadSSHPublicKeyResponse {
            /**
                * <p>Contains information about the SSH public key.</p>
                */
            SSHPublicKey?: SSHPublicKey;
    }
    export namespace UploadSSHPublicKeyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UploadSSHPublicKeyResponse) => any;
    }
}

declare module '@aws-sdk/client-iam/node_modules/@aws-sdk/client-iam/dist-types/models/IAMServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from IAM service.
        */
    export class IAMServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

