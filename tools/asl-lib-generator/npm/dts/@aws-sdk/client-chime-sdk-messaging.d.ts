// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   @aws-sdk/smithy-client

declare module '@aws-sdk/client-chime-sdk-messaging' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { ChimeSDKMessagingClient } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { AssociateChannelFlowCommandInput, AssociateChannelFlowCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/AssociateChannelFlowCommand";
    import { BatchCreateChannelMembershipCommandInput, BatchCreateChannelMembershipCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/BatchCreateChannelMembershipCommand";
    import { ChannelFlowCallbackCommandInput, ChannelFlowCallbackCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ChannelFlowCallbackCommand";
    import { CreateChannelBanCommandInput, CreateChannelBanCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelBanCommand";
    import { CreateChannelCommandInput, CreateChannelCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelCommand";
    import { CreateChannelFlowCommandInput, CreateChannelFlowCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelFlowCommand";
    import { CreateChannelMembershipCommandInput, CreateChannelMembershipCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelMembershipCommand";
    import { CreateChannelModeratorCommandInput, CreateChannelModeratorCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelModeratorCommand";
    import { DeleteChannelBanCommandInput, DeleteChannelBanCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelBanCommand";
    import { DeleteChannelCommandInput, DeleteChannelCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelCommand";
    import { DeleteChannelFlowCommandInput, DeleteChannelFlowCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelFlowCommand";
    import { DeleteChannelMembershipCommandInput, DeleteChannelMembershipCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelMembershipCommand";
    import { DeleteChannelMessageCommandInput, DeleteChannelMessageCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelMessageCommand";
    import { DeleteChannelModeratorCommandInput, DeleteChannelModeratorCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelModeratorCommand";
    import { DescribeChannelBanCommandInput, DescribeChannelBanCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelBanCommand";
    import { DescribeChannelCommandInput, DescribeChannelCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelCommand";
    import { DescribeChannelFlowCommandInput, DescribeChannelFlowCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelFlowCommand";
    import { DescribeChannelMembershipCommandInput, DescribeChannelMembershipCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelMembershipCommand";
    import { DescribeChannelMembershipForAppInstanceUserCommandInput, DescribeChannelMembershipForAppInstanceUserCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelMembershipForAppInstanceUserCommand";
    import { DescribeChannelModeratedByAppInstanceUserCommandInput, DescribeChannelModeratedByAppInstanceUserCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelModeratedByAppInstanceUserCommand";
    import { DescribeChannelModeratorCommandInput, DescribeChannelModeratorCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelModeratorCommand";
    import { DisassociateChannelFlowCommandInput, DisassociateChannelFlowCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DisassociateChannelFlowCommand";
    import { GetChannelMembershipPreferencesCommandInput, GetChannelMembershipPreferencesCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/GetChannelMembershipPreferencesCommand";
    import { GetChannelMessageCommandInput, GetChannelMessageCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/GetChannelMessageCommand";
    import { GetChannelMessageStatusCommandInput, GetChannelMessageStatusCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/GetChannelMessageStatusCommand";
    import { GetMessagingSessionEndpointCommandInput, GetMessagingSessionEndpointCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/GetMessagingSessionEndpointCommand";
    import { ListChannelBansCommandInput, ListChannelBansCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelBansCommand";
    import { ListChannelFlowsCommandInput, ListChannelFlowsCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelFlowsCommand";
    import { ListChannelMembershipsCommandInput, ListChannelMembershipsCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelMembershipsCommand";
    import { ListChannelMembershipsForAppInstanceUserCommandInput, ListChannelMembershipsForAppInstanceUserCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelMembershipsForAppInstanceUserCommand";
    import { ListChannelMessagesCommandInput, ListChannelMessagesCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelMessagesCommand";
    import { ListChannelModeratorsCommandInput, ListChannelModeratorsCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelModeratorsCommand";
    import { ListChannelsAssociatedWithChannelFlowCommandInput, ListChannelsAssociatedWithChannelFlowCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelsAssociatedWithChannelFlowCommand";
    import { ListChannelsCommandInput, ListChannelsCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelsCommand";
    import { ListChannelsModeratedByAppInstanceUserCommandInput, ListChannelsModeratedByAppInstanceUserCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelsModeratedByAppInstanceUserCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListTagsForResourceCommand";
    import { PutChannelMembershipPreferencesCommandInput, PutChannelMembershipPreferencesCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/PutChannelMembershipPreferencesCommand";
    import { RedactChannelMessageCommandInput, RedactChannelMessageCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/RedactChannelMessageCommand";
    import { SearchChannelsCommandInput, SearchChannelsCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/SearchChannelsCommand";
    import { SendChannelMessageCommandInput, SendChannelMessageCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/SendChannelMessageCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UntagResourceCommand";
    import { UpdateChannelCommandInput, UpdateChannelCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UpdateChannelCommand";
    import { UpdateChannelFlowCommandInput, UpdateChannelFlowCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UpdateChannelFlowCommand";
    import { UpdateChannelMessageCommandInput, UpdateChannelMessageCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UpdateChannelMessageCommand";
    import { UpdateChannelReadMarkerCommandInput, UpdateChannelReadMarkerCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UpdateChannelReadMarkerCommand";
    /**
        * <p>The Amazon Chime SDK Messaging APIs in this section allow software developers to send
        *          and receive messages in custom messaging applications. These APIs depend on the frameworks
        *          provided by the Amazon Chime SDK Identity APIs. For more information about the messaging
        *          APIs, see <a href="https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html">Amazon Chime SDK messaging</a>.</p>
        */
    export class ChimeSDKMessaging extends ChimeSDKMessagingClient {
            /**
                * <p>Associates a channel flow with a channel. Once associated, all messages to that channel go through channel flow processors. To stop processing, use the
                *          <code>DisassociateChannelFlow</code> API.</p>
                *
                *          <note>
                *             <p>Only administrators or channel moderators can associate a channel flow. The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code>
                *          of the user that makes the API call as the value in the header.</p>
                *          </note>
                */
            associateChannelFlow(args: AssociateChannelFlowCommandInput, options?: __HttpHandlerOptions): Promise<AssociateChannelFlowCommandOutput>;
            associateChannelFlow(args: AssociateChannelFlowCommandInput, cb: (err: any, data?: AssociateChannelFlowCommandOutput) => void): void;
            associateChannelFlow(args: AssociateChannelFlowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateChannelFlowCommandOutput) => void): void;
            /**
                * <p>Adds a specified number of users to a channel. </p>
                */
            batchCreateChannelMembership(args: BatchCreateChannelMembershipCommandInput, options?: __HttpHandlerOptions): Promise<BatchCreateChannelMembershipCommandOutput>;
            batchCreateChannelMembership(args: BatchCreateChannelMembershipCommandInput, cb: (err: any, data?: BatchCreateChannelMembershipCommandOutput) => void): void;
            batchCreateChannelMembership(args: BatchCreateChannelMembershipCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: BatchCreateChannelMembershipCommandOutput) => void): void;
            /**
                * <p>Calls back Chime SDK Messaging with a processing response message. This should be invoked from the processor Lambda. This is a developer API.</p>
                *          <p>You can return one of the following processing responses:</p>
                *          <ul>
                *             <li>
                *                <p>Update message content or metadata</p>
                *             </li>
                *             <li>
                *                <p>Deny a message</p>
                *             </li>
                *             <li>
                *                <p>Make no changes to the message</p>
                *             </li>
                *          </ul>
                */
            channelFlowCallback(args: ChannelFlowCallbackCommandInput, options?: __HttpHandlerOptions): Promise<ChannelFlowCallbackCommandOutput>;
            channelFlowCallback(args: ChannelFlowCallbackCommandInput, cb: (err: any, data?: ChannelFlowCallbackCommandOutput) => void): void;
            channelFlowCallback(args: ChannelFlowCallbackCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ChannelFlowCallbackCommandOutput) => void): void;
            /**
                * <p>Creates a channel to which you can add users and send messages.</p>
                *
                *          <p>
                *             <b>Restriction</b>: You can't change a channel's
                *          privacy.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            createChannel(args: CreateChannelCommandInput, options?: __HttpHandlerOptions): Promise<CreateChannelCommandOutput>;
            createChannel(args: CreateChannelCommandInput, cb: (err: any, data?: CreateChannelCommandOutput) => void): void;
            createChannel(args: CreateChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateChannelCommandOutput) => void): void;
            /**
                * <p>Permanently bans a member from a channel. Moderators can't add banned members to a
                *          channel. To undo a ban, you first have to <code>DeleteChannelBan</code>, and then
                *             <code>CreateChannelMembership</code>. Bans are cleaned up when you delete users or
                *          channels.</p>
                *          <p>If you ban a user who is already part of a channel, that user is automatically kicked
                *          from the channel.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            createChannelBan(args: CreateChannelBanCommandInput, options?: __HttpHandlerOptions): Promise<CreateChannelBanCommandOutput>;
            createChannelBan(args: CreateChannelBanCommandInput, cb: (err: any, data?: CreateChannelBanCommandOutput) => void): void;
            createChannelBan(args: CreateChannelBanCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateChannelBanCommandOutput) => void): void;
            /**
                * <p>Creates a channel flow, a container for processors. Processors are AWS Lambda functions
                *          that perform actions on chat messages, such as stripping out profanity. You can associate
                *          channel flows with channels, and the processors in the channel flow then take action on all
                *          messages sent to that channel. This is a developer API.</p>
                *
                *            <p>Channel flows process the following items:</p>
                *          <ol>
                *             <li>
                *                <p>New and updated messages</p>
                *             </li>
                *             <li>
                *                <p>Persistent and non-persistent messages</p>
                *             </li>
                *             <li>
                *                <p>The Standard message type</p>
                *             </li>
                *          </ol>
                *
                *          <note>
                *             <p>Channel flows don't process Control or System messages. For more information about the message types provided by Chime SDK Messaging, refer to
                *            <a href="https://docs.aws.amazon.com/chime/latest/dg/using-the-messaging-sdk.html#msg-types">Message types</a> in the <i>Amazon Chime developer guide</i>.</p>
                *          </note>
                */
            createChannelFlow(args: CreateChannelFlowCommandInput, options?: __HttpHandlerOptions): Promise<CreateChannelFlowCommandOutput>;
            createChannelFlow(args: CreateChannelFlowCommandInput, cb: (err: any, data?: CreateChannelFlowCommandOutput) => void): void;
            createChannelFlow(args: CreateChannelFlowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateChannelFlowCommandOutput) => void): void;
            /**
                * <p>Adds a user to a channel. The <code>InvitedBy</code> field in <code>ChannelMembership</code> is derived from the
                *          request header. A channel member can:</p>
                *
                *          <ul>
                *             <li>
                *                <p>List messages</p>
                *             </li>
                *             <li>
                *                <p>Send messages</p>
                *             </li>
                *             <li>
                *                <p>Receive messages</p>
                *             </li>
                *             <li>
                *                <p>Edit their own messages</p>
                *             </li>
                *             <li>
                *                <p>Leave the channel</p>
                *             </li>
                *          </ul>
                *
                *          <p>Privacy settings impact this action as follows:</p>
                *
                *          <ul>
                *             <li>
                *                <p>Public Channels: You do not need to be a member to list messages, but you must be
                *                a member to send messages.</p>
                *             </li>
                *             <li>
                *                <p>Private Channels: You must be a member to list or send messages.</p>
                *             </li>
                *          </ul>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            createChannelMembership(args: CreateChannelMembershipCommandInput, options?: __HttpHandlerOptions): Promise<CreateChannelMembershipCommandOutput>;
            createChannelMembership(args: CreateChannelMembershipCommandInput, cb: (err: any, data?: CreateChannelMembershipCommandOutput) => void): void;
            createChannelMembership(args: CreateChannelMembershipCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateChannelMembershipCommandOutput) => void): void;
            /**
                * <p>Creates a new <code>ChannelModerator</code>. A channel moderator can:</p>
                *
                *          <ul>
                *             <li>
                *                <p>Add and remove other members of the channel.</p>
                *             </li>
                *             <li>
                *                <p>Add and remove other moderators of the channel.</p>
                *             </li>
                *             <li>
                *                <p>Add and remove user bans for the channel.</p>
                *             </li>
                *             <li>
                *                <p>Redact messages in the channel.</p>
                *             </li>
                *             <li>
                *                <p>List messages in the channel.</p>
                *             </li>
                *          </ul>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            createChannelModerator(args: CreateChannelModeratorCommandInput, options?: __HttpHandlerOptions): Promise<CreateChannelModeratorCommandOutput>;
            createChannelModerator(args: CreateChannelModeratorCommandInput, cb: (err: any, data?: CreateChannelModeratorCommandOutput) => void): void;
            createChannelModerator(args: CreateChannelModeratorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateChannelModeratorCommandOutput) => void): void;
            /**
                * <p>Immediately makes a channel and its memberships inaccessible and marks them for
                *          deletion. This is an irreversible process.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            deleteChannel(args: DeleteChannelCommandInput, options?: __HttpHandlerOptions): Promise<DeleteChannelCommandOutput>;
            deleteChannel(args: DeleteChannelCommandInput, cb: (err: any, data?: DeleteChannelCommandOutput) => void): void;
            deleteChannel(args: DeleteChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteChannelCommandOutput) => void): void;
            /**
                * <p>Removes a user from a channel's ban list.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            deleteChannelBan(args: DeleteChannelBanCommandInput, options?: __HttpHandlerOptions): Promise<DeleteChannelBanCommandOutput>;
            deleteChannelBan(args: DeleteChannelBanCommandInput, cb: (err: any, data?: DeleteChannelBanCommandOutput) => void): void;
            deleteChannelBan(args: DeleteChannelBanCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteChannelBanCommandOutput) => void): void;
            /**
                * <p>Deletes a channel flow, an irreversible process. This is a developer API.</p>
                *          <note>
                *             <p> This API works only when the channel flow is not associated with any channel. To get a list of all channels that a channel flow is associated with, use the
                *            <code>ListChannelsAssociatedWithChannelFlow</code> API. Use the <code>DisassociateChannelFlow</code> API to disassociate a channel flow from all channels. </p>
                *          </note>
                */
            deleteChannelFlow(args: DeleteChannelFlowCommandInput, options?: __HttpHandlerOptions): Promise<DeleteChannelFlowCommandOutput>;
            deleteChannelFlow(args: DeleteChannelFlowCommandInput, cb: (err: any, data?: DeleteChannelFlowCommandOutput) => void): void;
            deleteChannelFlow(args: DeleteChannelFlowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteChannelFlowCommandOutput) => void): void;
            /**
                * <p>Removes a member from a channel.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            deleteChannelMembership(args: DeleteChannelMembershipCommandInput, options?: __HttpHandlerOptions): Promise<DeleteChannelMembershipCommandOutput>;
            deleteChannelMembership(args: DeleteChannelMembershipCommandInput, cb: (err: any, data?: DeleteChannelMembershipCommandOutput) => void): void;
            deleteChannelMembership(args: DeleteChannelMembershipCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteChannelMembershipCommandOutput) => void): void;
            /**
                * <p>Deletes a channel message. Only admins can perform this action. Deletion makes messages
                *          inaccessible immediately. A background process deletes any revisions created by
                *             <code>UpdateChannelMessage</code>.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            deleteChannelMessage(args: DeleteChannelMessageCommandInput, options?: __HttpHandlerOptions): Promise<DeleteChannelMessageCommandOutput>;
            deleteChannelMessage(args: DeleteChannelMessageCommandInput, cb: (err: any, data?: DeleteChannelMessageCommandOutput) => void): void;
            deleteChannelMessage(args: DeleteChannelMessageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteChannelMessageCommandOutput) => void): void;
            /**
                * <p>Deletes a channel moderator.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            deleteChannelModerator(args: DeleteChannelModeratorCommandInput, options?: __HttpHandlerOptions): Promise<DeleteChannelModeratorCommandOutput>;
            deleteChannelModerator(args: DeleteChannelModeratorCommandInput, cb: (err: any, data?: DeleteChannelModeratorCommandOutput) => void): void;
            deleteChannelModerator(args: DeleteChannelModeratorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteChannelModeratorCommandOutput) => void): void;
            /**
                * <p>Returns the full details of a channel in an Amazon Chime
                *          <code>AppInstance</code>.</p>
                *
                *          <note>
                *
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            describeChannel(args: DescribeChannelCommandInput, options?: __HttpHandlerOptions): Promise<DescribeChannelCommandOutput>;
            describeChannel(args: DescribeChannelCommandInput, cb: (err: any, data?: DescribeChannelCommandOutput) => void): void;
            describeChannel(args: DescribeChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeChannelCommandOutput) => void): void;
            /**
                * <p>Returns the full details of a channel ban.</p>
                *
                *          <note>
                *
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            describeChannelBan(args: DescribeChannelBanCommandInput, options?: __HttpHandlerOptions): Promise<DescribeChannelBanCommandOutput>;
            describeChannelBan(args: DescribeChannelBanCommandInput, cb: (err: any, data?: DescribeChannelBanCommandOutput) => void): void;
            describeChannelBan(args: DescribeChannelBanCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeChannelBanCommandOutput) => void): void;
            /**
                * <p>Returns the full details of a channel flow in an Amazon Chime <code>AppInstance</code>. This is a developer API.</p>
                */
            describeChannelFlow(args: DescribeChannelFlowCommandInput, options?: __HttpHandlerOptions): Promise<DescribeChannelFlowCommandOutput>;
            describeChannelFlow(args: DescribeChannelFlowCommandInput, cb: (err: any, data?: DescribeChannelFlowCommandOutput) => void): void;
            describeChannelFlow(args: DescribeChannelFlowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeChannelFlowCommandOutput) => void): void;
            /**
                * <p>Returns the full details of a user's channel membership.</p>
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            describeChannelMembership(args: DescribeChannelMembershipCommandInput, options?: __HttpHandlerOptions): Promise<DescribeChannelMembershipCommandOutput>;
            describeChannelMembership(args: DescribeChannelMembershipCommandInput, cb: (err: any, data?: DescribeChannelMembershipCommandOutput) => void): void;
            describeChannelMembership(args: DescribeChannelMembershipCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeChannelMembershipCommandOutput) => void): void;
            /**
                * <p> Returns the details of a channel based on the membership of the specified
                *             <code>AppInstanceUser</code>.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            describeChannelMembershipForAppInstanceUser(args: DescribeChannelMembershipForAppInstanceUserCommandInput, options?: __HttpHandlerOptions): Promise<DescribeChannelMembershipForAppInstanceUserCommandOutput>;
            describeChannelMembershipForAppInstanceUser(args: DescribeChannelMembershipForAppInstanceUserCommandInput, cb: (err: any, data?: DescribeChannelMembershipForAppInstanceUserCommandOutput) => void): void;
            describeChannelMembershipForAppInstanceUser(args: DescribeChannelMembershipForAppInstanceUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeChannelMembershipForAppInstanceUserCommandOutput) => void): void;
            /**
                * <p>Returns the full details of a channel moderated by the specified
                *             <code>AppInstanceUser</code>.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            describeChannelModeratedByAppInstanceUser(args: DescribeChannelModeratedByAppInstanceUserCommandInput, options?: __HttpHandlerOptions): Promise<DescribeChannelModeratedByAppInstanceUserCommandOutput>;
            describeChannelModeratedByAppInstanceUser(args: DescribeChannelModeratedByAppInstanceUserCommandInput, cb: (err: any, data?: DescribeChannelModeratedByAppInstanceUserCommandOutput) => void): void;
            describeChannelModeratedByAppInstanceUser(args: DescribeChannelModeratedByAppInstanceUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeChannelModeratedByAppInstanceUserCommandOutput) => void): void;
            /**
                * <p>Returns the full details of a single ChannelModerator.</p>
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            describeChannelModerator(args: DescribeChannelModeratorCommandInput, options?: __HttpHandlerOptions): Promise<DescribeChannelModeratorCommandOutput>;
            describeChannelModerator(args: DescribeChannelModeratorCommandInput, cb: (err: any, data?: DescribeChannelModeratorCommandOutput) => void): void;
            describeChannelModerator(args: DescribeChannelModeratorCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeChannelModeratorCommandOutput) => void): void;
            /**
                * <p>Disassociates a channel flow from all its channels. Once disassociated, all messages to
                *          that channel stop going through the channel flow processor.</p>
                *          <note>
                *             <p>Only administrators or channel moderators can disassociate a channel flow. The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code>
                *            of the user that makes the API call as the value in the header.</p>
                *          </note>
                */
            disassociateChannelFlow(args: DisassociateChannelFlowCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateChannelFlowCommandOutput>;
            disassociateChannelFlow(args: DisassociateChannelFlowCommandInput, cb: (err: any, data?: DisassociateChannelFlowCommandOutput) => void): void;
            disassociateChannelFlow(args: DisassociateChannelFlowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateChannelFlowCommandOutput) => void): void;
            /**
                * <p>Gets the membership preferences of an <code>AppInstanceUser</code> for the specified channel. The <code>AppInstanceUser</code> must be a member of the channel.
                *          Only the <code>AppInstanceUser</code> who owns the membership can retrieve preferences. Users in the <code>AppInstanceAdmin</code> and channel moderator roles can't retrieve preferences for other users.
                *          Banned users can't retrieve membership preferences for the channel from which they are banned.</p>
                */
            getChannelMembershipPreferences(args: GetChannelMembershipPreferencesCommandInput, options?: __HttpHandlerOptions): Promise<GetChannelMembershipPreferencesCommandOutput>;
            getChannelMembershipPreferences(args: GetChannelMembershipPreferencesCommandInput, cb: (err: any, data?: GetChannelMembershipPreferencesCommandOutput) => void): void;
            getChannelMembershipPreferences(args: GetChannelMembershipPreferencesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetChannelMembershipPreferencesCommandOutput) => void): void;
            /**
                * <p>Gets the full details of a channel message.</p>
                *
                *          <note>
                *             <p>The x-amz-chime-bearer request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            getChannelMessage(args: GetChannelMessageCommandInput, options?: __HttpHandlerOptions): Promise<GetChannelMessageCommandOutput>;
            getChannelMessage(args: GetChannelMessageCommandInput, cb: (err: any, data?: GetChannelMessageCommandOutput) => void): void;
            getChannelMessage(args: GetChannelMessageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetChannelMessageCommandOutput) => void): void;
            /**
                * <p>Gets message status for a specified <code>messageId</code>. Use this API to determine the intermediate status of messages going through channel flow processing. The API provides an alternative to
                *          retrieving message status if the event was not received because a client wasn't connected to a websocket. </p>
                *
                *          <p>Messages can have any one of these statuses.</p>
                *
                *          <dl>
                *             <dt>SENT</dt>
                *             <dd>
                *                <p>Message processed successfully</p>
                *             </dd>
                *             <dt>PENDING</dt>
                *             <dd>
                *                <p>Ongoing processing</p>
                *             </dd>
                *             <dt>FAILED</dt>
                *             <dd>
                *                <p>Processing failed</p>
                *             </dd>
                *             <dt>DENIED</dt>
                *             <dd>
                *                <p>Messasge denied by the processor</p>
                *             </dd>
                *          </dl>
                *
                *          <note>
                *             <ul>
                *                <li>
                *                   <p>This API does not return statuses for denied messages, because we don't store them once the processor denies them. </p>
                *                </li>
                *                <li>
                *                   <p>Only the message sender can invoke this API.</p>
                *                </li>
                *                <li>
                *                   <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header</p>
                *                </li>
                *             </ul>
                *          </note>
                */
            getChannelMessageStatus(args: GetChannelMessageStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetChannelMessageStatusCommandOutput>;
            getChannelMessageStatus(args: GetChannelMessageStatusCommandInput, cb: (err: any, data?: GetChannelMessageStatusCommandOutput) => void): void;
            getChannelMessageStatus(args: GetChannelMessageStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetChannelMessageStatusCommandOutput) => void): void;
            /**
                * <p>The details of the endpoint for the messaging session.</p>
                */
            getMessagingSessionEndpoint(args: GetMessagingSessionEndpointCommandInput, options?: __HttpHandlerOptions): Promise<GetMessagingSessionEndpointCommandOutput>;
            getMessagingSessionEndpoint(args: GetMessagingSessionEndpointCommandInput, cb: (err: any, data?: GetMessagingSessionEndpointCommandOutput) => void): void;
            getMessagingSessionEndpoint(args: GetMessagingSessionEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetMessagingSessionEndpointCommandOutput) => void): void;
            /**
                * <p>Lists all the users banned from a particular channel.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            listChannelBans(args: ListChannelBansCommandInput, options?: __HttpHandlerOptions): Promise<ListChannelBansCommandOutput>;
            listChannelBans(args: ListChannelBansCommandInput, cb: (err: any, data?: ListChannelBansCommandOutput) => void): void;
            listChannelBans(args: ListChannelBansCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListChannelBansCommandOutput) => void): void;
            /**
                * <p>Returns a paginated lists of all the channel flows created under a single Chime. This is a developer API.</p>
                */
            listChannelFlows(args: ListChannelFlowsCommandInput, options?: __HttpHandlerOptions): Promise<ListChannelFlowsCommandOutput>;
            listChannelFlows(args: ListChannelFlowsCommandInput, cb: (err: any, data?: ListChannelFlowsCommandOutput) => void): void;
            listChannelFlows(args: ListChannelFlowsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListChannelFlowsCommandOutput) => void): void;
            /**
                * <p>Lists all channel memberships in a channel.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                *
                *          <p>If you want to list the channels to which a specific app instance user belongs, see the
                *          <a href="https://docs.aws.amazon.com/chime/latest/APIReference/API_messaging-chime_ListChannelMembershipsForAppInstanceUser.html">ListChannelMembershipsForAppInstanceUser</a> API.</p>
                */
            listChannelMemberships(args: ListChannelMembershipsCommandInput, options?: __HttpHandlerOptions): Promise<ListChannelMembershipsCommandOutput>;
            listChannelMemberships(args: ListChannelMembershipsCommandInput, cb: (err: any, data?: ListChannelMembershipsCommandOutput) => void): void;
            listChannelMemberships(args: ListChannelMembershipsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListChannelMembershipsCommandOutput) => void): void;
            /**
                * <p> Lists all channels that a particular <code>AppInstanceUser</code> is a part of. Only an
                *             <code>AppInstanceAdmin</code> can call the API with a user ARN that is not their own. </p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            listChannelMembershipsForAppInstanceUser(args: ListChannelMembershipsForAppInstanceUserCommandInput, options?: __HttpHandlerOptions): Promise<ListChannelMembershipsForAppInstanceUserCommandOutput>;
            listChannelMembershipsForAppInstanceUser(args: ListChannelMembershipsForAppInstanceUserCommandInput, cb: (err: any, data?: ListChannelMembershipsForAppInstanceUserCommandOutput) => void): void;
            listChannelMembershipsForAppInstanceUser(args: ListChannelMembershipsForAppInstanceUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListChannelMembershipsForAppInstanceUserCommandOutput) => void): void;
            /**
                * <p>List all the messages in a channel. Returns a paginated list of
                *             <code>ChannelMessages</code>. By default, sorted by creation timestamp in descending
                *          order.</p>
                *          <note>
                *             <p>Redacted messages appear in the results as empty, since they are only redacted, not
                *             deleted. Deleted messages do not appear in the results. This action always returns the
                *             latest version of an edited message.</p>
                *             <p>Also, the x-amz-chime-bearer request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            listChannelMessages(args: ListChannelMessagesCommandInput, options?: __HttpHandlerOptions): Promise<ListChannelMessagesCommandOutput>;
            listChannelMessages(args: ListChannelMessagesCommandInput, cb: (err: any, data?: ListChannelMessagesCommandOutput) => void): void;
            listChannelMessages(args: ListChannelMessagesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListChannelMessagesCommandOutput) => void): void;
            /**
                * <p>Lists all the moderators for a channel.</p>
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            listChannelModerators(args: ListChannelModeratorsCommandInput, options?: __HttpHandlerOptions): Promise<ListChannelModeratorsCommandOutput>;
            listChannelModerators(args: ListChannelModeratorsCommandInput, cb: (err: any, data?: ListChannelModeratorsCommandOutput) => void): void;
            listChannelModerators(args: ListChannelModeratorsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListChannelModeratorsCommandOutput) => void): void;
            /**
                * <p>Lists all Channels created under a single Chime App as a paginated list. You can specify
                *          filters to narrow results.</p>
                *
                *          <p class="title">
                *             <b>Functionality & restrictions</b>
                *          </p>
                *          <ul>
                *             <li>
                *                <p>Use privacy = <code>PUBLIC</code> to retrieve all public channels in the
                *                account.</p>
                *             </li>
                *             <li>
                *                <p>Only an <code>AppInstanceAdmin</code> can set privacy = <code>PRIVATE</code> to
                *                list the private channels in an account.</p>
                *             </li>
                *          </ul>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            listChannels(args: ListChannelsCommandInput, options?: __HttpHandlerOptions): Promise<ListChannelsCommandOutput>;
            listChannels(args: ListChannelsCommandInput, cb: (err: any, data?: ListChannelsCommandOutput) => void): void;
            listChannels(args: ListChannelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListChannelsCommandOutput) => void): void;
            /**
                * <p>Lists all channels associated with a specified channel flow. You can associate a channel flow with multiple channels, but you can only associate a channel with one channel flow. This is a developer API.</p>
                */
            listChannelsAssociatedWithChannelFlow(args: ListChannelsAssociatedWithChannelFlowCommandInput, options?: __HttpHandlerOptions): Promise<ListChannelsAssociatedWithChannelFlowCommandOutput>;
            listChannelsAssociatedWithChannelFlow(args: ListChannelsAssociatedWithChannelFlowCommandInput, cb: (err: any, data?: ListChannelsAssociatedWithChannelFlowCommandOutput) => void): void;
            listChannelsAssociatedWithChannelFlow(args: ListChannelsAssociatedWithChannelFlowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListChannelsAssociatedWithChannelFlowCommandOutput) => void): void;
            /**
                * <p>A list of the channels moderated by an <code>AppInstanceUser</code>.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            listChannelsModeratedByAppInstanceUser(args: ListChannelsModeratedByAppInstanceUserCommandInput, options?: __HttpHandlerOptions): Promise<ListChannelsModeratedByAppInstanceUserCommandOutput>;
            listChannelsModeratedByAppInstanceUser(args: ListChannelsModeratedByAppInstanceUserCommandInput, cb: (err: any, data?: ListChannelsModeratedByAppInstanceUserCommandOutput) => void): void;
            listChannelsModeratedByAppInstanceUser(args: ListChannelsModeratedByAppInstanceUserCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListChannelsModeratedByAppInstanceUserCommandOutput) => void): void;
            /**
                * <p>Lists the tags applied to an Amazon Chime SDK messaging resource.</p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Sets the membership preferences of an <code>AppInstanceUser</code> for the specified channel. The <code>AppInstanceUser</code> must be a member of the channel.
                *          Only the <code>AppInstanceUser</code> who owns the membership can set preferences. Users in the <code>AppInstanceAdmin</code> and channel moderator roles can't set preferences for other users.
                *          Banned users can't set membership preferences for the channel from which they are banned.</p>
                */
            putChannelMembershipPreferences(args: PutChannelMembershipPreferencesCommandInput, options?: __HttpHandlerOptions): Promise<PutChannelMembershipPreferencesCommandOutput>;
            putChannelMembershipPreferences(args: PutChannelMembershipPreferencesCommandInput, cb: (err: any, data?: PutChannelMembershipPreferencesCommandOutput) => void): void;
            putChannelMembershipPreferences(args: PutChannelMembershipPreferencesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutChannelMembershipPreferencesCommandOutput) => void): void;
            /**
                * <p>Redacts message content, but not metadata. The message exists in the back end, but the
                *          action returns null content, and the state shows as redacted.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            redactChannelMessage(args: RedactChannelMessageCommandInput, options?: __HttpHandlerOptions): Promise<RedactChannelMessageCommandOutput>;
            redactChannelMessage(args: RedactChannelMessageCommandInput, cb: (err: any, data?: RedactChannelMessageCommandOutput) => void): void;
            redactChannelMessage(args: RedactChannelMessageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RedactChannelMessageCommandOutput) => void): void;
            /**
                * <p>Allows an <code>AppInstanceUser</code> to search the channels that they belong to. The <code>AppInstanceUser</code> can search by membership or external ID.
                *          An <code>AppInstanceAdmin</code> can search across all channels within the <code>AppInstance</code>.</p>
                */
            searchChannels(args: SearchChannelsCommandInput, options?: __HttpHandlerOptions): Promise<SearchChannelsCommandOutput>;
            searchChannels(args: SearchChannelsCommandInput, cb: (err: any, data?: SearchChannelsCommandOutput) => void): void;
            searchChannels(args: SearchChannelsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SearchChannelsCommandOutput) => void): void;
            /**
                * <p>Sends a message to a particular channel that the member is a part of.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *
                *             <p>Also, <code>STANDARD</code> messages can contain 4KB of data and the 1KB of metadata.
                *                <code>CONTROL</code> messages can contain 30 bytes of data and no metadata.</p>
                *          </note>
                */
            sendChannelMessage(args: SendChannelMessageCommandInput, options?: __HttpHandlerOptions): Promise<SendChannelMessageCommandOutput>;
            sendChannelMessage(args: SendChannelMessageCommandInput, cb: (err: any, data?: SendChannelMessageCommandOutput) => void): void;
            sendChannelMessage(args: SendChannelMessageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SendChannelMessageCommandOutput) => void): void;
            /**
                * <p>Applies the specified tags to the specified Amazon Chime SDK messaging resource.</p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes the specified tags from the specified Amazon Chime SDK messaging resource.</p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Update a channel's attributes.</p>
                *          <p>
                *             <b>Restriction</b>: You can't change a channel's privacy. </p>
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            updateChannel(args: UpdateChannelCommandInput, options?: __HttpHandlerOptions): Promise<UpdateChannelCommandOutput>;
            updateChannel(args: UpdateChannelCommandInput, cb: (err: any, data?: UpdateChannelCommandOutput) => void): void;
            updateChannel(args: UpdateChannelCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateChannelCommandOutput) => void): void;
            /**
                * <p>Updates channel flow attributes. This is a developer API.</p>
                */
            updateChannelFlow(args: UpdateChannelFlowCommandInput, options?: __HttpHandlerOptions): Promise<UpdateChannelFlowCommandOutput>;
            updateChannelFlow(args: UpdateChannelFlowCommandInput, cb: (err: any, data?: UpdateChannelFlowCommandOutput) => void): void;
            updateChannelFlow(args: UpdateChannelFlowCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateChannelFlowCommandOutput) => void): void;
            /**
                * <p>Updates the content of a message.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            updateChannelMessage(args: UpdateChannelMessageCommandInput, options?: __HttpHandlerOptions): Promise<UpdateChannelMessageCommandOutput>;
            updateChannelMessage(args: UpdateChannelMessageCommandInput, cb: (err: any, data?: UpdateChannelMessageCommandOutput) => void): void;
            updateChannelMessage(args: UpdateChannelMessageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateChannelMessageCommandOutput) => void): void;
            /**
                * <p>The details of the time when a user last read messages in a channel.</p>
                *
                *          <note>
                *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
                *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
                *             the header.</p>
                *          </note>
                */
            updateChannelReadMarker(args: UpdateChannelReadMarkerCommandInput, options?: __HttpHandlerOptions): Promise<UpdateChannelReadMarkerCommandOutput>;
            updateChannelReadMarker(args: UpdateChannelReadMarkerCommandInput, cb: (err: any, data?: UpdateChannelReadMarkerCommandOutput) => void): void;
            updateChannelReadMarker(args: UpdateChannelReadMarkerCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateChannelReadMarkerCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateChannelFlowCommandInput, AssociateChannelFlowCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/AssociateChannelFlowCommand";
    import { BatchCreateChannelMembershipCommandInput, BatchCreateChannelMembershipCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/BatchCreateChannelMembershipCommand";
    import { ChannelFlowCallbackCommandInput, ChannelFlowCallbackCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ChannelFlowCallbackCommand";
    import { CreateChannelBanCommandInput, CreateChannelBanCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelBanCommand";
    import { CreateChannelCommandInput, CreateChannelCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelCommand";
    import { CreateChannelFlowCommandInput, CreateChannelFlowCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelFlowCommand";
    import { CreateChannelMembershipCommandInput, CreateChannelMembershipCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelMembershipCommand";
    import { CreateChannelModeratorCommandInput, CreateChannelModeratorCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelModeratorCommand";
    import { DeleteChannelBanCommandInput, DeleteChannelBanCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelBanCommand";
    import { DeleteChannelCommandInput, DeleteChannelCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelCommand";
    import { DeleteChannelFlowCommandInput, DeleteChannelFlowCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelFlowCommand";
    import { DeleteChannelMembershipCommandInput, DeleteChannelMembershipCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelMembershipCommand";
    import { DeleteChannelMessageCommandInput, DeleteChannelMessageCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelMessageCommand";
    import { DeleteChannelModeratorCommandInput, DeleteChannelModeratorCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelModeratorCommand";
    import { DescribeChannelBanCommandInput, DescribeChannelBanCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelBanCommand";
    import { DescribeChannelCommandInput, DescribeChannelCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelCommand";
    import { DescribeChannelFlowCommandInput, DescribeChannelFlowCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelFlowCommand";
    import { DescribeChannelMembershipCommandInput, DescribeChannelMembershipCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelMembershipCommand";
    import { DescribeChannelMembershipForAppInstanceUserCommandInput, DescribeChannelMembershipForAppInstanceUserCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelMembershipForAppInstanceUserCommand";
    import { DescribeChannelModeratedByAppInstanceUserCommandInput, DescribeChannelModeratedByAppInstanceUserCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelModeratedByAppInstanceUserCommand";
    import { DescribeChannelModeratorCommandInput, DescribeChannelModeratorCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelModeratorCommand";
    import { DisassociateChannelFlowCommandInput, DisassociateChannelFlowCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DisassociateChannelFlowCommand";
    import { GetChannelMembershipPreferencesCommandInput, GetChannelMembershipPreferencesCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/GetChannelMembershipPreferencesCommand";
    import { GetChannelMessageCommandInput, GetChannelMessageCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/GetChannelMessageCommand";
    import { GetChannelMessageStatusCommandInput, GetChannelMessageStatusCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/GetChannelMessageStatusCommand";
    import { GetMessagingSessionEndpointCommandInput, GetMessagingSessionEndpointCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/GetMessagingSessionEndpointCommand";
    import { ListChannelBansCommandInput, ListChannelBansCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelBansCommand";
    import { ListChannelFlowsCommandInput, ListChannelFlowsCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelFlowsCommand";
    import { ListChannelMembershipsCommandInput, ListChannelMembershipsCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelMembershipsCommand";
    import { ListChannelMembershipsForAppInstanceUserCommandInput, ListChannelMembershipsForAppInstanceUserCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelMembershipsForAppInstanceUserCommand";
    import { ListChannelMessagesCommandInput, ListChannelMessagesCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelMessagesCommand";
    import { ListChannelModeratorsCommandInput, ListChannelModeratorsCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelModeratorsCommand";
    import { ListChannelsAssociatedWithChannelFlowCommandInput, ListChannelsAssociatedWithChannelFlowCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelsAssociatedWithChannelFlowCommand";
    import { ListChannelsCommandInput, ListChannelsCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelsCommand";
    import { ListChannelsModeratedByAppInstanceUserCommandInput, ListChannelsModeratedByAppInstanceUserCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelsModeratedByAppInstanceUserCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListTagsForResourceCommand";
    import { PutChannelMembershipPreferencesCommandInput, PutChannelMembershipPreferencesCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/PutChannelMembershipPreferencesCommand";
    import { RedactChannelMessageCommandInput, RedactChannelMessageCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/RedactChannelMessageCommand";
    import { SearchChannelsCommandInput, SearchChannelsCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/SearchChannelsCommand";
    import { SendChannelMessageCommandInput, SendChannelMessageCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/SendChannelMessageCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UntagResourceCommand";
    import { UpdateChannelCommandInput, UpdateChannelCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UpdateChannelCommand";
    import { UpdateChannelFlowCommandInput, UpdateChannelFlowCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UpdateChannelFlowCommand";
    import { UpdateChannelMessageCommandInput, UpdateChannelMessageCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UpdateChannelMessageCommand";
    import { UpdateChannelReadMarkerCommandInput, UpdateChannelReadMarkerCommandOutput } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UpdateChannelReadMarkerCommand";
    export type ServiceInputTypes = AssociateChannelFlowCommandInput | BatchCreateChannelMembershipCommandInput | ChannelFlowCallbackCommandInput | CreateChannelBanCommandInput | CreateChannelCommandInput | CreateChannelFlowCommandInput | CreateChannelMembershipCommandInput | CreateChannelModeratorCommandInput | DeleteChannelBanCommandInput | DeleteChannelCommandInput | DeleteChannelFlowCommandInput | DeleteChannelMembershipCommandInput | DeleteChannelMessageCommandInput | DeleteChannelModeratorCommandInput | DescribeChannelBanCommandInput | DescribeChannelCommandInput | DescribeChannelFlowCommandInput | DescribeChannelMembershipCommandInput | DescribeChannelMembershipForAppInstanceUserCommandInput | DescribeChannelModeratedByAppInstanceUserCommandInput | DescribeChannelModeratorCommandInput | DisassociateChannelFlowCommandInput | GetChannelMembershipPreferencesCommandInput | GetChannelMessageCommandInput | GetChannelMessageStatusCommandInput | GetMessagingSessionEndpointCommandInput | ListChannelBansCommandInput | ListChannelFlowsCommandInput | ListChannelMembershipsCommandInput | ListChannelMembershipsForAppInstanceUserCommandInput | ListChannelMessagesCommandInput | ListChannelModeratorsCommandInput | ListChannelsAssociatedWithChannelFlowCommandInput | ListChannelsCommandInput | ListChannelsModeratedByAppInstanceUserCommandInput | ListTagsForResourceCommandInput | PutChannelMembershipPreferencesCommandInput | RedactChannelMessageCommandInput | SearchChannelsCommandInput | SendChannelMessageCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateChannelCommandInput | UpdateChannelFlowCommandInput | UpdateChannelMessageCommandInput | UpdateChannelReadMarkerCommandInput;
    export type ServiceOutputTypes = AssociateChannelFlowCommandOutput | BatchCreateChannelMembershipCommandOutput | ChannelFlowCallbackCommandOutput | CreateChannelBanCommandOutput | CreateChannelCommandOutput | CreateChannelFlowCommandOutput | CreateChannelMembershipCommandOutput | CreateChannelModeratorCommandOutput | DeleteChannelBanCommandOutput | DeleteChannelCommandOutput | DeleteChannelFlowCommandOutput | DeleteChannelMembershipCommandOutput | DeleteChannelMessageCommandOutput | DeleteChannelModeratorCommandOutput | DescribeChannelBanCommandOutput | DescribeChannelCommandOutput | DescribeChannelFlowCommandOutput | DescribeChannelMembershipCommandOutput | DescribeChannelMembershipForAppInstanceUserCommandOutput | DescribeChannelModeratedByAppInstanceUserCommandOutput | DescribeChannelModeratorCommandOutput | DisassociateChannelFlowCommandOutput | GetChannelMembershipPreferencesCommandOutput | GetChannelMessageCommandOutput | GetChannelMessageStatusCommandOutput | GetMessagingSessionEndpointCommandOutput | ListChannelBansCommandOutput | ListChannelFlowsCommandOutput | ListChannelMembershipsCommandOutput | ListChannelMembershipsForAppInstanceUserCommandOutput | ListChannelMessagesCommandOutput | ListChannelModeratorsCommandOutput | ListChannelsAssociatedWithChannelFlowCommandOutput | ListChannelsCommandOutput | ListChannelsModeratedByAppInstanceUserCommandOutput | ListTagsForResourceCommandOutput | PutChannelMembershipPreferencesCommandOutput | RedactChannelMessageCommandOutput | SearchChannelsCommandOutput | SendChannelMessageCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateChannelCommandOutput | UpdateChannelFlowCommandOutput | UpdateChannelMessageCommandOutput | UpdateChannelReadMarkerCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type ChimeSDKMessagingClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of ChimeSDKMessagingClient class constructor that set the region, credentials and other options.
        */
    export interface ChimeSDKMessagingClientConfig extends ChimeSDKMessagingClientConfigType {
    }
    type ChimeSDKMessagingClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of ChimeSDKMessagingClient class. This is resolved and normalized from the {@link ChimeSDKMessagingClientConfig | constructor configuration interface}.
        */
    export interface ChimeSDKMessagingClientResolvedConfig extends ChimeSDKMessagingClientResolvedConfigType {
    }
    /**
        * <p>The Amazon Chime SDK Messaging APIs in this section allow software developers to send
        *          and receive messages in custom messaging applications. These APIs depend on the frameworks
        *          provided by the Amazon Chime SDK Identity APIs. For more information about the messaging
        *          APIs, see <a href="https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Messaging.html">Amazon Chime SDK messaging</a>.</p>
        */
    export class ChimeSDKMessagingClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, ChimeSDKMessagingClientResolvedConfig> {
            /**
                * The resolved configuration of ChimeSDKMessagingClient class. This is resolved and normalized from the {@link ChimeSDKMessagingClientConfig | constructor configuration interface}.
                */
            readonly config: ChimeSDKMessagingClientResolvedConfig;
            constructor(configuration: ChimeSDKMessagingClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/AssociateChannelFlowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { AssociateChannelFlowRequest } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface AssociateChannelFlowCommandInput extends AssociateChannelFlowRequest {
    }
    export interface AssociateChannelFlowCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Associates a channel flow with a channel. Once associated, all messages to that channel go through channel flow processors. To stop processing, use the
        *          <code>DisassociateChannelFlow</code> API.</p>
        *
        *          <note>
        *             <p>Only administrators or channel moderators can associate a channel flow. The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code>
        *          of the user that makes the API call as the value in the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, AssociateChannelFlowCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, AssociateChannelFlowCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new AssociateChannelFlowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateChannelFlowCommandInput} for command's `input` shape.
        * @see {@link AssociateChannelFlowCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class AssociateChannelFlowCommand extends $Command<AssociateChannelFlowCommandInput, AssociateChannelFlowCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: AssociateChannelFlowCommandInput;
            constructor(input: AssociateChannelFlowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateChannelFlowCommandInput, AssociateChannelFlowCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/BatchCreateChannelMembershipCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { BatchCreateChannelMembershipRequest, BatchCreateChannelMembershipResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface BatchCreateChannelMembershipCommandInput extends BatchCreateChannelMembershipRequest {
    }
    export interface BatchCreateChannelMembershipCommandOutput extends BatchCreateChannelMembershipResponse, __MetadataBearer {
    }
    /**
        * <p>Adds a specified number of users to a channel. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, BatchCreateChannelMembershipCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, BatchCreateChannelMembershipCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new BatchCreateChannelMembershipCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link BatchCreateChannelMembershipCommandInput} for command's `input` shape.
        * @see {@link BatchCreateChannelMembershipCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class BatchCreateChannelMembershipCommand extends $Command<BatchCreateChannelMembershipCommandInput, BatchCreateChannelMembershipCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: BatchCreateChannelMembershipCommandInput;
            constructor(input: BatchCreateChannelMembershipCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<BatchCreateChannelMembershipCommandInput, BatchCreateChannelMembershipCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ChannelFlowCallbackCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { ChannelFlowCallbackRequest, ChannelFlowCallbackResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface ChannelFlowCallbackCommandInput extends ChannelFlowCallbackRequest {
    }
    export interface ChannelFlowCallbackCommandOutput extends ChannelFlowCallbackResponse, __MetadataBearer {
    }
    /**
        * <p>Calls back Chime SDK Messaging with a processing response message. This should be invoked from the processor Lambda. This is a developer API.</p>
        *          <p>You can return one of the following processing responses:</p>
        *          <ul>
        *             <li>
        *                <p>Update message content or metadata</p>
        *             </li>
        *             <li>
        *                <p>Deny a message</p>
        *             </li>
        *             <li>
        *                <p>Make no changes to the message</p>
        *             </li>
        *          </ul>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, ChannelFlowCallbackCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, ChannelFlowCallbackCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new ChannelFlowCallbackCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ChannelFlowCallbackCommandInput} for command's `input` shape.
        * @see {@link ChannelFlowCallbackCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class ChannelFlowCallbackCommand extends $Command<ChannelFlowCallbackCommandInput, ChannelFlowCallbackCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: ChannelFlowCallbackCommandInput;
            constructor(input: ChannelFlowCallbackCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ChannelFlowCallbackCommandInput, ChannelFlowCallbackCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelBanCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { CreateChannelBanRequest, CreateChannelBanResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface CreateChannelBanCommandInput extends CreateChannelBanRequest {
    }
    export interface CreateChannelBanCommandOutput extends CreateChannelBanResponse, __MetadataBearer {
    }
    /**
        * <p>Permanently bans a member from a channel. Moderators can't add banned members to a
        *          channel. To undo a ban, you first have to <code>DeleteChannelBan</code>, and then
        *             <code>CreateChannelMembership</code>. Bans are cleaned up when you delete users or
        *          channels.</p>
        *          <p>If you ban a user who is already part of a channel, that user is automatically kicked
        *          from the channel.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, CreateChannelBanCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, CreateChannelBanCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new CreateChannelBanCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateChannelBanCommandInput} for command's `input` shape.
        * @see {@link CreateChannelBanCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class CreateChannelBanCommand extends $Command<CreateChannelBanCommandInput, CreateChannelBanCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: CreateChannelBanCommandInput;
            constructor(input: CreateChannelBanCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateChannelBanCommandInput, CreateChannelBanCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { CreateChannelRequest, CreateChannelResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface CreateChannelCommandInput extends CreateChannelRequest {
    }
    export interface CreateChannelCommandOutput extends CreateChannelResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a channel to which you can add users and send messages.</p>
        *
        *          <p>
        *             <b>Restriction</b>: You can't change a channel's
        *          privacy.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, CreateChannelCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, CreateChannelCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new CreateChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateChannelCommandInput} for command's `input` shape.
        * @see {@link CreateChannelCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class CreateChannelCommand extends $Command<CreateChannelCommandInput, CreateChannelCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: CreateChannelCommandInput;
            constructor(input: CreateChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateChannelCommandInput, CreateChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelFlowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { CreateChannelFlowRequest, CreateChannelFlowResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface CreateChannelFlowCommandInput extends CreateChannelFlowRequest {
    }
    export interface CreateChannelFlowCommandOutput extends CreateChannelFlowResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a channel flow, a container for processors. Processors are AWS Lambda functions
        *          that perform actions on chat messages, such as stripping out profanity. You can associate
        *          channel flows with channels, and the processors in the channel flow then take action on all
        *          messages sent to that channel. This is a developer API.</p>
        *
        *            <p>Channel flows process the following items:</p>
        *          <ol>
        *             <li>
        *                <p>New and updated messages</p>
        *             </li>
        *             <li>
        *                <p>Persistent and non-persistent messages</p>
        *             </li>
        *             <li>
        *                <p>The Standard message type</p>
        *             </li>
        *          </ol>
        *
        *          <note>
        *             <p>Channel flows don't process Control or System messages. For more information about the message types provided by Chime SDK Messaging, refer to
        *            <a href="https://docs.aws.amazon.com/chime/latest/dg/using-the-messaging-sdk.html#msg-types">Message types</a> in the <i>Amazon Chime developer guide</i>.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, CreateChannelFlowCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, CreateChannelFlowCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new CreateChannelFlowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateChannelFlowCommandInput} for command's `input` shape.
        * @see {@link CreateChannelFlowCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class CreateChannelFlowCommand extends $Command<CreateChannelFlowCommandInput, CreateChannelFlowCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: CreateChannelFlowCommandInput;
            constructor(input: CreateChannelFlowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateChannelFlowCommandInput, CreateChannelFlowCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelMembershipCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { CreateChannelMembershipRequest, CreateChannelMembershipResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface CreateChannelMembershipCommandInput extends CreateChannelMembershipRequest {
    }
    export interface CreateChannelMembershipCommandOutput extends CreateChannelMembershipResponse, __MetadataBearer {
    }
    /**
        * <p>Adds a user to a channel. The <code>InvitedBy</code> field in <code>ChannelMembership</code> is derived from the
        *          request header. A channel member can:</p>
        *
        *          <ul>
        *             <li>
        *                <p>List messages</p>
        *             </li>
        *             <li>
        *                <p>Send messages</p>
        *             </li>
        *             <li>
        *                <p>Receive messages</p>
        *             </li>
        *             <li>
        *                <p>Edit their own messages</p>
        *             </li>
        *             <li>
        *                <p>Leave the channel</p>
        *             </li>
        *          </ul>
        *
        *          <p>Privacy settings impact this action as follows:</p>
        *
        *          <ul>
        *             <li>
        *                <p>Public Channels: You do not need to be a member to list messages, but you must be
        *                a member to send messages.</p>
        *             </li>
        *             <li>
        *                <p>Private Channels: You must be a member to list or send messages.</p>
        *             </li>
        *          </ul>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, CreateChannelMembershipCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, CreateChannelMembershipCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new CreateChannelMembershipCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateChannelMembershipCommandInput} for command's `input` shape.
        * @see {@link CreateChannelMembershipCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class CreateChannelMembershipCommand extends $Command<CreateChannelMembershipCommandInput, CreateChannelMembershipCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: CreateChannelMembershipCommandInput;
            constructor(input: CreateChannelMembershipCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateChannelMembershipCommandInput, CreateChannelMembershipCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/CreateChannelModeratorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { CreateChannelModeratorRequest, CreateChannelModeratorResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface CreateChannelModeratorCommandInput extends CreateChannelModeratorRequest {
    }
    export interface CreateChannelModeratorCommandOutput extends CreateChannelModeratorResponse, __MetadataBearer {
    }
    /**
        * <p>Creates a new <code>ChannelModerator</code>. A channel moderator can:</p>
        *
        *          <ul>
        *             <li>
        *                <p>Add and remove other members of the channel.</p>
        *             </li>
        *             <li>
        *                <p>Add and remove other moderators of the channel.</p>
        *             </li>
        *             <li>
        *                <p>Add and remove user bans for the channel.</p>
        *             </li>
        *             <li>
        *                <p>Redact messages in the channel.</p>
        *             </li>
        *             <li>
        *                <p>List messages in the channel.</p>
        *             </li>
        *          </ul>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, CreateChannelModeratorCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, CreateChannelModeratorCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new CreateChannelModeratorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateChannelModeratorCommandInput} for command's `input` shape.
        * @see {@link CreateChannelModeratorCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class CreateChannelModeratorCommand extends $Command<CreateChannelModeratorCommandInput, CreateChannelModeratorCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: CreateChannelModeratorCommandInput;
            constructor(input: CreateChannelModeratorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateChannelModeratorCommandInput, CreateChannelModeratorCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelBanCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { DeleteChannelBanRequest } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface DeleteChannelBanCommandInput extends DeleteChannelBanRequest {
    }
    export interface DeleteChannelBanCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes a user from a channel's ban list.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, DeleteChannelBanCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, DeleteChannelBanCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new DeleteChannelBanCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteChannelBanCommandInput} for command's `input` shape.
        * @see {@link DeleteChannelBanCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class DeleteChannelBanCommand extends $Command<DeleteChannelBanCommandInput, DeleteChannelBanCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: DeleteChannelBanCommandInput;
            constructor(input: DeleteChannelBanCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteChannelBanCommandInput, DeleteChannelBanCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { DeleteChannelRequest } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface DeleteChannelCommandInput extends DeleteChannelRequest {
    }
    export interface DeleteChannelCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Immediately makes a channel and its memberships inaccessible and marks them for
        *          deletion. This is an irreversible process.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, DeleteChannelCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, DeleteChannelCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new DeleteChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteChannelCommandInput} for command's `input` shape.
        * @see {@link DeleteChannelCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class DeleteChannelCommand extends $Command<DeleteChannelCommandInput, DeleteChannelCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: DeleteChannelCommandInput;
            constructor(input: DeleteChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteChannelCommandInput, DeleteChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelFlowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { DeleteChannelFlowRequest } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface DeleteChannelFlowCommandInput extends DeleteChannelFlowRequest {
    }
    export interface DeleteChannelFlowCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a channel flow, an irreversible process. This is a developer API.</p>
        *          <note>
        *             <p> This API works only when the channel flow is not associated with any channel. To get a list of all channels that a channel flow is associated with, use the
        *            <code>ListChannelsAssociatedWithChannelFlow</code> API. Use the <code>DisassociateChannelFlow</code> API to disassociate a channel flow from all channels. </p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, DeleteChannelFlowCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, DeleteChannelFlowCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new DeleteChannelFlowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteChannelFlowCommandInput} for command's `input` shape.
        * @see {@link DeleteChannelFlowCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class DeleteChannelFlowCommand extends $Command<DeleteChannelFlowCommandInput, DeleteChannelFlowCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: DeleteChannelFlowCommandInput;
            constructor(input: DeleteChannelFlowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteChannelFlowCommandInput, DeleteChannelFlowCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelMembershipCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { DeleteChannelMembershipRequest } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface DeleteChannelMembershipCommandInput extends DeleteChannelMembershipRequest {
    }
    export interface DeleteChannelMembershipCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes a member from a channel.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, DeleteChannelMembershipCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, DeleteChannelMembershipCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new DeleteChannelMembershipCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteChannelMembershipCommandInput} for command's `input` shape.
        * @see {@link DeleteChannelMembershipCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class DeleteChannelMembershipCommand extends $Command<DeleteChannelMembershipCommandInput, DeleteChannelMembershipCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: DeleteChannelMembershipCommandInput;
            constructor(input: DeleteChannelMembershipCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteChannelMembershipCommandInput, DeleteChannelMembershipCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelMessageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { DeleteChannelMessageRequest } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface DeleteChannelMessageCommandInput extends DeleteChannelMessageRequest {
    }
    export interface DeleteChannelMessageCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a channel message. Only admins can perform this action. Deletion makes messages
        *          inaccessible immediately. A background process deletes any revisions created by
        *             <code>UpdateChannelMessage</code>.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, DeleteChannelMessageCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, DeleteChannelMessageCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new DeleteChannelMessageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteChannelMessageCommandInput} for command's `input` shape.
        * @see {@link DeleteChannelMessageCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class DeleteChannelMessageCommand extends $Command<DeleteChannelMessageCommandInput, DeleteChannelMessageCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: DeleteChannelMessageCommandInput;
            constructor(input: DeleteChannelMessageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteChannelMessageCommandInput, DeleteChannelMessageCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DeleteChannelModeratorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { DeleteChannelModeratorRequest } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface DeleteChannelModeratorCommandInput extends DeleteChannelModeratorRequest {
    }
    export interface DeleteChannelModeratorCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Deletes a channel moderator.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, DeleteChannelModeratorCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, DeleteChannelModeratorCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new DeleteChannelModeratorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteChannelModeratorCommandInput} for command's `input` shape.
        * @see {@link DeleteChannelModeratorCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class DeleteChannelModeratorCommand extends $Command<DeleteChannelModeratorCommandInput, DeleteChannelModeratorCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: DeleteChannelModeratorCommandInput;
            constructor(input: DeleteChannelModeratorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteChannelModeratorCommandInput, DeleteChannelModeratorCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelBanCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { DescribeChannelBanRequest, DescribeChannelBanResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface DescribeChannelBanCommandInput extends DescribeChannelBanRequest {
    }
    export interface DescribeChannelBanCommandOutput extends DescribeChannelBanResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the full details of a channel ban.</p>
        *
        *          <note>
        *
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, DescribeChannelBanCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, DescribeChannelBanCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new DescribeChannelBanCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeChannelBanCommandInput} for command's `input` shape.
        * @see {@link DescribeChannelBanCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class DescribeChannelBanCommand extends $Command<DescribeChannelBanCommandInput, DescribeChannelBanCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: DescribeChannelBanCommandInput;
            constructor(input: DescribeChannelBanCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeChannelBanCommandInput, DescribeChannelBanCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { DescribeChannelRequest, DescribeChannelResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface DescribeChannelCommandInput extends DescribeChannelRequest {
    }
    export interface DescribeChannelCommandOutput extends DescribeChannelResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the full details of a channel in an Amazon Chime
        *          <code>AppInstance</code>.</p>
        *
        *          <note>
        *
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, DescribeChannelCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, DescribeChannelCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new DescribeChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeChannelCommandInput} for command's `input` shape.
        * @see {@link DescribeChannelCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class DescribeChannelCommand extends $Command<DescribeChannelCommandInput, DescribeChannelCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: DescribeChannelCommandInput;
            constructor(input: DescribeChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeChannelCommandInput, DescribeChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelFlowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { DescribeChannelFlowRequest, DescribeChannelFlowResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface DescribeChannelFlowCommandInput extends DescribeChannelFlowRequest {
    }
    export interface DescribeChannelFlowCommandOutput extends DescribeChannelFlowResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the full details of a channel flow in an Amazon Chime <code>AppInstance</code>. This is a developer API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, DescribeChannelFlowCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, DescribeChannelFlowCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new DescribeChannelFlowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeChannelFlowCommandInput} for command's `input` shape.
        * @see {@link DescribeChannelFlowCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class DescribeChannelFlowCommand extends $Command<DescribeChannelFlowCommandInput, DescribeChannelFlowCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: DescribeChannelFlowCommandInput;
            constructor(input: DescribeChannelFlowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeChannelFlowCommandInput, DescribeChannelFlowCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelMembershipCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { DescribeChannelMembershipRequest, DescribeChannelMembershipResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface DescribeChannelMembershipCommandInput extends DescribeChannelMembershipRequest {
    }
    export interface DescribeChannelMembershipCommandOutput extends DescribeChannelMembershipResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the full details of a user's channel membership.</p>
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, DescribeChannelMembershipCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, DescribeChannelMembershipCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new DescribeChannelMembershipCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeChannelMembershipCommandInput} for command's `input` shape.
        * @see {@link DescribeChannelMembershipCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class DescribeChannelMembershipCommand extends $Command<DescribeChannelMembershipCommandInput, DescribeChannelMembershipCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: DescribeChannelMembershipCommandInput;
            constructor(input: DescribeChannelMembershipCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeChannelMembershipCommandInput, DescribeChannelMembershipCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelMembershipForAppInstanceUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { DescribeChannelMembershipForAppInstanceUserRequest, DescribeChannelMembershipForAppInstanceUserResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface DescribeChannelMembershipForAppInstanceUserCommandInput extends DescribeChannelMembershipForAppInstanceUserRequest {
    }
    export interface DescribeChannelMembershipForAppInstanceUserCommandOutput extends DescribeChannelMembershipForAppInstanceUserResponse, __MetadataBearer {
    }
    /**
        * <p> Returns the details of a channel based on the membership of the specified
        *             <code>AppInstanceUser</code>.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, DescribeChannelMembershipForAppInstanceUserCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, DescribeChannelMembershipForAppInstanceUserCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new DescribeChannelMembershipForAppInstanceUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeChannelMembershipForAppInstanceUserCommandInput} for command's `input` shape.
        * @see {@link DescribeChannelMembershipForAppInstanceUserCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class DescribeChannelMembershipForAppInstanceUserCommand extends $Command<DescribeChannelMembershipForAppInstanceUserCommandInput, DescribeChannelMembershipForAppInstanceUserCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: DescribeChannelMembershipForAppInstanceUserCommandInput;
            constructor(input: DescribeChannelMembershipForAppInstanceUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeChannelMembershipForAppInstanceUserCommandInput, DescribeChannelMembershipForAppInstanceUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelModeratedByAppInstanceUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { DescribeChannelModeratedByAppInstanceUserRequest, DescribeChannelModeratedByAppInstanceUserResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface DescribeChannelModeratedByAppInstanceUserCommandInput extends DescribeChannelModeratedByAppInstanceUserRequest {
    }
    export interface DescribeChannelModeratedByAppInstanceUserCommandOutput extends DescribeChannelModeratedByAppInstanceUserResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the full details of a channel moderated by the specified
        *             <code>AppInstanceUser</code>.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, DescribeChannelModeratedByAppInstanceUserCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, DescribeChannelModeratedByAppInstanceUserCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new DescribeChannelModeratedByAppInstanceUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeChannelModeratedByAppInstanceUserCommandInput} for command's `input` shape.
        * @see {@link DescribeChannelModeratedByAppInstanceUserCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class DescribeChannelModeratedByAppInstanceUserCommand extends $Command<DescribeChannelModeratedByAppInstanceUserCommandInput, DescribeChannelModeratedByAppInstanceUserCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: DescribeChannelModeratedByAppInstanceUserCommandInput;
            constructor(input: DescribeChannelModeratedByAppInstanceUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeChannelModeratedByAppInstanceUserCommandInput, DescribeChannelModeratedByAppInstanceUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DescribeChannelModeratorCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { DescribeChannelModeratorRequest, DescribeChannelModeratorResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface DescribeChannelModeratorCommandInput extends DescribeChannelModeratorRequest {
    }
    export interface DescribeChannelModeratorCommandOutput extends DescribeChannelModeratorResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the full details of a single ChannelModerator.</p>
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, DescribeChannelModeratorCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, DescribeChannelModeratorCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new DescribeChannelModeratorCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeChannelModeratorCommandInput} for command's `input` shape.
        * @see {@link DescribeChannelModeratorCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class DescribeChannelModeratorCommand extends $Command<DescribeChannelModeratorCommandInput, DescribeChannelModeratorCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: DescribeChannelModeratorCommandInput;
            constructor(input: DescribeChannelModeratorCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeChannelModeratorCommandInput, DescribeChannelModeratorCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/DisassociateChannelFlowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { DisassociateChannelFlowRequest } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface DisassociateChannelFlowCommandInput extends DisassociateChannelFlowRequest {
    }
    export interface DisassociateChannelFlowCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Disassociates a channel flow from all its channels. Once disassociated, all messages to
        *          that channel stop going through the channel flow processor.</p>
        *          <note>
        *             <p>Only administrators or channel moderators can disassociate a channel flow. The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code>
        *            of the user that makes the API call as the value in the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, DisassociateChannelFlowCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, DisassociateChannelFlowCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new DisassociateChannelFlowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateChannelFlowCommandInput} for command's `input` shape.
        * @see {@link DisassociateChannelFlowCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class DisassociateChannelFlowCommand extends $Command<DisassociateChannelFlowCommandInput, DisassociateChannelFlowCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: DisassociateChannelFlowCommandInput;
            constructor(input: DisassociateChannelFlowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateChannelFlowCommandInput, DisassociateChannelFlowCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/GetChannelMembershipPreferencesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { GetChannelMembershipPreferencesRequest, GetChannelMembershipPreferencesResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface GetChannelMembershipPreferencesCommandInput extends GetChannelMembershipPreferencesRequest {
    }
    export interface GetChannelMembershipPreferencesCommandOutput extends GetChannelMembershipPreferencesResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the membership preferences of an <code>AppInstanceUser</code> for the specified channel. The <code>AppInstanceUser</code> must be a member of the channel.
        *          Only the <code>AppInstanceUser</code> who owns the membership can retrieve preferences. Users in the <code>AppInstanceAdmin</code> and channel moderator roles can't retrieve preferences for other users.
        *          Banned users can't retrieve membership preferences for the channel from which they are banned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, GetChannelMembershipPreferencesCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, GetChannelMembershipPreferencesCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new GetChannelMembershipPreferencesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetChannelMembershipPreferencesCommandInput} for command's `input` shape.
        * @see {@link GetChannelMembershipPreferencesCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class GetChannelMembershipPreferencesCommand extends $Command<GetChannelMembershipPreferencesCommandInput, GetChannelMembershipPreferencesCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: GetChannelMembershipPreferencesCommandInput;
            constructor(input: GetChannelMembershipPreferencesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetChannelMembershipPreferencesCommandInput, GetChannelMembershipPreferencesCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/GetChannelMessageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { GetChannelMessageRequest, GetChannelMessageResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface GetChannelMessageCommandInput extends GetChannelMessageRequest {
    }
    export interface GetChannelMessageCommandOutput extends GetChannelMessageResponse, __MetadataBearer {
    }
    /**
        * <p>Gets the full details of a channel message.</p>
        *
        *          <note>
        *             <p>The x-amz-chime-bearer request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, GetChannelMessageCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, GetChannelMessageCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new GetChannelMessageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetChannelMessageCommandInput} for command's `input` shape.
        * @see {@link GetChannelMessageCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class GetChannelMessageCommand extends $Command<GetChannelMessageCommandInput, GetChannelMessageCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: GetChannelMessageCommandInput;
            constructor(input: GetChannelMessageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetChannelMessageCommandInput, GetChannelMessageCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/GetChannelMessageStatusCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { GetChannelMessageStatusRequest, GetChannelMessageStatusResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface GetChannelMessageStatusCommandInput extends GetChannelMessageStatusRequest {
    }
    export interface GetChannelMessageStatusCommandOutput extends GetChannelMessageStatusResponse, __MetadataBearer {
    }
    /**
        * <p>Gets message status for a specified <code>messageId</code>. Use this API to determine the intermediate status of messages going through channel flow processing. The API provides an alternative to
        *          retrieving message status if the event was not received because a client wasn't connected to a websocket. </p>
        *
        *          <p>Messages can have any one of these statuses.</p>
        *
        *          <dl>
        *             <dt>SENT</dt>
        *             <dd>
        *                <p>Message processed successfully</p>
        *             </dd>
        *             <dt>PENDING</dt>
        *             <dd>
        *                <p>Ongoing processing</p>
        *             </dd>
        *             <dt>FAILED</dt>
        *             <dd>
        *                <p>Processing failed</p>
        *             </dd>
        *             <dt>DENIED</dt>
        *             <dd>
        *                <p>Messasge denied by the processor</p>
        *             </dd>
        *          </dl>
        *
        *          <note>
        *             <ul>
        *                <li>
        *                   <p>This API does not return statuses for denied messages, because we don't store them once the processor denies them. </p>
        *                </li>
        *                <li>
        *                   <p>Only the message sender can invoke this API.</p>
        *                </li>
        *                <li>
        *                   <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header</p>
        *                </li>
        *             </ul>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, GetChannelMessageStatusCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, GetChannelMessageStatusCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new GetChannelMessageStatusCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetChannelMessageStatusCommandInput} for command's `input` shape.
        * @see {@link GetChannelMessageStatusCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class GetChannelMessageStatusCommand extends $Command<GetChannelMessageStatusCommandInput, GetChannelMessageStatusCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: GetChannelMessageStatusCommandInput;
            constructor(input: GetChannelMessageStatusCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetChannelMessageStatusCommandInput, GetChannelMessageStatusCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/GetMessagingSessionEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { GetMessagingSessionEndpointRequest, GetMessagingSessionEndpointResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface GetMessagingSessionEndpointCommandInput extends GetMessagingSessionEndpointRequest {
    }
    export interface GetMessagingSessionEndpointCommandOutput extends GetMessagingSessionEndpointResponse, __MetadataBearer {
    }
    /**
        * <p>The details of the endpoint for the messaging session.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, GetMessagingSessionEndpointCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, GetMessagingSessionEndpointCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new GetMessagingSessionEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetMessagingSessionEndpointCommandInput} for command's `input` shape.
        * @see {@link GetMessagingSessionEndpointCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class GetMessagingSessionEndpointCommand extends $Command<GetMessagingSessionEndpointCommandInput, GetMessagingSessionEndpointCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: GetMessagingSessionEndpointCommandInput;
            constructor(input: GetMessagingSessionEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetMessagingSessionEndpointCommandInput, GetMessagingSessionEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelBansCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { ListChannelBansRequest, ListChannelBansResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface ListChannelBansCommandInput extends ListChannelBansRequest {
    }
    export interface ListChannelBansCommandOutput extends ListChannelBansResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the users banned from a particular channel.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, ListChannelBansCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, ListChannelBansCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new ListChannelBansCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListChannelBansCommandInput} for command's `input` shape.
        * @see {@link ListChannelBansCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class ListChannelBansCommand extends $Command<ListChannelBansCommandInput, ListChannelBansCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: ListChannelBansCommandInput;
            constructor(input: ListChannelBansCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListChannelBansCommandInput, ListChannelBansCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelFlowsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { ListChannelFlowsRequest, ListChannelFlowsResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface ListChannelFlowsCommandInput extends ListChannelFlowsRequest {
    }
    export interface ListChannelFlowsCommandOutput extends ListChannelFlowsResponse, __MetadataBearer {
    }
    /**
        * <p>Returns a paginated lists of all the channel flows created under a single Chime. This is a developer API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, ListChannelFlowsCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, ListChannelFlowsCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new ListChannelFlowsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListChannelFlowsCommandInput} for command's `input` shape.
        * @see {@link ListChannelFlowsCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class ListChannelFlowsCommand extends $Command<ListChannelFlowsCommandInput, ListChannelFlowsCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: ListChannelFlowsCommandInput;
            constructor(input: ListChannelFlowsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListChannelFlowsCommandInput, ListChannelFlowsCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelMembershipsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { ListChannelMembershipsRequest, ListChannelMembershipsResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface ListChannelMembershipsCommandInput extends ListChannelMembershipsRequest {
    }
    export interface ListChannelMembershipsCommandOutput extends ListChannelMembershipsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all channel memberships in a channel.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        *
        *          <p>If you want to list the channels to which a specific app instance user belongs, see the
        *          <a href="https://docs.aws.amazon.com/chime/latest/APIReference/API_messaging-chime_ListChannelMembershipsForAppInstanceUser.html">ListChannelMembershipsForAppInstanceUser</a> API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, ListChannelMembershipsCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, ListChannelMembershipsCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new ListChannelMembershipsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListChannelMembershipsCommandInput} for command's `input` shape.
        * @see {@link ListChannelMembershipsCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class ListChannelMembershipsCommand extends $Command<ListChannelMembershipsCommandInput, ListChannelMembershipsCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: ListChannelMembershipsCommandInput;
            constructor(input: ListChannelMembershipsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListChannelMembershipsCommandInput, ListChannelMembershipsCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelMembershipsForAppInstanceUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { ListChannelMembershipsForAppInstanceUserRequest, ListChannelMembershipsForAppInstanceUserResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface ListChannelMembershipsForAppInstanceUserCommandInput extends ListChannelMembershipsForAppInstanceUserRequest {
    }
    export interface ListChannelMembershipsForAppInstanceUserCommandOutput extends ListChannelMembershipsForAppInstanceUserResponse, __MetadataBearer {
    }
    /**
        * <p> Lists all channels that a particular <code>AppInstanceUser</code> is a part of. Only an
        *             <code>AppInstanceAdmin</code> can call the API with a user ARN that is not their own. </p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, ListChannelMembershipsForAppInstanceUserCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, ListChannelMembershipsForAppInstanceUserCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new ListChannelMembershipsForAppInstanceUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListChannelMembershipsForAppInstanceUserCommandInput} for command's `input` shape.
        * @see {@link ListChannelMembershipsForAppInstanceUserCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class ListChannelMembershipsForAppInstanceUserCommand extends $Command<ListChannelMembershipsForAppInstanceUserCommandInput, ListChannelMembershipsForAppInstanceUserCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: ListChannelMembershipsForAppInstanceUserCommandInput;
            constructor(input: ListChannelMembershipsForAppInstanceUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListChannelMembershipsForAppInstanceUserCommandInput, ListChannelMembershipsForAppInstanceUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelMessagesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { ListChannelMessagesRequest, ListChannelMessagesResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface ListChannelMessagesCommandInput extends ListChannelMessagesRequest {
    }
    export interface ListChannelMessagesCommandOutput extends ListChannelMessagesResponse, __MetadataBearer {
    }
    /**
        * <p>List all the messages in a channel. Returns a paginated list of
        *             <code>ChannelMessages</code>. By default, sorted by creation timestamp in descending
        *          order.</p>
        *          <note>
        *             <p>Redacted messages appear in the results as empty, since they are only redacted, not
        *             deleted. Deleted messages do not appear in the results. This action always returns the
        *             latest version of an edited message.</p>
        *             <p>Also, the x-amz-chime-bearer request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, ListChannelMessagesCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, ListChannelMessagesCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new ListChannelMessagesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListChannelMessagesCommandInput} for command's `input` shape.
        * @see {@link ListChannelMessagesCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class ListChannelMessagesCommand extends $Command<ListChannelMessagesCommandInput, ListChannelMessagesCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: ListChannelMessagesCommandInput;
            constructor(input: ListChannelMessagesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListChannelMessagesCommandInput, ListChannelMessagesCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelModeratorsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { ListChannelModeratorsRequest, ListChannelModeratorsResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface ListChannelModeratorsCommandInput extends ListChannelModeratorsRequest {
    }
    export interface ListChannelModeratorsCommandOutput extends ListChannelModeratorsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all the moderators for a channel.</p>
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, ListChannelModeratorsCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, ListChannelModeratorsCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new ListChannelModeratorsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListChannelModeratorsCommandInput} for command's `input` shape.
        * @see {@link ListChannelModeratorsCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class ListChannelModeratorsCommand extends $Command<ListChannelModeratorsCommandInput, ListChannelModeratorsCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: ListChannelModeratorsCommandInput;
            constructor(input: ListChannelModeratorsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListChannelModeratorsCommandInput, ListChannelModeratorsCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelsAssociatedWithChannelFlowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { ListChannelsAssociatedWithChannelFlowRequest, ListChannelsAssociatedWithChannelFlowResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface ListChannelsAssociatedWithChannelFlowCommandInput extends ListChannelsAssociatedWithChannelFlowRequest {
    }
    export interface ListChannelsAssociatedWithChannelFlowCommandOutput extends ListChannelsAssociatedWithChannelFlowResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all channels associated with a specified channel flow. You can associate a channel flow with multiple channels, but you can only associate a channel with one channel flow. This is a developer API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, ListChannelsAssociatedWithChannelFlowCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, ListChannelsAssociatedWithChannelFlowCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new ListChannelsAssociatedWithChannelFlowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListChannelsAssociatedWithChannelFlowCommandInput} for command's `input` shape.
        * @see {@link ListChannelsAssociatedWithChannelFlowCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class ListChannelsAssociatedWithChannelFlowCommand extends $Command<ListChannelsAssociatedWithChannelFlowCommandInput, ListChannelsAssociatedWithChannelFlowCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: ListChannelsAssociatedWithChannelFlowCommandInput;
            constructor(input: ListChannelsAssociatedWithChannelFlowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListChannelsAssociatedWithChannelFlowCommandInput, ListChannelsAssociatedWithChannelFlowCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { ListChannelsRequest, ListChannelsResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface ListChannelsCommandInput extends ListChannelsRequest {
    }
    export interface ListChannelsCommandOutput extends ListChannelsResponse, __MetadataBearer {
    }
    /**
        * <p>Lists all Channels created under a single Chime App as a paginated list. You can specify
        *          filters to narrow results.</p>
        *
        *          <p class="title">
        *             <b>Functionality & restrictions</b>
        *          </p>
        *          <ul>
        *             <li>
        *                <p>Use privacy = <code>PUBLIC</code> to retrieve all public channels in the
        *                account.</p>
        *             </li>
        *             <li>
        *                <p>Only an <code>AppInstanceAdmin</code> can set privacy = <code>PRIVATE</code> to
        *                list the private channels in an account.</p>
        *             </li>
        *          </ul>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, ListChannelsCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, ListChannelsCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new ListChannelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListChannelsCommandInput} for command's `input` shape.
        * @see {@link ListChannelsCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class ListChannelsCommand extends $Command<ListChannelsCommandInput, ListChannelsCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: ListChannelsCommandInput;
            constructor(input: ListChannelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListChannelsCommandInput, ListChannelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListChannelsModeratedByAppInstanceUserCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { ListChannelsModeratedByAppInstanceUserRequest, ListChannelsModeratedByAppInstanceUserResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface ListChannelsModeratedByAppInstanceUserCommandInput extends ListChannelsModeratedByAppInstanceUserRequest {
    }
    export interface ListChannelsModeratedByAppInstanceUserCommandOutput extends ListChannelsModeratedByAppInstanceUserResponse, __MetadataBearer {
    }
    /**
        * <p>A list of the channels moderated by an <code>AppInstanceUser</code>.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, ListChannelsModeratedByAppInstanceUserCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, ListChannelsModeratedByAppInstanceUserCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new ListChannelsModeratedByAppInstanceUserCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListChannelsModeratedByAppInstanceUserCommandInput} for command's `input` shape.
        * @see {@link ListChannelsModeratedByAppInstanceUserCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class ListChannelsModeratedByAppInstanceUserCommand extends $Command<ListChannelsModeratedByAppInstanceUserCommandInput, ListChannelsModeratedByAppInstanceUserCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: ListChannelsModeratedByAppInstanceUserCommandInput;
            constructor(input: ListChannelsModeratedByAppInstanceUserCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListChannelsModeratedByAppInstanceUserCommandInput, ListChannelsModeratedByAppInstanceUserCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Lists the tags applied to an Amazon Chime SDK messaging resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, ListTagsForResourceCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, ListTagsForResourceCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/PutChannelMembershipPreferencesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { PutChannelMembershipPreferencesRequest, PutChannelMembershipPreferencesResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface PutChannelMembershipPreferencesCommandInput extends PutChannelMembershipPreferencesRequest {
    }
    export interface PutChannelMembershipPreferencesCommandOutput extends PutChannelMembershipPreferencesResponse, __MetadataBearer {
    }
    /**
        * <p>Sets the membership preferences of an <code>AppInstanceUser</code> for the specified channel. The <code>AppInstanceUser</code> must be a member of the channel.
        *          Only the <code>AppInstanceUser</code> who owns the membership can set preferences. Users in the <code>AppInstanceAdmin</code> and channel moderator roles can't set preferences for other users.
        *          Banned users can't set membership preferences for the channel from which they are banned.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, PutChannelMembershipPreferencesCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, PutChannelMembershipPreferencesCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new PutChannelMembershipPreferencesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutChannelMembershipPreferencesCommandInput} for command's `input` shape.
        * @see {@link PutChannelMembershipPreferencesCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class PutChannelMembershipPreferencesCommand extends $Command<PutChannelMembershipPreferencesCommandInput, PutChannelMembershipPreferencesCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: PutChannelMembershipPreferencesCommandInput;
            constructor(input: PutChannelMembershipPreferencesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutChannelMembershipPreferencesCommandInput, PutChannelMembershipPreferencesCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/RedactChannelMessageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { RedactChannelMessageRequest, RedactChannelMessageResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface RedactChannelMessageCommandInput extends RedactChannelMessageRequest {
    }
    export interface RedactChannelMessageCommandOutput extends RedactChannelMessageResponse, __MetadataBearer {
    }
    /**
        * <p>Redacts message content, but not metadata. The message exists in the back end, but the
        *          action returns null content, and the state shows as redacted.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, RedactChannelMessageCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, RedactChannelMessageCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new RedactChannelMessageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link RedactChannelMessageCommandInput} for command's `input` shape.
        * @see {@link RedactChannelMessageCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class RedactChannelMessageCommand extends $Command<RedactChannelMessageCommandInput, RedactChannelMessageCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: RedactChannelMessageCommandInput;
            constructor(input: RedactChannelMessageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<RedactChannelMessageCommandInput, RedactChannelMessageCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/SearchChannelsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { SearchChannelsRequest, SearchChannelsResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface SearchChannelsCommandInput extends SearchChannelsRequest {
    }
    export interface SearchChannelsCommandOutput extends SearchChannelsResponse, __MetadataBearer {
    }
    /**
        * <p>Allows an <code>AppInstanceUser</code> to search the channels that they belong to. The <code>AppInstanceUser</code> can search by membership or external ID.
        *          An <code>AppInstanceAdmin</code> can search across all channels within the <code>AppInstance</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, SearchChannelsCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, SearchChannelsCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new SearchChannelsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SearchChannelsCommandInput} for command's `input` shape.
        * @see {@link SearchChannelsCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class SearchChannelsCommand extends $Command<SearchChannelsCommandInput, SearchChannelsCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: SearchChannelsCommandInput;
            constructor(input: SearchChannelsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SearchChannelsCommandInput, SearchChannelsCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/SendChannelMessageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { SendChannelMessageRequest, SendChannelMessageResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface SendChannelMessageCommandInput extends SendChannelMessageRequest {
    }
    export interface SendChannelMessageCommandOutput extends SendChannelMessageResponse, __MetadataBearer {
    }
    /**
        * <p>Sends a message to a particular channel that the member is a part of.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *
        *             <p>Also, <code>STANDARD</code> messages can contain 4KB of data and the 1KB of metadata.
        *                <code>CONTROL</code> messages can contain 30 bytes of data and no metadata.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, SendChannelMessageCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, SendChannelMessageCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new SendChannelMessageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SendChannelMessageCommandInput} for command's `input` shape.
        * @see {@link SendChannelMessageCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class SendChannelMessageCommand extends $Command<SendChannelMessageCommandInput, SendChannelMessageCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: SendChannelMessageCommandInput;
            constructor(input: SendChannelMessageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SendChannelMessageCommandInput, SendChannelMessageCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { TagResourceRequest } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Applies the specified tags to the specified Amazon Chime SDK messaging resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, TagResourceCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, TagResourceCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { UntagResourceRequest } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends __MetadataBearer {
    }
    /**
        * <p>Removes the specified tags from the specified Amazon Chime SDK messaging resource.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, UntagResourceCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, UntagResourceCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UpdateChannelCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { UpdateChannelRequest, UpdateChannelResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface UpdateChannelCommandInput extends UpdateChannelRequest {
    }
    export interface UpdateChannelCommandOutput extends UpdateChannelResponse, __MetadataBearer {
    }
    /**
        * <p>Update a channel's attributes.</p>
        *          <p>
        *             <b>Restriction</b>: You can't change a channel's privacy. </p>
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, UpdateChannelCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, UpdateChannelCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new UpdateChannelCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateChannelCommandInput} for command's `input` shape.
        * @see {@link UpdateChannelCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class UpdateChannelCommand extends $Command<UpdateChannelCommandInput, UpdateChannelCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: UpdateChannelCommandInput;
            constructor(input: UpdateChannelCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateChannelCommandInput, UpdateChannelCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UpdateChannelFlowCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { UpdateChannelFlowRequest, UpdateChannelFlowResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface UpdateChannelFlowCommandInput extends UpdateChannelFlowRequest {
    }
    export interface UpdateChannelFlowCommandOutput extends UpdateChannelFlowResponse, __MetadataBearer {
    }
    /**
        * <p>Updates channel flow attributes. This is a developer API.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, UpdateChannelFlowCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, UpdateChannelFlowCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new UpdateChannelFlowCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateChannelFlowCommandInput} for command's `input` shape.
        * @see {@link UpdateChannelFlowCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class UpdateChannelFlowCommand extends $Command<UpdateChannelFlowCommandInput, UpdateChannelFlowCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: UpdateChannelFlowCommandInput;
            constructor(input: UpdateChannelFlowCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateChannelFlowCommandInput, UpdateChannelFlowCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UpdateChannelMessageCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { UpdateChannelMessageRequest, UpdateChannelMessageResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface UpdateChannelMessageCommandInput extends UpdateChannelMessageRequest {
    }
    export interface UpdateChannelMessageCommandOutput extends UpdateChannelMessageResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the content of a message.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, UpdateChannelMessageCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, UpdateChannelMessageCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new UpdateChannelMessageCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateChannelMessageCommandInput} for command's `input` shape.
        * @see {@link UpdateChannelMessageCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class UpdateChannelMessageCommand extends $Command<UpdateChannelMessageCommandInput, UpdateChannelMessageCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: UpdateChannelMessageCommandInput;
            constructor(input: UpdateChannelMessageCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateChannelMessageCommandInput, UpdateChannelMessageCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/commands/UpdateChannelReadMarkerCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ChimeSDKMessagingClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/ChimeSDKMessagingClient";
    import { UpdateChannelReadMarkerRequest, UpdateChannelReadMarkerResponse } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0";
    export interface UpdateChannelReadMarkerCommandInput extends UpdateChannelReadMarkerRequest {
    }
    export interface UpdateChannelReadMarkerCommandOutput extends UpdateChannelReadMarkerResponse, __MetadataBearer {
    }
    /**
        * <p>The details of the time when a user last read messages in a channel.</p>
        *
        *          <note>
        *             <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
        *                <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
        *             the header.</p>
        *          </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { ChimeSDKMessagingClient, UpdateChannelReadMarkerCommand } from "@aws-sdk/client-chime-sdk-messaging"; // ES Modules import
        * // const { ChimeSDKMessagingClient, UpdateChannelReadMarkerCommand } = require("@aws-sdk/client-chime-sdk-messaging"); // CommonJS import
        * const client = new ChimeSDKMessagingClient(config);
        * const command = new UpdateChannelReadMarkerCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateChannelReadMarkerCommandInput} for command's `input` shape.
        * @see {@link UpdateChannelReadMarkerCommandOutput} for command's `response` shape.
        * @see {@link ChimeSDKMessagingClientResolvedConfig | config} for ChimeSDKMessagingClient's `config` shape.
        *
        */
    export class UpdateChannelReadMarkerCommand extends $Command<UpdateChannelReadMarkerCommandInput, UpdateChannelReadMarkerCommandOutput, ChimeSDKMessagingClientResolvedConfig> {
            readonly input: UpdateChannelReadMarkerCommandInput;
            constructor(input: UpdateChannelReadMarkerCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: ChimeSDKMessagingClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateChannelReadMarkerCommandInput, UpdateChannelReadMarkerCommandOutput>;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { ChimeSDKMessagingServiceException as __BaseException } from "@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/ChimeSDKMessagingServiceException";
    export enum AllowNotifications {
            ALL = "ALL",
            FILTERED = "FILTERED",
            NONE = "NONE"
    }
    export enum ChannelMembershipType {
            DEFAULT = "DEFAULT",
            HIDDEN = "HIDDEN"
    }
    /**
        * <p>Summary of the membership details of an <code>AppInstanceUser</code>.</p>
        */
    export interface AppInstanceUserMembershipSummary {
            /**
                * <p>The type of <code>ChannelMembership</code>.</p>
                */
            Type?: ChannelMembershipType | string;
            /**
                * <p>The time at which an <code>AppInstanceUser</code> last marked a channel as read.</p>
                */
            ReadMarkerTimestamp?: Date;
    }
    export namespace AppInstanceUserMembershipSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AppInstanceUserMembershipSummary) => any;
    }
    export interface AssociateChannelFlowRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The ARN of the channel flow.</p>
                */
            ChannelFlowArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user making the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace AssociateChannelFlowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateChannelFlowRequest) => any;
    }
    export enum ErrorCode {
            AccessDenied = "AccessDenied",
            BadRequest = "BadRequest",
            Conflict = "Conflict",
            Forbidden = "Forbidden",
            NotFound = "NotFound",
            PhoneNumberAssociationsExist = "PhoneNumberAssociationsExist",
            PreconditionFailed = "PreconditionFailed",
            ResourceLimitExceeded = "ResourceLimitExceeded",
            ServiceFailure = "ServiceFailure",
            ServiceUnavailable = "ServiceUnavailable",
            Throttled = "Throttled",
            Throttling = "Throttling",
            Unauthorized = "Unauthorized",
            Unprocessable = "Unprocessable",
            VoiceConnectorGroupAssociationsExist = "VoiceConnectorGroupAssociationsExist"
    }
    /**
        * <p>The input parameters don't match the service's restrictions.</p>
        */
    export class BadRequestException extends __BaseException {
            readonly name: "BadRequestException";
            readonly $fault: "client";
            Code?: ErrorCode | string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<BadRequestException, __BaseException>);
    }
    /**
        * <p>The request could not be processed because of conflict in the current state of the
        *          resource.</p>
        */
    export class ConflictException extends __BaseException {
            readonly name: "ConflictException";
            readonly $fault: "client";
            Code?: ErrorCode | string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
    }
    /**
        * <p>The client is permanently forbidden from making the request.</p>
        */
    export class ForbiddenException extends __BaseException {
            readonly name: "ForbiddenException";
            readonly $fault: "client";
            Code?: ErrorCode | string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ForbiddenException, __BaseException>);
    }
    /**
        * <p>One or more of the resources in the request does not exist in the system.</p>
        */
    export class NotFoundException extends __BaseException {
            readonly name: "NotFoundException";
            readonly $fault: "client";
            Code?: ErrorCode | string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
    }
    /**
        * <p>The service encountered an unexpected error.</p>
        */
    export class ServiceFailureException extends __BaseException {
            readonly name: "ServiceFailureException";
            readonly $fault: "server";
            Code?: ErrorCode | string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceFailureException, __BaseException>);
    }
    /**
        * <p>The service is currently unavailable.</p>
        */
    export class ServiceUnavailableException extends __BaseException {
            readonly name: "ServiceUnavailableException";
            readonly $fault: "server";
            Code?: ErrorCode | string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>);
    }
    /**
        * <p>The client exceeded its request rate limit.</p>
        */
    export class ThrottledClientException extends __BaseException {
            readonly name: "ThrottledClientException";
            readonly $fault: "client";
            Code?: ErrorCode | string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottledClientException, __BaseException>);
    }
    /**
        * <p>The client is not currently authorized to make the request.</p>
        */
    export class UnauthorizedClientException extends __BaseException {
            readonly name: "UnauthorizedClientException";
            readonly $fault: "client";
            Code?: ErrorCode | string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnauthorizedClientException, __BaseException>);
    }
    /**
        * <p>The details of a user.</p>
        */
    export interface Identity {
            /**
                * <p>The ARN in an Identity.</p>
                */
            Arn?: string;
            /**
                * <p>The name in an Identity.</p>
                */
            Name?: string;
    }
    export namespace Identity {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Identity) => any;
    }
    /**
        * <p>The membership information, including member ARNs, the channel ARN, and membership
        *          types.</p>
        */
    export interface BatchChannelMemberships {
            /**
                * <p>The identifier of the member who invited another member.</p>
                */
            InvitedBy?: Identity;
            /**
                * <p>The membership types set for the channel users.</p>
                */
            Type?: ChannelMembershipType | string;
            /**
                * <p>The users successfully added to the request.</p>
                */
            Members?: Identity[];
            /**
                * <p>The ARN of the channel to which you're adding users.</p>
                */
            ChannelArn?: string;
    }
    export namespace BatchChannelMemberships {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchChannelMemberships) => any;
    }
    export interface BatchCreateChannelMembershipRequest {
            /**
                * <p>The ARN of the channel to which you're adding users.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The membership type of a user, <code>DEFAULT</code> or <code>HIDDEN</code>. Default
                *          members are always returned as part of <code>ListChannelMemberships</code>. Hidden members
                *          are only returned if the type filter in <code>ListChannelMemberships</code> equals
                *             <code>HIDDEN</code>. Otherwise hidden members are not returned. This is only supported
                *          by moderators.</p>
                */
            Type?: ChannelMembershipType | string;
            /**
                * <p>The <code>AppInstanceUserArn</code>s of the members you want to add to the channel.</p>
                */
            MemberArns: string[] | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace BatchCreateChannelMembershipRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreateChannelMembershipRequest) => any;
    }
    /**
        * <p>A list of failed member ARNs, error codes, and error messages.</p>
        */
    export interface BatchCreateChannelMembershipError {
            /**
                * <p>The <code>AppInstanceUserArn</code> of the member that the service couldn't add.</p>
                */
            MemberArn?: string;
            /**
                * <p>The error code.</p>
                */
            ErrorCode?: ErrorCode | string;
            /**
                * <p>The error message.</p>
                */
            ErrorMessage?: string;
    }
    export namespace BatchCreateChannelMembershipError {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreateChannelMembershipError) => any;
    }
    export interface BatchCreateChannelMembershipResponse {
            /**
                * <p>The list of channel memberships in the response.</p>
                */
            BatchChannelMemberships?: BatchChannelMemberships;
            /**
                * <p>If the action fails for one or more of the memberships in the request, a list of the
                *          memberships is returned, along with error codes and error messages.</p>
                */
            Errors?: BatchCreateChannelMembershipError[];
    }
    export namespace BatchCreateChannelMembershipResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: BatchCreateChannelMembershipResponse) => any;
    }
    export enum ChannelMode {
            RESTRICTED = "RESTRICTED",
            UNRESTRICTED = "UNRESTRICTED"
    }
    export enum ChannelPrivacy {
            PRIVATE = "PRIVATE",
            PUBLIC = "PUBLIC"
    }
    /**
        * <p>The details of a channel.</p>
        */
    export interface Channel {
            /**
                * <p>The name of a channel.</p>
                */
            Name?: string;
            /**
                * <p>The ARN of a channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The mode of the channel.</p>
                */
            Mode?: ChannelMode | string;
            /**
                * <p>The channel's privacy setting.</p>
                */
            Privacy?: ChannelPrivacy | string;
            /**
                * <p>The channel's metadata.</p>
                */
            Metadata?: string;
            /**
                * <p>The <code>AppInstanceUser</code> who created the channel.</p>
                */
            CreatedBy?: Identity;
            /**
                * <p>The time at which the <code>AppInstanceUser</code> created the channel.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The time at which a member sent the last message in the channel.</p>
                */
            LastMessageTimestamp?: Date;
            /**
                * <p>The time at which a channel was last updated.</p>
                */
            LastUpdatedTimestamp?: Date;
            /**
                * <p>The ARN of the channel flow.</p>
                */
            ChannelFlowArn?: string;
    }
    export namespace Channel {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Channel) => any;
    }
    /**
        * <p>Summary of details of a channel associated with channel flow.</p>
        */
    export interface ChannelAssociatedWithFlowSummary {
            /**
                * <p>The name of the channel flow.</p>
                */
            Name?: string;
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The mode of the channel.</p>
                */
            Mode?: ChannelMode | string;
            /**
                * <p>The channel's privacy setting.</p>
                */
            Privacy?: ChannelPrivacy | string;
            /**
                * <p>The channel's metadata.</p>
                */
            Metadata?: string;
    }
    export namespace ChannelAssociatedWithFlowSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelAssociatedWithFlowSummary) => any;
    }
    /**
        * <p>The details of a channel ban.</p>
        */
    export interface ChannelBan {
            /**
                * <p>The member being banned from the channel.</p>
                */
            Member?: Identity;
            /**
                * <p>The ARN of the channel from which a member is being banned.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The time at which the ban was created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The <code>AppInstanceUser</code> who created the ban.</p>
                */
            CreatedBy?: Identity;
    }
    export namespace ChannelBan {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelBan) => any;
    }
    /**
        * <p>Summary of the details of a <code>ChannelBan</code>.</p>
        */
    export interface ChannelBanSummary {
            /**
                * <p>The member being banned from a channel.</p>
                */
            Member?: Identity;
    }
    export namespace ChannelBanSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelBanSummary) => any;
    }
    export enum InvocationType {
            ASYNC = "ASYNC"
    }
    /**
        * <p>Stores metadata about a Lambda processor.</p>
        */
    export interface LambdaConfiguration {
            /**
                * <p>The ARN of the Lambda message processing function.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>Controls how the Lambda function is invoked.</p>
                */
            InvocationType: InvocationType | string | undefined;
    }
    export namespace LambdaConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LambdaConfiguration) => any;
    }
    /**
        * <p>A processor's metadata.</p>
        */
    export interface ProcessorConfiguration {
            /**
                * <p>Indicates that the processor is of type Lambda.</p>
                */
            Lambda: LambdaConfiguration | undefined;
    }
    export namespace ProcessorConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ProcessorConfiguration) => any;
    }
    export enum FallbackAction {
            ABORT = "ABORT",
            CONTINUE = "CONTINUE"
    }
    /**
        * <p>The information about a processor in a channel flow.</p>
        */
    export interface Processor {
            /**
                * <p>The name of the channel flow.</p>
                */
            Name: string | undefined;
            /**
                * <p>The information about the type of processor and its identifier.</p>
                */
            Configuration: ProcessorConfiguration | undefined;
            /**
                * <p>The sequence in which processors run. If you have multiple processors in a channel flow, message processing goes through each processor in the sequence. The value determines the sequence.
                *          At this point, we support only 1 processor within a flow.</p>
                */
            ExecutionOrder: number | undefined;
            /**
                * <p>Determines whether to continue with message processing or stop it in cases where communication with a processor fails. If a processor has a fallback action of <code>ABORT</code> and
                *          communication with it fails, the processor sets the message status to <code>FAILED</code> and does not send the message to any recipients. Note that if the last processor in the channel flow sequence
                *          has a fallback action of <code>CONTINUE</code> and communication with the processor fails, then the message is considered processed and sent to recipients of the channel.</p>
                */
            FallbackAction: FallbackAction | string | undefined;
    }
    export namespace Processor {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Processor) => any;
    }
    /**
        * <p>The details of a channel flow.</p>
        */
    export interface ChannelFlow {
            /**
                * <p>The ARN of the channel flow.</p>
                */
            ChannelFlowArn?: string;
            /**
                * <p>Information about the processor Lambda functions.</p>
                */
            Processors?: Processor[];
            /**
                * <p>The name of the channel flow.</p>
                */
            Name?: string;
            /**
                * <p>The time at which the channel flow was created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The time at which a channel flow was updated.</p>
                */
            LastUpdatedTimestamp?: Date;
    }
    export namespace ChannelFlow {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelFlow) => any;
    }
    /**
        * <p>A list of message attribute values.</p>
        */
    export interface MessageAttributeValue {
            /**
                * <p>The strings in a message attribute value.</p>
                */
            StringValues?: string[];
    }
    export namespace MessageAttributeValue {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MessageAttributeValue) => any;
    }
    export enum PushNotificationType {
            DEFAULT = "DEFAULT",
            VOIP = "VOIP"
    }
    /**
        * <p>The push notification configuration of the message.</p>
        */
    export interface PushNotificationConfiguration {
            /**
                * <p>The title of the push notification.</p>
                */
            Title?: string;
            /**
                * <p>The body of the push notification.</p>
                */
            Body?: string;
            /**
                * <p>Enum value that indicates the type of the push notification for a message.
                *          <code>DEFAULT</code>: Normal mobile push notification.
                *          <code>VOIP</code>: VOIP mobile push notification.</p>
                */
            Type?: PushNotificationType | string;
    }
    export namespace PushNotificationConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PushNotificationConfiguration) => any;
    }
    /**
        * <p>Stores information about a callback.</p>
        */
    export interface ChannelMessageCallback {
            /**
                * <p>The message ID.</p>
                */
            MessageId: string | undefined;
            /**
                * <p>The message content.</p>
                */
            Content?: string;
            /**
                * <p>The message metadata.</p>
                */
            Metadata?: string;
            /**
                * <p>The push notification configuration of the message.</p>
                */
            PushNotification?: PushNotificationConfiguration;
            /**
                * <p>The attributes for the message, used for message filtering along with a <code>FilterRule</code> defined in the <code>PushNotificationPreferences</code>. </p>
                */
            MessageAttributes?: Record<string, MessageAttributeValue>;
    }
    export namespace ChannelMessageCallback {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelMessageCallback) => any;
    }
    export interface ChannelFlowCallbackRequest {
            /**
                * <p>The identifier passed to the processor by the service when invoked. Use the identifier to call back the service.</p>
                */
            CallbackId?: string;
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>When a processor determines that a message needs to be <code>DENIED</code>, pass this parameter with a value of true.</p>
                */
            DeleteResource?: boolean;
            /**
                * <p>Stores information about the processed message.</p>
                */
            ChannelMessage: ChannelMessageCallback | undefined;
    }
    export namespace ChannelFlowCallbackRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelFlowCallbackRequest) => any;
    }
    export interface ChannelFlowCallbackResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The call back ID passed in the request.</p>
                */
            CallbackId?: string;
    }
    export namespace ChannelFlowCallbackResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelFlowCallbackResponse) => any;
    }
    /**
        * <p>Summary of details of a channel flow.</p>
        */
    export interface ChannelFlowSummary {
            /**
                * <p>The ARN of the channel flow.</p>
                */
            ChannelFlowArn?: string;
            /**
                * <p>The name of the channel flow.</p>
                */
            Name?: string;
            /**
                * <p>Information about the processor Lambda functions.</p>
                */
            Processors?: Processor[];
    }
    export namespace ChannelFlowSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelFlowSummary) => any;
    }
    /**
        * <p>The details of a channel member.</p>
        */
    export interface ChannelMembership {
            /**
                * <p>The identifier of the member who invited another member.</p>
                */
            InvitedBy?: Identity;
            /**
                * <p>The membership type set for the channel member.</p>
                */
            Type?: ChannelMembershipType | string;
            /**
                * <p>The data of the channel member.</p>
                */
            Member?: Identity;
            /**
                * <p>The ARN of the member's channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The time at which the channel membership was created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The time at which a channel membership was last updated.</p>
                */
            LastUpdatedTimestamp?: Date;
    }
    export namespace ChannelMembership {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelMembership) => any;
    }
    /**
        * <p>Summary of the details of a <code>Channel</code>.</p>
        */
    export interface ChannelSummary {
            /**
                * <p>The name of the channel.</p>
                */
            Name?: string;
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The mode of the channel.</p>
                */
            Mode?: ChannelMode | string;
            /**
                * <p>The privacy setting of the channel.</p>
                */
            Privacy?: ChannelPrivacy | string;
            /**
                * <p>The metadata of the channel.</p>
                */
            Metadata?: string;
            /**
                * <p>The time at which the last message in a channel was sent.</p>
                */
            LastMessageTimestamp?: Date;
    }
    export namespace ChannelSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelSummary) => any;
    }
    /**
        * <p>Summary of the channel membership details of an <code>AppInstanceUser</code>.</p>
        */
    export interface ChannelMembershipForAppInstanceUserSummary {
            /**
                * <p>Returns the channel data for an <code>AppInstance</code>.</p>
                */
            ChannelSummary?: ChannelSummary;
            /**
                * <p>Returns the channel membership data for an <code>AppInstance</code>.</p>
                */
            AppInstanceUserMembershipSummary?: AppInstanceUserMembershipSummary;
    }
    export namespace ChannelMembershipForAppInstanceUserSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelMembershipForAppInstanceUserSummary) => any;
    }
    /**
        * <p>The channel membership preferences for push notification.</p>
        */
    export interface PushNotificationPreferences {
            /**
                * <p>Enum value that indicates which push notifications to send to the requested member of a channel.
                *          <code>ALL</code> sends all push notifications, <code>NONE</code> sends no push notifications, <code>FILTERED</code> sends only filtered push notifications.
                *       </p>
                */
            AllowNotifications: AllowNotifications | string | undefined;
            /**
                * <p>The simple JSON object used to send a subset of a push notification to the requested member.</p>
                */
            FilterRule?: string;
    }
    export namespace PushNotificationPreferences {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PushNotificationPreferences) => any;
    }
    /**
        * <p>The channel membership preferences for an <code>AppInstanceUser</code>.</p>
        */
    export interface ChannelMembershipPreferences {
            /**
                * <p>The push notification configuration of a message.</p>
                */
            PushNotifications?: PushNotificationPreferences;
    }
    export namespace ChannelMembershipPreferences {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelMembershipPreferences) => any;
    }
    /**
        * <p>Summary of the details of a <code>ChannelMembership</code>.</p>
        */
    export interface ChannelMembershipSummary {
            /**
                * <p>A member's summary data.</p>
                */
            Member?: Identity;
    }
    export namespace ChannelMembershipSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelMembershipSummary) => any;
    }
    export enum ChannelMessagePersistenceType {
            NON_PERSISTENT = "NON_PERSISTENT",
            PERSISTENT = "PERSISTENT"
    }
    export enum ChannelMessageStatus {
            DENIED = "DENIED",
            FAILED = "FAILED",
            PENDING = "PENDING",
            SENT = "SENT"
    }
    /**
        * <p>Stores information about a message status.</p>
        */
    export interface ChannelMessageStatusStructure {
            /**
                * <p>The message status value.</p>
                */
            Value?: ChannelMessageStatus | string;
            /**
                * <p>Contains more details about the messasge status.</p>
                */
            Detail?: string;
    }
    export namespace ChannelMessageStatusStructure {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelMessageStatusStructure) => any;
    }
    export enum ChannelMessageType {
            CONTROL = "CONTROL",
            STANDARD = "STANDARD"
    }
    /**
        * <p>The details of a message in a channel.</p>
        */
    export interface ChannelMessage {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The ID of a message.</p>
                */
            MessageId?: string;
            /**
                * <p>The message content.</p>
                */
            Content?: string;
            /**
                * <p>The message metadata.</p>
                */
            Metadata?: string;
            /**
                * <p>The message type.</p>
                */
            Type?: ChannelMessageType | string;
            /**
                * <p>The time at which the message was created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The time at which a message was edited.</p>
                */
            LastEditedTimestamp?: Date;
            /**
                * <p>The time at which a message was updated.</p>
                */
            LastUpdatedTimestamp?: Date;
            /**
                * <p>The message sender.</p>
                */
            Sender?: Identity;
            /**
                * <p>Hides the content of a message.</p>
                */
            Redacted?: boolean;
            /**
                * <p>The persistence setting for a channel message.</p>
                */
            Persistence?: ChannelMessagePersistenceType | string;
            /**
                * <p>The status of the channel message.</p>
                */
            Status?: ChannelMessageStatusStructure;
            /**
                * <p>The attributes for the message, used for message filtering along with a <code>FilterRule</code> defined in the <code>PushNotificationPreferences</code>.</p>
                */
            MessageAttributes?: Record<string, MessageAttributeValue>;
    }
    export namespace ChannelMessage {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelMessage) => any;
    }
    /**
        * <p>Summary of the messages in a <code>Channel</code>.</p>
        */
    export interface ChannelMessageSummary {
            /**
                * <p>The ID of the message.</p>
                */
            MessageId?: string;
            /**
                * <p>The content of the message.</p>
                */
            Content?: string;
            /**
                * <p>The metadata of the message.</p>
                */
            Metadata?: string;
            /**
                * <p>The type of message.</p>
                */
            Type?: ChannelMessageType | string;
            /**
                * <p>The time at which the message summary was created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The time at which a message was last updated.</p>
                */
            LastUpdatedTimestamp?: Date;
            /**
                * <p>The time at which a message was last edited.</p>
                */
            LastEditedTimestamp?: Date;
            /**
                * <p>The message sender.</p>
                */
            Sender?: Identity;
            /**
                * <p>Indicates whether a message was redacted.</p>
                */
            Redacted?: boolean;
            /**
                * <p>The message status. The status value is <code>SENT</code> for messages sent to a channel without a channel flow. For channels associated with channel flow, the value determines the
                *          processing stage.</p>
                */
            Status?: ChannelMessageStatusStructure;
            /**
                * <p>The message attribues listed in a the summary of a channel message.</p>
                */
            MessageAttributes?: Record<string, MessageAttributeValue>;
    }
    export namespace ChannelMessageSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelMessageSummary) => any;
    }
    /**
        * <p>Summary of the details of a moderated channel.</p>
        */
    export interface ChannelModeratedByAppInstanceUserSummary {
            /**
                * <p>Summary of the details of a <code>Channel</code>.</p>
                */
            ChannelSummary?: ChannelSummary;
    }
    export namespace ChannelModeratedByAppInstanceUserSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelModeratedByAppInstanceUserSummary) => any;
    }
    /**
        * <p>The details of a channel moderator.</p>
        */
    export interface ChannelModerator {
            /**
                * <p>The moderator's data.</p>
                */
            Moderator?: Identity;
            /**
                * <p>The ARN of the moderator's channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The time at which the moderator was created.</p>
                */
            CreatedTimestamp?: Date;
            /**
                * <p>The <code>AppInstanceUser</code> who created the moderator.</p>
                */
            CreatedBy?: Identity;
    }
    export namespace ChannelModerator {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelModerator) => any;
    }
    /**
        * <p>Summary of the details of a <code>ChannelModerator</code>.</p>
        */
    export interface ChannelModeratorSummary {
            /**
                * <p>The data for a moderator.</p>
                */
            Moderator?: Identity;
    }
    export namespace ChannelModeratorSummary {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ChannelModeratorSummary) => any;
    }
    /**
        * <p>A tag object containing a key-value pair.</p>
        */
    export interface Tag {
            /**
                * <p>The key in a tag.</p>
                */
            Key: string | undefined;
            /**
                * <p>The value in a tag.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateChannelRequest {
            /**
                * <p>The ARN of the channel request.</p>
                */
            AppInstanceArn: string | undefined;
            /**
                * <p>The name of the channel.</p>
                */
            Name: string | undefined;
            /**
                * <p>The channel mode: <code>UNRESTRICTED</code> or <code>RESTRICTED</code>. Administrators,
                *          moderators, and channel members can add themselves and other members to unrestricted
                *          channels. Only administrators and moderators can add members to restricted channels.</p>
                */
            Mode?: ChannelMode | string;
            /**
                * <p>The channel's privacy level: <code>PUBLIC</code> or <code>PRIVATE</code>. Private
                *          channels aren't discoverable by users outside the channel. Public channels are discoverable
                *          by anyone in the <code>AppInstance</code>.</p>
                */
            Privacy?: ChannelPrivacy | string;
            /**
                * <p>The metadata of the creation request. Limited to 1KB and UTF-8.</p>
                */
            Metadata?: string;
            /**
                * <p>The client token for the request. An <code>Idempotency</code> token.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>The tags for the creation request.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
            /**
                * <p>The ID of the channel in the request.</p>
                */
            ChannelId?: string;
            /**
                * <p>The ARNs of the channel members in the request.</p>
                */
            MemberArns?: string[];
            /**
                * <p>The ARNs of the channel moderators in the request.</p>
                */
            ModeratorArns?: string[];
    }
    export namespace CreateChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelRequest) => any;
    }
    export interface CreateChannelResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
    }
    export namespace CreateChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelResponse) => any;
    }
    /**
        * <p>The request exceeds the resource limit.</p>
        */
    export class ResourceLimitExceededException extends __BaseException {
            readonly name: "ResourceLimitExceededException";
            readonly $fault: "client";
            Code?: ErrorCode | string;
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceLimitExceededException, __BaseException>);
    }
    export interface CreateChannelBanRequest {
            /**
                * <p>The ARN of the ban request.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the member being banned.</p>
                */
            MemberArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace CreateChannelBanRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelBanRequest) => any;
    }
    export interface CreateChannelBanResponse {
            /**
                * <p>The ARN of the response to the ban request.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The <code>ChannelArn</code> and <code>BannedIdentity</code> of the member in the ban
                *          response.</p>
                */
            Member?: Identity;
    }
    export namespace CreateChannelBanResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelBanResponse) => any;
    }
    export interface CreateChannelFlowRequest {
            /**
                * <p>The ARN of the channel flow request.</p>
                */
            AppInstanceArn: string | undefined;
            /**
                * <p>Information about the processor Lambda functions.</p>
                */
            Processors: Processor[] | undefined;
            /**
                * <p>The name of the channel flow.</p>
                */
            Name: string | undefined;
            /**
                * <p>The tags for the creation request.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The client token for the request. An Idempotency token.</p>
                */
            ClientRequestToken: string | undefined;
    }
    export namespace CreateChannelFlowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelFlowRequest) => any;
    }
    export interface CreateChannelFlowResponse {
            /**
                * <p>The ARN of the channel flow.</p>
                */
            ChannelFlowArn?: string;
    }
    export namespace CreateChannelFlowResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelFlowResponse) => any;
    }
    export interface CreateChannelMembershipRequest {
            /**
                * <p>The ARN of the channel to which you're adding users.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the member you want to add to the channel.</p>
                */
            MemberArn: string | undefined;
            /**
                * <p>The membership type of a user, <code>DEFAULT</code> or <code>HIDDEN</code>. Default
                *          members are always returned as part of <code>ListChannelMemberships</code>. Hidden members
                *          are only returned if the type filter in <code>ListChannelMemberships</code> equals
                *             <code>HIDDEN</code>. Otherwise hidden members are not returned. This is only supported
                *          by moderators.</p>
                */
            Type: ChannelMembershipType | string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace CreateChannelMembershipRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelMembershipRequest) => any;
    }
    export interface CreateChannelMembershipResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The ARN and metadata of the member being added.</p>
                */
            Member?: Identity;
    }
    export namespace CreateChannelMembershipResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelMembershipResponse) => any;
    }
    export interface CreateChannelModeratorRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the moderator.</p>
                */
            ChannelModeratorArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace CreateChannelModeratorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelModeratorRequest) => any;
    }
    export interface CreateChannelModeratorResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The ARNs of the channel and the moderator.</p>
                */
            ChannelModerator?: Identity;
    }
    export namespace CreateChannelModeratorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateChannelModeratorResponse) => any;
    }
    export interface DeleteChannelRequest {
            /**
                * <p>The ARN of the channel being deleted.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace DeleteChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteChannelRequest) => any;
    }
    export interface DeleteChannelBanRequest {
            /**
                * <p>The ARN of the channel from which the <code>AppInstanceUser</code> was banned.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The ARN of the <code>AppInstanceUser</code> that you want to reinstate.</p>
                */
            MemberArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace DeleteChannelBanRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteChannelBanRequest) => any;
    }
    export interface DeleteChannelFlowRequest {
            /**
                * <p>The ARN of the channel flow.</p>
                */
            ChannelFlowArn: string | undefined;
    }
    export namespace DeleteChannelFlowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteChannelFlowRequest) => any;
    }
    export interface DeleteChannelMembershipRequest {
            /**
                * <p>The ARN of the channel from which you want to remove the user.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the member that you're removing from the channel.</p>
                */
            MemberArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace DeleteChannelMembershipRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteChannelMembershipRequest) => any;
    }
    export interface DeleteChannelMessageRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The ID of the message being deleted.</p>
                */
            MessageId: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace DeleteChannelMessageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteChannelMessageRequest) => any;
    }
    export interface DeleteChannelModeratorRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the moderator being deleted.</p>
                */
            ChannelModeratorArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace DeleteChannelModeratorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteChannelModeratorRequest) => any;
    }
    export interface DescribeChannelRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace DescribeChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelRequest) => any;
    }
    export interface DescribeChannelResponse {
            /**
                * <p>The channel details.</p>
                */
            Channel?: Channel;
    }
    export namespace DescribeChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelResponse) => any;
    }
    export interface DescribeChannelBanRequest {
            /**
                * <p>The ARN of the channel from which the user is banned.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the member being banned.</p>
                */
            MemberArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace DescribeChannelBanRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelBanRequest) => any;
    }
    export interface DescribeChannelBanResponse {
            /**
                * <p>The details of the ban.</p>
                */
            ChannelBan?: ChannelBan;
    }
    export namespace DescribeChannelBanResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelBanResponse) => any;
    }
    export interface DescribeChannelFlowRequest {
            /**
                * <p>The ARN of the channel flow.</p>
                */
            ChannelFlowArn: string | undefined;
    }
    export namespace DescribeChannelFlowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelFlowRequest) => any;
    }
    export interface DescribeChannelFlowResponse {
            /**
                * <p>The channel flow details.</p>
                */
            ChannelFlow?: ChannelFlow;
    }
    export namespace DescribeChannelFlowResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelFlowResponse) => any;
    }
    export interface DescribeChannelMembershipRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the member.</p>
                */
            MemberArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace DescribeChannelMembershipRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelMembershipRequest) => any;
    }
    export interface DescribeChannelMembershipResponse {
            /**
                * <p>The details of the membership.</p>
                */
            ChannelMembership?: ChannelMembership;
    }
    export namespace DescribeChannelMembershipResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelMembershipResponse) => any;
    }
    export interface DescribeChannelMembershipForAppInstanceUserRequest {
            /**
                * <p>The ARN of the channel to which the user belongs.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The ARN of the user in a channel.</p>
                */
            AppInstanceUserArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace DescribeChannelMembershipForAppInstanceUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelMembershipForAppInstanceUserRequest) => any;
    }
    export interface DescribeChannelMembershipForAppInstanceUserResponse {
            /**
                * <p>The channel to which a user belongs.</p>
                */
            ChannelMembership?: ChannelMembershipForAppInstanceUserSummary;
    }
    export namespace DescribeChannelMembershipForAppInstanceUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelMembershipForAppInstanceUserResponse) => any;
    }
    export interface DescribeChannelModeratedByAppInstanceUserRequest {
            /**
                * <p>The ARN of the moderated channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The ARN of the <code>AppInstanceUser</code> in the moderated channel.</p>
                */
            AppInstanceUserArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace DescribeChannelModeratedByAppInstanceUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelModeratedByAppInstanceUserRequest) => any;
    }
    export interface DescribeChannelModeratedByAppInstanceUserResponse {
            /**
                * <p>The moderated channel.</p>
                */
            Channel?: ChannelModeratedByAppInstanceUserSummary;
    }
    export namespace DescribeChannelModeratedByAppInstanceUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelModeratedByAppInstanceUserResponse) => any;
    }
    export interface DescribeChannelModeratorRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the channel moderator.</p>
                */
            ChannelModeratorArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace DescribeChannelModeratorRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelModeratorRequest) => any;
    }
    export interface DescribeChannelModeratorResponse {
            /**
                * <p>The details of the channel moderator.</p>
                */
            ChannelModerator?: ChannelModerator;
    }
    export namespace DescribeChannelModeratorResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeChannelModeratorResponse) => any;
    }
    export interface DisassociateChannelFlowRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The ARN of the channel flow.</p>
                */
            ChannelFlowArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user making the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace DisassociateChannelFlowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateChannelFlowRequest) => any;
    }
    export interface GetChannelMembershipPreferencesRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the member retrieving the preferences.</p>
                */
            MemberArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserARN</code> of the user making the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace GetChannelMembershipPreferencesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetChannelMembershipPreferencesRequest) => any;
    }
    export interface GetChannelMembershipPreferencesResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The details of a user.</p>
                */
            Member?: Identity;
            /**
                * <p>The channel membership preferences for an <code>AppInstanceUser</code> .</p>
                */
            Preferences?: ChannelMembershipPreferences;
    }
    export namespace GetChannelMembershipPreferencesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetChannelMembershipPreferencesResponse) => any;
    }
    export interface GetChannelMessageRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The ID of the message.</p>
                */
            MessageId: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace GetChannelMessageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetChannelMessageRequest) => any;
    }
    export interface GetChannelMessageResponse {
            /**
                * <p>The details of and content in the message.</p>
                */
            ChannelMessage?: ChannelMessage;
    }
    export namespace GetChannelMessageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetChannelMessageResponse) => any;
    }
    export interface GetChannelMessageStatusRequest {
            /**
                * <p>The ARN of the channel</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The ID of the message.</p>
                */
            MessageId: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user making the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace GetChannelMessageStatusRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetChannelMessageStatusRequest) => any;
    }
    export interface GetChannelMessageStatusResponse {
            /**
                * <p>The message status and details.</p>
                */
            Status?: ChannelMessageStatusStructure;
    }
    export namespace GetChannelMessageStatusResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetChannelMessageStatusResponse) => any;
    }
    export interface GetMessagingSessionEndpointRequest {
    }
    export namespace GetMessagingSessionEndpointRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMessagingSessionEndpointRequest) => any;
    }
    /**
        * <p>The websocket endpoint used to connect to Amazon Chime SDK messaging.</p>
        */
    export interface MessagingSessionEndpoint {
            /**
                * <p>The endpoint to which you establish a websocket connection.</p>
                */
            Url?: string;
    }
    export namespace MessagingSessionEndpoint {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MessagingSessionEndpoint) => any;
    }
    export interface GetMessagingSessionEndpointResponse {
            /**
                * <p>The endpoint returned in the response.</p>
                */
            Endpoint?: MessagingSessionEndpoint;
    }
    export namespace GetMessagingSessionEndpointResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetMessagingSessionEndpointResponse) => any;
    }
    export interface ListChannelBansRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The maximum number of bans that you want returned.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token passed by previous API calls until all requested bans are returned.</p>
                */
            NextToken?: string;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace ListChannelBansRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelBansRequest) => any;
    }
    export interface ListChannelBansResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The token passed by previous API calls until all requested bans are returned.</p>
                */
            NextToken?: string;
            /**
                * <p>The information for each requested ban.</p>
                */
            ChannelBans?: ChannelBanSummary[];
    }
    export namespace ListChannelBansResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelBansResponse) => any;
    }
    export interface ListChannelFlowsRequest {
            /**
                * <p>The ARN of the app instance.</p>
                */
            AppInstanceArn: string | undefined;
            /**
                * <p>The maximum number of channel flows that you want to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token passed by previous API calls until all requested channel flows are returned.</p>
                */
            NextToken?: string;
    }
    export namespace ListChannelFlowsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelFlowsRequest) => any;
    }
    export interface ListChannelFlowsResponse {
            /**
                * <p>The information about each channel flow.</p>
                */
            ChannelFlows?: ChannelFlowSummary[];
            /**
                * <p>The token passed by previous API calls until all requested channels are returned.</p>
                */
            NextToken?: string;
    }
    export namespace ListChannelFlowsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelFlowsResponse) => any;
    }
    export interface ListChannelMembershipsRequest {
            /**
                * <p>The maximum number of channel memberships that you want returned.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The membership type of a user, <code>DEFAULT</code> or <code>HIDDEN</code>. Default
                *          members are returned as part of <code>ListChannelMemberships</code> if no type is specified. Hidden members
                *          are only returned if the type filter in <code>ListChannelMemberships</code> equals
                *             <code>HIDDEN</code>.</p>
                */
            Type?: ChannelMembershipType | string;
            /**
                * <p>The maximum number of channel memberships that you want returned.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token passed by previous API calls until all requested channel memberships are
                *          returned.</p>
                */
            NextToken?: string;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace ListChannelMembershipsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelMembershipsRequest) => any;
    }
    export interface ListChannelMembershipsResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The information for the requested channel memberships.</p>
                */
            ChannelMemberships?: ChannelMembershipSummary[];
            /**
                * <p>The token passed by previous API calls until all requested channel memberships are
                *          returned.</p>
                */
            NextToken?: string;
    }
    export namespace ListChannelMembershipsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelMembershipsResponse) => any;
    }
    export interface ListChannelMembershipsForAppInstanceUserRequest {
            /**
                * <p>The ARN of the <code>AppInstanceUser</code>s</p>
                */
            AppInstanceUserArn?: string;
            /**
                * <p>The maximum number of users that you want returned.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token returned from previous API requests until the number of channel memberships is
                *          reached.</p>
                */
            NextToken?: string;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace ListChannelMembershipsForAppInstanceUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelMembershipsForAppInstanceUserRequest) => any;
    }
    export interface ListChannelMembershipsForAppInstanceUserResponse {
            /**
                * <p>The information for the requested channel memberships.</p>
                */
            ChannelMemberships?: ChannelMembershipForAppInstanceUserSummary[];
            /**
                * <p>The token passed by previous API calls until all requested users are returned.</p>
                */
            NextToken?: string;
    }
    export namespace ListChannelMembershipsForAppInstanceUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelMembershipsForAppInstanceUserResponse) => any;
    }
    export enum SortOrder {
            ASCENDING = "ASCENDING",
            DESCENDING = "DESCENDING"
    }
    export interface ListChannelMessagesRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The order in which you want messages sorted. Default is Descending, based on time
                *          created.</p>
                */
            SortOrder?: SortOrder | string;
            /**
                * <p>The initial or starting time stamp for your requested messages.</p>
                */
            NotBefore?: Date;
            /**
                * <p>The final or ending time stamp for your requested messages.</p>
                */
            NotAfter?: Date;
            /**
                * <p>The maximum number of messages that you want returned.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token passed by previous API calls until all requested messages are returned.</p>
                */
            NextToken?: string;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace ListChannelMessagesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelMessagesRequest) => any;
    }
    export interface ListChannelMessagesResponse {
            /**
                * <p>The ARN of the channel containing the requested messages.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The token passed by previous API calls until all requested messages are returned.</p>
                */
            NextToken?: string;
            /**
                * <p>The information about, and content of, each requested message.</p>
                */
            ChannelMessages?: ChannelMessageSummary[];
    }
    export namespace ListChannelMessagesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelMessagesResponse) => any;
    }
    export interface ListChannelModeratorsRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The maximum number of moderators that you want returned.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token passed by previous API calls until all requested moderators are
                *          returned.</p>
                */
            NextToken?: string;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace ListChannelModeratorsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelModeratorsRequest) => any;
    }
    export interface ListChannelModeratorsResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The token passed by previous API calls until all requested moderators are
                *          returned.</p>
                */
            NextToken?: string;
            /**
                * <p>The information about and names of each moderator.</p>
                */
            ChannelModerators?: ChannelModeratorSummary[];
    }
    export namespace ListChannelModeratorsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelModeratorsResponse) => any;
    }
    export interface ListChannelsRequest {
            /**
                * <p>The ARN of the <code>AppInstance</code>.</p>
                */
            AppInstanceArn: string | undefined;
            /**
                * <p>The privacy setting. <code>PUBLIC</code> retrieves all the public channels.
                *             <code>PRIVATE</code> retrieves private channels. Only an <code>AppInstanceAdmin</code>
                *          can retrieve private channels. </p>
                */
            Privacy?: ChannelPrivacy | string;
            /**
                * <p>The maximum number of channels that you want to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token passed by previous API calls until all requested channels are returned.</p>
                */
            NextToken?: string;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace ListChannelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelsRequest) => any;
    }
    export interface ListChannelsResponse {
            /**
                * <p>The information about each channel.</p>
                */
            Channels?: ChannelSummary[];
            /**
                * <p>The token returned from previous API requests until the number of channels is
                *          reached.</p>
                */
            NextToken?: string;
    }
    export namespace ListChannelsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelsResponse) => any;
    }
    export interface ListChannelsAssociatedWithChannelFlowRequest {
            /**
                * <p>The ARN of the channel flow.</p>
                */
            ChannelFlowArn: string | undefined;
            /**
                * <p>The maximum number of channels that you want to return.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token passed by previous API calls until all requested channels are returned.</p>
                */
            NextToken?: string;
    }
    export namespace ListChannelsAssociatedWithChannelFlowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelsAssociatedWithChannelFlowRequest) => any;
    }
    export interface ListChannelsAssociatedWithChannelFlowResponse {
            /**
                * <p>The information about each channel.</p>
                */
            Channels?: ChannelAssociatedWithFlowSummary[];
            /**
                * <p>The token passed by previous API calls until all requested channels are returned.</p>
                */
            NextToken?: string;
    }
    export namespace ListChannelsAssociatedWithChannelFlowResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelsAssociatedWithChannelFlowResponse) => any;
    }
    export interface ListChannelsModeratedByAppInstanceUserRequest {
            /**
                * <p>The ARN of the user in the moderated channel.</p>
                */
            AppInstanceUserArn?: string;
            /**
                * <p>The maximum number of channels in the request.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token returned from previous API requests until the number of channels moderated by
                *          the user is reached.</p>
                */
            NextToken?: string;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace ListChannelsModeratedByAppInstanceUserRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelsModeratedByAppInstanceUserRequest) => any;
    }
    export interface ListChannelsModeratedByAppInstanceUserResponse {
            /**
                * <p>The moderated channels in the request.</p>
                */
            Channels?: ChannelModeratedByAppInstanceUserSummary[];
            /**
                * <p>The token returned from previous API requests until the number of channels moderated by
                *          the user is reached.</p>
                */
            NextToken?: string;
    }
    export namespace ListChannelsModeratedByAppInstanceUserResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListChannelsModeratedByAppInstanceUserResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>The ARN of the resource.</p>
                */
            ResourceARN: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>The tag key-value pairs.</p>
                */
            Tags?: Tag[];
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    export interface PutChannelMembershipPreferencesRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the member setting the preferences.</p>
                */
            MemberArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserARN</code>  of the user making the API call.</p>
                */
            ChimeBearer: string | undefined;
            /**
                * <p>The channel membership preferences of an <code>AppInstanceUser</code> .</p>
                */
            Preferences: ChannelMembershipPreferences | undefined;
    }
    export namespace PutChannelMembershipPreferencesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutChannelMembershipPreferencesRequest) => any;
    }
    export interface PutChannelMembershipPreferencesResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The details of a user.</p>
                */
            Member?: Identity;
            /**
                * <p>The ARN and metadata of the member being added.</p>
                */
            Preferences?: ChannelMembershipPreferences;
    }
    export namespace PutChannelMembershipPreferencesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutChannelMembershipPreferencesResponse) => any;
    }
    export interface RedactChannelMessageRequest {
            /**
                * <p>The ARN of the channel containing the messages that you want to redact.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The ID of the message being redacted.</p>
                */
            MessageId: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace RedactChannelMessageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RedactChannelMessageRequest) => any;
    }
    export interface RedactChannelMessageResponse {
            /**
                * <p>The ARN of the channel containing the messages that you want to redact.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The ID of the message being redacted.</p>
                */
            MessageId?: string;
    }
    export namespace RedactChannelMessageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RedactChannelMessageResponse) => any;
    }
    export enum SearchFieldKey {
            MEMBERS = "MEMBERS"
    }
    export enum SearchFieldOperator {
            EQUALS = "EQUALS",
            INCLUDES = "INCLUDES"
    }
    /**
        * <p>A <code>Field</code> of the channel that you want to search.</p>
        */
    export interface SearchField {
            /**
                * <p>An <code>enum</code> value that indicates the key to search the channel on. <code>MEMBERS</code> allows you to search channels based on memberships. You can use it with the <code>EQUALS</code>
                *          operator to get channels whose memberships are equal to the specified values, and with the <code>INCLUDES</code>  operator to get channels whose memberships include the specified values.</p>
                */
            Key: SearchFieldKey | string | undefined;
            /**
                * <p>The values that you want to search for, a list of strings. The values must be <code>AppInstanceUserArns</code> specified as a list of strings.</p>
                *          <note>
                *             <p>This operation isn't supported for <code>AppInstanceUsers</code> with large number of memberships.</p>
                *          </note>
                */
            Values: string[] | undefined;
            /**
                * <p>The operator used to compare field values, currently <code>EQUALS</code> or <code>INCLUDES</code>.  Use the <code>EQUALS</code> operator to find channels whose memberships equal the specified values.
                *          Use the <code>INCLUDES</code> operator to find channels whose memberships include the specified values.</p>
                */
            Operator: SearchFieldOperator | string | undefined;
    }
    export namespace SearchField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchField) => any;
    }
    export interface SearchChannelsRequest {
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user making the API call.</p>
                */
            ChimeBearer?: string;
            /**
                * <p>A list of the <code>Field</code> objects in the channel being searched.</p>
                */
            Fields: SearchField[] | undefined;
            /**
                * <p>The maximum number of channels that you want returned.</p>
                */
            MaxResults?: number;
            /**
                * <p>The token returned from previous API requests until the number of channels is reached.</p>
                */
            NextToken?: string;
    }
    export namespace SearchChannelsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchChannelsRequest) => any;
    }
    export interface SearchChannelsResponse {
            /**
                * <p>A list of the channels in the request.</p>
                */
            Channels?: ChannelSummary[];
            /**
                * <p>The token returned from previous API responses until the number of channels is reached.</p>
                */
            NextToken?: string;
    }
    export namespace SearchChannelsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SearchChannelsResponse) => any;
    }
    export interface SendChannelMessageRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The content of the message.</p>
                */
            Content: string | undefined;
            /**
                * <p>The type of message, <code>STANDARD</code> or <code>CONTROL</code>.</p>
                */
            Type: ChannelMessageType | string | undefined;
            /**
                * <p>Boolean that controls whether the message is persisted on the back end. Required.</p>
                */
            Persistence: ChannelMessagePersistenceType | string | undefined;
            /**
                * <p>The optional metadata for each message.</p>
                */
            Metadata?: string;
            /**
                * <p>The <code>Idempotency</code> token for each client request.</p>
                */
            ClientRequestToken?: string;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
            /**
                * <p>The push notification configuration of the message.</p>
                */
            PushNotification?: PushNotificationConfiguration;
            /**
                * <p>The attributes for the message, used for message filtering along with a <code>FilterRule</code> defined in the <code>PushNotificationPreferences</code>.</p>
                */
            MessageAttributes?: Record<string, MessageAttributeValue>;
    }
    export namespace SendChannelMessageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendChannelMessageRequest) => any;
    }
    export interface SendChannelMessageResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The ID string assigned to each message.</p>
                */
            MessageId?: string;
            /**
                * <p>The status of the channel message.</p>
                */
            Status?: ChannelMessageStatusStructure;
    }
    export namespace SendChannelMessageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SendChannelMessageResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The resource ARN.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>The tag key-value pairs.</p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The resource ARN.</p>
                */
            ResourceARN: string | undefined;
            /**
                * <p>The tag keys.</p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UpdateChannelRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The name of the channel.</p>
                */
            Name?: string;
            /**
                * <p>The mode of the update request.</p>
                */
            Mode?: ChannelMode | string;
            /**
                * <p>The metadata for the update request.</p>
                */
            Metadata?: string;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace UpdateChannelRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateChannelRequest) => any;
    }
    export interface UpdateChannelResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
    }
    export namespace UpdateChannelResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateChannelResponse) => any;
    }
    export interface UpdateChannelFlowRequest {
            /**
                * <p>The ARN of the channel flow.</p>
                */
            ChannelFlowArn: string | undefined;
            /**
                * <p>Information about the processor Lambda functions </p>
                */
            Processors: Processor[] | undefined;
            /**
                * <p>The name of the channel flow.</p>
                */
            Name: string | undefined;
    }
    export namespace UpdateChannelFlowRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateChannelFlowRequest) => any;
    }
    export interface UpdateChannelFlowResponse {
            /**
                * <p>The ARN of the channel flow.</p>
                */
            ChannelFlowArn?: string;
    }
    export namespace UpdateChannelFlowResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateChannelFlowResponse) => any;
    }
    export interface UpdateChannelMessageRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The ID string of the message being updated.</p>
                */
            MessageId: string | undefined;
            /**
                * <p>The content of the message being updated.</p>
                */
            Content?: string;
            /**
                * <p>The metadata of the message being updated.</p>
                */
            Metadata?: string;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace UpdateChannelMessageRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateChannelMessageRequest) => any;
    }
    export interface UpdateChannelMessageResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
            /**
                * <p>The ID string of the message being updated.</p>
                */
            MessageId?: string;
            /**
                * <p>The status of the message update.</p>
                */
            Status?: ChannelMessageStatusStructure;
    }
    export namespace UpdateChannelMessageResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateChannelMessageResponse) => any;
    }
    export interface UpdateChannelReadMarkerRequest {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn: string | undefined;
            /**
                * <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
                */
            ChimeBearer: string | undefined;
    }
    export namespace UpdateChannelReadMarkerRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateChannelReadMarkerRequest) => any;
    }
    export interface UpdateChannelReadMarkerResponse {
            /**
                * <p>The ARN of the channel.</p>
                */
            ChannelArn?: string;
    }
    export namespace UpdateChannelReadMarkerResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateChannelReadMarkerResponse) => any;
    }
}

declare module '@aws-sdk/client-chime-sdk-messaging/node_modules/@aws-sdk/client-chime-sdk-messaging/dist-types/models/ChimeSDKMessagingServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from ChimeSDKMessaging service.
        */
    export class ChimeSDKMessagingServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

