// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http
//   stream

declare module '@aws-sdk/client-polly' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { DeleteLexiconCommandInput, DeleteLexiconCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/DeleteLexiconCommand";
    import { DescribeVoicesCommandInput, DescribeVoicesCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/DescribeVoicesCommand";
    import { GetLexiconCommandInput, GetLexiconCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/GetLexiconCommand";
    import { GetSpeechSynthesisTaskCommandInput, GetSpeechSynthesisTaskCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/GetSpeechSynthesisTaskCommand";
    import { ListLexiconsCommandInput, ListLexiconsCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/ListLexiconsCommand";
    import { ListSpeechSynthesisTasksCommandInput, ListSpeechSynthesisTasksCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/ListSpeechSynthesisTasksCommand";
    import { PutLexiconCommandInput, PutLexiconCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/PutLexiconCommand";
    import { StartSpeechSynthesisTaskCommandInput, StartSpeechSynthesisTaskCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/StartSpeechSynthesisTaskCommand";
    import { SynthesizeSpeechCommandInput, SynthesizeSpeechCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/SynthesizeSpeechCommand";
    import { PollyClient } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/PollyClient";
    /**
        * <p>Amazon Polly is a web service that makes it easy to synthesize speech from
        *       text.</p>
        *          <p>The Amazon Polly service provides API operations for synthesizing
        *       high-quality speech from plain text and Speech Synthesis Markup Language
        *       (SSML), along with managing pronunciations lexicons that enable you to get
        *       the best results for your application domain.</p>
        */
    export class Polly extends PollyClient {
            /**
                * <p>Deletes the specified pronunciation lexicon stored in an Amazon Web Services Region. A lexicon which has been deleted is not available for
                *       speech synthesis, nor is it possible to retrieve it using either the
                *         <code>GetLexicon</code> or <code>ListLexicon</code> APIs.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons</a>.</p>
                */
            deleteLexicon(args: DeleteLexiconCommandInput, options?: __HttpHandlerOptions): Promise<DeleteLexiconCommandOutput>;
            deleteLexicon(args: DeleteLexiconCommandInput, cb: (err: any, data?: DeleteLexiconCommandOutput) => void): void;
            deleteLexicon(args: DeleteLexiconCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteLexiconCommandOutput) => void): void;
            /**
                * <p>Returns the list of voices that are available for use when
                *       requesting speech synthesis. Each voice speaks a specified language, is
                *       either male or female, and is identified by an ID, which is the ASCII
                *       version of the voice name. </p>
                *
                *          <p>When synthesizing speech ( <code>SynthesizeSpeech</code> ), you
                *       provide the voice ID for the voice you want from the list of voices
                *       returned by <code>DescribeVoices</code>.</p>
                *
                *          <p>For example, you want your news reader application to read news in
                *       a specific language, but giving a user the option to choose the voice.
                *       Using the <code>DescribeVoices</code> operation you can provide the user
                *       with a list of available voices to select from.</p>
                *
                *          <p> You can optionally specify a language code to filter the available
                *       voices. For example, if you specify <code>en-US</code>, the operation
                *       returns a list of all available US English voices. </p>
                *          <p>This operation requires permissions to perform the
                *         <code>polly:DescribeVoices</code> action.</p>
                */
            describeVoices(args: DescribeVoicesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeVoicesCommandOutput>;
            describeVoices(args: DescribeVoicesCommandInput, cb: (err: any, data?: DescribeVoicesCommandOutput) => void): void;
            describeVoices(args: DescribeVoicesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeVoicesCommandOutput) => void): void;
            /**
                * <p>Returns the content of the specified pronunciation lexicon stored
                *       in an Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons</a>.</p>
                */
            getLexicon(args: GetLexiconCommandInput, options?: __HttpHandlerOptions): Promise<GetLexiconCommandOutput>;
            getLexicon(args: GetLexiconCommandInput, cb: (err: any, data?: GetLexiconCommandOutput) => void): void;
            getLexicon(args: GetLexiconCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetLexiconCommandOutput) => void): void;
            /**
                * <p>Retrieves a specific SpeechSynthesisTask object based on its TaskID.
                *       This object contains information about the given speech synthesis task,
                *       including the status of the task, and a link to the S3 bucket containing
                *       the output of the task.</p>
                */
            getSpeechSynthesisTask(args: GetSpeechSynthesisTaskCommandInput, options?: __HttpHandlerOptions): Promise<GetSpeechSynthesisTaskCommandOutput>;
            getSpeechSynthesisTask(args: GetSpeechSynthesisTaskCommandInput, cb: (err: any, data?: GetSpeechSynthesisTaskCommandOutput) => void): void;
            getSpeechSynthesisTask(args: GetSpeechSynthesisTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetSpeechSynthesisTaskCommandOutput) => void): void;
            /**
                * <p>Returns a list of pronunciation lexicons stored in an Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons</a>.</p>
                */
            listLexicons(args: ListLexiconsCommandInput, options?: __HttpHandlerOptions): Promise<ListLexiconsCommandOutput>;
            listLexicons(args: ListLexiconsCommandInput, cb: (err: any, data?: ListLexiconsCommandOutput) => void): void;
            listLexicons(args: ListLexiconsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListLexiconsCommandOutput) => void): void;
            /**
                * <p>Returns a list of SpeechSynthesisTask objects ordered by their
                *       creation date. This operation can filter the tasks by their status, for
                *       example, allowing users to list only tasks that are completed.</p>
                */
            listSpeechSynthesisTasks(args: ListSpeechSynthesisTasksCommandInput, options?: __HttpHandlerOptions): Promise<ListSpeechSynthesisTasksCommandOutput>;
            listSpeechSynthesisTasks(args: ListSpeechSynthesisTasksCommandInput, cb: (err: any, data?: ListSpeechSynthesisTasksCommandOutput) => void): void;
            listSpeechSynthesisTasks(args: ListSpeechSynthesisTasksCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListSpeechSynthesisTasksCommandOutput) => void): void;
            /**
                * <p>Stores a pronunciation lexicon in an Amazon Web Services Region. If
                *       a lexicon with the same name already exists in the region, it is
                *       overwritten by the new lexicon. Lexicon operations have eventual
                *       consistency, therefore, it might take some time before the lexicon is
                *       available to the SynthesizeSpeech operation.</p>
                *          <p>For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons</a>.</p>
                */
            putLexicon(args: PutLexiconCommandInput, options?: __HttpHandlerOptions): Promise<PutLexiconCommandOutput>;
            putLexicon(args: PutLexiconCommandInput, cb: (err: any, data?: PutLexiconCommandOutput) => void): void;
            putLexicon(args: PutLexiconCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutLexiconCommandOutput) => void): void;
            /**
                * <p>Allows the creation of an asynchronous synthesis task, by starting a
                *       new <code>SpeechSynthesisTask</code>. This operation requires all the
                *       standard information needed for speech synthesis, plus the name of an
                *       Amazon S3 bucket for the service to store the output of the synthesis task
                *       and two optional parameters (<code>OutputS3KeyPrefix</code> and
                *         <code>SnsTopicArn</code>). Once the synthesis task is created, this
                *       operation will return a <code>SpeechSynthesisTask</code> object, which
                *       will include an identifier of this task as well as the current status. The
                *         <code>SpeechSynthesisTask</code> object is available for 72 hours after
                *       starting the asynchronous synthesis task.</p>
                */
            startSpeechSynthesisTask(args: StartSpeechSynthesisTaskCommandInput, options?: __HttpHandlerOptions): Promise<StartSpeechSynthesisTaskCommandOutput>;
            startSpeechSynthesisTask(args: StartSpeechSynthesisTaskCommandInput, cb: (err: any, data?: StartSpeechSynthesisTaskCommandOutput) => void): void;
            startSpeechSynthesisTask(args: StartSpeechSynthesisTaskCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartSpeechSynthesisTaskCommandOutput) => void): void;
            /**
                * <p>Synthesizes UTF-8 input, plain text or SSML, to a stream of bytes.
                *       SSML input must be valid, well-formed SSML. Some alphabets might not be
                *       available with all the voices (for example, Cyrillic might not be read at
                *       all by English voices) unless phoneme mapping is used. For more
                *       information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/how-text-to-speech-works.html">How it Works</a>.</p>
                */
            synthesizeSpeech(args: SynthesizeSpeechCommandInput, options?: __HttpHandlerOptions): Promise<SynthesizeSpeechCommandOutput>;
            synthesizeSpeech(args: SynthesizeSpeechCommandInput, cb: (err: any, data?: SynthesizeSpeechCommandOutput) => void): void;
            synthesizeSpeech(args: SynthesizeSpeechCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: SynthesizeSpeechCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/DeleteLexiconCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteLexiconInput, DeleteLexiconOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/models/models_0";
    import { PollyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/PollyClient";
    export interface DeleteLexiconCommandInput extends DeleteLexiconInput {
    }
    export interface DeleteLexiconCommandOutput extends DeleteLexiconOutput, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified pronunciation lexicon stored in an Amazon Web Services Region. A lexicon which has been deleted is not available for
        *       speech synthesis, nor is it possible to retrieve it using either the
        *         <code>GetLexicon</code> or <code>ListLexicon</code> APIs.</p>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PollyClient, DeleteLexiconCommand } from "@aws-sdk/client-polly"; // ES Modules import
        * // const { PollyClient, DeleteLexiconCommand } = require("@aws-sdk/client-polly"); // CommonJS import
        * const client = new PollyClient(config);
        * const command = new DeleteLexiconCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteLexiconCommandInput} for command's `input` shape.
        * @see {@link DeleteLexiconCommandOutput} for command's `response` shape.
        * @see {@link PollyClientResolvedConfig | config} for PollyClient's `config` shape.
        *
        */
    export class DeleteLexiconCommand extends $Command<DeleteLexiconCommandInput, DeleteLexiconCommandOutput, PollyClientResolvedConfig> {
            readonly input: DeleteLexiconCommandInput;
            constructor(input: DeleteLexiconCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PollyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteLexiconCommandInput, DeleteLexiconCommandOutput>;
    }
}

declare module '@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/DescribeVoicesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeVoicesInput, DescribeVoicesOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/models/models_0";
    import { PollyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/PollyClient";
    export interface DescribeVoicesCommandInput extends DescribeVoicesInput {
    }
    export interface DescribeVoicesCommandOutput extends DescribeVoicesOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the list of voices that are available for use when
        *       requesting speech synthesis. Each voice speaks a specified language, is
        *       either male or female, and is identified by an ID, which is the ASCII
        *       version of the voice name. </p>
        *
        *          <p>When synthesizing speech ( <code>SynthesizeSpeech</code> ), you
        *       provide the voice ID for the voice you want from the list of voices
        *       returned by <code>DescribeVoices</code>.</p>
        *
        *          <p>For example, you want your news reader application to read news in
        *       a specific language, but giving a user the option to choose the voice.
        *       Using the <code>DescribeVoices</code> operation you can provide the user
        *       with a list of available voices to select from.</p>
        *
        *          <p> You can optionally specify a language code to filter the available
        *       voices. For example, if you specify <code>en-US</code>, the operation
        *       returns a list of all available US English voices. </p>
        *          <p>This operation requires permissions to perform the
        *         <code>polly:DescribeVoices</code> action.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PollyClient, DescribeVoicesCommand } from "@aws-sdk/client-polly"; // ES Modules import
        * // const { PollyClient, DescribeVoicesCommand } = require("@aws-sdk/client-polly"); // CommonJS import
        * const client = new PollyClient(config);
        * const command = new DescribeVoicesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeVoicesCommandInput} for command's `input` shape.
        * @see {@link DescribeVoicesCommandOutput} for command's `response` shape.
        * @see {@link PollyClientResolvedConfig | config} for PollyClient's `config` shape.
        *
        */
    export class DescribeVoicesCommand extends $Command<DescribeVoicesCommandInput, DescribeVoicesCommandOutput, PollyClientResolvedConfig> {
            readonly input: DescribeVoicesCommandInput;
            constructor(input: DescribeVoicesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PollyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeVoicesCommandInput, DescribeVoicesCommandOutput>;
    }
}

declare module '@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/GetLexiconCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetLexiconInput, GetLexiconOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/models/models_0";
    import { PollyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/PollyClient";
    export interface GetLexiconCommandInput extends GetLexiconInput {
    }
    export interface GetLexiconCommandOutput extends GetLexiconOutput, __MetadataBearer {
    }
    /**
        * <p>Returns the content of the specified pronunciation lexicon stored
        *       in an Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PollyClient, GetLexiconCommand } from "@aws-sdk/client-polly"; // ES Modules import
        * // const { PollyClient, GetLexiconCommand } = require("@aws-sdk/client-polly"); // CommonJS import
        * const client = new PollyClient(config);
        * const command = new GetLexiconCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetLexiconCommandInput} for command's `input` shape.
        * @see {@link GetLexiconCommandOutput} for command's `response` shape.
        * @see {@link PollyClientResolvedConfig | config} for PollyClient's `config` shape.
        *
        */
    export class GetLexiconCommand extends $Command<GetLexiconCommandInput, GetLexiconCommandOutput, PollyClientResolvedConfig> {
            readonly input: GetLexiconCommandInput;
            constructor(input: GetLexiconCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PollyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetLexiconCommandInput, GetLexiconCommandOutput>;
    }
}

declare module '@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/GetSpeechSynthesisTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { GetSpeechSynthesisTaskInput, GetSpeechSynthesisTaskOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/models/models_0";
    import { PollyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/PollyClient";
    export interface GetSpeechSynthesisTaskCommandInput extends GetSpeechSynthesisTaskInput {
    }
    export interface GetSpeechSynthesisTaskCommandOutput extends GetSpeechSynthesisTaskOutput, __MetadataBearer {
    }
    /**
        * <p>Retrieves a specific SpeechSynthesisTask object based on its TaskID.
        *       This object contains information about the given speech synthesis task,
        *       including the status of the task, and a link to the S3 bucket containing
        *       the output of the task.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PollyClient, GetSpeechSynthesisTaskCommand } from "@aws-sdk/client-polly"; // ES Modules import
        * // const { PollyClient, GetSpeechSynthesisTaskCommand } = require("@aws-sdk/client-polly"); // CommonJS import
        * const client = new PollyClient(config);
        * const command = new GetSpeechSynthesisTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link GetSpeechSynthesisTaskCommandInput} for command's `input` shape.
        * @see {@link GetSpeechSynthesisTaskCommandOutput} for command's `response` shape.
        * @see {@link PollyClientResolvedConfig | config} for PollyClient's `config` shape.
        *
        */
    export class GetSpeechSynthesisTaskCommand extends $Command<GetSpeechSynthesisTaskCommandInput, GetSpeechSynthesisTaskCommandOutput, PollyClientResolvedConfig> {
            readonly input: GetSpeechSynthesisTaskCommandInput;
            constructor(input: GetSpeechSynthesisTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PollyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetSpeechSynthesisTaskCommandInput, GetSpeechSynthesisTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/ListLexiconsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListLexiconsInput, ListLexiconsOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/models/models_0";
    import { PollyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/PollyClient";
    export interface ListLexiconsCommandInput extends ListLexiconsInput {
    }
    export interface ListLexiconsCommandOutput extends ListLexiconsOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a list of pronunciation lexicons stored in an Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PollyClient, ListLexiconsCommand } from "@aws-sdk/client-polly"; // ES Modules import
        * // const { PollyClient, ListLexiconsCommand } = require("@aws-sdk/client-polly"); // CommonJS import
        * const client = new PollyClient(config);
        * const command = new ListLexiconsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListLexiconsCommandInput} for command's `input` shape.
        * @see {@link ListLexiconsCommandOutput} for command's `response` shape.
        * @see {@link PollyClientResolvedConfig | config} for PollyClient's `config` shape.
        *
        */
    export class ListLexiconsCommand extends $Command<ListLexiconsCommandInput, ListLexiconsCommandOutput, PollyClientResolvedConfig> {
            readonly input: ListLexiconsCommandInput;
            constructor(input: ListLexiconsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PollyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListLexiconsCommandInput, ListLexiconsCommandOutput>;
    }
}

declare module '@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/ListSpeechSynthesisTasksCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListSpeechSynthesisTasksInput, ListSpeechSynthesisTasksOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/models/models_0";
    import { PollyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/PollyClient";
    export interface ListSpeechSynthesisTasksCommandInput extends ListSpeechSynthesisTasksInput {
    }
    export interface ListSpeechSynthesisTasksCommandOutput extends ListSpeechSynthesisTasksOutput, __MetadataBearer {
    }
    /**
        * <p>Returns a list of SpeechSynthesisTask objects ordered by their
        *       creation date. This operation can filter the tasks by their status, for
        *       example, allowing users to list only tasks that are completed.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PollyClient, ListSpeechSynthesisTasksCommand } from "@aws-sdk/client-polly"; // ES Modules import
        * // const { PollyClient, ListSpeechSynthesisTasksCommand } = require("@aws-sdk/client-polly"); // CommonJS import
        * const client = new PollyClient(config);
        * const command = new ListSpeechSynthesisTasksCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListSpeechSynthesisTasksCommandInput} for command's `input` shape.
        * @see {@link ListSpeechSynthesisTasksCommandOutput} for command's `response` shape.
        * @see {@link PollyClientResolvedConfig | config} for PollyClient's `config` shape.
        *
        */
    export class ListSpeechSynthesisTasksCommand extends $Command<ListSpeechSynthesisTasksCommandInput, ListSpeechSynthesisTasksCommandOutput, PollyClientResolvedConfig> {
            readonly input: ListSpeechSynthesisTasksCommandInput;
            constructor(input: ListSpeechSynthesisTasksCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PollyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListSpeechSynthesisTasksCommandInput, ListSpeechSynthesisTasksCommandOutput>;
    }
}

declare module '@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/PutLexiconCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutLexiconInput, PutLexiconOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/models/models_0";
    import { PollyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/PollyClient";
    export interface PutLexiconCommandInput extends PutLexiconInput {
    }
    export interface PutLexiconCommandOutput extends PutLexiconOutput, __MetadataBearer {
    }
    /**
        * <p>Stores a pronunciation lexicon in an Amazon Web Services Region. If
        *       a lexicon with the same name already exists in the region, it is
        *       overwritten by the new lexicon. Lexicon operations have eventual
        *       consistency, therefore, it might take some time before the lexicon is
        *       available to the SynthesizeSpeech operation.</p>
        *          <p>For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PollyClient, PutLexiconCommand } from "@aws-sdk/client-polly"; // ES Modules import
        * // const { PollyClient, PutLexiconCommand } = require("@aws-sdk/client-polly"); // CommonJS import
        * const client = new PollyClient(config);
        * const command = new PutLexiconCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutLexiconCommandInput} for command's `input` shape.
        * @see {@link PutLexiconCommandOutput} for command's `response` shape.
        * @see {@link PollyClientResolvedConfig | config} for PollyClient's `config` shape.
        *
        */
    export class PutLexiconCommand extends $Command<PutLexiconCommandInput, PutLexiconCommandOutput, PollyClientResolvedConfig> {
            readonly input: PutLexiconCommandInput;
            constructor(input: PutLexiconCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PollyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutLexiconCommandInput, PutLexiconCommandOutput>;
    }
}

declare module '@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/StartSpeechSynthesisTaskCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { StartSpeechSynthesisTaskInput, StartSpeechSynthesisTaskOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/models/models_0";
    import { PollyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/PollyClient";
    export interface StartSpeechSynthesisTaskCommandInput extends StartSpeechSynthesisTaskInput {
    }
    export interface StartSpeechSynthesisTaskCommandOutput extends StartSpeechSynthesisTaskOutput, __MetadataBearer {
    }
    /**
        * <p>Allows the creation of an asynchronous synthesis task, by starting a
        *       new <code>SpeechSynthesisTask</code>. This operation requires all the
        *       standard information needed for speech synthesis, plus the name of an
        *       Amazon S3 bucket for the service to store the output of the synthesis task
        *       and two optional parameters (<code>OutputS3KeyPrefix</code> and
        *         <code>SnsTopicArn</code>). Once the synthesis task is created, this
        *       operation will return a <code>SpeechSynthesisTask</code> object, which
        *       will include an identifier of this task as well as the current status. The
        *         <code>SpeechSynthesisTask</code> object is available for 72 hours after
        *       starting the asynchronous synthesis task.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PollyClient, StartSpeechSynthesisTaskCommand } from "@aws-sdk/client-polly"; // ES Modules import
        * // const { PollyClient, StartSpeechSynthesisTaskCommand } = require("@aws-sdk/client-polly"); // CommonJS import
        * const client = new PollyClient(config);
        * const command = new StartSpeechSynthesisTaskCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link StartSpeechSynthesisTaskCommandInput} for command's `input` shape.
        * @see {@link StartSpeechSynthesisTaskCommandOutput} for command's `response` shape.
        * @see {@link PollyClientResolvedConfig | config} for PollyClient's `config` shape.
        *
        */
    export class StartSpeechSynthesisTaskCommand extends $Command<StartSpeechSynthesisTaskCommandInput, StartSpeechSynthesisTaskCommandOutput, PollyClientResolvedConfig> {
            readonly input: StartSpeechSynthesisTaskCommandInput;
            constructor(input: StartSpeechSynthesisTaskCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PollyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<StartSpeechSynthesisTaskCommandInput, StartSpeechSynthesisTaskCommandOutput>;
    }
}

declare module '@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/SynthesizeSpeechCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { SynthesizeSpeechInput, SynthesizeSpeechOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/models/models_0";
    import { PollyClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/PollyClient";
    export interface SynthesizeSpeechCommandInput extends SynthesizeSpeechInput {
    }
    export interface SynthesizeSpeechCommandOutput extends SynthesizeSpeechOutput, __MetadataBearer {
    }
    /**
        * <p>Synthesizes UTF-8 input, plain text or SSML, to a stream of bytes.
        *       SSML input must be valid, well-formed SSML. Some alphabets might not be
        *       available with all the voices (for example, Cyrillic might not be read at
        *       all by English voices) unless phoneme mapping is used. For more
        *       information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/how-text-to-speech-works.html">How it Works</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { PollyClient, SynthesizeSpeechCommand } from "@aws-sdk/client-polly"; // ES Modules import
        * // const { PollyClient, SynthesizeSpeechCommand } = require("@aws-sdk/client-polly"); // CommonJS import
        * const client = new PollyClient(config);
        * const command = new SynthesizeSpeechCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link SynthesizeSpeechCommandInput} for command's `input` shape.
        * @see {@link SynthesizeSpeechCommandOutput} for command's `response` shape.
        * @see {@link PollyClientResolvedConfig | config} for PollyClient's `config` shape.
        *
        */
    export class SynthesizeSpeechCommand extends $Command<SynthesizeSpeechCommandInput, SynthesizeSpeechCommandOutput, PollyClientResolvedConfig> {
            readonly input: SynthesizeSpeechCommandInput;
            constructor(input: SynthesizeSpeechCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: PollyClientResolvedConfig, options?: __HttpHandlerOptions): Handler<SynthesizeSpeechCommandInput, SynthesizeSpeechCommandOutput>;
    }
}

declare module '@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/PollyClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { DeleteLexiconCommandInput, DeleteLexiconCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/DeleteLexiconCommand";
    import { DescribeVoicesCommandInput, DescribeVoicesCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/DescribeVoicesCommand";
    import { GetLexiconCommandInput, GetLexiconCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/GetLexiconCommand";
    import { GetSpeechSynthesisTaskCommandInput, GetSpeechSynthesisTaskCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/GetSpeechSynthesisTaskCommand";
    import { ListLexiconsCommandInput, ListLexiconsCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/ListLexiconsCommand";
    import { ListSpeechSynthesisTasksCommandInput, ListSpeechSynthesisTasksCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/ListSpeechSynthesisTasksCommand";
    import { PutLexiconCommandInput, PutLexiconCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/PutLexiconCommand";
    import { StartSpeechSynthesisTaskCommandInput, StartSpeechSynthesisTaskCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/StartSpeechSynthesisTaskCommand";
    import { SynthesizeSpeechCommandInput, SynthesizeSpeechCommandOutput } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/commands/SynthesizeSpeechCommand";
    export type ServiceInputTypes = DeleteLexiconCommandInput | DescribeVoicesCommandInput | GetLexiconCommandInput | GetSpeechSynthesisTaskCommandInput | ListLexiconsCommandInput | ListSpeechSynthesisTasksCommandInput | PutLexiconCommandInput | StartSpeechSynthesisTaskCommandInput | SynthesizeSpeechCommandInput;
    export type ServiceOutputTypes = DeleteLexiconCommandOutput | DescribeVoicesCommandOutput | GetLexiconCommandOutput | GetSpeechSynthesisTaskCommandOutput | ListLexiconsCommandOutput | ListSpeechSynthesisTasksCommandOutput | PutLexiconCommandOutput | StartSpeechSynthesisTaskCommandOutput | SynthesizeSpeechCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type PollyClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of PollyClient class constructor that set the region, credentials and other options.
        */
    export interface PollyClientConfig extends PollyClientConfigType {
    }
    type PollyClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of PollyClient class. This is resolved and normalized from the {@link PollyClientConfig | constructor configuration interface}.
        */
    export interface PollyClientResolvedConfig extends PollyClientResolvedConfigType {
    }
    /**
        * <p>Amazon Polly is a web service that makes it easy to synthesize speech from
        *       text.</p>
        *          <p>The Amazon Polly service provides API operations for synthesizing
        *       high-quality speech from plain text and Speech Synthesis Markup Language
        *       (SSML), along with managing pronunciations lexicons that enable you to get
        *       the best results for your application domain.</p>
        */
    export class PollyClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, PollyClientResolvedConfig> {
            /**
                * The resolved configuration of PollyClient class. This is resolved and normalized from the {@link PollyClientConfig | constructor configuration interface}.
                */
            readonly config: PollyClientResolvedConfig;
            constructor(configuration: PollyClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { Readable } from "stream";
    import { PollyServiceException as __BaseException } from "@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/models/PollyServiceException";
    export interface DeleteLexiconInput {
            /**
                * <p>The name of the lexicon to delete. Must be an existing lexicon in
                *       the region.</p>
                */
            Name: string | undefined;
    }
    export namespace DeleteLexiconInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLexiconInput) => any;
    }
    export interface DeleteLexiconOutput {
    }
    export namespace DeleteLexiconOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteLexiconOutput) => any;
    }
    /**
        * <p>Amazon Polly can't find the specified lexicon. This could be caused by a
        *       lexicon that is missing, its name is misspelled or specifying a lexicon
        *       that is in a different region.</p>
        *          <p>Verify that the lexicon exists, is in the region (see <a>ListLexicons</a>) and that you spelled its name is spelled
        *       correctly. Then try again.</p>
        */
    export class LexiconNotFoundException extends __BaseException {
            readonly name: "LexiconNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LexiconNotFoundException, __BaseException>);
    }
    /**
        * <p>An unknown condition has caused a service failure.</p>
        */
    export class ServiceFailureException extends __BaseException {
            readonly name: "ServiceFailureException";
            readonly $fault: "server";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceFailureException, __BaseException>);
    }
    export enum Engine {
            NEURAL = "neural",
            STANDARD = "standard"
    }
    export type LanguageCode = "arb" | "ca-ES" | "cmn-CN" | "cy-GB" | "da-DK" | "de-AT" | "de-DE" | "en-AU" | "en-GB" | "en-GB-WLS" | "en-IN" | "en-NZ" | "en-US" | "en-ZA" | "es-ES" | "es-MX" | "es-US" | "fr-CA" | "fr-FR" | "hi-IN" | "is-IS" | "it-IT" | "ja-JP" | "ko-KR" | "nb-NO" | "nl-NL" | "pl-PL" | "pt-BR" | "pt-PT" | "ro-RO" | "ru-RU" | "sv-SE" | "tr-TR";
    export interface DescribeVoicesInput {
            /**
                * <p>Specifies the engine (<code>standard</code> or <code>neural</code>)
                *       used by Amazon Polly when processing input text for speech synthesis. </p>
                */
            Engine?: Engine | string;
            /**
                * <p> The language identification tag (ISO 639 code for the language
                *       name-ISO 3166 country code) for filtering the list of voices returned. If
                *       you don't specify this optional parameter, all available voices are
                *       returned. </p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>Boolean value indicating whether to return any bilingual voices that
                *       use the specified language as an additional language. For instance, if you
                *       request all languages that use US English (es-US), and there is an Italian
                *       voice that speaks both Italian (it-IT) and US English, that voice will be
                *       included if you specify <code>yes</code> but not if you specify
                *         <code>no</code>.</p>
                */
            IncludeAdditionalLanguageCodes?: boolean;
            /**
                * <p>An opaque pagination token returned from the previous
                *         <code>DescribeVoices</code> operation. If present, this indicates where
                *       to continue the listing.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeVoicesInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeVoicesInput) => any;
    }
    export type Gender = "Female" | "Male";
    export type VoiceId = "Aditi" | "Amy" | "Aria" | "Arlet" | "Arthur" | "Astrid" | "Ayanda" | "Bianca" | "Brian" | "Camila" | "Carla" | "Carmen" | "Celine" | "Chantal" | "Conchita" | "Cristiano" | "Daniel" | "Dora" | "Emma" | "Enrique" | "Ewa" | "Filiz" | "Gabrielle" | "Geraint" | "Giorgio" | "Gwyneth" | "Hannah" | "Hans" | "Ines" | "Ivy" | "Jacek" | "Jan" | "Joanna" | "Joey" | "Justin" | "Karl" | "Kendra" | "Kevin" | "Kimberly" | "Lea" | "Liam" | "Liv" | "Lotte" | "Lucia" | "Lupe" | "Mads" | "Maja" | "Marlene" | "Mathieu" | "Matthew" | "Maxim" | "Mia" | "Miguel" | "Mizuki" | "Naja" | "Nicole" | "Olivia" | "Pedro" | "Penelope" | "Raveena" | "Ricardo" | "Ruben" | "Russell" | "Salli" | "Seoyeon" | "Takumi" | "Tatyana" | "Vicki" | "Vitoria" | "Zeina" | "Zhiyu";
    /**
        * <p>Description of the voice.</p>
        */
    export interface Voice {
            /**
                * <p>Gender of the voice.</p>
                */
            Gender?: Gender | string;
            /**
                * <p>Amazon Polly assigned voice ID. This is the ID that you specify when
                *       calling the <code>SynthesizeSpeech</code> operation.</p>
                */
            Id?: VoiceId | string;
            /**
                * <p>Language code of the voice.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>Human readable name of the language in English.</p>
                */
            LanguageName?: string;
            /**
                * <p>Name of the voice (for example, Salli, Kendra, etc.). This provides
                *       a human readable voice name that you might display in your
                *       application.</p>
                */
            Name?: string;
            /**
                * <p>Additional codes for languages available for the specified voice in
                *       addition to its default language. </p>
                *          <p>For example, the default language for Aditi is Indian English (en-IN)
                *       because it was first used for that language. Since Aditi is bilingual and
                *       fluent in both Indian English and Hindi, this parameter would show the
                *       code <code>hi-IN</code>.</p>
                */
            AdditionalLanguageCodes?: (LanguageCode | string)[];
            /**
                * <p>Specifies which engines (<code>standard</code> or <code>neural</code>)
                *       that are supported by a given voice.</p>
                */
            SupportedEngines?: (Engine | string)[];
    }
    export namespace Voice {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Voice) => any;
    }
    export interface DescribeVoicesOutput {
            /**
                * <p>A list of voices with their properties.</p>
                */
            Voices?: Voice[];
            /**
                * <p>The pagination token to use in the next request to continue the
                *       listing of voices. <code>NextToken</code> is returned only if the response
                *       is truncated.</p>
                */
            NextToken?: string;
    }
    export namespace DescribeVoicesOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeVoicesOutput) => any;
    }
    /**
        * <p>The NextToken is invalid. Verify that it's spelled correctly, and
        *       then try again.</p>
        */
    export class InvalidNextTokenException extends __BaseException {
            readonly name: "InvalidNextTokenException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidNextTokenException, __BaseException>);
    }
    /**
        * <p>This engine is not compatible with the voice that you have designated.
        *       Choose a new voice that is compatible with the engine or change the engine
        *       and restart the operation.</p>
        */
    export class EngineNotSupportedException extends __BaseException {
            readonly name: "EngineNotSupportedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<EngineNotSupportedException, __BaseException>);
    }
    export interface GetLexiconInput {
            /**
                * <p>Name of the lexicon.</p>
                */
            Name: string | undefined;
    }
    export namespace GetLexiconInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLexiconInput) => any;
    }
    /**
        * <p>Provides lexicon name and lexicon content in string format. For
        *       more information, see <a href="https://www.w3.org/TR/pronunciation-lexicon/">Pronunciation Lexicon
        *         Specification (PLS) Version 1.0</a>.</p>
        */
    export interface Lexicon {
            /**
                * <p>Lexicon content in string format. The content of a lexicon must be
                *       in PLS format.</p>
                */
            Content?: string;
            /**
                * <p>Name of the lexicon.</p>
                */
            Name?: string;
    }
    export namespace Lexicon {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Lexicon) => any;
    }
    /**
        * <p>Contains metadata describing the lexicon such as the number of
        *       lexemes, language code, and so on. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/managing-lexicons.html">Managing Lexicons</a>.</p>
        */
    export interface LexiconAttributes {
            /**
                * <p>Phonetic alphabet used in the lexicon. Valid values are
                *         <code>ipa</code> and <code>x-sampa</code>.</p>
                */
            Alphabet?: string;
            /**
                * <p>Language code that the lexicon applies to. A lexicon with a
                *       language code such as "en" would be applied to all English languages
                *       (en-GB, en-US, en-AUS, en-WLS, and so on.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>Date lexicon was last modified (a timestamp value).</p>
                */
            LastModified?: Date;
            /**
                * <p>Amazon Resource Name (ARN) of the lexicon.</p>
                */
            LexiconArn?: string;
            /**
                * <p>Number of lexemes in the lexicon.</p>
                */
            LexemesCount?: number;
            /**
                * <p>Total size of the lexicon, in characters.</p>
                */
            Size?: number;
    }
    export namespace LexiconAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LexiconAttributes) => any;
    }
    export interface GetLexiconOutput {
            /**
                * <p>Lexicon object that provides name and the string content of the
                *       lexicon. </p>
                */
            Lexicon?: Lexicon;
            /**
                * <p>Metadata of the lexicon, including phonetic alphabetic used,
                *       language code, lexicon ARN, number of lexemes defined in the lexicon, and
                *       size of lexicon in bytes.</p>
                */
            LexiconAttributes?: LexiconAttributes;
    }
    export namespace GetLexiconOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetLexiconOutput) => any;
    }
    export interface GetSpeechSynthesisTaskInput {
            /**
                * <p>The Amazon Polly generated identifier for a speech synthesis task.</p>
                */
            TaskId: string | undefined;
    }
    export namespace GetSpeechSynthesisTaskInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSpeechSynthesisTaskInput) => any;
    }
    export enum OutputFormat {
            JSON = "json",
            MP3 = "mp3",
            OGG_VORBIS = "ogg_vorbis",
            PCM = "pcm"
    }
    export enum SpeechMarkType {
            SENTENCE = "sentence",
            SSML = "ssml",
            VISEME = "viseme",
            WORD = "word"
    }
    export enum TaskStatus {
            COMPLETED = "completed",
            FAILED = "failed",
            IN_PROGRESS = "inProgress",
            SCHEDULED = "scheduled"
    }
    export enum TextType {
            SSML = "ssml",
            TEXT = "text"
    }
    /**
        * <p>SynthesisTask object that provides information about a speech
        *       synthesis task.</p>
        */
    export interface SynthesisTask {
            /**
                * <p>Specifies the engine (<code>standard</code> or <code>neural</code>)
                *       for Amazon Polly to use when processing input text for speech synthesis. Using a
                *       voice that is not supported for the engine selected will result in an
                *       error.</p>
                */
            Engine?: Engine | string;
            /**
                * <p>The Amazon Polly generated identifier for a speech synthesis task.</p>
                */
            TaskId?: string;
            /**
                * <p>Current status of the individual speech synthesis task.</p>
                */
            TaskStatus?: TaskStatus | string;
            /**
                * <p>Reason for the current status of a specific speech synthesis task,
                *       including errors if the task has failed.</p>
                */
            TaskStatusReason?: string;
            /**
                * <p>Pathway for the output speech file.</p>
                */
            OutputUri?: string;
            /**
                * <p>Timestamp for the time the synthesis task was started.</p>
                */
            CreationTime?: Date;
            /**
                * <p>Number of billable characters synthesized.</p>
                */
            RequestCharacters?: number;
            /**
                * <p>ARN for the SNS topic optionally used for providing status
                *       notification for a speech synthesis task.</p>
                */
            SnsTopicArn?: string;
            /**
                * <p>List of one or more pronunciation lexicon names you want the service
                *       to apply during synthesis. Lexicons are applied only if the language of
                *       the lexicon is the same as the language of the voice. </p>
                */
            LexiconNames?: string[];
            /**
                * <p>The format in which the returned output will be encoded. For audio
                *       stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will
                *       be json. </p>
                */
            OutputFormat?: OutputFormat | string;
            /**
                * <p>The audio frequency specified in Hz.</p>
                *          <p>The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050",
                *       and "24000". The default value for standard voices is "22050". The default
                *       value for neural voices is "24000".</p>
                *          <p>Valid values for pcm are "8000" and "16000" The default value is
                *       "16000". </p>
                */
            SampleRate?: string;
            /**
                * <p>The type of speech marks returned for the input text.</p>
                */
            SpeechMarkTypes?: (SpeechMarkType | string)[];
            /**
                * <p>Specifies whether the input text is plain text or SSML. The default
                *       value is plain text. </p>
                */
            TextType?: TextType | string;
            /**
                * <p>Voice ID to use for the synthesis. </p>
                */
            VoiceId?: VoiceId | string;
            /**
                * <p>Optional language code for a synthesis task. This is only necessary if
                *       using a bilingual voice, such as Aditi, which can be used for either
                *       Indian English (en-IN) or Hindi (hi-IN). </p>
                *          <p>If a bilingual voice is used and no language code is specified, Amazon Polly
                *       uses the default language of the bilingual voice. The default language for
                *       any voice is the one returned by the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a> operation for the <code>LanguageCode</code>
                *       parameter. For example, if no language code is specified, Aditi will use
                *       Indian English rather than Hindi.</p>
                */
            LanguageCode?: LanguageCode | string;
    }
    export namespace SynthesisTask {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SynthesisTask) => any;
    }
    export interface GetSpeechSynthesisTaskOutput {
            /**
                * <p>SynthesisTask object that provides information from the requested
                *       task, including output format, creation time, task status, and so
                *       on.</p>
                */
            SynthesisTask?: SynthesisTask;
    }
    export namespace GetSpeechSynthesisTaskOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: GetSpeechSynthesisTaskOutput) => any;
    }
    /**
        * <p>The provided Task ID is not valid. Please provide a valid Task ID and
        *       try again.</p>
        */
    export class InvalidTaskIdException extends __BaseException {
            readonly name: "InvalidTaskIdException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTaskIdException, __BaseException>);
    }
    /**
        * <p>The Speech Synthesis task with requested Task ID cannot be
        *       found.</p>
        */
    export class SynthesisTaskNotFoundException extends __BaseException {
            readonly name: "SynthesisTaskNotFoundException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SynthesisTaskNotFoundException, __BaseException>);
    }
    /**
        * <p>Amazon Polly can't find the specified lexicon. Verify that the lexicon's
        *       name is spelled correctly, and then try again.</p>
        */
    export class InvalidLexiconException extends __BaseException {
            readonly name: "InvalidLexiconException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidLexiconException, __BaseException>);
    }
    /**
        * <p>The provided Amazon S3 bucket name is invalid. Please check your input
        *       with S3 bucket naming requirements and try again.</p>
        */
    export class InvalidS3BucketException extends __BaseException {
            readonly name: "InvalidS3BucketException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidS3BucketException, __BaseException>);
    }
    /**
        * <p>The provided Amazon S3 key prefix is invalid. Please provide a valid
        *       S3 object key name.</p>
        */
    export class InvalidS3KeyException extends __BaseException {
            readonly name: "InvalidS3KeyException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidS3KeyException, __BaseException>);
    }
    /**
        * <p>The specified sample rate is not valid.</p>
        */
    export class InvalidSampleRateException extends __BaseException {
            readonly name: "InvalidSampleRateException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSampleRateException, __BaseException>);
    }
    /**
        * <p>The provided SNS topic ARN is invalid. Please provide a valid SNS
        *       topic ARN and try again.</p>
        */
    export class InvalidSnsTopicArnException extends __BaseException {
            readonly name: "InvalidSnsTopicArnException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSnsTopicArnException, __BaseException>);
    }
    /**
        * <p>The SSML you provided is invalid. Verify the SSML syntax, spelling
        *       of tags and values, and then try again.</p>
        */
    export class InvalidSsmlException extends __BaseException {
            readonly name: "InvalidSsmlException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidSsmlException, __BaseException>);
    }
    /**
        * <p>The language specified is not currently supported by Amazon Polly in this
        *       capacity.</p>
        */
    export class LanguageNotSupportedException extends __BaseException {
            readonly name: "LanguageNotSupportedException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LanguageNotSupportedException, __BaseException>);
    }
    /**
        * <p>Describes the content of the lexicon.</p>
        */
    export interface LexiconDescription {
            /**
                * <p>Name of the lexicon.</p>
                */
            Name?: string;
            /**
                * <p>Provides lexicon metadata.</p>
                */
            Attributes?: LexiconAttributes;
    }
    export namespace LexiconDescription {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LexiconDescription) => any;
    }
    /**
        * <p>The maximum size of the specified lexicon would be exceeded by this
        *       operation.</p>
        */
    export class LexiconSizeExceededException extends __BaseException {
            readonly name: "LexiconSizeExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LexiconSizeExceededException, __BaseException>);
    }
    export interface ListLexiconsInput {
            /**
                * <p>An opaque pagination token returned from previous
                *         <code>ListLexicons</code> operation. If present, indicates where to
                *       continue the list of lexicons.</p>
                */
            NextToken?: string;
    }
    export namespace ListLexiconsInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLexiconsInput) => any;
    }
    export interface ListLexiconsOutput {
            /**
                * <p>A list of lexicon names and attributes.</p>
                */
            Lexicons?: LexiconDescription[];
            /**
                * <p>The pagination token to use in the next request to continue the
                *       listing of lexicons. <code>NextToken</code> is returned only if the
                *       response is truncated.</p>
                */
            NextToken?: string;
    }
    export namespace ListLexiconsOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListLexiconsOutput) => any;
    }
    export interface ListSpeechSynthesisTasksInput {
            /**
                * <p>Maximum number of speech synthesis tasks returned in a List
                *       operation.</p>
                */
            MaxResults?: number;
            /**
                * <p>The pagination token to use in the next request to continue the
                *       listing of speech synthesis tasks. </p>
                */
            NextToken?: string;
            /**
                * <p>Status of the speech synthesis tasks returned in a List
                *       operation</p>
                */
            Status?: TaskStatus | string;
    }
    export namespace ListSpeechSynthesisTasksInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSpeechSynthesisTasksInput) => any;
    }
    export interface ListSpeechSynthesisTasksOutput {
            /**
                * <p>An opaque pagination token returned from the previous List operation
                *       in this request. If present, this indicates where to continue the
                *       listing.</p>
                */
            NextToken?: string;
            /**
                * <p>List of SynthesisTask objects that provides information from the
                *       specified task in the list request, including output format, creation
                *       time, task status, and so on.</p>
                */
            SynthesisTasks?: SynthesisTask[];
    }
    export namespace ListSpeechSynthesisTasksOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListSpeechSynthesisTasksOutput) => any;
    }
    /**
        * <p>Speech marks are not supported for the <code>OutputFormat</code>
        *       selected. Speech marks are only available for content in <code>json</code>
        *       format.</p>
        */
    export class MarksNotSupportedForFormatException extends __BaseException {
            readonly name: "MarksNotSupportedForFormatException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MarksNotSupportedForFormatException, __BaseException>);
    }
    /**
        * <p>The maximum size of the lexeme would be exceeded by this
        *       operation.</p>
        */
    export class MaxLexemeLengthExceededException extends __BaseException {
            readonly name: "MaxLexemeLengthExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaxLexemeLengthExceededException, __BaseException>);
    }
    /**
        * <p>The maximum number of lexicons would be exceeded by this
        *       operation.</p>
        */
    export class MaxLexiconsNumberExceededException extends __BaseException {
            readonly name: "MaxLexiconsNumberExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<MaxLexiconsNumberExceededException, __BaseException>);
    }
    export interface PutLexiconInput {
            /**
                * <p>Name of the lexicon. The name must follow the regular express
                *       format [0-9A-Za-z]{1,20}. That is, the name is a case-sensitive
                *       alphanumeric string up to 20 characters long. </p>
                */
            Name: string | undefined;
            /**
                * <p>Content of the PLS lexicon as string data.</p>
                */
            Content: string | undefined;
    }
    export namespace PutLexiconInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutLexiconInput) => any;
    }
    export interface PutLexiconOutput {
    }
    export namespace PutLexiconOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutLexiconOutput) => any;
    }
    /**
        * <p>The alphabet specified by the lexicon is not a supported alphabet.
        *       Valid values are <code>x-sampa</code> and <code>ipa</code>.</p>
        */
    export class UnsupportedPlsAlphabetException extends __BaseException {
            readonly name: "UnsupportedPlsAlphabetException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedPlsAlphabetException, __BaseException>);
    }
    /**
        * <p>The language specified in the lexicon is unsupported. For a list of
        *       supported languages, see <a href="https://docs.aws.amazon.com/polly/latest/dg/API_LexiconAttributes.html">Lexicon Attributes</a>.</p>
        */
    export class UnsupportedPlsLanguageException extends __BaseException {
            readonly name: "UnsupportedPlsLanguageException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedPlsLanguageException, __BaseException>);
    }
    /**
        * <p>SSML speech marks are not supported for plain text-type
        *       input.</p>
        */
    export class SsmlMarksNotSupportedForTextTypeException extends __BaseException {
            readonly name: "SsmlMarksNotSupportedForTextTypeException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<SsmlMarksNotSupportedForTextTypeException, __BaseException>);
    }
    export interface StartSpeechSynthesisTaskInput {
            /**
                * <p>Specifies the engine (<code>standard</code> or <code>neural</code>)
                *       for Amazon Polly to use when processing input text for speech synthesis. Using a
                *       voice that is not supported for the engine selected will result in an
                *       error.</p>
                */
            Engine?: Engine | string;
            /**
                * <p>Optional language code for the Speech Synthesis request. This is only
                *       necessary if using a bilingual voice, such as Aditi, which can be used for
                *       either Indian English (en-IN) or Hindi (hi-IN). </p>
                *          <p>If a bilingual voice is used and no language code is specified, Amazon Polly
                *       uses the default language of the bilingual voice. The default language for
                *       any voice is the one returned by the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a> operation for the <code>LanguageCode</code>
                *       parameter. For example, if no language code is specified, Aditi will use
                *       Indian English rather than Hindi.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>List of one or more pronunciation lexicon names you want the service
                *       to apply during synthesis. Lexicons are applied only if the language of
                *       the lexicon is the same as the language of the voice. </p>
                */
            LexiconNames?: string[];
            /**
                * <p>The format in which the returned output will be encoded. For audio
                *       stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will
                *       be json. </p>
                */
            OutputFormat: OutputFormat | string | undefined;
            /**
                * <p>Amazon S3 bucket name to which the output file will be saved.</p>
                */
            OutputS3BucketName: string | undefined;
            /**
                * <p>The Amazon S3 key prefix for the output speech file.</p>
                */
            OutputS3KeyPrefix?: string;
            /**
                * <p>The audio frequency specified in Hz.</p>
                *          <p>The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050",
                *       and "24000". The default value for standard voices is "22050". The default
                *       value for neural voices is "24000".</p>
                *          <p>Valid values for pcm are "8000" and "16000" The default value is
                *       "16000". </p>
                */
            SampleRate?: string;
            /**
                * <p>ARN for the SNS topic optionally used for providing status
                *       notification for a speech synthesis task.</p>
                */
            SnsTopicArn?: string;
            /**
                * <p>The type of speech marks returned for the input text.</p>
                */
            SpeechMarkTypes?: (SpeechMarkType | string)[];
            /**
                * <p>The input text to synthesize. If you specify ssml as the TextType,
                *       follow the SSML format for the input text. </p>
                */
            Text: string | undefined;
            /**
                * <p>Specifies whether the input text is plain text or SSML. The default
                *       value is plain text. </p>
                */
            TextType?: TextType | string;
            /**
                * <p>Voice ID to use for the synthesis. </p>
                */
            VoiceId: VoiceId | string | undefined;
    }
    export namespace StartSpeechSynthesisTaskInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSpeechSynthesisTaskInput) => any;
    }
    export interface StartSpeechSynthesisTaskOutput {
            /**
                * <p>SynthesisTask object that provides information and attributes about a
                *       newly submitted speech synthesis task.</p>
                */
            SynthesisTask?: SynthesisTask;
    }
    export namespace StartSpeechSynthesisTaskOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StartSpeechSynthesisTaskOutput) => any;
    }
    /**
        * <p>The value of the "Text" parameter is longer than the accepted
        *       limits. For the <code>SynthesizeSpeech</code> API, the limit for input
        *       text is a maximum of 6000 characters total, of which no more than 3000 can
        *       be billed characters. For the <code>StartSpeechSynthesisTask</code> API,
        *       the maximum is 200,000 characters, of which no more than 100,000 can be
        *       billed characters. SSML tags are not counted as billed
        *       characters.</p>
        */
    export class TextLengthExceededException extends __BaseException {
            readonly name: "TextLengthExceededException";
            readonly $fault: "client";
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<TextLengthExceededException, __BaseException>);
    }
    export interface SynthesizeSpeechInput {
            /**
                * <p>Specifies the engine (<code>standard</code> or <code>neural</code>)
                *       for Amazon Polly to use when processing input text for speech synthesis. For
                *       information on Amazon Polly voices and which voices are available in
                *       standard-only, NTTS-only, and both standard and NTTS formats, see <a href="https://docs.aws.amazon.com/polly/latest/dg/voicelist.html">Available Voices</a>.</p>
                *          <p>
                *             <b>NTTS-only voices</b>
                *          </p>
                *          <p>When using NTTS-only voices such as Kevin (en-US), this parameter is
                *       required and must be set to <code>neural</code>. If the engine is not
                *       specified, or is set to <code>standard</code>, this will result in an
                *       error. </p>
                *          <p>Type: String</p>
                *          <p>Valid Values: <code>standard</code> | <code>neural</code>
                *          </p>
                *          <p>Required: Yes</p>
                *
                *          <p>
                *             <b>Standard voices</b>
                *          </p>
                *          <p>For standard voices, this is not required; the engine parameter
                *       defaults to <code>standard</code>. If the engine is not specified, or is
                *       set to <code>standard</code> and an NTTS-only voice is selected, this will
                *       result in an error. </p>
                */
            Engine?: Engine | string;
            /**
                * <p>Optional language code for the Synthesize Speech request. This is only
                *       necessary if using a bilingual voice, such as Aditi, which can be used for
                *       either Indian English (en-IN) or Hindi (hi-IN). </p>
                *          <p>If a bilingual voice is used and no language code is specified, Amazon Polly
                *       uses the default language of the bilingual voice. The default language for
                *       any voice is the one returned by the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a> operation for the <code>LanguageCode</code>
                *       parameter. For example, if no language code is specified, Aditi will use
                *       Indian English rather than Hindi.</p>
                */
            LanguageCode?: LanguageCode | string;
            /**
                * <p>List of one or more pronunciation lexicon names you want the
                *       service to apply during synthesis. Lexicons are applied only if the
                *       language of the lexicon is the same as the language of the voice. For
                *       information about storing lexicons, see <a href="https://docs.aws.amazon.com/polly/latest/dg/API_PutLexicon.html">PutLexicon</a>.</p>
                */
            LexiconNames?: string[];
            /**
                * <p> The format in which the returned output will be encoded. For audio
                *       stream, this will be mp3, ogg_vorbis, or pcm. For speech marks, this will
                *       be json. </p>
                *          <p>When pcm is used, the content returned is audio/pcm in a signed
                *       16-bit, 1 channel (mono), little-endian format. </p>
                */
            OutputFormat: OutputFormat | string | undefined;
            /**
                * <p>The audio frequency specified in Hz.</p>
                *          <p>The valid values for mp3 and ogg_vorbis are "8000", "16000", "22050",
                *       and "24000". The default value for standard voices is "22050". The default
                *       value for neural voices is "24000".</p>
                *          <p>Valid values for pcm are "8000" and "16000" The default value is
                *       "16000". </p>
                */
            SampleRate?: string;
            /**
                * <p>The type of speech marks returned for the input text.</p>
                */
            SpeechMarkTypes?: (SpeechMarkType | string)[];
            /**
                * <p> Input text to synthesize. If you specify <code>ssml</code> as the
                *         <code>TextType</code>, follow the SSML format for the input text.
                *     </p>
                */
            Text: string | undefined;
            /**
                * <p> Specifies whether the input text is plain text or SSML. The
                *       default value is plain text. For more information, see <a href="https://docs.aws.amazon.com/polly/latest/dg/ssml.html">Using
                *         SSML</a>.</p>
                */
            TextType?: TextType | string;
            /**
                * <p> Voice ID to use for the synthesis. You can get a list of available
                *       voice IDs by calling the <a href="https://docs.aws.amazon.com/polly/latest/dg/API_DescribeVoices.html">DescribeVoices</a> operation. </p>
                */
            VoiceId: VoiceId | string | undefined;
    }
    export namespace SynthesizeSpeechInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SynthesizeSpeechInput) => any;
    }
    export interface SynthesizeSpeechOutput {
            /**
                * <p> Stream containing the synthesized speech. </p>
                */
            AudioStream?: Readable | ReadableStream | Blob;
            /**
                * <p> Specifies the type audio stream. This should reflect the
                *         <code>OutputFormat</code> parameter in your request. </p>
                *          <ul>
                *             <li>
                *                <p> If you request <code>mp3</code> as the
                *             <code>OutputFormat</code>, the <code>ContentType</code> returned is
                *           audio/mpeg. </p>
                *             </li>
                *             <li>
                *                <p> If you request <code>ogg_vorbis</code> as the
                *             <code>OutputFormat</code>, the <code>ContentType</code> returned is
                *           audio/ogg. </p>
                *             </li>
                *             <li>
                *                <p> If you request <code>pcm</code> as the
                *             <code>OutputFormat</code>, the <code>ContentType</code> returned is
                *           audio/pcm in a signed 16-bit, 1 channel (mono), little-endian format.
                *         </p>
                *             </li>
                *             <li>
                *                <p>If you request <code>json</code> as the
                *             <code>OutputFormat</code>, the <code>ContentType</code> returned is
                *           application/x-json-stream.</p>
                *             </li>
                *          </ul>
                *          <p> </p>
                */
            ContentType?: string;
            /**
                * <p>Number of characters synthesized.</p>
                */
            RequestCharacters?: number;
    }
    export namespace SynthesizeSpeechOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SynthesizeSpeechOutput) => any;
    }
}

declare module '@aws-sdk/client-polly/node_modules/@aws-sdk/client-polly/dist-types/models/PollyServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from Polly service.
        */
    export class PollyServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

