// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-sagemaker-runtime' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { InvokeEndpointAsyncCommandInput, InvokeEndpointAsyncCommandOutput } from "@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/commands/InvokeEndpointAsyncCommand";
    import { InvokeEndpointCommandInput, InvokeEndpointCommandOutput } from "@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/commands/InvokeEndpointCommand";
    import { SageMakerRuntimeClient } from "@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/SageMakerRuntimeClient";
    /**
        * <p> The Amazon SageMaker runtime API. </p>
        */
    export class SageMakerRuntime extends SageMakerRuntimeClient {
            /**
                * <p>After you deploy a model into production using Amazon SageMaker hosting services, your
                *             client applications use this API to get inferences from the model hosted at the
                *             specified endpoint. </p>
                *         <p>For an overview of Amazon SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
                *         <p>Amazon SageMaker strips all POST headers except those supported by the API. Amazon SageMaker might add
                *             additional headers. You should not rely on the behavior of headers outside those
                *             enumerated in the request syntax. </p>
                *         <p>Calls to <code>InvokeEndpoint</code> are authenticated by using Amazon Web Services Signature Version
                *             4. For information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html">Authenticating
                *                 Requests (Amazon Web Services Signature Version 4)</a> in the <i>Amazon S3 API
                *                 Reference</i>.</p>
                *         <p>A customer's model containers must respond to requests within 60 seconds. The model
                *             itself can have a maximum processing time of 60 seconds before responding to
                *             invocations. If your model is going to take 50-60 seconds of processing time, the SDK
                *             socket timeout should be set to be 70 seconds.</p>
                *         <note>
                *             <p>Endpoints are scoped to an individual account, and are not public. The URL does
                *                 not contain the account ID, but Amazon SageMaker determines the account ID from the
                *                 authentication token that is supplied by the caller.</p>
                *         </note>
                */
            invokeEndpoint(args: InvokeEndpointCommandInput, options?: __HttpHandlerOptions): Promise<InvokeEndpointCommandOutput>;
            invokeEndpoint(args: InvokeEndpointCommandInput, cb: (err: any, data?: InvokeEndpointCommandOutput) => void): void;
            invokeEndpoint(args: InvokeEndpointCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: InvokeEndpointCommandOutput) => void): void;
            /**
                * <p>After you deploy a model into production using Amazon SageMaker hosting services,
                *             your client applications use this API to get inferences from the model hosted at
                *             the specified endpoint in an asynchronous manner.</p>
                *
                *         <p>Inference requests sent to this API are enqueued for asynchronous processing.
                *             The processing of the inference request may or may not complete before the
                *             you receive a response from this API. The response from this API will
                *             not contain the result of the inference request but contain information
                *             about where you can locate it.</p>
                *
                *         <p>Amazon SageMaker strips all <code>POST</code> headers except those supported by the API.
                *             Amazon SageMaker might add additional headers. You should not rely on the behavior
                *             of headers outside those enumerated in the request syntax.</p>
                *
                *         <p>Calls to <code>InvokeEndpointAsync</code> are authenticated by using Amazon Web Services Signature
                *             Version 4. For information, see <a href="https://docs.aws.amazon.com/https:/docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html">Authenticating Requests (Amazon Web Services Signature Version 4)</a> in the <i>Amazon S3 API
                *                 Reference</i>.</p>
                */
            invokeEndpointAsync(args: InvokeEndpointAsyncCommandInput, options?: __HttpHandlerOptions): Promise<InvokeEndpointAsyncCommandOutput>;
            invokeEndpointAsync(args: InvokeEndpointAsyncCommandInput, cb: (err: any, data?: InvokeEndpointAsyncCommandOutput) => void): void;
            invokeEndpointAsync(args: InvokeEndpointAsyncCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: InvokeEndpointAsyncCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/commands/InvokeEndpointAsyncCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { InvokeEndpointAsyncInput, InvokeEndpointAsyncOutput } from "@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/models/models_0";
    import { SageMakerRuntimeClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/SageMakerRuntimeClient";
    export interface InvokeEndpointAsyncCommandInput extends InvokeEndpointAsyncInput {
    }
    export interface InvokeEndpointAsyncCommandOutput extends InvokeEndpointAsyncOutput, __MetadataBearer {
    }
    /**
        * <p>After you deploy a model into production using Amazon SageMaker hosting services,
        *             your client applications use this API to get inferences from the model hosted at
        *             the specified endpoint in an asynchronous manner.</p>
        *
        *         <p>Inference requests sent to this API are enqueued for asynchronous processing.
        *             The processing of the inference request may or may not complete before the
        *             you receive a response from this API. The response from this API will
        *             not contain the result of the inference request but contain information
        *             about where you can locate it.</p>
        *
        *         <p>Amazon SageMaker strips all <code>POST</code> headers except those supported by the API.
        *             Amazon SageMaker might add additional headers. You should not rely on the behavior
        *             of headers outside those enumerated in the request syntax.</p>
        *
        *         <p>Calls to <code>InvokeEndpointAsync</code> are authenticated by using Amazon Web Services Signature
        *             Version 4. For information, see <a href="https://docs.aws.amazon.com/https:/docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html">Authenticating Requests (Amazon Web Services Signature Version 4)</a> in the <i>Amazon S3 API
        *                 Reference</i>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerRuntimeClient, InvokeEndpointAsyncCommand } from "@aws-sdk/client-sagemaker-runtime"; // ES Modules import
        * // const { SageMakerRuntimeClient, InvokeEndpointAsyncCommand } = require("@aws-sdk/client-sagemaker-runtime"); // CommonJS import
        * const client = new SageMakerRuntimeClient(config);
        * const command = new InvokeEndpointAsyncCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link InvokeEndpointAsyncCommandInput} for command's `input` shape.
        * @see {@link InvokeEndpointAsyncCommandOutput} for command's `response` shape.
        * @see {@link SageMakerRuntimeClientResolvedConfig | config} for SageMakerRuntimeClient's `config` shape.
        *
        */
    export class InvokeEndpointAsyncCommand extends $Command<InvokeEndpointAsyncCommandInput, InvokeEndpointAsyncCommandOutput, SageMakerRuntimeClientResolvedConfig> {
            readonly input: InvokeEndpointAsyncCommandInput;
            constructor(input: InvokeEndpointAsyncCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerRuntimeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<InvokeEndpointAsyncCommandInput, InvokeEndpointAsyncCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/commands/InvokeEndpointCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { InvokeEndpointInput, InvokeEndpointOutput } from "@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/models/models_0";
    import { SageMakerRuntimeClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/SageMakerRuntimeClient";
    export interface InvokeEndpointCommandInput extends InvokeEndpointInput {
    }
    export interface InvokeEndpointCommandOutput extends InvokeEndpointOutput, __MetadataBearer {
    }
    /**
        * <p>After you deploy a model into production using Amazon SageMaker hosting services, your
        *             client applications use this API to get inferences from the model hosted at the
        *             specified endpoint. </p>
        *         <p>For an overview of Amazon SageMaker, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html">How It Works</a>. </p>
        *         <p>Amazon SageMaker strips all POST headers except those supported by the API. Amazon SageMaker might add
        *             additional headers. You should not rely on the behavior of headers outside those
        *             enumerated in the request syntax. </p>
        *         <p>Calls to <code>InvokeEndpoint</code> are authenticated by using Amazon Web Services Signature Version
        *             4. For information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html">Authenticating
        *                 Requests (Amazon Web Services Signature Version 4)</a> in the <i>Amazon S3 API
        *                 Reference</i>.</p>
        *         <p>A customer's model containers must respond to requests within 60 seconds. The model
        *             itself can have a maximum processing time of 60 seconds before responding to
        *             invocations. If your model is going to take 50-60 seconds of processing time, the SDK
        *             socket timeout should be set to be 70 seconds.</p>
        *         <note>
        *             <p>Endpoints are scoped to an individual account, and are not public. The URL does
        *                 not contain the account ID, but Amazon SageMaker determines the account ID from the
        *                 authentication token that is supplied by the caller.</p>
        *         </note>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { SageMakerRuntimeClient, InvokeEndpointCommand } from "@aws-sdk/client-sagemaker-runtime"; // ES Modules import
        * // const { SageMakerRuntimeClient, InvokeEndpointCommand } = require("@aws-sdk/client-sagemaker-runtime"); // CommonJS import
        * const client = new SageMakerRuntimeClient(config);
        * const command = new InvokeEndpointCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link InvokeEndpointCommandInput} for command's `input` shape.
        * @see {@link InvokeEndpointCommandOutput} for command's `response` shape.
        * @see {@link SageMakerRuntimeClientResolvedConfig | config} for SageMakerRuntimeClient's `config` shape.
        *
        */
    export class InvokeEndpointCommand extends $Command<InvokeEndpointCommandInput, InvokeEndpointCommandOutput, SageMakerRuntimeClientResolvedConfig> {
            readonly input: InvokeEndpointCommandInput;
            constructor(input: InvokeEndpointCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SageMakerRuntimeClientResolvedConfig, options?: __HttpHandlerOptions): Handler<InvokeEndpointCommandInput, InvokeEndpointCommandOutput>;
    }
}

declare module '@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/SageMakerRuntimeClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { InvokeEndpointAsyncCommandInput, InvokeEndpointAsyncCommandOutput } from "@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/commands/InvokeEndpointAsyncCommand";
    import { InvokeEndpointCommandInput, InvokeEndpointCommandOutput } from "@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/commands/InvokeEndpointCommand";
    export type ServiceInputTypes = InvokeEndpointAsyncCommandInput | InvokeEndpointCommandInput;
    export type ServiceOutputTypes = InvokeEndpointAsyncCommandOutput | InvokeEndpointCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type SageMakerRuntimeClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of SageMakerRuntimeClient class constructor that set the region, credentials and other options.
        */
    export interface SageMakerRuntimeClientConfig extends SageMakerRuntimeClientConfigType {
    }
    type SageMakerRuntimeClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of SageMakerRuntimeClient class. This is resolved and normalized from the {@link SageMakerRuntimeClientConfig | constructor configuration interface}.
        */
    export interface SageMakerRuntimeClientResolvedConfig extends SageMakerRuntimeClientResolvedConfigType {
    }
    /**
        * <p> The Amazon SageMaker runtime API. </p>
        */
    export class SageMakerRuntimeClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, SageMakerRuntimeClientResolvedConfig> {
            /**
                * The resolved configuration of SageMakerRuntimeClient class. This is resolved and normalized from the {@link SageMakerRuntimeClientConfig | constructor configuration interface}.
                */
            readonly config: SageMakerRuntimeClientResolvedConfig;
            constructor(configuration: SageMakerRuntimeClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { SageMakerRuntimeServiceException as __BaseException } from "@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/models/SageMakerRuntimeServiceException";
    /**
        * <p>Your request caused an exception with an internal dependency. Contact customer support. </p>
        */
    export class InternalDependencyException extends __BaseException {
            readonly name: "InternalDependencyException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalDependencyException, __BaseException>);
    }
    /**
        * <p> An internal failure occurred. </p>
        */
    export class InternalFailure extends __BaseException {
            readonly name: "InternalFailure";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalFailure, __BaseException>);
    }
    export interface InvokeEndpointInput {
            /**
                * <p>The name of the endpoint that you specified when you created the endpoint using the
                *                 <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpoint.html">CreateEndpoint</a> API. </p>
                */
            EndpointName: string | undefined;
            /**
                * <p>Provides input data, in the format specified in the <code>ContentType</code>
                *             request header. Amazon SageMaker passes all of the data in the body to the model. </p>
                *         <p>For information about the format of the request body, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-inference.html">Common Data
                *                 Formats-Inference</a>.</p>
                */
            Body: Uint8Array | undefined;
            /**
                * <p>The MIME type of the input data in the request body.</p>
                */
            ContentType?: string;
            /**
                * <p>The desired MIME type of the inference in the response.</p>
                */
            Accept?: string;
            /**
                * <p>Provides additional information about a request for an inference submitted to a model
                *             hosted at an Amazon SageMaker endpoint. The information is an opaque value that is
                *             forwarded verbatim. You could use this value, for example, to provide an ID that you can
                *             use to track a request or to provide other metadata that a service endpoint was
                *             programmed to process. The value must consist of no more than 1024 visible US-ASCII
                *             characters as specified in <a href="https://tools.ietf.org/html/rfc7230#section-3.2.6">Section 3.3.6. Field Value
                *                 Components</a> of the Hypertext Transfer Protocol (HTTP/1.1). </p>
                *         <p>The code in your model is responsible for setting or updating any custom attributes in
                *             the response. If your code does not set this value in the response, an empty value is
                *             returned. For example, if a custom attribute represents the trace ID, your model can
                *             prepend the custom attribute with <code>Trace ID:</code> in your post-processing
                *             function.</p>
                *
                *         <p>This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python
                *             SDK.</p>
                */
            CustomAttributes?: string;
            /**
                * <p>The model to request for inference when invoking a multi-model endpoint.</p>
                */
            TargetModel?: string;
            /**
                * <p>Specify the production variant to send the inference request to when invoking an
                *             endpoint that is running two or more variants. Note that this parameter overrides the
                *             default behavior for the endpoint, which is to distribute the invocation traffic based
                *             on the variant weights.</p>
                *         <p>For information about how to use variant targeting to perform a/b testing, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html">Test models in
                *                 production</a>
                *          </p>
                */
            TargetVariant?: string;
            /**
                * <p>If the endpoint hosts multiple containers and is configured to use direct invocation,
                *             this parameter specifies the host name of the container to invoke.</p>
                */
            TargetContainerHostname?: string;
            /**
                * <p>If you provide a value, it is added to the captured data when you enable data capture
                *             on the endpoint. For information about data capture, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-data-capture.html">Capture
                *             Data</a>.</p>
                */
            InferenceId?: string;
    }
    export namespace InvokeEndpointInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InvokeEndpointInput) => any;
    }
    export interface InvokeEndpointOutput {
            /**
                * <p>Includes the inference provided by the model.</p>
                *         <p>For information about the format of the response body, see <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-inference.html">Common Data
                *                 Formats-Inference</a>.</p>
                */
            Body: Uint8Array | undefined;
            /**
                * <p>The MIME type of the inference returned in the response body.</p>
                */
            ContentType?: string;
            /**
                * <p>Identifies the production variant that was invoked.</p>
                */
            InvokedProductionVariant?: string;
            /**
                * <p>Provides additional information in the response about the inference returned by a
                *             model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is
                *             forwarded verbatim. You could use this value, for example, to return an ID received in
                *             the <code>CustomAttributes</code> header of a request or other metadata that a service
                *             endpoint was programmed to produce. The value must consist of no more than 1024 visible
                *             US-ASCII characters as specified in <a href="https://tools.ietf.org/html/rfc7230#section-3.2.6">Section 3.3.6. Field Value
                *                 Components</a> of the Hypertext Transfer Protocol (HTTP/1.1). If the customer
                *             wants the custom attribute returned, the model must set the custom attribute to be
                *             included on the way back. </p>
                *         <p>The code in your model is responsible for setting or updating any custom attributes in
                *             the response. If your code does not set this value in the response, an empty value is
                *             returned. For example, if a custom attribute represents the trace ID, your model can
                *             prepend the custom attribute with <code>Trace ID:</code> in your post-processing
                *             function.</p>
                *         <p>This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python
                *             SDK.</p>
                */
            CustomAttributes?: string;
    }
    export namespace InvokeEndpointOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InvokeEndpointOutput) => any;
    }
    /**
        * <p> Model (owned by the customer in the container) returned 4xx or 5xx error code.
        *         </p>
        */
    export class ModelError extends __BaseException {
            readonly name: "ModelError";
            readonly $fault: "client";
            Message?: string;
            /**
                * <p> Original status code. </p>
                */
            OriginalStatusCode?: number;
            /**
                * <p> Original message. </p>
                */
            OriginalMessage?: string;
            /**
                * <p> The Amazon Resource Name (ARN) of the log stream. </p>
                */
            LogStreamArn?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ModelError, __BaseException>);
    }
    /**
        * <p>Either a serverless endpoint variant's resources are still being provisioned, or a multi-model endpoint is still downloading or loading the target model. Wait and try your request again.</p>
        */
    export class ModelNotReadyException extends __BaseException {
            readonly name: "ModelNotReadyException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ModelNotReadyException, __BaseException>);
    }
    /**
        * <p> The service is unavailable. Try your call again. </p>
        */
    export class ServiceUnavailable extends __BaseException {
            readonly name: "ServiceUnavailable";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ServiceUnavailable, __BaseException>);
    }
    /**
        * <p> Inspect your request and try again. </p>
        */
    export class ValidationError extends __BaseException {
            readonly name: "ValidationError";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ValidationError, __BaseException>);
    }
    export interface InvokeEndpointAsyncInput {
            /**
                * <p>The name of the endpoint that you specified when you created the endpoint using
                *             the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html">
                *                <code>CreateEndpoint</code>
                *             </a> API.</p>
                */
            EndpointName: string | undefined;
            /**
                * <p>The MIME type of the input data in the request body.</p>
                */
            ContentType?: string;
            /**
                * <p>The desired MIME type of the inference in the response.</p>
                */
            Accept?: string;
            /**
                * <p>Provides additional information about a request for an inference submitted to
                *             a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is
                *             forwarded verbatim. You could use this value, for example, to provide an ID that you
                *             can use to track a request or to provide other metadata that a service endpoint was
                *             programmed to process. The value must consist of no more than 1024
                *             visible US-ASCII characters as specified in
                *             <a href="https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.6">Section 3.3.6.
                *                 Field Value Components</a> of the Hypertext Transfer Protocol (HTTP/1.1). </p>
                *
                *         <p>The code in your model is responsible for setting or updating any custom attributes
                *             in the response. If your code does not set this value in the response, an empty
                *             value is returned. For example, if a custom attribute represents the trace ID,
                *             your model can prepend the custom attribute with <code>Trace ID</code>: in your post-processing function. </p>
                *
                *         <p>This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK. </p>
                */
            CustomAttributes?: string;
            /**
                * <p>The identifier for the inference request. Amazon SageMaker will generate an identifier for you
                *             if none is specified. </p>
                */
            InferenceId?: string;
            /**
                * <p>The Amazon S3 URI where the inference request payload is stored.</p>
                */
            InputLocation: string | undefined;
            /**
                * <p>Maximum age in seconds a request can be in the queue before it is marked as expired.</p>
                */
            RequestTTLSeconds?: number;
    }
    export namespace InvokeEndpointAsyncInput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InvokeEndpointAsyncInput) => any;
    }
    export interface InvokeEndpointAsyncOutput {
            /**
                * <p>Identifier for an inference request. This will be the same as the <code>InferenceId</code> specified
                *             in the input. Amazon SageMaker will generate an identifier for you if you do not specify one.</p>
                */
            InferenceId?: string;
            /**
                * <p>The Amazon S3 URI where the inference response payload is stored.</p>
                */
            OutputLocation?: string;
    }
    export namespace InvokeEndpointAsyncOutput {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: InvokeEndpointAsyncOutput) => any;
    }
}

declare module '@aws-sdk/client-sagemaker-runtime/node_modules/@aws-sdk/client-sagemaker-runtime/dist-types/models/SageMakerRuntimeServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from SageMakerRuntime service.
        */
    export class SageMakerRuntimeServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

