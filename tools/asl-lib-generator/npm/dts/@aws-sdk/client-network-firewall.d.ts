// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   @aws-sdk/types
//   @aws-sdk/smithy-client
//   @aws-sdk/config-resolver
//   @aws-sdk/middleware-host-header
//   @aws-sdk/middleware-retry
//   @aws-sdk/middleware-signing
//   @aws-sdk/middleware-user-agent
//   @aws-sdk/protocol-http

declare module '@aws-sdk/client-network-firewall' {
    import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
    import { AssociateFirewallPolicyCommandInput, AssociateFirewallPolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/AssociateFirewallPolicyCommand";
    import { AssociateSubnetsCommandInput, AssociateSubnetsCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/AssociateSubnetsCommand";
    import { CreateFirewallCommandInput, CreateFirewallCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/CreateFirewallCommand";
    import { CreateFirewallPolicyCommandInput, CreateFirewallPolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/CreateFirewallPolicyCommand";
    import { CreateRuleGroupCommandInput, CreateRuleGroupCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/CreateRuleGroupCommand";
    import { DeleteFirewallCommandInput, DeleteFirewallCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DeleteFirewallCommand";
    import { DeleteFirewallPolicyCommandInput, DeleteFirewallPolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DeleteFirewallPolicyCommand";
    import { DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DeleteResourcePolicyCommand";
    import { DeleteRuleGroupCommandInput, DeleteRuleGroupCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DeleteRuleGroupCommand";
    import { DescribeFirewallCommandInput, DescribeFirewallCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeFirewallCommand";
    import { DescribeFirewallPolicyCommandInput, DescribeFirewallPolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeFirewallPolicyCommand";
    import { DescribeLoggingConfigurationCommandInput, DescribeLoggingConfigurationCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeLoggingConfigurationCommand";
    import { DescribeResourcePolicyCommandInput, DescribeResourcePolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeResourcePolicyCommand";
    import { DescribeRuleGroupCommandInput, DescribeRuleGroupCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeRuleGroupCommand";
    import { DescribeRuleGroupMetadataCommandInput, DescribeRuleGroupMetadataCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeRuleGroupMetadataCommand";
    import { DisassociateSubnetsCommandInput, DisassociateSubnetsCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DisassociateSubnetsCommand";
    import { ListFirewallPoliciesCommandInput, ListFirewallPoliciesCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/ListFirewallPoliciesCommand";
    import { ListFirewallsCommandInput, ListFirewallsCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/ListFirewallsCommand";
    import { ListRuleGroupsCommandInput, ListRuleGroupsCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/ListRuleGroupsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/ListTagsForResourceCommand";
    import { PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/PutResourcePolicyCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UntagResourceCommand";
    import { UpdateFirewallDeleteProtectionCommandInput, UpdateFirewallDeleteProtectionCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallDeleteProtectionCommand";
    import { UpdateFirewallDescriptionCommandInput, UpdateFirewallDescriptionCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallDescriptionCommand";
    import { UpdateFirewallEncryptionConfigurationCommandInput, UpdateFirewallEncryptionConfigurationCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallEncryptionConfigurationCommand";
    import { UpdateFirewallPolicyChangeProtectionCommandInput, UpdateFirewallPolicyChangeProtectionCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallPolicyChangeProtectionCommand";
    import { UpdateFirewallPolicyCommandInput, UpdateFirewallPolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallPolicyCommand";
    import { UpdateLoggingConfigurationCommandInput, UpdateLoggingConfigurationCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateLoggingConfigurationCommand";
    import { UpdateRuleGroupCommandInput, UpdateRuleGroupCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateRuleGroupCommand";
    import { UpdateSubnetChangeProtectionCommandInput, UpdateSubnetChangeProtectionCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateSubnetChangeProtectionCommand";
    import { NetworkFirewallClient } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    /**
        * <p>This is the API Reference for Network Firewall. This guide is for developers who need
        *          detailed information about the Network Firewall API actions, data types, and errors. </p>
        *          <ul>
        *             <li>
        *                <p>The REST API requires you to handle connection details, such as calculating
        *                signatures, handling request retries, and error handling. For general information
        *                about using the Amazon Web Services REST APIs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-apis.html">Amazon Web Services APIs</a>. </p>
        *                <p>To access Network Firewall using the REST API endpoint:
        *                   <code>https://network-firewall.<region>.amazonaws.com </code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>Alternatively, you can use one of the Amazon Web Services SDKs to access an API that's tailored to
        *                the programming language or platform that you're using. For more information, see
        *                <a href="http://aws.amazon.com/tools/#SDKs">Amazon Web Services SDKs</a>.</p>
        *             </li>
        *             <li>
        *                <p>For descriptions of Network Firewall features, including and step-by-step
        *                instructions on how to use them through the Network Firewall console, see the <a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/">Network Firewall Developer
        *                   Guide</a>.</p>
        *             </li>
        *          </ul>
        *          <p>Network Firewall is a stateful, managed, network firewall and intrusion detection and
        *          prevention service for Amazon Virtual Private Cloud (Amazon VPC). With Network Firewall, you can filter traffic at the
        *          perimeter of your VPC. This includes filtering traffic going to and coming from an internet
        *          gateway, NAT gateway, or over VPN or Direct Connect. Network Firewall uses rules that are compatible
        *       with Suricata, a free, open source intrusion detection system (IDS) engine.
        *       Network Firewall supports Suricata version 5.0.2. For information about Suricata,
        *           see the <a href="https://suricata-ids.org/">Suricata website</a>.</p>
        *          <p>You can use Network Firewall to monitor and protect your VPC traffic in a number of ways.
        *          The following are just a few examples: </p>
        *          <ul>
        *             <li>
        *                <p>Allow domains or IP addresses for known Amazon Web Services service endpoints, such as Amazon S3, and
        *                block all other forms of traffic.</p>
        *             </li>
        *             <li>
        *                <p>Use custom lists of known bad domains to limit the types of domain names that your
        *                applications can access.</p>
        *             </li>
        *             <li>
        *                <p>Perform deep packet inspection on traffic entering or leaving your VPC.</p>
        *             </li>
        *             <li>
        *                <p>Use stateful protocol detection to filter protocols like HTTPS, regardless of the
        *                port used.</p>
        *             </li>
        *          </ul>
        *          <p>To enable Network Firewall for your VPCs, you perform steps in both Amazon VPC and in
        *          Network Firewall. For information about using Amazon VPC, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/">Amazon VPC User Guide</a>.</p>
        *          <p>To start using Network Firewall, do the following: </p>
        *          <ol>
        *             <li>
        *                <p>(Optional) If you don't already have a VPC that you want to protect, create it in
        *                Amazon VPC. </p>
        *             </li>
        *             <li>
        *                <p>In Amazon VPC, in each Availability Zone where you want to have a firewall endpoint, create a
        *                subnet for the sole use of Network Firewall. </p>
        *             </li>
        *             <li>
        *                <p>In Network Firewall, create stateless and stateful rule groups,
        *                  to define the components of the network traffic filtering behavior that you want your firewall to have. </p>
        *             </li>
        *             <li>
        *                <p>In Network Firewall, create a firewall policy that uses your rule groups and
        *                  specifies additional default traffic filtering behavior. </p>
        *             </li>
        *             <li>
        *                <p>In Network Firewall, create a firewall and specify your new firewall policy and
        *                  VPC subnets. Network Firewall creates a firewall endpoint in each subnet that you
        *                specify, with the behavior that's defined in the firewall policy.</p>
        *             </li>
        *             <li>
        *                <p>In Amazon VPC, use ingress routing enhancements to route traffic through the new firewall
        *                endpoints.</p>
        *             </li>
        *          </ol>
        */
    export class NetworkFirewall extends NetworkFirewallClient {
            /**
                * <p>Associates a <a>FirewallPolicy</a> to a <a>Firewall</a>. </p>
                *          <p>A firewall policy defines how to monitor and manage your VPC network traffic, using a
                *          collection of inspection rule groups and other settings. Each firewall requires one
                *          firewall policy association, and you can use the same firewall policy for multiple
                *          firewalls. </p>
                */
            associateFirewallPolicy(args: AssociateFirewallPolicyCommandInput, options?: __HttpHandlerOptions): Promise<AssociateFirewallPolicyCommandOutput>;
            associateFirewallPolicy(args: AssociateFirewallPolicyCommandInput, cb: (err: any, data?: AssociateFirewallPolicyCommandOutput) => void): void;
            associateFirewallPolicy(args: AssociateFirewallPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateFirewallPolicyCommandOutput) => void): void;
            /**
                * <p>Associates the specified subnets in the Amazon VPC to the firewall. You can specify one
                *          subnet for each of the Availability Zones that the VPC spans. </p>
                *          <p>This request creates an Network Firewall firewall endpoint in each of the subnets. To
                *          enable the firewall's protections, you must also modify the VPC's route tables for each
                *          subnet's Availability Zone, to redirect the traffic that's coming into and going out of the
                *          zone through the firewall endpoint. </p>
                */
            associateSubnets(args: AssociateSubnetsCommandInput, options?: __HttpHandlerOptions): Promise<AssociateSubnetsCommandOutput>;
            associateSubnets(args: AssociateSubnetsCommandInput, cb: (err: any, data?: AssociateSubnetsCommandOutput) => void): void;
            associateSubnets(args: AssociateSubnetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociateSubnetsCommandOutput) => void): void;
            /**
                * <p>Creates an Network Firewall <a>Firewall</a> and accompanying <a>FirewallStatus</a> for a VPC. </p>
                *          <p>The firewall defines the configuration settings for an Network Firewall firewall. The settings that you can define at creation include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall Amazon Web Services resource. </p>
                *          <p>After you create a firewall, you can provide additional settings, like the logging configuration. </p>
                *          <p>To update the settings for a firewall, you use the operations that apply to the settings
                *          themselves, for example <a>UpdateLoggingConfiguration</a>, <a>AssociateSubnets</a>, and <a>UpdateFirewallDeleteProtection</a>. </p>
                *          <p>To manage a firewall's tags, use the standard Amazon Web Services resource tagging operations, <a>ListTagsForResource</a>, <a>TagResource</a>, and <a>UntagResource</a>.</p>
                *          <p>To retrieve information about firewalls, use <a>ListFirewalls</a> and <a>DescribeFirewall</a>.</p>
                */
            createFirewall(args: CreateFirewallCommandInput, options?: __HttpHandlerOptions): Promise<CreateFirewallCommandOutput>;
            createFirewall(args: CreateFirewallCommandInput, cb: (err: any, data?: CreateFirewallCommandOutput) => void): void;
            createFirewall(args: CreateFirewallCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFirewallCommandOutput) => void): void;
            /**
                * <p>Creates the firewall policy for the firewall according to the specifications. </p>
                *          <p>An Network Firewall firewall policy defines the behavior of a firewall, in a collection of
                *          stateless and stateful rule groups and other settings. You can use one firewall policy for
                *          multiple firewalls. </p>
                */
            createFirewallPolicy(args: CreateFirewallPolicyCommandInput, options?: __HttpHandlerOptions): Promise<CreateFirewallPolicyCommandOutput>;
            createFirewallPolicy(args: CreateFirewallPolicyCommandInput, cb: (err: any, data?: CreateFirewallPolicyCommandOutput) => void): void;
            createFirewallPolicy(args: CreateFirewallPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateFirewallPolicyCommandOutput) => void): void;
            /**
                * <p>Creates the specified stateless or stateful rule group, which includes the rules for
                *          network traffic inspection, a capacity setting, and tags. </p>
                *          <p>You provide your rule group specification in your request using either
                *             <code>RuleGroup</code> or <code>Rules</code>.</p>
                */
            createRuleGroup(args: CreateRuleGroupCommandInput, options?: __HttpHandlerOptions): Promise<CreateRuleGroupCommandOutput>;
            createRuleGroup(args: CreateRuleGroupCommandInput, cb: (err: any, data?: CreateRuleGroupCommandOutput) => void): void;
            createRuleGroup(args: CreateRuleGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateRuleGroupCommandOutput) => void): void;
            /**
                * <p>Deletes the specified <a>Firewall</a> and its <a>FirewallStatus</a>.
                *        This operation requires the firewall's <code>DeleteProtection</code> flag to be
                *             <code>FALSE</code>. You can't revert this operation. </p>
                *          <p>You can check whether a firewall is
                *          in use by reviewing the route tables for the Availability Zones where you have
                *          firewall subnet mappings. Retrieve the subnet mappings by calling <a>DescribeFirewall</a>.
                *          You define and update the route tables through Amazon VPC. As needed, update the route tables for the
                *          zones to remove the firewall endpoints. When the route tables no longer use the firewall endpoints,
                *          you can remove the firewall safely.</p>
                *          <p>To delete a firewall, remove the delete protection if you need to using <a>UpdateFirewallDeleteProtection</a>,
                *          then delete the firewall by calling <a>DeleteFirewall</a>. </p>
                */
            deleteFirewall(args: DeleteFirewallCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFirewallCommandOutput>;
            deleteFirewall(args: DeleteFirewallCommandInput, cb: (err: any, data?: DeleteFirewallCommandOutput) => void): void;
            deleteFirewall(args: DeleteFirewallCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFirewallCommandOutput) => void): void;
            /**
                * <p>Deletes the specified <a>FirewallPolicy</a>. </p>
                */
            deleteFirewallPolicy(args: DeleteFirewallPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteFirewallPolicyCommandOutput>;
            deleteFirewallPolicy(args: DeleteFirewallPolicyCommandInput, cb: (err: any, data?: DeleteFirewallPolicyCommandOutput) => void): void;
            deleteFirewallPolicy(args: DeleteFirewallPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteFirewallPolicyCommandOutput) => void): void;
            /**
                * <p>Deletes a resource policy that you created in a <a>PutResourcePolicy</a> request. </p>
                */
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DeleteResourcePolicyCommandOutput>;
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void): void;
            deleteResourcePolicy(args: DeleteResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Deletes the specified <a>RuleGroup</a>. </p>
                */
            deleteRuleGroup(args: DeleteRuleGroupCommandInput, options?: __HttpHandlerOptions): Promise<DeleteRuleGroupCommandOutput>;
            deleteRuleGroup(args: DeleteRuleGroupCommandInput, cb: (err: any, data?: DeleteRuleGroupCommandOutput) => void): void;
            deleteRuleGroup(args: DeleteRuleGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteRuleGroupCommandOutput) => void): void;
            /**
                * <p>Returns the data objects for the specified firewall. </p>
                */
            describeFirewall(args: DescribeFirewallCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFirewallCommandOutput>;
            describeFirewall(args: DescribeFirewallCommandInput, cb: (err: any, data?: DescribeFirewallCommandOutput) => void): void;
            describeFirewall(args: DescribeFirewallCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFirewallCommandOutput) => void): void;
            /**
                * <p>Returns the data objects for the specified firewall policy. </p>
                */
            describeFirewallPolicy(args: DescribeFirewallPolicyCommandInput, options?: __HttpHandlerOptions): Promise<DescribeFirewallPolicyCommandOutput>;
            describeFirewallPolicy(args: DescribeFirewallPolicyCommandInput, cb: (err: any, data?: DescribeFirewallPolicyCommandOutput) => void): void;
            describeFirewallPolicy(args: DescribeFirewallPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeFirewallPolicyCommandOutput) => void): void;
            /**
                * <p>Returns the logging configuration for the specified firewall. </p>
                */
            describeLoggingConfiguration(args: DescribeLoggingConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<DescribeLoggingConfigurationCommandOutput>;
            describeLoggingConfiguration(args: DescribeLoggingConfigurationCommandInput, cb: (err: any, data?: DescribeLoggingConfigurationCommandOutput) => void): void;
            describeLoggingConfiguration(args: DescribeLoggingConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeLoggingConfigurationCommandOutput) => void): void;
            /**
                * <p>Retrieves a resource policy that you created in a <a>PutResourcePolicy</a> request. </p>
                */
            describeResourcePolicy(args: DescribeResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<DescribeResourcePolicyCommandOutput>;
            describeResourcePolicy(args: DescribeResourcePolicyCommandInput, cb: (err: any, data?: DescribeResourcePolicyCommandOutput) => void): void;
            describeResourcePolicy(args: DescribeResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Returns the data objects for the specified rule group. </p>
                */
            describeRuleGroup(args: DescribeRuleGroupCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRuleGroupCommandOutput>;
            describeRuleGroup(args: DescribeRuleGroupCommandInput, cb: (err: any, data?: DescribeRuleGroupCommandOutput) => void): void;
            describeRuleGroup(args: DescribeRuleGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRuleGroupCommandOutput) => void): void;
            /**
                * <p>High-level information about a rule group, returned by operations like create and describe.
                *          You can use the information provided in the metadata to retrieve and manage a rule group.
                *          You can retrieve all objects for a rule group by calling <a>DescribeRuleGroup</a>.
                *       </p>
                */
            describeRuleGroupMetadata(args: DescribeRuleGroupMetadataCommandInput, options?: __HttpHandlerOptions): Promise<DescribeRuleGroupMetadataCommandOutput>;
            describeRuleGroupMetadata(args: DescribeRuleGroupMetadataCommandInput, cb: (err: any, data?: DescribeRuleGroupMetadataCommandOutput) => void): void;
            describeRuleGroupMetadata(args: DescribeRuleGroupMetadataCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeRuleGroupMetadataCommandOutput) => void): void;
            /**
                * <p>Removes the specified subnet associations from the firewall. This removes the
                *           firewall endpoints from the subnets and removes any network filtering protections that the endpoints
                *           were providing.
                *       </p>
                */
            disassociateSubnets(args: DisassociateSubnetsCommandInput, options?: __HttpHandlerOptions): Promise<DisassociateSubnetsCommandOutput>;
            disassociateSubnets(args: DisassociateSubnetsCommandInput, cb: (err: any, data?: DisassociateSubnetsCommandOutput) => void): void;
            disassociateSubnets(args: DisassociateSubnetsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DisassociateSubnetsCommandOutput) => void): void;
            /**
                * <p>Retrieves the metadata for the firewall policies that you have defined. Depending on
                *          your setting for max results and the number of firewall policies, a single call might not
                *          return the full list. </p>
                */
            listFirewallPolicies(args: ListFirewallPoliciesCommandInput, options?: __HttpHandlerOptions): Promise<ListFirewallPoliciesCommandOutput>;
            listFirewallPolicies(args: ListFirewallPoliciesCommandInput, cb: (err: any, data?: ListFirewallPoliciesCommandOutput) => void): void;
            listFirewallPolicies(args: ListFirewallPoliciesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFirewallPoliciesCommandOutput) => void): void;
            /**
                * <p>Retrieves the metadata for the firewalls that you have defined. If you provide VPC
                *          identifiers in your request, this returns only the firewalls for those VPCs.</p>
                *          <p>Depending on your setting for max results and the number of firewalls, a single call
                *          might not return the full list. </p>
                */
            listFirewalls(args: ListFirewallsCommandInput, options?: __HttpHandlerOptions): Promise<ListFirewallsCommandOutput>;
            listFirewalls(args: ListFirewallsCommandInput, cb: (err: any, data?: ListFirewallsCommandOutput) => void): void;
            listFirewalls(args: ListFirewallsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListFirewallsCommandOutput) => void): void;
            /**
                * <p>Retrieves the metadata for the rule groups that you have defined. Depending on your
                *          setting for max results and the number of rule groups, a single call might not return the
                *          full list. </p>
                */
            listRuleGroups(args: ListRuleGroupsCommandInput, options?: __HttpHandlerOptions): Promise<ListRuleGroupsCommandOutput>;
            listRuleGroups(args: ListRuleGroupsCommandInput, cb: (err: any, data?: ListRuleGroupsCommandOutput) => void): void;
            listRuleGroups(args: ListRuleGroupsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListRuleGroupsCommandOutput) => void): void;
            /**
                * <p>Retrieves the tags associated with the specified resource. Tags are key:value pairs that
                *          you can use to categorize and manage your resources, for purposes like billing. For
                *          example, you might set the tag key to "customer" and the value to the customer name or ID.
                *          You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a
                *          resource.</p>
                *          <p>You can tag the Amazon Web Services resources that you manage through Network Firewall: firewalls, firewall
                *          policies, and rule groups. </p>
                */
            listTagsForResource(args: ListTagsForResourceCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsForResourceCommandOutput>;
            listTagsForResource(args: ListTagsForResourceCommandInput, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            listTagsForResource(args: ListTagsForResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsForResourceCommandOutput) => void): void;
            /**
                * <p>Creates or updates an IAM policy for your rule group or firewall policy. Use this to share rule groups and firewall policies between accounts. This operation works in conjunction with the Amazon Web Services Resource Access Manager (RAM) service
                *            to manage resource sharing for Network Firewall. </p>
                *          <p>Use this operation to create or update a resource policy for your rule group or firewall policy. In the policy, you specify the accounts that you want to share the resource with and the operations that you want the accounts to be able to perform. </p>
                *          <p>When you add an account in the resource policy, you then run the following Resource Access Manager (RAM) operations to access and accept the shared rule group or firewall policy. </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_GetResourceShareInvitations.html">GetResourceShareInvitations</a> - Returns the Amazon Resource Names (ARNs) of the resource share invitations.  </p>
                *            </li>
                *             <li>
                *                <p>
                *                   <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_AcceptResourceShareInvitation.html">AcceptResourceShareInvitation</a> - Accepts the share invitation for a specified resource share. </p>
                *            </li>
                *          </ul>
                *          <p>For additional information about resource sharing using RAM, see <a href="https://docs.aws.amazon.com/ram/latest/userguide/what-is.html">Resource Access Manager User Guide</a>.</p>
                */
            putResourcePolicy(args: PutResourcePolicyCommandInput, options?: __HttpHandlerOptions): Promise<PutResourcePolicyCommandOutput>;
            putResourcePolicy(args: PutResourcePolicyCommandInput, cb: (err: any, data?: PutResourcePolicyCommandOutput) => void): void;
            putResourcePolicy(args: PutResourcePolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PutResourcePolicyCommandOutput) => void): void;
            /**
                * <p>Adds the specified tags to the specified resource. Tags are key:value pairs that you can
                *          use to categorize and manage your resources, for purposes like billing. For example, you
                *          might set the tag key to "customer" and the value to the customer name or ID. You can
                *          specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.</p>
                *          <p>You can tag the Amazon Web Services resources that you manage through Network Firewall: firewalls, firewall
                *          policies, and rule groups. </p>
                */
            tagResource(args: TagResourceCommandInput, options?: __HttpHandlerOptions): Promise<TagResourceCommandOutput>;
            tagResource(args: TagResourceCommandInput, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            tagResource(args: TagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: TagResourceCommandOutput) => void): void;
            /**
                * <p>Removes the tags with the specified keys from the specified resource. Tags are key:value
                *          pairs that you can use to categorize and manage your resources, for purposes like billing.
                *          For example, you might set the tag key to "customer" and the value to the customer name or
                *          ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a
                *          resource.</p>
                *          <p>You can manage tags for the Amazon Web Services resources that you manage through Network Firewall:
                *          firewalls, firewall policies, and rule groups. </p>
                */
            untagResource(args: UntagResourceCommandInput, options?: __HttpHandlerOptions): Promise<UntagResourceCommandOutput>;
            untagResource(args: UntagResourceCommandInput, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            untagResource(args: UntagResourceCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UntagResourceCommandOutput) => void): void;
            /**
                * <p>Modifies the flag, <code>DeleteProtection</code>, which indicates whether it is possible
                *          to delete the firewall. If the flag is set to <code>TRUE</code>, the firewall is protected
                *          against deletion. This setting helps protect against accidentally deleting a firewall
                *          that's in use. </p>
                */
            updateFirewallDeleteProtection(args: UpdateFirewallDeleteProtectionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFirewallDeleteProtectionCommandOutput>;
            updateFirewallDeleteProtection(args: UpdateFirewallDeleteProtectionCommandInput, cb: (err: any, data?: UpdateFirewallDeleteProtectionCommandOutput) => void): void;
            updateFirewallDeleteProtection(args: UpdateFirewallDeleteProtectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFirewallDeleteProtectionCommandOutput) => void): void;
            /**
                * <p>Modifies the description for the specified firewall. Use the description to help you
                *          identify the firewall when you're working with it. </p>
                */
            updateFirewallDescription(args: UpdateFirewallDescriptionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFirewallDescriptionCommandOutput>;
            updateFirewallDescription(args: UpdateFirewallDescriptionCommandInput, cb: (err: any, data?: UpdateFirewallDescriptionCommandOutput) => void): void;
            updateFirewallDescription(args: UpdateFirewallDescriptionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFirewallDescriptionCommandOutput) => void): void;
            /**
                * <p>A complex type that contains settings for encryption of your firewall resources.</p>
                */
            updateFirewallEncryptionConfiguration(args: UpdateFirewallEncryptionConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFirewallEncryptionConfigurationCommandOutput>;
            updateFirewallEncryptionConfiguration(args: UpdateFirewallEncryptionConfigurationCommandInput, cb: (err: any, data?: UpdateFirewallEncryptionConfigurationCommandOutput) => void): void;
            updateFirewallEncryptionConfiguration(args: UpdateFirewallEncryptionConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFirewallEncryptionConfigurationCommandOutput) => void): void;
            /**
                * <p>Updates the properties of the specified firewall policy.</p>
                */
            updateFirewallPolicy(args: UpdateFirewallPolicyCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFirewallPolicyCommandOutput>;
            updateFirewallPolicy(args: UpdateFirewallPolicyCommandInput, cb: (err: any, data?: UpdateFirewallPolicyCommandOutput) => void): void;
            updateFirewallPolicy(args: UpdateFirewallPolicyCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFirewallPolicyCommandOutput) => void): void;
            /**
                * <p>Modifies the flag, <code>ChangeProtection</code>, which indicates whether it
                *          is possible to change the firewall. If the flag is set to <code>TRUE</code>, the firewall is protected
                *          from changes. This setting helps protect against accidentally changing a firewall that's in use.</p>
                */
            updateFirewallPolicyChangeProtection(args: UpdateFirewallPolicyChangeProtectionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateFirewallPolicyChangeProtectionCommandOutput>;
            updateFirewallPolicyChangeProtection(args: UpdateFirewallPolicyChangeProtectionCommandInput, cb: (err: any, data?: UpdateFirewallPolicyChangeProtectionCommandOutput) => void): void;
            updateFirewallPolicyChangeProtection(args: UpdateFirewallPolicyChangeProtectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateFirewallPolicyChangeProtectionCommandOutput) => void): void;
            /**
                * <p>Sets the logging configuration for the specified firewall. </p>
                *          <p>To change the logging configuration, retrieve the <a>LoggingConfiguration</a> by calling <a>DescribeLoggingConfiguration</a>, then change it and provide
                *          the modified object to this update call. You must change the logging configuration one
                *             <a>LogDestinationConfig</a> at a time inside the retrieved <a>LoggingConfiguration</a> object. </p>
                *          <p>You can perform only one of the following actions in any call to
                *             <code>UpdateLoggingConfiguration</code>: </p>
                *          <ul>
                *             <li>
                *                <p>Create a new log destination object by adding a single
                *                   <code>LogDestinationConfig</code> array element to
                *                   <code>LogDestinationConfigs</code>.</p>
                *             </li>
                *             <li>
                *                <p>Delete a log destination object by removing a single
                *                   <code>LogDestinationConfig</code> array element from
                *                   <code>LogDestinationConfigs</code>.</p>
                *             </li>
                *             <li>
                *                <p>Change the <code>LogDestination</code> setting in a single
                *                   <code>LogDestinationConfig</code> array element.</p>
                *             </li>
                *          </ul>
                *          <p>You can't change the <code>LogDestinationType</code> or <code>LogType</code> in a
                *             <code>LogDestinationConfig</code>. To change these settings, delete the existing
                *             <code>LogDestinationConfig</code> object and create a new one, using two separate calls
                *          to this update operation.</p>
                */
            updateLoggingConfiguration(args: UpdateLoggingConfigurationCommandInput, options?: __HttpHandlerOptions): Promise<UpdateLoggingConfigurationCommandOutput>;
            updateLoggingConfiguration(args: UpdateLoggingConfigurationCommandInput, cb: (err: any, data?: UpdateLoggingConfigurationCommandOutput) => void): void;
            updateLoggingConfiguration(args: UpdateLoggingConfigurationCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateLoggingConfigurationCommandOutput) => void): void;
            /**
                * <p>Updates the rule settings for the specified rule group. You use a rule group by
                *          reference in one or more firewall policies. When you modify a rule group, you modify all
                *          firewall policies that use the rule group. </p>
                *          <p>To update a rule group, first call <a>DescribeRuleGroup</a> to retrieve the
                *          current <a>RuleGroup</a> object, update the object as needed, and then provide
                *          the updated object to this call. </p>
                */
            updateRuleGroup(args: UpdateRuleGroupCommandInput, options?: __HttpHandlerOptions): Promise<UpdateRuleGroupCommandOutput>;
            updateRuleGroup(args: UpdateRuleGroupCommandInput, cb: (err: any, data?: UpdateRuleGroupCommandOutput) => void): void;
            updateRuleGroup(args: UpdateRuleGroupCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateRuleGroupCommandOutput) => void): void;
            /**
                * <p></p>
                */
            updateSubnetChangeProtection(args: UpdateSubnetChangeProtectionCommandInput, options?: __HttpHandlerOptions): Promise<UpdateSubnetChangeProtectionCommandOutput>;
            updateSubnetChangeProtection(args: UpdateSubnetChangeProtectionCommandInput, cb: (err: any, data?: UpdateSubnetChangeProtectionCommandOutput) => void): void;
            updateSubnetChangeProtection(args: UpdateSubnetChangeProtectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateSubnetChangeProtectionCommandOutput) => void): void;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/AssociateFirewallPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateFirewallPolicyRequest, AssociateFirewallPolicyResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface AssociateFirewallPolicyCommandInput extends AssociateFirewallPolicyRequest {
    }
    export interface AssociateFirewallPolicyCommandOutput extends AssociateFirewallPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Associates a <a>FirewallPolicy</a> to a <a>Firewall</a>. </p>
        *          <p>A firewall policy defines how to monitor and manage your VPC network traffic, using a
        *          collection of inspection rule groups and other settings. Each firewall requires one
        *          firewall policy association, and you can use the same firewall policy for multiple
        *          firewalls. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, AssociateFirewallPolicyCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, AssociateFirewallPolicyCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new AssociateFirewallPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateFirewallPolicyCommandInput} for command's `input` shape.
        * @see {@link AssociateFirewallPolicyCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class AssociateFirewallPolicyCommand extends $Command<AssociateFirewallPolicyCommandInput, AssociateFirewallPolicyCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: AssociateFirewallPolicyCommandInput;
            constructor(input: AssociateFirewallPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateFirewallPolicyCommandInput, AssociateFirewallPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/AssociateSubnetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { AssociateSubnetsRequest, AssociateSubnetsResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface AssociateSubnetsCommandInput extends AssociateSubnetsRequest {
    }
    export interface AssociateSubnetsCommandOutput extends AssociateSubnetsResponse, __MetadataBearer {
    }
    /**
        * <p>Associates the specified subnets in the Amazon VPC to the firewall. You can specify one
        *          subnet for each of the Availability Zones that the VPC spans. </p>
        *          <p>This request creates an Network Firewall firewall endpoint in each of the subnets. To
        *          enable the firewall's protections, you must also modify the VPC's route tables for each
        *          subnet's Availability Zone, to redirect the traffic that's coming into and going out of the
        *          zone through the firewall endpoint. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, AssociateSubnetsCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, AssociateSubnetsCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new AssociateSubnetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link AssociateSubnetsCommandInput} for command's `input` shape.
        * @see {@link AssociateSubnetsCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class AssociateSubnetsCommand extends $Command<AssociateSubnetsCommandInput, AssociateSubnetsCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: AssociateSubnetsCommandInput;
            constructor(input: AssociateSubnetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<AssociateSubnetsCommandInput, AssociateSubnetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/CreateFirewallCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateFirewallRequest, CreateFirewallResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface CreateFirewallCommandInput extends CreateFirewallRequest {
    }
    export interface CreateFirewallCommandOutput extends CreateFirewallResponse, __MetadataBearer {
    }
    /**
        * <p>Creates an Network Firewall <a>Firewall</a> and accompanying <a>FirewallStatus</a> for a VPC. </p>
        *          <p>The firewall defines the configuration settings for an Network Firewall firewall. The settings that you can define at creation include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall Amazon Web Services resource. </p>
        *          <p>After you create a firewall, you can provide additional settings, like the logging configuration. </p>
        *          <p>To update the settings for a firewall, you use the operations that apply to the settings
        *          themselves, for example <a>UpdateLoggingConfiguration</a>, <a>AssociateSubnets</a>, and <a>UpdateFirewallDeleteProtection</a>. </p>
        *          <p>To manage a firewall's tags, use the standard Amazon Web Services resource tagging operations, <a>ListTagsForResource</a>, <a>TagResource</a>, and <a>UntagResource</a>.</p>
        *          <p>To retrieve information about firewalls, use <a>ListFirewalls</a> and <a>DescribeFirewall</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, CreateFirewallCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, CreateFirewallCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new CreateFirewallCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFirewallCommandInput} for command's `input` shape.
        * @see {@link CreateFirewallCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class CreateFirewallCommand extends $Command<CreateFirewallCommandInput, CreateFirewallCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: CreateFirewallCommandInput;
            constructor(input: CreateFirewallCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFirewallCommandInput, CreateFirewallCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/CreateFirewallPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateFirewallPolicyRequest, CreateFirewallPolicyResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface CreateFirewallPolicyCommandInput extends CreateFirewallPolicyRequest {
    }
    export interface CreateFirewallPolicyCommandOutput extends CreateFirewallPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Creates the firewall policy for the firewall according to the specifications. </p>
        *          <p>An Network Firewall firewall policy defines the behavior of a firewall, in a collection of
        *          stateless and stateful rule groups and other settings. You can use one firewall policy for
        *          multiple firewalls. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, CreateFirewallPolicyCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, CreateFirewallPolicyCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new CreateFirewallPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateFirewallPolicyCommandInput} for command's `input` shape.
        * @see {@link CreateFirewallPolicyCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class CreateFirewallPolicyCommand extends $Command<CreateFirewallPolicyCommandInput, CreateFirewallPolicyCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: CreateFirewallPolicyCommandInput;
            constructor(input: CreateFirewallPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateFirewallPolicyCommandInput, CreateFirewallPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/CreateRuleGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { CreateRuleGroupRequest, CreateRuleGroupResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface CreateRuleGroupCommandInput extends CreateRuleGroupRequest {
    }
    export interface CreateRuleGroupCommandOutput extends CreateRuleGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Creates the specified stateless or stateful rule group, which includes the rules for
        *          network traffic inspection, a capacity setting, and tags. </p>
        *          <p>You provide your rule group specification in your request using either
        *             <code>RuleGroup</code> or <code>Rules</code>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, CreateRuleGroupCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, CreateRuleGroupCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new CreateRuleGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link CreateRuleGroupCommandInput} for command's `input` shape.
        * @see {@link CreateRuleGroupCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class CreateRuleGroupCommand extends $Command<CreateRuleGroupCommandInput, CreateRuleGroupCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: CreateRuleGroupCommandInput;
            constructor(input: CreateRuleGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateRuleGroupCommandInput, CreateRuleGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DeleteFirewallCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteFirewallRequest, DeleteFirewallResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface DeleteFirewallCommandInput extends DeleteFirewallRequest {
    }
    export interface DeleteFirewallCommandOutput extends DeleteFirewallResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified <a>Firewall</a> and its <a>FirewallStatus</a>.
        *        This operation requires the firewall's <code>DeleteProtection</code> flag to be
        *             <code>FALSE</code>. You can't revert this operation. </p>
        *          <p>You can check whether a firewall is
        *          in use by reviewing the route tables for the Availability Zones where you have
        *          firewall subnet mappings. Retrieve the subnet mappings by calling <a>DescribeFirewall</a>.
        *          You define and update the route tables through Amazon VPC. As needed, update the route tables for the
        *          zones to remove the firewall endpoints. When the route tables no longer use the firewall endpoints,
        *          you can remove the firewall safely.</p>
        *          <p>To delete a firewall, remove the delete protection if you need to using <a>UpdateFirewallDeleteProtection</a>,
        *          then delete the firewall by calling <a>DeleteFirewall</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, DeleteFirewallCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, DeleteFirewallCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new DeleteFirewallCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFirewallCommandInput} for command's `input` shape.
        * @see {@link DeleteFirewallCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class DeleteFirewallCommand extends $Command<DeleteFirewallCommandInput, DeleteFirewallCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: DeleteFirewallCommandInput;
            constructor(input: DeleteFirewallCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFirewallCommandInput, DeleteFirewallCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DeleteFirewallPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteFirewallPolicyRequest, DeleteFirewallPolicyResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface DeleteFirewallPolicyCommandInput extends DeleteFirewallPolicyRequest {
    }
    export interface DeleteFirewallPolicyCommandOutput extends DeleteFirewallPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified <a>FirewallPolicy</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, DeleteFirewallPolicyCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, DeleteFirewallPolicyCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new DeleteFirewallPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteFirewallPolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteFirewallPolicyCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class DeleteFirewallPolicyCommand extends $Command<DeleteFirewallPolicyCommandInput, DeleteFirewallPolicyCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: DeleteFirewallPolicyCommandInput;
            constructor(input: DeleteFirewallPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteFirewallPolicyCommandInput, DeleteFirewallPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DeleteResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteResourcePolicyRequest, DeleteResourcePolicyResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface DeleteResourcePolicyCommandInput extends DeleteResourcePolicyRequest {
    }
    export interface DeleteResourcePolicyCommandOutput extends DeleteResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes a resource policy that you created in a <a>PutResourcePolicy</a> request. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, DeleteResourcePolicyCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, DeleteResourcePolicyCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new DeleteResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link DeleteResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class DeleteResourcePolicyCommand extends $Command<DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: DeleteResourcePolicyCommandInput;
            constructor(input: DeleteResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DeleteRuleGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DeleteRuleGroupRequest, DeleteRuleGroupResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface DeleteRuleGroupCommandInput extends DeleteRuleGroupRequest {
    }
    export interface DeleteRuleGroupCommandOutput extends DeleteRuleGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Deletes the specified <a>RuleGroup</a>. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, DeleteRuleGroupCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, DeleteRuleGroupCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new DeleteRuleGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DeleteRuleGroupCommandInput} for command's `input` shape.
        * @see {@link DeleteRuleGroupCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class DeleteRuleGroupCommand extends $Command<DeleteRuleGroupCommandInput, DeleteRuleGroupCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: DeleteRuleGroupCommandInput;
            constructor(input: DeleteRuleGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DeleteRuleGroupCommandInput, DeleteRuleGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeFirewallCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeFirewallRequest, DescribeFirewallResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface DescribeFirewallCommandInput extends DescribeFirewallRequest {
    }
    export interface DescribeFirewallCommandOutput extends DescribeFirewallResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the data objects for the specified firewall. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, DescribeFirewallCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, DescribeFirewallCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new DescribeFirewallCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFirewallCommandInput} for command's `input` shape.
        * @see {@link DescribeFirewallCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class DescribeFirewallCommand extends $Command<DescribeFirewallCommandInput, DescribeFirewallCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: DescribeFirewallCommandInput;
            constructor(input: DescribeFirewallCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFirewallCommandInput, DescribeFirewallCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeFirewallPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeFirewallPolicyRequest, DescribeFirewallPolicyResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface DescribeFirewallPolicyCommandInput extends DescribeFirewallPolicyRequest {
    }
    export interface DescribeFirewallPolicyCommandOutput extends DescribeFirewallPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the data objects for the specified firewall policy. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, DescribeFirewallPolicyCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, DescribeFirewallPolicyCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new DescribeFirewallPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeFirewallPolicyCommandInput} for command's `input` shape.
        * @see {@link DescribeFirewallPolicyCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class DescribeFirewallPolicyCommand extends $Command<DescribeFirewallPolicyCommandInput, DescribeFirewallPolicyCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: DescribeFirewallPolicyCommandInput;
            constructor(input: DescribeFirewallPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeFirewallPolicyCommandInput, DescribeFirewallPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeLoggingConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeLoggingConfigurationRequest, DescribeLoggingConfigurationResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface DescribeLoggingConfigurationCommandInput extends DescribeLoggingConfigurationRequest {
    }
    export interface DescribeLoggingConfigurationCommandOutput extends DescribeLoggingConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the logging configuration for the specified firewall. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, DescribeLoggingConfigurationCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, DescribeLoggingConfigurationCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new DescribeLoggingConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeLoggingConfigurationCommandInput} for command's `input` shape.
        * @see {@link DescribeLoggingConfigurationCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class DescribeLoggingConfigurationCommand extends $Command<DescribeLoggingConfigurationCommandInput, DescribeLoggingConfigurationCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: DescribeLoggingConfigurationCommandInput;
            constructor(input: DescribeLoggingConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeLoggingConfigurationCommandInput, DescribeLoggingConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeResourcePolicyRequest, DescribeResourcePolicyResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface DescribeResourcePolicyCommandInput extends DescribeResourcePolicyRequest {
    }
    export interface DescribeResourcePolicyCommandOutput extends DescribeResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves a resource policy that you created in a <a>PutResourcePolicy</a> request. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, DescribeResourcePolicyCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, DescribeResourcePolicyCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new DescribeResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link DescribeResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class DescribeResourcePolicyCommand extends $Command<DescribeResourcePolicyCommandInput, DescribeResourcePolicyCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: DescribeResourcePolicyCommandInput;
            constructor(input: DescribeResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeResourcePolicyCommandInput, DescribeResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeRuleGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeRuleGroupRequest, DescribeRuleGroupResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface DescribeRuleGroupCommandInput extends DescribeRuleGroupRequest {
    }
    export interface DescribeRuleGroupCommandOutput extends DescribeRuleGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Returns the data objects for the specified rule group. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, DescribeRuleGroupCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, DescribeRuleGroupCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new DescribeRuleGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRuleGroupCommandInput} for command's `input` shape.
        * @see {@link DescribeRuleGroupCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class DescribeRuleGroupCommand extends $Command<DescribeRuleGroupCommandInput, DescribeRuleGroupCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: DescribeRuleGroupCommandInput;
            constructor(input: DescribeRuleGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRuleGroupCommandInput, DescribeRuleGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeRuleGroupMetadataCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DescribeRuleGroupMetadataRequest, DescribeRuleGroupMetadataResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface DescribeRuleGroupMetadataCommandInput extends DescribeRuleGroupMetadataRequest {
    }
    export interface DescribeRuleGroupMetadataCommandOutput extends DescribeRuleGroupMetadataResponse, __MetadataBearer {
    }
    /**
        * <p>High-level information about a rule group, returned by operations like create and describe.
        *          You can use the information provided in the metadata to retrieve and manage a rule group.
        *          You can retrieve all objects for a rule group by calling <a>DescribeRuleGroup</a>.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, DescribeRuleGroupMetadataCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, DescribeRuleGroupMetadataCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new DescribeRuleGroupMetadataCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DescribeRuleGroupMetadataCommandInput} for command's `input` shape.
        * @see {@link DescribeRuleGroupMetadataCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class DescribeRuleGroupMetadataCommand extends $Command<DescribeRuleGroupMetadataCommandInput, DescribeRuleGroupMetadataCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: DescribeRuleGroupMetadataCommandInput;
            constructor(input: DescribeRuleGroupMetadataCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DescribeRuleGroupMetadataCommandInput, DescribeRuleGroupMetadataCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DisassociateSubnetsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { DisassociateSubnetsRequest, DisassociateSubnetsResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface DisassociateSubnetsCommandInput extends DisassociateSubnetsRequest {
    }
    export interface DisassociateSubnetsCommandOutput extends DisassociateSubnetsResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the specified subnet associations from the firewall. This removes the
        *           firewall endpoints from the subnets and removes any network filtering protections that the endpoints
        *           were providing.
        *       </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, DisassociateSubnetsCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, DisassociateSubnetsCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new DisassociateSubnetsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link DisassociateSubnetsCommandInput} for command's `input` shape.
        * @see {@link DisassociateSubnetsCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class DisassociateSubnetsCommand extends $Command<DisassociateSubnetsCommandInput, DisassociateSubnetsCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: DisassociateSubnetsCommandInput;
            constructor(input: DisassociateSubnetsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<DisassociateSubnetsCommandInput, DisassociateSubnetsCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/ListFirewallPoliciesCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListFirewallPoliciesRequest, ListFirewallPoliciesResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface ListFirewallPoliciesCommandInput extends ListFirewallPoliciesRequest {
    }
    export interface ListFirewallPoliciesCommandOutput extends ListFirewallPoliciesResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the metadata for the firewall policies that you have defined. Depending on
        *          your setting for max results and the number of firewall policies, a single call might not
        *          return the full list. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, ListFirewallPoliciesCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, ListFirewallPoliciesCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new ListFirewallPoliciesCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFirewallPoliciesCommandInput} for command's `input` shape.
        * @see {@link ListFirewallPoliciesCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class ListFirewallPoliciesCommand extends $Command<ListFirewallPoliciesCommandInput, ListFirewallPoliciesCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: ListFirewallPoliciesCommandInput;
            constructor(input: ListFirewallPoliciesCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFirewallPoliciesCommandInput, ListFirewallPoliciesCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/ListFirewallsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListFirewallsRequest, ListFirewallsResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface ListFirewallsCommandInput extends ListFirewallsRequest {
    }
    export interface ListFirewallsCommandOutput extends ListFirewallsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the metadata for the firewalls that you have defined. If you provide VPC
        *          identifiers in your request, this returns only the firewalls for those VPCs.</p>
        *          <p>Depending on your setting for max results and the number of firewalls, a single call
        *          might not return the full list. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, ListFirewallsCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, ListFirewallsCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new ListFirewallsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListFirewallsCommandInput} for command's `input` shape.
        * @see {@link ListFirewallsCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class ListFirewallsCommand extends $Command<ListFirewallsCommandInput, ListFirewallsCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: ListFirewallsCommandInput;
            constructor(input: ListFirewallsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListFirewallsCommandInput, ListFirewallsCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/ListRuleGroupsCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListRuleGroupsRequest, ListRuleGroupsResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface ListRuleGroupsCommandInput extends ListRuleGroupsRequest {
    }
    export interface ListRuleGroupsCommandOutput extends ListRuleGroupsResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the metadata for the rule groups that you have defined. Depending on your
        *          setting for max results and the number of rule groups, a single call might not return the
        *          full list. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, ListRuleGroupsCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, ListRuleGroupsCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new ListRuleGroupsCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListRuleGroupsCommandInput} for command's `input` shape.
        * @see {@link ListRuleGroupsCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class ListRuleGroupsCommand extends $Command<ListRuleGroupsCommandInput, ListRuleGroupsCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: ListRuleGroupsCommandInput;
            constructor(input: ListRuleGroupsCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListRuleGroupsCommandInput, ListRuleGroupsCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/ListTagsForResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { ListTagsForResourceRequest, ListTagsForResourceResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface ListTagsForResourceCommandInput extends ListTagsForResourceRequest {
    }
    export interface ListTagsForResourceCommandOutput extends ListTagsForResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Retrieves the tags associated with the specified resource. Tags are key:value pairs that
        *          you can use to categorize and manage your resources, for purposes like billing. For
        *          example, you might set the tag key to "customer" and the value to the customer name or ID.
        *          You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a
        *          resource.</p>
        *          <p>You can tag the Amazon Web Services resources that you manage through Network Firewall: firewalls, firewall
        *          policies, and rule groups. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, ListTagsForResourceCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, ListTagsForResourceCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new ListTagsForResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link ListTagsForResourceCommandInput} for command's `input` shape.
        * @see {@link ListTagsForResourceCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class ListTagsForResourceCommand extends $Command<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: ListTagsForResourceCommandInput;
            constructor(input: ListTagsForResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/PutResourcePolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { PutResourcePolicyRequest, PutResourcePolicyResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface PutResourcePolicyCommandInput extends PutResourcePolicyRequest {
    }
    export interface PutResourcePolicyCommandOutput extends PutResourcePolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Creates or updates an IAM policy for your rule group or firewall policy. Use this to share rule groups and firewall policies between accounts. This operation works in conjunction with the Amazon Web Services Resource Access Manager (RAM) service
        *            to manage resource sharing for Network Firewall. </p>
        *          <p>Use this operation to create or update a resource policy for your rule group or firewall policy. In the policy, you specify the accounts that you want to share the resource with and the operations that you want the accounts to be able to perform. </p>
        *          <p>When you add an account in the resource policy, you then run the following Resource Access Manager (RAM) operations to access and accept the shared rule group or firewall policy. </p>
        *          <ul>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_GetResourceShareInvitations.html">GetResourceShareInvitations</a> - Returns the Amazon Resource Names (ARNs) of the resource share invitations.  </p>
        *            </li>
        *             <li>
        *                <p>
        *                   <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_AcceptResourceShareInvitation.html">AcceptResourceShareInvitation</a> - Accepts the share invitation for a specified resource share. </p>
        *            </li>
        *          </ul>
        *          <p>For additional information about resource sharing using RAM, see <a href="https://docs.aws.amazon.com/ram/latest/userguide/what-is.html">Resource Access Manager User Guide</a>.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, PutResourcePolicyCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, PutResourcePolicyCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new PutResourcePolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link PutResourcePolicyCommandInput} for command's `input` shape.
        * @see {@link PutResourcePolicyCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class PutResourcePolicyCommand extends $Command<PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: PutResourcePolicyCommandInput;
            constructor(input: PutResourcePolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/TagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { TagResourceRequest, TagResourceResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface TagResourceCommandInput extends TagResourceRequest {
    }
    export interface TagResourceCommandOutput extends TagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Adds the specified tags to the specified resource. Tags are key:value pairs that you can
        *          use to categorize and manage your resources, for purposes like billing. For example, you
        *          might set the tag key to "customer" and the value to the customer name or ID. You can
        *          specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a resource.</p>
        *          <p>You can tag the Amazon Web Services resources that you manage through Network Firewall: firewalls, firewall
        *          policies, and rule groups. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, TagResourceCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, TagResourceCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new TagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link TagResourceCommandInput} for command's `input` shape.
        * @see {@link TagResourceCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: TagResourceCommandInput;
            constructor(input: TagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UntagResourceCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UntagResourceRequest, UntagResourceResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface UntagResourceCommandInput extends UntagResourceRequest {
    }
    export interface UntagResourceCommandOutput extends UntagResourceResponse, __MetadataBearer {
    }
    /**
        * <p>Removes the tags with the specified keys from the specified resource. Tags are key:value
        *          pairs that you can use to categorize and manage your resources, for purposes like billing.
        *          For example, you might set the tag key to "customer" and the value to the customer name or
        *          ID. You can specify one or more tags to add to each Amazon Web Services resource, up to 50 tags for a
        *          resource.</p>
        *          <p>You can manage tags for the Amazon Web Services resources that you manage through Network Firewall:
        *          firewalls, firewall policies, and rule groups. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, UntagResourceCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, UntagResourceCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new UntagResourceCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UntagResourceCommandInput} for command's `input` shape.
        * @see {@link UntagResourceCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class UntagResourceCommand extends $Command<UntagResourceCommandInput, UntagResourceCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: UntagResourceCommandInput;
            constructor(input: UntagResourceCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UntagResourceCommandInput, UntagResourceCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallDeleteProtectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateFirewallDeleteProtectionRequest, UpdateFirewallDeleteProtectionResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface UpdateFirewallDeleteProtectionCommandInput extends UpdateFirewallDeleteProtectionRequest {
    }
    export interface UpdateFirewallDeleteProtectionCommandOutput extends UpdateFirewallDeleteProtectionResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the flag, <code>DeleteProtection</code>, which indicates whether it is possible
        *          to delete the firewall. If the flag is set to <code>TRUE</code>, the firewall is protected
        *          against deletion. This setting helps protect against accidentally deleting a firewall
        *          that's in use. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, UpdateFirewallDeleteProtectionCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, UpdateFirewallDeleteProtectionCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new UpdateFirewallDeleteProtectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFirewallDeleteProtectionCommandInput} for command's `input` shape.
        * @see {@link UpdateFirewallDeleteProtectionCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class UpdateFirewallDeleteProtectionCommand extends $Command<UpdateFirewallDeleteProtectionCommandInput, UpdateFirewallDeleteProtectionCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: UpdateFirewallDeleteProtectionCommandInput;
            constructor(input: UpdateFirewallDeleteProtectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFirewallDeleteProtectionCommandInput, UpdateFirewallDeleteProtectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallDescriptionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateFirewallDescriptionRequest, UpdateFirewallDescriptionResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface UpdateFirewallDescriptionCommandInput extends UpdateFirewallDescriptionRequest {
    }
    export interface UpdateFirewallDescriptionCommandOutput extends UpdateFirewallDescriptionResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the description for the specified firewall. Use the description to help you
        *          identify the firewall when you're working with it. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, UpdateFirewallDescriptionCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, UpdateFirewallDescriptionCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new UpdateFirewallDescriptionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFirewallDescriptionCommandInput} for command's `input` shape.
        * @see {@link UpdateFirewallDescriptionCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class UpdateFirewallDescriptionCommand extends $Command<UpdateFirewallDescriptionCommandInput, UpdateFirewallDescriptionCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: UpdateFirewallDescriptionCommandInput;
            constructor(input: UpdateFirewallDescriptionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFirewallDescriptionCommandInput, UpdateFirewallDescriptionCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallEncryptionConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateFirewallEncryptionConfigurationRequest, UpdateFirewallEncryptionConfigurationResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface UpdateFirewallEncryptionConfigurationCommandInput extends UpdateFirewallEncryptionConfigurationRequest {
    }
    export interface UpdateFirewallEncryptionConfigurationCommandOutput extends UpdateFirewallEncryptionConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>A complex type that contains settings for encryption of your firewall resources.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, UpdateFirewallEncryptionConfigurationCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, UpdateFirewallEncryptionConfigurationCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new UpdateFirewallEncryptionConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFirewallEncryptionConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateFirewallEncryptionConfigurationCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class UpdateFirewallEncryptionConfigurationCommand extends $Command<UpdateFirewallEncryptionConfigurationCommandInput, UpdateFirewallEncryptionConfigurationCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: UpdateFirewallEncryptionConfigurationCommandInput;
            constructor(input: UpdateFirewallEncryptionConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFirewallEncryptionConfigurationCommandInput, UpdateFirewallEncryptionConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallPolicyChangeProtectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateFirewallPolicyChangeProtectionRequest, UpdateFirewallPolicyChangeProtectionResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface UpdateFirewallPolicyChangeProtectionCommandInput extends UpdateFirewallPolicyChangeProtectionRequest {
    }
    export interface UpdateFirewallPolicyChangeProtectionCommandOutput extends UpdateFirewallPolicyChangeProtectionResponse, __MetadataBearer {
    }
    /**
        * <p>Modifies the flag, <code>ChangeProtection</code>, which indicates whether it
        *          is possible to change the firewall. If the flag is set to <code>TRUE</code>, the firewall is protected
        *          from changes. This setting helps protect against accidentally changing a firewall that's in use.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, UpdateFirewallPolicyChangeProtectionCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, UpdateFirewallPolicyChangeProtectionCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new UpdateFirewallPolicyChangeProtectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFirewallPolicyChangeProtectionCommandInput} for command's `input` shape.
        * @see {@link UpdateFirewallPolicyChangeProtectionCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class UpdateFirewallPolicyChangeProtectionCommand extends $Command<UpdateFirewallPolicyChangeProtectionCommandInput, UpdateFirewallPolicyChangeProtectionCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: UpdateFirewallPolicyChangeProtectionCommandInput;
            constructor(input: UpdateFirewallPolicyChangeProtectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFirewallPolicyChangeProtectionCommandInput, UpdateFirewallPolicyChangeProtectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallPolicyCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateFirewallPolicyRequest, UpdateFirewallPolicyResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface UpdateFirewallPolicyCommandInput extends UpdateFirewallPolicyRequest {
    }
    export interface UpdateFirewallPolicyCommandOutput extends UpdateFirewallPolicyResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the properties of the specified firewall policy.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, UpdateFirewallPolicyCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, UpdateFirewallPolicyCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new UpdateFirewallPolicyCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateFirewallPolicyCommandInput} for command's `input` shape.
        * @see {@link UpdateFirewallPolicyCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class UpdateFirewallPolicyCommand extends $Command<UpdateFirewallPolicyCommandInput, UpdateFirewallPolicyCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: UpdateFirewallPolicyCommandInput;
            constructor(input: UpdateFirewallPolicyCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateFirewallPolicyCommandInput, UpdateFirewallPolicyCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateLoggingConfigurationCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateLoggingConfigurationRequest, UpdateLoggingConfigurationResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface UpdateLoggingConfigurationCommandInput extends UpdateLoggingConfigurationRequest {
    }
    export interface UpdateLoggingConfigurationCommandOutput extends UpdateLoggingConfigurationResponse, __MetadataBearer {
    }
    /**
        * <p>Sets the logging configuration for the specified firewall. </p>
        *          <p>To change the logging configuration, retrieve the <a>LoggingConfiguration</a> by calling <a>DescribeLoggingConfiguration</a>, then change it and provide
        *          the modified object to this update call. You must change the logging configuration one
        *             <a>LogDestinationConfig</a> at a time inside the retrieved <a>LoggingConfiguration</a> object. </p>
        *          <p>You can perform only one of the following actions in any call to
        *             <code>UpdateLoggingConfiguration</code>: </p>
        *          <ul>
        *             <li>
        *                <p>Create a new log destination object by adding a single
        *                   <code>LogDestinationConfig</code> array element to
        *                   <code>LogDestinationConfigs</code>.</p>
        *             </li>
        *             <li>
        *                <p>Delete a log destination object by removing a single
        *                   <code>LogDestinationConfig</code> array element from
        *                   <code>LogDestinationConfigs</code>.</p>
        *             </li>
        *             <li>
        *                <p>Change the <code>LogDestination</code> setting in a single
        *                   <code>LogDestinationConfig</code> array element.</p>
        *             </li>
        *          </ul>
        *          <p>You can't change the <code>LogDestinationType</code> or <code>LogType</code> in a
        *             <code>LogDestinationConfig</code>. To change these settings, delete the existing
        *             <code>LogDestinationConfig</code> object and create a new one, using two separate calls
        *          to this update operation.</p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, UpdateLoggingConfigurationCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, UpdateLoggingConfigurationCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new UpdateLoggingConfigurationCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateLoggingConfigurationCommandInput} for command's `input` shape.
        * @see {@link UpdateLoggingConfigurationCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class UpdateLoggingConfigurationCommand extends $Command<UpdateLoggingConfigurationCommandInput, UpdateLoggingConfigurationCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: UpdateLoggingConfigurationCommandInput;
            constructor(input: UpdateLoggingConfigurationCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateLoggingConfigurationCommandInput, UpdateLoggingConfigurationCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateRuleGroupCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateRuleGroupRequest, UpdateRuleGroupResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface UpdateRuleGroupCommandInput extends UpdateRuleGroupRequest {
    }
    export interface UpdateRuleGroupCommandOutput extends UpdateRuleGroupResponse, __MetadataBearer {
    }
    /**
        * <p>Updates the rule settings for the specified rule group. You use a rule group by
        *          reference in one or more firewall policies. When you modify a rule group, you modify all
        *          firewall policies that use the rule group. </p>
        *          <p>To update a rule group, first call <a>DescribeRuleGroup</a> to retrieve the
        *          current <a>RuleGroup</a> object, update the object as needed, and then provide
        *          the updated object to this call. </p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, UpdateRuleGroupCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, UpdateRuleGroupCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new UpdateRuleGroupCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateRuleGroupCommandInput} for command's `input` shape.
        * @see {@link UpdateRuleGroupCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class UpdateRuleGroupCommand extends $Command<UpdateRuleGroupCommandInput, UpdateRuleGroupCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: UpdateRuleGroupCommandInput;
            constructor(input: UpdateRuleGroupCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateRuleGroupCommandInput, UpdateRuleGroupCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateSubnetChangeProtectionCommand' {
    import { Command as $Command } from "@aws-sdk/smithy-client";
    import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
    import { UpdateSubnetChangeProtectionRequest, UpdateSubnetChangeProtectionResponse } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0";
    import { NetworkFirewallClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient";
    export interface UpdateSubnetChangeProtectionCommandInput extends UpdateSubnetChangeProtectionRequest {
    }
    export interface UpdateSubnetChangeProtectionCommandOutput extends UpdateSubnetChangeProtectionResponse, __MetadataBearer {
    }
    /**
        * <p></p>
        * @example
        * Use a bare-bones client and the command you need to make an API call.
        * ```javascript
        * import { NetworkFirewallClient, UpdateSubnetChangeProtectionCommand } from "@aws-sdk/client-network-firewall"; // ES Modules import
        * // const { NetworkFirewallClient, UpdateSubnetChangeProtectionCommand } = require("@aws-sdk/client-network-firewall"); // CommonJS import
        * const client = new NetworkFirewallClient(config);
        * const command = new UpdateSubnetChangeProtectionCommand(input);
        * const response = await client.send(command);
        * ```
        *
        * @see {@link UpdateSubnetChangeProtectionCommandInput} for command's `input` shape.
        * @see {@link UpdateSubnetChangeProtectionCommandOutput} for command's `response` shape.
        * @see {@link NetworkFirewallClientResolvedConfig | config} for NetworkFirewallClient's `config` shape.
        *
        */
    export class UpdateSubnetChangeProtectionCommand extends $Command<UpdateSubnetChangeProtectionCommandInput, UpdateSubnetChangeProtectionCommandOutput, NetworkFirewallClientResolvedConfig> {
            readonly input: UpdateSubnetChangeProtectionCommandInput;
            constructor(input: UpdateSubnetChangeProtectionCommandInput);
            /**
                * @internal
                */
            resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: NetworkFirewallClientResolvedConfig, options?: __HttpHandlerOptions): Handler<UpdateSubnetChangeProtectionCommandInput, UpdateSubnetChangeProtectionCommandOutput>;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/NetworkFirewallClient' {
    import { EndpointsInputConfig, EndpointsResolvedConfig, RegionInputConfig, RegionResolvedConfig } from "@aws-sdk/config-resolver";
    import { HostHeaderInputConfig, HostHeaderResolvedConfig } from "@aws-sdk/middleware-host-header";
    import { RetryInputConfig, RetryResolvedConfig } from "@aws-sdk/middleware-retry";
    import { AwsAuthInputConfig, AwsAuthResolvedConfig } from "@aws-sdk/middleware-signing";
    import { UserAgentInputConfig, UserAgentResolvedConfig } from "@aws-sdk/middleware-user-agent";
    import { HttpHandler as __HttpHandler } from "@aws-sdk/protocol-http";
    import { Client as __Client, DefaultsMode, SmithyConfiguration as __SmithyConfiguration, SmithyResolvedConfiguration as __SmithyResolvedConfiguration } from "@aws-sdk/smithy-client";
    import { BodyLengthCalculator as __BodyLengthCalculator, Credentials as __Credentials, Decoder as __Decoder, Encoder as __Encoder, HashConstructor as __HashConstructor, HttpHandlerOptions as __HttpHandlerOptions, Logger as __Logger, Provider as __Provider, Provider, RegionInfoProvider, StreamCollector as __StreamCollector, UrlParser as __UrlParser, UserAgent as __UserAgent } from "@aws-sdk/types";
    import { AssociateFirewallPolicyCommandInput, AssociateFirewallPolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/AssociateFirewallPolicyCommand";
    import { AssociateSubnetsCommandInput, AssociateSubnetsCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/AssociateSubnetsCommand";
    import { CreateFirewallCommandInput, CreateFirewallCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/CreateFirewallCommand";
    import { CreateFirewallPolicyCommandInput, CreateFirewallPolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/CreateFirewallPolicyCommand";
    import { CreateRuleGroupCommandInput, CreateRuleGroupCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/CreateRuleGroupCommand";
    import { DeleteFirewallCommandInput, DeleteFirewallCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DeleteFirewallCommand";
    import { DeleteFirewallPolicyCommandInput, DeleteFirewallPolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DeleteFirewallPolicyCommand";
    import { DeleteResourcePolicyCommandInput, DeleteResourcePolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DeleteResourcePolicyCommand";
    import { DeleteRuleGroupCommandInput, DeleteRuleGroupCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DeleteRuleGroupCommand";
    import { DescribeFirewallCommandInput, DescribeFirewallCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeFirewallCommand";
    import { DescribeFirewallPolicyCommandInput, DescribeFirewallPolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeFirewallPolicyCommand";
    import { DescribeLoggingConfigurationCommandInput, DescribeLoggingConfigurationCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeLoggingConfigurationCommand";
    import { DescribeResourcePolicyCommandInput, DescribeResourcePolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeResourcePolicyCommand";
    import { DescribeRuleGroupCommandInput, DescribeRuleGroupCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeRuleGroupCommand";
    import { DescribeRuleGroupMetadataCommandInput, DescribeRuleGroupMetadataCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DescribeRuleGroupMetadataCommand";
    import { DisassociateSubnetsCommandInput, DisassociateSubnetsCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/DisassociateSubnetsCommand";
    import { ListFirewallPoliciesCommandInput, ListFirewallPoliciesCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/ListFirewallPoliciesCommand";
    import { ListFirewallsCommandInput, ListFirewallsCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/ListFirewallsCommand";
    import { ListRuleGroupsCommandInput, ListRuleGroupsCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/ListRuleGroupsCommand";
    import { ListTagsForResourceCommandInput, ListTagsForResourceCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/ListTagsForResourceCommand";
    import { PutResourcePolicyCommandInput, PutResourcePolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/PutResourcePolicyCommand";
    import { TagResourceCommandInput, TagResourceCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/TagResourceCommand";
    import { UntagResourceCommandInput, UntagResourceCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UntagResourceCommand";
    import { UpdateFirewallDeleteProtectionCommandInput, UpdateFirewallDeleteProtectionCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallDeleteProtectionCommand";
    import { UpdateFirewallDescriptionCommandInput, UpdateFirewallDescriptionCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallDescriptionCommand";
    import { UpdateFirewallEncryptionConfigurationCommandInput, UpdateFirewallEncryptionConfigurationCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallEncryptionConfigurationCommand";
    import { UpdateFirewallPolicyChangeProtectionCommandInput, UpdateFirewallPolicyChangeProtectionCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallPolicyChangeProtectionCommand";
    import { UpdateFirewallPolicyCommandInput, UpdateFirewallPolicyCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateFirewallPolicyCommand";
    import { UpdateLoggingConfigurationCommandInput, UpdateLoggingConfigurationCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateLoggingConfigurationCommand";
    import { UpdateRuleGroupCommandInput, UpdateRuleGroupCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateRuleGroupCommand";
    import { UpdateSubnetChangeProtectionCommandInput, UpdateSubnetChangeProtectionCommandOutput } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/commands/UpdateSubnetChangeProtectionCommand";
    export type ServiceInputTypes = AssociateFirewallPolicyCommandInput | AssociateSubnetsCommandInput | CreateFirewallCommandInput | CreateFirewallPolicyCommandInput | CreateRuleGroupCommandInput | DeleteFirewallCommandInput | DeleteFirewallPolicyCommandInput | DeleteResourcePolicyCommandInput | DeleteRuleGroupCommandInput | DescribeFirewallCommandInput | DescribeFirewallPolicyCommandInput | DescribeLoggingConfigurationCommandInput | DescribeResourcePolicyCommandInput | DescribeRuleGroupCommandInput | DescribeRuleGroupMetadataCommandInput | DisassociateSubnetsCommandInput | ListFirewallPoliciesCommandInput | ListFirewallsCommandInput | ListRuleGroupsCommandInput | ListTagsForResourceCommandInput | PutResourcePolicyCommandInput | TagResourceCommandInput | UntagResourceCommandInput | UpdateFirewallDeleteProtectionCommandInput | UpdateFirewallDescriptionCommandInput | UpdateFirewallEncryptionConfigurationCommandInput | UpdateFirewallPolicyChangeProtectionCommandInput | UpdateFirewallPolicyCommandInput | UpdateLoggingConfigurationCommandInput | UpdateRuleGroupCommandInput | UpdateSubnetChangeProtectionCommandInput;
    export type ServiceOutputTypes = AssociateFirewallPolicyCommandOutput | AssociateSubnetsCommandOutput | CreateFirewallCommandOutput | CreateFirewallPolicyCommandOutput | CreateRuleGroupCommandOutput | DeleteFirewallCommandOutput | DeleteFirewallPolicyCommandOutput | DeleteResourcePolicyCommandOutput | DeleteRuleGroupCommandOutput | DescribeFirewallCommandOutput | DescribeFirewallPolicyCommandOutput | DescribeLoggingConfigurationCommandOutput | DescribeResourcePolicyCommandOutput | DescribeRuleGroupCommandOutput | DescribeRuleGroupMetadataCommandOutput | DisassociateSubnetsCommandOutput | ListFirewallPoliciesCommandOutput | ListFirewallsCommandOutput | ListRuleGroupsCommandOutput | ListTagsForResourceCommandOutput | PutResourcePolicyCommandOutput | TagResourceCommandOutput | UntagResourceCommandOutput | UpdateFirewallDeleteProtectionCommandOutput | UpdateFirewallDescriptionCommandOutput | UpdateFirewallEncryptionConfigurationCommandOutput | UpdateFirewallPolicyChangeProtectionCommandOutput | UpdateFirewallPolicyCommandOutput | UpdateLoggingConfigurationCommandOutput | UpdateRuleGroupCommandOutput | UpdateSubnetChangeProtectionCommandOutput;
    export interface ClientDefaults extends Partial<__SmithyResolvedConfiguration<__HttpHandlerOptions>> {
            /**
                * The HTTP handler to use. Fetch in browser and Https in Nodejs.
                */
            requestHandler?: __HttpHandler;
            /**
                * A constructor for a class implementing the {@link __Hash} interface
                * that computes the SHA-256 HMAC or checksum of a string or binary buffer.
                * @internal
                */
            sha256?: __HashConstructor;
            /**
                * The function that will be used to convert strings into HTTP endpoints.
                * @internal
                */
            urlParser?: __UrlParser;
            /**
                * A function that can calculate the length of a request body.
                * @internal
                */
            bodyLengthChecker?: __BodyLengthCalculator;
            /**
                * A function that converts a stream into an array of bytes.
                * @internal
                */
            streamCollector?: __StreamCollector;
            /**
                * The function that will be used to convert a base64-encoded string to a byte array.
                * @internal
                */
            base64Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a base64-encoded string.
                * @internal
                */
            base64Encoder?: __Encoder;
            /**
                * The function that will be used to convert a UTF8-encoded string to a byte array.
                * @internal
                */
            utf8Decoder?: __Decoder;
            /**
                * The function that will be used to convert binary data to a UTF-8 encoded string.
                * @internal
                */
            utf8Encoder?: __Encoder;
            /**
                * The runtime environment.
                * @internal
                */
            runtime?: string;
            /**
                * Disable dyanamically changing the endpoint of the client based on the hostPrefix
                * trait of an operation.
                */
            disableHostPrefix?: boolean;
            /**
                * Value for how many times a request will be made at most in case of retry.
                */
            maxAttempts?: number | __Provider<number>;
            /**
                * Specifies which retry algorithm to use.
                */
            retryMode?: string | __Provider<string>;
            /**
                * Optional logger for logging debug/info/warn/error.
                */
            logger?: __Logger;
            /**
                * Enables IPv6/IPv4 dualstack endpoint.
                */
            useDualstackEndpoint?: boolean | __Provider<boolean>;
            /**
                * Enables FIPS compatible endpoints.
                */
            useFipsEndpoint?: boolean | __Provider<boolean>;
            /**
                * Unique service identifier.
                * @internal
                */
            serviceId?: string;
            /**
                * The AWS region to which this client will send requests
                */
            region?: string | __Provider<string>;
            /**
                * Default credentials provider; Not available in browser runtime.
                * @internal
                */
            credentialDefaultProvider?: (input: any) => __Provider<__Credentials>;
            /**
                * Fetch related hostname, signing name or signing region with given region.
                * @internal
                */
            regionInfoProvider?: RegionInfoProvider;
            /**
                * The provider populating default tracking information to be sent with `user-agent`, `x-amz-user-agent` header
                * @internal
                */
            defaultUserAgentProvider?: Provider<__UserAgent>;
            /**
                * The {@link DefaultsMode} that will be used to determine how certain default configuration options are resolved in the SDK.
                */
            defaultsMode?: DefaultsMode | Provider<DefaultsMode>;
    }
    type NetworkFirewallClientConfigType = Partial<__SmithyConfiguration<__HttpHandlerOptions>> & ClientDefaults & RegionInputConfig & EndpointsInputConfig & RetryInputConfig & HostHeaderInputConfig & AwsAuthInputConfig & UserAgentInputConfig;
    /**
        * The configuration interface of NetworkFirewallClient class constructor that set the region, credentials and other options.
        */
    export interface NetworkFirewallClientConfig extends NetworkFirewallClientConfigType {
    }
    type NetworkFirewallClientResolvedConfigType = __SmithyResolvedConfiguration<__HttpHandlerOptions> & Required<ClientDefaults> & RegionResolvedConfig & EndpointsResolvedConfig & RetryResolvedConfig & HostHeaderResolvedConfig & AwsAuthResolvedConfig & UserAgentResolvedConfig;
    /**
        * The resolved configuration interface of NetworkFirewallClient class. This is resolved and normalized from the {@link NetworkFirewallClientConfig | constructor configuration interface}.
        */
    export interface NetworkFirewallClientResolvedConfig extends NetworkFirewallClientResolvedConfigType {
    }
    /**
        * <p>This is the API Reference for Network Firewall. This guide is for developers who need
        *          detailed information about the Network Firewall API actions, data types, and errors. </p>
        *          <ul>
        *             <li>
        *                <p>The REST API requires you to handle connection details, such as calculating
        *                signatures, handling request retries, and error handling. For general information
        *                about using the Amazon Web Services REST APIs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-apis.html">Amazon Web Services APIs</a>. </p>
        *                <p>To access Network Firewall using the REST API endpoint:
        *                   <code>https://network-firewall.<region>.amazonaws.com </code>
        *                </p>
        *             </li>
        *             <li>
        *                <p>Alternatively, you can use one of the Amazon Web Services SDKs to access an API that's tailored to
        *                the programming language or platform that you're using. For more information, see
        *                <a href="http://aws.amazon.com/tools/#SDKs">Amazon Web Services SDKs</a>.</p>
        *             </li>
        *             <li>
        *                <p>For descriptions of Network Firewall features, including and step-by-step
        *                instructions on how to use them through the Network Firewall console, see the <a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/">Network Firewall Developer
        *                   Guide</a>.</p>
        *             </li>
        *          </ul>
        *          <p>Network Firewall is a stateful, managed, network firewall and intrusion detection and
        *          prevention service for Amazon Virtual Private Cloud (Amazon VPC). With Network Firewall, you can filter traffic at the
        *          perimeter of your VPC. This includes filtering traffic going to and coming from an internet
        *          gateway, NAT gateway, or over VPN or Direct Connect. Network Firewall uses rules that are compatible
        *       with Suricata, a free, open source intrusion detection system (IDS) engine.
        *       Network Firewall supports Suricata version 5.0.2. For information about Suricata,
        *           see the <a href="https://suricata-ids.org/">Suricata website</a>.</p>
        *          <p>You can use Network Firewall to monitor and protect your VPC traffic in a number of ways.
        *          The following are just a few examples: </p>
        *          <ul>
        *             <li>
        *                <p>Allow domains or IP addresses for known Amazon Web Services service endpoints, such as Amazon S3, and
        *                block all other forms of traffic.</p>
        *             </li>
        *             <li>
        *                <p>Use custom lists of known bad domains to limit the types of domain names that your
        *                applications can access.</p>
        *             </li>
        *             <li>
        *                <p>Perform deep packet inspection on traffic entering or leaving your VPC.</p>
        *             </li>
        *             <li>
        *                <p>Use stateful protocol detection to filter protocols like HTTPS, regardless of the
        *                port used.</p>
        *             </li>
        *          </ul>
        *          <p>To enable Network Firewall for your VPCs, you perform steps in both Amazon VPC and in
        *          Network Firewall. For information about using Amazon VPC, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/">Amazon VPC User Guide</a>.</p>
        *          <p>To start using Network Firewall, do the following: </p>
        *          <ol>
        *             <li>
        *                <p>(Optional) If you don't already have a VPC that you want to protect, create it in
        *                Amazon VPC. </p>
        *             </li>
        *             <li>
        *                <p>In Amazon VPC, in each Availability Zone where you want to have a firewall endpoint, create a
        *                subnet for the sole use of Network Firewall. </p>
        *             </li>
        *             <li>
        *                <p>In Network Firewall, create stateless and stateful rule groups,
        *                  to define the components of the network traffic filtering behavior that you want your firewall to have. </p>
        *             </li>
        *             <li>
        *                <p>In Network Firewall, create a firewall policy that uses your rule groups and
        *                  specifies additional default traffic filtering behavior. </p>
        *             </li>
        *             <li>
        *                <p>In Network Firewall, create a firewall and specify your new firewall policy and
        *                  VPC subnets. Network Firewall creates a firewall endpoint in each subnet that you
        *                specify, with the behavior that's defined in the firewall policy.</p>
        *             </li>
        *             <li>
        *                <p>In Amazon VPC, use ingress routing enhancements to route traffic through the new firewall
        *                endpoints.</p>
        *             </li>
        *          </ol>
        */
    export class NetworkFirewallClient extends __Client<__HttpHandlerOptions, ServiceInputTypes, ServiceOutputTypes, NetworkFirewallClientResolvedConfig> {
            /**
                * The resolved configuration of NetworkFirewallClient class. This is resolved and normalized from the {@link NetworkFirewallClientConfig | constructor configuration interface}.
                */
            readonly config: NetworkFirewallClientResolvedConfig;
            constructor(configuration: NetworkFirewallClientConfig);
            /**
                * Destroy underlying resources, like sockets. It's usually not necessary to do this.
                * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
                * Otherwise, sockets might stay open for quite a long time before the server terminates them.
                */
            destroy(): void;
    }
    export {};
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/models_0' {
    import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
    import { NetworkFirewallServiceException as __BaseException } from "@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/NetworkFirewallServiceException";
    /**
        * <p>The value to use in an Amazon CloudWatch custom metric dimension. This is used in the
        *             <code>PublishMetrics</code>
        *             <a>CustomAction</a>. A CloudWatch custom metric dimension is a name/value pair that's
        *          part of the identity of a metric. </p>
        *          <p>Network Firewall sets the dimension name to <code>CustomAction</code> and you provide the
        *          dimension value. </p>
        *          <p>For more information about CloudWatch custom metric dimensions, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html#usingDimensions">Publishing Custom Metrics</a> in the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html">Amazon CloudWatch User
        *             Guide</a>.</p>
        */
    export interface Dimension {
            /**
                * <p>The value to use in the custom metric dimension.</p>
                */
            Value: string | undefined;
    }
    export namespace Dimension {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Dimension) => any;
    }
    /**
        * <p>Stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the
        *          matching packet. This setting defines a CloudWatch dimension value to be published.</p>
        */
    export interface PublishMetricAction {
            /**
                * <p></p>
                */
            Dimensions: Dimension[] | undefined;
    }
    export namespace PublishMetricAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PublishMetricAction) => any;
    }
    /**
        * <p>A custom action to use in stateless rule actions settings. This is used in <a>CustomAction</a>.</p>
        */
    export interface ActionDefinition {
            /**
                * <p>Stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the
                *          matching packet. This setting defines a CloudWatch dimension value to be published.</p>
                *          <p>You can pair this custom action with any of the standard stateless rule actions. For
                *          example, you could pair this in a rule action with the standard action that forwards the
                *          packet for stateful inspection. Then, when a packet matches the rule, Network Firewall
                *          publishes metrics for the packet and forwards it. </p>
                */
            PublishMetricAction?: PublishMetricAction;
    }
    export namespace ActionDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ActionDefinition) => any;
    }
    /**
        * <p>A single IP address specification. This is used in the <a>MatchAttributes</a>
        *          source and destination specifications.</p>
        */
    export interface Address {
            /**
                * <p>Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4. </p>
                *          <p>Examples: </p>
                *          <ul>
                *             <li>
                *                <p>To configure Network Firewall to inspect for the IP address 192.0.2.44, specify <code>192.0.2.44/32</code>.</p>
                *             </li>
                *             <li>
                *                <p>To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify <code>192.0.2.0/24</code>.</p>
                *             </li>
                *          </ul>
                *          <p>For more information about CIDR notation, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless
                *          Inter-Domain Routing</a>.</p>
                */
            AddressDefinition: string | undefined;
    }
    export namespace Address {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Address) => any;
    }
    export interface AssociateFirewallPolicyRequest {
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                *         <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall policy.</p>
                */
            FirewallPolicyArn: string | undefined;
    }
    export namespace AssociateFirewallPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateFirewallPolicyRequest) => any;
    }
    export interface AssociateFirewallPolicyResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                */
            FirewallName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall policy.</p>
                */
            FirewallPolicyArn?: string;
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
    }
    export namespace AssociateFirewallPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateFirewallPolicyResponse) => any;
    }
    /**
        * <p>Your request is valid, but Network Firewall couldn’t perform the operation because of a
        *          system problem. Retry your request. </p>
        */
    export class InternalServerError extends __BaseException {
            readonly name: "InternalServerError";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InternalServerError, __BaseException>);
    }
    /**
        * <p>The operation failed because it's not valid. For example, you might have tried to delete
        *          a rule group or firewall policy that's in use.</p>
        */
    export class InvalidOperationException extends __BaseException {
            readonly name: "InvalidOperationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidOperationException, __BaseException>);
    }
    /**
        * <p>The operation failed because of a problem with your request. Examples include: </p>
        *          <ul>
        *             <li>
        *                <p>You specified an unsupported parameter name or value.</p>
        *             </li>
        *             <li>
        *                <p>You tried to update a property with a value that isn't among the available
        *                types.</p>
        *             </li>
        *             <li>
        *                <p>Your request references an ARN that is malformed, or corresponds to a resource
        *                that isn't valid in the context of the request.</p>
        *             </li>
        *          </ul>
        */
    export class InvalidRequestException extends __BaseException {
            readonly name: "InvalidRequestException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidRequestException, __BaseException>);
    }
    /**
        * <p>The token you provided is stale or isn't valid for the operation. </p>
        */
    export class InvalidTokenException extends __BaseException {
            readonly name: "InvalidTokenException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidTokenException, __BaseException>);
    }
    /**
        * <p>Unable to locate a resource using the parameters that you provided.</p>
        */
    export class ResourceNotFoundException extends __BaseException {
            readonly name: "ResourceNotFoundException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
    }
    /**
        * <p>Unable to process the request due to throttling limitations.</p>
        */
    export class ThrottlingException extends __BaseException {
            readonly name: "ThrottlingException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ThrottlingException, __BaseException>);
    }
    /**
        * <p>The ID for a subnet that you want to associate with the firewall. This is used with
        *             <a>CreateFirewall</a> and <a>AssociateSubnets</a>. Network Firewall
        *          creates an instance of the associated firewall in each subnet that you specify, to filter
        *          traffic in the subnet's Availability Zone.</p>
        */
    export interface SubnetMapping {
            /**
                * <p>The unique identifier for the subnet. </p>
                */
            SubnetId: string | undefined;
    }
    export namespace SubnetMapping {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SubnetMapping) => any;
    }
    export interface AssociateSubnetsRequest {
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallName?: string;
            /**
                * <p>The IDs of the subnets that you want to associate with the firewall. </p>
                */
            SubnetMappings: SubnetMapping[] | undefined;
    }
    export namespace AssociateSubnetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateSubnetsRequest) => any;
    }
    export interface AssociateSubnetsResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                */
            FirewallName?: string;
            /**
                * <p>The IDs of the subnets that are associated with the firewall. </p>
                */
            SubnetMappings?: SubnetMapping[];
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
    }
    export namespace AssociateSubnetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: AssociateSubnetsResponse) => any;
    }
    /**
        * <p>Amazon Web Services doesn't currently have enough available capacity to fulfill your request. Try your
        *          request later. </p>
        */
    export class InsufficientCapacityException extends __BaseException {
            readonly name: "InsufficientCapacityException";
            readonly $fault: "server";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InsufficientCapacityException, __BaseException>);
    }
    export enum AttachmentStatus {
            CREATING = "CREATING",
            DELETING = "DELETING",
            READY = "READY",
            SCALING = "SCALING"
    }
    /**
        * <p>The configuration and status for a single subnet that you've specified for use by the
        *          Network Firewall firewall. This is part of the <a>FirewallStatus</a>.</p>
        */
    export interface Attachment {
            /**
                * <p>The unique identifier of the subnet that you've specified to be used for a firewall
                *          endpoint. </p>
                */
            SubnetId?: string;
            /**
                * <p>The identifier of the firewall endpoint that Network Firewall has instantiated in the
                *          subnet. You use this to identify the firewall endpoint in the VPC route tables, when you
                *          redirect the VPC traffic through the endpoint. </p>
                */
            EndpointId?: string;
            /**
                * <p>The current status of the firewall endpoint in the subnet. This value reflects both the
                *          instantiation of the endpoint in the VPC subnet and the sync states that are reported in
                *          the <code>Config</code> settings. When this value is <code>READY</code>, the endpoint is
                *          available and configured properly to handle network traffic. When the endpoint isn't
                *          available for traffic, this value will reflect its state, for example
                *          <code>CREATING</code>, <code>DELETING</code>, or <code>FAILED</code>.</p>
                */
            Status?: AttachmentStatus | string;
    }
    export namespace Attachment {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Attachment) => any;
    }
    export enum ConfigurationSyncState {
            IN_SYNC = "IN_SYNC",
            PENDING = "PENDING"
    }
    export enum EncryptionType {
            AWS_OWNED_KMS_KEY = "AWS_OWNED_KMS_KEY",
            CUSTOMER_KMS = "CUSTOMER_KMS"
    }
    /**
        * <p>A complex type that contains optional Amazon Web Services Key Management Service (KMS) encryption settings for your Network Firewall resources. Your data is encrypted by default with an Amazon Web Services owned key that Amazon Web Services owns and manages for you. You can use either the Amazon Web Services owned key, or provide your own customer managed key. To learn more about KMS encryption of your Network Firewall resources, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-encryption-at-rest.html">Encryption at rest with Amazon Web Services Key Managment Service</a> in the <i>Network Firewall Developer Guide</i>.</p>
        */
    export interface EncryptionConfiguration {
            /**
                * <p>The ID of the Amazon Web Services Key Management Service (KMS) customer managed key. You can use any of the key identifiers that KMS supports, unless you're using a key that's managed by another account. If you're using a key managed by another account, then specify the key ARN. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id">Key ID</a> in the <i>Amazon Web Services KMS Developer Guide</i>.</p>
                */
            KeyId?: string;
            /**
                * <p>The type of Amazon Web Services KMS key to use for encryption of your Network Firewall resources.</p>
                */
            Type: EncryptionType | string | undefined;
    }
    export namespace EncryptionConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: EncryptionConfiguration) => any;
    }
    /**
        * <p>A key:value pair associated with an Amazon Web Services resource. The key:value pair can be anything you
        *          define. Typically, the tag key represents a category (such as "environment") and the tag
        *          value represents a specific value within that category (such as "test," "development," or
        *          "production"). You can add up to 50 tags to each Amazon Web Services resource. </p>
        */
    export interface Tag {
            /**
                * <p>The part of the key:value pair that defines a tag. You can use a tag key to describe a
                *          category of information, such as "customer." Tag keys are case-sensitive.</p>
                */
            Key: string | undefined;
            /**
                * <p>The part of the key:value pair that defines a tag. You can use a tag value to describe a
                *          specific value within a category, such as "companyA" or "companyB." Tag values are
                *          case-sensitive.</p>
                */
            Value: string | undefined;
    }
    export namespace Tag {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Tag) => any;
    }
    export interface CreateFirewallRequest {
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                */
            FirewallName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the <a>FirewallPolicy</a> that you want to
                *          use for the firewall.</p>
                */
            FirewallPolicyArn: string | undefined;
            /**
                * <p>The unique identifier of the VPC where Network Firewall should create the firewall. </p>
                *          <p>You can't change this setting after you create the firewall. </p>
                */
            VpcId: string | undefined;
            /**
                * <p>The public subnets to use for your Network Firewall firewalls. Each subnet must belong to a
                *          different Availability Zone in the VPC. Network Firewall creates a firewall endpoint in each
                *          subnet. </p>
                */
            SubnetMappings: SubnetMapping[] | undefined;
            /**
                * <p>A flag indicating whether it is possible to delete the firewall. A setting of <code>TRUE</code> indicates
                *          that the firewall is protected against deletion. Use this setting to protect against
                *          accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to <code>TRUE</code>.</p>
                */
            DeleteProtection?: boolean;
            /**
                * <p>A setting indicating whether the firewall is protected against changes to the subnet associations.
                *          Use this setting to protect against
                *          accidentally modifying the subnet associations for a firewall that is in use. When you create a firewall, the operation initializes this setting to <code>TRUE</code>.</p>
                */
            SubnetChangeProtection?: boolean;
            /**
                * <p>A setting indicating whether the firewall is protected against a change to the firewall policy association.
                *          Use this setting to protect against
                *          accidentally modifying the firewall policy for a firewall that is in use. When you create a firewall, the operation initializes this setting to <code>TRUE</code>.</p>
                */
            FirewallPolicyChangeProtection?: boolean;
            /**
                * <p>A description of the firewall.</p>
                */
            Description?: string;
            /**
                * <p>The key:value pairs to associate with the resource.</p>
                */
            Tags?: Tag[];
            /**
                * <p>A complex type that contains settings for encryption of your firewall resources.</p>
                */
            EncryptionConfiguration?: EncryptionConfiguration;
    }
    export namespace CreateFirewallRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFirewallRequest) => any;
    }
    /**
        * <p>The firewall defines the configuration settings for an Network Firewall firewall. These settings include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall Amazon Web Services resource. </p>
        *          <p>The status of the firewall, for example whether it's ready to filter network traffic,
        *          is provided in the corresponding <a>FirewallStatus</a>. You can retrieve both
        *          objects by calling <a>DescribeFirewall</a>.</p>
        */
    export interface Firewall {
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                */
            FirewallName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                */
            FirewallArn?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall policy.</p>
                *          <p>The relationship of firewall to firewall policy is many to one. Each firewall requires
                *          one firewall policy association, and you can use the same firewall policy for multiple
                *          firewalls. </p>
                */
            FirewallPolicyArn: string | undefined;
            /**
                * <p>The unique identifier of the VPC where the firewall is in use. </p>
                */
            VpcId: string | undefined;
            /**
                * <p>The public subnets that Network Firewall is using for the firewall. Each subnet must belong
                *          to a different Availability Zone. </p>
                */
            SubnetMappings: SubnetMapping[] | undefined;
            /**
                * <p>A flag indicating whether it is possible to delete the firewall. A setting of <code>TRUE</code> indicates
                *          that the firewall is protected against deletion. Use this setting to protect against
                *          accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to <code>TRUE</code>.</p>
                */
            DeleteProtection?: boolean;
            /**
                * <p>A setting indicating whether the firewall is protected against changes to the subnet associations.
                *          Use this setting to protect against
                *          accidentally modifying the subnet associations for a firewall that is in use. When you create a firewall, the operation initializes this setting to <code>TRUE</code>.</p>
                */
            SubnetChangeProtection?: boolean;
            /**
                * <p>A setting indicating whether the firewall is protected against a change to the firewall policy association.
                *          Use this setting to protect against
                *          accidentally modifying the firewall policy for a firewall that is in use. When you create a firewall, the operation initializes this setting to <code>TRUE</code>.</p>
                */
            FirewallPolicyChangeProtection?: boolean;
            /**
                * <p>A description of the firewall.</p>
                */
            Description?: string;
            /**
                * <p>The unique identifier for the firewall. </p>
                */
            FirewallId: string | undefined;
            /**
                * <p></p>
                */
            Tags?: Tag[];
            /**
                * <p>A complex type that contains the Amazon Web Services KMS encryption configuration settings for your firewall.</p>
                */
            EncryptionConfiguration?: EncryptionConfiguration;
    }
    export namespace Firewall {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Firewall) => any;
    }
    export enum FirewallStatusValue {
            DELETING = "DELETING",
            PROVISIONING = "PROVISIONING",
            READY = "READY"
    }
    export enum PerObjectSyncStatus {
            IN_SYNC = "IN_SYNC",
            PENDING = "PENDING"
    }
    /**
        * <p>Provides configuration status for a single policy or rule group that is used for a firewall endpoint. Network Firewall
        *          provides each endpoint with the rules that are configured in the firewall policy. Each time
        *          you add a subnet or modify the associated firewall policy, Network Firewall synchronizes the
        *           rules in the endpoint, so it can properly filter network traffic. This is part of a <a>SyncState</a> for a firewall.</p>
        */
    export interface PerObjectStatus {
            /**
                * <p>Indicates whether this object is in sync with the version indicated in the update token.</p>
                */
            SyncStatus?: PerObjectSyncStatus | string;
            /**
                * <p>The current version of the object that is either in sync or pending synchronization. </p>
                */
            UpdateToken?: string;
    }
    export namespace PerObjectStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PerObjectStatus) => any;
    }
    /**
        * <p>The status of the firewall endpoint and firewall policy configuration for a single VPC
        *          subnet. </p>
        *          <p>For each VPC subnet that you associate with a firewall, Network Firewall does the
        *          following: </p>
        *          <ul>
        *             <li>
        *                <p>Instantiates a firewall endpoint in the subnet, ready to take traffic.</p>
        *             </li>
        *             <li>
        *                <p>Configures the endpoint with the current firewall policy settings, to provide the
        *                filtering behavior for the endpoint.</p>
        *             </li>
        *          </ul>
        *          <p>When you update a firewall, for example to add a subnet association or change a rule
        *          group in the firewall policy, the affected sync states reflect out-of-sync or not ready
        *          status until the changes are complete. </p>
        */
    export interface SyncState {
            /**
                * <p>The attachment status of the firewall's association with a single VPC subnet. For each
                *          configured subnet, Network Firewall creates the attachment by instantiating the firewall
                *          endpoint in the subnet so that it's ready to take traffic. This is part of the <a>FirewallStatus</a>.</p>
                */
            Attachment?: Attachment;
            /**
                * <p>The configuration status of the firewall endpoint in a single VPC subnet. Network Firewall
                *          provides each endpoint with the rules that are configured in the firewall policy. Each time
                *          you add a subnet or modify the associated firewall policy, Network Firewall synchronizes the
                *          rules in the endpoint, so it can properly filter network traffic. This is part of the <a>FirewallStatus</a>.</p>
                */
            Config?: Record<string, PerObjectStatus>;
    }
    export namespace SyncState {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SyncState) => any;
    }
    /**
        * <p>Detailed information about the current status of a <a>Firewall</a>. You can retrieve this for a firewall by calling <a>DescribeFirewall</a> and providing the firewall name and ARN.</p>
        */
    export interface FirewallStatus {
            /**
                * <p>The readiness of the configured firewall to handle network traffic across all of the
                *          Availability Zones where you've configured it. This setting is <code>READY</code> only when
                *          the <code>ConfigurationSyncStateSummary</code> value is <code>IN_SYNC</code> and the
                *             <code>Attachment</code>
                *             <code>Status</code> values for all of the configured subnets are <code>READY</code>.
                *       </p>
                */
            Status: FirewallStatusValue | string | undefined;
            /**
                * <p>The configuration sync state for the firewall. This summarizes the sync states reported
                *          in the <code>Config</code> settings for all of the Availability Zones where you have
                *          configured the firewall. </p>
                *          <p>When you create a firewall or update its configuration, for example by adding a rule
                *          group to its firewall policy, Network Firewall distributes the configuration changes to all
                *          zones where the firewall is in use. This summary indicates whether the configuration
                *          changes have been applied everywhere. </p>
                *          <p>This status must be <code>IN_SYNC</code> for the firewall to be ready for use, but it
                *          doesn't indicate that the firewall is ready. The <code>Status</code> setting indicates
                *          firewall readiness.</p>
                */
            ConfigurationSyncStateSummary: ConfigurationSyncState | string | undefined;
            /**
                * <p>The subnets that you've configured for use by the Network Firewall firewall. This contains
                *          one array element per Availability Zone where you've configured a subnet. These objects
                *          provide details of the information that is summarized in the
                *             <code>ConfigurationSyncStateSummary</code> and <code>Status</code>, broken down by zone
                *          and configuration object. </p>
                */
            SyncStates?: Record<string, SyncState>;
    }
    export namespace FirewallStatus {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirewallStatus) => any;
    }
    export interface CreateFirewallResponse {
            /**
                * <p>The configuration settings for the firewall. These settings include the firewall policy and the subnets in your VPC to use for the firewall endpoints. </p>
                */
            Firewall?: Firewall;
            /**
                * <p>Detailed information about the current status of a <a>Firewall</a>. You can retrieve this for a firewall by calling <a>DescribeFirewall</a> and providing the firewall name and ARN.</p>
                */
            FirewallStatus?: FirewallStatus;
    }
    export namespace CreateFirewallResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFirewallResponse) => any;
    }
    /**
        * <p>Unable to perform the operation because doing so would violate a limit setting. </p>
        */
    export class LimitExceededException extends __BaseException {
            readonly name: "LimitExceededException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
    }
    export enum RuleOrder {
            DEFAULT_ACTION_ORDER = "DEFAULT_ACTION_ORDER",
            STRICT_ORDER = "STRICT_ORDER"
    }
    /**
        * <p>Configuration settings for the handling of the stateful rule groups in a firewall policy. </p>
        */
    export interface StatefulEngineOptions {
            /**
                * <p>Indicates how to manage the order of stateful rule evaluation for the policy. <code>DEFAULT_ACTION_ORDER</code> is
                *          the default behavior. Stateful rules are provided to the rule engine as Suricata compatible strings, and Suricata evaluates them
                *          based on certain settings. For more information, see
                *          <a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html">Evaluation order for stateful rules</a> in the <i>Network Firewall Developer Guide</i>.
                *       </p>
                */
            RuleOrder?: RuleOrder | string;
    }
    export namespace StatefulEngineOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatefulEngineOptions) => any;
    }
    export enum OverrideAction {
            DROP_TO_ALERT = "DROP_TO_ALERT"
    }
    /**
        * <p>The setting that allows the policy owner to change the behavior of the rule group within a policy. </p>
        */
    export interface StatefulRuleGroupOverride {
            /**
                * <p>The action that changes the rule group from <code>DROP</code> to <code>ALERT</code>. This only applies to
                *       managed rule groups.</p>
                */
            Action?: OverrideAction | string;
    }
    export namespace StatefulRuleGroupOverride {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatefulRuleGroupOverride) => any;
    }
    /**
        * <p>Identifier for a single stateful rule group, used in a firewall policy to refer to a
        *          rule group. </p>
        */
    export interface StatefulRuleGroupReference {
            /**
                * <p>The Amazon Resource Name (ARN) of the stateful rule group.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>An integer setting that indicates the order in which to run the stateful rule groups in
                *       a single <a>FirewallPolicy</a>. This setting only applies to firewall policies
                *       that specify the <code>STRICT_ORDER</code> rule order in the stateful engine options settings.</p>
                *          <p>Network Firewall evalutes each stateful rule group
                *          against a packet starting with the group that has the lowest priority setting. You must ensure
                *          that the priority settings are unique within each policy.</p>
                *          <p>You can change the priority settings of your rule groups at any time. To make it easier to
                *          insert rule groups later, number them so there's a wide range in between, for example use 100,
                *          200, and so on. </p>
                */
            Priority?: number;
            /**
                * <p>The action that allows the policy owner to override the behavior of the rule group within a policy.</p>
                */
            Override?: StatefulRuleGroupOverride;
    }
    export namespace StatefulRuleGroupReference {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatefulRuleGroupReference) => any;
    }
    /**
        * <p>An optional, non-standard action to use for stateless packet handling. You can define
        *          this in addition to the standard action that you must specify. </p>
        *          <p>You define and name the custom actions that you want to be able to use, and then you
        *          reference them by name in your actions settings. </p>
        *          <p>You can use custom actions in the following places: </p>
        *          <ul>
        *             <li>
        *                <p>In a rule group's <a>StatelessRulesAndCustomActions</a> specification.
        *                The custom actions are available for use by name inside the
        *                   <code>StatelessRulesAndCustomActions</code> where you define them. You can use
        *                them for your stateless rule actions to specify what to do with a packet that matches
        *                the rule's match attributes. </p>
        *             </li>
        *             <li>
        *                <p>In a <a>FirewallPolicy</a> specification, in
        *                   <code>StatelessCustomActions</code>. The custom actions are available for use
        *                inside the policy where you define them. You can use them for the policy's default
        *                stateless actions settings to specify what to do with packets that don't match any of
        *                the policy's stateless rules. </p>
        *             </li>
        *          </ul>
        */
    export interface CustomAction {
            /**
                * <p>The descriptive name of the custom action. You can't change the name of a custom action after you create it.</p>
                */
            ActionName: string | undefined;
            /**
                * <p>The custom action associated with the action name.</p>
                */
            ActionDefinition: ActionDefinition | undefined;
    }
    export namespace CustomAction {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CustomAction) => any;
    }
    /**
        * <p>Identifier for a single stateless rule group, used in a firewall policy to refer to the
        *          rule group. </p>
        */
    export interface StatelessRuleGroupReference {
            /**
                * <p>The Amazon Resource Name (ARN) of the stateless rule group.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>An integer setting that indicates the order in which to run the stateless rule groups in
                *          a single <a>FirewallPolicy</a>. Network Firewall applies each stateless rule group
                *          to a packet starting with the group that has the lowest priority setting. You must ensure
                *          that the priority settings are unique within each policy.</p>
                */
            Priority: number | undefined;
    }
    export namespace StatelessRuleGroupReference {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatelessRuleGroupReference) => any;
    }
    /**
        * <p>The firewall policy defines the behavior of a firewall using a collection of stateless
        *          and stateful rule groups and other settings. You can use one firewall policy for multiple
        *          firewalls. </p>
        *          <p>This, along with <a>FirewallPolicyResponse</a>, define the policy.
        *          You can retrieve all objects for a firewall policy by calling <a>DescribeFirewallPolicy</a>.</p>
        */
    export interface FirewallPolicy {
            /**
                * <p>References to the stateless rule groups that are used in the policy. These define the
                *          matching criteria in stateless rules. </p>
                */
            StatelessRuleGroupReferences?: StatelessRuleGroupReference[];
            /**
                * <p>The actions to take on a packet if it doesn't match any of the stateless rules in the
                *          policy. If you want non-matching packets to be forwarded for stateful inspection, specify
                *             <code>aws:forward_to_sfe</code>. </p>
                *          <p>You must specify one of the standard actions: <code>aws:pass</code>,
                *             <code>aws:drop</code>, or <code>aws:forward_to_sfe</code>. In addition, you can specify
                *          custom actions that are compatible with your standard section choice.</p>
                *          <p>For example, you could specify <code>["aws:pass"]</code> or you could specify
                *             <code>["aws:pass", “customActionName”]</code>. For information about compatibility, see
                *          the custom action descriptions under <a>CustomAction</a>.</p>
                */
            StatelessDefaultActions: string[] | undefined;
            /**
                * <p>The actions to take on a fragmented UDP packet if it doesn't match any of the stateless
                *       rules in the policy. Network Firewall only manages UDP packet fragments and silently drops packet fragments for other protocols.
                *       If you want non-matching fragmented UDP packets to be forwarded for
                *          stateful inspection, specify <code>aws:forward_to_sfe</code>. </p>
                *          <p>You must specify one of the standard actions: <code>aws:pass</code>,
                *             <code>aws:drop</code>, or <code>aws:forward_to_sfe</code>. In addition, you can specify
                *          custom actions that are compatible with your standard section choice.</p>
                *          <p>For example, you could specify <code>["aws:pass"]</code> or you could specify
                *             <code>["aws:pass", “customActionName”]</code>. For information about compatibility, see
                *          the custom action descriptions under <a>CustomAction</a>.</p>
                */
            StatelessFragmentDefaultActions: string[] | undefined;
            /**
                * <p>The custom action definitions that are available for use in the firewall policy's
                *             <code>StatelessDefaultActions</code> setting. You name each custom action that you
                *          define, and then you can use it by name in your default actions specifications.</p>
                */
            StatelessCustomActions?: CustomAction[];
            /**
                * <p>References to the stateful rule groups that are used in the policy. These define the
                *          inspection criteria in stateful rules. </p>
                */
            StatefulRuleGroupReferences?: StatefulRuleGroupReference[];
            /**
                * <p>The default actions to take on a packet that doesn't match any stateful rules. The stateful default action is optional,
                *          and is only valid when using the strict rule order.</p>
                *          <p>Valid values of the stateful default action:</p>
                *          <ul>
                *             <li>
                *                <p>aws:drop_strict</p>
                *             </li>
                *             <li>
                *                <p>aws:drop_established</p>
                *             </li>
                *             <li>
                *                <p>aws:alert_strict</p>
                *             </li>
                *             <li>
                *                <p>aws:alert_established</p>
                *             </li>
                *          </ul>
                *          <p>For more information, see
                *          <a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html#suricata-strict-rule-evaluation-order.html">Strict evaluation order</a> in the <i>Network Firewall Developer Guide</i>.
                *       </p>
                */
            StatefulDefaultActions?: string[];
            /**
                * <p>Additional options governing how Network Firewall handles stateful rules. The stateful
                *        rule groups that you use in your policy must have stateful rule options settings that are compatible with these settings.</p>
                */
            StatefulEngineOptions?: StatefulEngineOptions;
    }
    export namespace FirewallPolicy {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirewallPolicy) => any;
    }
    export interface CreateFirewallPolicyRequest {
            /**
                * <p>The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it.</p>
                */
            FirewallPolicyName: string | undefined;
            /**
                * <p>The rule groups and policy actions to use in the firewall policy.</p>
                */
            FirewallPolicy: FirewallPolicy | undefined;
            /**
                * <p>A description of the firewall policy.</p>
                */
            Description?: string;
            /**
                * <p>The key:value pairs to associate with the resource.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Indicates whether you want Network Firewall to just check the validity of the request, rather than run the request. </p>
                *          <p>If set to <code>TRUE</code>, Network Firewall checks whether the request can run successfully,
                *          but doesn't actually make the requested changes. The call returns the value that the request would return if you ran it with
                *          dry run set to <code>FALSE</code>, but doesn't make additions or changes to your resources. This option allows you to make sure that you have
                *          the required permissions to run the request and that your request parameters are valid. </p>
                *          <p>If set to <code>FALSE</code>, Network Firewall makes the requested changes to your resources. </p>
                */
            DryRun?: boolean;
            /**
                * <p>A complex type that contains settings for encryption of your firewall policy resources.</p>
                */
            EncryptionConfiguration?: EncryptionConfiguration;
    }
    export namespace CreateFirewallPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFirewallPolicyRequest) => any;
    }
    export enum ResourceStatus {
            ACTIVE = "ACTIVE",
            DELETING = "DELETING"
    }
    /**
        * <p>The high-level properties of a firewall policy. This, along with the <a>FirewallPolicy</a>, define the policy. You can retrieve all objects for a firewall policy by calling <a>DescribeFirewallPolicy</a>. </p>
        */
    export interface FirewallPolicyResponse {
            /**
                * <p>The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it.</p>
                */
            FirewallPolicyName: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall policy.</p>
                *          <note>
                *             <p>If this response is for a create request that had <code>DryRun</code> set to
                *                <code>TRUE</code>, then this ARN is a placeholder that isn't attached to a valid
                *             resource.</p>
                *          </note>
                */
            FirewallPolicyArn: string | undefined;
            /**
                * <p>The unique identifier for the firewall policy. </p>
                */
            FirewallPolicyId: string | undefined;
            /**
                * <p>A description of the firewall policy.</p>
                */
            Description?: string;
            /**
                * <p>The current status of the firewall policy. You can retrieve this for a firewall policy
                *          by calling <a>DescribeFirewallPolicy</a> and providing the firewall policy's
                *          name or ARN.</p>
                */
            FirewallPolicyStatus?: ResourceStatus | string;
            /**
                * <p>The key:value pairs to associate with the resource.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The number of capacity units currently consumed by the policy's stateless rules.</p>
                */
            ConsumedStatelessRuleCapacity?: number;
            /**
                * <p>The number of capacity units currently consumed by the policy's stateful rules.</p>
                */
            ConsumedStatefulRuleCapacity?: number;
            /**
                * <p>The number of firewalls that are associated with this firewall policy.</p>
                */
            NumberOfAssociations?: number;
            /**
                * <p>A complex type that contains the Amazon Web Services KMS encryption configuration settings for your firewall policy.</p>
                */
            EncryptionConfiguration?: EncryptionConfiguration;
            /**
                * <p>The last time that the firewall policy was changed.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace FirewallPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirewallPolicyResponse) => any;
    }
    export interface CreateFirewallPolicyResponse {
            /**
                * <p>A token used for optimistic locking. Network Firewall returns a token to your requests that access the firewall policy. The token marks the state of the policy resource at the time of the request. </p>
                *          <p>To make changes to the policy, you provide the token in your request. Network Firewall uses the token to ensure that the policy hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall policy again to get a current copy of it with current token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken: string | undefined;
            /**
                * <p>The high-level properties of a firewall policy. This, along with the <a>FirewallPolicy</a>, define the policy. You can retrieve all objects for a firewall policy by calling <a>DescribeFirewallPolicy</a>. </p>
                */
            FirewallPolicyResponse: FirewallPolicyResponse | undefined;
    }
    export namespace CreateFirewallPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateFirewallPolicyResponse) => any;
    }
    export enum GeneratedRulesType {
            ALLOWLIST = "ALLOWLIST",
            DENYLIST = "DENYLIST"
    }
    export enum TargetType {
            HTTP_HOST = "HTTP_HOST",
            TLS_SNI = "TLS_SNI"
    }
    /**
        * <p>Stateful inspection criteria for a domain list rule group. </p>
        *          <p>For HTTPS traffic, domain filtering is SNI-based. It uses the server name indicator extension of the TLS handshake.</p>
        *          <p>By default, Network Firewall domain list inspection only includes traffic coming from the VPC where you deploy the firewall. To inspect traffic from IP addresses outside of the deployment VPC, you set the <code>HOME_NET</code> rule variable to include the CIDR range of the deployment VPC plus the other CIDR ranges. For more information, see <a>RuleVariables</a> in this guide and <a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/stateful-rule-groups-domain-names.html">Stateful domain list rule groups in Network Firewall</a> in the <i>Network Firewall Developer Guide</i>.</p>
        */
    export interface RulesSourceList {
            /**
                * <p>The domains that you want to inspect for in your traffic flows. Valid domain specifications are the following:</p>
                *          <ul>
                *             <li>
                *                <p>Explicit names. For example, <code>abc.example.com</code> matches only the domain <code>abc.example.com</code>.</p>
                *             </li>
                *             <li>
                *                <p>Names that use a domain wildcard, which you indicate with an initial '<code>.</code>'. For example,<code>.example.com</code> matches <code>example.com</code> and matches all subdomains of <code>example.com</code>, such as <code>abc.example.com</code> and <code>www.example.com</code>. </p>
                * 	           </li>
                *          </ul>
                */
            Targets: string[] | undefined;
            /**
                * <p>The protocols you want to inspect. Specify <code>TLS_SNI</code> for <code>HTTPS</code>. Specify <code>HTTP_HOST</code> for <code>HTTP</code>. You can specify either or both. </p>
                */
            TargetTypes: (TargetType | string)[] | undefined;
            /**
                * <p>Whether you want to allow or deny access to the domains in your target list.</p>
                */
            GeneratedRulesType: GeneratedRulesType | string | undefined;
    }
    export namespace RulesSourceList {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RulesSourceList) => any;
    }
    export enum StatefulAction {
            ALERT = "ALERT",
            DROP = "DROP",
            PASS = "PASS"
    }
    export enum StatefulRuleDirection {
            ANY = "ANY",
            FORWARD = "FORWARD"
    }
    export enum StatefulRuleProtocol {
            ANY = "IP",
            DCERPC = "DCERPC",
            DHCP = "DHCP",
            DNS = "DNS",
            FTP = "FTP",
            HTTP = "HTTP",
            ICMP = "ICMP",
            IKEV2 = "IKEV2",
            IMAP = "IMAP",
            KRB5 = "KRB5",
            MSN = "MSN",
            NTP = "NTP",
            SMB = "SMB",
            SMTP = "SMTP",
            SSH = "SSH",
            TCP = "TCP",
            TFTP = "TFTP",
            TLS = "TLS",
            UDP = "UDP"
    }
    /**
        * <p>The basic rule criteria for Network Firewall to use to inspect packet headers in stateful
        *          traffic flow inspection. Traffic flows that match the criteria are a match for the
        *          corresponding <a>StatefulRule</a>. </p>
        */
    export interface Header {
            /**
                * <p>The protocol to inspect for. To specify all, you can use <code>IP</code>, because all traffic on Amazon Web Services and on the internet is IP.</p>
                */
            Protocol: StatefulRuleProtocol | string | undefined;
            /**
                * <p>The source IP address or address range to inspect for, in CIDR notation.
                *           To match with any address, specify <code>ANY</code>. </p>
                *          <p>Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4. </p>
                *          <p>Examples: </p>
                *          <ul>
                *             <li>
                *                <p>To configure Network Firewall to inspect for the IP address 192.0.2.44, specify <code>192.0.2.44/32</code>.</p>
                *             </li>
                *             <li>
                *                <p>To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify <code>192.0.2.0/24</code>.</p>
                *             </li>
                *          </ul>
                *          <p>For more information about CIDR notation, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless
                *          Inter-Domain Routing</a>.</p>
                */
            Source: string | undefined;
            /**
                * <p>The source port to inspect for. You can specify an individual port, for
                *            example <code>1994</code> and you can specify a port
                *                range, for example <code>1990:1994</code>.
                *           To match with any port, specify <code>ANY</code>. </p>
                */
            SourcePort: string | undefined;
            /**
                * <p>The direction of traffic flow to inspect. If set to <code>ANY</code>, the inspection
                *          matches bidirectional traffic, both from the source to the destination and from the
                *          destination to the source. If set to <code>FORWARD</code>, the inspection only matches
                *          traffic going from the source to the destination. </p>
                */
            Direction: StatefulRuleDirection | string | undefined;
            /**
                * <p>The destination IP address or address range to inspect for, in CIDR notation.
                *           To match with any address, specify <code>ANY</code>. </p>
                *          <p>Specify an IP address or a block of IP addresses in Classless Inter-Domain Routing (CIDR) notation. Network Firewall supports all address ranges for IPv4. </p>
                *          <p>Examples: </p>
                *          <ul>
                *             <li>
                *                <p>To configure Network Firewall to inspect for the IP address 192.0.2.44, specify <code>192.0.2.44/32</code>.</p>
                *             </li>
                *             <li>
                *                <p>To configure Network Firewall to inspect for IP addresses from 192.0.2.0 to 192.0.2.255, specify <code>192.0.2.0/24</code>.</p>
                *             </li>
                *          </ul>
                *          <p>For more information about CIDR notation, see the Wikipedia entry <a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless
                *          Inter-Domain Routing</a>.</p>
                */
            Destination: string | undefined;
            /**
                * <p>The destination port to inspect for. You can specify an individual port, for
                *            example <code>1994</code> and you can specify
                *          a port range, for example <code>1990:1994</code>.
                *           To match with any port, specify <code>ANY</code>. </p>
                */
            DestinationPort: string | undefined;
    }
    export namespace Header {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: Header) => any;
    }
    /**
        * <p>Additional settings for a stateful rule. This is part of the <a>StatefulRule</a> configuration.</p>
        */
    export interface RuleOption {
            /**
                * <p></p>
                */
            Keyword: string | undefined;
            /**
                * <p></p>
                */
            Settings?: string[];
    }
    export namespace RuleOption {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleOption) => any;
    }
    /**
        * <p>A single Suricata rules specification, for use in a stateful rule group.
        *        Use this option to specify a simple Suricata rule with protocol, source and destination, ports, direction, and rule options.
        *        For information about the Suricata <code>Rules</code> format, see
        *                                         <a href="https://suricata.readthedocs.io/en/suricata-5.0.0/rules/intro.html#">Rules Format</a>. </p>
        */
    export interface StatefulRule {
            /**
                * <p>Defines what Network Firewall should do with the packets in a traffic flow when the flow
                *          matches the stateful rule criteria. For all actions, Network Firewall performs the specified
                *          action and discontinues stateful inspection of the traffic flow. </p>
                *          <p>The actions for a stateful rule are defined as follows: </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>PASS</b> - Permits the packets to go to the
                *                intended destination.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>DROP</b> - Blocks the packets from going to
                *                the intended destination and sends an alert log message, if alert logging is configured in the <a>Firewall</a>
                *                   <a>LoggingConfiguration</a>. </p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>ALERT</b> - Permits the packets to go to the
                *                intended destination and sends an alert log message, if alert logging is configured in the <a>Firewall</a>
                *                   <a>LoggingConfiguration</a>. </p>
                *                <p>You can use this action to test a rule that you intend to use to drop traffic. You
                *                can enable the rule with <code>ALERT</code> action, verify in the logs that the rule
                *                is filtering as you want, then change the action to <code>DROP</code>.</p>
                *             </li>
                *          </ul>
                */
            Action: StatefulAction | string | undefined;
            /**
                * <p>The stateful inspection criteria for this rule, used to inspect traffic flows.
                *       </p>
                */
            Header: Header | undefined;
            /**
                * <p>Additional options for the rule. These are the Suricata <code>RuleOptions</code> settings.</p>
                */
            RuleOptions: RuleOption[] | undefined;
    }
    export namespace StatefulRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatefulRule) => any;
    }
    /**
        * <p>A single port range specification. This is used for source and destination port ranges
        *          in the stateless rule <a>MatchAttributes</a>, <code>SourcePorts</code>, and
        *             <code>DestinationPorts</code> settings. </p>
        */
    export interface PortRange {
            /**
                * <p>The lower limit of the port range. This must be less than or equal to the
                *             <code>ToPort</code> specification. </p>
                */
            FromPort: number | undefined;
            /**
                * <p>The upper limit of the port range. This must be greater than or equal to the
                *             <code>FromPort</code> specification. </p>
                */
            ToPort: number | undefined;
    }
    export namespace PortRange {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PortRange) => any;
    }
    export enum TCPFlag {
            ACK = "ACK",
            CWR = "CWR",
            ECE = "ECE",
            FIN = "FIN",
            PSH = "PSH",
            RST = "RST",
            SYN = "SYN",
            URG = "URG"
    }
    /**
        * <p>TCP flags and masks to inspect packets for, used in stateless rules <a>MatchAttributes</a> settings.</p>
        */
    export interface TCPFlagField {
            /**
                * <p>Used in conjunction with the <code>Masks</code> setting to define the flags that must be set and flags that must not be set in order for the packet to match. This setting can only specify values that are also specified in the <code>Masks</code> setting.</p>
                *          <p>For the flags that are specified in the masks setting, the following must be true for the packet to match: </p>
                *          <ul>
                *             <li>
                *                <p>The ones that are set in this flags setting must be set in the packet. </p>
                *            </li>
                *             <li>
                *                <p>The ones that are not set in this flags setting must also not be set in the packet. </p>
                *            </li>
                *          </ul>
                */
            Flags: (TCPFlag | string)[] | undefined;
            /**
                * <p>The set of flags to consider in the inspection. To inspect all flags in the valid values list, leave this with no setting.</p>
                */
            Masks?: (TCPFlag | string)[];
    }
    export namespace TCPFlagField {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TCPFlagField) => any;
    }
    /**
        * <p>Criteria for Network Firewall to use to inspect an individual packet in stateless rule inspection. Each match attributes set can include one or more items such as IP address, CIDR range, port number, protocol, and TCP flags. </p>
        */
    export interface MatchAttributes {
            /**
                * <p>The source IP addresses and address ranges to inspect for, in CIDR notation. If not
                *          specified, this matches with any source address. </p>
                */
            Sources?: Address[];
            /**
                * <p>The destination IP addresses and address ranges to inspect for, in CIDR notation. If not
                *          specified, this matches with any destination address. </p>
                */
            Destinations?: Address[];
            /**
                * <p>The source ports to inspect for. If not specified, this matches with any source port.
                *          This setting is only used for protocols 6 (TCP) and 17 (UDP). </p>
                *          <p>You can specify individual ports, for example <code>1994</code> and you can specify port
                *          ranges, for example <code>1990:1994</code>. </p>
                */
            SourcePorts?: PortRange[];
            /**
                * <p>The destination ports to inspect for. If not specified, this matches with any
                *          destination port. This setting is only used for protocols 6 (TCP) and 17 (UDP). </p>
                *          <p>You can specify individual ports, for example <code>1994</code> and you can specify port
                *          ranges, for example <code>1990:1994</code>. </p>
                */
            DestinationPorts?: PortRange[];
            /**
                * <p>The protocols to inspect for, specified using each protocol's assigned internet protocol
                *          number (IANA). If not specified, this matches with any protocol. </p>
                */
            Protocols?: number[];
            /**
                * <p>The TCP flags and masks to inspect for. If not specified, this matches with any
                *          settings. This setting is only used for protocol 6 (TCP).</p>
                */
            TCPFlags?: TCPFlagField[];
    }
    export namespace MatchAttributes {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: MatchAttributes) => any;
    }
    /**
        * <p>The inspection criteria and action for a single stateless rule. Network Firewall inspects each packet for the specified matching
        *          criteria. When a packet matches the criteria, Network Firewall performs the rule's actions on
        *          the packet.</p>
        */
    export interface RuleDefinition {
            /**
                * <p>Criteria for Network Firewall to use to inspect an individual packet in stateless rule inspection. Each match attributes set can include one or more items such as IP address, CIDR range, port number, protocol, and TCP flags. </p>
                */
            MatchAttributes: MatchAttributes | undefined;
            /**
                * <p>The actions to take on a packet that matches one of the stateless rule definition's
                *          match attributes. You must specify a standard action and you can add custom actions. </p>
                *          <note>
                *             <p>Network Firewall only forwards a packet for stateful rule inspection if you specify
                *                <code>aws:forward_to_sfe</code> for a rule that the packet matches, or if the packet
                *             doesn't match any stateless rule and you specify <code>aws:forward_to_sfe</code> for the
                *                <code>StatelessDefaultActions</code> setting for the <a>FirewallPolicy</a>.</p>
                *          </note>
                *          <p>For every rule, you must specify exactly one of the following standard actions. </p>
                *          <ul>
                *             <li>
                *                <p>
                *                   <b>aws:pass</b> - Discontinues all inspection of
                *                the packet and permits it to go to its intended destination.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>aws:drop</b> - Discontinues all inspection of
                *                the packet and blocks it from going to its intended destination.</p>
                *             </li>
                *             <li>
                *                <p>
                *                   <b>aws:forward_to_sfe</b> - Discontinues
                *                stateless inspection of the packet and forwards it to the stateful rule engine for
                *                inspection. </p>
                *             </li>
                *          </ul>
                *          <p>Additionally, you can specify a custom action.
                *          To
                *          do this, you define a custom action by name and type, then provide the name you've assigned
                *          to the action in this <code>Actions</code> setting. For information about the options, see
                *             <a>CustomAction</a>. </p>
                *          <p>To provide more than one action in this setting, separate the settings with a comma. For
                *          example, if you have a custom <code>PublishMetrics</code> action that you've named
                *             <code>MyMetricsAction</code>, then you could specify the standard action
                *             <code>aws:pass</code> and the custom action with <code>[“aws:pass”,
                *             “MyMetricsAction”]</code>. </p>
                */
            Actions: string[] | undefined;
    }
    export namespace RuleDefinition {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleDefinition) => any;
    }
    /**
        * <p>A single stateless rule. This is used in <a>StatelessRulesAndCustomActions</a>.</p>
        */
    export interface StatelessRule {
            /**
                * <p>Defines the stateless 5-tuple packet inspection criteria and the action to take on a
                *          packet that matches the criteria. </p>
                */
            RuleDefinition: RuleDefinition | undefined;
            /**
                * <p>Indicates the order in which to run this rule relative to all of the
                *          rules that are defined for a stateless rule group. Network Firewall evaluates the rules in a
                *          rule group starting with the lowest priority setting. You must ensure that the priority
                *          settings are unique for the rule group. </p>
                *          <p>Each stateless rule group uses exactly one <code>StatelessRulesAndCustomActions</code>
                *          object, and each <code>StatelessRulesAndCustomActions</code> contains exactly one
                *             <code>StatelessRules</code> object. To ensure unique priority settings for your rule
                *          groups, set unique priorities for the stateless rules that you define inside any single
                *             <code>StatelessRules</code> object.</p>
                *          <p>You can change the priority settings of your rules at any time. To make it easier to
                *          insert rules later, number them so there's a wide range in between, for example use 100,
                *          200, and so on. </p>
                */
            Priority: number | undefined;
    }
    export namespace StatelessRule {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatelessRule) => any;
    }
    /**
        * <p>Stateless inspection criteria. Each stateless rule group uses exactly one of these data
        *          types to define its stateless rules. </p>
        */
    export interface StatelessRulesAndCustomActions {
            /**
                * <p>Defines the set of stateless rules for use in a stateless rule group. </p>
                */
            StatelessRules: StatelessRule[] | undefined;
            /**
                * <p>Defines an array of individual custom action definitions that are available for use by
                *          the stateless rules in this <code>StatelessRulesAndCustomActions</code> specification. You
                *          name each custom action that you define, and then you can use it by name in your <a>StatelessRule</a>
                *             <a>RuleDefinition</a>
                *             <code>Actions</code> specification.</p>
                */
            CustomActions?: CustomAction[];
    }
    export namespace StatelessRulesAndCustomActions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatelessRulesAndCustomActions) => any;
    }
    /**
        * <p>The stateless or stateful rules definitions for use in a single rule group. Each rule
        *          group requires a single <code>RulesSource</code>. You can use an instance of this for
        *          either stateless rules or stateful rules. </p>
        */
    export interface RulesSource {
            /**
                * <p>Stateful inspection criteria, provided in Suricata compatible intrusion prevention
                *          system (IPS) rules. Suricata is an open-source network IPS that includes a standard
                *          rule-based language for network traffic inspection.</p>
                *          <p>These rules contain the inspection criteria and the action to take for traffic that
                *          matches the criteria, so this type of rule group doesn't have a separate action
                *          setting.</p>
                */
            RulesString?: string;
            /**
                * <p>Stateful inspection criteria for a domain list rule group. </p>
                */
            RulesSourceList?: RulesSourceList;
            /**
                * <p>An array of individual stateful rules inspection criteria to be used together in a stateful rule group.
                *        Use this option to specify simple Suricata rules with protocol, source and destination, ports, direction, and rule options.
                *        For information about the Suricata <code>Rules</code> format, see
                *                                         <a href="https://suricata.readthedocs.io/en/suricata-5.0.0/rules/intro.html#">Rules Format</a>. </p>
                */
            StatefulRules?: StatefulRule[];
            /**
                * <p>Stateless inspection criteria to be used in a stateless rule group. </p>
                */
            StatelessRulesAndCustomActions?: StatelessRulesAndCustomActions;
    }
    export namespace RulesSource {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RulesSource) => any;
    }
    /**
        * <p>A list of IP addresses and address ranges, in CIDR notation. This is part of a <a>RuleVariables</a>. </p>
        */
    export interface IPSet {
            /**
                * <p>The list of IP addresses and address ranges, in CIDR notation.
                *
                *       </p>
                */
            Definition: string[] | undefined;
    }
    export namespace IPSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: IPSet) => any;
    }
    /**
        * <p>A set of port ranges for use in the rules in a rule group. </p>
        */
    export interface PortSet {
            /**
                * <p>The set of port ranges.
                *       </p>
                */
            Definition?: string[];
    }
    export namespace PortSet {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PortSet) => any;
    }
    /**
        * <p>Settings that are available for use in the rules in the <a>RuleGroup</a>
        *          where this is defined. </p>
        */
    export interface RuleVariables {
            /**
                * <p>A list of IP addresses and address ranges, in CIDR notation. </p>
                */
            IPSets?: Record<string, IPSet>;
            /**
                * <p>A list of port ranges. </p>
                */
            PortSets?: Record<string, PortSet>;
    }
    export namespace RuleVariables {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleVariables) => any;
    }
    /**
        * <p>Additional options governing how Network Firewall handles the rule group. You can only use these for stateful rule groups.</p>
        */
    export interface StatefulRuleOptions {
            /**
                * <p>Indicates how to manage the order of the rule evaluation for the rule group. <code>DEFAULT_ACTION_ORDER</code> is
                *              the default behavior. Stateful rules are provided to the rule engine as Suricata compatible strings, and Suricata evaluates them
                *              based on certain settings. For more information, see
                *          <a href="https://docs.aws.amazon.com/network-firewall/latest/developerguide/suricata-rule-evaluation-order.html">Evaluation order for stateful rules</a> in the <i>Network Firewall Developer Guide</i>.
                *       </p>
                */
            RuleOrder?: RuleOrder | string;
    }
    export namespace StatefulRuleOptions {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: StatefulRuleOptions) => any;
    }
    /**
        * <p>The object that defines the rules in a rule group. This, along with <a>RuleGroupResponse</a>, define the rule group. You can retrieve all objects for a rule group by calling <a>DescribeRuleGroup</a>. </p>
        *          <p>Network Firewall uses a rule group to inspect and control network traffic.
        *     You define stateless rule groups to inspect individual packets and you define stateful rule groups to inspect packets in the context of their
        *     traffic flow. </p>
        *          <p>To use a rule group, you include it by reference in an Network Firewall firewall policy, then you use the policy in a firewall. You can reference a rule group from
        *     more than one firewall policy, and you can use a firewall policy in more than one firewall. </p>
        */
    export interface RuleGroup {
            /**
                * <p>Settings that are available for use in the rules in the rule group. You can only use
                *          these for stateful rule groups. </p>
                */
            RuleVariables?: RuleVariables;
            /**
                * <p>The stateful rules or stateless rules for the rule group. </p>
                */
            RulesSource: RulesSource | undefined;
            /**
                * <p>Additional options governing how Network Firewall handles stateful rules. The policies where you use your stateful
                *        rule group must have stateful rule options settings that are compatible with these settings.</p>
                */
            StatefulRuleOptions?: StatefulRuleOptions;
    }
    export namespace RuleGroup {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroup) => any;
    }
    /**
        * <p>High-level information about the managed rule group that your own rule group is copied from. You can use the the metadata to track version updates made to the originating rule group. You can retrieve all objects for a rule group by calling <a href="https://docs.aws.amazon.com/network-firewall/latest/APIReference/API_DescribeRuleGroup.html">DescribeRuleGroup</a>.</p>
        */
    export interface SourceMetadata {
            /**
                * <p>The Amazon Resource Name (ARN) of the rule group that your own rule group is copied from.</p>
                */
            SourceArn?: string;
            /**
                * <p>The update token of the Amazon Web Services managed rule group that your own rule group is copied from. To determine the update token for the managed rule group, call <a href="https://docs.aws.amazon.com/network-firewall/latest/APIReference/API_DescribeRuleGroup.html#networkfirewall-DescribeRuleGroup-response-UpdateToken">DescribeRuleGroup</a>.</p>
                */
            SourceUpdateToken?: string;
    }
    export namespace SourceMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: SourceMetadata) => any;
    }
    export enum RuleGroupType {
            STATEFUL = "STATEFUL",
            STATELESS = "STATELESS"
    }
    export interface CreateRuleGroupRequest {
            /**
                * <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
                */
            RuleGroupName: string | undefined;
            /**
                * <p>An object that defines the rule group rules. </p>
                *          <note>
                *             <p>You must provide either this rule group setting or a <code>Rules</code> setting, but not both. </p>
                *          </note>
                */
            RuleGroup?: RuleGroup;
            /**
                * <p>A string containing stateful rule group rules specifications in Suricata flat format, with one rule
                * per line. Use this to import your existing Suricata compatible rule groups. </p>
                *          <note>
                *             <p>You must provide either this rules setting or a populated <code>RuleGroup</code> setting, but not both. </p>
                *          </note>
                *          <p>You can provide your rule group specification in Suricata flat format through this setting when you create or update your rule group. The call
                * response returns a <a>RuleGroup</a> object that Network Firewall has populated from your string. </p>
                */
            Rules?: string;
            /**
                * <p>Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains
                * stateless rules. If it is stateful, it contains stateful rules. </p>
                */
            Type: RuleGroupType | string | undefined;
            /**
                * <p>A description of the rule group. </p>
                */
            Description?: string;
            /**
                * <p>The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation.
                *       When you update a rule group, you are limited to this capacity. When you reference a rule group
                *       from a firewall policy, Network Firewall reserves this capacity for the rule group. </p>
                *          <p>You can retrieve the capacity that would be required for a rule group before you create the rule group by calling
                *       <a>CreateRuleGroup</a> with <code>DryRun</code> set to <code>TRUE</code>. </p>
                *          <note>
                *             <p>You can't change or exceed this capacity when you update the rule group, so leave
                *             room for your rule group to grow. </p>
                *          </note>
                *          <p>
                *             <b>Capacity for a stateless rule group</b>
                *          </p>
                *          <p>For a stateless rule group, the capacity required is the sum of the capacity
                *          requirements of the individual rules that you expect to have in the rule group. </p>
                *          <p>To calculate the capacity requirement of a single rule, multiply the capacity
                *          requirement values of each of the rule's match settings:</p>
                *          <ul>
                *             <li>
                *                <p>A match setting with no criteria specified has a value of 1. </p>
                *             </li>
                *             <li>
                *                <p>A match setting with <code>Any</code> specified has a value of 1. </p>
                *             </li>
                *             <li>
                *                <p>All other match settings have a value equal to the number of elements provided in
                *                the setting. For example, a protocol setting ["UDP"] and a source setting
                *                ["10.0.0.0/24"] each have a value of 1. A protocol setting ["UDP","TCP"] has a value
                *                of 2. A source setting ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"] has a value of 3.
                *             </p>
                *             </li>
                *          </ul>
                *          <p>A rule with no criteria specified in any of its match settings has a capacity
                *          requirement of 1. A rule with protocol setting ["UDP","TCP"], source setting
                *          ["10.0.0.0/24","10.0.0.1/24","10.0.0.2/24"], and a single specification or no specification
                *          for each of the other match settings has a capacity requirement of 6. </p>
                *          <p>
                *             <b>Capacity for a stateful rule group</b>
                *          </p>
                *          <p>For
                *          a stateful rule group, the minimum capacity required is the number of individual rules that
                *          you expect to have in the rule group. </p>
                */
            Capacity: number | undefined;
            /**
                * <p>The key:value pairs to associate with the resource.</p>
                */
            Tags?: Tag[];
            /**
                * <p>Indicates whether you want Network Firewall to just check the validity of the request, rather than run the request. </p>
                *          <p>If set to <code>TRUE</code>, Network Firewall checks whether the request can run successfully,
                *          but doesn't actually make the requested changes. The call returns the value that the request would return if you ran it with
                *          dry run set to <code>FALSE</code>, but doesn't make additions or changes to your resources. This option allows you to make sure that you have
                *          the required permissions to run the request and that your request parameters are valid. </p>
                *          <p>If set to <code>FALSE</code>, Network Firewall makes the requested changes to your resources. </p>
                */
            DryRun?: boolean;
            /**
                * <p>A complex type that contains settings for encryption of your rule group resources.</p>
                */
            EncryptionConfiguration?: EncryptionConfiguration;
            /**
                * <p>A complex type that contains metadata about the rule group that your own rule group is copied from. You can use the metadata to keep track of updates made to the originating rule group.</p>
                */
            SourceMetadata?: SourceMetadata;
    }
    export namespace CreateRuleGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRuleGroupRequest) => any;
    }
    /**
        * <p>The high-level properties of a rule group. This, along with the <a>RuleGroup</a>, define the rule group. You can retrieve all objects for a rule group by calling <a>DescribeRuleGroup</a>. </p>
        */
    export interface RuleGroupResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the rule group.</p>
                *          <note>
                *             <p>If this response is for a create request that had <code>DryRun</code> set to
                *                <code>TRUE</code>, then this ARN is a placeholder that isn't attached to a valid
                *             resource.</p>
                *          </note>
                */
            RuleGroupArn: string | undefined;
            /**
                * <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
                */
            RuleGroupName: string | undefined;
            /**
                * <p>The unique identifier for the rule group. </p>
                */
            RuleGroupId: string | undefined;
            /**
                * <p>A description of the rule group. </p>
                */
            Description?: string;
            /**
                * <p>Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains
                * stateless rules. If it is stateful, it contains stateful rules. </p>
                */
            Type?: RuleGroupType | string;
            /**
                * <p>The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation.
                *       When you update a rule group, you are limited to this capacity. When you reference a rule group
                *       from a firewall policy, Network Firewall reserves this capacity for the rule group. </p>
                *          <p>You can retrieve the capacity that would be required for a rule group before you create the rule group by calling
                *       <a>CreateRuleGroup</a> with <code>DryRun</code> set to <code>TRUE</code>. </p>
                */
            Capacity?: number;
            /**
                * <p>Detailed information about the current status of a rule group. </p>
                */
            RuleGroupStatus?: ResourceStatus | string;
            /**
                * <p>The key:value pairs to associate with the resource.</p>
                */
            Tags?: Tag[];
            /**
                * <p>The number of capacity units currently consumed by the rule group rules. </p>
                */
            ConsumedCapacity?: number;
            /**
                * <p>The number of firewall policies that use this rule group.</p>
                */
            NumberOfAssociations?: number;
            /**
                * <p>A complex type that contains the Amazon Web Services KMS encryption configuration settings for your rule group.</p>
                */
            EncryptionConfiguration?: EncryptionConfiguration;
            /**
                * <p>A complex type that contains metadata about the rule group that your own rule group is copied from. You can use the metadata to track the version updates made to the originating rule group.</p>
                */
            SourceMetadata?: SourceMetadata;
            /**
                * <p>The Amazon resource name (ARN) of the Amazon Simple Notification Service SNS topic that's
                * used to record changes to the managed rule group. You can subscribe to the SNS topic to receive
                * notifications when the managed rule group is modified, such as for new versions and for version
                * expiration. For more information, see the <a href="https://docs.aws.amazon.com/sns/latest/dg/welcome.html">Amazon Simple Notification Service Developer Guide.</a>.</p>
                */
            SnsTopic?: string;
            /**
                * <p>The last time that the rule group was changed.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace RuleGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupResponse) => any;
    }
    export interface CreateRuleGroupResponse {
            /**
                * <p>A token used for optimistic locking. Network Firewall returns a token to your requests that access the rule group. The token marks the state of the rule group resource at the time of the request. </p>
                *          <p>To make changes to the rule group, you provide the token in your request. Network Firewall uses the token to ensure that the rule group hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the rule group again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken: string | undefined;
            /**
                * <p>The high-level properties of a rule group. This, along with the <a>RuleGroup</a>, define the rule group. You can retrieve all objects for a rule group by calling <a>DescribeRuleGroup</a>. </p>
                */
            RuleGroupResponse: RuleGroupResponse | undefined;
    }
    export namespace CreateRuleGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: CreateRuleGroupResponse) => any;
    }
    export interface DeleteFirewallRequest {
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallArn?: string;
    }
    export namespace DeleteFirewallRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFirewallRequest) => any;
    }
    export interface DeleteFirewallResponse {
            /**
                * <p>The firewall defines the configuration settings for an Network Firewall firewall. These settings include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall Amazon Web Services resource. </p>
                *          <p>The status of the firewall, for example whether it's ready to filter network traffic,
                *          is provided in the corresponding <a>FirewallStatus</a>. You can retrieve both
                *          objects by calling <a>DescribeFirewall</a>.</p>
                */
            Firewall?: Firewall;
            /**
                * <p>Detailed information about the current status of a <a>Firewall</a>. You can retrieve this for a firewall by calling <a>DescribeFirewall</a> and providing the firewall name and ARN.</p>
                */
            FirewallStatus?: FirewallStatus;
    }
    export namespace DeleteFirewallResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFirewallResponse) => any;
    }
    /**
        * <p>The operation you requested isn't supported by Network Firewall. </p>
        */
    export class UnsupportedOperationException extends __BaseException {
            readonly name: "UnsupportedOperationException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<UnsupportedOperationException, __BaseException>);
    }
    export interface DeleteFirewallPolicyRequest {
            /**
                * <p>The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it.</p>
                *          <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallPolicyName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall policy.</p>
                *          <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallPolicyArn?: string;
    }
    export namespace DeleteFirewallPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFirewallPolicyRequest) => any;
    }
    export interface DeleteFirewallPolicyResponse {
            /**
                * <p>The object containing the definition of the <a>FirewallPolicyResponse</a>
                *          that you asked to delete. </p>
                */
            FirewallPolicyResponse: FirewallPolicyResponse | undefined;
    }
    export namespace DeleteFirewallPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteFirewallPolicyResponse) => any;
    }
    export interface DeleteResourcePolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the rule group or firewall policy whose resource policy you want to delete. </p>
                */
            ResourceArn: string | undefined;
    }
    export namespace DeleteResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourcePolicyRequest) => any;
    }
    export interface DeleteResourcePolicyResponse {
    }
    export namespace DeleteResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteResourcePolicyResponse) => any;
    }
    /**
        * <p>The policy statement failed validation.</p>
        */
    export class InvalidResourcePolicyException extends __BaseException {
            readonly name: "InvalidResourcePolicyException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<InvalidResourcePolicyException, __BaseException>);
    }
    export interface DeleteRuleGroupRequest {
            /**
                * <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
                *          <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            RuleGroupName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the rule group.</p>
                *          <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            RuleGroupArn?: string;
            /**
                * <p>Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains
                * stateless rules. If it is stateful, it contains stateful rules. </p>
                *          <note>
                *             <p>This setting is required for requests that do not include the <code>RuleGroupARN</code>.</p>
                *          </note>
                */
            Type?: RuleGroupType | string;
    }
    export namespace DeleteRuleGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRuleGroupRequest) => any;
    }
    export interface DeleteRuleGroupResponse {
            /**
                * <p>The high-level properties of a rule group. This, along with the <a>RuleGroup</a>, define the rule group. You can retrieve all objects for a rule group by calling <a>DescribeRuleGroup</a>. </p>
                */
            RuleGroupResponse: RuleGroupResponse | undefined;
    }
    export namespace DeleteRuleGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DeleteRuleGroupResponse) => any;
    }
    export interface DescribeFirewallRequest {
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallArn?: string;
    }
    export namespace DescribeFirewallRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFirewallRequest) => any;
    }
    export interface DescribeFirewallResponse {
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
            /**
                * <p>The configuration settings for the firewall. These settings include the firewall policy and the subnets in your VPC to use for the firewall endpoints. </p>
                */
            Firewall?: Firewall;
            /**
                * <p>Detailed information about the current status of a <a>Firewall</a>. You can retrieve this for a firewall by calling <a>DescribeFirewall</a> and providing the firewall name and ARN.</p>
                */
            FirewallStatus?: FirewallStatus;
    }
    export namespace DescribeFirewallResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFirewallResponse) => any;
    }
    export interface DescribeFirewallPolicyRequest {
            /**
                * <p>The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallPolicyName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall policy.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallPolicyArn?: string;
    }
    export namespace DescribeFirewallPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFirewallPolicyRequest) => any;
    }
    export interface DescribeFirewallPolicyResponse {
            /**
                * <p>A token used for optimistic locking. Network Firewall returns a token to your requests that access the firewall policy. The token marks the state of the policy resource at the time of the request. </p>
                *          <p>To make changes to the policy, you provide the token in your request. Network Firewall uses the token to ensure that the policy hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall policy again to get a current copy of it with current token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken: string | undefined;
            /**
                * <p>The high-level properties of a firewall policy. This, along with the <a>FirewallPolicy</a>, define the policy. You can retrieve all objects for a firewall policy by calling <a>DescribeFirewallPolicy</a>. </p>
                */
            FirewallPolicyResponse: FirewallPolicyResponse | undefined;
            /**
                * <p>The policy for the specified firewall policy. </p>
                */
            FirewallPolicy?: FirewallPolicy;
    }
    export namespace DescribeFirewallPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeFirewallPolicyResponse) => any;
    }
    export interface DescribeLoggingConfigurationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallName?: string;
    }
    export namespace DescribeLoggingConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLoggingConfigurationRequest) => any;
    }
    export enum LogDestinationType {
            CLOUDWATCH_LOGS = "CloudWatchLogs",
            KINESIS_DATA_FIREHOSE = "KinesisDataFirehose",
            S3 = "S3"
    }
    export enum LogType {
            ALERT = "ALERT",
            FLOW = "FLOW"
    }
    /**
        * <p>Defines where Network Firewall sends logs for the firewall for one log type. This is used
        *          in <a>LoggingConfiguration</a>. You can send each type of log to an Amazon S3 bucket, a CloudWatch log group, or a Kinesis Data Firehose delivery stream.</p>
        *          <p>Network Firewall generates logs for stateful rule groups. You can save alert and flow log
        *           types. The stateful rules engine records flow logs for all network traffic that it receives.
        *           It records alert logs for traffic that matches stateful rules that have the rule
        *           action set to <code>DROP</code> or <code>ALERT</code>. </p>
        */
    export interface LogDestinationConfig {
            /**
                * <p>The type of log to send. Alert logs report traffic that matches a <a>StatefulRule</a> with an action setting that sends an alert log message. Flow logs are
                *          standard network traffic flow logs. </p>
                */
            LogType: LogType | string | undefined;
            /**
                * <p>The type of storage destination to send these logs to. You can send logs to an Amazon S3 bucket,
                *          a CloudWatch log group, or a Kinesis Data Firehose delivery stream.</p>
                */
            LogDestinationType: LogDestinationType | string | undefined;
            /**
                * <p>The named location for the logs, provided in a key:value mapping that is specific to the
                *          chosen destination type. </p>
                *          <ul>
                *             <li>
                *                <p>For an Amazon S3 bucket, provide the name of the bucket, with key <code>bucketName</code>,
                *                and optionally provide a prefix, with key <code>prefix</code>. The following example
                *                specifies an Amazon S3 bucket named
                *                <code>DOC-EXAMPLE-BUCKET</code> and the prefix <code>alerts</code>: </p>
                *                <p>
                *                   <code>"LogDestination": { "bucketName": "DOC-EXAMPLE-BUCKET", "prefix": "alerts"
                *                   }</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>For a CloudWatch log group, provide the name of the CloudWatch log group, with key
                *                   <code>logGroup</code>. The following example specifies a log group named
                *                   <code>alert-log-group</code>: </p>
                *                <p>
                *                   <code>"LogDestination": { "logGroup": "alert-log-group" }</code>
                *                </p>
                *             </li>
                *             <li>
                *                <p>For a Kinesis Data Firehose delivery stream, provide the name of the delivery stream, with key
                *                   <code>deliveryStream</code>. The following example specifies a delivery stream
                *                named <code>alert-delivery-stream</code>: </p>
                *                <p>
                *                   <code>"LogDestination": { "deliveryStream": "alert-delivery-stream"
                *                }</code>
                *                </p>
                *             </li>
                *          </ul>
                */
            LogDestination: Record<string, string> | undefined;
    }
    export namespace LogDestinationConfig {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LogDestinationConfig) => any;
    }
    /**
        * <p>Defines how Network Firewall performs logging for a <a>Firewall</a>. </p>
        */
    export interface LoggingConfiguration {
            /**
                * <p>Defines the logging destinations for the logs for a firewall. Network Firewall generates
                *          logs for stateful rule groups. </p>
                */
            LogDestinationConfigs: LogDestinationConfig[] | undefined;
    }
    export namespace LoggingConfiguration {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: LoggingConfiguration) => any;
    }
    export interface DescribeLoggingConfigurationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                */
            FirewallArn?: string;
            /**
                * <p>Defines how Network Firewall performs logging for a <a>Firewall</a>. </p>
                */
            LoggingConfiguration?: LoggingConfiguration;
    }
    export namespace DescribeLoggingConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeLoggingConfigurationResponse) => any;
    }
    export interface DescribeResourcePolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the rule group or firewall policy whose resource policy you want to retrieve. </p>
                */
            ResourceArn: string | undefined;
    }
    export namespace DescribeResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeResourcePolicyRequest) => any;
    }
    export interface DescribeResourcePolicyResponse {
            /**
                * <p>The IAM policy for the resource. </p>
                */
            Policy?: string;
    }
    export namespace DescribeResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeResourcePolicyResponse) => any;
    }
    export interface DescribeRuleGroupRequest {
            /**
                * <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            RuleGroupName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the rule group.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            RuleGroupArn?: string;
            /**
                * <p>Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains
                * stateless rules. If it is stateful, it contains stateful rules. </p>
                *            <note>
                *             <p>This setting is required for requests that do not include the <code>RuleGroupARN</code>.</p>
                *          </note>
                */
            Type?: RuleGroupType | string;
    }
    export namespace DescribeRuleGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRuleGroupRequest) => any;
    }
    export interface DescribeRuleGroupResponse {
            /**
                * <p>A token used for optimistic locking. Network Firewall returns a token to your requests that access the rule group. The token marks the state of the rule group resource at the time of the request. </p>
                *          <p>To make changes to the rule group, you provide the token in your request. Network Firewall uses the token to ensure that the rule group hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the rule group again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken: string | undefined;
            /**
                * <p>The object that defines the rules in a rule group. This, along with <a>RuleGroupResponse</a>, define the rule group. You can retrieve all objects for a rule group by calling <a>DescribeRuleGroup</a>. </p>
                *          <p>Network Firewall uses a rule group to inspect and control network traffic.
                *     You define stateless rule groups to inspect individual packets and you define stateful rule groups to inspect packets in the context of their
                *     traffic flow. </p>
                *          <p>To use a rule group, you include it by reference in an Network Firewall firewall policy, then you use the policy in a firewall. You can reference a rule group from
                *     more than one firewall policy, and you can use a firewall policy in more than one firewall. </p>
                */
            RuleGroup?: RuleGroup;
            /**
                * <p>The high-level properties of a rule group. This, along with the <a>RuleGroup</a>, define the rule group. You can retrieve all objects for a rule group by calling <a>DescribeRuleGroup</a>. </p>
                */
            RuleGroupResponse: RuleGroupResponse | undefined;
    }
    export namespace DescribeRuleGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRuleGroupResponse) => any;
    }
    export interface DescribeRuleGroupMetadataRequest {
            /**
                * <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
                *          <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            RuleGroupName?: string;
            /**
                * <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
                *          <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            RuleGroupArn?: string;
            /**
                * <p>Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains
                * stateless rules. If it is stateful, it contains stateful rules. </p>
                *          <note>
                *             <p>This setting is required for requests that do not include the <code>RuleGroupARN</code>.</p>
                *          </note>
                */
            Type?: RuleGroupType | string;
    }
    export namespace DescribeRuleGroupMetadataRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRuleGroupMetadataRequest) => any;
    }
    export interface DescribeRuleGroupMetadataResponse {
            /**
                * <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
                *          <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            RuleGroupArn: string | undefined;
            /**
                * <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
                *          <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            RuleGroupName: string | undefined;
            /**
                * <p>Returns the metadata objects for the specified rule group.
                *       </p>
                */
            Description?: string;
            /**
                * <p>Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains
                * stateless rules. If it is stateful, it contains stateful rules. </p>
                *          <note>
                *             <p>This setting is required for requests that do not include the <code>RuleGroupARN</code>.</p>
                *          </note>
                */
            Type?: RuleGroupType | string;
            /**
                * <p>The maximum operating resources that this rule group can use. Rule group capacity is fixed at creation.
                *       When you update a rule group, you are limited to this capacity. When you reference a rule group
                *       from a firewall policy, Network Firewall reserves this capacity for the rule group. </p>
                *          <p>You can retrieve the capacity that would be required for a rule group before you create the rule group by calling
                *       <a>CreateRuleGroup</a> with <code>DryRun</code> set to <code>TRUE</code>. </p>
                */
            Capacity?: number;
            /**
                * <p>Additional options governing how Network Firewall handles the rule group. You can only use these for stateful rule groups.</p>
                */
            StatefulRuleOptions?: StatefulRuleOptions;
            /**
                * <p>The last time that the rule group was changed.</p>
                */
            LastModifiedTime?: Date;
    }
    export namespace DescribeRuleGroupMetadataResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DescribeRuleGroupMetadataResponse) => any;
    }
    export interface DisassociateSubnetsRequest {
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallName?: string;
            /**
                * <p>The unique identifiers for the subnets that you want to disassociate. </p>
                */
            SubnetIds: string[] | undefined;
    }
    export namespace DisassociateSubnetsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateSubnetsRequest) => any;
    }
    export interface DisassociateSubnetsResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                */
            FirewallName?: string;
            /**
                * <p>The IDs of the subnets that are associated with the firewall. </p>
                */
            SubnetMappings?: SubnetMapping[];
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
    }
    export namespace DisassociateSubnetsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: DisassociateSubnetsResponse) => any;
    }
    /**
        * <p>High-level information about a firewall, returned by operations like create and
        *          describe. You can use the information provided in the metadata to retrieve and manage a
        *          firewall.</p>
        */
    export interface FirewallMetadata {
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                */
            FirewallName?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                */
            FirewallArn?: string;
    }
    export namespace FirewallMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirewallMetadata) => any;
    }
    /**
        * <p>High-level information about a firewall policy, returned by operations like create and
        *          describe. You can use the information provided in the metadata to retrieve and manage a
        *          firewall policy. You can retrieve all objects for a firewall policy by calling <a>DescribeFirewallPolicy</a>. </p>
        */
    export interface FirewallPolicyMetadata {
            /**
                * <p>The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it.</p>
                */
            Name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall policy.</p>
                */
            Arn?: string;
    }
    export namespace FirewallPolicyMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: FirewallPolicyMetadata) => any;
    }
    export interface ListFirewallPoliciesRequest {
            /**
                * <p>When you request a list of objects with a <code>MaxResults</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the maximum you requested, Network Firewall returns a <code>NextToken</code>
                *          value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of objects that you want Network Firewall to return for this request. If more
                *           objects are available, in the response, Network Firewall provides a
                *          <code>NextToken</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                */
            MaxResults?: number;
    }
    export namespace ListFirewallPoliciesRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFirewallPoliciesRequest) => any;
    }
    export interface ListFirewallPoliciesResponse {
            /**
                * <p>When you request a list of objects with a <code>MaxResults</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the maximum you requested, Network Firewall returns a <code>NextToken</code>
                *          value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The metadata for the firewall policies. Depending on your setting for max results and
                *          the number of firewall policies that you have, this might not be the full list. </p>
                */
            FirewallPolicies?: FirewallPolicyMetadata[];
    }
    export namespace ListFirewallPoliciesResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFirewallPoliciesResponse) => any;
    }
    export interface ListFirewallsRequest {
            /**
                * <p>When you request a list of objects with a <code>MaxResults</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the maximum you requested, Network Firewall returns a <code>NextToken</code>
                *          value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The unique identifiers of the VPCs that you want Network Firewall to retrieve the firewalls
                *          for. Leave this blank to retrieve all firewalls that you have defined.</p>
                */
            VpcIds?: string[];
            /**
                * <p>The maximum number of objects that you want Network Firewall to return for this request. If more
                *           objects are available, in the response, Network Firewall provides a
                *          <code>NextToken</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                */
            MaxResults?: number;
    }
    export namespace ListFirewallsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFirewallsRequest) => any;
    }
    export interface ListFirewallsResponse {
            /**
                * <p>When you request a list of objects with a <code>MaxResults</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the maximum you requested, Network Firewall returns a <code>NextToken</code>
                *          value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The firewall metadata objects for the VPCs that you specified. Depending on your setting
                *          for max results and the number of firewalls you have, a single call might not be the full
                *          list. </p>
                */
            Firewalls?: FirewallMetadata[];
    }
    export namespace ListFirewallsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListFirewallsResponse) => any;
    }
    export enum ResourceManagedType {
            AWS_MANAGED_DOMAIN_LISTS = "AWS_MANAGED_DOMAIN_LISTS",
            AWS_MANAGED_THREAT_SIGNATURES = "AWS_MANAGED_THREAT_SIGNATURES"
    }
    export enum ResourceManagedStatus {
            ACCOUNT = "ACCOUNT",
            MANAGED = "MANAGED"
    }
    export interface ListRuleGroupsRequest {
            /**
                * <p>When you request a list of objects with a <code>MaxResults</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the maximum you requested, Network Firewall returns a <code>NextToken</code>
                *          value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of objects that you want Network Firewall to return for this request. If more
                *           objects are available, in the response, Network Firewall provides a
                *          <code>NextToken</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                */
            MaxResults?: number;
            /**
                * <p>The scope of the request. The default setting of <code>ACCOUNT</code> or a setting of
                *          <code>NULL</code> returns all of the rule groups in your account. A setting of
                *          <code>MANAGED</code> returns all available managed rule groups.</p>
                */
            Scope?: ResourceManagedStatus | string;
            /**
                * <p>Indicates the general category of the Amazon Web Services managed rule group.</p>
                */
            ManagedType?: ResourceManagedType | string;
            /**
                * <p>Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains stateless rules. If it is stateful, it contains stateful rules.</p>
                */
            Type?: RuleGroupType | string;
    }
    export namespace ListRuleGroupsRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRuleGroupsRequest) => any;
    }
    /**
        * <p>High-level information about a rule group, returned by <a>ListRuleGroups</a>.
        *          You can use the information provided in the metadata to retrieve and manage a
        *          rule group.</p>
        */
    export interface RuleGroupMetadata {
            /**
                * <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
                */
            Name?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the rule group.</p>
                */
            Arn?: string;
    }
    export namespace RuleGroupMetadata {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: RuleGroupMetadata) => any;
    }
    export interface ListRuleGroupsResponse {
            /**
                * <p>When you request a list of objects with a <code>MaxResults</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the maximum you requested, Network Firewall returns a <code>NextToken</code>
                *          value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The rule group metadata objects that you've defined. Depending on your setting for max
                *          results and the number of rule groups, this might not be the full list. </p>
                */
            RuleGroups?: RuleGroupMetadata[];
    }
    export namespace ListRuleGroupsResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListRuleGroupsResponse) => any;
    }
    export interface ListTagsForResourceRequest {
            /**
                * <p>When you request a list of objects with a <code>MaxResults</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the maximum you requested, Network Firewall returns a <code>NextToken</code>
                *          value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The maximum number of objects that you want Network Firewall to return for this request. If more
                *           objects are available, in the response, Network Firewall provides a
                *          <code>NextToken</code> value that you can use in a subsequent call to get the next batch of objects.</p>
                */
            MaxResults?: number;
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
    }
    export namespace ListTagsForResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceRequest) => any;
    }
    export interface ListTagsForResourceResponse {
            /**
                * <p>When you request a list of objects with a <code>MaxResults</code> setting, if the number of objects that are still available
                *          for retrieval exceeds the maximum you requested, Network Firewall returns a <code>NextToken</code>
                *          value in the response. To retrieve the next batch of objects, use the token returned from the prior request in your next request.</p>
                */
            NextToken?: string;
            /**
                * <p>The tags that are associated with the resource. </p>
                */
            Tags?: Tag[];
    }
    export namespace ListTagsForResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
    }
    /**
        * <p>Unable to send logs to a configured logging destination. </p>
        */
    export class LogDestinationPermissionException extends __BaseException {
            readonly name: "LogDestinationPermissionException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<LogDestinationPermissionException, __BaseException>);
    }
    export interface PutResourcePolicyRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the account that you want to share rule groups and firewall policies with.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p>The IAM policy statement that lists the accounts that you want to share your rule group or firewall policy with
                *            and the operations that you want the accounts to be able to perform. </p>
                *          <p>For a rule group resource, you can specify the following operations in the Actions section of the statement:</p>
                *          <ul>
                *             <li>
                *                <p>network-firewall:CreateFirewallPolicy</p>
                *             </li>
                *             <li>
                *                <p>network-firewall:UpdateFirewallPolicy</p>
                *             </li>
                *             <li>
                *                <p>network-firewall:ListRuleGroups</p>
                *             </li>
                *          </ul>
                *          <p>For a firewall policy resource, you can specify the following operations in the Actions section of the statement:</p>
                *          <ul>
                *             <li>
                *                <p>network-firewall:CreateFirewall</p>
                *             </li>
                *             <li>
                *                <p>network-firewall:UpdateFirewall</p>
                *             </li>
                *             <li>
                *                <p>network-firewall:AssociateFirewallPolicy</p>
                *             </li>
                *             <li>
                *                <p>network-firewall:ListFirewallPolicies</p>
                *             </li>
                *          </ul>
                *          <p>In the Resource section of the statement, you specify the ARNs for the rule groups and firewall policies that you want to share with the account that you specified in <code>Arn</code>.</p>
                */
            Policy: string | undefined;
    }
    export namespace PutResourcePolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutResourcePolicyRequest) => any;
    }
    export interface PutResourcePolicyResponse {
    }
    export namespace PutResourcePolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: PutResourcePolicyResponse) => any;
    }
    export interface TagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p></p>
                */
            Tags: Tag[] | undefined;
    }
    export namespace TagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceRequest) => any;
    }
    export interface TagResourceResponse {
    }
    export namespace TagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: TagResourceResponse) => any;
    }
    export interface UntagResourceRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the resource.</p>
                */
            ResourceArn: string | undefined;
            /**
                * <p></p>
                */
            TagKeys: string[] | undefined;
    }
    export namespace UntagResourceRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceRequest) => any;
    }
    export interface UntagResourceResponse {
    }
    export namespace UntagResourceResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UntagResourceResponse) => any;
    }
    /**
        * <p>Unable to change the resource because your account doesn't own it. </p>
        */
    export class ResourceOwnerCheckException extends __BaseException {
            readonly name: "ResourceOwnerCheckException";
            readonly $fault: "client";
            Message?: string;
            /**
                * @internal
                */
            constructor(opts: __ExceptionOptionType<ResourceOwnerCheckException, __BaseException>);
    }
    export interface UpdateFirewallDeleteProtectionRequest {
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallName?: string;
            /**
                * <p>A flag indicating whether it is possible to delete the firewall. A setting of <code>TRUE</code> indicates
                *          that the firewall is protected against deletion. Use this setting to protect against
                *          accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to <code>TRUE</code>.</p>
                */
            DeleteProtection: boolean | undefined;
    }
    export namespace UpdateFirewallDeleteProtectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFirewallDeleteProtectionRequest) => any;
    }
    export interface UpdateFirewallDeleteProtectionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                */
            FirewallName?: string;
            /**
                * <p>A flag indicating whether it is possible to delete the firewall. A setting of <code>TRUE</code> indicates
                *          that the firewall is protected against deletion. Use this setting to protect against
                *          accidentally deleting a firewall that is in use. When you create a firewall, the operation initializes this flag to <code>TRUE</code>.</p>
                */
            DeleteProtection?: boolean;
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
    }
    export namespace UpdateFirewallDeleteProtectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFirewallDeleteProtectionResponse) => any;
    }
    export interface UpdateFirewallDescriptionRequest {
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallName?: string;
            /**
                * <p>The new description for the firewall. If you omit this setting, Network Firewall removes
                *          the description for the firewall.</p>
                */
            Description?: string;
    }
    export namespace UpdateFirewallDescriptionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFirewallDescriptionRequest) => any;
    }
    export interface UpdateFirewallDescriptionResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                */
            FirewallName?: string;
            /**
                * <p>A description of the firewall.</p>
                */
            Description?: string;
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
    }
    export namespace UpdateFirewallDescriptionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFirewallDescriptionResponse) => any;
    }
    export interface UpdateFirewallEncryptionConfigurationRequest {
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                */
            FirewallName?: string;
            /**
                * <p>A complex type that contains optional Amazon Web Services Key Management Service (KMS) encryption settings for your Network Firewall resources. Your data is encrypted by default with an Amazon Web Services owned key that Amazon Web Services owns and manages for you. You can use either the Amazon Web Services owned key, or provide your own customer managed key. To learn more about KMS encryption of your Network Firewall resources, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-encryption-at-rest.html">Encryption at rest with Amazon Web Services Key Managment Service</a> in the <i>Network Firewall Developer Guide</i>.</p>
                */
            EncryptionConfiguration?: EncryptionConfiguration;
    }
    export namespace UpdateFirewallEncryptionConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFirewallEncryptionConfigurationRequest) => any;
    }
    export interface UpdateFirewallEncryptionConfigurationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                */
            FirewallName?: string;
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
            /**
                * <p>A complex type that contains optional Amazon Web Services Key Management Service (KMS) encryption settings for your Network Firewall resources. Your data is encrypted by default with an Amazon Web Services owned key that Amazon Web Services owns and manages for you. You can use either the Amazon Web Services owned key, or provide your own customer managed key. To learn more about KMS encryption of your Network Firewall resources, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-encryption-at-rest.html">Encryption at rest with Amazon Web Services Key Managment Service</a> in the <i>Network Firewall Developer Guide</i>.</p>
                */
            EncryptionConfiguration?: EncryptionConfiguration;
    }
    export namespace UpdateFirewallEncryptionConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFirewallEncryptionConfigurationResponse) => any;
    }
    export interface UpdateFirewallPolicyRequest {
            /**
                * <p>A token used for optimistic locking. Network Firewall returns a token to your requests that access the firewall policy. The token marks the state of the policy resource at the time of the request. </p>
                *          <p>To make changes to the policy, you provide the token in your request. Network Firewall uses the token to ensure that the policy hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall policy again to get a current copy of it with current token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall policy.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallPolicyArn?: string;
            /**
                * <p>The descriptive name of the firewall policy. You can't change the name of a firewall policy after you create it.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallPolicyName?: string;
            /**
                * <p>The updated firewall policy to use for the firewall. </p>
                */
            FirewallPolicy: FirewallPolicy | undefined;
            /**
                * <p>A description of the firewall policy.</p>
                */
            Description?: string;
            /**
                * <p>Indicates whether you want Network Firewall to just check the validity of the request, rather than run the request. </p>
                *          <p>If set to <code>TRUE</code>, Network Firewall checks whether the request can run successfully,
                *          but doesn't actually make the requested changes. The call returns the value that the request would return if you ran it with
                *          dry run set to <code>FALSE</code>, but doesn't make additions or changes to your resources. This option allows you to make sure that you have
                *          the required permissions to run the request and that your request parameters are valid. </p>
                *          <p>If set to <code>FALSE</code>, Network Firewall makes the requested changes to your resources. </p>
                */
            DryRun?: boolean;
            /**
                * <p>A complex type that contains settings for encryption of your firewall policy resources.</p>
                */
            EncryptionConfiguration?: EncryptionConfiguration;
    }
    export namespace UpdateFirewallPolicyRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFirewallPolicyRequest) => any;
    }
    export interface UpdateFirewallPolicyResponse {
            /**
                * <p>A token used for optimistic locking. Network Firewall returns a token to your requests that access the firewall policy. The token marks the state of the policy resource at the time of the request. </p>
                *          <p>To make changes to the policy, you provide the token in your request. Network Firewall uses the token to ensure that the policy hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall policy again to get a current copy of it with current token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken: string | undefined;
            /**
                * <p>The high-level properties of a firewall policy. This, along with the <a>FirewallPolicy</a>, define the policy. You can retrieve all objects for a firewall policy by calling <a>DescribeFirewallPolicy</a>. </p>
                */
            FirewallPolicyResponse: FirewallPolicyResponse | undefined;
    }
    export namespace UpdateFirewallPolicyResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFirewallPolicyResponse) => any;
    }
    export interface UpdateFirewallPolicyChangeProtectionRequest {
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallName?: string;
            /**
                * <p>A setting indicating whether the firewall is protected against a change to the firewall policy association.
                *          Use this setting to protect against
                *          accidentally modifying the firewall policy for a firewall that is in use. When you create a firewall, the operation initializes this setting to <code>TRUE</code>.</p>
                */
            FirewallPolicyChangeProtection: boolean | undefined;
    }
    export namespace UpdateFirewallPolicyChangeProtectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFirewallPolicyChangeProtectionRequest) => any;
    }
    export interface UpdateFirewallPolicyChangeProtectionResponse {
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                */
            FirewallName?: string;
            /**
                * <p>A setting indicating whether the firewall is protected against a change to the firewall policy association.
                *          Use this setting to protect against
                *          accidentally modifying the firewall policy for a firewall that is in use. When you create a firewall, the operation initializes this setting to <code>TRUE</code>.</p>
                */
            FirewallPolicyChangeProtection?: boolean;
    }
    export namespace UpdateFirewallPolicyChangeProtectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateFirewallPolicyChangeProtectionResponse) => any;
    }
    export interface UpdateLoggingConfigurationRequest {
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallName?: string;
            /**
                * <p>Defines how Network Firewall performs logging for a firewall. If you omit this setting,
                *          Network Firewall disables logging for the firewall.</p>
                */
            LoggingConfiguration?: LoggingConfiguration;
    }
    export namespace UpdateLoggingConfigurationRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLoggingConfigurationRequest) => any;
    }
    export interface UpdateLoggingConfigurationResponse {
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                */
            FirewallName?: string;
            /**
                * <p>Defines how Network Firewall performs logging for a <a>Firewall</a>. </p>
                */
            LoggingConfiguration?: LoggingConfiguration;
    }
    export namespace UpdateLoggingConfigurationResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateLoggingConfigurationResponse) => any;
    }
    export interface UpdateRuleGroupRequest {
            /**
                * <p>A token used for optimistic locking. Network Firewall returns a token to your requests that access the rule group. The token marks the state of the rule group resource at the time of the request. </p>
                *          <p>To make changes to the rule group, you provide the token in your request. Network Firewall uses the token to ensure that the rule group hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the rule group again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken: string | undefined;
            /**
                * <p>The Amazon Resource Name (ARN) of the rule group.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            RuleGroupArn?: string;
            /**
                * <p>The descriptive name of the rule group. You can't change the name of a rule group after you create it.</p>
                *           <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            RuleGroupName?: string;
            /**
                * <p>An object that defines the rule group rules. </p>
                *          <note>
                *             <p>You must provide either this rule group setting or a <code>Rules</code> setting, but not both. </p>
                *          </note>
                */
            RuleGroup?: RuleGroup;
            /**
                * <p>A string containing stateful rule group rules specifications in Suricata flat format, with one rule
                * per line. Use this to import your existing Suricata compatible rule groups. </p>
                *          <note>
                *             <p>You must provide either this rules setting or a populated <code>RuleGroup</code> setting, but not both. </p>
                *          </note>
                *          <p>You can provide your rule group specification in Suricata flat format through this setting when you create or update your rule group. The call
                * response returns a <a>RuleGroup</a> object that Network Firewall has populated from your string. </p>
                */
            Rules?: string;
            /**
                * <p>Indicates whether the rule group is stateless or stateful. If the rule group is stateless, it contains
                * stateless rules. If it is stateful, it contains stateful rules. </p>
                *            <note>
                *             <p>This setting is required for requests that do not include the <code>RuleGroupARN</code>.</p>
                *          </note>
                */
            Type?: RuleGroupType | string;
            /**
                * <p>A description of the rule group. </p>
                */
            Description?: string;
            /**
                * <p>Indicates whether you want Network Firewall to just check the validity of the request, rather than run the request. </p>
                *          <p>If set to <code>TRUE</code>, Network Firewall checks whether the request can run successfully,
                *          but doesn't actually make the requested changes. The call returns the value that the request would return if you ran it with
                *          dry run set to <code>FALSE</code>, but doesn't make additions or changes to your resources. This option allows you to make sure that you have
                *          the required permissions to run the request and that your request parameters are valid. </p>
                *          <p>If set to <code>FALSE</code>, Network Firewall makes the requested changes to your resources. </p>
                */
            DryRun?: boolean;
            /**
                * <p>A complex type that contains settings for encryption of your rule group resources.</p>
                */
            EncryptionConfiguration?: EncryptionConfiguration;
            /**
                * <p>A complex type that contains metadata about the rule group that your own rule group is copied from. You can use the metadata to keep track of updates made to the originating rule group.</p>
                */
            SourceMetadata?: SourceMetadata;
    }
    export namespace UpdateRuleGroupRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRuleGroupRequest) => any;
    }
    export interface UpdateRuleGroupResponse {
            /**
                * <p>A token used for optimistic locking. Network Firewall returns a token to your requests that access the rule group. The token marks the state of the rule group resource at the time of the request. </p>
                *          <p>To make changes to the rule group, you provide the token in your request. Network Firewall uses the token to ensure that the rule group hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the rule group again to get a current copy of it with a current token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken: string | undefined;
            /**
                * <p>The high-level properties of a rule group. This, along with the <a>RuleGroup</a>, define the rule group. You can retrieve all objects for a rule group by calling <a>DescribeRuleGroup</a>. </p>
                */
            RuleGroupResponse: RuleGroupResponse | undefined;
    }
    export namespace UpdateRuleGroupResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateRuleGroupResponse) => any;
    }
    export interface UpdateSubnetChangeProtectionRequest {
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                *          <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                *            <p>You must specify the ARN or the name, and you can specify both. </p>
                */
            FirewallName?: string;
            /**
                * <p>A setting indicating whether the firewall is protected against changes to the subnet associations.
                *          Use this setting to protect against
                *          accidentally modifying the subnet associations for a firewall that is in use. When you create a firewall, the operation initializes this setting to <code>TRUE</code>.</p>
                */
            SubnetChangeProtection: boolean | undefined;
    }
    export namespace UpdateSubnetChangeProtectionRequest {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSubnetChangeProtectionRequest) => any;
    }
    export interface UpdateSubnetChangeProtectionResponse {
            /**
                * <p>An optional token that you can use for optimistic locking. Network Firewall returns a token to your requests that access the firewall. The token marks the state of the firewall resource at the time of the request. </p>
                *          <p>To make an unconditional change to the firewall, omit the token in your update request. Without the token, Network Firewall performs your updates regardless of whether the firewall has changed since you last retrieved it.</p>
                *          <p>To make a conditional change to the firewall, provide the token in your update request. Network Firewall uses the token to ensure that the firewall hasn't changed since you last retrieved it. If it has changed, the operation fails with an <code>InvalidTokenException</code>. If this happens, retrieve the firewall again to get a current copy of it with a new token. Reapply your changes as needed, then try the operation again using the new token. </p>
                */
            UpdateToken?: string;
            /**
                * <p>The Amazon Resource Name (ARN) of the firewall.</p>
                */
            FirewallArn?: string;
            /**
                * <p>The descriptive name of the firewall. You can't change the name of a firewall after you create it.</p>
                */
            FirewallName?: string;
            /**
                * <p>A setting indicating whether the firewall is protected against changes to the subnet associations.
                *          Use this setting to protect against
                *          accidentally modifying the subnet associations for a firewall that is in use. When you create a firewall, the operation initializes this setting to <code>TRUE</code>.</p>
                */
            SubnetChangeProtection?: boolean;
    }
    export namespace UpdateSubnetChangeProtectionResponse {
            /**
                * @internal
                */
            const filterSensitiveLog: (obj: UpdateSubnetChangeProtectionResponse) => any;
    }
}

declare module '@aws-sdk/client-network-firewall/node_modules/@aws-sdk/client-network-firewall/dist-types/models/NetworkFirewallServiceException' {
    import { ServiceException as __ServiceException, ServiceExceptionOptions as __ServiceExceptionOptions } from "@aws-sdk/smithy-client";
    /**
        * Base exception class for all service exceptions from NetworkFirewall service.
        */
    export class NetworkFirewallServiceException extends __ServiceException {
            /**
                * @internal
                */
            constructor(options: __ServiceExceptionOptions);
    }
}

